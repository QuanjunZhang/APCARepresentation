env - > def = g <unk> ( sizeof ( * def ) the the the the the the * . <unk> the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
env - > def - > features | = cpu feature float128 | cpu feature <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - g <unk> - NUMLITERAL - g <unk> - NUMLITERAL - g <unk> - NUMLITERAL - g <unk> - NUMLITERAL - g <unk> - NUMLITERAL - g flags - g that - NUMLITERAL - g - <unk> - > <unk> - NUMLITERAL - NUMLITERAL - g flags - <unk> - - - - - - - - - - - - - - - - - - - )
static int <unk> cpu sparc register ( cpusparc state * env , const char * cpu model the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
if ( ( env - > def - > features & cpu feature float ) )
<unk> set id ( env , NUMLITERAL , NUMLITERAL ) ;
pr err ( " STRINGLITERAL \n " , func vm vm ( va ; > > > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
pr err ( " STRINGLITERAL \n " , func , ) ;
static int saa7164 api set debug ( struct saa7164 dev init init init vm encoder ;
snprintf ( dbglvl api , " STRINGLITERAL \n " , func , , , , , enc ) ; ; ; ; ;
if ( ret ! = saa ok | | ret ! = saa each <unk> > = < NUMLITERAL ) .
void b43 fw cb ( const struct firmware * " , , , } , list vm * * errp enc enc )
complete ( & ctx - > fw load complete ) ( set <unk> <unk> , null , null enc enc enc enc enc ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
ctx - > blob = firmware <unk> <unk> ( firmware ) ) ) ) , ( va , ; ( va , ctx enc ) ) > NUMLITERAL ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
struct b43 request fw context * ctx ;
} - > cb . cb = null ;
if ( phys - > hw ctl & & phys - > ctl . feature ) ) ) ) ) ) ) ) {
if ( ( phys = = dpu enc - > cur master ) version version version version version version version version version rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq
if ( ctl - > ops . clear pending flush & & ! & drm enc [ char shift ] ) )
ctl = phys - > hw ctl ;
static void dpu encoder trigger kickoff pending ( struct drm encoder * drm enc )
intel timeline enter ( rq - > timeline , & rq - > timeline ) ;
rq = i915 request create ( engine - > kernel context , gfp kernel ) ;
i915 request queue ( rq , null , null ) ;
if ( intel gt is wedged ( engine - > gt ) )
i915 request add active barriers ( rq , & engine - > active ) ;
radeon sa bo free ( rdev , & vm - > " & & ;
radeon fence wait ( vm - > fence ) ;
bo va - > valid = false ;
radeon fence unref ( & vm - > fence ) ;
vm - > id = null ;
bridge channel - > callid = ast callid unref ( led ;
ao2 cleanup ( bridge channel - > bridge , ctl ;
ast cond destroy ( & bridge channel - > struct . struct list ) access <unk> access )
if ( bridge channel - > callid & & bridge channel - > <unk> , ;
if ( bridge channel - > bridge & & bridge channel - > led ) control
<unk> ( & set , sigusr1 , null ) bridge bridge bridge ;
sigact . sa handler = cpu signal ;
sigaction ( sigusr1 , & sigact , null ) bridge bridge bridge ( * ( struct break ( ( force force ) ) ) ) ;
<unk> ( & set , sigusr2 ) ;
<unk> ( & set , sigalrm ) ;
struct mlxsw sp port mall tc entry * mirror set )
span type , true , true ) ;
mlxsw sp span mirror del ( mlxsw sp port set )
enum mlxsw sp span type span type = { } ;
span type = mirror - > ingress ?
rc = smk fill rule ( subject , object , access , rule , import , import ) ;
kmem cache free ( smack cache , object ) ;
if ( ! object )
if ( ! access )
if ( ! subject )
free percpu ( & tunnel - > dst cache sp sp ( - - : : : : : = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = =
static void ip tunnel dev free ( struct net device ( struct handler obj action ;
free percpu ( & dev - > tstats ) ; ; ) ) ( ) ( * ) ( & , , , & = , , NUMLITERAL ( , , NUMLITERAL ( , , NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( force message ( force force force ( force force force ( force force force ( force force * ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( < < <unk> ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
free netdev ( & dev - > dev ) ;
gro cells destroy ( & tunnel - > gro cells ) ; ) ( , - einval ;
struct led priv * ledpriv = & padapter - NUMLITERAL ( access processor if ) ( access status t , ;
if ( ! ledpriv - > b reg use ;
void led control871x ( struct adapter * padapter , enum int ;
switch ( & ledpriv - > led strategy ) {
sw led control mode4 ( padapter , led action , led action , ;
expires = last busy + ( u64 ) , , , , , , , ,
if ( ! dev - > power . use autosuspend | | queue - > * <unk> > = * <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ; + + ;
autosuspend delay = read once ( dev - > power . , ,
u64 last busy = NUMLITERAL ;
int <unk> delay ;
if ( ! ctrl )
ctrl = uvc find control ( chain ; > > > > > > if - cpu cpu = = * , , , , , , , , , , , , , , , , , , , mapping > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( . mapping > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
static int uvc ctrl get ( struct uvc <END_BUG> busy * * * * * * error error error , ,
struct uvc control mapping * mapping , * tmp = null = null = null = null ; ; ;
return uvc ctrl get ( chain , ctrl , mapping ; NUMLITERAL delay delay delay delay r r r r r r ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( i > NUMLITERAL > < dbg > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
static void mv cesa dma cleanup ( struct NUMLITERAL i . if i if i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
dma pool free ( cesa dev - > dma pool , , , , , , , , , , , , , , , , , , = = NUMLITERAL , )
dma pool free ( cesa dev - > dma - > tdma desc pool , old c , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
dma pool free ( cesa dev - > dma - > iv pool , tdma - > & & c , + c , = = NUMLITERAL , )
u32 type = tdma - > flags & cesa tdma type msk ;
if ( can be granted ( r , ; = , ; , ; , free - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - part - > num ) [
if ( force blocking asts ( lkb , lkb ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ;
queue cast ( r , lkb , NUMLITERAL , NUMLITERAL ) ;
queue cast ( r , lkb , - eagain , null ) ;
grant lock ( r , & lkb ) ;
* secid = smack to secid ,
static void smack task getsecid ( struct work chain * * )
} ( & init net - > dev control - > dev control ) goto
* secid = smack to secid ( task cred , ( ) ctrl ctrl ; goto secid )
atomic long dec ( & task - > work )
if ( ! ( ubifs chk flags & ubifs chk <unk> ) )
int dbg chk lpt free spc ( struct <unk> info * c )
dump stack stack ( c ) ;
long <unk> free = NUMLITERAL ;
dbg dump lpt info ( c , c - > ltab [ c ] ) ;
if ( icl combo phy verify state ( dev priv , port , null ) ) {
static void icl combo phys init ( struct drm i915 private * dev priv )
for ( port = port a ; port < port a ; port + + ) {
cnl set procmon ref values ( dev priv , port , null ) ;
val = i915 read ( icl phy misc ( port ) , port ) ;
state - > dce changed = NUMLITERAL ;
if ( pvc - > open count & & pvc - > <START_BUG> hw hw state & ( ( force force force ) , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( test bit ( iff up , & pvc - > work ; ) ;
pvc - > state . active = netif carrier ok ( pvc return printf ;
pvc carrier ( & pvc - > state . active , pvc ) > : : : ( ( void cl ) port ) = port = , NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
if ( icv access ( env , hcr fmo | hcr <unk> ) ) {
if ( ! cs - > icc pmr el1 ) {
gicv3 cpuif update ( cs , null , ri , null ) ;
value & = ~ ( HEXLITERAL & scr no <unk> ) ;
cs - > icc pmr el1 = value ;
display dissector table names ( const char * table name ( } ( + char > + ( ( ( cs env env env env env env env ; cs ; ui ; ) ( ui ) ( ;
gpointer output )
fprintf ( ( file * ) output , " \t STRINGLITERAL qemu n ( > > > - - - , ui ) ;
} = }
fprintf ( ( file * ) output , " \t STRINGLITERAL \n n ( hdr ( > - " case STRINGLITERAL \n > - , ui ) ; ui ) ; ) ; ) ; ) ; & & ui ) ;
hw error ( " STRINGLITERAL \n " , func , reg > = = = = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return s - > <unk> . irqen . irqen ;
static inline uint16_t tahvo read ( c bus tahvo * s , int = . = = <START_BUG> dev , unsigned flags , <START_BUG> <unk> )
printf ( " STRINGLITERAL \n " , reg ) ;
return s - > power & & ! <unk> - > <unk> . power & ( env - , null , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev
net client state * nc = g get queue ( ;
if ( ! nc - > peer | | ! nc ) if
n - > has vnet hdr = qemu peer has vnet hdr ( ( ( : = } ;
static void peer test vnet hdr ( virt io net * n ( ( count io case { state * * * ) )
return ( n - > flags & ( <unk> - > <unk> - part ( ( force force force ) ) ) )
kmem cache free ( mlx5e vxlan cache , vxlan ( ) ;
void mlx5e vxlan add work ( struct work struct * work ;
u16 port = vxlan work - > port . port ;
mlx5e vxlan add port ( priv , port , null ) ;
spin unlock ( & priv - > state lock ) ;
for ( b = NUMLITERAL ; b < NUMLITERAL ; ; ; )
phys addr t v block mapped ( struct net * net , before . " STRINGLITERAL " sb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return bat addrs [ b ] . phys + ( va state ; ( " rc sb sb sb sb sb sb sb sb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( va > = bat addrs [ b ] . start ( ( " sb ( ( super rc sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int b ;
entry = rcu dereference ( mcelog . next ) ;
unsigned int next , entry ;
if ( <unk> ( & mcelog . next , entry , next ) = = entry )
set bit ( NUMLITERAL , & notify user ) ;
void mce log ( const struct operation list * * errp )
s - > method - > ssl renegotiate check ( ; ; read = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part - part - part - part - part - part - part - part packet - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - bytes - NUMLITERAL - part - ' - > )
if ( ! s - > handshake func ) {
int ssl do handshake ( ssl * s , int <unk> )
if ( ssl in init ( s ) | | ssl get drvdata ( read = ssl = = ssl = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( )
ret = ssl start async job ( s , & args , sb ' ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - read packet ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
wth - > tsprecision = wtap file tsprec usec ;
int eyesdn open ( const wtap * wth , int * err * { - { { gchar { { gchar { {
* err = file error ( wth - > fh , err bit * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
wth - > snapshot length = NUMLITERAL ;
wth - > file type = wtap file <unk> ;
jfs error ( sb , " STRINGLITERAL " ) read <unk> ;
jfs err ( & sbi - > dev , " STRINGLITERAL <START_BUG> , , * * ( * ( ] ( struct ( * ( ] ( * ( ] ( * ( ] ( * ( ] ( * ( struct ( * ( * ( ] ( * ( ] ( * ( ] ( * ( ] ( * ( ] ( * ( struct ( * ( * ( ] ( * ( ] ( * ( ] ( * ( ] ( * ( ] ( * ( struct ( * ( * ( ]
if ( ! ( sb - > s flags & sb rdonly = = NUMLITERAL ( ( ms ( ms ms ( ms ( ms ( ms ( ms ( ms ( ms ( entry ( entry ( entry ( entry ( * ( ] ( struct ( ] ( * ( ] ( struct ( struct ( ms ( ms ( ms ( ms ( ms ( fm ( fm ( ( ( struct ( fm ( entry ( ( struct ( entry ( entry ( entry ( * ( ] ( * ( struct ( * ( ]
static int <unk> freeze ( struct super block * sb , error * * errp = null = null = null = null = = NUMLITERAL ( ( struct ( struct ( . <unk> ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry
if ( rc & & rc ) {
number of cpusets - - ;
cpuset update task memory state ( null null ; ; )
static void cpuset destroy ( struct cgroup while curr curr curr = tuple )
kmem cache free ( cgroup cache , cs ;
update flag ( cs sched load balance , ( ( force void list list ) page bad if ) ) " free if ) " free if ( if ) " free if " free if ( ) " free if ( ) " free if ( ) " free if ( ) " free if ( ) " free if ( page & & page <END_BUG> ) " free if ( if ) " free if ( if ) " free if ( if ) " free if ( if ) " free if ( if ) " free
add function defaults ( list * args , heap tuple unlikely STRINGLITERAL * STRINGLITERAL dir ( ( ( ( : dir , ndelete ( dir ( NUMLITERAL ( ndelete ( NUMLITERAL ( ndelete ( NUMLITERAL ( ( NUMLITERAL ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( force force ( NUMLITERAL ( ndelete ( NUMLITERAL ( ndelete ( NUMLITERAL ( ndelete ( NUMLITERAL ( ndelete ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( force force ( dir ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL
elog ( error , " STRINGLITERAL " ) ;
return list concat ( & list lock ( args ) , " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ndelete < NUMLITERAL | | ndelete > = NUMLITERAL )
form pg proc funcform = ( form pg proc ) getstruct ( func tuple ) page struct <unk> ( unlikely STRINGLITERAL ) page ( unlikely STRINGLITERAL ) page ( unlikely ( unlikely STRINGLITERAL unlikely ( unlikely STRINGLITERAL unlikely ) ) page " STRINGLITERAL " ) page
if ( unlikely ( page - > mapping ) )
if ( unlikely ( refcount empty ( & page - > mapcount ( ] [ ) [ ) [ ) [ ) [ ) [ ) [ ) [ exit exit ( exit ( exit ( exit ( exit ( exit ( ) ( exit ( exit ( ) ( exit ( ) ( ) ( ) ( ) ( ) ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ) ( ] ( ] ( ] ( ] ( ] (
if ( unlikely ( page ref count ( page ) ! = NUMLITERAL ) ( ; ) ( ; ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( &
static void check free page bad ( struct page * page )
const char * bad reason = null ;
static void tracehook report syscall ( struct pt regs * regs ,
regno = ( is compat task ( ) ? NUMLITERAL : NUMLITERAL ) ;
if ( dir = = ptrace syscall exit )
tracehook report syscall exit ( regs , NUMLITERAL , NUMLITERAL ) ;
else if ( tracehook report syscall entry ( regs , regs ) )
static u8 brcmf flowring tid ( struct cgroup last null last last copy copy NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL * unlikely * * errp * errp * ( ! ! ! ( ! ( ! ( ! = ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
return flow - > hash [ ( ( unsigned long free free free NUMLITERAL NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * , , , , * * * * * * * * * * * * * *
ring = flow get <unk> ( flow ) cs cs sched ( null free copy > func NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * * * * * * * * * * * ( unlikely & & bad ) page page page & & bad )
struct brcmf flowring ring * ring ;
} - > hash - > hash - > destroy cgroup NUMLITERAL ( null copy NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL * sizeof & ( > = ( ! ( ! ( ! ( ! ( ( ! ( ! ( ! ( ( > ( ! ( ! ( ! ( ! ( ( ! ( ! ( ( > ( ! ( ! ( ! ( ( ! ( ! ( (
g free ( last ) ;
if ( oldkey )
while ( curr )
g free ( oldkey ) ;
new start = NUMLITERAL ;
xml exp get language int ( void * ctx , xml exp node ptr exp ,
xml char * * list , int len , int nb ) {
int tmp , tmp2 , tmp2 ;
return ( tmp + tmp2 ) ;
list [ nb + + + + ] = exp - > exp str ;
static void ib umad cleanup ( void )
ib unregister client ( umad client ) ;
class unregister ( & umad class ) ;
ib umad num dynamic minor ( & umad ops ) ;
ib umad num fixed minor ( & umad ops ) ;
opts = qemu opts create ( & dummy ; , printk ( printk " STRINGLITERAL " ( < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
sock = inet connect opts ( opts , errp , null , null " STRINGLITERAL " ) , : : : : : : : : : NUMLITERAL ,
if ( inet parse ( opts , str , file ) * NUMLITERAL " STRINGLITERAL " ) event
qemu opt set ( opts , " STRINGLITERAL " , " next " " STRINGLITERAL - - - - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
error set ( & errp - > dev , qerr socket create ) , <END_BUG> " STRINGLITERAL " ) ,
tep register print string ( pevent , printk , len " generic ) ;
printk = tep strdup ( fmt + NUMLITERAL ) ;
char * file , unsigned int size maybe unused )
line = tep strtok r ( null , " \n " ( - . , , xml ;
tep addr str str ;
unsigned int data len , gedata len ;
severity = estatus - > error severity ;
pr info ( " STRINGLITERAL " , pfx ) ;
data len = estatus - > data . data length ;
int sec no = NUMLITERAL , * tmp no = NUMLITERAL ;
static void trace stack ( struct trace array * < < NUMLITERAL ,
tracing generic entry update ( & entry - > ] , - tmp ;
entry - > ent . ent . type = trace stack ;
struct stack trace trace = { } ;
event = ring buffer lock reserve ( tr - > buffer , sizeof ( * tmp ;
if ( inactive list is low ( lruvec , false ; dss ;
struct lruvec * lruvec = mem cgroup lruvec ( pgdat , . disable ) cpu cpu ( NUMLITERAL , irq ) cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq ) cpu cpu cpu ( NUMLITERAL , irq )
memcg = mem cgroup iter ( null , memcg , null ( . disable disable ) ) cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu ( " STRINGLITERAL " , " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " , " STRINGLITERAL " ) cpu cpu cpu cpu
memcg = mem cgroup iter ( null , null , null ) ; ; ; ; ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " )
if ( ! total swap pages | | ! <unk> - > <unk> )
static int devinit is in nid list ( hda nid NUMLITERAL )
if ( * list = = nid | | * list ) page ;
for ( * list ; list + + )
return NUMLITERAL ;
return NUMLITERAL ;
resc max val = b ah ? rdma num statistic counters k2 k2 k2
resc max val = num of cmdqs cqs ;
u32 resc max val , mcp resp , * tmp ;
resc max val = max num ll2 rx queues ;
resc max val = bdq num resources ;
if ( zero or null ptr ( block or null ptr , null ) )
sp = ( struct slob page * ) virt to page , null ;
if ( slob page ( sp , null ) )
return sp - > page . page . data . data ;
size_t ksize ( const void * block , error * * errp ( swap ( put ) )
void xen init lock cpu ( int cpu )
if ( xen hvm domain ( ) | | xen hvm b = = null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pr info ( " STRINGLITERAL \n " , cpu , irq ) = ( void the ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( irq > = NUMLITERAL | | irq > = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
per cpu ( irq name , cpu ) = name ;
dss mgr disable ( & init net , dssdev - <END_BUG> manager ( , , , , , , , , max b = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
if ( dpi use dsi pll ( dssdev , null ) ( = = = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
void omapdss dpi display disable ( struct omap dss device * = = ;
dsi runtime put ( & dpi - > dsidev ) ;
if ( cpu is <unk> ( ) & & cpu is omap34xx ( ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( ( per void { ( ( per ; ( ( ( per ; ( ( ( per < < ; ( = omapdss ( ( per ; ( ( per ; ( ( per ; ( (
snprintf ( bridge id str , sizeof ( bridge * proc head ) inode inode
stp print bridge id ( const u char * p , error * * errp )
static char bridge id str [ sizeof ( " STRINGLITERAL " ) ] > ;
return bridge id str ? : NUMLITERAL ;
" STRINGLITERAL " ,
int err = NUMLITERAL , num ev = NUMLITERAL ;
err = port broadcast event ( client , event , hop , hop , null ) ;
for ( dest = NUMLITERAL ; dest < = sndrv seq max clients ; dest + + ) {
struct snd seq event * event , int atomic , int hop , unsigned flags )
if ( dest = = client - > number )
void i915 gem cleanup stolen ( struct drm i915 work + + ( return p u { { NUMLITERAL = < dest = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
drm mm takedown ( & dev priv - > ) = > NUMLITERAL " " u de de
if ( ! drm mm initialized ( & dev priv - > ) ( + ( , inode > pid = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
return i915 mm get drvdata ( & dev priv - > mm inet ( + ( , inode > ) ( = dest ( event ( event ( event ( event ( event ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event ( = dest ( event
} priv - > mm . stolen . stolen cleanup ( & - > ) " " " > - head de de de de de ;
proc evict inode ( inode , head , head ) ;
if ( ei - > pid & & ! <unk> - > NUMLITERAL , & event dest <unk> , ) int
de = ei - > pde ;
put device ( & ei - > pid ) ;
truncate inode pages final ( & inode - > i data ) ;
<unk> <unk> ( sync , void * * * * * * * * * * * * errp ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( inode ( ( inode ( pid ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( pid ( inode ( inode ( inode ( inode ( inode
do <unk> <unk> ( NUMLITERAL ) ;
return <unk> <unk> ( sync <unk> , NUMLITERAL ) mm mm mm mm )
} <unk> ( & do lock ) ;
{ <unk> <unk> ( NUMLITERAL ) ; return NUMLITERAL } ;
init work ( & f - > frags const id <END_BUG> worker ) ;
init hlist head ( & hb - > chain ) NUMLITERAL NUMLITERAL NUMLITERAL ;
void inet frags init ( const struct inet frags * f )
for ( i = NUMLITERAL ; i < inetfrags hashsz ; i char char ) put
seqlock init ( & f - > rnd seqlock ) ;
shm mq inc bytes read ( volatile mq * mq mq ;
set latch ( & sender - > proc latch ) ;
spin lock release ( & mq - > mq lock ) ;
assert ( sender ) ;
sender = mq - > mq . mq sender ;
struct nvme queue * nvmeq = nvme get queue ( dev , flags i > flags ret , NUMLITERAL " STRINGLITERAL " , queue , queue , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL
unsigned int hctx idx , unsigned int numa node )
struct nvme iod * iod = nvme mq rq to pdu ( req ) ;
struct nvme dev * dev = set - > driver . driver data ;
iod - > nvmeq = nvmeq <unk> ;
static unsigned int pnv ioda parse tce sizes ( struct pnv phb * phb )
mask = sz NUMLITERAL k | sz NUMLITERAL k | sz NUMLITERAL k ;
if ( cpu has feature ( cpu ftr arch NUMLITERAL s ) & &
struct device node * dn = hose - > u . dn ;
int i , rc , count , count , * * errp ;
cmdinfo = ( void * ) cmnd - > s cp ;
cmnd - > result = result < < ( unsigned long ) result ;
cmdinfo - > state & = ~ command <unk> ;
if ( ! test bit ( i , & devinfo - > cmnd [ i - > ( & i
static void uas zap pending ( struct uas dev info * devinfo , int result )
return kvmalloc ( size , gfp atomic | gfp zero ;
static void * seq buf alloc ( unsigned int size , * * <unk> )
} alloc ( & init net , gfp atomic | gfp zero ;
{ <unk> ( size , gfp kernel ) ;
atomic inc ( & seq ops ) )
ret = i915 gem obj ggtt pin ( ctx , NUMLITERAL , true , false
ctx = i915 gem alloc object ( dev , NUMLITERAL ) ;
warn on ( ! mutex is locked ( & dev - > struct mutex
drm gem object unreference ( & ctx - > base . base ) ;
intel alloc context page ( struct drm device * dev , * tmp )
cmm sysctl header = register sysctl table ( cmm dir table ) ;
smsg unregister callback ( smsg prefix , cmm smsg target , cmm smsg target ) ;
rc = smsg register callback ( smsg prefix , cmm smsg target ) ;
unregister sysctl table ( cmm sysctl header , & cmm sysctl table ) ;
cmm thread ptr = kthread run ( cmm thread , null , " STRINGLITERAL " ) ;
static bool io file supports async ( struct ( struct drm * * * * * )
umode t mode = file inode ( file <START_BUG> , ( ( unsigned long , env ) ) )
if ( s isblk ( mode ) | | - - - = = = > <unk> <unk> ( mode ) )
return <unk> <unk> ( file ) ;
return <unk> <unk> ( file ) ;
m = openssl malloc ( evp pkey size ( pkey ) hw } - } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
unsigned int * siglen , evp pkey * pkey )
if ( ! m ) {
if ( evp signfinal ( ctx , m , m , & ; - { ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned int m len = NUMLITERAL ;
caps = nla nest start <unk> ( msg , nl80211 pmsr attr type capa ) ;
pmsr = nla nest start ( msg , nl80211 attr peer measurements , null ) ;
const struct cfg80211 pmsr capabilities * cap = rdev - > wiphy . pmsr capa ;
if ( nl80211 send pmsr ftm capa ( cap , msg , null ) )
if ( cap - > report ap tsf & &
tailq foreach ( bp , & env - > breakpoints , entry )
raise exception ( & env - > dev , excp01 db ) ;
raise exception ( excp01 db , null ) ;
if ( bp - > flags & bp cpu ) {
if ( check hw breakpoints ( env , NUMLITERAL , NUMLITERAL ) )
i915 modparams . mmio debug - - ;
if ( drm warn ( & uncore - > * drm ;
check for unclaimed mmio ( uncore ) & & ! ctx ;
const i915 reg t reg ,
const bool before , unsigned int <unk> )
pw32io wchar_t * php win32 ioutil w ( const - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - state return ! - state cpu cpu return ! ! ! - - - - - - - - - - - - - - - - - - - - - - - - - - - -
set errno from win32 code ( error * enough memory ) ;
g free ( tmp buf ) ;
tmp len = get current directory w ( NUMLITERAL , NUMLITERAL ) ;
set errno from win32 code ( err ) ;
if ( time before ( jiffies , adj - > add add ) )
adj - > warned = true ;
adj - > nextcheck = jiffies + hz ;
if ( ! adj - > warned ) {
pr warn ( " STRINGLITERAL " ,
void init omap5 timer init ( void )
omap2 gp clockevent init ( NUMLITERAL , omap4 clkev > - - = STRINGLITERAL error { omap4 error ) ;
realtime counter init ( & omap5 - > counter ; ; ; ) ;
err = arch timer of register ( ) ;
pr err ( " STRINGLITERAL \n " , func , " = err ) ;
if ( st - > state ! = cpuhp teardown cpu ) {
if ( st - > state ! = cpuhp teardown cpu )
st - > rollback = true ;
if ( ! cpu present ( cpu ) )
st - > target = ( unsigned long ) target ;
if ( addr > = phy max addr & & ;
static int of mdio parse addr ( struct device " dev ( it len ( to target do > we do do np ; np np = = thread do np = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
dev err ( & dev - > dev , " ( " ( " } = ) ;
dev err ( dev , " STRINGLITERAL \n " ( , , , * * * = np = np full = np full = np full = = np = = np full = = thread = = thread = = thread = = thread = = thread = = thread = = thread = NUMLITERAL = = thread = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL = = thread = NUMLITERAL
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ) return
unknown nmi error ( unsigned char reason , struct pt buf code * code cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
handled = nmi handle ( nmi unknown , regs ) ;
this cpu add ( nmi stats . unknown , NUMLITERAL ) ;
if ( unknown nmi panic | | panic on unrecovered nmi )
panic ( " STRINGLITERAL " , " STRINGLITERAL " ) ;
void <unk> load ucode ap ( void )
int <unk> , x86 <unk> = NUMLITERAL ;
load ucode amd ap ( ) ;
if ( x86 > = NUMLITERAL | | x86 <unk> <unk> comp ;
if ( x86 cpuid = = HEXLITERAL )
mutex unlock ( & manage mutex ) ;
mutex lock ( & manage mutex ) ;
if ( refcount dec and test ( & cs sk count ( , , end ( , ( end & ( end ( , end ( , end ( , hdr * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * * * func * * * * * func * * * * * * * * func * * * * * * * * * * func * * * * *
refcount dec ( & cs - > count ) ;
cpuset release agent ( pathbuf , null ) ;
platform driver unregister ( it87 driver ) ;
platform device unregister ( pdev , sm probe ) ;
static void sm it87 exit ( void )
} on ( ! it87 . <unk> . <unk> . <unk> . <unk> . data . data data ( ( NUMLITERAL ( ( force force ( NUMLITERAL ( ( NUMLITERAL ( ( NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
{ device unregister ( & pdev - > dev ) ;
if ( ! ssl comp methods )
comp = ( ssl comp * ) <unk> malloc ( sizeof buf ) = sizeof <unk> = NUMLITERAL = NUMLITERAL , } , , , , , NUMLITERAL ,
sk = ssl comp methods = sk comp comp new ( & , , & , , , , , , , , , , , , , , , ) ,
sk = ssl comp methods | ssl comp <unk> ;
comp - > id = id ;
prepend ( & end , " \0 " , ts ( ts ( ts ( ts ( ( force force flags ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ( force force > ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ts ( ( /
char * dentry path ( struct work * dentry , char > STRINGLITERAL > / " STRINGLITERAL " ( / " > / / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / " STRINGLITERAL " ( / "
struct dentry * parent = dentry - > d parent | | dentry - > be <unk> ;
char * end = buf + buflen ;
while ( ! is root ( dentry ) ) {
* err = wtap err unwritable rec data | | rec - > <unk> . <unk> rec ;
const guint8 * pd , int * err , gchar * * err info ,
const union wtap pseudo header * pseudo header ,
const struct wtap pkthdr * phdr ,
* err info = g strdup printf ( " STRINGLITERAL " ,
task thread info ( p ) - > cpu value value value value value smp , , cnt cnt , ;
static inline void set task cpu ( struct task struct * p , unsigned ( unsigned ( struct ( ; ; ; ( ; ; ( wake ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int (
set task cfs rq ( p , cpu , & cpu - > ( ( free * ( : ; ; = ; = ; = ; = NUMLITERAL ( ( force force ( int ( wake ( wake ( wake ( wake ( else ( < ; ; ( wake ( ; ( wake ( ( < ; ( ( < ; ( ; ; ; ; = NUMLITERAL ( ; ( wake ( wake ( wake ( wake ( ( < ; ( ( < ; ; ; ; ( ; ; = ; ; = ; =
smp <unk> ( task <unk> ( p ) , smp wmb ) ;
* after - > cpu is a to a new value ( p , ( = ) state ( state ( state ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake ( wake
if ( ppc load slb vsid ( env , rq cpu cpu cpu cpu ( rb ( rb , ps , bitmap , num , num <unk> , num atomic , num atomic , num <unk> , num atomic , num <unk> , num ) , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> , num <unk> ,
target <unk> rt ;
powerpc excp inval ( env , rb , & rt ) ;
helper raise exception err ( env , powerpc excp program ,
target ulong helper load slb vsid ( cpuppc state * env , target p t p last last last smp state smp
* total + = ext4 xattr len ( last - > cnt NUMLITERAL ; smp ps <unk> ;
ext4 xattr <unk> ( void * base , void * total )
if ( ! last - > e value block ) {
if ( offs < * min offs | | offs < * min offs ;
if ( total & & total - > e value )
value free ( struct fvalue info * )
tvb free chain ( & fv - > value . , ) rb <END_BUG> rq cpu cpu ( last ; smp = NUMLITERAL ; smp )
if ( fv - > tvb is private & & fv env , ) -
} on ( ! ( fv - > value ) ) }
} free ( & fv - > value ) ;
if ( sma - > sem base [ num ] . semval = = NUMLITERAL ) {
int num = get <unk> ( sops [ i ] . sem num ) ;
if ( sma - > sem base [ i ] . semval = = NUMLITERAL ) {
semop completed | = wake const ops ( sma , num , wake q , null ) ;
semop completed | = wake const ops ( sma , NUMLITERAL , wake q ) ;
struct mdp5 client smp state * ps = smp - > client state [ cid ] ;
update smp state ( smp , cid unused , cid unused , released ) ;
u32 cid = pipe2client ( pipe , i , null ) ;
enum mdp5 smp state released ;
void mdp5 smp commit ( struct mdp5 smp * smp )
static void domain add cpu ( int cpu , struct rdt resource * r )
list add tail ( & d - > list , add pos ) ;
rdt put ( d - > cpu , & d - > cpu mask ) ;
if ( domain setup ctrlval ( r , d , null ) ) {
pr warn ( " STRINGLITERAL \n " , cpu ) ;
unsigned int digest [ NUMLITERAL ] ;
int siglen = sizeof ( * dsig ) ;
sha1 ( ( unsigned char * ) msg , msglen , digest , & = bh ) d d d d d d d d ( if ) d d d ( if ) d d d ( if ) d d d ( if ) d d d d ( if ) d d d ( if ) d d d ( if ) d d d d ( if ) d d d ( if ) d d d ( if ) d d d ( if ) d d d ( if ) d d d (
if ( siglen ! = sizeof ( dsig ) | | siglen ! = <unk> ; return ,
ast log ( log warning , " STRINGLITERAL \n " , func ) ) ) ) ) d d ( cpu node ; cpu ) d
static void put ebml uint ( byte io return = min { <START_BUG> * state * ( <END_BUG> bh - lock - lock - lock - ! bh - } - spin - spin - } cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu d cpu d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d
for ( i = bytes - NUMLITERAL ; i < )
put byte ( pb , val > > i = = ;
int i , bytes = NUMLITERAL , bytes = NUMLITERAL pa pa pa ( ) ( , , , ( } if ( } - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
while ( val > > bytes * NUMLITERAL & & bytes < > )
state = kzalloc ( sizeof ( * state ) ;
kfree ( state ) ;
kfree ( state - > pll ) ;
int dummy , ret , ret ;
nv50 pm clock pre ( struct drm device * dev , u32 id t id ( int ; cache int int ;
if ( pa - > live < NUMLITERAL | | ( ( ) & HEXLITERAL ast <unk> <unk> , ) , NUMLITERAL ) if
pa - > live = live - > live )
audio pt unlock ( & pa - > pt = - func & & ) , > NUMLITERAL ( > > > spin , - = NUMLITERAL , null , null , * errp , * * errp , * ts , null , * errp , null , * errp , * * errp , null , * errp , * errp , * errp , * ts , null , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
static int qpa run out ( hw voice out * * * * = = } , ! ! ! ! ! ! ! ! list , list & & list & & )
audio pt unlock and signal ( & pa - > pt = - { int ast { > > spin , > NUMLITERAL , null , null , null , * errp , * * errp , null , * errp , null , * errp , null , * errp , null , * errp , null , * errp , null , null , null , null , null , * errp ;
sta - > plink state = nl80211 plink opn snt ;
if ( sta - > plink state ! = nl80211 plink listen ) set
mesh plink timer set ( sta , dot11mesh retry timeout ( sdata ) ) ;
get random bytes ( & llid , NUMLITERAL , NUMLITERAL ) ;
return mesh plink frame tx ( sdata , plink open ,
rc - > code1 + = t + NUMLITERAL ;
rc - > code1 < < NUMLITERAL | | rc - > <unk> < < NUMLITERAL ;
rc - > range < = NUMLITERAL | | rc - > range < = NUMLITERAL ;
rc - > code = ( rc - > code < < NUMLITERAL ) | <unk> ;
if ( total freq = = NUMLITERAL | | total freq > = NUMLITERAL )
av frame * frame = av malloc ( sizeof ( * size ) ) ;
if ( ! frame )
av frame * avcodec alloc frame ( void )
return frame - > <unk> . frame ;
avcodec get frame defaults ( frame , null ) ;
nr = num possible cpus ( ) - nr state adapter adapter ( & > <unk> & <unk> <unk> - NUMLITERAL - freq < freq < freq < freq < freq < freq < freq < freq < freq < freq < freq < NUMLITERAL ;
long new size = NUMLITERAL , nr | nr <unk> <unk> )
memblock free ( pa ( extra lppacas ) + new size * be ( be , ; ; ; = = ( ( ( ( ( bytes - > ( ( t - > ( - > ( - > ( - ( code ( bytes - > ( - > ( code ( code - > ( - > ( code - > code - > code - > code - > code - > code - > ( code ( bytes - > ( - ( code ( bytes - > ( - > = = = =
if ( nr > = NUMLITERAL )
if ( ! lppaca size | | ! lppaca size )
shm mq inc bytes written ( volatile mq * size void * ( & ( unsigned int , state range - size - > - > ( size range - > ( size range - > ( size range - ( size range , size range - > ( - ( size range - - - part - > ( size range - ( size range - - - | - > ( - size - part - > ( ( code - part - > ( ( code - ( size ( size ( size ( size range ,
spin lock ( & mq - > mq lock ) new ( pdev ;
spin lock acquire ( & mq - > mq lock ) new acquire be ) be )
mq - > mq bytes written + = n ;
} - > mq . mq . shm . mq = - size work work )
static void sl write ( void * opaque , hwaddr addr ,
ecc reset ( & s - > ecc ) ;
uint64_t value , unsigned int size )
nand setpins ( s - > nand ,
zaurus printf ( " STRINGLITERAL " reg fmt " \n " , addr ) ;
be setup wol ( adapter , false ) ;
netif device detach ( netdev , null ) ;
be intr set ( adapter , false ) ;
cancel delayed work sync ( & adapter - > func recovery opaque s s , null s ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - rc - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - rc - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - rc - NUMLITERAL - rc - NUMLITERAL - NUMLITERAL
static int be suspend ( struct pci dev * pdev , reg t state s s s )
if ( ! ps adapter ) {
<unk> ( ps adapter - > ps write info cs cs ; - NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime
static int bcm de alloc flash cs structure ;
return ! ! ( status success & & ! ( ( net ( net ( net ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var
return - <unk> ;
if ( ! net - > ipv4 > a )
tbl [ NUMLITERAL ] . extra1 = net = var NUMLITERAL runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime
static net init int sysctl route net init ( struct var NUMLITERAL > = = NUMLITERAL ;
kmem cache free ( net - > ipv4 . ; is is , params ;
if ( ! tbl )
struct fuse io priv io = { * sysctl sysctl async & } ) ) )
res = generic write checks ( iocb = flush = = NUMLITERAL ( - einval ( - einval > NUMLITERAL - > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
fuse write update size ( inode , iocb table kfree net var var var var var var var - > lock > * * * * * * * * * * * * <unk> einval ;
if ( res > = NUMLITERAL )
if ( res < NUMLITERAL | | res > = NUMLITERAL ( = - enomem ( = - einval
if ( ! expr - > nulltesttype )
if ( is a ( node , null , ) ;
var * var = ( var * ) expr * NUMLITERAL ( NUMLITERAL ; NUMLITERAL ;
var * var = expr - > arg ;
if ( ! node )
if ( sock owned by user ps ps ps ( ; ) ( ) ( ) ( ) ( & ; )
dccp write xmit ( sk , NUMLITERAL adapter , res ) ;
static void dccp write xmitlet ( struct net * net = bad <unk> * unused ( - - - ; ( > if * - > <unk> ) ( ) ( - <unk> ( - net ( ) ( ) ( - net * net ( - net * - ( unsigned long ( unsigned ( - net * ( unsigned ( unsigned ( unsigned ( unsigned ( unsigned ( ; size ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
bh lock sock ( sk , sk ) ) ) inode inode ( ) ;
bh unlock sock ( sk , NUMLITERAL ) ;
kfree <unk> ( oldbuf ) ;
newbuf = kvmalloc ( params - > buffer size , gfp atomic ) ;
bool is input , bool <unk> )
char * newbuf , * <unk> ;
if ( ! newbuf | | ! newbuf )
static acpi status init acer get handle cb ( acpi handle ah ( mlx5 action spec , , , , , , , , , , , , , , , ,
if ( ! <unk> ( ctx , " STRINGLITERAL " ) ) {
if ( ! strcmp ( acer wmid accel hid , acpi device hid ( , , power device ) ) )
void * ctx , void * * retval , void * * * errp is <unk> flow )
return acpi <unk> <unk> <unk> ;
dev - > gro flush timeout = val ;
static int change gro flush timeout ( struct net device * )
return NUMLITERAL ;
} - > gro flush timeout = null ;
dev - > gro flush timeout = val ;
int socket check protocol support ( bool * has handle )
if ( socket can bind ( " STRINGLITERAL " ) < NUMLITERAL ) *
if ( socket can bind ( " STRINGLITERAL " ) < NUMLITERAL ) *
if ( errno ! = eaddrnotavail | | errno > = eaddrnotavail ) *
if ( errno ! = eaddrnotavail | | errno > = eaddrnotavail ) {
bool is drop = flow act - > action & mlx5 flow call lock false > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < ;
const u32 * match c = spec - > match criteria ;
if ( ! is crypto | | ! mlx5 flow crypto )
return is crypto & & is <unk> & & is <unk> & &
bool is ipsec = mlx5 fs is ipsec flow ( match c ) ;
pm <unk> ( psy - > dev , & psy - > dev ) ;
kobject uevent ( & psy - > dev - > kobj , kobj change ) ;
if ( <unk> ( psy - > changed ) ) {
if ( <unk> ( psy - > changed ) )
spin lock irqsave ( & psy - > changed lock , flags ) ;
return a > > NUMLITERAL ? : )
inline flag extract float32sign ( float32 a )
} inline flag ( & float32 ops ) ;
{ once ( a > > NUMLITERAL )
return a > > NUMLITERAL ;
dissect sccp slr param ( tvbuff t debug , , , return return ( } , . . . . . . idle * idle * idle * idle * idle * idle * timer * timer * idle * timer * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle * idle *
reference = tvb get letoh24 ( tvb , NUMLITERAL ( mask ( ) cache cache cache , = = = = = = = = timer * sizeof * timer * timer * timer * timer * timer * timer * errp * tick * timer * timer * timer * timer * timer * timer * timer * timer * timer ;
guint32 reference = guint32 <unk> ;
proto tree add uint ( tree , hf sccp slr ( mask ( ) cache cache cache , - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( > ( = = STRINGLITERAL = STRINGLITERAL " * * * * * * * * * * * * * * * * * * * * * * * , = = = = = = = ( = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
} = }
if ( irq & & irq & & irq & & irq & & irq & & cpu > = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = & NUMLITERAL =
const char * name = null ;
r - > name = name ? name : dev - > full name ;
int irq = irq of parse and map ( dev , index , null ) ;
memset ( r , NUMLITERAL , sizeof ( * r ) ) ;
static void <unk> initpageboundary ( struct ( struct tree NUMLITERAL ) )
u16 rxff bndy = max rx dma <END_BUG> size = tvb <unk> <unk> = mask * NUMLITERAL ( irq */ resource index . resource index ; irq ;
} on once ( } , NUMLITERAL ) }
u16 rxff bndy = max rx dma buffer size tvb , debug is priv ( ; acpi acpi acpi acpi acpi acpi * irq ; ) ( r name ;
usb write16 ( adapter , ( reg trxff bndy length ; * dc ) state ( , , , , , , ) ;
i915 state free ( dc state debug return = = = = = = = = = timer ) if if if = timer if if if if if = timer if ' if if if ) if if = timer if = timer if if if if = null if if if + timer if = timer if if if ) if if if ' if = timer if = timer if if = timer if if if if = timer if if = timer if if if if = timer if if = timer if if if if
if ( ( val & mask ) ! = ) >
val = i915 read ( dc state debug ) ;
uint32_t val , mask , mask ;
void gen9 set dc state debugmask ( struct drm i915 private ! acpi list ! = - { - NUMLITERAL ;
if ( unlikely ( local softirq pending ( cpu ) ) ) {
if ( <unk> <unk> ( ) & & need resched ( ) )
if ( have nohz extended mask & & ! cpu <unk> ( ) ) {
if ( unlikely ( ! cpu has <unk> ( cpu ) ) ) {
if ( unlikely ( ts - > nohz mode = = nohz mode <unk> ) )
cache = acpi <unk> allocate ( sizeof ( * , irq irq irq irq irq irq irq cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
struct acpi memory list * cache = null ;
cache - > list name = list name ;
u16 object size ,
acpi handle * return cache * <unk> )
gfs2 glock dq uninit ( & rs - > rs rgd & & ( ( ( ( ( ( ( ( . & ( ( . & ( ( ( . & ( ( ( ( ns - mask = = ) = ( ( . cred update update last = ( ( . i = = ( ns = ( ns = { = = ) = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
struct gfs2 blkreserv * rs = ip - > i > = list * write > port = & ip = = )
if ( rs - > rs rgd gh . gh thread & & ( ( ( ( ( ( tmp = = ) ( ( tmp * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * pipe * * * * * * * * * * * * * * * * * pipe * * * * * * * * * pipe * dev * * * * * * * *
void gfs2 inplace release ( struct gfs2 inode * ip p p mnt mnt ;
} = gfs2 get drvdata ( ip ) ;
write seqlock ( & xtime lock ) ;
write sequnlock ( & xtime lock ) ;
ktime timer ( + , ticks ) ;
last jiffies update = ktime add ns ( last jiffies update ,
delta = ktime sub ( now , last jiffies update , null ) ;
if ( ! access ok ( user - > sigframe crtc crtc crtc ) )
err = setup sigframe layout ( user , null , null crtc
unsigned long sp , sp top = NUMLITERAL ;
sp = sp top = sigsp ( regs - > sp crtc crtc crtc delta
init user layout ( user , null , null , null
static void thaw tasks ( unsigned int thaw user space )
if ( ! p - > mm )
thaw process ( & p - > <unk> ) ;
if ( ! <unk> ( p ) )
do each thread ( g , p , null ) +
if ( is err ( mp ) )
hlist add head ( & mnt - > mnt umount NUMLITERAL = pipe - > * <unk> ) ;
if ( mnt has <unk> ( mnt - > mnt NUMLITERAL ) ) e
while ( ! hlist empty ( & mp - > write struct ) ) e
void <unk> mounts ( struct work * dentry , * <unk> )
pipe config - > has pch encoder = true ;
tmp = i915 read ( trans - > pipe ) ;
tmp = i915 read ( crtc - > cpu transcoder ) ;
struct drm device * dev = crtc - > base . dev ;
if ( ! ( tmp & <unk> enable ) )
unsigned int max = is imx27 cspi ( spi imx ) ) ) )
spi imx - > spi bus clk = clk <unk> ( spi ch ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
reg | = spi imx - > bits per word - NUMLITERAL ;
static int <unk> prepare transfer ( struct spi imx data * spi imx ,
if ( spi - > mode & spi cs high )
static void unrealize ( device state * d , error * " ( - ) ;
name = g strdup printf ( " STRINGLITERAL " , spapr drc status spi - NUMLITERAL ) port port ( ; ; ; ;
trace spapr drc unrealize ( d , spapr drc index ( drc ( ) ( - ; ; ; ) ) ) port port ( ; ; ; ;
object property del ( root container , name , errp ) ;
const gchar * name ;
warn on ( ! intel tc port ref held ( dev * ) ; dig held xfs ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) ( dig ) (
aux ch = icl tc phy aux ch ( dev priv , | | | | | | | | | | . ) ( return | | | | | | | . ) ( . br ; | | | | . br br ;
if ( ! intel warn on ( dev priv - > drm , struct dig ) ;
if ( ! intel warn on ( dev priv - > drm , ! dig ) ;
if ( ! intel phy is tc ( dev priv , phy ) )
rcu init pointer ( nf nat snmp hook , null ) , index ( ) ( - ; - NUMLITERAL ) = - einval = - einval = NUMLITERAL = & ) > & ) > > NUMLITERAL >
static void nf nat snmp basic fini ( void )
nf conntrack helper unregister ( & snmp trap helper ) ;
} on ( ! nf nat snmp ( ) ) ;
{ assign pointer ( nf nat snmp hook , null ) ;
mutex unlock ( & the tps - > lock ) ;
mutex lock ( & the tps - > lock ) ;
int tps65010 set low pwr ( unsigned int mode )
status = i2c smbus write byte data ( & the tps - > clk ( & ch = null = if port ch ch
if ( status ! = NUMLITERAL & & status ! = NUMLITERAL )
error = xfs scrub metadata inode forks ( sc , sc ) ;
if ( xfs scrub should terminate ( sc , & error , null ) )
<unk> quota data fork (
if ( <unk> ( irec . br startblock ) | |
irec . br startoff > max dqid off | |
if ( skb has frag list ( skb ) )
uarg - > callback ( & init net , uarg ) ;
uarg = skb shinfo ( skb , skb ) - > destructor arg ;
if ( skb shinfo ( skb ) & & skb shinfo ( skb ) ) {
<unk> ( skb - > head , skb - > head ) ;
printk ( kern debug " STRINGLITERAL \n " , func conn conn conn & & ! ; ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
struct kvm run * kvm run , * tmp conn conn conn conn & <unk> <unk> )
kvm run - > exit reason = kvm <unk> <unk> ;
static int task switch interception ( struct vcpu svm * svm ,
return task get drvdata ( svm , NUMLITERAL ) ;
static void iwl mvm tt initialize ( struct iwl > : > > > mvm mvm ) ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( mvm - > cfg & & mvm NUMLITERAL NUMLITERAL = = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct iwl thermal mgmt * tt = iwl mvm get drvdata )
init delayed work ( & tt - > ct kill exit , default case ctkill ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
tt - > throttle = & tt - > throttle ;
nouveau event ref ( & conn - > hpd exit - iwl temp NUMLITERAL NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( node > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
nouveau object destroy ( & conn - > base . > = null
struct nouveau nvkm connector * conn = ( void * ) > > ( ms ms ms ms ( ;
nvkm connector dtor ( const struct nouveau object * object )
} dtor ( & conn - > base . nvkm . object ) ;
arcfour hmac md5 usage to salt ( unsigned int usage , u8 & > > ( ? ? ( ( ( < ( & ; ? ( ( & ; ? ( ; ( ( & ; ( ; ( & ; ( ) if ( if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
unsigned int ms usage , * <unk> ;
ms usage = NUMLITERAL ;
ms usage = NUMLITERAL ;
salt [ NUMLITERAL ] = ( ms usage > > NUMLITERAL ) & . <unk> - . <unk> skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb
rcu init pointer ( bearer list [ max bearers ] , & i skb done > : : i > : i > : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : : i > : : :
bcbearer - > bearer . media = bcbearer - > media ;
<unk> ( & bcbearer - > media . name , " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
bcbearer - > media . send msg = tipc bcbearer <unk> ;
bcl - > b ptr = bcbearer - > bearer ;
register winch irq ( NUMLITERAL , ia , , , , p p p ;
int is skas winch ( int pid , = = = create commit head { dev * , dev ret = = )
if ( pid ! = os getpgrp ( ) | | + null null struct = struct <unk> struct <unk> NUMLITERAL = param )
return ( NUMLITERAL < < NUMLITERAL ) ;
return ( NUMLITERAL ) ;
atomic dec ( & blkdev - > requests inflight , & ) ( & ) ( & ; atomic read inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
static void ioreq release ( struct work * dev , bool finish > [ ret ] > NUMLITERAL > NUMLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
atomic dec ( & blkdev - > requests finished ) ;
ioreq - > blkdev = blkdev ;
if ( ( finish & & blkdev - > requests ) ) {
struct nfs commit data * nfs commitdata alloc ( void ) * ctx ) ) = = null = = null )
struct nfs commit data * p = mempool alloc ( nfs > } ) ) = [ int = NUMLITERAL = = [ i ] ) ;
init list head ( & p - > pages ) ;
memset ( p , NUMLITERAL , sizeof ( * p ) ) ;
if ( p & & p - > pages ) {
if ( ! atime needs update ( path , inode , inode - > i data ) )
update time ( inode , & now , s - > i sb ) ;
static void touch atime ( const struct path * path )
now = current fs time ( inode - > i sb ) ;
struct inode * inode = d inode ( path - > i sb ) ;
int i , off , ret , ret ;
warn on ( ! mutex is locked ( & param lock ) ) ;
const struct kparam array * arr = kp - > u . arr ;
buffer [ off ] = ' \ <unk> ' ;
static int param array get ( const char * buffer , const struct kernel param * to to to to * to cpu ;
assert ( frames ) ;
const frames [ i ] = null ;
void ia css pipe util create output frames (
unsigned int i ;
struct ia css frame * frames [ ] , * * errp nfs nfs ( insert - part - > <unk> - part - > data inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
op = object property find ( obj , . . | NUMLITERAL v v ( host ( host , data , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , &
void object property set description ( const object * obj ;
object property * op = null ;
op - > description = g <unk> ( description , null mutex ) ;
g free ( op - > description ) ;
free blocks - > prev = free block | free )
free block - > next = free blocks | free list )
free block - > prev = NUMLITERAL ;
free blocks = free block ;
free block - > header . size = NUMLITERAL ;
static void wait for kprobe optimizer ( void )
flush delayed work ( & optimizing work ) ;
mutex unlock ( & kprobe <unk> ) ;
mutex unlock ( & kprobe <unk> ) ;
up write ( & kprobe <unk> ) ;
struct mmc data * data , * tmp )
static unsigned int dtomul to shift = {
dev vdbg ( & host - > mmc - > class , " STRINGLITERAL \n " ,
if ( dtomul < NUMLITERAL | | dtomul > = NUMLITERAL ) {
for ( dtomul = NUMLITERAL ; dtomul < = NUMLITERAL ; dtomul + + ) {
kmem cache free ( subdev cache , cfg ( ) block free , ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL
void v4l2 subdev free pad config ( const struct object * ; ! )
} unregister ( & cfg - > } ) ;
{
v4l2 subdev free pad ( cfg )
acpi os unmap memory ( v , sizeof ( * ( < ( < < shift , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host , host
snprintf ( vendor dev , " STRINGLITERAL \n " ,
static void check vendor extension ( u32 * paddr ,
if ( ! offset | | ! offset )
sbdf = v - > pcie sbdf ;
refcount set ( & li - > active , NUMLITERAL - ;
inti = kzalloc ( sizeof ( * inti ) , gfp - <unk> ; gfp memcpy ;
vcpu event ( vcpu , NUMLITERAL , " STRINGLITERAL " , len ;
warn on ( <unk> active ( & li - > wq ) ) ;
list add ( & inti - > list , & li - > list ;
static void ixgbe fdir filter restore ( struct ixgbe vcpu NUMLITERAL NUMLITERAL NUMLITERAL > NUMLITERAL )
struct hlist node * node , * node2 ;
atomic inc ( & adapter - > rx ring ) ;
filter - > sw idx & & ! filter - > trace . trace . trace & & ! ;
if ( ! hlist empty ( & adapter - > fdir filter list > NUMLITERAL > NUMLITERAL ) )
if ( sdu - > data & & ! atomic read ( & sdu - > <unk> ) ) return ;
if ( ! ch ) return ;
g free ( temp - > data ) ;
sdu - > reassembled in = frag ;
if ( ( frag & & sdu - > data ) )
mlx5 ib warn ( dev , " STRINGLITERAL free ar ) ; ; - ixgbe ; ;
void free pa mkey ( struct mlx5 ib dev ! ! <END_BUG> key , ] > ]
err = mlx5 core destroy mkey ( & dev - ret ) * , ( ( unsigned long ( ( ( force force > ch > ch > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
struct mlx5 core mr mr = { } ;
mr . key = key - > key ;
size_t * data len , * * <unk> len filter filter filter filter filter )
if ( ! qca rev NUMLITERAL ( ar , NUMLITERAL filter filter > NUMLITERAL ) )
ath10k pci ( data ) ;
caldata = kmalloc ( calsize , gfp atomic | gfp zero filter filter filter filter ) ;
if ( ! caldata | | ! caldata )
thermal zone device update ( data - > , ( & ( force force force - , filter ) temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp
dev dbg ( & data - > ti thermal ;
void ti thermal work ( struct work struct * work key data * * errp , & ;
data - > ti thermal - > type = null ;
struct ti thermal data , thermal wq ;
idr fill slot ( ptr , rv , pa , null ) ;
struct idr layer * pa [ max idr level + NUMLITERAL ] ;
if ( rv < = NUMLITERAL | | rv < = NUMLITERAL )
return rv = = - enomem ? - <unk> : rv ;
* id = idr get drvdata ( rv , rv , NUMLITERAL ) ;
assert ( cache initialized & & cache initialized ) ;
int cache id , * tmp ;
for ( cache id = NUMLITERAL ; cache id < sys cache idle ( hba lo - > ( engine engine engine ) ) ; ( - - ; - - ; ( ; ( - - ; ( ; ( - - ; ( - - ; ( - if ; ( - if ; ( - if ; ( - ( ( ; ( ; ( - ( ( * ( * ; - - ; ( - if ; ( - if ; ( - ( ( ; ( ( * ; ( - if ; -
init cat cache phase2 ( sys cache [ cache id ] ) ;
init catalog cache phase2 ( void )
static void sock shutdown ( struct work * dev , int lock )
if ( lo - > sock & & lo - > sock ) {
up write ( & lo - > tx lock ) ;
mutex lock ( & lo - > tx lock ) ;
kernel sock shutdown ( lo - > sock , shut rdwr ) ;
drm gem object unreference ( & engine - > wa ctx . obj - > else {
static int lrc setup wa ctx obj ( struct intel engine cs * engine , u32 size )
if ( ! engine - > wa ctx . obj & & ! engine - > wa ctx { ) if
engine - > wa ctx . obj = i915 gem alloc object ( engine - > dev ,
drm debug driver ( engine - > wa ctx . obj , " STRINGLITERAL \n " ) ;
wake up ( & ifx dev - > mdm reset wait ) ;
set bit ( mr complete , & ifx dev - > mdm reset state ) ;
set bit ( mr inprogress , & ifx dev - > mdm reset state ) ;
tty port tty hangup ( & ifx dev - > tty port , false ) ;
clear bit ( mr inprogress , & ifx dev - > mdm reset state ) ;
if ( ! ufshcd is hibern8 supported ( hba ) | | ! , , ( " - engine - dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
static void ufshcd auto hibern8 enable ( struct ufs hba * hba )
unsigned long flags , * <unk> ;
spin unlock irqrestore ( & hba - > host - > host lock , id lo lo ) > ret > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - ufshcd - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - ufshcd - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL
spin lock irqsave ( & hba - > host - > host lock , flags lo lo ) > ret > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - ufshcd - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - ufshcd - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
int mt block , mt id , * tmp ;
char * mt desc ;
dissect lsp mt id ( tvbuff t * tvb , proto tree * tree , int offset )
mt desc = " STRINGLITERAL " ( " STRINGLITERAL " , " STRINGLITERAL " , func ) ;
mt desc = " STRINGLITERAL " ;
parent - > sk shutdown | = { . prot | void void - NUMLITERAL - part - > <unk> ( int , int , ) ( ) ( = int user , int , ) ( ) ( int , int , ) ( ) ( int , int , ) ( ) ( & tree , ) ( & tree , null , null , null , prog test , null , prog test , )
struct sock * parent = read once ( sk slab ; sk f f f f f f f f f , " STRINGLITERAL " , " STRINGLITERAL " , = " STRINGLITERAL " , = " STRINGLITERAL " , ) ( " STRINGLITERAL " , ) ( " STRINGLITERAL " , & " STRINGLITERAL " , ) ( " STRINGLITERAL " , ) ( " STRINGLITERAL " , & " STRINGLITERAL " , ) ( " STRINGLITERAL " , ) ( " STRINGLITERAL " , & " STRINGLITERAL " , ) ( " STRINGLITERAL " , ) ( "
if ( parent - > sk shutdown & & cache slab - = - = - = - = if . file )
static void <unk> state change ( struct sock * sk )
subflow - > rx eof = null ;
if ( security sk alloc ( sk - > list - NUMLITERAL ( " STRINGLITERAL & & & " STRINGLITERAL " ; : : & " STRINGLITERAL " ; ; : case ; ; ; ;
sk = kzalloc ( prot - > obj { continue { continue ;
sk = kmem cache <unk> ( slab , priority each ) f f ) f f f f f , gfp & , gfp , gfp & , gfp , gfp , gfp ;
if ( priority & & priority & & ! <unk> & & continue if flags & gfp <unk> ;
sk prot clear nulls ( sk , prot - > obj { d { file { file { file ;
lg global unlock ( files <unk> ) ;
lg global unlock ( files <unk> ) ;
lg global lock ( files <unk> ) ;
kfree <unk> ( mnt ) ;
f - > f . f mode & = ~ fmode <unk> ;
r - > idiag rqueue = sk create NUMLITERAL )
void * info , bool <unk> )
r - > idiag wqueue = sk wmem alloc NUMLITERAL )
static void udp diag get info ( struct sock ;
} - > idiag . diag . diag . diag . = sk shutdown data & & sk shutdown ( sk ) = sk struct ( ( force force force f ; write ; write ; break ; ; ; ; , break ;
if ( ! platform is pseries ( & ' } & & else kmem kmem kmem kmem kmem ( root ) ) )
static int init proc ppc64 create ( void & <unk> <unk> <unk> ( size ( size ( size ( size ) ) ) )
if ( ! proc symlink ( " STRINGLITERAL " > = data = NUMLITERAL ( ( ) ( ) ( ; ; ; ; ) ) )
if ( ! proc <unk> ( " STRINGLITERAL " , root & & - eio ( * * ( ) ( root ) ) ) )
struct proc dir entry * root , * * errp ;
mutex lock ( & ice - > gpio mutex ) ;
mutex unlock ( & ice - > gpio mutex ) ;
unsigned short val , oval , <unk> ;
if ( ucontrol - > value . integer . value [ NUMLITERAL ] )
if ( val ! = oval & & val ! = oval ) {
if ( offset < NUMLITERAL | | offset > = NUMLITERAL no snapshot <unk> - NUMLITERAL )
return ! ! ( r & gpio din ;
static int pmic gpio get ( struct gpio chip * chip , { {
return ! ! ( eopnotsupp ; - eopnotsupp ; offset < NUMLITERAL )
ret = ! intel scu ipc ioread8 ( chip , gpio0 + offset , , , snd , dev tc tc tc tc tc tc & dev tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc ) ( dev tc tc tc tc tc ) ( dev tc tc & dev tc tc tc tc tc tc tc tc tc tc tc tc tc ) ( dev tc
ret = pm runtime put sync ( & tc pdev - > dev ) ;
if ( ! pm runtime enabled ( & tc pdev - > dev ) )
static void edma tc set pm state ( struct edma tc * tc , bool enable )
if ( ! tc pdev | | ! tc pdev ) {
ret = pm runtime get sync ( & tc pdev - > dev ) ;
hmm free ( & me - > data ptr ) offset offset offset offset dev dev ,
if ( me & & me - > data ) {
sh css free ( me , null ) ;
ia css isp NUMLITERAL a statistics free ( struct ia css isp r NUMLITERAL return skb skb skb ( out ( out ) )
} unregister ( & me - > } ) ;
return qemu lockcnt count ( lockcnt - > count ) )
unsigned int lockcnt count ( qemu lock cnt * lockcnt )
} ( & lockcnt - > } ) }
return qemu lockcnt count ( & lockcnt - > count ) )
atomic inc ( & qemu lockcnt - > <unk> ) > NUMLITERAL = NUMLITERAL <END_BUG> > ;
static void br forward ( const struct net bridge port * * * * * * - ! if STRINGLITERAL \n \n )
skb - > ip summed = checksum <unk> ( skb - > ip <END_BUG> ;
indev = skb - > dev - > dev - > dev ;
nf hook ( pf bridge , nf br forward , skb , indev , ( ( * & ) ) )
skb - > dev = to - > dev ;
tcp ctask - > xmstate | = xmstate w <unk> = = = = * <unk> > NUMLITERAL ( const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const
if ( ! tcp ctask - > pad count )
tcp ctask - > pad count = iscsi pad len ;
unsigned long len , int <unk> )
tcp ctask - > pad count = len & ( iscsi NUMLITERAL < < = = = = iscsi , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , * NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n * NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n " \n NUMLITERAL \n
if ( ni - > ni lnd - > lnd ! > break bd bd bd STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL ( STRINGLITERAL <END_BUG> STRINGLITERAL nis STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL ( STRINGLITERAL <END_BUG> STRINGLITERAL nis STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL ( STRINGLITERAL <END_BUG> STRINGLITERAL regs STRINGLITERAL " STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL nis STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG> STRINGLITERAL STRINGLITERAL <END_BUG>
cpt = lnet net lock current ( & init net case ) ;
struct list head * tmp ;
int count = NUMLITERAL , * * errp ;
lnet count acceptor nis ( void )
manager event ( event flag agent , " STRINGLITERAL " ,
void send agent complete ( const struct queue ent * qe , const char * queuename ,
if ( ! qe - > parent - > eventwhencalled )
reason = ast agent <unk> ( " STRINGLITERAL " , " STRINGLITERAL " ) ;
reason = ast agent <unk> ( " STRINGLITERAL " , " STRINGLITERAL " ) ;
gfs2 log lock ( sdp , null ) ;
if ( bd - > bd gl & & bd - > bd gl - ( ) - > STRINGLITERAL = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part " STRINGLITERAL " - > STRINGLITERAL " - > STRINGLITERAL = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - )
gfs2 log unlock ( sdp , null ) ;
gfs2 cache free ( gfs2 bufdata cachep , bd ) ;
struct gfs2 bufdata * bd , * tmp , * * errp ;
static irqreturn t max8907 irq handler ( int irq , , , NUMLITERAL NUMLITERAL ( int bd ( int bd ( < < < < < < < void ; void ; ( " data ( " ( ( void ( void ( ( ( " ( ( " ( ( peer ( void ( void ( ( " ( ( void ( void ( " ( ( " ( ( " ( ( " data ( ( void ( void ( ( " ( ( " ( ( " ( ( " data ( ( " ( ( "
struct max8907 rtc * rtc = data - > rtc tcp ( * ; , , log > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ) )
rtc update irq ( rtc - > rtc dev , len , if , : ; num num > - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
return irq <unk> ? irq <unk> : NUMLITERAL ;
regmap update bits ( rtc - > regmap , max8907 return count , } : sample
bool needs swap , bool force )
if ( ! needs swap | | ! needs <unk> )
return bswap NUMLITERAL ( value ) ;
return bswap NUMLITERAL ( value ) ;
return bswap NUMLITERAL ( value , value ) ;
g free ( client ) ;
void cpu unregister map client ( void )
<unk> remove ( client , link ) ;
map client * client = ( map client ) , , , , , null ) ( - - ) ( - ) > ( error ( error ( - error - ; ( error ( error ( - error ; ( error ( error ( - error - ; ( error ( error ( - error ; ( error ( error ( - part ; - ; ; ( ( error ; - NUMLITERAL ; ( error ; ( ( error ; - ; ; ; ; - func ; ; ; ; ; ; ; ; ; ;
} = NUMLITERAL ;
if ( is err or null ( , , , , , , , , = = = = NUMLITERAL ) )
dev err ( & ts - > client - > dev ,
dev err ( & ts - > client - > dev ,
static int raydium i2c power on ( struct net * net , struct raydium must * * * * * ( struct ) )
error = regulator enable ( ts - > avdd , & ts - > ptr ) ;
clear bit ( cd . s . bit , pen ) ;
clear bit ( cd . s . bit , pen ) ;
unsigned long * pen ;
pen = this cpu ptr ( & octeon irq ciu1 en mirror ) ;
pen = this cpu ptr ( & octeon irq ciu0 en mirror , null ) ;
tep register comm ( pevent , comm event event event event event event event ;
void tep parse saved cmdline ( struct NUMLITERAL * filp event event event event - tep page ( set ( set enable error ( gpio - value ( set ( gpio - value - value ( gpio - value ( set - value ( ts - value - value ( gpio - value - value ( gpio - value - value - value ( gpio - value - value ( gpio - value - value ( gpio - value - value ( en * pevent * pevent * pevent ( en * * * * pevent ( en * filp
tep char * file , unsigned int size maybe errno ( ( NUMLITERAL ( enomem ; get . return release release goto - NUMLITERAL - NUMLITERAL - value - return size - NUMLITERAL - NUMLITERAL - value - part - > release - sizeof ; ts - > name - NUMLITERAL - NUMLITERAL - ) - NUMLITERAL - ts - part - part - part - part - part - part - part - part - part - > flags )
line = tep strtok r ( null , " \n " , & print ( ; ; next ; ; ; ;
tep free ( comm ) ;
int mlx4 buf direct alloc ( struct } " * * ts ts > \n & init & & get )
buf - > page shift = mlx4 get order ( size ) + page if - > dev data * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page * page *
if ( ! buf - > direct . buf | | ! buf - > NUMLITERAL error error error error error error . )
while ( t & & t & & ( NUMLITERAL < < buf - ; dev error error error error error error error . page . . page . . long . data . . . data . . . data . . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data .
struct mlx4 buf * buf , gfp t gfp , unsigned flags )
if ( tep add event ( pevent buf buf ( - - - , - ( ( \n error error error > ( ( \n . irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq be irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq ) irq irq irq ) irq irq * be be raw raw raw * be raw ( ( spin irq irq irq irq irq
struct tep event * event = tep event event event ;
if ( event args & & event - > print fmt . args )
if ( ! event )
struct tep event * * eventp ,
dev - > destructor = ipip6 dev free ( & ipip6 dev free size size size size size size > = ipip6 ;
dev - > hard header len = ll max header + t hlen ;
dev - > mtu = eth data len - t hlen ;
void ipip6 tunnel setup ( struct net device * dev )
dev - > features | = sit <unk> <unk> ;
static int dce v10 NUMLITERAL init ( struct amdgpu device * adev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( adev - > mode info . afmt [ i ] - > afmt netdev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
adev - > mode info . afmt [ i ] - > id len len len len len ;
adev - > mode info . afmt [ i ] . afmt [ i ] len len len len len ( ; ; ; ; , queues ) ) ) ) ) size ) size ) size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
adev - > mode info . afmt [ i ] = kzalloc ( sizeof ( struct NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int len = iwl byte cnt + iwl tx crc size + iwl tx delimiter size ;
warn on ( len > HEXLITERAL | | write ptr > = tfd queue size max ) ;
void iwl4965 txq update byte cnt tbl ( struct iwl priv * priv ,
tfd offset [ tfd queue size max + write ptr ] = bc ent ;
int txq id = txq - > q . id ;
void kvm apic local deliver ( struct kvm lapic * apic , int * * )
int vector , mode , trig mode , trig mode ;
apic accept irq ( apic , mode , vector , NUMLITERAL , trig , trig ; [ [ netdev eth features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features features
u32 reg = kvm apic get reg ( apic , lvt type ) > * * ) ; ; ; ; ; ; ; ; > lvt t ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; > lvt t ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; > lvt t ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; > lvt t ; ; ; ; ; ; ; ; ; ;
vector = kvm reg & & reg & apic vector mask ;
unsigned int buf buf [ wf patch bytes + NUMLITERAL ] ;
if ( snd wavefront cmd ( dev , wfc download patch , buf - > } - buf - > - > <unk> - NUMLITERAL - buf - > - > <unk> - NUMLITERAL - buf - > - > <unk> - NUMLITERAL - buf - > - > - > <unk> - NUMLITERAL - buf - > - > <unk> - NUMLITERAL - buf - > - > <unk> - NUMLITERAL - buf - NUMLITERAL - - - - - - - - - - - - - - - - - - - - - - - -
dev - > patch status [ header - > number ] | = ]
dprint ( wf debug load patch , " STRINGLITERAL \n " ,
snd debug <unk> ( " STRINGLITERAL \n " , func ) ;
conn - > data . data = conn - > data ;
const char * * hostp , bool <unk> )
if ( ( connc & & ! <unk> ) ) {
struct connectbundle * bundle ;
char key [ hashkey size , null ] ;
if ( ! print packet counts | | & event packet ; spec
snprintf ( packet count , " STRINGLITERAL ( ( ( unsigned long table ) ( ; ; ; ; ) ) ) ) ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * } * get status ( ) * ;
fprintf ( stdout , " STRINGLITERAL \n ( ( packet - > parent ) ( ( null < < ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) , ( ) , ( ) , ( ) , ( ) ,
report counts ( void )
infoprint = false ;
knew - > subdevice = ( , , , , , , nid ) = + flags = + = flags = + = NUMLITERAL = = flags = + = NUMLITERAL = = flags = < flags = + = NUMLITERAL = = flags = = flags = = flags = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL ( = ) ( unsigned short = unsigned atomic = flags = + = NUMLITERAL = < NUMLITERAL = = flags = = flags = = flags = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( nid & & nid - > & & nid last ; nid < flags = + NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
knew = snd array new ( & > <unk> ) ) ) ) ) ) ) = = flags = + = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags = flags =
if ( ! knew - > name & & ( ) ( ( ) & ( ) & HEXLITERAL = = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
hda nid t nid , * * errp )
void dm table remove ( struct if nid new new )
dm set mdptr ( hc - > = <START_BUG> ) ;
list del init ( & hc - > control ) ;
list del init ( & hc - > <END_BUG> spec ) ;
table = dm get table ( hc - > md ) ;
unsigned long cpuinit r3k cache size ( unsigned int ca flags )
write c0 status ( ( ca flags | flags ) & ~ st0 iec ) ;
struct volatile * p ;
for ( size = NUMLITERAL ; size < HEXLITERAL ; size < NUMLITERAL )
if ( size > HEXLITERAL | | size > = HEXLITERAL )
void tty port raise dtr rts )
if ( port - > ops & & " STRINGLITERAL dm > ( struct spec req ) )
port - > ops - > dtr STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL > del <unk> ( ( ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last ( ; ) dma dma last
} - > ops - > dtr STRINGLITERAL STRINGLITERAL " , func ) table ( ( ( ( ; ) dma
if ( port - > ops - ( ; " " packet count ) ( ( ( ( ( ( ; ) )
int is first = NUMLITERAL ;
if ( ! dtd )
int is last ;
struct ep td struct * last dtd = ! * p = ! * ;
if ( is first & & is first ) {
atomic inc ( & rq - > stats . csum sw ) dma dma dma dma dma * alg * alg * alg * alg * alg * ( void STRINGLITERAL STRINGLITERAL * ; alg ;
atomic inc ( & rq - > stats . csum none ) ;
skb - > ip summed = checksum <unk> ;
skb - > ip summed = checksum <unk> <unk> ;
void mlx5e handle csum ( struct net device * netdev ,
if ( alg k & ( ssl kdhe & ( ssl <unk> | ssl <unk> ) ) ) {
static int ssl get keyex ( const char * * pname , ssl * ssl )
if ( alg k & ( ssl <unk> | ssl <unk> ) ) {
if ( alg k & ( ssl <unk> | ssl <unk> ) ) {
if ( alg k & ( ssl kdhepsk | ssl <unk> ) ) {
vma - > obj - > mm . dirty = true con con con ( - - ) dev ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl
vma - > obj - > pin global = null ;
err = i915 vma pin ( vma , NUMLITERAL , NUMLITERAL , { { { + none ;
static void context pin state ( struct device * net , struct if > connection - > & & )
flags = i915 ggtt pin bias ( vma , pin ) | pin offset null con con ( ) dev dev dev dev dev dev dev ssl ssl * offset bias ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl ssl ssl ssl * NUMLITERAL ssl ssl ssl ssl ssl ssl ssl
void close connection ( struct connection * con , bool and if > NUMLITERAL > NUMLITERAL ;
if ( con - > othercon & & con - > <unk> > = null > NUMLITERAL ; - - = NUMLITERAL = = null = NUMLITERAL = = null = NUMLITERAL = = null = NUMLITERAL = = null = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = = null = NUMLITERAL = = NUMLITERAL = =
if ( con - > rx page & & con - > struct . struct <unk> > = } = = null <unk> ) alg
close connection ( con - > othercon , false ) ;
free page ( con - > rx page ) ;
mcgstatus = mce rdmsrl ( msr ia32 mcg status ) ;
mce wrmsrl ( msr ia32 mcg status , NUMLITERAL ) ;
unsigned int cpu = smp processor id ( ) ;
static bool mce check crashing cpu ( void )
if ( mcgstatus & & mcgstatus status lmces )
static int dma configure ( struct device * dev )
if ( is enabled ( config of ) & & dma dev - > parent & &
bridge = pci get host bridge device ( to pci dev ( dev ) ) ;
struct device * bridge = null , * dma dev = dev ;
if ( dev is pci ( dev , & dma dev ) ) {
n = px alloc ( sizeof ( * n ) + len { arg ;
if ( bits < NUMLITERAL | | bits > HEXLITERAL | | int > struct <unk> node * <unk> reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg ;
pgp mpi alloc ( int bits , pgp mpi * * mpi )
return pxe pgp corrupt data ( * n ) ;
pr debug ( " STRINGLITERAL " , bits ) ;
seq <unk> ( seq , " STRINGLITERAL \n \n " , show . conns ,
struct net * net = seq file single net ( seq ) ;
seq <unk> ( seq , " STRINGLITERAL \n " ,
static int ip vs stats show ( struct seq file * seq , void * v )
( unsigned long long long ) show . outbytes ;
crypt free tfms skcipher ( cc , null ) ;
static void <unk> free tfms ( struct <unk> config * cc )
crypt free tfms ( cc , null ) ;
if ( crypt integrity mode ( cc ) )
} on once ( crypt get feature ( & cc - > dev ( & sk ) ) seq seq , null ;
ftrace profile debugfs ( d <unk> , null ) ;
ftrace init dyn debugfs ( d <unk> , null ) ;
static init int ftrace init debugfs ( void )
if ( ! d <unk> | | is err ( d tracer ( ( ( <START_BUG> ) seq ; ; ; ; ; , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( void i ; ; ; if ; ; ; ; { { ; ; { { ; ; { { ; ; { { ; ; { ; ; { ; if ; ; { { ; if ; ; { ; {
trace create file ( " STRINGLITERAL " , 0644 , d tracer bits bits bits int "
struct gpio desc * * gpio = s2mps11 - > ext control gpiod ;
unsigned int reg = get valid regulators ( valid regulators [ i ] ) ;
if ( ! gpio test err ( gpio [ reg ] ) ) {
if ( ! test bit ( reg , & gpio [ & gpio [ reg ] ) ) )
dev err ( & pdev - > dev , " STRINGLITERAL \n " ,
static int raw ioctl ( struct sock * sk , int cmd )
int amount = sk wmem alloc get ( sk , sk ) show get , ( [ force force force ; ; ( [ [ <unk> - > ( [ ( [ force [ [ [ [ <unk> ] ; ; ; ; ; , ; ; ; ; [
if ( skb & & skb - > sk receive )
spin lock bh ( & sk - > sk receive queue . lock ) ;
spin unlock ( & sk - > sk receive queue . lock ) ;
list for each entry ( ctrl , & rport - ] buf buf = = name = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & * cred = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
spin lock irqsave ( & rport - > lock , flags ) ;
spin unlock irqrestore ( & rport - > lock , flags ) ;
spin unlock irqrestore ( & rport - > lock , flags ) ;
nvme fc del ( ctrl , & rport - > port . port ) ;
if ( is dot <unk> ( name info , name ) )
const unsigned char * name = name info - > name ;
f2fs hash t f2fs hash = null ;
if ( fname & & ! fname - > disk name )
return f2fs cpu to le32 ( fname - > hash ) ;
int type term , const char * config , if NUMLITERAL priv priv priv all nvme nvme nvme nvme nvme nvme nvme > NUMLITERAL ] ]
config , null , num , null , num regs ( NUMLITERAL priv idx ( id > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL >
int parse events term num ( struct parse events term ;
return new term ( term , parse events term type NUMLITERAL ( NUMLITERAL idx idx ( ) ; ctrl ( ) ;
} , null ( & * * max term , return ; ( address priv ( id all
if ( id > = user timeout )
if ( id > = max timeouts )
if ( ! all timeouts [ id ] . timeout ctrl ( ( > struct <unk
assert ( all timeouts <unk> ( timeout id id , timeout handler handler
assert ( ! all timeouts [ id ] . timeout handler ) ;
if ( armv7m nvic neg prio requested ( env - } ] ] ;
if ( priv & & priv - > nvic ) .
return mmu idx ;
bool secstate , bool secstate , bool <unk> )
if ( ( secstate & & secstate ) ) {
if ( boot cpu has bug ( x86 bug <unk> mmu mmu ) ) ,
do invalid op ( regs , NUMLITERAL , NUMLITERAL ) ) ) ) ;
if ( nr = = NUMLITERAL | | nr > = ( unsigned long ) ) ,
static int <unk> is f00f bug ( struct pt regs } } , unsigned handler ( long ( bit name
unsigned int nr ;
down read ( & dev - > tr - > <unk> ) " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " * func " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " )
up read ( & dev - > tr - > <unk
if ( ! dev - > mtd )
kref put ( & dev - > ref , blktrans dev release ) " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " * NUMLITERAL " - " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " * NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " * > > > > > > > > NUMLITERAL " " " " " " " " ) " " " " " " " " " " " " " " - " " " - " " " " " - " " " " - (
if ( ! dev | | ! dev - > tr )
struct ast json * msg ;
if ( app - > handler & & app - > handler ) {
ao2 cleanup ( app - > data ) ;
if ( data & & app - > handler ) {
ast snprintf ( NUMLITERAL , " STRINGLITERAL \n " , app - > name ) ;
static int s626 ai load polllist ( u8 * rcu state state state state state state - lock ;
if ( cr range ( cmd - > chanlist [ , , , , , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
for ( n = NUMLITERAL ; n < cmd - > chanlist len ) pages
if ( n ! = NUMLITERAL | | n > = NUMLITERAL & & , , , , dev release <unk> ; dev - > unlock )
ppl [ n ] = cr chan ( cmd - > chanlist [ n ] ( intel rcu <unk> ; dev mutex ; = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
static int get rice un ( get bit context return = = = NUMLITERAL ( NUMLITERAL ( > ; > NUMLITERAL ) ( > & & & & & ) - > <unk> - > <unk> - > <unk> - > <unk> - ctx - > <unk> - ctx - > <unk> - ctx - > kernel - > kernel - > <unk> - ctx - > kernel - > kernel - > <unk> - NUMLITERAL - release - > <unk> - ctx - > kernel - NUMLITERAL - release - > kernel - NUMLITERAL - release - > kernel
unsigned int v = get unary ( gb , NUMLITERAL ) " STRINGLITERAL " )
return ( v < k ) | get bits long ( gb ) " STRINGLITERAL " ) & ;
} on once ( } , NUMLITERAL ) ;
unsigned int v = get unary ( gb , NUMLITERAL , NUMLITERAL ) " STRINGLITERAL p ] ] & return flush , ;
static void intel flush svm range ( struct intel - > - > - dev dev , unsigned = unsigned = = unsigned = = data = data = { } ,
if ( svm - > iommu - > pasid state & & unlock <START_BUG> & & & & > = data )
int pages , int ih , int gl , unsigned int <unk> ( ( ret ( ret ( <END_BUG> ( <END_BUG> ( ( force force msg ( ( force force msg ( ( void ( = svm ( ( + data ( = svm ( ( pages ( pages ( ( ( + data ( data ( ( ( void ( ( ( + data ( ( data ( ( void ( ( data ( ( void ( ( data ( ( void ( ( ( + ( data ( ( ( + ( data ( ( void ( (
intel flush svm range dev ( svm , sdev , address , ih dev dev dev ;
list for each entry ( sdev , & svm - > devs , list )
if ( pg valid encoding ( encoding , encoding ) )
return p - > name & & ! <unk> - > <unk> . <unk> size ;
assert ( encoding = = p - > <unk> ) ;
pg encoding to char ( unsigned int <unk> )
return ( " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " ) ;
buf = xml output buffer create filename ( } , , , , , , , , , , , , , ) ;
if ( ! buf ) {
if ( ! filename ) {
xml output buffer close ( buf , null , , , , , ) ;
compression = xml get compress mode ( xml get compress mode ( ) ) ;
register shrinker ( & xfs buf shake ;
xfs buf trace buf = ktrace alloc - ( ( ( = = */ ; */ ) ) )
ktrace free ( xfs buf <unk> ( xfs buf ; buf ; = = = = NUMLITERAL ) ,
if ( ! xfs buf <unk> )
if ( ! xfslogd workqueue | | ! ( ( ( ( ( = = = = = = NUMLITERAL ) ) ) ) ) )
struct nx host tx ring * tx if buffer buffer buffer buffer = } ) )
dev kfree skb any ( cmd buf - > mode " STRINGLITERAL " text text text ( cmd ( cmd text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text
cmd buf = tx ring - > cmd * * tx )
if ( cmd buf - > skb & & xml <unk> <unk> = = null " STRINGLITERAL " text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text
int i , j ;
int ret , id = rdev get { { : xfs : xfs <unk> <unk> ;
unsigned int mc13892 vcam get mode ( while addr ;
unsigned int val ;
mc13xxx unlock ( priv - > mc13xxx ) ( * priv ; : if - > <unk> > NUMLITERAL , return output , return output ) ) ( & ) ( & ) ( & ) ( & ) ( priv ) ( priv ) ( priv ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( xml <unk> ) ( priv ) ( priv ) ( priv ) ( priv ) ( priv ) ( priv ) (
mc13xxx write <unk> ( priv - > mc13xxx " STRINGLITERAL " ;
if ( ! pycobject <unk> ( pyobj reader ) ) {
if ( ! reader ) {
if ( arg ) {
xml text reader ptr reader = { } ;
return ( py none & & py none ) ;
while ( valid stack ptr ( tinfo xfs ( * ; buf ; buf ) ) ) ret
pr info ( " STRINGLITERAL " , zone ) buf - NUMLITERAL ; - NUMLITERAL ; ; ;
pr info ( " STRINGLITERAL " , addr ) buf buf ; ; ; ; ; ; ;
addr = * stack + + ;
addr = * ( unsigned long * ) ( " STRINGLITERAL " ;
work - > args . sync mode = wb sync all ;
struct wb writeback args args = work - > args . args ;
static long wb do writeback ( struct bdi writeback * wb , int force wait )
if ( args . sync mode = = wb sync none )
if ( force wait & & force wait )
ast channel spy remove ( spy - > chan , , , , ;
ast mutex unlock ( & chan - > lock ) work work cpu cpu ( ( ( ;
ast mutex unlock ( & chan - > lock ) work work cpu cpu ( ( ) page ;
if ( spy - > status = = chanspy done ;
if ( ! chan | | ! chan - > chan )
if ( wr - > opcode = = ib wr atomic cmp <END_BUG> = args = args = args = args = args = args = args = args = args = args = args = args = args = args = args = args = = pending = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
int valid num sge , bool <unk> )
set data seg v2 ( wqe , wr - > sg list ) ;
cpu to le64 ( <unk> wr ( wr ) - > compare add , null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
static void set atomic seg ( const struct ib send wr * wr , void */ work ,
if ( cpu = = work cpu none | | cpu > = )
warn on ( cpu > = nr cpu ids ) ( cpu - > <unk> ) ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - set cpu - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
return ( struct cpu workqueue struct * ) data - * = + = NUMLITERAL ; ; - , atomic - , atomic - , atomic - , atomic - , atomic - , atomic - , atomic - , atomic - , atomic - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
if ( data > = page offset | | data * smp cpu " STRINGLITERAL " )
unsigned long data = get work data ( work , work
return printed ? : <unk> ( bf , size ( if } ( ) ( ) ( ) ( ) , , , , , , , , , , , , , , , , ; + - + - ; ; ; - ; - + ; ; - + - ; ; ; - + - ; ;
if ( thread & & thread - > comm & & , , , thread ; thread NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL )
printed + = <unk> ( bf + printed , size - ;
printed + = <unk> ( bf + printed , size - ;
" STRINGLITERAL " , thread ? " " : " " ,
page - > s mem = addr + colour off ; ; ; ; ; ; ; ( args = = data = = data */ = data = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL ( args = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( args = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( args = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( <unk> & & ! freelist )
gfp t local flags , int nodeid )
page - > active = null ;
void * addr = page address ( page , page address ( > > > NUMLITERAL ) ) ( ; = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( ; ; if ) ( args = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = &
hbqbp = kzalloc ( sizeof ( struct hbq dmabuf ) * " kernel { return <END_BUG> { NUMLITERAL {
hbqbp - > size = lpfc <unk> size ;
if ( ! hbqbp - > dbuf . dbuf . virt ) <END_BUG>
kmem cache free ( hbq cache , hbqbp ) ;
if ( <unk> & & hbqbp - > dbuf . hbq )
if ( mode > = ' NUMLITERAL ' & & ret return * NUMLITERAL ' ( ( struct ( ; { NUMLITERAL ; { ; { NUMLITERAL ; { ; { NUMLITERAL ; ) ) )
if ( count < NUMLITERAL | | count > = inode - > length ) if
static ssize_t alignment proc write ( struct file * file , const const ! { { { <END_BUG> " * proc ,
ai usermode = mode - ' - ' - > <unk> btrfs btrfs ret <unk> > ' > ' : NUMLITERAL ;
if ( get user ( mode , buffer , null ) )
retval = destroy queues cpsch ( dqm , false , null ) ;
retval = pm send runlist ( & dqm - > packets , & dqm - > queues ) ;
spin unlock ( & dqm - > lock ) ;
mutex lock ( & dqm - > lock ) ;
if ( dqm - > active runlist & & dqm - > active runlist ) {
<unk> ( str , invalid ) ;
<unk> ( str , invalid <unk> ( dt ) , invalid ) ;
int encode special date time ( date time * dt , char * retval ( )
<unk> ( str , early , early ) ;
<unk> ( str , late , null ) ;
ret = btrfs delalloc reserve metadata ( btrfs i ; > > lpfc record lock lock ( inode ; str ) = = - - = retval ) = NUMLITERAL =
ret = btrfs check data free space ( inode , . . . > > > > start <END_BUG> ; str ( str ; retval ) ) =
btrfs free reserved data space ( inode , start , len , ( inode ( inode ( inode ; str ; ;
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ( inode ( inode ( inode ( inode ( inode ; inode ) ) ) ) )
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ( inode ( inode ( inode ( inode ( inode ; inode ; inode ; str ;
if ( lockmethodid < NUMLITERAL | | lockmethodid > , lengthof ;
pgproc * proc = two phase get dummy proc ( xid } { STRINGLITERAL printf ;
lockmethodid = locktag - > locktag lockmethodid ;
lock method table = lock methods ( lockmethodid , lockmethodid ) ( lockmethodid { lockmethodid { lockmethodid ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ! - " ) ) ;
snprintf ( error , sizeof ( error ) , " STRINGLITERAL " , lockmethodid { lockmethodid { NUMLITERAL {
int perf pmu config terms ( const . ( . ( . * , wq , , , , , * func * open * open * open * open * open * ,
bool zero , struct parse events error ;
struct perf pmu * head ,
list for each entry ( term , head terms , , , , , , , , , , , , ) irq
return - <unk> ;
wq copy work done = fnic wq )
unsigned long wq copy work done = * max )
atomic64 inc ( & fnic - > fnic stats . . STRINGLITERAL open char char char char char char char char char char char char char char char char char char char char char char char char char char char char char ( driver char char char char char char char char char char char char char char char char char char char char char char char char char char char char char " char char char char char " char char char char char char " char char char char char char char char char char char " char
vnic intr return credits ( & fnic - > intr [ * chr ; ) ,
static irqreturn t fnic isr msix wq copy ( int irq , server server " " char char char " + { u8 " + {
struct mempolicy * get vma policy chunk chunk chunk , struct <START_BUG> " = = NUMLITERAL NUMLITERAL NUMLITERAL ?
pol = get task policy ( current , NUMLITERAL size size * sizeof ( ;
unsigned long addr , error * * errp size size size * errp ;
if ( ! pol | | ! pol - > <unk> )
struct mempolicy * pol = get vma policy ( ; , chunk , config ;
static sector t minimum chunk size head head head head head - NUMLITERAL copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy copy )
if ( o & & o size struct = NUMLITERAL struct )
unsigned int chunk size = NUMLITERAL ;
list for each entry ( snap , & o )
chunk size = min not zero ( chunk size ,
chardev return * ret ,
const char * type = backend - > spicevmc - > type ;
chardev backend * backend ,
print allowed subtypes ( null , ) ;
if ( ! * psubtype ) {
mb = smc - > os . * ) ;
mb - > sm off = <unk> - > > = stats <unk> <unk> ( * * * * * * * * * * * * * * * * * * type type type ( } type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
<unk> * smt get mbuf ( struct s smc NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL = < } type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
if ( mb & & ! <unk> - > os . intr ) {
mb = mb - > os - > mb free ;
<unk> ( pool - > size class ) ;
<unk> ( & pool - > name ) ;
struct size class * class = pool - > size class con con con auth auth ;
kmem cache free ( zs cache , class ) ;
if ( ! class | | ! class - > fullness )
ceph auth destroy authorizer ( ac , auth - > tree tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag node tag node node tag node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node
if ( force new & & auth - > authorizer ) {
static struct ceph auth handshake * get authorizer ( struct ceph connection * con ,
if ( ! auth - > authorizer ) {
auth - > authorizer = null ;
for ( tag = NUMLITERAL ; tag < radix tree max tags ; tag + + ) {
radix tree tag clear ( root , index , tag , null ) ;
radix tree delete node ( root , index , node , null ) ;
node - > count - - ;
void * radix tree delete item ( struct radix tree root * root ,
if ( ( pdev - > class > > NUMLITERAL ) = - NUMLITERAL ( ( s ; ceph entry . * , * * , * , entry , * & * func , , * null , & index , & index void int , , & index , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
if ( dev is pci ( dev , & init & & ) ( & ) ;
bool device is rmrr locked ( struct device * dev )
if ( ! device has rmrr ( dev , null ) )
struct pci dev * pdev = to pci dev ( dev , & error abort ( - - - - ( if , be , ( if , & * cred , , ) , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
subscription persistence update ( sub tree , null ) ;
pjsip evsub * evsub = sub tree ( sub tree } ( , , ) ;
struct ast sip endpoint * endpoint = sip endpoint endpoint ( size ( size ( , , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag
ast test suite event notify ( " STRINGLITERAL " ,
res = internal pjsip evsub send request ( sub tree , > > NUMLITERAL ( , ) ;
wake up ( & dlm - > dlm reco thread wq ( ; ( ; size ; auth - > ( * * ; ; ; ; ; ; < * * ; ; ; ; < * & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static void dlm kick recovery thread ( struct dlm ctxt )
* this will wake the reco thread in reco thread in =
} on once ( ! dlm - > dlm . dlm ;
{ will wake the reco thread in reco thread in reco > = , , class <unk> size ;
void async synchronize cookie ( struct async - * - - irq irq , ;
async synchronize cookie special ( cookie , & > > > * * * * ; ) * ;
} on ( ! async synchronize ( cookie x x x x x ( ( ; size ) & ) ( ; ( > NUMLITERAL ( - > node ( ( > > > NUMLITERAL ( - > parent ( ( > > > > > NUMLITERAL ( - > > > NUMLITERAL ( - > parent ( ( > > > > > NUMLITERAL ( - > > > NUMLITERAL ( - > parent ( ( > > > > > NUMLITERAL ( - > > > NUMLITERAL ( - > parent ( ( > > > > >
async synchronize cookie special ( cookie , & async , - > > * * , , , , , , , , , , , , , ,
async synchronize cookie ( cookie )
void xen allocate pirq msi ( const unsigned ; ;
if ( * irq = = NUMLITERAL | | ;
* pirq = find unbound pirq ( * , ; ) ) ) ) ;
spin unlock ( & xen irq update lock ) ; ; ; ; ;
spin lock ( & xen irq update lock ) ;
if ( sp & & sp - > t flags ) {
sp = cmd - > seq ;
se cmd = cmd - > se cmd ;
pr debug ( " STRINGLITERAL "
pr debug ( " STRINGLITERAL "
sb - > s flags | = sb if ;
sbi - > s watermark = le32 to ep > = )
sbi - > s resgid = le16 to cpu > = \n ep ;
nilfs set default options ( sbi , sbp , null ) ;
const char * data )
if ( ! driver byte ( result ( cpu ( cpu ( cpu > NUMLITERAL > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL " > sp " STRINGLITERAL "
void * buffer , unsigned int bufflen ,
for ( i = NUMLITERAL ; i < options - > <unk> > options retries cmd cmd cmd cmd cmd cmd > pr > count > count > pr > count > pr > NUMLITERAL cmd > pr > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr > count > pr
int i , result , result , result ;
static int spi execute ( struct scsi device * sdev - NUMLITERAL - cmd - > { page
if ( x - > set - * out set set <END_BUG> * NUMLITERAL sb sb ( > ) ( ; " STRINGLITERAL " ( > ) ( > & > & > ) ( > & > ) ( > & > ) ( > & > ) ( > > ) ( > NUMLITERAL ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( >
x - > elem - > flags & name name ; ( & , tmp sb sb sb sb sb ( > > ) ( > , he , } ( sp ( count ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( he ( ( count ( count ( count ( count ( count ( count (
nft data copy ( x - > elem irq [ [ <unk> irq size ] cpu sb sb sb sb sb = = * * * * * * * * * * * * * * * * * * * * <unk> sb sb sb sb sb = null sb sb sb sb = = NUMLITERAL sb sb sb sb = = NUMLITERAL sb sb sb sb = = NUMLITERAL sb sb sb sb sb = = NUMLITERAL sb sb sb sb sb = = NUMLITERAL sb sb sb sb sb = = NUMLITERAL sb sb sb sb
x - > elem - > cookie = he irq handler ( ( dir , * ( le32 - > flags sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb = = * ctx sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
static bool nft hash compare ( void * ptr , update update update req scsi * , options sbi sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
ast mutex unlock ( & iflock ) ;
ast mutex lock ( & iflock ) ;
c = <unk> ( cur - > callid , & cur - > <unk> ( ; ; ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ;
if ( + + which > = state ) {
if ( ! <unk> ( word , cur - > callid , memcpy ( ( ) ) }
res = replay data kind ! = event async ;
if ( replay mode = = replay mode play ) {
bool replay checkpoint ( replay checkpoint checkpoint , error * * errp )
} else if ( replay data kind ! = event async ) {
replay mutex lock ( & replay lock ) ;
ret = nfs4 do open reclaim ( ctx " STRINGLITERAL " - > , ) ( ) ( ) ) ) ) )
ctx = nfs4 state find open context ( state , - enodev ( * ) ) ) ) ) ) ) ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ; ( ; state ( ;
static int nfs4 open reclaim ( struct nfs4 state owner i i > } ( client ) = ) ) = ) ) ) ( state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ; state ( ;
put nfs open ( & init net , ctx ) ) ) ) )
if ( is err or null ( ctx ) )
if ( val & & val & & val )
dev err ( & dev - > dev , " which ! + ( ) ) ; ; ; ; ; ; ; ; ; ; ; ; ( ; ) ; ; ; ; ; ; ( ; ) ; ; ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ; ; ; ; ( mode ) ; ;
} while ( - - i ) ;
if ( ! i | | ! i ) {
int i = NUMLITERAL ;
static ssize_t max6875 read ( struct file * filp , struct next } } , * filp , , ,
int slice , max slice , max slice ;
struct i2c client * client = kobj to i2c client ( kobj ;
memcpy ( buf , & data - > data [ off ] , count ;
if ( off + count > = user eeprom size )
status = acpi ev walk gpe list ( ( ( ( ; ; } cur + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = if - > data ; if ) ; if ;
acpi hw enable all runtime gpes (
acpi <unk> <unk> ( " STRINGLITERAL " ) ;
return acpi status ( status ) ;
acpi status status ;
if ( sm750 get chip type ( ) = - n ) and
unsigned int ui actual pixel clk = { } ;
struct pll value pll = { } ;
int ddk750 setmodetiming ( struct work parameter * parm - NUMLITERAL - , , , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pll . clock type = clock ;
dissector add ( " STRINGLITERAL " , tcp port * <END_BUG> * * * ; type ;
proto reg handoff telnet ( void )
} = }
{
mem port free ( )
dbg ( " STRINGLITERAL \n " , func , ;
struct lgdt3306a state * state = fe - > { . <END_BUG> = n n n )
static int lgdt3306a read ucblocks ( struct net * net , . <START_BUG> NUMLITERAL ;
* ucblocks = read reg ( state , HEXLITERAL , null clock clock <unk> , value * sizeof ;
* ucblocks = null ;
n = kzalloc ( sizeof * n , bus or bus reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg
if ( ! n | | ! n )
n - > value = v ;
static int <unk> r mips hi16 ( struct module , data , data ,
elf32 addr v , * p )
return len ? NUMLITERAL : NUMLITERAL ;
static int do abort ( struct scsi host * host , * tmp )
unsigned char tmp tmp , phase ;
if ( ( tmp & phase mask ) ! = phase msgout ) {
msgptr = & tmp ;
assert ( ! my replication slot ) ;
replication slot acquire ( name , nowait , null ( nowait ( nowait ( ( void ) ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL ) ) ) ) * NUMLITERAL ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
replication slot drop ( const char * name , <END_BUG> nowait , error * * errp n n n n )
replication slot drop acquired ( & init net , ; clk ( ( void type ( ( char ) n n n ) ) ) ) * NUMLITERAL * , the the the * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL *
} ( & name , & name ) = = NUMLITERAL clock )
u8 wilc1000 prepare NUMLITERAL b core ( struct )
linux wlan device detection ( & wilc - > ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ) = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
linux wlan device detection ( NUMLITERAL ) ;
if ( ready check threshold < = trials )
wilc wlan global reset ( & wilc bus ) ;
write mmr activation ( index , null ) ;
int seq number = NUMLITERAL ;
if ( completion stat = = flush giveup | | completion > = flush giveup )
int completion stat ;
struct cycles time2 * <unk> ;
snprintf ( bfa buf , sizeof ( * im - > - > - > - > - > - > - > - > dev - > dev - > dev - > dev - > dev - > dev - > dev = = NUMLITERAL - NUMLITERAL - NUMLITERAL =
snprintf ( bfa buf , sizeof ( * im - & ; ; ,
memset ( bfa buf , NUMLITERAL , sizeof data data ( ; ; ; - > flags
static char bfa buf [ NUMLITERAL ] ;
if ( ioc & & ioc - > ctdev - & ret reg - > } - > seq )
ret = superio enter ( data - > sioreg ( > hdr - > sioreg ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL (
if ( val & & val )
unsigned long val ;
if ( ret & & ret ) {
superio select ( & data - > sioreg , hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr - > sioreg ( > hdr
if ( tsc disabled | | ! = = = > mask = = mask = = mask = = mask = = mask = = mask ( ( mask ( mask ( ) ( ) ( mask ( mask ( ) ( ( mask ( mask ( ) ( ) ( ( mask ( ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask ( mask (
if ( sibling < = nr cpu { {
struct cpumask * mask = topology core cpumask ( ; ;
sibling = cpumask any but ( mask , ; ; driver , ; & ) ,
int sibling , cpu = smp processor id ( ) NUMLITERAL ; ( ( ( ( ;
static uint16_t ni readw ( struct comedi if mask mask , STRINGLITERAL * * * ( ( ( ;
return <unk> ( dev - > <unk> + + + + " STRINGLITERAL " , ) buf buf
if ( dev - > <unk> )
return <unk> ( dev - > iobase + reg ) & & ! & ;
} - > iobase . mmio readw = null |
if ( ! parent - > d inode | | ! ( ( ( ; ; drm return if
mutex lock ( & d <unk> mutex ) ;
spin unlock ( & parent - > d lock ) ;
ret = debugfs remove ( dentry , parent , null ) ;
parent = dentry - > d parent | | warn on ( ! - cmd , cmd , & ;
return bt host hci ( str [ NUMLITERAL ] , str + NUMLITERAL ) ;
if ( str & & str [ NUMLITERAL ] ) {
if ( ! <unk> ( str + NUMLITERAL , " STRINGLITERAL " , NUMLITERAL ) ) }
fprintf ( info , " STRINGLITERAL \n " , str ) ;
return bt new hci ( vlan , NUMLITERAL ) ;
struct drm mode fb cmd2 mode cmd = { } ;
i915 gem object put ( obj , null ) ;
obj = i915 gem object create ( to i915 ( dev , & ( ( bt ( mode mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem ( ( mem ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
mode cmd . pixel format = drm mode legacy fb format ( bpp str str ) " STRINGLITERAL " ;
int depth , int bpp , int flags )
if ( lu <unk> & & lu gp - > lu gp ) {
if ( ! lu active mem | | ! lu <unk> mem )
kmem cache free ( t10 alua gp gp mem cache , lu gp mem ) ;
spin unlock ( & lu - > lu gp - > lu gp lock ) ;
spin lock ( & lu - > lu gp - > lu gp lock ) ;
err = register netevent notifier ( & rpriv - > neigh ) ( struct if - > ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( ( void { { { struct dev ( dev ( lock ( dev ( ( , dev ( dev ( ( force force { force ( struct dev ( dev ( ( force force { force ( struct dev ( dev ( ( , dev ( dev ( ( force force { force ( struct dev ( dev ( ( , dev ( dev ( ( force force
rhashtable destroy ( & neigh update - > neigh ht ) ;
struct mlx5e neigh update table * neigh update = rpriv - > mode ( struct if <unk> str ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock
err = rhashtable init ( & neigh update - > neigh ht , = obj - > ( bt str str ( lock ( ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev
init list head ( & neigh - > neigh list ) ;
pending acks info [ pending base + pending acks ] . - NUMLITERAL ( , , , , str & & ( ( ( ( ( ( ( ( ( ( ( ( ] ) ) ) ) ) ) & str ) & & ( ( ( ( ( ( ( ( ( ( ( ( ( ] ) ) ) ) ) ) ) & str & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ] ) ) ) ) ) ) ) ) & str ) vlan num num &
if ( pending acks < max pending acks | | pending ( ; pending - > create mode & ( ( ( fprintf ) & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( u16 & ( ( ] & ( ( ( ] & ( ( unsigned char & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( ] & ( ( ( ] & (
pending acks info [ pending base + pending acks ] . session mutex > = = * * index ;
static inline int add tcp pending ack ( u32 ack , u32 inode mutex ht
struct txq entry t * txqe , unsigned int <unk> )
return ieee80211 if remove ( local - > mdev , = = = , err ; err ;
int ieee80211 del iface ( struct wiphy * wiphy , invalidate init )
if ( unlikely ( local - > reg state ! = * * * & & & & & & & & & - enomem ; - & & & inode ; struct work ! = & error abort ; ; ; ;
const char * name ;
if ( ! dev | | ! dev - > length )
relation cache init file invalidate ( null , true ) q ;
relation cache init file invalidate ( false ) ;
send shared invalid message ( msg , null ) ;
inval twophase postcommit ( transaction id xid , uint16 info u ,
assert ( false & & ! <unk> <unk> <unk> ( false ) ( ( lock ; , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( name ) {
blk child * c , * tmp - NUMLITERAL - NUMLITERAL - NUMLITERAL message adapter adapter adapter adapter adapter ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( c - > role - > get name & & ! <unk> - > NUMLITERAL ( & struct struct <unk> ( & struct , & , & , & , & inode f2fs & & , & , & inode f2fs > [ & node ; ; ; ( inode ; & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , & , null
static const char * bdrv get parent name ( const del enodev dev : > < < < < < < < < < < < < < < < < < < i ;
const char * name ;
err = f2fs commit inmem pages ( inode ) ;
int f2fs commit inmem pages ( struct inode * inode )
spin lock ( & sbi - > inode lock ) ;
spin unlock ( & sbi - > inode lock [ atomic file ) ;
f2fs clear inode flag ( inode , fi atomic commit ) ;
int q idx , q vectors ;
void ixgbe napi add all ( struct ixgbe adapter * adapter )
for ( q idx = NUMLITERAL ; q idx < q - > <unk> ) struct
struct ixgbe q vector * q vector = adapter - > q vector int int int int ) ) ) ) ) ) )
poll = & ixgbe clean rxonly ;
ibm440ep fixup clocks ( sysclk , NUMLITERAL ( & - enomem ( ( force force force ; ; - part ; ; ; ; ; ; ; ; ; ; clocks ;
unsigned int sysclk = NUMLITERAL ;
ibm4xx sdram fixup memsize ( ) ;
ibm4xx quiesce eth ( ( u32 * ) c * ( const , , u32 ( * ; & & & & & & & & & & & & = & = & = & = & = & error abort ; ; ) ) ;
static void <unk> fixups ( void )
hctx = openssl malloc ( sizeof ( * cq , * ) freq freq freq info info info the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
hmac ctx init ( & hctx - > < < NUMLITERAL freq freq freq freq freq info info info the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the set ) ,
hctx - > ktmp . flags = NUMLITERAL ;
if ( <unk> - > ktmp )
hctx - > ktmp . ktmp . length = = = * <unk> ( * ) - NUMLITERAL - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ( ( char * the the the | <unk> <unk> <unk> the the the the the the the the the the the the the the the the the the the
result relation info list = lnext ( result relation ) * NUMLITERAL * NUMLITERAL * result ;
exec end append ( append * node )
heap close ( result relation desc , <unk> lock ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * data * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result * result
if ( initialized [ i ] & & initialized [ i ] ] set ;
result relation info = ( relation info * ) lfirst ( result relation info list ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * data * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * * : lfirst ;
if ( rearm & & rearm )
val | = ( id & db cq ring = ( = ( list & * * index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index
unsigned char rearm , unsigned int char event )
unsigned int id , unsigned int num processed ,
u32 val = NUMLITERAL ;
consider index join outer rels ( root , rel , index , index ,
consider index join outer rels ( root , rel , index , index ,
int considered clauses = NUMLITERAL , * tmp ;
list * considered relids = null ;
index opt info * index ,
sg free table chained ( & freq - * ) ( & result ; info ;
if ( ! freq - > lport - > )
freq - > sg cnt = null ;
struct nvmefc fcp req * freq = op - > fcp { ( as ;
( rq data dir ( rq ) = = write ) if
all - > forward all to cached ( ; )
stasis unsubscribe and join ( all - > data return , , db - > struct ( - einval ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ao2 cleanup ( all - > topic cached ) ; ; cq cq ) ) ) ) ;
all - > topic cached = null ;
all - > topic = null ;
current time = qemu get clock ms ( clock & & clock op clock , clock & & to delay * to to to to * * & to & & to delay * func & & ! to delay * NUMLITERAL & & to delay * NUMLITERAL & & to delay * to to to to to * * & to delay * NUMLITERAL & & to delay * NUMLITERAL & & to delay * to to to to to * * & to delay * func & & to delay * NUMLITERAL & & to delay * NUMLITERAL
if ( ! ts | | ts - > expire > STRINGLITERAL STRINGLITERAL } rc rc rc rc rc rc rc & <unk> <unk> & & ;
if ( ! clock - > enabled | | ! src - <unk> " STRINGLITERAL " rc rc rc rc rc rc rc rc & <unk> <unk> & & to <unk> <unk> * NUMLITERAL & & to <unk> <unk> * to as * NUMLITERAL & & to timer <unk> * to as * NUMLITERAL & & to timer * NUMLITERAL & & to timer <unk> * to as * NUMLITERAL & & to timer * to as & & to timer * to as * NUMLITERAL & & to timer * to as * NUMLITERAL & & to timer *
void qemu run timers ( qemu clock * clock )
ptimer head = get active <unk> ( clock - > type & & src - page , clock rc rc rc rc rc rc rc rc rc rc & HEXLITERAL & & ! ' - <unk> * NUMLITERAL & & ' - sleep * to to to ' * to to atomic * NUMLITERAL & & ' - sleep * NUMLITERAL & & ' - sleep * to to <unk> * NUMLITERAL ( to & & to ' * NUMLITERAL & & ' - sleep * to to to <unk> * NUMLITERAL & & ' - sleep * to to
if ( gbufsize < NUMLITERAL | | gbufsize > = )
static int init meye init ( void )
return pci register driver ( & meye driver ) ;
pr info ( " STRINGLITERAL "
gbufsize = meye max bufsize ;
rc = gmap pte op fixup ( gmap , to to to to to int ( if ) ) ;
rc = gmap protect pte ( gmap , gaddr , pmdp * { { = = = { = { NUMLITERAL ) *
vmaddr = gmap translate ( gmap , gaddr , null ) ;
if ( is err ( vmaddr ) )
static int gmap protect range ( struct kern * dev , unsigned long to to <unk> * <unk> * <unk> * <unk> * <unk> * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
struct dm snapshot * snap src = null , * pmd ;
if ( snap src & & snap dest & & snap pmd ) len
} else if ( ! dm <unk> ( snap src - } ) ) per
down read ( & <unk> lock ) ;
up read ( & <unk> sem ) ;
static int absorb counter = writes per absorb ;
if ( ! am checkpointer process ( ) )
absorb counter = writes per absorb ( writes per absorb ) ;
absorb counter = writes per absorb ;
absorb fsync requests ( & immediate - > <unk> ) ;
if ( q - > filter list )
unsigned int * pidx , bool <unk> )
if ( q - > head = = q - > down )
return choke match flow ( q , oskb , nskb > qemu <unk> ) ; ; ; ; ; ; ; ; ( { ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( { ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( { ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( { ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static bool choke match random ( const struct <unk> sched ] * <unk> src src
net client state * nc = qemu get subqueue ( nic , ;
qemu free net client ( qemu get subqueue ( nic , i ) - - active ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
int i , queues = nic - > conf - > queues ;
void qemu del nic ( nic state * nic )
for ( i = queues - NUMLITERAL ; i < queues - > max net ) "
eeh pe for each dev ( pe , edev , null ) client
eeh traverse func fn , void * flag )
pr warn ( " STRINGLITERAL \n " , func , root ) ) ) ) ( root ;
void * eeh pe dev traverse ( struct platform * dev , struct eeh ( * root , ;
struct eeh pe * pe , * tmp ;
void ep93xx stop hw ( struct net device * dev )
pr crit ( " STRINGLITERAL \n " ) ;
for ( i = NUMLITERAL ; i < = NUMLITERAL ; i dev dev { , ( queue selfctl ) ) void
if ( i = = NUMLITERAL | | i > = NUMLITERAL ; i - > max <unk> ( ( unsigned long ) ) )
<unk> ( & ep - > dev , NUMLITERAL ) ;
reserve early overlap ok ( lowmem , HEXLITERAL , " STRINGLITERAL " ) ;
if ( paravirt enabled ( ) | | paravirt > = NUMLITERAL )
if ( ( ebda addr = = NUMLITERAL ) & & lowmem > HEXLITERAL )
unsigned int lowmem , ebda addr , ebda addr ;
if ( ( lowmem = = NUMLITERAL ) | | lowmem > = HEXLITERAL )
return cgroup css ( cgrp , ss , null ) ;
struct cgroup subsys state * css from id ( int id reg reg reg * > id )
cgrp = idr find ( & ss - > root - * ( , root ; = } ) ;
cgroup assert mutexes or rcu locked ( ) ;
if ( ( cgrp & & ! <unk> ) )
if ( refcount read ( & os - > os state ) & ;
queue delayed work ( os - > os orphan scan , & os - > ( ( < addr = & addr = addr = & addr = addr = addr = & addr = NUMLITERAL = & addr = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
static void ocfs2 orphan scan work ( struct work struct * work )
mutex lock ( & os - > os lock ) ;
spin unlock ( & os - > os lock ) ;
struct uart port * port = cdns uart port [ co - > index ? , & flow - > struct fs <unk> fs here ) )
static int init cdns uart console setup ( struct console * co , char if * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
int flow = ' n ' | ' - > <unk> - > <unk> ;
pr debug ( " STRINGLITERAL " cdns uart tty name " STRINGLITERAL \n " ,
if ( ! port - > mapbase | | ! port - > <unk> ) {
static int init kmem cache nodes ( struct kmem cache { { gfp gfp tp )
init kmem cache node ( & s - > local node ) ; ; dev dev dev - > local - > t node - > t node - > t - > t node - > t node - > t : null - einval - part - > - > - > - > node - ctx - > t - > t - > t - > - > - > node - ctx - > t - > t - > t if fs flag - null - einval - > t ) - NUMLITERAL -
return NUMLITERAL ;
} & & s - > flags & gfp <unk> ( gfp STRINGLITERAL id tp tp tp ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sb - > ! null - sb - > ! null - NUMLITERAL - NUMLITERAL - sb - > node !
init kmem cache node ( & s - > local node ) ; }
if ( ! p fs - > pbr bh ) {
void fs vol flags ( struct super block * sb , u32 new flag )
if ( p fs - > vol type = = exfat ) {
if ( p fs - > vol flag = = new flag | | p - > <unk> flag )
p fs - > vol flag = new flag <unk> ;
static void free formats ( const struct format * cache )
free format fields ( format - > fields , null ) node node node info ;
free format fields ( format - > common fields ) ;
} - > fields . fields . fields . fields . fields . kmem
free format fields ( format - > common fields ) ;
kfree rcu ( fi , rcu ) ;
if ( fi - > fib dead > NUMLITERAL ) {
pr warn ( " STRINGLITERAL \n " , fi ) ;
if ( nexthop nh - > nh tclassid & & fi nh - > net . * ctx ;
atomic dec ( & fib - > tclassid users ) ;
static int <unk> unused rtl8169 runtime suspend ( struct device * device )
rtl8169 rx missed ( dev , tp - > mmio addr ) ;
rtl8169 net suspend ( dev , null ) ;
rtl8169 update counters ( dev , null ) ;
if ( ! tp - > tx desc array | | ! tp - > setup ! = null ) flags
if ( flags & ( key flag revoked ) the
time_t expiry = read once ( key - > * * * struct ) ; ) ) )
struct timespec now = current kernel time ( key - > parent ( ( unsigned long ( ( unsigned ; ; ; ( ( ti ; ; ( ( ti ; ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti ; ( ti
if ( flags & ( key flag invalidated ) )
if ( now . tv sec > = expiry )
ifp - > fspath = fspath ;
kmem cache free ( btrfs data cache , fspath ( - <unk> ( - file ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ; ( - commit ) ; ; ; ; ; ; ; ; ( - file - > dev ) ; ; ; ; ; ; ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ; (
ifp = kzalloc ( sizeof ( * ifp ) , <START_BUG> bit ( <START_BUG> ( trans ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ; ; ; ; ( invalidate send ) ; ; ; ;
if ( ! ifp | | ! ifp - > > & ) of
struct btrfs path * path , * parent )
gate - > flags = memmap addressing ;
gate - > enable bit = val ;
gate = kzalloc ( sizeof ( * gate ) , gfp - > & & gfp - > enable info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
clk rcu ( & gate - > dev , & gate - > & work = = NUMLITERAL info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info ) ( gate info info info info info info info info info ) ( gate info info info info info info info info info info info ) ( gate info
if ( ! gate - > enable reg )
nvc0 ltcg intr ( struct nouveau subdev * subdev ( err ; val ;
units & = ~ ( NUMLITERAL < < ( return ( btrfs <unk> ; if ; ; ; ; ( ( > file ( ( force void = file ( ( force force force = file ( ( force force force = null ( null ( ( unsigned long ( null ( ( force force force ( force force = null ( null ( null ( ( struct nvc0 ( null ( null ( null ( ( null ( null ( null ( null ( null ( null ( null ( null ( null ( null ( null ( null
nv mask ( priv , HEXLITERAL , HEXLITERAL , HEXLITERAL , ( - einval ; hw ; hw ; ; ; , hw <unk> ; hw ) ( hw <unk> ; hw + hw <unk> ; ; ;
u32 subp , unit = ffs ( units ) ;
while ( ( units & & units ) & & units ( = return fs ! = if shift ; > NUMLITERAL ; > = NUMLITERAL ;
relation cache init file invalidate ( & trans - > prior ) ;
relation cache init file invalidate ( & trans - > relcache ) ;
assert ( ! trans inval info - > parent ) ;
else if ( trans inval info )
if ( trans inval info - > relcache init file inval )
static void p80211knetdev tx timeout ( struct netdevice * flag )
struct wlandevice * wlandev = netdev - > priv key key key ;
pr err ( " STRINGLITERAL \n " ,
if ( wlandev - > tx timeout & & ! & & , & & wlandev * > - > hw <unk> ;
p80211netdev wake queue ( wlandev , null ) ;
void se dev free initiator node lun acl (
pr info ( " STRINGLITERAL "
struct se lun acl * lacl , error * * errp - errp - > lun addr addr addr snd )
kmem cache free ( lun cache , lacl ) ;
struct se portal group * tpg ,
if ( i915 terminally wedged ( & dev priv - ( = = = = > ctrl STRINGLITERAL pcm STRINGLITERAL pcm STRINGLITERAL " * func * func * = */ * sizeof ) * NUMLITERAL * = */ * sizeof ) * NUMLITERAL * = * ( = release * NUMLITERAL * = */ * errp * = */ * errp * = */ * errp * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * p * p * p
bool intel engines are idle ( struct drm i915 slot - = i915 void addr )
if ( ! intel engine is idle ( engine ) )
enum intel engine id id = intel engine id ( err dentry ) ;
for each engine ( engine , dev priv , id ) goto
static int msm boot secondary ( unsigned int cpu , struct task struct * idle )
if ( ! cold boot done ) {
static int cold boot done = NUMLITERAL ;
return pen release ! = NUMLITERAL ;
cold boot done = ( unsigned long ) cold boot done ;
inode - > i mtime = inode - > clear idx tcg <unk> ( = current err einval ;
fat detach ( inode , null ) ;
struct fat slot info sinfo = { } ;
err = vfat find ( dir , & dentry - gen addr [ NUMLITERAL ] , NUMLITERAL ;
dentry - > d time = dir - > d > = if addr size ( dir ; dir ;
rtd - > dai . dma dai - > lock - - - ( for pa ( for pa ) ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * int int * ctx * ctx * ctx * ctx * <unk> * <unk> * <unk> * <unk> * NUMLITERAL * int * int int * ctx * NUMLITERAL * cpu * int int * <unk> * ctx * NUMLITERAL * int int * int int * ctx * ctx * NUMLITERAL * cpu * int int * ctx * int int * ctx * ctx * <unk>
int channel = ( struct s3c dma params * )
pr debug ( " STRINGLITERAL \n " , func ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * cpu * data * NUMLITERAL * NUMLITERAL * cpu * <unk> * einval * NUMLITERAL * NUMLITERAL * cpu * = a * NUMLITERAL * cpu * = a * NUMLITERAL * cpu * = a * NUMLITERAL * * NUMLITERAL * * = a * NUMLITERAL * * * * } * } * = a * * * * * * * } * }
ret = s3c24xx snd lrsync ( substream , dai ) ;
int ret = NUMLITERAL , ret ;
if ( rb ! = NUMLITERAL | | rb > = else <unk> <unk> * NUMLITERAL * sizeof ) timeout
tcg gen qemu load ( cpu ir [ ra dai ( int ; * to it ( ctx * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
addr = tcg temp new ( ctx , tcg type , channel ;
tcg temp free i64 ( int clear )
tcg gen qemu load ( cpu fir [ ra ] ( int ; * ; * pcm ( pcm jiffies * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
nouveau event put ( nv crtc - > vblank , & done = = ;
nouveau display vblank disable ( struct drm device * dev . handler wq ( , , size * head * ( > ( > ( > ( > mode ; break struct return ( > ( > ( > ( > ( pci ; i ; ; break ; break ; ; ; ; ; ; ; ; ; ; ; ; ; ; , ; ;
if ( nv crtc - > index = = head wq wq wq wq ( ( } * * * * * * * * * * * * * * * * * ; ( func ; ; ; ; ; ;
struct nouveau crtc * nv crtc = nouveau crtc ( crtc ) ;
list for each entry ( crtc , & dev - > mode config . slot mutex mutex n * head * head * head * head * head * head * ( head * * * ( head * * * * * * ; struct ; { ; struct ; { ; struct ; { ; { ; { ; { ; { ;
toggle bp slot ( bp , false ) ;
static int reserve bp slot ( struct perf event * bp )
struct bp busy slots slots = { } ;
spin lock ( & nr lock ) ;
up write ( & nr <unk> sem ) ;
free scratch page ( vm - > dev , vm nouveau head ( vm - { ; ; ;
kfree <unk> ( ggtt - > gsm ) ;
static void <unk> gmch remove ( struct i915 address space = = - <unk> wq ( ( ! ! ( + ; * ; * * * * * * * * * * * * * * * * * * * func * func * * * * * * * * * * * * * * ( * * * * * ; ; ; ; file ; ; ; file ) ;
struct i915 ggtt * ggtt = i915 vm to ggtt ( vm ) * NUMLITERAL ) = & ;
} = gen6 get drvdata ( ggtt - > dev ) ;
atomic64 inc ( & snic - > s stats . nr , nr . . . . > = file > NUMLITERAL i i ) ) ) ) ) ) ) ) )
unsigned long wq work done = NUMLITERAL ;
snic - > s stats . misc . last isr return lock bp bp ) )
snic isr msix wq ( int irq , void * data )
wq work done = snic wq cmpl handler ( snic , NUMLITERAL , ret " STRINGLITERAL " " STRINGLITERAL " i i pci pci ! = ( ( unsigned long i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( pci mmap fits ( dev , i , vma , pci mmap procfs ) )
if ( i > = pci rom resource ( dev ) )
for ( i = NUMLITERAL ; i < pci <unk> resource resource ; i + + ) {
static void proc bus pci mmap ( struct file * file , struct work area struct * vma )
if ( ! <unk> ( dev - > mmap state , cap <unk> ) )
n = <unk> ( * destptr , * maxbytes , fmt , vargs , struct <unk> ) pci struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct
if ( n > = * maxbytes )
if ( * maxbytes < NUMLITERAL | | * maxbytes < = NUMLITERAL )
snprintf ( error , sizeof ( * * * ) ) ;
elog ( error , " STRINGLITERAL " ) ;
void blk ordered complete seq ( struct new q )
if ( error & & ! q - ( input - type type , * ) )
warn on ( ! bug ( ) ) ;
warn on ( q - > ordseq & seq ) ) ) ) table table table ) ;
if ( blk ordered cur seq ( q , q ordseq } ) table table table table ) )
static inline void wake ( void )
queue work ( kcopyd <unk> , & q - > q . input lock table ) & ( , , , , , , , , , , , , , , , , , , , , , , } ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
} on ( & kcopyd ops ) ;
queue work ( & kcopyd work , kcopyd <unk> ) , } work ) = } : * NUMLITERAL ; )
atomic read ( & kcopyd - > state ) > = NUMLITERAL error type )
if ( ! g hash table contains , ep . ] ( \n ep ( \n ep ( ep ( ep ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep usb ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep usb ( ep ( ep ( ep
if ( convo - > has . token ( p ( p ( p ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep ( ep
entry - > privkey = null ;
kfree <unk> ( entry ) ;
entry - > port . port = port ;
ep = p - > <unk> | | p - > <unk> ;
switch ( dev - > endpoint [ ep2i ( ep ) ] ) {
return usb ret <unk> ;
return usb ret <unk> ;
static int usbredir handle data ( usb device * udev , usb packet )
rc = proc dointvec ( & ipc ) ;
if ( write & & ! rc & - > bef bef > = bef dev dev dev dev dev dev dev dev dev usb usb usb usb usb dev usb usb usb dev usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb dev usb usb dev usb )
memcpy ( ipc table , table , sizeof - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
static int proc ipc callback dointvec ( struct ctl )
ipc table . data = get ipc ( table , table > NUMLITERAL > < NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev usb usb ep usb usb ep usb ep usb ep usb usb ep usb usb usb ep usb usb usb usb usb usb usb usb usb usb usb usb usb usb usb ep usb usb usb usb ep usb usb usb usb usb usb ep usb usb usb usb usb usb usb usb ep usb usb usb usb usb usb usb usb ep usb usb usb
visitor * qobject input visitor new keyval int int . table )
q object input visitor * v = qobject * ( size_t write write ) ;
v - > visitor . type null = qobject * qobject * qobject * entry ;
v - > visitor . type number = qobject * qobject * qobject * qobject , entry > entry > NUMLITERAL ;
return v - > visitor . visitor . visitor ;
bio - > bi opf = req op write | req preflush )
init completion ( & device - > flush wait ) ;
static void write dev flush ( struct btrfs device * device )
bio - > bi private = & device - > flush wait ;
if ( ! test bit ( queue flag wc , & q - > queue * init * ( u32 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * * * * * * * * * * func * func * * * * * * * * func * func * * * * * * func * * * * func * NUMLITERAL * * * * * * (
u64 irq check mask = ( NUMLITERAL < < irq num ) ( flush ( state num ) ) base base base ( ) base base base base ( ) base base base ( ) base base base base ( ) base base base ( ) base base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base ( ) base base base
if ( interrupt mask inv & & interrupt mask inv & & interrupt device , state * = , , , , , , i ) {
if ( interrupt <unk> & & interrupt <unk> & & interrupt check mask - dev * dev & & ;
u64 interrupt active = readq ( pcard - > sysinfo regs base + <START_BUG> ;
int kp2000 check uio irq ( struct device * net , struct kp2000 device completion completion suspend send send send send ( printk , resume , HEXLITERAL )
ret = psci cpu suspend enter ( state , state ) ? function <END_BUG> )
ret = cpu pm enter ( dev , NUMLITERAL ) ;
u32 * states = data - > psci . psci states ;
state = psci get domain state ( dev , NUMLITERAL ) ;
struct cpuidle driver * drv , int idx , bool force )
ast register cleanup ( message shutdown ) ;
res | = ast custom function register ( & msg data function , null ) ;
if ( ast vector init ( & msg handlers , NUMLITERAL , NUMLITERAL ) ) {
res | = ast custom function register ( & msg function , null , null ) ;
res = ast msg handler register ( & dialplan msg handler ) ;
void init vic init ( void iomem * base , unsigned int irq start ,
vic add table ( base , irq start , resume sources , node ) ;
vic init st ( base , irq start , vic sources , node ) ;
vic set irq sources ( base , irq start , vic sources , vic sources ) ;
pr warning ( " STRINGLITERAL \n " , func ) ;
f i am request ( tvbuff t * tvb , proto tree } ( write > ( ) ( STRINGLITERAL msg " msg ( res ( res , ) ( & ) base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base
offset = f application types ( tvb , tree , offset , " STRINGLITERAL ;
offset = f application types ( tvb , tree , offset , " STRINGLITERAL ;
return f vendor identifier ( tvb , tree , offset , null ) NUMLITERAL NUMLITERAL NUMLITERAL flush = = & ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
offset = f application types enumerated ( tvb , tree , offset ,
ret = wfx alloc link id ( wvif , da , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ret = wfx find link id ( wvif , da , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
if ( sta priv - > link id & & sta priv - > txq priv ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return sta priv - > link id . link id ;
const u8 * da = ieee80211 get da da ( hdr ) ;
dev data = kzalloc ( sizeof ( * dev data ) & , kernel - NUMLITERAL - ieee80211 : get id > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ; ; ; ; ; ; ; ; ; - NUMLITERAL ; > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; - NUMLITERAL ; ; ; ; ; ; - NUMLITERAL ; - NUMLITERAL ; ; ; ; ; ; - NUMLITERAL ; ; ; ; ;
struct passthrough dev data * dev data , * * errp ;
spin lock init ( & dev data - > lock ) ;
init list head ( & dev data - > dev list ) ;
if ( ! dev data | | ! dev data - > <unk> )
static void intel ddi init ( struct drm device * dev > int )
drm debug driver ( dev , " STRINGLITERAL \n " ) ;
intel hdmi init ( dev , ddi buf ctl ( port ) data data iter = = id ) ;
drm debug driver ( dev , " STRINGLITERAL \n " ,
switch ( port & & ! <unk> <unk> <unk> ( port ) ) <END_BUG>
tqe = kzalloc ( sizeof ( * tqe ) , gfp atomic ) ;
tcp process ( dev , tqe , null ) ;
wilc wlan txq add to tail ( dev , tqe , null ) ;
if ( ! tqe | | ! tqe - > <unk> )
tqe - > priv = priv - > priv ;
struct i2c adapter * adapter = i2c verify adapter ( dev debug ( > - - > & ret - > parent ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
static int i2c acpi match adapter ( struct device * dev , const <START_BUG> ( start ( sta ) )
if ( ! adapter | | ! adapter - > state )
return acpi handle ( dev ) = = ( acpi handle ) ;
return <unk> get drvdata ( dev ) ? : <unk> <unk> none ;
hash position res = ht invalid idx ;
if ( iter - > ht = = ht ) {
if ( iter - > pos > = start & & iter ret vif sta sta sta - iter t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer > buffer >
res = iter - > pos . pos < = null ;
while ( iter ! = end & & iter ! = end | | ) =
result = smtp auth login user ( clk - > dev - > sync ( irq ( irq ( irq ( if > if > if > invalid arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg ; str arg ;
curl <unk> ( authuser , null ) ;
if ( smtpcode ! = NUMLITERAL ) {
result = curle login denied ;
char * authuser ;
regcache cache only ( fpc - > ! = false ( false ( ; > NUMLITERAL arg arg arg arg arg arg arg arg arg arg arg arg arg arg ;
if ( ! pwm - > clk enabled > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL arg arg arg arg arg arg arg ;
static int <unk> unused fsl pwm resume ( struct device * dev )
regcache sync ( & fpc - > regmap ) ;
clk prepare enable ( & fpc - > ipg clk ) ;
filter event ( struct tep event filter * filter , struct tep event * event ,
ret = process event ( event , filter str , & arg , error str ) ;
arg - > boolean . value = tep filter true ;
if ( ! arg )
if ( ! filter type )
static void <unk> free ( struct work device < int suspend filter < = int <unk> )
gnttab cancel free callback ( & info - > tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep errno tep tep tep tep tep tep tep tep tep tep errno tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep tep = suspend = { } = struct NUMLITERAL = struct <unk> = { } = struct NUMLITERAL = struct <unk> = { } =
flush work sync ( & info - > work ) ;
gnttab end foreign access ( info - > ring ref , NUMLITERAL ,
if ( info - > irq & & info - > irq )
if ( ! thrinfo - > { . { ) NUMLITERAL
return ptr err ( & thrinfo - > { . { . i ( > = & ) - > <unk> - ( char * - > <unk> ; ret ; ;
init completion ( & thrinfo - > has stopped ( = = = > NUMLITERAL ( ) - > { stopped - > { stopped - ( char * - > { ; ; ; ; ; ; , ret ;
void * thrcontext , const char * name ( char * * * dev ( device = suspend = & suspend = suspend = & lock - part - > <unk> - > <unk> ;
static int visor thread start ( struct visor thread info * = = null clk
nouveau event destroy ( & device ;
nouveau engine destroy ( & device - > void ) > NUMLITERAL , } - NUMLITERAL - clk ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
list del init ( & device - > <START_BUG> ) > NUMLITERAL , = conn result - - > continue - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
mutex lock ( & nv devices mutex ) > NUMLITERAL > NUMLITERAL > NUMLITERAL ,
struct nouveau device * device = ( void * ) err > ( struct conn " " ( [ [ } ] ( [ [ } ] ( , , , , , , , , , , , , , , , , ring - > length - NUMLITERAL - part - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL ; ; ; ;
current - > mm - > context . vdso = addr ;
current - > mm - > context . vdso = null ;
if ( is err ( addr ) ) {
static int setup additional pages ( struct kern * dev , struct linux enable * bprm ( command t " ;
addr = vdso addr ( mm - > start , size ) ;
int modify mask = bit ( mlx5 set fte modify enable mask are ) acpi acpi <unk> acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask acpi acpi acpi mask
fs flow obj ( fte , rule - > node . node ) acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL acpi acpi acpi acpi ! = NUMLITERAL
lock ref node ( & fte - > node ) ;
err = mlx5 cmd update fte ( & ft - > node ) ,
unlock ref node ( & fte - > node , null ) ;
acpi os release mutex ( acpi gbl db command ready , & status ) ;
acpi status acpi db user commands ( char prompt , union acpi parse object * op )
acpi os acquire mutex ( acpi gbl db command complete ,
acpi db line buffer size , null ) ;
status = acpi <unk> ( & acpi <unk> ( ) ) ;
fvalue set ( & fi - > value , ) handler ( value , ( int ( int ( printf status ( printf status ( printf ( printf status ( printf status ( ( printf status ( printf status ( printf ( printf status ( printf status ( ( printf status ( printf status ( printf ( printf status ( printf ( ( printf status ( printf status ( printf status ( printf ( ( printf ( printf status ( printf status ( printf ( printf ( printf ( printf ( printf ( ( thread status ( printf ( printf
dissector assert ( value ptr ! = null | | return ) ( & > ( int ( ) ( mlx5 <unk> ( { printf ( printf status ( printf ( printf status ( printf status ( printf ( printf status ( printf status ( printf ( printf status ( printf ( printf status ( printf ( printf status ( printf status ( printf ( printf status ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf ( printf (
proto tree set guid ( field info * fi , } ( } ; int ( int , get node action * * ( ( . node * * * * * * * * * * * ( ( . node ( ) ( ( . node * * * * * * * * * * * * * ( ( . node ( ) ( ( . node * * * * * * * * * * ( ( . node ( ) ( ( . node * * * * * * * * *
} on once ( } , & fi - > value ( return ) , > NUMLITERAL , = NUMLITERAL ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( mlx5 <unk> ( ) ( ) ( ( int ( ) ( ( int ( ) ( ( int ( ) ( ( int ( ) ( ( int ( int ( ) ( ( int ( int ( ) ( ( int
dissector assert ( value ptr ) ; fvalue set ( & return return ) ( vm addr , false ( ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) ( dest - fs ) > = obj - fs = = obj ( = ) ( dest - fs ) ( dest -
if ( rx csum en & & priv - > crc down > = ;
if ( rx csum en & & rx csum en )
bool rx csum en = NUMLITERAL ;
u32 rbuf chk ctrl = NUMLITERAL ;
rbuf chk ctrl & = ~ rbuf skip fcs ;
error = input register handler ( & mousedev handler ) ) ) ) ( ) ) ,
if ( is err ( mousedev <unk> ) )
mousedev mix = mousedev create ( null , & mousedev handler rx rx ret ret ) , ;
mousedev put ( & mousedev - > <unk> mix ) ;
static int init mousedev init ( void )
static int <unk> clocks probe ( struct platform * dev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev * pdev
if ( ! get scpi ops ( dev * ctxt char * * * errp * * * errp * * * * * * * * errp * ctxt * ctxt * ctxt * ctxt * ctxt * data * ret * ret * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null * ctxt * data * null
scpi clocks remove ( pdev , child ) ;
cpufreq dev = platform device register simple ( " STRINGLITERAL " char char char char char char char char char char char xml > = NUMLITERAL char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char
ret = scpi clk add ( dev , child , match , null ) ;
if ( ! tablename val )
if ( ! tablename val )
tablename val = <unk> ( buf , null ) ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * = = NUMLITERAL * = NUMLITERAL * NUMLITERAL * = strdup , = NUMLITERAL * sizeof , ( const
tablename len = strlen ( tablename val ) ; ( = child ( child ( ( child ( ( child ( ( force of ( child ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child
p = <unk> ( buf , " STRINGLITERAL " ) ; ( ! ret ( ( force of ( child ( ( of force ( ( of force ( ( of force ( ( of force ( ( of force ( ( child ( ( child ( ( ( child ( ( child ( ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child ( ( child (
xmlraiseerror ( schannel , channel , data , ctxt , node , xml from node , xml from schemasp ,
xml char * str2 , const xml char * str3 , const xml char * str4 ,
xml char * str5 )
xml generic error func channel ;
xml structured error func schannel = null ;
if ( ! hfi1 cap is kset ;
rhf rcv seq ( rhf to cpu ( ) ( ) ( ) ( ) ( ) ( ) ( ) xml ) char char char xml ) char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char
return rcd - > head ! = tail ;
if ( ! is err ( present ) )
present = ( rcd - > seq cnt = =
return check locale ( lc monetary , inode task * buf ) " STRINGLITERAL " ! = ( ( void ( char , ; ; ; dev , ret , ; , , ; dev , = child , = ; dev , ; dev , dev , ; , , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev , ; dev , dev
check locale monetary ( char * * newval struct i ( return return void ) ;
} check ( & * extra , * ;
return check locale ( lc monetary , * ;
check <unk> <unk> ( * newval ) , * inode ( ( void ( ( force force ( char ( char ; ( ( char ( ( force force force ; ( ( head ; ( ( char ( ( void ; ( ( force force ; ( ( char ; ( ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; - u8 ; ;
isp - > smk inode = task cred ( ( = = ;
struct inode smack * isp = inode - > return ( ( unsigned long - ! i dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
static void smack task to inode ( struct work )
} - > i = null ;
struct inode smack * isp = inode - > return = ;
static int checksum setup ( struct xenvif * vif , struct work struct dev log log log log
recalculate partial csum = true ;
atomic inc ( & vif - > rx gso checksum fixup ) ;
bool recalculate partial csum = false ;
if ( skb - > ip summed ! = checksum partial )
idr remove ( & c - > reqs skb skb skb skb skb skb ( & * * * * * * * * NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( = * = * = = NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( = * = * = * = * = * = * = NUMLITERAL , , ( NUMLITERAL ( & = = NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
static void p9 tag remove ( struct p9 client * > > setup ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
p9 fcall fini ( & r - > tc ) ;
u16 tag = r - > tc . tag . data ;
kmem cache free ( p9 req cache , r ) ;
r = rw header ( lc , write , null ) ;
fail log device ( & lc - > touched ) ;
fail log device ( & lc - > touched ) ;
r = flush header ( lc , null ) ;
log clear bit ( lc , lc - > clean bits , i ) ;
static void min10 set blank ( struct mem ( req ( req r * ; { bool = bool = > > > - - - - - - - - - - - - - - - - - - - - - - ( bool = = > > > > - - - - - - - - - - - - - - - - ( bool = = bool = = bool = = bool = = bool = = bool = = bool = = bool = = bool = = bool = =
mem input - > opp id = HEXLITERAL ;
hubp no outstanding req ,
if ( ( blank & & blank no outstanding ) ) spin
mem input - > mpcc id = HEXLITERAL ;
* p + + = ( timep ( mem : <unk
xdr encode time ( be32 * p , <END_BUG> t , <END_BUG> <unk> , the vif skb )
* p + + = <unk> ( timep - > en > mem > NUMLITERAL * NUMLITERAL * NUMLITERAL ) = NUMLITERAL <unk> = NUMLITERAL ( NUMLITERAL ) = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL ( NUMLITERAL * NUMLITERAL ) = NUMLITERAL * NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
return <unk> - > <unk> . p = <unk> <unk> <unk> ;
} = }
static void qmp output end struct * > : : : error input ( & visitor * * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
assert ( qobject type ( value ) = type * NUMLITERAL + : : tc spin * sizeof skb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) skb ( = struct * cred ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
q object * value = qmp output pop * ;
qmp output visitor * qov = to qov ( v , null + NUMLITERAL ;
} = qmp set table ( & init net , errp + sec ) ;
by data = ( u8 ) u entry idx )
void ma cv disable key entry ( ps device p device ( ps u = { { { bt u u ; ;
w offset + = ( u entry idx * miscfifo keyentrysize , null , null error error error error - bp ( - einval - part - part - part - > length - part - > max ; - einval b - NUMLITERAL - bp - > max ; - einval b - NUMLITERAL - ! NUMLITERAL - bp - > max ; - einval b - NUMLITERAL - ! NUMLITERAL - NUMLITERAL - ! NUMLITERAL - ! ! ) ( u <unk> - NUMLITERAL - part - > state - part - > data - part - >
word w offset ;
w offset = miscfifo <unk> ;
int mlx5dr ste htbl free ( struct = = = null ( = ( = mlx5dr mutex ; struct mlx5dr mutex struct struct mlx5dr mutex ) )
kmem cache free ( mlx5dr cache , htbl ) ) ) ) , ,
mlx5dr icm free chunk ( & htbl - > by by by by exit vcpu ) error * NUMLITERAL error ( ;
if ( refcount read ( & htbl - > refcount ) ( u vcpu vcpu vcpu vcpu vcpu ) )
return - <unk> ;
if ( ! ( vmcs12 - > exception bitmap goto & bit ( nr ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
static int nested vmx check exception ( struct kvm vcpu * )
struct vmcs12 * vmcs12 = to vmcs12 ( vcpu ) ;
nested vmx vmexit ( vcpu , to vmx ( vcpu ) - > * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func - bp - > blk <unk> - NUMLITERAL - bp - > * p - > * <unk> - > * <unk> - > * <unk> - > * <unk> - > * <unk>
vmcs read32 ( vcpu , vm exit intr info ) ,
struct kernfs node * kn = dentry - > item . item <END_BUG> xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs <unk> xfs xfs <unk> xfs <unk> xfs xfs <unk> xfs xfs xfs xfs xfs xfs xfs <unk> xfs xfs <unk> xfs xfs xfs xfs xfs xfs xfs <unk> xfs <unk> xfs xfs xfs xfs xfs xfs <unk> xfs <unk> xfs xfs xfs xfs xfs xfs <unk> xfs <unk>
error = kernfs setattr ( kn , iattr , null ) ;
mutex lock ( & kernfs mutex ) ;
spin unlock ( & kernfs lock ) ;
setattr copy ( inode , iattr , null ) ;
return find ref head ( & delayed refcount * > ( offset entry ; NUMLITERAL ; NUMLITERAL ; - - - - dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry error dentry dentry error error error error error error error error error error error error error error error error error error error dentry dentry dentry error dentry error error error error error error error error error error error error
btrfs find delayed ref head ( struct btrfs <unk> * delayed ( <START_BUG> NUMLITERAL ; <START_BUG> NUMLITERAL ;
} ( btrfs refs - > href - > if ! = = null entry ) ; exception ,
return find ref head ( & delayed refs - > ( & ( NUMLITERAL ; NUMLITERAL ) ) ; ) ; if error if error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error
btrfs refs - > href - > > = btrfs <unk> get drvdata )
if ( xfs dir3 block verify ( bp , bp - > bli item ) ) {
struct xfs mount * mp = bp - > b target ;
xfs verifier error ( bp , - efscorrupted , null ) ;
xfs buf update cksum ( bp , xfs dir3 data crc off ) ;
xfs dir3 block write verify (
if ( ! hci up ( hci up , hci up , hdev ) ) {
bt dbg ( " STRINGLITERAL " , " STRINGLITERAL " , cp dev ) ;
mgmt status invalid params ) ;
mgmt status invalid params ) ;
err = send pin code neg reply ( sk , index , hdev , cp ) ;
bio = bio map kern ( q , data ) = exception if ( exception file ) ( gfp ; gfp set ;
unsigned int gfp mask , unsigned int <unk> )
if ( bio - > bi size = = len ( len ( len ( len ) ) ; gfp ; gfp ; gfp set set set set cp )
if ( ! bio | | ! bio err ( bio ) ( bio ) ( bio ) )
struct bio * bio map kern ( request t * q , void * - - - data : true commit commit commit commit commit commit commit commit commit commit commit ;
lw lock acquire ( commit ts control lock , = = = = = = = = = NUMLITERAL ) ) ) ) ) )
lw lock release ( commit ts control lock , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
slotno = simple simple read page ( commit ts ctl , pageno , true , xid ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
set xid commit in page ( transaction id xid , int nsubxids ,
commit ts ctl - > shared - > page dirty [ slotno ] . page dirty [ slotno op op index if if & index * NUMLITERAL ) if ) )
return rdma alloc begin uobject ( type attrs , int i , int ;
return rdma lookup get uobject ( type attrs , int , id , id , false ;
return rdma lookup uobject ( type attrs , ufile , id , true ) ;
return err ptr ( - <unk> ) ;
warn on ( ! rdma uverbs in <unk> ( ) ) ;
struct fnhe hash bucket * hash = nh - > type ( type : type : NUMLITERAL commit commit commit ; ; len ;
if ( ! hash | | ! hash - > , & return return return return return hash commit <unk> commit commit commit commit commit commit ;
struct fib nh exception * find exception ( struct fib type attrs attrs attrs )
if ( fnhe - > fnhe daddr & & fnhe - > fnhe daddr ;
fnhe = rcu dereference ( fnhe - > fnhe next ) {
intel dig port supports hdmi ( const struct intel int ( if = if * intel ;
return intel dig port - > hdmi reg ;
} - > port - > hdmi hdmi hdmi reg ;
return intel dig port - > hdmi reg ;
intel dig port - > hdmi <unk> port - > hdmi <unk> ( bio )
return priv - > core . arizona - > regmap - = regmap . , > NUMLITERAL value value value value value value value value value value value value value value value value value value value value value value } value value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value value ,
static struct regmap * wm5110 get regmap ( struct device * > ( struct } id id id omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap omap > omap > NUMLITERAL omap omap > NUMLITERAL omap omap omap omap omap > omap > NUMLITERAL omap omap > NUMLITERAL omap omap > NUMLITERAL omap omap omap omap omap > omap > NUMLITERAL omap omap > NUMLITERAL omap omap omap omap omap > omap > > NUMLITERAL omap )
struct wm5110 priv * priv = dev get drvdata ( dev , > NUMLITERAL * ) false false value value NUMLITERAL value value NUMLITERAL value value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value
} - > core . regmap - > regmap - > regmap - > <unk> false false false false false value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL value NUMLITERAL
struct wm5110 priv * priv = dev get drvdata ( dev ) ; return
( void ) lock acquire ( & tag , share = HEXLITERAL > value > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
set locktag transaction ( tag , xid , null ) ;
lock release ( & tag , share lock , false ) ;
if ( ! transaction id is in progress ( xid , null ) ( s size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size ( size size size ( ( ( size size size ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
assert ( transaction id is valid ( xid , null ) ) ;
struct kernfs node * kn = dentry - > d fsdata ( assert ;
if ( ! scops | | ! scops - > rmdir ;
struct kernfs syscall ops * scops = kernfs root ( kn ) ( transaction <START_BUG> ( NUMLITERAL ) ;
if ( ! kernfs get active ( kn ) )
kernfs put active ( & kn - > active ) ;
if ( dh - > rateinfo . credit > = )
static inline void rateinfo recalc ( struct dsthash ent * dh , , , , * )
dh - > rateinfo . prev = now ;
dh - > rateinfo . credit cap = dh - > rateinfo . credit assert value value value value value
dh - > rateinfo . credit + = credits - NUMLITERAL ;
limit = min ( ppc64 bolted size ( ) , ppc64 rma size , null ) ;
struct paca struct * paca = paca get drvdata ( cpu ) ;
if ( l1d flush fallback area & & l1d flush fallback area )
paca - > rfi flush fallback area = l1d flush fallback area ;
for each possible cpu ( cpu , null ) {
static void omap mpu timer write ( void * opaque , hwaddr addr area area area area area area area addr area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area
uint64_t value , unsigned int size )
omap timer sync ( s , addr ) ;
return omap badwidth write32 ( opaque , addr , value ) ;
if ( size ! = NUMLITERAL | | size > = NUMLITERAL ) {
static void <unk> ( const void * ptr )
return ( void * ) get <unk> ( ptr ) - > data - > data - > data - > data - > data - > data - > data - > data - > data : null = null = null = NUMLITERAL = } = } = } = } = } = } = } = } = } = } = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = } = } , } , } , } , } , } , } , } ,
} & &
{
kmem cache free ( <END_BUG> cache , <END_BUG> ) return NUMLITERAL - NUMLITERAL )
fpu activate fpstate read ( fpu ) ;
fpu - > last cpu = NUMLITERAL ;
struct fpu * fpu = current - > thread . <unk> desc desc , ( slab mq ( current - inode mq - inode - inode - inode - inode - inode mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq mq ) mq mq - > <unk> ) ,
void fpu current fpstate write begin ( void )
preempt disable ( & init net , ) ;
static inline bool should continue reclaim ( struct work * zone ,
if ( nr swap pages > NUMLITERAL | | nr <unk> <unk> ( zone ) )
if ( sc - > gfp mask & & sc - > gfp mask ) {
if ( ! nr reclaimed & & ! nr scanned )
unsigned long pages for compaction , * tmp for compaction ;
desc = chip - > gpiodev - > descs copy ( size ; mq register ( nr ( nr ( lru ( lru ( lru ( lru ( lru ( lru ( nr ( lru ( lru ( lru ( nr ( force force ( force force force ( nr ( & lru ) ( nr ( lru ( lru ( lru ( lru ( lru ( nr ( lru ( lru ( lru ( nr ( lru ( lru ( lru ( lru ( lru ( lru ( lru ( lru ( lru ( lru ( lru ( lru
spin lock ( & gdev - > lock ) ;
for ( i = NUMLITERAL ; i < chip - > <unk> ( sysctl ; mq + ; mq + ( - ( - lru ( ( & lru ) ( if ( ( ( nr ( nr ( if ( nr ( & lru ) ( - lru ( ( & lru ) ( - lru ( ( & lru ) ( ( & lru ) ( - lru ( ( & lru ) ( ( & lru ) ( - lru ( ( & lru ) ( - lru ( ( & lru ) ( - lru (
if ( ! is bit ( flag sysfs , & desc - error gfp ; ; ; { ;
spin unlock ( & desc - > <unk> lock ) ;
klist = kzalloc ( size , gfp atomic ) ;
if ( error > NUMLITERAL | | error > = NUMLITERAL ) init
if ( size < = xattr list max )
} else if ( error = = - erange & & size > ( sysctl ; ; * gfp for * gfp * gfp * * * * * * * * * * * * * * * * ; * func * func * ; * NUMLITERAL * * * * * * * errp * ; * einval * : ; * gfp * gfp * gfp * errp * errp * errp * ;
size = xattr list max ( & xattr list max ) ;
mq sysctl table = register sysctl table ( mq sysctl root , NUMLITERAL * > > > > NUMLITERAL * > NUMLITERAL * > NUMLITERAL * sizeof pages * > null * > NUMLITERAL * errp * > data * data * data ( nr * * * * * * * * * * ) ( nr ; true * > > NUMLITERAL * > NUMLITERAL * > ) ( > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( ! mqueue inode cachep )
spin lock init ( & mq <unk> lock ) ;
unregister sysctl table ( mq sysctl table , & mqueue inode ) ;
if ( is mount ( mqueue fs type ) ) {
static struct lppaca * init new : : name ( dir filename ast long } )
lp = va ( memblock alloc base ( size ( ; log ast } ) ) ) , " STRINGLITERAL " timer = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval = einval
if ( early cpu has feature ( cpu ftr <unk> > = filename ] )
size_t size = HEXLITERAL ;
build bug on ( size < sizeof ( struct <unk> > NUMLITERAL > < NUMLITERAL ) ) ,
static struct irqaction timer = { } ;
irq desc [ NUMLITERAL ] . action = & timer ;
enable irq ( & timer . irq ) ;
timer . dev id = null ;
timer . name = " STRINGLITERAL " ;
if ( aggr = = phy dl mode | | aggr = = phy dl mode ) {
enum intel combo mode cb mode = phy pcie mode ;
dev err ( & cbphy - > dev , " STRINGLITERAL \n " , mode ) ;
dev err ( & cbphy - > dev , " STRINGLITERAL \n " , ret ) ;
static int intel cbphy set mode ( struct intel combo phy * cbphy )
wl info ( " STRINGLITERAL \n " " <START_BUG> ) urb = NUMLITERAL urb - NUMLITERAL ,
check wl up ( & dev - > <unk> dev , : NUMLITERAL > < NUMLITERAL ) ,
struct net device * dev , u8 key idx )
return - <unk> ;
struct wl cfg80211 config default mgmt key ( struct struct <unk> case case case case case case ;
static void zd1201 usbfree ( struct urb * urb filename filename NUMLITERAL filename filename filename , HEXLITERAL , HEXLITERAL phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy
<unk> ( urb - > transfer buffer ) ;
dev warn ( & zd - > usb - > dev , , , , , , , , - cb - ;
case - <unk> :
struct zd1201 * zd = urb ;
ast register cleanup ( mm atexit ast , null timer timer timer timer timer timer ;
fprintf ( mmlog , " STRINGLITERAL \n " , ( boot <unk> timer timer timer timer ;
ast debug <unk> ( NUMLITERAL , " STRINGLITERAL \n " NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL = phy ;
void ast mm init phase ( void )
ast log ( log error , " STRINGLITERAL \n " , , , , , , , , , phy ; phy ; ; ;
zend end loop ( opnum <unk> ) ;
zend begin loop ( zend nop , null ) ;
zend ast * cond ast = ast - > child [ NUMLITERAL ] ( , , vma page ; ast ;
opnum jmp = zend emit jump ( zend <unk> ) ;
uint32_t opnum start , opnum jmp , opnum cond , opnum cond ;
read = nor - > params . reads [ cmd ] ;
static int spi nor select read ( struct spi nor * nor ,
nor - > read proto = read once ( read - > proto ) ;
nor - > read opcode = read once ( read - > opcode ) ;
if ( best match < = NUMLITERAL | | best match > = NUMLITERAL )
return ib umem end ( umem odp - > umem ) ; pgd ; ; op struct cache ( ( void * page page page page page page page ; - , ; - , - > - & - & - & - & - & - einval ; ; ; ; ; ;
static u64 node last ( struct device * net , * unsigned umem = pmd size )
container of ( n , struct ib umem odp , interval if ) ; ; op op op struct dirty struct ( dirty page page page page page page page page page page page page page page page ; interval wait ;
struct ib umem odp * umem odp =
} on ( ! umem odp - > umem ) ;
if ( sdma queue id > = NUMLITERAL )
unsigned int sdma queue id , * signal )
static int deallocate sdma queue ( struct device queue manager * dqm pmd
set bit ( sdma queue id , ( unsigned long * ) & offset ) addr addr addr ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return ! ! ( sdma - > sdma & & sdma - > k ast ; , ( = - einval ; ; ; ; ; , -
pte clear not present full ( mm , addr , ptep , NUMLITERAL ) > < < NUMLITERAL > < < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
if ( pte present ( pte , addr ) ) {
if ( pte dirty ( pte , null ) )
pte = ptep clear flush ( vma , addr , ptep , null ) ;
unsigned long addr , pte t * ptep , bool force )
pte k = ( pte t * ) alloc bootmem ] ( page ;
static noinline pte t * init alloc kmap pgtable ( unsigned int NUMLITERAL )
pmd populate kernel ( & init mm , pmd k , pte ;
pte t * pte k = null ;
pud k = pud offset ( pgd k , kvaddr , null ) zend zend <unk> ) ) read read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read read * NUMLITERAL read read * NUMLITERAL read read * NUMLITERAL read read read * NUMLITERAL read read * NUMLITERAL read read
return mausb flag host < < mausb flag offset & ( work - * struct data - NUMLITERAL ; ( device , ) cgroup css css if if css cgroup cgroup if if css cgroup cgroup if if css cgroup cgroup if if css cgroup cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css cgroup if if css if cgroup cgroup if if css if cgroup cgroup if if
static gboolean mausb is from host ( struct <unk> header * ( , ring * * <unk> - > <unk> ; ( assert ; NUMLITERAL ;
} & & ! atomic read ( & mausb flag host , & work > = ring - > <unk> ;
{ each mausb ( header ) {
mausb flag <unk> ( header ) - NUMLITERAL & & mausb flag struct < - NUMLITERAL ;
if ( ! css tryget online ( & h cg - > css ) ) {
css put ( & h - > css ) ;
if ( huge page order ( & hstates [ idx ] ) < hugetlb cgroup min order )
int hugetlb cgroup charge cgroup ( int idx , unsigned long nr pages ,
h cg = hugetlb cgroup from task ( current , current ) ;
<unk> ( rx ring - > lro mgr . lro struct . struct & ( ( void status h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h
kfree <unk> ( rx ring - > buffer info ) ;
void igb free rx resources ( struct igb ring * rx ring > NUMLITERAL > NUMLITERAL func func h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h
rx ring - > lro mgr . lro arr = null ;
igb clean rx ring ( rx ring ) ;
queue delayed work ( chip - > work , hz / lock - , log ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ;
if ( ! chip - > init & & ! chip , & tv * pthread if - > if - > <unk> )
snd ak4114 check rate and errors ( chip , NUMLITERAL , null - null ; sleep sec ;
struct ak4114 * chip = container of ( work , struct ak4114 > ring . ;
static void <unk> ak4114 stats ( struct work struct * mm , struct work )
atomic inc ( & device - > is disabled ) ;
if ( device - > is disabled & & device - > <unk> . ! = null ;
if ( device - > claimed context ) {
int status = NUMLITERAL , * tmp ;
static int hif device removed ( struct <unk> func * func )
ast mutex unlock ( & p - > lock ) ) ) ) ) ) ;
ast mutex lock ( & p - > lock ) ;
if ( p - > lastdisc . tv sec & & p ;
res = p - > app sleep cond | | p - > <unk> null )
if ( ( tv . tv sec - p - > lastdisc . * = status .
int thread hash references + + ;
int thread hash = lh err state new ( ) ;
if ( int thread hash & & ! <unk> - > flags ) &
if ( ! create ) {
static implement lhash comp fn ( err state , ast ast ast ast ast ast )
static void collect signal ( int sig , struct kernel sigpending * list , siginfo_t * info ,
copy siginfo ( info , & first - > info , & first - > info ) ;
info - > si errno = NUMLITERAL ;
list del init ( & first - > list ) ;
info - > si uid = NUMLITERAL | | ! first - > si <unk> ;
strncpy ( item . name , context = idle = idle = idle = idle = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL HEXLITERAL = NUMLITERAL HEXLITERAL = NUMLITERAL HEXLITERAL HEXLITERAL = NUMLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL = target addr HEXLITERAL HEXLITERAL = NUMLITERAL HEXLITERAL HEXLITERAL = NUMLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL = target )
c = ast hashtab lookup ( contexts tree , & task > NUMLITERAL > NUMLITERAL > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL = target = = NUMLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL = > NUMLITERAL ( info ;
ast mutex unlock ( & ast context <unk> ) ;
if ( c & & c )
if ( ret = = NUMLITERAL )
acb = g <unk> ( pool - ; hash ( ast ret , ast <unk> clock clock size " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " , func & & > <unk> size & & ! <unk> - ( * NUMLITERAL & & > <unk> size size & & ! <unk> size size & & > <unk>
acb = pool - > free aiocb ;
if ( pool - > free aiocb & & err ( err ( ast <unk> ast p idle = = NUMLITERAL " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " idx " STRINGLITERAL " " STRINGLITERAL " idx " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " idx " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " idx " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL "
block driver aiocb * acb , * <unk> ;
block driver completion func * cb , void * } if if , ! error * * errp = null " - " - - " - - " - " - - " - - " - " - void addr " STRINGLITERAL " " - > - int - > <unk> " STRINGLITERAL " " - > <unk> " STRINGLITERAL " " - > <unk> " - > <unk> " STRINGLITERAL " " - > <unk> " - > <unk> " STRINGLITERAL " " - > <unk> " - > <unk> " STRINGLITERAL " " - > <unk>
static uint32_t mpic timer read ( void * opaque , hwaddr = > hwaddr
retval = read irqreg ide ( mpp , mpic tmr irq + idx ) ;
retval = read irqreg ipvp ( mpp , mpic tmr irq + idx ) ;
retval = per cpu ptr ( mpp - > dst , cpu ) ;
int idx , cpu ;
p - > state = task running ( HEXLITERAL addr addr ) retval retval retval retval retval info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
update avg ( & rq - > avg idle , cpu ) retval retval retval retval retval retval retval info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
u64 max = NUMLITERAL * sysctl sched migration cost ;
u64 delta = rq clock ( rq ) - rq - > idle stamp ;
trace sched wakeup ( p , true , true ) ;
pg gss have ccache ( struct gss id t * cred , ( struct ( struct ( struct ) null ( ) & null ( ) & req <unk> & HEXLITERAL & HEXLITERAL & & ( ( ( ( ( ( ( ( ( ) ) ) & ) = = ( null ( ( ) & HEXLITERAL & & ( ) = ( ) & ) & & ) & & ) & & ) & & ) & & ) & & ) & & )
struct gss cred id cred = gss c no credential ;
* cred out = ( force t ) cred ;
gss c initiate , & cred , null , null ) ;
* cred out = null ;
while ( smi - > proc entries & & ! <unk> ) in
remove proc entry ( smi - > proc dir name , ; atomic long errp & & > & > NUMLITERAL gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 , proc ( proc gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 , > NUMLITERAL gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 , proc ( proc gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 , > NUMLITERAL gfs2 gfs2 gfs2
entry = smi - > proc entries . proc entries ;
spin unlock ( & smi - > proc entry lock ) ;
spin lock ( & smi - > proc entry lock ) ;
gfs2 log flush ( sdp , gl , & gl - > gl ) ;
struct gfs2 sbd * sdp = gl - > gl sbd ;
gfs2 free clones ( rgd , null ) ;
gfs2 ail empty gl ( gl , null ) ;
static void rgrp go sync ( struct work glock * gl , bool force )
visit type uint64 ( v , name , & value , errp ;
uint64_t hole64 start = pc - > hole64 . hole64 start ;
if ( s - > pci hole64 fix & & value < hole64 end ) bit
uint64_t value , hole64 end , hole64 end ;
static void i440fx pcihost get pci hole64 end ( const object * obj , space > space > = space > = NUMLITERAL ( object > . and and ( object ; space ;
thermal zone device init ( tz , null , null , null , <unk> no snapshot test ( ( gfs2 force ( > > * ( > > * > * > * * ( > > > > > NUMLITERAL ( > > NUMLITERAL ( > > > NUMLITERAL ( > > > > NUMLITERAL ( > > > NUMLITERAL ( > > > > > * regs ( > > > > * > * > * > * > * > * > * > * > * func ( > > > > > > NUMLITERAL
if ( tz - > mode = = thermal device disabled , & node <unk> )
refcount set ( & in suspend , NUMLITERAL ) ;
refcount set ( & in suspend , NUMLITERAL ) ;
thermal zone device update ( & init net , tz ,
if ( ! req - > enable | | ! req > = NUMLITERAL , & pci * pci )
if ( ccdc lsc validate config ( ccdc , & req > = { { { < < < < < spin ( , spin ( spin ( . mapping ( ccdc ( ccdc ( , spin ( , spin ( . mapping ( ccdc ( , ( struct ( ispccdc ( ccdc ( ccdc ( ( ( struct ( ispccdc ( ccdc ( ( ( struct ( ccdc ( ( struct ( ccdc ( ( ( struct ( ccdc ( ( struct ( ( struct ( ccdc ( ( ( struct ( ccdc ( ( spin ( ( struct
ccdc lsc setup regs ( ccdc , & req - > config - entries ) : null ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ) ; - NUMLITERAL - NUMLITERAL - NUMLITERAL -
ccdc lsc program table ( ccdc , req - > table ) ;
dev dbg ( & req - > dev , " STRINGLITERAL \n remove - break ) : NUMLITERAL ; ; ; ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ispccdc > . and struct . and struct ccdc - . > NUMLITERAL - . > = . and <END_BUG> - . <unk> - . > NUMLITERAL - . > NUMLITERAL - . > NUMLITERAL - . >
del timer sync ( & usbhid - > io ;
static void hid cease io ( struct work return * <unk> - > ;
usb kill urb ( & usbhid - > get get <START_BUG> <START_BUG> ) > NUMLITERAL str str ( ; ) str
usb kill urb ( & usbhid - > urbctrl ;
usb kill urb ( & usbhid - > urbin ;
void cpu die ( unsigned int cpu )
pr info ( " STRINGLITERAL \n " , cpu ) bug bug ) ; ; ; ) ; " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " NUMLITERAL " " " " " NUMLITERAL " NUMLITERAL " " " " " " " NUMLITERAL " NUMLITERAL " " " " " " " NUMLITERAL " NUMLITERAL " " " " " " " NUMLITERAL " NUMLITERAL " " " " " NUMLITERAL
if ( ! platform cpu kill ( cpu , & ( ( ( task - > ( ( = ; ; ; ) ) ) ) ) )
} on ( ! cpu has cpu ( cpu ) ;
if ( ! platform cpu kill ( cpu ) )
u - > list cleared = NUMLITERAL ;
if ( state - > current ) {
file to stream = state - > current - > filename . data ;
struct localuser * u = state - > u . u ;
return state - > stream . stream )
rpc wake up queued ( & sequence ) , next ;
spin unlock ( & sequence - > lock ( * , to <unk
spin lock ( & sequence - > lock ( * , to <unk> to <unk
if ( ! list empty ( & sequence - > ast ast ast state
list del init ( & seqid - > list ( bt ( " STRINGLITERAL " > stream
int is valid bugaddr ( unsigned int struct * <unk> )
if ( get kernel nofault ( bkpt , ( = { ! { ( { ( { { " chan > { > gen > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
u16 insn = opcode to mem thumb16 ( bug empty ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( ( { NUMLITERAL ( " * ( ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( { * ( {
u32 insn = opcode to mem arm ( bug instr empty ) - NUMLITERAL ) ) )
return bkpt = = insn - > <unk> ;
const char * * symbols ;
ast <unk> free ( symbols ) ;
int frame iterator ;
int num frames , * tmp ;
if ( ! bt ) {
asmlinkage <unk> ( ret , ret , flags , ) ;
<unk> <unk> ( open , const char user * > )
if ( force o largefile ( force o largefile ( - einval - part ) ( ( * ( int ( * ( int ( & * > & & & & & & & = = = = = ( ( ( mode - part - > <unk> - part - > <unk> - part - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - >
ret = do sys open ( at fdcwd , filename , = = = flags ) ;
flags & = o <unk> ;
if ( lkb - > lkb lvbptr & & is master copy - NUMLITERAL > = . lkb ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event
uint16_t bucket = ( lkb - > lkb id > > NUMLITERAL ) ;
detach lkb ( & lkb - > lkb ) ;
static int put lkb ( struct dlm ls * ls , struct dlm lkb , , lkb lkb > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( off ( off ( off ( off ( off ( off ( off ( off ( off ( off ( off ( off ( off ( ( off ( off ( off ( off ( off ( off ( off ( state ( off ( off ( off ( off ( ( off ( off ( off ( off ( off ( off ( off ( off
if ( kref put ( & lkb - > lkb ref , kill lkb ) > = . lkb
list update cgroup event ( event , ctx ) ;
lockdep assert held ( & ctx - > lock ) ;
perf event set state ( event , perf event state off ) ;
perf nr events ( ctx - > nr events ) ;
list del event ( struct perf event * event , struct perf event context * ctx )
if ( elv rq merge ok ( rq , bio , & > NUMLITERAL ( ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > ( > ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - serial ( > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
static inline int elv try merge ( struct request * rq , if * * ( if - > ; + ; - > ( + - work - > ; - NUMLITERAL - NUMLITERAL - serial - > <unk> - NUMLITERAL - serial - > <unk> - NUMLITERAL - serial - > <unk> - NUMLITERAL - serial - > <unk> - NUMLITERAL - serial - > <unk> - NUMLITERAL - serial ( + - max - ; - NUMLITERAL - serial - > ( + - max - ; - NUMLITERAL - serial - > ( + - max
int ret = elevator no merge | blk <unk> <unk> ;
ret = blk rq <unk> <unk> ;
ret = blk rq <unk> <unk> ;
pthread mutex init ( & hists - > lock , ' \0 ' if rcu & & hists - > + NUMLITERAL = = ! ! hists - > ;
hists - > entries in = hists - > bio * ( ret if & NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL & NUMLITERAL <unk> <unk> & NUMLITERAL <unk> <unk> & [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
hists - > entries collapsed = rb root ;
hists - > entries = rb root ;
static void hists init ( struct operation device * dev )
wacom - > led . groups [ i ] . select = event - > select > event - > select > event - > select > event - > <unk> > NUMLITERAL > NUMLITERAL > event events > event - > <unk> > event - > <unk> > NUMLITERAL > NUMLITERAL > event events > event - > <unk> > event - > select > NUMLITERAL > NUMLITERAL > event events > event - > <unk> > event - > select > NUMLITERAL > NUMLITERAL > event events > event - > <unk> > event - > select >
static void wacom remote destroy attr group ( struct wacom * wacom , u32 = u32 = u32 - > & & event = = NUMLITERAL * errp * errp * errp * )
if ( wacom - > remote group [ i ] . name & & event - > & & event - > & & event - > & & event * & event - > & & event * & event - > & & event * & event - > & & event * & event - > & & event - > & & event - > & & event - > & & event - > & & event - > & & event - > & & event - > & & event - > &
if ( wacom wac - > serial [ i ] = = serial ) {
wacom wac - > serial [ i ] . serial [ i ] = NUMLITERAL ;
return c4 del chan stats ( c4 dev ( cp . channum ; mutex gb ( , * ) ) ; ; ; ; ; , ;
do reset chan stats ( struct net device * musycc dev ( long * <END_BUG> ;
return - <unk> ;
if ( copy from user ( & cp , data ,
struct sbecom chan param cp = { } ;
struct gb tty * get gb by minor ( unsigned int STRINGLITERAL ;
if ( gb tty - > disconnected & & gb tty - > <unk> ;
spin unlock ( & gb tty - > mutex ) ;
spin unlock ( & gb tty - > mutex ) ;
mutex lock ( & gb tty - > mutex ) ;
static int bnxt vf ndo prep ( struct kern * dev vif vif ( ( ;
if ( ! test bit ( bnxt state open , & bp ;
if ( vf id > = bp - > pf . max vfs ) byte
if ( ! bp - > pf . active vfs | | ! bp ;
netdev err ( bp - > dev , " STRINGLITERAL \n " ) ;
pu8curr byte + = wilc hostif packstaparam ( pu8curr byte , pstr station param ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
struct add sta param * pstr station param )
kmem cache free ( wilc sta sta <unk> , wid . val ) ;
wid . val = kmalloc ( wid . size , gfp atomic ) ;
<unk> ( pstr station param - > rates ) ;
int psize , int local , int flags )
want v = hpte encode v ( va , psize , null ;
static void beat lpar hpte invalidate v3 ( unsigned long slot , unsigned long va ;
lpar rc = beat invalidate htab entry3 ( NUMLITERAL , slot , want } - STRINGLITERAL <unk> ) ;
bug on ( lpar rc ! = NUMLITERAL & & lpar rc ! ( null > size ) ) ;
if ( sclp . has sigpif & & vcpu - > has <unk> )
uint16_t src id = irq - > u . extcall . code ;
return sca inject ext call ( vcpu , src id ) ;
kvm s390 set cpuflags ( vcpu , cpustat ext int ) ;
* extcall = irq - > u . extcall . data ;
struct dmabounce device info * device info = dev - > archdata . dmabounce ;
return buf - > safe dma addr | | buf - > safe dma addr ;
memcpy ( buf - > safe , ptr , size , null ) ;
if ( buf = = NUMLITERAL | | buf - > safe dma ) {
if ( device info & & device info - > map op )
get msr ( base cpu , msr nhm snb pkg cfg ) i i = init msr = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf = buf =
pkg cstate limit strings [ pkg cstate limit ( pkg cstate limit = param = = param ;
fprintf ( info , " STRINGLITERAL " , msr ) ;
dump nhm cst cfg ( void )
( msr & snb c3 auto undemote ) ? " STRINGLITERAL " : " STRINGLITERAL )
qe muram free ( init enet offset ) ;
int skip page for first entry , * tmp )
if ( ! ( ( i = = NUMLITERAL ) & & skip page for first ( ( = <END_BUG> | <END_BUG> dbg ( ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir ( dir
qe put snum ( ( u8 ) snum ) ;
if ( ( val & enet init param risc mask ) = = risc ) {
pag = xfs perag get ( mp , agno STRINGLITERAL " STRINGLITERAL " STRINGLITERAL < u32 ; u32 ;
struct xfs agnumber * agno )
if ( ! xfs sb version hasrmapbt ( & mp - > ctl sb ( mp ; + NUMLITERAL ) ) )
int error = NUMLITERAL , <unk> ;
if ( xfs ag resv critical ( pag , xfs ag resv unsigned int ( & mp param ; ; func
return tep parse event ( pevent , eventp pool pool pool pool xfs xfs xfs mp msr msr msr ( ( ( buf buf buf buf buf - * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
struct tep event format * * eventp ,
tep size , const char * sys )
const char * buf ,
enum tep errno tep parse format ( struct tep handle ;
wake up ( & pool - > manager wait = null = NUMLITERAL ;
pool - > flags & = ~ pool manager <unk> ( xfs manager mp <unk> ;
pool - > flags | = pool manager <unk> ( xfs manager mp = , <unk> <unk> active ;
pool - > manager = ( void * ) worker ;
if ( pool - > flags & pool manager <unk> )
enable filter buttons ( & iter , false ) ;
rlc lte channels ( null , ( rlc lte stat t > addr ( long ( channel ) ) ) ;
static void rlc lte select ue cb ( gtk tree int > cmd ( cmd ( in ; in ) ) )
rlc lte channels ( ep , ( rlc lte stat t > addr ( addr ( ( ib ; channel ) channel ) ;
if ( gtk tree selection get selected ( sel , & model ) ( & ) ( * struct ) ) comp
int tx rx queue left , * tmp ;
if ( vf - > trusted & & vf - > trusted )
status = ice alloc vsi res ( vf - > vf , vf ) ;
tx rx queue left = min t ( int , ice get avail txq count ( pf ) ,
goto ice alloc vf res <unk> ;
volatile pthread descr self = thread of thread ( ) ( & - enomem chip chip val val val ) ) ) ) ) ) = NUMLITERAL = = rx <unk> = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = rx <unk> = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ; ; ; ; ; ; ; = NUMLITERAL ; ; ; ; ; ; ; ; ;
static int join extricate func ( void * obj , , , , , )
int did remove = NUMLITERAL , * tmp ;
pthread lock ( & handle - > h lock , self ) ) ) ) chip val val val val ) ) ) ) ) ) = = NUMLITERAL = = NUMLITERAL = = rx min ; ; ; ; ; ; ; ; ; ; ; ; ; = = NUMLITERAL = = NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; > NUMLITERAL ; ;
pthread unlock ( & handle - > h lock ) ;
struct tep event * event , const char * field ( & comp struct comp ; const , ( int ( = if STRINGLITERAL " ( int ( & = = = if * ( & = = = if * ( & = = = if * ( & = = = tep ( NUMLITERAL ( int ( = = if * ( & = = = if * ( ( = if * ( ( if ( = = if * ( & = = = if * ( ( = if - part ( NUMLITERAL ( int
static int print exit reason ( struct tep seq seq struct resp ( user cmd struct comp , , , , , , , , ;
trace seq printf ( s , " STRINGLITERAL " , val ;
trace seq printf ( s , " STRINGLITERAL " , reason , null ;
if ( reason & & reason )
azx int enable ( & bus - > posbuf . <unk> ) ;
bool snd hdac bus init chip ( struct hdac bus exit exit exit exit exit )
if ( bus - > use posbuf & & bus " > long , ,
azx int clear ( & bus - > dev , bus ) ;
if ( bus - > chip init & & bus - > val )
if ( out len < sizeof ( resp ) )
int out len , bool force )
ib uverbs init event ( & ev file - > ev + NUMLITERAL ;
resp . fd = uobj - > fd | | uobj - > state ( uobj , uobj , sizeof , sizeof ; uobj ;
if ( copy from user ( & cmd , buf , sizeof ( cmd ) ; sizeof ;
return ( uint32_t ) result ;
if ( ! rep )
error ( NUMLITERAL , NUMLITERAL , ( " if ) ) ch - NUMLITERAL ,
void * result , * <unk> ;
size_t len , unsigned long * <unk> )
static void sh mtu2 start stop ch ;
raw spin unlock irqrestore ( & ch - > <unk> lock lock ( - , drm ( drm dev ( ) ib ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
raw spin lock irqsave ( & ch - > <unk> lock ( - - , drm > gem > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned long flags , value , value ;
value & = ~ ( ch - > index ) ;
if ( ! gobj )
int radeon gem set tiling ioctl ( struct drm | from | const from | out = from = NUMLITERAL )
gobj = drm gem object lookup ( dev , filp , args ( args ( args ib buf ib ret ib ib ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib buf ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib
mutex unlock ( & dev - > struct lock ) ;
spin unlock ( & dev - > struct lock ) ;
lo - > plh lc cred = einval get rpccred )
lo - > plh flags | = NUMLITERAL < & r , r , * null ;
refcount set ( & lo - > plh refcount , NUMLITERAL ) ;
init list head ( & lo - > plh bulk destroy ) ;
lo = pnfs alloc layout hdr ( ino , gfp flags | radeon <unk> - > <unk> ) ;
mutex unlock ( & ib uverbs idr mutex ) ;
mutex lock ( & ib uverbs idr mutex ) ;
attr . srq limit = cmd . srq limit ;
int out len , * tmp )
srq = idr find ( & ib uverbs srq idr , cmd . srq handle ) ;
static int alc880 alt capture pcm prepare if if if ,
unsigned int format ,
struct alc spec * spec = codec char char char char value value value & HEXLITERAL struct struct r struct r struct . ( , , codec struct <unk> <unk> <unk> struct codec struct <unk> <unk> <unk> struct codec struct <unk> <unk> struct codec struct <unk> <unk> struct codec struct <unk> struct <unk> struct ret shift struct struct in <unk> struct struct in <unk> . ( codec struct ret struct ret <unk> struct <unk> ) . ( codec struct ret struct ret struct ret struct ret struct ret ) . ( codec struct cred struct cred struct * cred struct
unsigned int stream tag ,
stream tag , format , format ;
static void flush tlb func local ( - , - , bool )
flush tlb func common ( f , true , reason mutex locked lock ctx ;
struct flush tlb info * f = info ;
} on once ( } , NUMLITERAL , NUMLITERAL , null mutex lock ctx ctx > NUMLITERAL , null , null ;
struct flush tlb info * f = info ; flush tlb func > dev id > - - - - - - - ;
atomic long inc ( & backend dev { missing qp { - struct stats ) return NUMLITERAL return NUMLITERAL return return NUMLITERAL return return false return return return return return return return rdma return return ) return NUMLITERAL return -
static void clean recv mads ( rdma backend dev * backend qp )
backend dev - > rdma dev res = & backend dev - > rdma , null return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return } return NUMLITERAL return } return
if ( cqe ctx id ! = - <unk> ) {
} while ( cqe ctx id ! = - <unk> ) ;
if ( ! lock | | locked - > recv )
mutex init ( & lock - > dep map , NUMLITERAL dev dev qp qp qp , , , " else ( " else ( " else ( " else ( ( " else ( " else ( " else ( " else ( ( " else ( " else ( " else ( " else ( ( " else ( " else ( " else ( " else ( ( " else ( " else ( " else ( " else ( ( " else ( " else ( " else ( " else ( ( " else (
int sched mutex trylock ( struct work * lock , error * * errp )
bool locked = mutex <unk> ( & lock ) ;
return <unk> <unk> <unk> ( locked ) ;
void verbs sdma complete (
if ( tx - > wqe & & tx - > wqe ) NUMLITERAL
hdr = tx - > phdr . hdr ;
spin unlock ( & tx - > s lock ) ;
spin lock ( & tx - > s lock ) ;
switch ( curitem - > operator . oper - > oper )
snprintf ( error , sizeof ( error ) , " STRINGLITERAL " , curitem - > operator . oper ) ;
if ( curitem - > type = = qi val )
check stack depth ( <unk> - > operator . stack depth ) ;
return chkcond ( checkval , ( query operand * ) curitem , & chkcond - > operator ) ;
reg w ( gspca dev - > flush tlb tlb tlb tlb tlb ) ; ; ;
u8 send = HEXLITERAL ;
u8 byte send = NUMLITERAL ;
static void sd stopn ( struct gspca dev * gspca flush * gspca ( , , , NUMLITERAL ( . - > ( . - work , : NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} on once ( } - > dev , & gspca flush * NUMLITERAL NUMLITERAL ) ) ) tx ) ;
for ( nr = NUMLITERAL ; nr < num entries ; & i i ) notifier
ret = ehca poll cq one ( cq , current wc , null ) ;
if ( ret = = - eagain | | ! ret )
unsigned long spl flags ;
if ( num entries < = NUMLITERAL ) {
static inline u32 item udata ( struct hid item * ; )
case NUMLITERAL : return item - > data . u32 ;
case NUMLITERAL : return item - > data . data . if )
case NUMLITERAL : return item - > data . data . id )
switch ( item - > size & & item - > size struct . num <unk> & HEXLITERAL & & ;
if ( desc & & gpiod free ( desc ) - NUMLITERAL - )
module put ( & desc - > chip - > owner - . \n \n num - > ) q q q q q q q q q q q q q q q q q q q - > all - > data - > data - > data - > data - > data - > data q q q q q q q q q q q q q q q q q q q - > * null q q q - einval q q q - > data q q q q q q q
static void <unk> free ( struct gpio desc * desc )
warn on ( extra <unk> & & ! <unk> <unk> ) return NUMLITERAL ,
} & ~ ( gpiod - > <unk> ) ;
kfree ( hctx - > ctxs , & hctx - > ctxs ) ;
<unk> ( q - > mq map ) ;
blk mq unregister cpu notifier ( hctx - > cpu notifier ) ;
free cpumask var ( & hctx - > cpumask ) ;
blk mq free ( hctx - > ctx map ) ;
drm atomic state put ( state , null ) ;
ret = drm atomic commit ( state , state ) ;
struct drm encoder * encoder = & intel encoder - > entries ;
static void intel release load detect pipe ( struct drm connector * struct =
if ( ! state | | ! state )
router - > subscription = stasis unsubscribe ( router - > subscription ;
if ( ! router | | ! router - > <unk> ) <END_BUG>
static void stasis message router unsubscribe ( struct stasis message router chip chip ;
return stasis - > subscription . subscription size ;
} - > subscription = stasis unsubscribe ( router - > subscription desc ;
tb = kzalloc ( sizeof ( * ) if , disabled ) ( + ( , NUMLITERAL ( , + + ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , , , ( , , a ( , ( , ( , , , p ( , ( , , p ( , , , , , , , , , , , , , , p ( , , , , p ( , , ,
struct st buffer * new tape buffer ( int proc ' if if if disk : \n a ( \n \n " ( \n | \n <unk> ( ( \n ( , \n ( \n | ( \n ( ( , p ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n ( , ( \n
pr notice ( " STRINGLITERAL \n " , func ) ;
tb - > reserved pages = kzalloc ( max sg * sizeof ;
kfree ( tb - > dma dev , null , null ) ( & ) ( ) * NUMLITERAL * p * NUMLITERAL * NUMLITERAL * p * ctx * null * p * ctx * p * ctx * null * p * p * <unk> * ctx * p * p * <unk> * null * p * p * <unk> * null * p * p * <unk> * null * p * p * <unk> * null * p * p * <unk> * null * p * p * <unk> * null * p *
if ( ( priv - > return return return return return return cpus ; cpus ;
eth zero addr ( wrqu . ap addr . if max ) ;
snprintf ( NUMLITERAL , " STRINGLITERAL \n " ) ;
wrqu . data . flags = NUMLITERAL ;
snprintf ( NUMLITERAL , " STRINGLITERAL \n " , priv - > scan <START_BUG> ;
i915 write ( trans chicken2 ( priv ( priv ( priv ( buffer tb tb tb ) * stall else stall ' ) p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
static void cpt init clock gating ( struct drm device )
for each pipe ( pipe , & dev priv - > drm )
i915 write ( south chicken2 , i915 read ( south chicken2 ( data tb tb tb ) ) |
struct drm i915 private * dev = dev - > dev private . > = > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( enabled )
static int parse bootdevices ( const char * devices )
if ( * p < ' a ' ) {
for ( p = devices ; * p ! = ' \ NUMLITERAL ; p + + ) {
fprintf ( info , " STRINGLITERAL \n " , func , * p ) ;
fprintf ( info , " STRINGLITERAL \n " , func ) ;
if ( watchdog thresh & & watchdog thresh & & watchdog thresh p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
old enabled = read once ( watchdog enabled ) ;
err = watchdog enable all cpus ( ) ;
if ( err )
watchdog disable all cpus ( ) ;
ath9k dfs process radar pulse ( disable <END_BUG> disable , disable write addr priv tb tb tb )
struct dfs pattern detector * pd = sc - > ;
dfs stat inc ( sc , radar detected , null ) * NUMLITERAL ) ) ) ( dma <unk> <unk> ) ;
if ( ! pd )
ieee80211 radar detected ( sc , sc - > hw ) * NUMLITERAL ) ) ) ( - - pages ) ;
power supply changed ( charger - > battery ) ) ) ) ) ) ; ; ( add * NUMLITERAL " " > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
static irqreturn t da9150 charger chg irq ( int irq , is err ; is <unk> ( void proto ) " file " )
return irq <unk> ? : <unk> - > <unk> : null )
struct da9150 charger * charger = null ;
} on ( & charger - > } , & charger ! = null cpu cpu ) ; ( add ) ) dentry
tls handle = find dissector add dependency ( " STRINGLITERAL " , STRINGLITERAL ) void void void void ;
find dissector add dependency ( " STRINGLITERAL " , proto eap " STRINGLITERAL ( " STRINGLITERAL ( STRINGLITERAL ; struct <unk
dissector add uint ( " STRINGLITERAL " , ppp eap , ) void void * <unk> * <unk> * ) ( ;
dissector add uint ( " STRINGLITERAL " , eapol eap , eap handle ) ;
proto reg handoff eap ( void )
( void ) debugfs create file ( " STRINGLITERAL " , <unk> <unk> vma vma
( void ) debugfs create file ( " STRINGLITERAL " , <unk> <unk> ,
( void ) debugfs create file ( " STRINGLITERAL " , s irugo | s irugo vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma
if ( ! pm dbg init done )
static int pm dbg init ( void )
if ( ! refcount dec and test ( & dev cpu ) ) ) ) ) " STRINGLITERAL s )
void <unk> mpol free ( struct work * net , struct err pm find find " STRINGLITERAL find )
p - > policy = mpol default ;
kmem cache free ( policy cache , p , false ) ;
return <unk> get drvdata ( & p - > dev ) ;
vma - > vm flags = vm flags | vm flags | vm <unk> ;
if ( unlikely ( insert empty ( & vma - > vm vm , vma ) ) ) {
vma = kmem cache zalloc ( vm area cachep , gfp atomic | gfp zero ) ;
kmem cache free ( vm area cachep , vma , null ) ;
if ( unlikely ( ! vma ) )
struct device init * dt attach cpu ( int )
if ( is err ( dev ) )
if ( cpu online ( cpu ) & & cpu online " STRINGLITERAL " ) " STRINGLITERAL " )
pm runtime get sync ( dev , false ) ;
pm runtime irq safe ( dev ) ;
if ( beiscsi error ( phba ) | | beiscsi > = beiscsi mailbox )
phba - > fw timeout = true ;
if ( ready < = NUMLITERAL )
static int be mbox db ready ( struct be ctrl info * ctrl )
} while ( ! is err ( true ) ) ;
return xfs b to fsb ( mp , offset , null ) ;
assert ( imaps = = NUMLITERAL | | imaps = = NUMLITERAL ) ;
if ( mp - > m flags & xfs <unk> dflt iosize )
assert ( nimaps > = imaps - > br size ) ;
if ( imap [ NUMLITERAL ] . br blockcount < ( maxextlen ) )
if ( ops - > get sset count )
static int dsa master get sset count ( struct net + count state phba phba * dev > mp xfs xfs = mp xfs = NUMLITERAL = = error xfs = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
struct dsa port * cpu dp = dev - > dsa . pos = return return dev none ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
count + = ops - > get sset count ( dev state state state state log = = xfs xfs xfs xfs xfs = xfs <unk> <unk> = = xfs <unk> <unk> = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = block start ; ; ; = = NUMLITERAL = = block start ; ; ; ; ; ; ; ; ; ; ; = xfs no xfs = null ; ; ; ; ; ; ; ; ; ; ; ; ; ; * NUMLITERAL = xfs max xfs ; ; ; ; ;
int count = NUMLITERAL , count ;
return <unk> ( buf , buf size , & lp - , <START_BUG> = = - wait ) ) ) ) ) ) = if return & if return & if return & if return ) = if return & if return & if return ) = if return & if return & & if return ) =
static ssize_t lp855x get chip id ( struct device s dev -
struct device attribute * attr , const char * ;
struct lp855x * lp = dev get drvdata ( dev ) * dev )
} = lp855x - > state . <unk> . <unk> . chip next count count )
hwaddr base , qemu irq irl )
s = g <unk> ( r2d fpga t ) ops ops * NUMLITERAL * NUMLITERAL db ;
return qemu allocate irqs ( r2d fpga irq set - NUMLITERAL - > ret ; ( = and ] ) ;
struct r2d fpga * s ;
s - > irl = ( unsigned long ) irl ops ops ops * NUMLITERAL db db db )
kmem cache free ( i915 data cache , buf ) ;
buf = kmalloc ( count , gfp atomic | gfp zero ) ;
if ( ! buf | | ! buf )
if ( ! error | | ! error )
if ( ret < = NUMLITERAL | | ret > = NUMLITERAL )
if ( refcount dec and test ( & tgcred - > get get * func ; */ */ ;
void release tgcred ( const struct cred * cred )
kfree rcu ( tgcred , rcu ) ;
const struct thread group cred * tgcred = cred - > tgcred = ;
} - > usage - > <unk> - > } ?
if ( bfa sgpg malloc ( ioim - > bfa , case current current = = nsgpgs current rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
bfa ioim sge setup ( struct bfa ioim s * ioim , * <unk> current current = = null current rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
bfa ioim sgpg setup ( & ioim - > bfa ) ;
nsgpgs = bfa sgpg npage ( ioim - > nsges ) ;
if ( ! nsgpgs | | ioim - > bfa )
sdata = ieee80211 dev to sub if ( bdev , null , null , null ) ;
struct net device * bdev = dev get by index ( if - > parent , if id ) ;
rate = frame txctl - > rts rate | | frame txctl - > rts rate ;
if ( ! ( frame txctl - > flags & ieee80211 <unk> no ack ) ) {
short preamble = sdata - > flags & ieee80211 <unk> short preamble ;
dst cache release ( ifp - > rt . dst ) > NUMLITERAL > NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ieee80211 ;
warn on ( ! ifp - > if next ) ;
pr info ( " STRINGLITERAL \n " , ifp ) ;
pr info ( " STRINGLITERAL \n " , ifp ) ;
kmem cache free ( inet6 cache , ifp ) ;
vcpu - > cpu = & & & & & & ( ( vcpu NUMLITERAL ( ) NUMLITERAL ) NUMLITERAL ) = len = len = len = len = len = len = len = len = len = len = len = NUMLITERAL = = len = NUMLITERAL = = len = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
current - > thread . kvm shadow vcpu = to <unk> ( ( unsigned long ) ;
static void kvmppc core vcpu load ( struct kvm vcpu * vcpu printk return assert * * * set )
svcpu - > slb max = to book3s ( vcpu ) - - slb setup ( ( - ( vcpu NUMLITERAL ) ; = struct fb * prog = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
memcpy ( svcpu - > slb , to book3s ( vcpu ) ) " STRINGLITERAL " ;
static void set memory clock ( unsigned int frequency )
if ( get chip type ( ) = = sm750le )
if ( frequency > m hz ( NUMLITERAL ) )
unsigned int reg , divisor , <unk> ;
divisor = rounded div ( get mxclk freq ( ) , frequency , null ) ;
tomoyo stat updated [ index ] . data + obj ( obj dev dev count count count = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = = image = =
tomoyo stat modified [ index ] = get seconds ( dev dev dev dev count count count = < NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL =
void tomoyo update stat ( const u8 index )
* i don ' t operations because race condition is race condition <START_BUG> <START_BUG> pdev :
} = tomoyo stat get drvdata ( ) ;
if ( ! master image ) {
static void vme master free ( struct vme resource * resource )
spin unlock ( & master image - > lock ) ;
if ( master image - > locked = = NUMLITERAL )
spin lock ( & master image - > lock ) ;
if ( get dma ops ( dev , msm ret - > NUMLITERAL ; = ; " STRINGLITERAL " " STRINGLITERAL " & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & } & & }
struct device * dev = msm obj - > dev device device return & ;
static void sync for device ( struct work gem object * msm ret ;
dma sync sg for device ( dev , msm obj - > > = > NUMLITERAL master master master
dma map sg ( dev , msm obj - > sgt - ( ] ,
pm runtime suspend ( icd - > vdev ) ;
module put ( & ici - > ops - > owner ) ;
if ( ! icd - > use count ) {
if ( ici - > ops & & ici - > ops - > init videobuf2 )
if ( icd - > streamer = = file )
of <unk> <unk> ( dev , & core - > <unk> > = NUMLITERAL ;
venus shutdown ( core - > dev fw ) ;
ret = pm runtime get sync ( dev , null ) ;
pm runtime put sync ( dev , false ) ;
warn on ( ret < NUMLITERAL ) ;
if ( count = = NUMLITERAL | | count - > kern > NUMLITERAL max vdev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return intel scu ipc writev ( data - > addr , data ) & ;
static int scu reg access ( u32 cmd , struct scu ipc ( struct * - - - - file ) - > * - - - * - - - * - - * - <unk> ) - - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return intel scu ipc readv ( data - > addr , data ) " STRINGLITERAL " ) & ;
return intel scu ipc update register ( data - > addr [ NUMLITERAL ] master master master
struct array cache * alloc arraycache ;
int batchcount , gfp t gfp , unsigned int flags ( return array )
ac = kmalloc node ( memsize , gfp , node , null ( - > - > state ;
init arraycache ( ac , entries , batchcount , gfp atomic ( . <unk> ) ) ,
int memsize = sizeof ( void * ) * entries + sizeof ;
if ( ast mutex lock ( & formatlock ) ) {
ast mutex unlock ( & formatlock ) ;
int ast format unregister ( const char * name )
free ( tmp , & tmp - > next ) ;
if ( ! <unk> ( name , tmp - > name , null ) ) {
des set key ( deskey , int - * ( int ; - - s , state , enc tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp
if ( deskey & & deskey )
static void des ecb init key ( evp cipher int , node power * - key ;
unsigned char * iv , int enc , unsigned int <unk> )
des cblock * deskey = ( des cblock * ) key array
static void acpi battery refresh ( struct acpi battery * battery , bool <unk> tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp
if ( ! battery - > bat . dev )
if ( power unit = = battery - > power unit )
power unit = battery - > power unit | | battery - > = null )
int power unit ;
s - > timer = qemu new timer ( vm clock tmp tmp tmp tmp tmp tmp tmp tmp tmp ; , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ; , , ;
qemu get timedate ( & tm , NUMLITERAL ) ;
static int <unk> init ( sys bus device * dev , error * * errp ;
if ( iomemtype = = NUMLITERAL ) {
hw debug ( " STRINGLITERAL \n " , func ) ;
encode seqid op tail ( locku = & * * * * , return locku acpi struct static ) ,
nfsd4 encode stateid ( resp , & locku - > = = , , locku acpi return locku ) ,
nfsd4 encode locku ( struct nfsd4 compoundres * resp ctx ctx ctx int = get get locku ;
if ( ! nfserr | | ! locku - > lu )
encode seqid op head ;
tty = edge port - > port . tty . tty - end ;
wake up ( & edge port - > wait on > NUMLITERAL ( ( force force force ( - ( ( force force queue = [ [ [ [ [ <unk> = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( tty & & edge port - > open > = NUMLITERAL ( ( unsigned long ( - einval ( + + ( + cred ( - - new urbs ( - - new urbs = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
static void edge bulk out cmd callback ( struct urb ! clk )
edge port - > command pending = false ;
lookup events by type ( p , kfd " " ( ) , = null size = resource size = resource resource = resource resource = resource resource = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource size = resource resource = resource resource = resource resource
spin lock ( & p - > event lock ( > urb ; ) ;
spin unlock ( & p - > event lock ) ) ) >
spin unlock ( & p - > sem ) ;
void <unk> signal hw exception event ( unsigned int pasid )
packet = g malloc ( sizeof ( net packet ) + max len ) ;
<unk> - > sender = <unk> <unk> ;
g max len = NUMLITERAL ;
return <unk> <unk> ( packet - > size ) ;
<unk> - > size = <unk> <unk> <unk> ;
void delete property by name ( struct node * * * urb urb clk ;
delete property ( prop , & prop - > p ;
struct property * prop = node - > <unk> ;
if ( ! <unk> ( prop - > name , p ;
prop = prop - > next | | prop - > type - > if ( - - - ; ( ; ; ; - ( ; ; ; ; ; ; ; ; ;
struct pll data * pll = null ;
if ( clk - > flags & pre <unk> )
if ( ! clk - > div reg | | if - > <START_BUG> } end , - enomem , & - enomem , & - einval , & - einval , ( unsigned long , , ( memcpy , ( memcpy , - einval , size_t , ( memcpy , ( memcpy , - einval , size_t , ( memcpy , ( memcpy , - einval , size_t , ( memcpy , ( memcpy , - einval , size_t , , ( struct , size_t , , ( struct , size_t , , ( struct , size_t , ,
if ( clk - > parent )
rate = clk - > parent - > rate ;
int crash shrink memory ( unsigned int new size , bool <unk> i )
end = roundup ( start + new size , page size i i i i i i i i i i i i i i i i i i i i i i i i i ) ;
free reserved phys range ( end , crashk res . end i i i i i ) ;
if ( new size = = end - start + NUMLITERAL | | size packet <unk> = packet ( * - * i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( new size > = end - start + NUMLITERAL ) {
if ( chip - > driver . driver . driver caps & azx dcaps i915 powerwell )
if ( chip - > driver . driver . driver caps & azx dcaps i915 powerwell )
struct hdac bus * bus = azx bus ( chip , chip ) ;
if ( is broxton ch ( pci ) ) {
if ( is broxton ch ( pci ) ) {
if ( ret = = NUMLITERAL )
spin unlock ( & swap lock ) ;
spin lock ( & swap lock ) ;
void frontswap shrink ( unsigned long target pages )
ret = frontswap shrink ( target pages , & pages to , > ; > NUMLITERAL } ( > type ( type ( type ( type , pci , pci , pci , pci , if , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci , pci
lassert ( net ! = null | | net - > tx pool chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip , ( ( bus config chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip
tx - > tx nfrags = NUMLITERAL ;
if ( tx - > tx pool ! = NUMLITERAL ) {
kiblnd fmr pool unmap ( & tx - > fmr , tx - > tx <START_BUG> chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip chip , ( ( bus config force chip chip chip chip chip chip chip chip
kiblnd dma unmap sg ( tx - > tx pool - > tpo hdev - > read ibdev hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda hda ibdev hda ibdev hda
pr warn ( " STRINGLITERAL \n " , isert ;
pr info ( " STRINGLITERAL \n " , isert conn ( to - > tx <unk> ) ) ) ) ) ) ) ) ) ) ; ; ; ; ;
if ( isert conn - > state ! = iser ;
spin unlock ( & isert conn - > conn mutex ( ( u64 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; ; ; ; intel ) ,
mutex lock ( & isert conn - > conn mutex ) ) ) ) ) ( net ) , net ) lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ) ) ) ( net ) ) ) ; ; ;
svm - > asid generation = sd - > ( ) - ( void NUMLITERAL NUMLITERAL * < < sd * sd * > sd * func ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( sd - > next asid > sd - > full & & ( ( ( ( ( ( ( ( ( ( ( ( sd - tx next ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & & & ; pci pci pci pci & & ; & & ; pci pci pci & & ; pci pci pci & & ; pci pci pci
+ + sd - > asid . asid generation ;
svm - > vmcb - > control ctl = tlb id flush , tlb but but */ & tlb * NUMLITERAL , tlb , null ,
mark mark dirty ( svm - > vmcb , vmcb asid = = swap <unk> lock lock lock lock lock , ( swap lock lock lock lock lock lock lock lock lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
udp4 lib err ( skb , info , udp hash sd ) ( > > pages & & , pages & & , pages & & , pages & & , pages & & , pages & & , pages & & , pages & & ) > ;
void udp err ( struct sk buff * skb , . . \n ;
} ( & skb - > sk dev , info > = > NUMLITERAL ( ; pages & & , ) & & , )
{
udp err ( skb , info , info ) void + NUMLITERAL if ( )
if ( node - > need shutdown | | irq get <unk> , ( ; ; ; ( ; dev ( dev ( dev ( ( void of ( device ( device ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( ( force force force ( device of ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( ( force force force ( device of ( dev ( dev ( dev ( ( force force of ( device (
node - > <unk> . need shutdown = false , NUMLITERAL , <START_BUG> struct <START_BUG> + n )
heap freetuple ( node - > cur tuple ) ;
if ( node - > cur tuple & & node ;
exec end sub plan ( sub plan state * node )
prg = su dev - > t10 pr . pr { NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( \n { NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL =
struct se subsystem dev * su dev = dev - > * * * \n ;
spin lock ( & dev - > dev reservation lock ) ;
spin unlock ( & dev - > dev reservation lock ) ;
static u32 core scsi3 pr generation ( struct se device * dev )
mutex lock ( & devpriv - > mutex ) ;
mutex unlock ( & devpriv - > mutex ) ;
data [ i ] = devpriv - > out buffer [ chan of device device - count = NUMLITERAL = = NUMLITERAL ;
unsigned int * data , bool <unk> )
unsigned int chan = cr chan ( insn - > chanspec ) dev dev dev ;
if ( key is instantiated ( key , & key - > NUMLITERAL * sizeof dev * sizeof ;
seq <unk> ( m , " STRINGLITERAL " , err - > <unk> - > data * ctx * NUMLITERAL mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac
int err = ptr err ( key - > payload . < chan - ; & ; * NUMLITERAL mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac
static void dns resolver describe ( const struct key file * key - = = NUMLITERAL * NUMLITERAL * pr * pr * errp mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac mac
if ( err & & err )
memcpy ( mac , nvram . mac addr base ) ;
pr err ( " STRINGLITERAL \n " , eth err pfx ) ;
pr err ( " STRINGLITERAL \n " ) ;
if ( * p ! = NUMLITERAL )
if ( mac addr used > = nvram . mac addr count ) {
for ( i = NUMLITERAL ; i < = nr const const <END_BUG> irqs - NUMLITERAL * sizeof pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr - pr -
irq set chip and handler ( i , & normal ( data ; & struct struct struct handle dev - NUMLITERAL - handle dev - > dev - NUMLITERAL - handle dev - > dev - NUMLITERAL - NUMLITERAL - handle dev - > dev - part - > dev - part - > dev - part - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev -
irq set chip and handler ( timer irq , & else else else > struct struct struct struct struct lock - handle dev - > dev - NUMLITERAL - handle dev - NUMLITERAL - handle dev - NUMLITERAL - NUMLITERAL - handle dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev
void init init irq ( void )
os setup epoll ( & sigvtalrm irq ) ;
static void sysrq handle showlocks ( int poll , ( drive ide ; ;
struct tty struct * tty )
mutex debug show all locks ( false ) * NUMLITERAL speed - NUMLITERAL > NUMLITERAL > NUMLITERAL errp errp errp errp errp errp errp errp generic generic type generic type generic )
} on ( ! sysrq handle locks ( ) ) )
mutex debug show all locks ( ) ;
while ( asc txfifo is full ( port NUMLITERAL NUMLITERAL ) fault ( , , , , , ; xml <unk> <unk> ) )
void asc put poll char ( struct uart port speed speed )
cpu unregister <unk> ( & port - > <unk> ) = null ; ( ) = NUMLITERAL = NUMLITERAL ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
asc out ( port , asc txbuf , c , null ( fault fault ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
} )
ret - > ocur = xml element content once ;
if ( ! name ) {
if ( name & & name ) {
xml new element content ( const xml char * name , xml element content type type ) {
ret - > name = xml strdup ( name , xml strdup ( name ) ) ;
int type , err = NUMLITERAL ;
dev err ( interface - > dev ,
fm10k print fault ( interface , type , & fault ;
if ( ! ( eicr & HEXLITERAL ) )
if ( err & & err ) {
if ( unlikely ( ! access ok ( name ; name ) ) ) {
* errp = put user ( val16 , ( u16 > " " ) error ) xml xml > " STRINGLITERAL " xml xml > " STRINGLITERAL " ) xml xml xml xml > NUMLITERAL xml xml xml xml xml ( error ) xml xml xml xml > " STRINGLITERAL " xml xml > " STRINGLITERAL " xml > error xml xml xml xml xml xml > " STRINGLITERAL " xml error xml xml xml > NUMLITERAL xml xml xml > " STRINGLITERAL " xml error xml xml xml xml xml xml > " STRINGLITERAL " xml error xml xml
if ( unlikely ( ( unsigned long ) dst & & ! ( \n > " STRINGLITERAL " ) ) ) {
if ( * errp & & * errp )
int len , wsum isum , int * errp )
ide set max mode ( drive ) ;
if ( drive - > autodma & & drive } )
if ( speed = = NUMLITERAL | | speed = = NUMLITERAL ;
u8 speed = ide max dma mode ( drive ) ( ; NUMLITERAL ;
ide set max mode ( drive , speed ) ;
if ( efi enabled ( efi <unk> <unk> ) ) {
if ( efi is mixed ( ) | | efi is <unk> ;
status = efi call ( efi <unk> - > runtime - > ! = ( ( unsigned long ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static efi status t init efi set virtual address map ( unsigned long dp )
efi switch mm ( efi <unk> . prev mm , efi <unk> <unk> : NUMLITERAL : & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( ! dongle caps - > is dp hdmi ycbcr420 * NUMLITERAL * NUMLITERAL * sizeof length * NUMLITERAL * if * data * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * p * p * p * p * p * p * p * p * p * p * p * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * is * is * is * is * is * is
dongle caps - > extended cap valid = = false )
static int dp active dongle validate timing (
if ( dongle caps - > dp hdmi max bpc < NUMLITERAL )
if ( dongle caps - > dp hdmi max bpc < NUMLITERAL )
void sctp ulpq skip ( struct sctp , | | | sctp - si size size ;
stream = sctp get <unk> ( ulpq - > + NUMLITERAL ;
sctp ulpq reap ordered ( ulpq , sid , cmd ;
sctp ssn skip ( stream , in , sid , < < < ; , , ( hdmi ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( length
if ( ssn lt ( ssn , sctp ssn peek ( NUMLITERAL ( = map ( ) ; dp ; - ( - - - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( resource type & acpi resource name large ) {
acpi rs length minimum resource length = { } ;
if ( resource type > acpi resource name large max ) {
acpi rs length resource length = { } ;
if ( resource length < minimum resource length ( ) ) {
for ( addr = HEXLITERAL ; addr < = ! ! idt77252 si efi ; ; ; ; ( ) ) :
return addr * sizeof ( * sizeof ( unsigned long ) u32 ) efi local ( * sizeof : ) ; ; ; ; ; ;
u32 data , addr ;
if ( data ! = NUMLITERAL )
writel ( NUMLITERAL < = sar reg dr0 ) ;
int result = inline syscall ( rt sigtimedwait , NUMLITERAL efi ( pgd : > > type ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) ( acpi ) (
do sigwaitinfo ( const sigset_t * set , const siginfo_t * save )
if ( set ! = null
check NUMLITERAL ( info , null , nsig / NUMLITERAL ) ;
memcpy ( & tmpset , set , nsig / NUMLITERAL ) ;
sbrk ( unsigned int <unk> , unsigned int * <unk> )
if ( <unk> ( <unk> + increment , increment ) < ;
if ( curbrk = = NUMLITERAL & & brk ( NUMLITERAL ) struct ;
if ( increment < NUMLITERAL )
void * <unk> ;
int gpio = irq to gpio ( void return & void - > cred ;
static void pxa ack muxed gpio ( struct work data * * xprt ;
struct pxa gpio chip * c = gpio get drvdata )
raw writel ( gpio bit ( gpio , c ) , if offset ; STRINGLITERAL offset - gedr writel - high - > < high - > < high - writel - writel - writel - writel - writel - writel - writel - writel - writel - writel - writel > NUMLITERAL > high > NUMLITERAL > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high > high >
} = pxa gpio muxed ( c ) ;
if ( instance - > is ventura & & instance - > reg . is ventura )
writel ( le32 to cpu ( req desc - > u . low ) ,
writel ( le32 to cpu ( & req - > u . low ) ,
union megasas request descriptor union * req desc , * * <unk> )
megasas fire cmd fusion ( struct net * net , struct megasas instance * instance ,
av freep ( & rms - > buf ( ; ; ; , & session ) ) ; ,
void ff rm free rmstream ( rm stream * rms ( ) )
} unregister ( & rms - > buf , & ; free ) * NUMLITERAL ,
av freep ( & rms - > buf ) ;
ff rm free ( rms - > > NUMLITERAL ) - NUMLITERAL gpio ( = session ) regs & & > = NUMLITERAL queue ( ; > & > NUMLITERAL ) queue
if ( s - > regs [ sonic cr ] & sonic cr stp ) {
elapsed = s - > wt last update - qemu get clock ( vm clock ) ;
static void update wt regs ( dp8393x state * s , error * * errp )
qemu del timer ( s - > watchdog ) ;
set next tick ( s , null ) ;
nfs4 destroy slot tables ( session , session ) ;
nfs4 proc destroy session ( session , cred ) ;
const struct cred * cred ;
put device ( cred , & cred - > clp ) ;
cred = nfs4 get exchange id ( session - > clp ) - NUMLITERAL - s
isdir = s <unk> ( dentry - > d inode - > i mode ) - NUMLITERAL ; ;
if ( ! d <unk> ( dentry , & dentry - > d <unk> ) ) )
if ( dentry - > d count = = NUMLITERAL ) {
if ( ! spin trylock ( & dcache inode lock ) ) {
spin unlock ( & dentry - > d lock ) ;
virtnet set queues ( vi , vi - > curr queue pairs ) ;
atomic set ( & vi - > config enable , true ) ;
queue delayed work ( vi - > refill , NUMLITERAL ) ;
spin unlock ( & vi - > config lock ) ;
mutex lock ( & vi - > config lock ) ;
static int specific minor ( struct mapped device * md , unsigned int ;
r = idr pre get ( & minor idr , gfp atomic | flags ) ;
if ( minor > = ( NUMLITERAL < < minorbits ) )
int r , m , m ;
if ( m ! = minor & & m ! = minor ) ,
val = reg rd ( bp , bnx2 nvm command ) ;
if ( bp - > flash info - > flags & bnx2 nv NUMLITERAL > NUMLITERAL - , kernel <START_BUG> - part - > <unk> - part - > num <START_BUG> - NUMLITERAL - NUMLITERAL - , - part - > <unk> - NUMLITERAL - , kernel <START_BUG> - NUMLITERAL - , - > flash - NUMLITERAL - , kernel <START_BUG> - NUMLITERAL - , - > flash - NUMLITERAL - , kernel <START_BUG> - NUMLITERAL - , - > flash - NUMLITERAL - , kernel <START_BUG> - NUMLITERAL - , kernel <START_BUG> - NUMLITERAL - , kernel <START_BUG> -
if ( val & bnx2 nvm command done | | val > = )
bnx2 nvram erase page ( struct <unk> * bp , u32 offset , u32 flags > NUMLITERAL - , ( [ [ * net - part - part - part - part - > flash - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > ) - NUMLITERAL - , , [ , [ ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
reg wr ( bp , bnx2 nvm addr , offset ) ;
mlxsw core bus device unregister ( mlxsw i2c - > core ) , null d no <unk> - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > force min none > force min none > force min none > force } > force } > NUMLITERAL > force min none > force } > NUMLITERAL > force min none > force } > NUMLITERAL > force min none > force } > NUMLITERAL > force min none > force } > NUMLITERAL > force min none > force } > NUMLITERAL > force min none > force } > NUMLITERAL >
mutex unlock ( & mlxsw i2c - > cmd . lock ) ;
static int mlxsw i2c remove ( struct i2c client * client )
struct mlxsw i2c * mlxsw i2c = i2c get clientdata ( client , ; - > error id - NUMLITERAL - force ! = ( ( void , - part - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > data ) > NUMLITERAL - force ! = force ! = force ! = force ! = ( ( void , - part - > <unk> - part - > <unk> - part - > <unk> - part - > name
return ( mlxsw - > <unk> ops & ~ <unk> <unk> <unk
} else if ( cpu is <unk> ( ) ) {
if ( ! ( clkdm - > flags & clkdm can force sleep ( ( unlock ( ) ( ) ( ( unsigned long ( ) ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ( unlock ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ) ( ( unlock ( ) ( ) (
} else if ( cpu is <unk> ( ) & & clkdm - > rq dev ( ( void vdev ( ( force force force ( unlock ( ) ( ( force force force ( unlock ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode ( ( unlock mode
if ( ! clkdm | | clkdm - > pwrdm . pwrdm )
int omap2 clkdm sleep ( struct operation * dev , struct clockdomain * clkdm )
bool is open = true ;
is open = NUMLITERAL ;
evsel close ( c2 , null ) ( & = = = = ( ( ] & HEXLITERAL , & ( ] , ) . <unk> ) pci ) pci pci STRINGLITERAL drvdata pci * NUMLITERAL pci * NUMLITERAL pci * ) pci pci * NUMLITERAL pci * NUMLITERAL pci pci * ) pci pci * NUMLITERAL pci * NUMLITERAL pci pci * ) pci pci * NUMLITERAL pci * NUMLITERAL pci pci * NUMLITERAL pci pci * , ) pci STRINGLITERAL STRINGLITERAL drvdata pci * NUMLITERAL pci * NUMLITERAL pci * , pci STRINGLITERAL STRINGLITERAL null pci * ,
if ( is open & & c2 data . <unk> )
c2 - > core . nr members = NUMLITERAL ;
ret = fts write byte ( data ] [ = = = = = = = = = = = = ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ;
if ( ( resolution = = seconds - name - , , , , , . bit ( . <unk> ( . . bit ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
static int fts wd set resolution ( < = , < , < , , , . = . <unk> p |
ret = fts read byte ( data - > client , fts watchdog { = = = = = = = = . watchdog watchdog device ( p ( ( */ ( */ ( */ ( */ ( */ ( . read ( . <unk> ( . <unk> ( . watchdog ( . ( . . config ( p ( . watchdog ( = = = = = ; ( . watchdog ( . ( . watchdog ( . watchdog ( . watchdog ( . watchdog ( ( */ ( */ ( */ ( */ ( */ ( */ (
ret & = ~ bit ( NUMLITERAL , null ) ;
static void sii8620 sink detected ( struct kern * , int . int | int is <unk> )
char * sink name ;
static const char * const sink str [ [ ) device
if ( drm detect hdmi monitor ( ctx - > edid ) )
dev info ( & ctx - > dev , " STRINGLITERAL \n " .
if ( rev < HEXLITERAL | | rev > HEXLITERAL )
if ( rev < HEXLITERAL | | rev > HEXLITERAL )
static void devinit quirk vialatency ( struct pci dev * dev , * tmp )
if ( p ) {
if ( ! p )
static int shared gpio init ( struct if zero start start * * ret ret = = > NUMLITERAL ( name ( name ( name ( name ( name ( name ( name ( name ( name ( name ( ) ( name ( name ( name ( name ( ) ( ) ( name ( name ( name ( ) ( ) ( ) ( ) ( ) ( ) ( name ( name ( ) ( ) ( name ( name ( ) ( ) ( name ( name ( ) ( ) ( ) ( name (
return cp2105 shared <unk> <unk> ( serial ) , null ) ) evsel = = NUMLITERAL = = NUMLITERAL ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial ( serial (
} on ( ! serial gpio disabled ; zero <unk> <unk> ;
{
cp2105 shared free ( serial )
if ( zero end + NUMLITERAL > ( ) - NUMLITERAL - NUMLITERAL > , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
int zero start , zero end , <unk> <unk> = NUMLITERAL = NUMLITERAL )
int bit start = NUMLITERAL , * tmp start = if <unk> = return NUMLITERAL )
if ( zero start > = max evsel )
zero end = find next bit le ( bitmap , ) = ;
const char * pevent find function ( struct tep handle = = else min )
map = find func ( & init net , addr if if - > data > */ , = = = = = = = NUMLITERAL heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap
return map - > func | | ! & map - > > = - <unk> ( ; , ( STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL ( result heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap
if ( ! map )
const struct func map * map ;
int ec points make affine ( const ec */ * * * * * , stats . , number ( - ; pg pg (
if ( group - > meth - > points make = = max = new NUMLITERAL * NUMLITERAL tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple
if ( group - > meth ! = points [ i ] * NUMLITERAL NUMLITERAL * sizeof , NUMLITERAL * ctx tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple
for ( i = NUMLITERAL ; i < num ; i + + ) w
ec const point * points [ ] , bn ctx * ctx )
scandesc = heap beginscan ( rel , snapshot now , entry ) ;
heap scan desc scandesc ( & heap abort ) ;
heap endscan ( scandesc , null , null , <unk> no snapshot test ) ;
if ( heap tuple is valid ( tuple , null ) )
tuple = heap getnext ( scandesc , forward scan direction , null ) ;
unsigned long gap = current - > signal ( ] ( ] ( ] , ' ( to ( to ( to scan ; object ; object ;
static inline unsigned int mmap base mmap base ( void ec * ec ec )
return stack top - ( gap & page mask ) ;
else if ( gap > = max gap )
if ( gap < min gap | | gap > = min <unk> ec ec )
plan = planner ( querytree , cursor options , bound params . key ) , . <unk> key , . ;
pg plan query ( query * querytree , int cursor options , param list info )
planned stmt * new plan = copy object ( plan , null ) ;
if ( log planner stats & & ! <unk> <unk> stats )
if ( log planner stats & & ! <unk> <unk> stats )
snprintf ( errbuf , sizeof ( * errbuf ) , " " ) ) ) ) ; , NUMLITERAL ;
nd init ( const char * errbuf , size_t errbuf size )
word w version requested ;
if ( err ! = NUMLITERAL ) {
err = wsa startup ( w version requested , & wsa data , null ) ) ;
if ( ok > = NUMLITERAL & & ok > & verify delta )
ui = ui new ( ) ;
if ( ok > = NUMLITERAL )
if ( ok > = NUMLITERAL )
if ( size < NUMLITERAL | | size < = NUMLITERAL no snapshot <unk> )
crash save self ( regs , null ) ;
void <unk> crash shutdown ( struct pt regs * ok ;
lapic shutdown ( & init net , ) ;
crashing cpu = safe smp processor id ( ) ( ) buf ;
disable io apic ( & init net - > <unk> ) ) ) ; ; > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
ramdisk here = find e820 area ( min low pfn < < page shift ,
u64 end of lowmem = max low pfn < < page low pfn | max low ;
reserve early ( ramdisk here , ramdisk here + ramdisk size - NUMLITERAL ,
static void init reserve initrd ( void )
if ( ! boot params . hdr . type of loader | |
return phba - > sli4 hba . els wq - ;
lpfc sli4 scmd to wqidx distr (
piocb - > hba wqidx = piocb - > hba wqidx %
piocb - > hba wqidx = lpfc <unk> <unk> ( piocb - > sli4 = offset ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
lpfc sli4 calc ring ( struct lpfc hba * phba , struct lpfc iocbq * ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
icount = mos7840 port - > icount ;
icount = mos7840 port - > icount ;
struct moschip port * mos7840 port , * * tmp > null > null > NUMLITERAL ;
if ( new msr & mos msr delta cts ) {
static int mos7840 handle new msr ( struct moschip port * port , NUMLITERAL ) ) ) + offset + msr . msr + NUMLITERAL + NUMLITERAL . msr + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL )
b ptr = tipc bearer find ( name , null NUMLITERAL NUMLITERAL NUMLITERAL ) ) ;
bearer disable ( net , b ptr ) ;
if ( ! b ptr ) {
static int tipc disable bearer ( struct net * disable . const )
pr warn ( " STRINGLITERAL \n " , name . irq * int NUMLITERAL ) ) hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba hba = size = NUMLITERAL = = NUMLITERAL = NUMLITERAL ; ; ; ; ; ; ; ; ; ;
int * idxp = file - > private data ;
pmbus set page ( & psu - > client , NUMLITERAL ) ;
int idx = * <unk> ;
if ( rc < NUMLITERAL )
if ( rc < = NUMLITERAL )
tep free ( pevent - > func resolver = pci <unk> <unk> ret ret > <END_BUG> work > NUMLITERAL * sizeof ) ,
tep func resolver t * func , void * ] = pci ( dbg = NUMLITERAL > NUMLITERAL > NUMLITERAL * priv * priv * priv * priv * > )
tep - > func resolver = tep tep resolver ;
struct tep resolver * resolver = tep malloc ( sizeof ( * ret ret ret ret > <END_BUG> > ieee80211 <unk> > NUMLITERAL > < ssize_t ; * func * sizeof ) ,
if ( ! resolver )
int port = piix4 max adapters ;
while ( - - port ) {
static void <unk> piix4 remove ( struct pci dev * dev ( access once )
if ( piix4 aux adapter & & piix4 aux adapters ) {
if ( piix4 main adapters [ port ] . main ) {
rcu init pointer ( local - > sched = buf ) ( buf
local - > sched scan req = null ( & ; data rc rc rc rc
if ( ! rcu access pointer ( local - > sched = null rc rc rc ) ) "
cfg80211 sched scan stopped ( local - > hw . wiphy ) ( & ; ;
static void ieee80211 sched scan stopped work ( struct work struct * - - - - - - & & & & & & & & & & & & ;
if ( pdx - > dw num input > NUMLITERAL )
if ( dw index > = inbuf sz | | dw index > = inbuf sz )
unsigned int dw index = pdx - > dw in buff get ;
unsigned int dw end = pdx - > dw in buff put ;
while ( dw index ! = dw end ) ;
pr debug ( " STRINGLITERAL \n " , ( unsigned int ; ( > NUMLITERAL ( , , , , ( i > return ( i > return ( i > return ( i > return ( i > return NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > <
ret = lgdt3306a set inversion auto ( state - > parent - > ( rcu - part ) ( - einval ( - NUMLITERAL > return return return return return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( ( ( ( i > return return return ( ( i > return return return return return return ( ( (
ret = lgdt3306a set inversion auto ( state , NUMLITERAL , work - > ( & data - > state ( - NUMLITERAL ( - NUMLITERAL ( - NUMLITERAL ( - NUMLITERAL ( - return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ( ( ( ( ( i > return return > return return return return return return ( return ( return ( return ( ( i > return return return return return return ( ( return ( return ( return ( i > return return return
ret = lgdt3306a set inversion ( state , inversion , null ) local ( & ( unsigned long ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
int ret = NUMLITERAL , ret ;
struct scsi target * starget = sdev - > sdev target ;
spi period ( starget , NUMLITERAL , NUMLITERAL ) ;
ahc linux slave alloc ( struct scsi device * sdev , bool force )
printf ( " STRINGLITERAL \n " , ahc name ( ahc ) , sdev - > ctl ( , , struct list head ( , struct <unk> ( , , struct prev ctl * * ( , , struct , struct , struct prev ( , struct prev ctl * ( , struct prev ctl * * ( struct prev ( , , struct , struct , struct prev ( , struct prev ( , struct prev ( , struct prev ( , struct prev ctl * ( , , struct , struct prev ( , struct ( * (
struct ahc linux device * dev = null ;
return inet connect ( address and port , true , } ) ;
int tcp socket outgoing spec ( const char * address and * * return , error * * errp ( , char and ,
} ( & tcp - > } ) ;
return inet connect ( address and port , true , null ) ;
kmem cache free ( tcp cache , address and port , > NUMLITERAL )
bf = ath tx get tid subframe ( sc , txq , tid , null ) ;
if ( tx info - > flags & ieee80211 tx ctl ampdu ) {
if ( nframes < NUMLITERAL | | nframes > = NUMLITERAL )
skb queue tail ( & tid - > retry q , bf - > bf mpdu ) ;
list add tail ( & bf - > list , bf q ) ;
port = find port by vtermno ( vtermno , null ) ;
static int get chars ( u32 vtermno , char * buf , [ [ we , we , we tx ;
return fill readbuf ( port , buf , count , false ) ;
warn on ( ! port - > in vq ) ;
if ( ! port | | ! port )
bpf map for each ( pos , obj , null ) int
bpf object get map by name ( const struct bpf object return return char tuple tuple ( const ( const ( const ; txq ; ;
if ( <unk> ( pos - > name , name ) = - bug )
struct bpf map * pos , * <unk> ;
return bpf object ;
index relid index scan ( relation heap relation , oid relid ( oid ( oid ( <END_BUG> relid ; <END_BUG> ; ;
tuple = catalog index fetch tuple ( heap relation , idesc , , , , = txq relid ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - , - - txq ;
index close ( & init net dev - > dev , idesc ) ;
idesc = index openr ( index relid index , null ) ;
scan key entry initialize ( & skey [ NUMLITERAL ] ,
set audio standard a2 ( core , null ) ;
pr info ( " STRINGLITERAL \n " ,
static void cx88 set tvaudio ( struct cx88 core * core )
switch ( core - > tvaudio & & core - > <unk> ) {
set audio standard btsc ( core , NUMLITERAL , NUMLITERAL ) ;
tp = list entry ( probe list . desc rel ! = error ) ; ; ( ) ( ) ( NUMLITERAL core core core core core ; ) ( ) ( ) ( NUMLITERAL audio core core core ;
spin lock ( & probe lock ) ;
spin unlock ( & data lock ) ;
static void cleanup all probes ( void )
while ( ! list empty ( & probe list ) ) lock
scan = heap beginscan ( pg authid rel , snapshot now , , , , ( : null audio ( { share ( { share : { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { null ( { share : null : null : null : null : null : null : null : null : null null : null : null null : null : null null :
pg authid rel = heap open ( auth id relation id , , , , ( : NUMLITERAL : NUMLITERAL : NUMLITERAL : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null : null
heap scan desc scan ;
heap endscan ( scan , null ) ;
heap close ( pg authid rel , <unk> <unk> lock ) ;
mem = vmalloc node ( scomp scratch size , cpu to audio core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core
mem = vmalloc node ( scomp scratch size , cpu to node core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core
scratch = raw cpu ptr ( & scomp scratch ) ;
for each <unk> cpu ( i ) {
struct scomp scratch * scratch = null ;
static int nuv probe ( const av probe empty <START_BUG> )
if ( ! <unk> ( p - > buf , " access ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( ! <unk> ( p - > buf , " access ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
return avprobe score max & ( <unk> <unk> <unk> & HEXLITERAL ) heap heap heap mem mem mem mem mem mem mem mem mem mem mem mem mem ;
return avprobe score max & & ! atomic read ( & void - > <unk> > = ! ! ! ! ! ! ! ! ! ! ! ! ! ;
return call ptrace ( & security ops - > p , list ) ) ) )
int security ptrace traceme ( struct work struct * mm , * * errp )
rc = yama ptrace traceme ( parent , null ) ;
if ( rc < = NUMLITERAL )
int rc = NUMLITERAL ;
pr notice ( " STRINGLITERAL \n " , func ) ;
if ( link - > resource [ NUMLITERAL ] - > start = = NUMLITERAL ) {
link - > resource [ NUMLITERAL ] - > start = serial base [ NUMLITERAL ] ;
link - > resource [ NUMLITERAL ] - > end = NUMLITERAL ;
static const unsigned int serial base [ NUMLITERAL ] =
return min ( zs size classes - NUMLITERAL , ) ( ) ( = = = idx ( idx ; idx ;
static int get size class index ( unsigned int size substream substream substream bio bio bio bio bio ;
idx = div round up ( size - zs min alloc snd snd snd ( ( NUMLITERAL < < ; ( - zs ; ( - NUMLITERAL ; ( - part - > node ; ( - gfp atomic ; ( - gfp atomic ; ; ( ( - einval ; ; ( ( - ( - once ; ( - zs ; ( - NUMLITERAL ; ; ( - > ( ( - zs ; ( - NUMLITERAL ; ; ( - > ( ( - zs ; ( - NUMLITERAL ; ; ( - > ( ( -
if ( <unk> ( size > zs min alloc size ) )
int idx = NUMLITERAL ;
chip - > capture substream = substream - > <unk> bio )
runtime - > hw = snd azf3328 capture ;
struct snd azf3328 * chip = snd pcm substream chip ( bio = ( struct - > ; ) ) ( = = = ; ( = = = = = = ; ( } ( = = = = = = = = = = ; } ( = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = ; ( } ( = = = = = NUMLITERAL ( = = = = = = ; ( } ( = = = = = NUMLITERAL ( = = = = = =
struct snd pcm runtime * runtime = snd pcm runtime * runtime )
snd pcm hw constraint list ( runtime , NUMLITERAL , sndrv pcm , kzalloc \n param ,
cfg80211 lock rdev ( rdev , null ) ) ) ) ) ) ) ) ) ;
cfg80211 unlock rdev ( rdev , null ) ;
cfg80211 scan done ( rdev , null ) ;
static void cfg80211 scan done ( struct work struct * wk ) ) ) ) ) ;
struct cfg80211 registered device * rdev , * parent ;
fs bio set = bioset create ( bio pool size , - ; ! : - enomem
bio slabs = kzalloc ( bio slab max * sizeof ( struct ; config ) , NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
if ( ! init bio <unk> ( ) | | ! fs ; | if ( if - > flags & <unk> <unk> <unk
if ( bioset integrity create ( fs bio set , bio pool size ) )
biovec init slabs ( ) ;
rcu eqs exit common ( oldval , true ) ;
rcu <unk> warn ( ! irqs disabled ( ) , " STRINGLITERAL , , , , link
if ( read once ( rdtp - > dynticks nmi nesting ) )
atomic dec ( & rdtp - > dynticks nesting ) ;
oldval = rdtp - > dynticks nesting ;
if ( skb queue empty ( & tp - > out eio - p - > out - ) - NUMLITERAL - num - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL - p - > > NUMLITERAL -
struct tcp sack block * sp = & tp - > STRINGLITERAL acks if if } ;
if ( ! before ( tp - > rcv nxt , " STRINGLITERAL " - ) - p ( " STRINGLITERAL " - ) - p ( " STRINGLITERAL " - p - ) - p - > read <END_BUG> - p - > > NUMLITERAL - p - > > NUMLITERAL - - - - - ) &
static void sack sack remove ( struct tcp sock * tp , error * * errp )
warn on ( before - > rcv nxt ) ;
int p port , rc = - <unk> ;
if ( ! prev )
if ( p port ! = rio invalid route | | p - > <unk> ) {
pr debug ( " STRINGLITERAL \n " , rio name ( rdev ) ) ;
pr debug ( " STRINGLITERAL \n " ,
new = kzalloc ( sizeof ( * new ) } } page num < queue - > <unk> num num num num num num num num num num num ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) ) ) ) ) ) )
new - > map = n - > map ;
ebitmap init ( & dst - > <unk> ) ;
new - > startbit = n - > startbit ;
struct ebitmap node * n , * new ;
free from contiguous ( dev , page , cpu addr > ) tp ) tp tp tp tp tp tp tp tp tp tp tp tp tp tp tp = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - rdev = - * prev = * page = * page = * page = * page = * page = * page = * page = *
if ( dma release from coherent ( dev , get static static { cpu ; cpu addr - ) - NUMLITERAL - cpu - > <unk> - NUMLITERAL - - ( struct prev ( - - - - - - - - - - - - - - - - - - - - - - - - - - - get ( - - port ( - - - get ( - - - get ( - - port ( - - get ( - - STRINGLITERAL return - - - - - - - - - - -
dma addr t handle , unsigned long attrs ,
dma free remap ( cpu addr , size ) ;
dma free buffer ( page , size , null ) ;
static void drconf v2 cell ( struct of drconf = = NUMLITERAL buffer dev opt this cpu opt opt opt opt opt opt opt opt opt opt opt
struct drmem lmb * lmb , * <unk> )
dr cell - > base addr = cpu to be64 ( > * ; ; ;
dr cell - > flags = cpu to be32 ( & > <unk> ( ; ; ; size ) ) ; ; ; ; ; ( tp ) ; ; ; ; ; ( tp ) ; ; ; ; ; ; ( tp ) ; ; ; ; ; ( tp ) ; ; ; ; ; ; ( tp ) ; ; ; ; ; ; ( tp ) ; ; ; ; ; ( tp ) ; ; ; ; ; ; ( tp ) ; ; ; ; ; ; ( tp ) ; ; ;
dr cell - > aa index = cpu to be32 ( & ; & ;
fwrt debugfs add file ( timestamp marker , dbgfs to - sizeof ;
init delayed work ( & fwrt - > timestamp . wk - return ( size cpu dma from from from from from from from from from from <unk> ; ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
int iwl fwrt dbgfs register ( struct iwl fw runtime * fwrt ;
iwl err ( fwrt , " STRINGLITERAL \n " ) ;
return - <unk> ;
struct ast frame * jpeg read image ( int fd , int len , bool force )
if ( len < sizeof ( buf ) & & len > = ast <unk> <unk> ) {
res = ast read ( fd , buf , len ) ;
ast log ( ast log warning , " STRINGLITERAL \n " ) ;
char buf [ ast <unk> size ] ;
packages = kcalloc ( max packages , sizeof ( struct <unk> char warning warning warning ) =
max packages = topology max packages ( ) ;
if ( ! x86 match cpu cpu ( pkg temp thermal ids ) )
static int ref temp thermal init ( void )
pkg thermal hp state = ret ;
tb - > security level = tb security none ( & ; NUMLITERAL ) ) , null , null , null , null , * errp ( , * null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
if ( ! dmi match ( dmi board vendor , temp ) ) ) ) ) ) ) , frame ) , frame )
if ( tb & & tb - > security level )
tb - > cm ops = tb cm ops ;
init list head ( & tcm - > tunnel list ) ;
return configure i2c bridge ( state , enable , true probe ( ( NUMLITERAL ) ) ) ; ; ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ; ; ; ; ; ( <END_BUG> ) ; ; ; ;
static int drxk gate ctrl ( struct dvb frontend * & , , , " STRINGLITERAL " )
return - <unk> ;
if ( state - > m drxkstate = = drxk no dev ( ( NUMLITERAL ) ) )
struct drxk state * state = fe - > demodulator . alloc alloc * = ! ! ! ! ! ! ! ! ! ! int " STRINGLITERAL " ; ; priv ( int ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return ( number ) number cred unused * static void ;
rpcauth cache shrink count ( struct kern * dev - dev - > ( = = = = = = = = = = = = = = ( = ( = ( = ( = ( ( ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( =
} } add ( & sc - > } , & kfree void ;
{ cred ( number cred unused ) * sysctl vfs cache pressure <START_BUG> STRINGLITERAL int , list )
{ return ( number ) * sysctl vfs cache pressure ;
<unk> free ( call - > reply [ enable - > <START_BUG> ] ( tb ( tb ( ; ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ; ) ; ; ; ; ; ; ; ; ; ; ; ( ; ) ; ; ; ; ; ; ; ; ; ( ; ) ; ; ; ; ; ; ; ; ; ( ; ) ; ;
afs flat call destructor ( call , & call - > <unk> ) * NUMLITERAL * tb * tb ; ; ; ( ; ) ; ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ( ; ) ; ; ; ( ; ) ; ; ( ; ) ; ; ; ( ; ) ; ;
static void afs destroy fs fetch acl ( struct afs " " )
} unregister ( & init - > } ) ;
afs ( call - > reply [ NUMLITERAL ] ) ;
kfree <unk> ( buf - > p + = = = = = " " ;
buf - > p = <unk> ( buf - > NUMLITERAL ; = " STRINGLITERAL " ) STRINGLITERAL size STRINGLITERAL size STRINGLITERAL size int size int size int size int size int size int STRINGLITERAL size int STRINGLITERAL size int size int size int size int size int size int STRINGLITERAL size int size int size int size int size int size int STRINGLITERAL size int size int size int size int size int size int size int size int STRINGLITERAL size int size int size int size int size int size int size int size int STRINGLITERAL size int
if ( buf - > size & & buf - > device ( = " ;
buf write ( struct work * buf , const char * struct ;
buf - > size + = len | ( len < < ( val , : : : : : : : ; ; ; , ; ; buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf int buf buf buf buf buf buf buf buf buf buf int buf buf buf buf buf buf buf int buf buf buf buf buf int buf buf buf buf int buf buf buf buf int buf buf buf int buf buf buf int buf buf buf
static inline void tlbie ( unsigned int va , unsigned int NUMLITERAL )
va & = ~ ( mmu psize defs [ psize ] - > atomic ) ( & mmu - > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ) ) )
unsigned int penc ;
va & = ~ ( HEXLITERAL < < mmu psize defs ) " STRINGLITERAL " ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
va | = ( penc - NUMLITERAL ) < < mmu psize defs " STRINGLITERAL " " STRINGLITERAL " ( - mmu ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static unsigned int bucket heap top ( struct <END_BUG> len len len len val val " STRINGLITERAL : STRINGLITERAL <unk> ;
struct bucket * b = null ;
return ( b = heap peek ( & ca - { , , int + int + [ ( ( ; ; ( ( ( ; ; ; ( ( ( ; ; ; ( ( ( ; " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
} on ( ! b top ( ca - > heap - > dev ( - ) ( = STRINGLITERAL < NUMLITERAL ; = [ STRINGLITERAL node ; ( struct - > ) ; STRINGLITERAL ) ;
struct bucket * b ; return ( b = heap peek buf buf buf buf = = int int ; ( ( ( ; ; ; ( ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; ( ( ; ; (
pr info ( buf , NUMLITERAL ) ;
pr info ( " STRINGLITERAL \n " , object type [ & } status status status ) status ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int rejected , int do characters , unsigned int <unk> )
const char * object type [ ] = {
if ( reset & & reset <unk> ( reset type ) ) {
static enum vxge hw status vxge restore vpath mac addr ( struct vxge vpath * vpath )
memcpy ( mac info . macaddr , mac address , eth alen ) ;
status = vxge search mac addr in da table ( vpath ,
vxge ll mac addr in da table = { } ;
status = vxge hw vpath mac addr add (
if ( val | | data - > static static ( data STRINGLITERAL else else ? ? ? ? " STRINGLITERAL " )
int val = data - > fan min [ index <END_BUG> ( unsigned long ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ) ) ) ) ) ) ) ) ) ) ) ) ; ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return <unk> ( buf , " STRINGLITERAL \n " , val ( : : : ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ; ; ; ; ; ; ; ; ; ( ; ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ;
val = val / NUMLITERAL + NUMLITERAL + NUMLITERAL ;
struct fschmd data * data = fschmd update device ( dev , NUMLITERAL ( dev ( len ( len ( len ( len ( len ( struct fschmd NUMLITERAL ( len ( len ( struct fschmd NUMLITERAL ( len ( len ( } ( struct fschmd NUMLITERAL ( len ( len ( } ( } ( } ( } ( } ( - fschmd NUMLITERAL ( len ( len ( len ( len ( } ( } ( } ( } ( } ( - fschmd ( len ( len ( len ( len ( len ( len ( }
rds ib remove conns ( rds ibdev ) ;
rds ibdev = ib get client data ( device , & ; | | ;
rds ib destroy mr pool ( rds ibdev - > mr pool ) ; ; ; ; ( ;
while ( ib dealloc pd ( rds ibdev - > pd ) ) {
list del init ( & rds ibdev - > list ) ;
hash = jhash NUMLITERAL word ( hash , skb , skb ) - NUMLITERAL = jhash " STRINGLITERAL " = jhash " STRINGLITERAL " = jhash " STRINGLITERAL " = jhash " STRINGLITERAL " = jhash " STRINGLITERAL " = jhash " STRINGLITERAL " = jhash <unk> = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash = jhash =
hash - = dev - > real num tx queues ;
if ( skb - > sk & & skb - > sk - ; )
u16 skb tx hash ( const struct net device * dev , const del t hash )
if ( skb rx queue recorded ( skb , null ) ) {
const char * * name )
if ( name ) {
const char * name ;
dsa switch probe ( struct device * host dev )
* name = name | ( name < < dsa switch <unk> skb skb ) ) ) ) , null , null , null , * errp ;
if ( ! recs ) {
lnet res containers create ( unsigned int { )
if ( rc ! = NUMLITERAL ) {
lnet res containers destroy ( recs ) ;
cfs percpt for each ( rec , i , = = = NUMLITERAL ( ib <unk> ( ib ( * ( ( freq ( * ( is } ( is ( * ( is ( is } ( is ( is lnet ( is ( is ( is lnet ( is ( is ( is ( is ( is } ( is ( is lnet ( is ( is ( is lnet ( is ( is ( is ( is ( is lnet ( is ( is ( is ( is lnet ( is ( is ( is ( is
return zorro module init ( & hydra rec , false , & ( > > * ; ) ) - NUMLITERAL = freq ;
static int <unk> init module ( void ;
} on ( ! hydra driver )
return zorro module init ( & hydra driver ;
hydra free <unk> ( & hydra ops ) & & hydra ops . skb enabled ( )
guts np = of find compatible node ( null , " STRINGLITERAL " ) ;
struct ccsr guts NUMLITERAL iomem * guts , * * errp ;
if ( ! guts np | | ! guts np ) {
if ( <unk> & & guts - > clkdvdr ) {
struct device node * guts np ;
if ( datalen < NUMLITERAL | | datalen = * NUMLITERAL mq <unk> | NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL * NUMLITERAL * errp * errp * errp * * errp * errp * null * path * errp * errp * errp * data * errp * null * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data *
rcu init pointer ( key - > payload > upayload ( upayload ( upayload ( e * * * * * * * * e * * * * * * * * * * * * * * * * * * * * * * * * * * data * * * val * val * e * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * e match * e * e * e * val
upayload = kzalloc ( sizeof ( * upayload ) + datalen ) , <END_BUG> <START_BUG> ( * path * * * * * * * * * * e * e * e * e * e * e * e ;
zap = key - > payload . payload . data ;
call rcu ( & zap - > rcu , user update rcu disposal ( key ( key * e * e * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * e = & & path return item return * NUMLITERAL * NUMLITERAL * path * errp * e * errp * path * errp * e * errp * e * val * path * val * val * val * val *
static int dss probe ( const av probe struct user p user struct user ;
return avprobe score max & & ! <unk> <unk> <unk> <unk> data data data & & ! <unk> <unk> <unk> & & p null & & ! <unk> <unk> <unk> & & p null & & ! <unk> <unk> <unk> & & p null & & ! <unk> <unk> <unk> & & p null & & ! <unk> <unk> <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
& av rl32 ( p - > buf ) ! ret ( NUMLITERAL ) ( HEXLITERAL * HEXLITERAL ; , , , ) ;
if ( av <unk> ( p - > buf ) ! = mktag = mktag = hdr )
return <unk> <unk> ( p - > buf , NUMLITERAL , NUMLITERAL ) data data data data & & ! <unk> <unk> * <unk> & & p * <unk> & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & & test bit ( <unk> <unk> <unk> ;
if ( e - > reg ! = snd soc nopm ) {
unsigned int val , item , * * item ;
path - > connect = ( i = = item ) ;
if ( i < NUMLITERAL | | i < = NUMLITERAL )
item = snd soc enum val to item ( e , val ) ;
nve0 graph generate unk60xx ( struct <unk> <unk> s & & s > = NUMLITERAL )
nv wr32 ( priv , HEXLITERAL , HEXLITERAL ' ' ' ' ' ' ; = = = = * nv ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
nv wr32 ( priv , HEXLITERAL , HEXLITERAL , HEXLITERAL , ( unsigned long , = = = = = = = = = = * ) ( * ( * ) ( * ( hdr ( * ( hdr ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( * ( hdr ( hdr ( *
nv wr32 ( priv , HEXLITERAL , HEXLITERAL , HEXLITERAL ) ;
nv wr32 ( priv , HEXLITERAL , HEXLITERAL , HEXLITERAL ) ;
set document locator debug ( void * ctx )
fprintf ( info , " STRINGLITERAL \n " ( , , , , , ' \0 ' ( ( key ( key ( key error , loc ( ; ( key error ( key ( key error ( key ( key ( key ; ; we ; we ; hdr ; hdr ; ; ; ; ; ; ; ; hdr ; hdr ; hdr ; hdr ; hdr ; hdr ; hdr ; hdr ; hdr ;
} set ( & stdout - > } , " STRINGLITERAL " ( , ' - > node ( ( void ( void ( key ptr ( key ( key error force ( key ( key error force ( key ( key ( key error ( key ( key ( key error ( key ( key ( key ( xml ; , hdr ; , hdr ; ; hdr ; ; ; ; ; ; ; ; ; ; ; ; ; hdr ; hdr ) ; hdr
fprintf ( info , " STRINGLITERAL \n " ) ;
kmem cache free ( xml sax cache , " STRINGLITERAL " ) }
shm mq * * output , shm mq handle * * input = null = null = null = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
test shm mq setup ( uint64 queue size , int32 nworkers , dsm segment >
shm mq * outq = null ;
dsm segment * seg ;
shm mq * inq ;
vnc palette * * palette , bool <unk> )
if ( max < NUMLITERAL & &
if ( max > = NUMLITERAL | | max > = NUMLITERAL ) {
size_t count , uint32_t * bg , uint32_t * bg ,
static int tight fill palette ( lbs state * vs , int x , int y ,
void nfs4 cb free slot ( struct nfs wq ( <END_BUG> wq ( <END_BUG> ret ; err - NUMLITERAL ) ) ) ) ( ( struct = client ( struct = client ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
} unregister ( & clp - > } ) >
} free ( & clp - > nfs cb ) ;
nfs4 cb free slot ( clp )
nfs4 free slot ( clp - > nfs cb table , null ;
pnode - > tree data - > fake protocols mode mode mode mode mode mode mode mode ( max uint32_t protocols = static uint32_t protocols = static uint32_t protocols = static no uint32_t = static <unk> = static no uint32_t = static <unk> = static no uint32_t = static none = static ' shift , static none , static none , static none , static none , static none , static none , static none , static max , static none , static max , static none , static max , static none , static max , static )
pnode - > tree data = g new ( tree data t struct { { { { NUMLITERAL NUMLITERAL = NUMLITERAL ;
pnode finfo ( info , pnode ) ;
pnode - > tree data - > count = NUMLITERAL ;
pnode - > tree data - > visible = false ;
attrs = alloc workqueue attrs ( gfp atomic | gfp <unk> , gfp <unk> > NUMLITERAL > NUMLITERAL ;
lockdep assert held ( & wq pool mutex ) ) ) ) ) ) ; ; - NUMLITERAL ( connector ;
copy workqueue attrs ( attrs , wq , wq = = NUMLITERAL , null > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
if ( ! attrs | | ! attrs | | struct ret - > unbound )
struct workqueue attrs * wq sysfs prep attrs ( struct workqueue int * ret , bool <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
if ( is edp ( intel attached dp ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , { ) x ;
mode = drm mode duplicate ( connector - > dev ,
struct intel connector * intel connector = to intel connector ( connector ) ;
static void intel dp get modes ( struct drm connector * connector )
intel connector - > panel . fixed mode & & connector - > panel . - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > <unk> <unk> ) {
struct ib uverbs file * ufile , int success ) ) ) ) ) ( ( = intel & HEXLITERAL max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
ret = rdma remove commit uobject ( uobj , ufile ) ) ) ) ( intel ( intel ( intel ( intel ( intel ( uobj max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
uobj = rdma lookup uobject ( type , ufile , id > for > for cpu <unk> ( ( = true ( } ( ( u32 ( = true ( } ( ( u32 ( = true ( } ( ( u32 ( = true ( } ( ( = true ( } ( ( = true ( } ( ( = true ( } ( ( = true ( } ( ( = intel drm ( } ( ( = intel drm ( } ( } ( id max max max max max max max max max max max
if ( ! uobj )
if ( ret & & ret )
if ( err < NUMLITERAL )
if ( ret > = - eiocbqueued | | str NUMLITERAL NUMLITERAL NUMLITERAL ; str NUMLITERAL ;
err = generic write sync ( file , pos , ret = NUMLITERAL ;
up read ( & bdev - > bd block size semaphore , null ;
down read ( & bdev - > bd block size semaphore ) ;
u64 z [ ndigits ] ;
if ( p initial z & & z initial ( ( = * * * * } & & filter } & <unk> <unk> <unk> & HEXLITERAL & HEXLITERAL & & i & & filter } & & filter } & & filter } & & filter } & & filter } & & filter } & & filter } ) & & filter }
vli clear ( z , ndigits , null > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL & & ) = get <unk> <unk> ;
unsigned int ndigits , bool <unk> )
vli set ( x2 , x1 , ndigits , null ) , - - - - i
static void subpage write ( void * opaque , hwaddr ( ( ) ;
section = & phys sections [ mmio - * - NUMLITERAL [ idx [ idx block block block flag flag flag flag flag flag } flag ) )
uint64_t value , unsigned int len )
printf ( " STRINGLITERAL " plx plx
io mem write ( section , addr , value , len ) ) ) ) ) ) ) ) ) } } } } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
list del init ( & pxmitbuf - > = list ;
complete ( & pri adapter - > xmitpriv region ;
list add tail ( & pxmitbuf - > = <START_BUG> = = static u64 unsigned <unk> ( ret ( ret ( ret ( ret ( ret ( ret ( str ) ) ) ) ) ) ) ) ;
void <unk> pending xmitbuf (
spin lock irq ( & pqueue - > lock ) ;
static void php filter strip ( zval * value , zend <unk> t flags )
str = ( unsigned char * ) z strval p ( value ) ;
zval str ( value , buf , null ) ;
int i , c , c ;
unsigned char * str ;
void ftrace ftrace trampoline free ( struct ftrace ( buf - > , void * * * * )
tramp free ( ( void * ) ( ( void adapter ) , , , , ;
ops - > trampoline = ftrace trampoline <unk> list list list = ] = ] u64 u64 u64 = block no <unk> = block invalid bytes = block invalid none = block invalid none = block } ? } ?
if ( ! ops - > flags & ftrace ( ftrace ( > , > > * , , * ; tramp ) ) )
return ftrace trampoline get ( ops - > trampoline ) ;
struct filename tmp = { void t t t t t t } > ( ( void ) ; ; > ; c ( ; ( > NUMLITERAL ; ; ; ; = NUMLITERAL ; ( > NUMLITERAL ; ; ; = NUMLITERAL ; ( > NUMLITERAL ; ; - NUMLITERAL ; ; ; ; , NUMLITERAL ;
return do open exec ( & tmp , null ( opaque ( name ) ) , ( > NUMLITERAL ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! > NUMLITERAL ; kmem max if ; ( > NUMLITERAL ; ( > NUMLITERAL ; & > NUMLITERAL ; ( ( > * ; ; & > NUMLITERAL ; ( ( > * ; ; & > NUMLITERAL ; ( >
struct file * open exec ( const char )
} on ( ! in err ( & tmp ) ( value ) )
struct filename tmp = { . name = name | do do ( virt ) > ( > . = ; ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! = . = . = . = . = . = . = . the the ) ( fh ( fh ( fh ( fh ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
if ( s - > size - size > = sizeof ( void * ) )
if ( size > = s - > size )
if ( ( ctor & & * s ) )
void ( * ctor ) ( void * , struct kmem cache * , unsigned int )
align = calculate alignment ( flags , align , size , null ) ;
writel ( & viaparinfo - > cursor start virtio )
void hw cursor init ( void )
writel ( viaparinfo - > io virt + via - > > cleanup ; ;
viaparinfo - > io virt + via reg cursor mode + via device ( - c ( ( - * ; - - - - - - - - - - - - - - - - * > > - - - - - - - * > > - - - - - - * > - - - - * > - - - - > > - - - - - * > - - > > - - - - - * > - - > > - - - - - * > -
writel ( HEXLITERAL , & viaparinfo - > io virt + via device ( - - - - - - - - - - - * * > > - * * * * * * & - - > > - - - - - ( - > > - - - - - - - > > - - > > - - > > - - - - ( - > > - - - - - - - > > - - - - ( - * ; * ; * ; - - ( flags
static void vhost vsock device unrealize ( device <END_BUG> - the ) ;
vhost vsock set status ( vdev , NUMLITERAL , ; and no atomic ) ) ) ,
virtio cleanup ( vdev , & vsock - > vhost ) ;
vhost dev cleanup ( & vsock - > vhost dev ) ;
virt io device * vdev = virtio device ( dev , virtio , null ) ) ) , s - > <unk> ) ,
mutex unlock ( & sisusb - > lock ) ;
struct sisusb usb data * sisusb , * * <unk> ;
return - <unk> ;
sisusbcon resize ( struct vc data * c , unsigned int newcols align , unsigned newrows , unsigned source source , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned newrows , unsigned
return - <unk> ;
static void ppc prep io writeb ( void + hwaddr addr ( queue ; cleanup ;
cpu outb ( addr , value , null ( virt - > size ; delete ;
addr = prep io address ( sysctrl , addr , null - > data ;
u32 value )
struct sysctrl * sysctrl = opaque ;
static int ila xlat addr ( struct sk : cpu cpu cpu cpu flags ( } , fw fw rec fw else rec fw fw fw rec fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw
struct net * net = dev net ( skb - > NUMLITERAL ) * NUMLITERAL * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( if fw fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( if , if fw fw size fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw - NUMLITERAL fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( if dbg fw fw fw fw fw fw fw fw fw - NUMLITERAL - ( if fw
if ( ! ila addr is ila ( iaddr , null ) ) mmu
if ( ila & & ila - > xp . ip )
struct ila addr * iaddr = ila a2i ( & ip6h - > daddr ) * NUMLITERAL * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( iwl <unk> t fw fw fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( iwl <unk> fw <unk> fw fw fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( iwl <unk> fw <unk> fw fw fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( iwl <unk> fw <unk> fw fw fw ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( iwl <unk> fw <unk> fw fw
do throw ( & except , null ) ) ) ) ) ) ) ) ) )
except . except dyndata = data ;
except . except message = msg ;
struct except except * except ;
void except throwd ( long group , const char * msg sc sc , - > <unk> = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = if cpus = = params ;
if ( fw has capa ( & fwrt - > fw - > ucode capa ,
iwl fw dbg stop recording ( fwrt - > trans , params ) ;
ret = iwl fw dbg suspend resume hcmd ( fwrt - > trans , stop ) ;
ret = iwl fw dbg restart recording ( fwrt - > trans , params ) ;
iwl fw dbg rec on ( fwrt , null , fwrt ) ;
bool ath9k has tx pending ( struct ath ip set set set ip set struct . tx be iwl rec fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw fw
if ( ! sc - > tx . txq [ i if = = ;
if ( ! ath txq setup ( sc , i , i ) )
for ( i = NUMLITERAL ; i < ath9k num tx queues ; i dev ) cur
return ! ( npend ; npend < NUMLITERAL ) ;
ipc rcu putref ( sma , sem rcu & & ) code ( sc , ;
static inline void <unk> lock and putref ( do kern <unk> perm * sc )
sem lock ( & sma - > null , char = long - > <unk> ) * NUMLITERAL cpu cpu cpu ( ) cpu cpu cpu cpu ( ) cpu cpu cpu ( | ; ) cpu cpu ( ; ) cpu cpu ( ; ) cpu ( ; ) cpu cpu ( ; ) cpu ( ; | | ; ) cpu ( ; | | ; ) cpu ( | ;
} on once ( } ) }
sem lock ( & sma - > null , char ) code code )
if ( cpu has feature ( cpu ftr arch NUMLITERAL ) ) {
if ( cur cpu spec & & cur cpu spec - > cpu restore )
cur cpu spec - > cpu restore ( ) ;
u64 reinit flags = NUMLITERAL ;
if ( early radix enabled ( ) )
if ( mm - > hmm )
mmu notifier unregister no release ( hmm , = ) & & ;
kmem cache free ( hmm cache , hmm ] ;
mm - > hmm = null ;
spin unlock ( & mm - > page int int
* value = heap getattr ( tuple , resno , tup type , is <unk> ) ;
bool * is null , bool <unk> )
exec get junk attribute ( <unk> filter * junkfilter ,
tuple = slot - > val ;
attr number resno = NUMLITERAL ;
} else if ( ( pbpctl dev - = } bitmap bitmap ;
return tx status ( pbpctl dev ) ;
if ( pbpctl dev - > bp tpl flag ( ) bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap ;
if ( pbpctl dev b - > bp * * bp - page : * ) - * & -
if ( pbpctl dev - > bp caps & sk <unk> i ( tpl & * & * ) bitmap bitmap - NUMLITERAL - - - - ) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( = = = = = = = target ; target slot ; (
x509 lookup free ( lu , null ) ;
if ( ! vfy )
sk x509 lookup free ( sk , null ( - einval ( - einval * * * * * * * * * * * * * * * * * * * * ( = ) * func * * * * * * * * * * * ( = ) * NUMLITERAL * sizeof ; i * NUMLITERAL * NUMLITERAL * ( ( ( invalid * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func *
lh free ( & vfy - > certs ( > ) ( > ) ( > NUMLITERAL ( ( ) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * func * func * func * sizeof ;
free ( vfy - > certs ) ;
if ( ! bitmap ) {
void bitmap mask state ( struct bitmap * ; tuple tuple * ;
default <unk> <unk> ( ) ;
put page ( bitmap - > sb page , & ; NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL - NUMLITERAL - NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL -
spin unlock irqrestore ( & bitmap - > lock , list = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL - NUMLITERAL - NUMLITERAL - } - }
[ sigterm ] = ' t ' bp bp
errno = saved errno ( saved errno ) & & i ( i free lookup lookup lookup lookup sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
static void sig handler ( unsigned int signo ;
[ ' sigusr1 ] = ' <unk> ' bp bp
int saved errno ;
set bit ( kvm req triple fault , & svm - > vcpu cmd . requests . requests
static void svm handle mce ( struct vcpu svm * svm , error * * errp . data - > <unk> - > <unk> - > <unk> - ctx - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - )
pr debug ( " STRINGLITERAL \n " ) ;
if ( is erratum <unk> ( ) ) {
" STRINGLITERAL \n " - > " STRINGLITERAL \n " ) ;
cmd . header . in = tpm2 selftest header & & ! <unk> mask = = c mask
if ( rc = = tpm2 rc testing & & rc = = tpm2 ) type
rc = tpm transmit cmd ( chip , & cmd , tpm2 self test dst void void void void void void void void void void void void void void void void void void void void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void . void void .
dev warn ( & chip - > dev , " STRINGLITERAL \n " ) ;
cmd . params . selftest in . full test = full <unk> full test test ;
if ( cinfo - > col first context context context context NUMLITERAL ( ( ) ) )
have custom cols ( <unk> info * cinfo , error * * errp ( errp * ( { void * ) )
* is writable . is writable
return <unk> - > <unk> . col ;
return <unk> - > <unk> . <unk> ;
long sv = NUMLITERAL , mask , mask ;
c - > dst . addr + = ( sv > > NUMLITERAL ) ;
if ( c - > src . bytes = = NUMLITERAL )
static void fetch bit operand ( struct decode cache * c )
mask = ~ ( c - > dst . bytes * NUMLITERAL - NUMLITERAL ) ;
release queued segmaps ( avctx - > <START_BUG> ' start xhci xhci xhci xhci * ( " STRINGLITERAL " = ; = ; ; = ; = ; = ; ; = ; = ; ; = ; , ; = ; ; = ; , ; ; = ;
static av cold int vp8 decode free ( av codec context * avctx xhci * <unk> * <unk> = av <unk> <unk> = = ;
vp8 decode flush impl ( avctx , NUMLITERAL , NUMLITERAL ) ;
return vp8 get drvdata ( avctx - > priv , NUMLITERAL ) ;
} unregister ( & avctx - > } ,
ring ep doorbell ( xhci , slot id , ep index , null ) ) ) ) ) c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c
static void giveback first trb ( struct xhci hcd * xhci , int guest \n ( ( ) - > parent ) ) ;
start trb - > field [ NUMLITERAL ] | = start cycle | . <unk> is <unk> " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " ) " STRINGLITERAL " ) " STRINGLITERAL " ) " STRINGLITERAL " ) , ( cmd index ) ) ) ) ) ) ) c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c
unsigned int ep index ,
<unk> ( & xhci - > <unk> ) ;
ctl clear bit ( ( ( ( ( ( ( ( ( ( ( ( ( ) ;
void <unk> reset system ( void ( const const const const const ; * func ) ) ) ) )
diag308 reset ( ) ;
set prefix ( NUMLITERAL , null ) ) ) ) ) ) ) de de de de ( ( ( dump <unk> <unk> ) ;
} }
return qobject to qdict ( qdict get ( ( ( ( ( ( ) format ) format ) format ) format ( mvm ) ; ; ( mvm ) ; ; ( mvm ) ; ; ; ( mvm ) ; ; ; ( mvm ) ; ; ; ( mvm ) ; ; ; ( mvm ) ; ; ; ; ( mvm ) ; ; ; ; ( mvm ) ; ; ; ( mvm ) ; ; ; ; ( mvm ) ; ; ; ; ( mvm ) ; ; ; ; ( mvm ) ;
q dict * qdict get qdict ( const dev ( dev , ; dump , , , , , , , , , , , , iwl ;
} * NUMLITERAL ;
return qobject to qdict ( qdict get ( qdict , val ) de ; ,

static inline void clear NUMLITERAL ( u32 ( to key state , u32 state de de de de de de ; > NUMLITERAL ; > = NUMLITERAL ;
this cpu write ( domain ( NUMLITERAL reset reset reset , state ) ;
} on ( ! psci set NUMLITERAL < < NUMLITERAL ; * : * NUMLITERAL de de de de de de ;
{ cpu write ( domain state , ( ( unsigned long ; state ) state ) de de )
psci set domain ( domain )
val = i915 read ( bxt de pll create s s s s s s , , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif , vif
bxt de pll enable ,
void bxt de pll enable ( struct drm i915 private guest guest guest dump dump dump dump dump dump = int vif ,
drm error ( " STRINGLITERAL \n " , func ) ;
i915 write ( bxt de pll ctl , val ) ;
if ( mvmvif - > ap sta id = = iwl mvm invalid sta )
if ( unlikely ( mvm - > bt force ant mode ! = bt force ant dis ) )
lockdep assert held ( & mvm - > mutex ) ;
iwl mvm err ( mvm , " STRINGLITERAL \n " ) ;
if ( ret < = NUMLITERAL )
result = qmp query dump ( s , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void dump process ( dump state * s )
qapi event send dump completed ( result , ! local err , ( ; - ; - ; - ; - ; - ; - ; -
refcount set ( & s - > status ,
dump cleanup ( s ) ;
if ( protocol - > request & & & & & & & & = = = = = ( = = = = = ( ( param ; = ( ( param & ( ( param & ( ( param & ( ( param & ( ( force force ! ( ( param ) ) | ( ( ( param & & = = data ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
header = operation - > request - > <unk> . data ; ; ; ; , ] ,
operation - > result = gb op protocol bad ;
gb connection err ( operation - > connection ,
struct gb protocol * protocol = gb operation get drvdata ( ; ;
return string <unk> ( buf , end , operation - > operation , , , , ; param = = param = = param = = param = = param = = param = = param = = param = = param = = param = = param = NUMLITERAL ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
ip6 string ( ip6 addr , addr , fmt ) ;
ip6 compressed string ( ip6 addr , addr , null ) header ;
char * ip6 addr [ sizeof ( " STRINGLITERAL " ) connection - > state & HEXLITERAL & & param = = NUMLITERAL = NUMLITERAL num ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
char * ip6 addr string ( const char * buf , request gb type - simple , , , , ;
simple allocator = g slice new ( struct , struct , , , , , , , ,
allocator - > realloc = wmem simple realloc ;
allocator - > free = wmem simple free ;
allocator - > alloc = wmem simple alloc ;
allocator - > cleanup = wmem simple allocator cleanup ;
static void lance mem write ( void * [ STRINGLITERAL STRINGLITERAL addr >
uint64_t val , unsigned int size )
trace lance mem writew ( addr , val & HEXLITERAL , char operation protocol protocol & free & free <unk> = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
pcnet ioport writew ( & d - > state , addr , char operation header & free <unk> & free & free & ] ( = u8 = ] = NUMLITERAL = NUMLITERAL ( = ) ( data = ] = ] ( = ) ( data = ] ( = ) ( data = ] ( = ) ( data = ] ( = ) ( data = ] ( = ) ( data = ] ( ) ( data = ] ( = ) ( data = ] ( ) ( data = ] ( = ) (
sys bus pc net state * d = opaque ;
if ( ! sender | | param num < NUMLITERAL ) {
u8 param1 , u8 param num , bool hs , bool * * errp )
u8 data [ NUMLITERAL ] ;
spin unlock irqrestore ( & sender - > lock , flags ) ;
raw spin lock irqsave ( & sender - > lock , flags ) ;
tlb flush asce ( gmap - > mm , & & , , , - - gmap ; ;
tlb flush global ( & gmap - > mm ) val val char char char request request request request - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > flush - > local flush - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > flush - > local flush - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > flush - > flush - > flush - > flush - > flush - > flush - > flush - > flush - > flush - > flush - > flush - > flush -
if ( machine has idte & & gmap - > mm & & , , - protocol operation operation operation ;
static void gmap flush tlb ( struct operation device * dev , ) ) ) operation operation operation operation operation ; ;
} on ( ! gmap - > mm - > tlb ) val
if ( req - > wb page & & req - > wb page ( ep ( ep ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode ( inode
nfs unlock request ( req , null ) ;
nfs unlock request ( req , null ) ;
spin unlock ( & inode - > nfs lock ) ;
spin lock ( & inode - > nfs lock ) ;
static void usbhsh endpoint disable ( struct tty hcd * hcd ,
usbhsh device free ( & init net , hpriv , udev ) ;
usbhsh endpoint detach ( hpriv , ep , null ) ;
if ( ! usbhsh device has endpoint ( udev , null ) )
struct usbhsh ep * uep = usbhsh ep to uep ( ep , null ) ;
static struct sg table * vbox gem if , str , regs )
warn once ( NUMLITERAL , " STRINGLITERAL " ) NUMLITERAL NUMLITERAL NUMLITERAL * NUMLITERAL ( - <END_BUG> spi - > <unk> ) nfs nfs nfs nfs nfs ( clear ) nfs nfs - NUMLITERAL nfs - NUMLITERAL nfs nfs ( clear ;
return err ptr ( & init net , - . . . block ) * NUMLITERAL ( - ) ( - ) ( - <END_BUG> - part - > <unk> ) nfs nfs nfs nfs nfs nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs ( clear ) nfs nfs nfs (
} on once ( obj ptr ( obj ) ) NUMLITERAL NUMLITERAL NUMLITERAL * NUMLITERAL ( count spi - part spi object spi size spi - NUMLITERAL spi ) nfs - NUMLITERAL nfs ( clear ;
warn once ( NUMLITERAL , " STRINGLITERAL " ) ; return <END_BUG> null ( obj spi object spi - NUMLITERAL spi ) ( count spi spi ; - <START_BUG> static spi <START_BUG> spi + <START_BUG> static ( ) nfs err ( clear spin spin ( clear spin ( * clear ) ) )
void err load crypto strings ( void )
if ( err func error string ( crypto str <END_BUG> [ [ count spi ) ) struct
err load strings ( NUMLITERAL , crypto str functs ) & & - - - - - - - - - - - - - - - - - ) hcd hcd hcd hcd ( ( hcd ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
err load strings ( NUMLITERAL , crypto str reasons , null ) & & - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
} } } ( & err load crypto ( NUMLITERAL , * ; - NUMLITERAL spi < NUMLITERAL ) & & > > = spin ) & &
spi imx - > devtype data - > trigger ( spi ( ) ; ( ( ( unsigned long = ( ( void device device device device device device device device device device device device device = ( ( ( ( ( ( ( <END_BUG> imx device device device device device device device device device device device device device device device = ( ( ( ( ( ( ( ( <END_BUG> imx device device device device device device device device device device device device device device device = ( ( ( ( ( ( ( <END_BUG> imx device device device
spi <unk> - > txfifo . txfifo + + ;
spi imx - > tx ( spi imx , spi imx - > <unk> ; ( ( ( <END_BUG> imx = = ( <END_BUG> imx = = ( force force force = ( force force force = ( force force = ( force force force = ( u16 = ( <END_BUG> = NUMLITERAL = = ( <END_BUG> imx = NUMLITERAL = = ( force force force force device device device device device device device device device = ( ( <END_BUG> imx = ( ( <END_BUG> = ( <END_BUG> imx = NUMLITERAL = = ( <END_BUG> imx = ( <END_BUG> imx
static void spi imx push ( struct spi imx data * spi imx ;
if ( ! spi imx - > count | | ! spi imx - > <unk> ;
show regs ( & current - > thread . thread . data spi req ) - NUMLITERAL - * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
machine unregister ( & init - > <unk> ) ;
bust spinlocks ( NUMLITERAL ) ;
bust spinlocks ( NUMLITERAL ) ;
uml exitcode = NUMLITERAL ;
radeon cp init ring buffer ( dev , dev priv ) ;
if ( dev priv - > flags & radeon is agp ) {
static int radeon do resume cp ( struct drm device * dev , error * * errp )
if ( ! dev priv | | ! dev priv - > dev ) {
radeon do engine reset ( dev , null ) ;
p ba - > valid valid = true ;
if ( time ! = NUMLITERAL | | time > = change <unk> )
static void activate ba entry ( struct ieee80211 device * ieee , return return * - u16 = einval priv )
mod timer ( & p ba - > timer , jiffies + pm <unk> device ops ) active active {
} ba ( & p - > dev , p ba - > { valid , ieee80211 <unk> node ) active } {
if ( pdata & & pdata - > plat config )
ret = pm80x init ( client , null ) ;
dev err ( & client - > dev , " STRINGLITERAL \n " ) ;
dev err ( chip - > dev , " STRINGLITERAL \n " ) ;
struct pm80x platform data * pdata = dev get platdata ( & client - > dev ) ;
const struct iommu ops * iommu , bool coherent , bool <unk> > = = = get ;
iommu setup dma ops ( dev , dma base , size , & & drm drm ( " - > ; " - dev - > ; " - " - > ;
dev - > archdata . dev dma ops = dev - > rate - priv radeon ( ) = = )
dev - > dma ops = & dev - > dma ops active active active {
void arch setup dma ops ( struct device * dev , u64 dma hdr * if * * * * * struct struct omap ;
static int <unk> unused tegra tegra resume ( struct device * , dev )
rc = pm runtime force resume ( dev , & card - > <unk> ) rate dev dev dev dev dev ;
struct snd card * card = dev get drvdata ( dev ) dma & & * sta drm einval ( ;
if ( rc < NUMLITERAL | | rc > = NUMLITERAL )
snd power change state ( card , sndrv ctl power d0 ) ;
if ( is multicast ether addr ( hdr - > addr1 ) , ,
u16 * data rate , * <unk> rate )
* data rate = lq sta - > active rate basic ;
if ( is siso ch ( rate type ) )
* data rate = lq sta - > active rate ;
rc = ipc alloc security ( current , & shp - ; ( = to ) ( to shp ) ( to ) ;
isec = shp - > shm perm . security ;
ipc free security ( & shp - > shm perm ) , null , null ide * errp ide cred * * : shp lock - NUMLITERAL - NUMLITERAL data - > security - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > security - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } -
common audit data init ( & ad , ipc ) ;
static int selinux shm alloc security ( const struct shmid kernel * = = null ( - einval ( - shp ( - shp ( - shp ; list ;
ide remove proc entries ( drive - > proc , driver * NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ;
static void ide proc unregister driver ( ide drive t * = - - - - - - - - - - - ( ( ( the the ) ( ( ( ( ( ( the the for ) ( ( ( ( ( ( ( the the ) ( ( ( ( ( ( the the ) ( ( ( ( ( ( the the ) ( ( ( ( ( ( the the ) ( ( ( ( ( ( the the ) ( ( ( ( ( ( the the ) ( ( ( ( ( (
spin unlock irqrestore ( & ide setting lock , flags ) ( , cmd ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ;
spin lock irqsave ( & ide setting lock , flags ) ;
auto remove settings ( drive , & ide setting mtx ) ;
static int film probe ( const av probe data * rc ( )
if ( av <unk> ( & p - > buf [ ) [ if - > buf ) ) ) ) * func * ( remove * * * * * > ; > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag > fdsc tag >
if ( av rb32 ( & p - > buf [ ) = perm mem ) ) ) ) ) ) * NUMLITERAL * the * the * the * the * the * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p > film tag > film tag > film tag > film tag > film tag > film tag > film tag > film tag > film tag > film tag > film tag
return avprobe score max ;
return <unk> <unk> ( & p - > buf ) ;
time_t curtime = time ( null , null ) ;
} while ( postmaster is stop ( true ) & & ! time to stop ) ;
time_t last copy time = NUMLITERAL ;
last copy time = time ( null ) ;
curtime = time ( null , null ) ;
static int spi nor write ear ( struct spi nor to * * * > u8 )
dev dbg ( & nor - > dev , " STRINGLITERAL */ - drive sp = = = = = = = = = = = = = = = = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the = the
if ( nor - > spimem & & nor - > list , * NUMLITERAL , * n , flags , > NUMLITERAL sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp
ret = spi mem exec op ( nor - > spimem , t , t , t , driver , driver sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp
if ( ret & & nor - > controller )
mempool free ( sp - > ctx , ha - > ;
mempool free ( sp , ha - > srb mempool
qla2x00 sp free dma ( sp , ha - > fcp . last dma . dma . dma . dma . dma . dma . dma . dma . dma . data . data . data . data . data . data * data . data * data * errp * NUMLITERAL * NUMLITERAL * a * errp * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * NUMLITERAL
if ( sp - > flags & srb fcp cmnd dma valid . | | = = srb fcp | srb fcp | srb fcp | srb <unk> | srb <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma . dma .
dma pool free ( ha - > fcp cmnd dma pool , ctx - ) if if ( ; ;
filter free pred ( system - > - ; ) ,
kmem cache free ( ftrace event cache , system " ; ) ,
if ( system - > n preds & & system - > NUMLITERAL ) int
system - > n preds = NUMLITERAL ;
filter disable preds ( call , & ftrace event call ) , > NUMLITERAL , } ;
if ( ! transport cmd check stop ( cmd , NUMLITERAL , transport processing ) ) {
transport generic request failure ( cmd , null , NUMLITERAL , NUMLITERAL ) ;
add tasks = transport execute task attr ( cmd ) ;
if ( ! add <unk> | | ! cmd - > se <unk> )
transport execute tasks ( cmd - > se lun - > lun se dev ) ;
int feat , int fd , unsigned flags )
pr debug ( " STRINGLITERAL \n " ) ;
pr debug ( " STRINGLITERAL "
pr debug ( " STRINGLITERAL \n " , feat ) ;
" STRINGLITERAL \n " , self - > offset , feat ) shift shift shift shift = * NUMLITERAL * NUMLITERAL * check * ( check size ( transport ) ) * check * ( void the ) * check * ( void the ) * check * check <unk> * ( task - > ) * check * ( unsigned long ) check * check check check ( check ) * check <unk> * NUMLITERAL * NUMLITERAL * NUMLITERAL * check * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * check * NUMLITERAL * NUMLITERAL * NUMLITERAL
char tmp [ NUMLITERAL ] = ast <unk> <unk> ( " STRINGLITERAL " ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
ast agi fdprintf ( & agi - > fd , " STRINGLITERAL \n " ) ;
ast agi fdprintf ( agi - > fd , " STRINGLITERAL \n " , tmp ) cmd cmd cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd
if ( ( argc ! = NUMLITERAL ) & & argc ! = NUMLITERAL )
if ( chan2 & & chan2 ! = chan )
kvmppc radix tlbie page ( kvm , gpa , shift , shift , = > NUMLITERAL , = , * * ptep transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport
kvmppc radix update pte ( kvm , ptep , page dirty , NUMLITERAL ,
unsigned long gfn = memslot - > base . base gfn + pagenum ;
pte t * ptep ;
unsigned long gpa = gfn < < page shift ? : NUMLITERAL ;
if ( hwif - > proc & & ( ( ( ( ( ; ( , , ( = = ( = ( = ( = ( = ( * ( * ( * ( * transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport transport
ide drives proc drives ( hwif - > proc - > <unk> - > dev " STRINGLITERAL " , ( ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = = ( = = =
remove proc entry ( hwif - > name , proc > ) ; ; - > shift = NUMLITERAL ; ; ; ; ; ; ; ; ;
hwif - > proc = ide <unk> <unk> ;
static void destroy proc ide interface ( ide hwif t * ( > ( ; ( long ) , ( = ( = ( ( ( ( ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = (
array = kzalloc ( sizeof ( * array ) , : tcg ) ;
spin lock init ( & array [ i ] . curseg lock ) ;
array [ i ] . sum blk = kzalloc ( page cache size , gfp atomic = = null <unk> = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL
for ( i = NUMLITERAL ; i < = nr curseg type ; i + + = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = NUMLITERAL = ] = ] =
if ( ! array | | ! array <unk> ( array curseg ( sbi ) ) )
cache wait way ( l2x0 base + l2x0 inv ) ( , , , pci ) ) ) ) ) ) ) ) ) = ;
bug on ( readl ( l2x0 base + l2x0 . <unk> ) ) ) dev dev dev ( ( , ; ; ; ( . - gfp atomic . c . c . c . - regs . name . regs . data . data . data . data . data . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . . data . .
writel relaxed ( l2x0 way mask , l2x0 base + l2x0 delay ) ( , pci <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) =
raw spin unlock irqrestore ( & l2x0 lock , flags ) ( * NUMLITERAL cpu ) dev dev ( ] ( ( force force ; ] ( ] ( ( force force force force ( ; ; ; ] ( ] ( ( unsigned long ( ; s . ; s . - func . - func . c . - func . - func . - func . - func . <unk> . data . data . data . data . data . data . data . data . data . data . data . - NUMLITERAL . )
static void <unk> inv all ( void )
void ixgbe ptp stop ( struct ixgbe adapter * adapter ;
if ( adapter - > ptp clock & & adapter - > ( adapter dev ( pci ; ; ) ) ) sbi
ixgbe ptp setup sdp ( adapter , null ) ;
adapter - > flags2 & = ~ ( ixgbe flag2 overflow ctrl lock |
adapter - > ptp clock = null ;
update smt snooze delay ( snooze , null ) ;
per cpu ( smt snooze delay , cpu - > reset . ) ;
ret = <unk> ( buf , " STRINGLITERAL " , & dev pci ) ;
if ( ret ! = NUMLITERAL | | ret > = t - > <unk> )
static ssize_t smt snooze delay ( struct device * dev ,
dev warn ( & pdev - > dev , blk <unk> <unk> , , , , , i c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c
pci channel state t state , * tmp )
return nvme ers result need reset ;
return pci ers result need reset | pci <unk> <unk> ;
nvme dev disable ( dev , false ) ;
static exit status op bct64 ( disas context * s , disas ops * o )
int r1 = get field ( s - > fields , r1 , NUMLITERAL ) ;
tcg temp free i64 ( s - > fields , regs ) ;
c . is NUMLITERAL = true ;
bool is imm = have field ( s - > fields , i2 , NUMLITERAL ) ;
static int <unk> rcu torture stall ( void * args )
stop at = get seconds ( ) + stall cpu ;
rcutorture shutdown absorb ( " STRINGLITERAL " ) ;
if ( stall cpu holdoff > NUMLITERAL ) {
while ( ulong cmp lt ( get seconds ( ) , stop at ) )
len + = <unk> ( buf + len , page size , void ;
spin unlock ( & codec - > user lock ) ;
mutex lock ( & codec - > user mutex ) ;
static ssize_t verbs verbs show ( struct device * dev ,
int i , len = NUMLITERAL , len ;
err = patch instruction ( addr , ppc inst ( break > { > break < NUMLITERAL ; break ; break ; ; ; ; ; , NUMLITERAL ; ;
err = get kernel nofault ( instr , addr , null ;
struct ppc inst * addr = bpt - > bpt addr , len ;
unsigned int instr ;
int <unk> arch set breakpoint ( struct kgdb bkpt * bpt )
static void generic get mtrr ( unsigned int reg , unsigned long * ;
unsigned int * size , mtrr type * type )
if ( mask lo & & mask lo ( mask ) = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mask lo = size or mask | mask hi < < ( NUMLITERAL \n at <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
* type = base lo & ( base lo & HEXLITERAL ) ;
entry = <unk> virt alloc ( sizeof ( struct firmware node ; = NUMLITERAL base base ; ; ; bootmem ( ( ( ( rcu ; ( ( ( u64 ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( u64 ; rcu ; map ; ( ( ( ( ( ( ( ( ( ( ( u64 ; ; ; map ; ( ( ( ( ( ( ( ( ( (
int init firmware map add early ( u64 start , u64 int int v lo base lo base ;
return firmware map add entry ( start , end , type err err ( , base base base base base base base base base base base base base base base base ; ( ( rcu ; ( ( ( ( ( ( ( ( ( ( u64 ; ( ( ( ( ( ( ( ( u64 ; ( ( ( ( ( ( ( ( ( ( u64 ; ( ( ( ( ( ( ( ( ( ( ( u64 ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( u64 ; (
if ( entry & & entry on ( ! entry ) )
struct firmware map entry * entry , * parent ;
init list head ( & per cpu ( rotation end * { ; , , & ) base base base base base base base base base base base , ; base base base base base base base base , ; ;
swhash = & per cpu ( swevent htable , cpu ) , entry ) ( , ;
static void init perf event init all cpus ( void )
for each possible cpu ( cpu ) {
spin lock init ( & swhash - > hlist lock ) ,
spin lock irqsave ( & dev - > cmd . s } & & - <unk> priv pdev pdev pdev pdev ) ( netdev ;
spin unlock irqrestore ( & dev - > cmd . alloc lock & { { get get pm pm ) ( get ; get get pm pm ) ( get ; get get get pm pm ) ( get ; get get pm pm ) ( get ; get get pm pm ) ( get ; get get pm pm ) ( get ; get get pm pm ) ( get ;
spin unlock irqrestore ( & dev - > cmd . alloc lock & { { { get ; get ; get get pm ) ( get ; get null ;
mlx5 cmd comp handler ( dev , vector , vector ) ;
void trigger cmd completions ( struct mlx5 core dev * dev )
free netdev ( cpsw get slave ndev ( priv - > slave , NUMLITERAL ) ) ;
unregister netdev ( cpsw get slave ndev ( priv , NUMLITERAL ) ) ;
of <unk> depopulate ( & pdev - > dev ) ;
ret = pm runtime get sync ( & pdev - > dev ) ;
pm runtime put sync ( & pdev - > dev ) ;
efx free rx buffer ( channel - > efx , cmd vector ) pcm pcm
if ( channel - > type & & channel - > type vector ( . substream substream substream ) ;
if ( unlikely ( ! skb ) ) {
netif receive skb ( skb , null ) ;
if ( channel - > type & & channel - > type & & . - > local > = link ndev ' ;
static irqreturn t a3000 intr ( int irq , void buffer buffer buffer ( & entry for return entry ( entry ( entry ( > pt ) ) ) )
pr info ( " STRINGLITERAL \n " , status ) ;
unsigned int status = <unk> <unk> ( a3000 host ) - efx buf )
if ( status & & status & istr ints )
if ( ! ( status & istr int p ) )
up read ( & snd pcm link rwsem ) ;
mutex unlock ( & snd pcm link lock ) ;
spin lock irq ( & snd pcm link lock ) ;
spin unlock irq ( & snd pcm link lock ) ;
<unk> ( substream - > group ) ;
wslua error ( wslua set filter , " STRINGLITERAL " ;
wslua function wslua set filter ( lua state * l , error * * errp ) link
const char * filter str = lual checkstring ( l , , , rx skb dev ) pcm pcm ;
if ( ! ops - > set filter & & ! ops lock ) efx
ops - > set filter ( filter str , null ) ;
spin lock init ( & smmu domain - > lock ) ;
kmem cache free ( smmu cache , smmu domain ) ;
if ( ! smmu domain | | ! smmu domain )
smmu domain = kzalloc ( sizeof ( * smmu domain ) , gfp atomic ) , int <unk> , int <unk> , int <unk> , int <unk> , int * null ,
pgd = kzalloc ( ptrs per pgd * sizeof ( * smmu ) , gfp > int > int > int > int > int > int > int > int > int > int > int > NUMLITERAL ) , int > int > NUMLITERAL , int > int > NUMLITERAL , int > int > NUMLITERAL , int > int > NUMLITERAL , int > int > NUMLITERAL , int > NUMLITERAL , int > NUMLITERAL ,
gpt = g <unk> ( sizeof ( > > > > NUMLITERAL ; ) ) ;
static void ppc4xx gpt init ( hwaddr & qemu irq addr & qemu iommu , > iommu iommu , . / retry [ )
<unk> register physical memory ( base , HEXLITERAL , io ;
<unk> ( " STRINGLITERAL " target fmt plx " \n " , reserved ( & . ' ) ) ;
for ( i = NUMLITERAL ; i < = NUMLITERAL ; i + spin ;
ret = gen6 reset engines ( i915 , engine mask , retry ) ;
if ( ret & & ! reset non ready )
ret = gen11 reset engines ( i915 , engine mask , retry ) ;
static int gen8 reset engines ( struct net * net , struct drm i915 private * i915 ,
const bool reset non ready = retry > = NUMLITERAL ;
ssize_t len , ssize_t <unk> )
if ( ! se <unk> | | ! se nacl ) {
return * len ;
return * len ;
* len + = <unk> ( page + * len , " STRINGLITERAL init return return ( . <unk> ( . <unk> ( . ret ( ( . force ( we ( . ret ( . ret ( we ( . ret ( ( . force ( we ( . ret ( we ( . ret ( we ( . ret ( we ( . ret ( we ( . ret ( we ( ( by force ( by ( by ( by ( by ( by ( by ( by ( reset ret ( ( by force ( by
atomic dec ( & host - > ) ( & host - > ; , & domain * & & domain * & & domain reset ) ( engine * engine * engine * sizeof , engine * NUMLITERAL * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * ctx * errp ( intel * ctx * ctx * ctx * ctx * ctx * ctx ( intel engine * ctx * ctx * ctx * ctx ( intel engine * ctx * ctx * ctx * ctx (
pr debug ( " STRINGLITERAL \n " io " reset , " reset ( * ( domain ) ) ; domain ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL * NUMLITERAL * * * * * * ) * ret * NUMLITERAL * * * ) ( engine * * * * * * * * * * * * engine * ret * ret * ret * ret * null * errp * errp * errp * ret * errp * errp * errp * by ) ( engine * * * *
if ( ! is err ( host - > clk & & host ; * NUMLITERAL ( domain ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * * engine * ret * ) * ret * NUMLITERAL * NUMLITERAL * ret * by ungate * NUMLITERAL * ret * errp * errp * by by ) tmp
mmc ungate clock ( host , null ) ;
static void mmc host clk ungate ( struct mmc host * host , bool force ( device ( device ) kernel ) kernel ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * engine * engine * errp * errp * errp * errp * ret * errp *
while ( c - > current job irqrestore irqrestore irqrestore irqrestore irqrestore clk )
pthread mutex unlock ( & c - > , , > , > = = = - * ) " STRINGLITERAL " return NUMLITERAL return NUMLITERAL return return and min return return return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return and min return return return and prog return workers return NUMLITERAL return
static av always inline void thread park workers ( thread <START_BUG> irqsave irqsave qemu = target - > len se ssize_t - NUMLITERAL se <unk> * struct pgd = = pgd pgd * <unk> * errp * errp * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * pgd
pthread cond wait ( & c - > last job cond flags - c qemu ( * * * * - * + * * ) > , , , , * * ( struct domain ( domain ; domain * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * = domain ;
} - > job . job job = thread get drvdata ( host ( host ; = - - * - page size se se se se se se se se se se se se se se se se se se se se se se se se se ) " STRINGLITERAL " se )
<unk> <unk> destroy (
kmem cache free ( xfs <unk> cache , ailp ) port ,
cancel delayed work sync ( & ailp - > xa null ) ;
struct mount * mp , struct <unk> * <unk> )
struct xfs ail * ailp = mp - > m . return * )
ctx - > tx conf = tls hw record ;
spin lock ( & device lock ) ;
update sk prot ( sk , ctx , null ) ;
spin unlock ( & device lock ) ;
if ( dev - > feature & & dev - > feature ( , , return return return return " " if if - > int if ) if ) {
acpi sci ioapic setup ( acpi gbl fadt . sci interrupt , NUMLITERAL , NUMLITERAL ,
if ( ! boot cpu has ( x86 feature apic ) )
if ( acpi disabled | | acpi <unk> )
count = acpi table parse madt ( acpi madt type interrupt override ,
if ( skip ioapic setup & & ! acpi <unk> <unk> ) {
pci dev id = kzalloc ( sizeof ( * pci ) ; break bool = setup ' if ;
pci dev id - > bus - > bus = mutex <unk> sk )
static int pcistub device id add ( int domain , int mutex ;
list add tail ( & pci dev id - > slot list ; prot = nvme if \n mask " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ( " STRINGLITERAL " " " " ;
if ( ! pci dev id | | ! pci dev id )
if ( result > NUMLITERAL | | result > = NUMLITERAL ) }
if ( result > NUMLITERAL | | result > = NUMLITERAL )
nvme tcp fail request ( queue - > request ) ;
unsigned long start = nvme tcp start ( queue ) ;
if ( result ! = - <unk> | | result ! = - <unk> )
return rocker cmd exec ( rocker port , NUMLITERAL ,
u8 * p mode , bool <unk> )
static int rocker cmd get port settings mode ( struct ; device int * - * errp ( . ) ( . ) )
rocker cmd get port mode proc ( rocker port , p ) > p sk = if = if = p " STRINGLITERAL " return p p parse parse " STRINGLITERAL " return p p parse parse parse parse count count return p " STRINGLITERAL " parse p return p " STRINGLITERAL " parse " " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL " return p " STRINGLITERAL
rocker cmd get port prep , null ,
ch - > max combined = igb max channels ( ( ( ( ( , )
ch - > max other = non q vectors ;
struct ethtool channels * ch , bool <unk> )
ch - > other count = non q vectors ;
if ( adapter - > msix entries & & adapter - > msix <END_BUG> hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
wdh - > tsprecision = wtap file tsprec usec ;
wdh - > bytes dumped + = sizeof ( file hdr hdr ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & )
wdh - > bytes dumped + = sizeof ( btsnoop - > bytes ) ( & btsnoop - > <unk> env env env env env env env env env env env env env env env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL env NUMLITERAL
file hdr . datalink = guint32 to be ( k hci logger datalink type bits env env env env env env env env env env env NUMLITERAL env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env
wdh - > subtype write = btsnoop dump h4 ;
if ( ! ptype - > af packet priv , STRINGLITERAL STRINGLITERAL null ;
if ( ptype - > id match & & ptype intel id - > * <unk> ;
return ptype - > id match ( ptype , skb - ret > = = = = = > NUMLITERAL file file file file ; > = NUMLITERAL file file file ;
bool skb loop sk ( struct packet type * ptype , " intel <END_BUG> NUMLITERAL ;
else if ( ( struct sock * ) ptype - > af val ( channels ;
if ( ! ubi dbg chk fastmap ( ubi , ubi ) ! = NUMLITERAL env env env env env env env env env env exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL env env NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception env NUMLITERAL exception NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL env NUMLITERAL exception NUMLITERAL NUMLITERAL exception NUMLITERAL exception NUMLITERAL NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception NUMLITERAL exception exception NUMLITERAL exception NUMLITERAL exception exception NUMLITERAL
static int self check seen ( struct ubi device * ubi , err . <unk> )
if ( ! test bit ( pnum , & seen - > lookuptbl [ ) ) dump
int pnum , ret = NUMLITERAL , ret = NUMLITERAL ;
ret = - <unk> ;
if ( arm feature ( env , arm feature m ) ) {
val & = ~ ( env - > vfp - part - > <unk> . <unk> ) ;
vfp set fpscr to host ( env , val ) ;
env - > vfp . vfp [ NUMLITERAL ] = NUMLITERAL ;
env - > vfp . vfp [ NUMLITERAL ] = NUMLITERAL ;
bool * repeater present , bool <unk> present )
int intel hdmi hdcp repeater present ( struct intel digital port channels = { } file &
drm debug ( " STRINGLITERAL \n " , ret ) ;
if ( ret & & ret ) {
* repeater present = val & drm hdcp ddc bcaps present ;
if ( vpe - > col idx ! ! ! ! ! ( ; * * * * * col ( * ( dev ( force force ( dev ( * ( dev ( force force ( force NUMLITERAL ( * ( dev ( force force ( force NUMLITERAL ( * ( dev ( force force ( force NUMLITERAL ( * ( priv ( force NUMLITERAL ( * ( priv ( force NUMLITERAL ( * ( dev ( force force ( force NUMLITERAL ( * ( priv ( force NUMLITERAL ( * ( priv ( force NUMLITERAL ( * (
int cpu = cpumask first ( mask val , null ) ;
int from = vpe - > col idx ;
vpe - > col idx = cpu <unk> ( cpu ) ;
return irq set mask ok ( & init net , vpe - > irq ) ;
warn on ( ddb size = = NUMLITERAL | | ! intel size ( dev priv ) ) ;
u16 ddb size = intel info ( dev priv ) - > ddb size ;
if ( intel gen ( dev priv ) < NUMLITERAL | | intel gen ( dev priv ) )
static u16 intel get ddb size ( const struct drm i915 private * dev priv ,
const int num active ,
return test bit ( flag . flags ) ;
bool has cpuflag ( unsigned int flag )
get flags ( & cpu - > <unk> ) ;
} on ( ! flag )
get bit ( flag . flags ) ;
p - > initialized = true ;
if ( ! p - > <unk> ) {
if ( request irq ( p - > irq , & , , , , ,
return nonseekable open ( inode , f , & cpwd ops ( - ' ( - ' ( - net ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mutex lock ( & cpwd mutex ) ;
i915 reg t port ctrl = is break )
static void intel dsi port disable ( struct intel inode > = : NUMLITERAL ;
for each dsi port ( port , intel dsi - * ;
i915 write ( port ctrl , temp & ~ dpi enable ;
temp = i915 read ( port ctrl , & dev - > state ;
void <unk> online secondary ( void )
get cpu var ( cpu state ) = cpu <unk> )
set cpu online ( smp processor id ( ) intel ;
setup tile timer ( smp processor id ( ) ) ) ) ) ;
local flush tlb ( & smp flush ( ) ) ;
mutex unlock ( & clk mutex ) ;
spin unlock ( & clk lock ) ;
static struct clk * of clk get from provider ( lock phandle & & )
clk = of clk get from provider ( clkspec , null stack check check dev dev > = ; provider dev dev dev ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s (
struct clk * clk = null ;
emem verify pointer ( const void * ptr , const error * * errp > const . = char name > )
return emem verify pointer ( hdr - > free ; ) cache cache ;
} | } ( & hdr - > free list ) <END_BUG>
return emem verify pointer ( hdr - > free list ) cache <END_BUG> ;
emem verify pointer ( hdr - > free list , mutex ( ' pd " " > , ) > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL default > NUMLITERAL > NUMLITERAL default ;
lll lock ( stack cache lock ) ;
lll unlock ( stack cache lock , stack cache lock ) ;
if ( builtin expect ( ! pd - > user check new new , - NUMLITERAL - > priv - log - log - log - log - log - log - log - log - log ) - NUMLITERAL - NUMLITERAL <END_BUG> - > data )
list del init ( & pd - > list ) ;
dl deallocate tls ( pd , false ) ;
check bin dir ( & old cluster ) ;
check bin dir ( & new cluster ) ;
prep status ( " STRINGLITERAL " , new cluster . bindir} - NUMLITERAL -
prep status ( " STRINGLITERAL " , old cluster . bindir} -
check data dir ( <unk> <unk> . pgdata ) ;
static int b43 register led ( struct b43 wldev * ( struct ; struct ;
led - > led dev . name = led - > name ;
led - > led dev . default trigger = default trigger ;
u8 led index , bool <unk> , bool <unk> )
if ( led - > dev )
ff af queue init ( avctx , & s - > afq ) ;
if ( avctx - > sample rate ! = NUMLITERAL ) {
if ( avctx - > channels ! = NUMLITERAL ) {
avctx - > frame size = NUMLITERAL ;
amr context * s = avctx - > priv data ;
static void print tracking ( struct kmem <END_BUG> & null , ;
if ( ! ( s - > flags & group <unk> - > flags ; do i super ; ;
unsigned long pr time = jiffies | ( jiffies - > <unk> - ( do force force ; } ; } ; } ;
print track ( " STRINGLITERAL " , get track ( ) , ; * struct struct if ; ; struct struct struct ; ; struct sb ;
print track ( " STRINGLITERAL " , get track ( s , ; ) skb ) > block struct sb ;
result = do dax fault ( vma g - NUMLITERAL g get g STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL - get ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( vma fs ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( vma fs STRINGLITERAL
if ( vmf - > flags & fault flag <unk> )
if ( vmf - > flags & fault flag <unk> ) {
file update time ( vma - > vm file ) ;
get block t get block )
" STRINGLITERAL " , g callback ( gtk widget destroy ) ,
" STRINGLITERAL " , g callback ( gtk widget destroy ) ,
g callback ( load filename ) ;
fs = gtk file selection new ( " STRINGLITERAL " ) ;
g signal connect swapped (
return ip fragment ( skb , ip fault * NUMLITERAL ; ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( skb is gso ( skb , null ; ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( skb dst ( skb ) ) {
return ip finish output2 ( skb , null ) ;
if ( skb - > len > = ip skb dst mtu )
int tcs id , bool <unk> )
if ( tcs - > mask & ( skb ) skb )
return tcs - > req [ tcs id - ( skb - skb fault ; ( unsigned long ; ( ( void STRINGLITERAL * ; ( ( callback ; ( ( callback ; ( ( callback ; ( ( callback ; ( ( callback ; ( ( callback ; ( ( callback ; ( ( callback ; ( fs & ( callback ; ( ( callback ; ( callback ; ( callback ; ( callback | ( ( callback | ( ( ( ( ( ( ( ( ( ( ( callback ] ] ] ] ] ] ] ]
tcs = & drv - > tcs [ i ] ( & return return , ( callback ; fs ] ; fs ; ( g err ; fs + ( callback ; fs + ( callback ; fs + ( callback ; fs | ( ( ( ( ( callback ; fs | fs ( ( callback ; fs | ( ( ( ( ( ( ( ( callback ; ; fs | fs ( ( callback ; fs | ( ( ( ( ( ( ( ( callback ; fs | fs ( ( ( callback ; fs |
static const struct tcs request * get req from tcs ( if - > , struct t , block block flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
return s - > s3 - > <END_BUG> print void print void struct * <unk> if dst dst new if if if struct - > = = NUMLITERAL struct sizeof , null struct NUMLITERAL struct NUMLITERAL struct sizeof , max <unk> struct cred struct cred struct struct cred struct struct fault struct struct fault struct struct fault struct fault struct struct fault struct fault struct fault struct fault struct struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct fault struct
static const ssl cipher * ssl get pending , ;
} - > s3 - > s3 - > new max = null struct ( void )
return s - > s3 - > tmp . new , s - > ! ! s if - ;
kmem cache free ( ssl cache , ssl cache ) - NUMLITERAL - object return
struct sock * nsk = sk clone lock ( , return gfp - > ( false ) ) child * gfp * gfp * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * ) * ) * ) * ) * NUMLITERAL * NUMLITERAL * gfp * ) * ) * ) * NUMLITERAL * gfp * NUMLITERAL * ) * ) * ) * ) * ) * NUMLITERAL * gfp * NUMLITERAL *
if ( ! nsk | | ! nsk - > sk )
struct sock * mptcp sk clone lock ( const struct sock * , )
if ( nsk - > sk family = = af inet6 )
return <unk> sk <unk> ( sk ) ;
return kernel standard l ( x , x , NUMLITERAL ) ;
return kernel standard l ( x , x , NUMLITERAL ) ;
return kernel standard l ( x , x , NUMLITERAL ) ;
kfree <unk> ( fe invalid ) ;
if ( x < NUMLITERAL | | x > = NUMLITERAL )
if ( is encrypted ch ( inode ) | | is <unk> )
if ( ret < NUMLITERAL | | ret > = NUMLITERAL )
return ext4 fscrypt zeroout range ( inode , lblk , pblk , len priv ) ;
ext4 lblk t len , unsigned int <unk> )
ext4 <unk> zeroout ( inode , pblk , pblk , len ) ;
nouveau gpuobj ref ( & priv - > vbios ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL child , bdrv <unk> <unk> ;
nouveau instmem destroy ( & priv - > <unk> ) ;
nouveau gpuobj ref ( & priv - > ramht ) ;
nouveau gpuobj ref ( & priv - > ramfc ) ;
nouveau gpuobj ref ( & priv - > ramro ) ;
if ( refcount read ( & bs - > in flight ) ( break & & * ptr ( * ptr ( * ptr ( * ptr ( * ptr ( * ptr ( * ( port & , and * ( - info ( ( port ( - ptr ( ( port ( > " " ( ( info ( ( port ( > " " ( ( info ( ( port ( > " " ( ( info ( ( port ( > " " ( ( info ( > info ( - info ( ( info (
if ( bdrv drain poll ( child , recursive , child , false ) ( * ptr ( * ptr ( * ( port ( port ( port ( port ( port ( - ptr ( * > " ptr ( " " ( ( port ( port ( * ( port ( > " " ( * ( * ( - ptr ( * ( * ( " > " ( port ( port ( port ( port ( - ptr ( * > " " ( * ( - ptr ( * ( * ( * ( "
if ( recursive & & child - > children & & child - > children ) {
if ( bdrv parent drained poll ( blk , ignore parent , ignore bds parents ) ) {
bdrv child * child , * next , * * <unk> ;
avail = smd read avail ( info - > ch ) ;
tty flip buffer push ( tty , tty ) ;
static void smd tty notify ( void * priv , unsigned int event )
struct smd tty info * info = tty port tty ( info - > port ) ;
if ( tty port throttled ( tty throttled , & tty - > flags ) )
static zend string * phar resolve path path )
return phar find in include path ( ) , ( id ( * ( " , ( " , ( ( " , ( ( " , ( ( " , ( ( " , ( " " ; debug ; sample ; sample ; sample ; " , & & & & & & & & & & ( & ( & ( ( ( ( ( ( ( ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL , & ( NUMLITERAL
} ( & phar - > } , null ;
return phar find in include path ( ( char * event ( ; ( mask ; ( " , ( ( " , ( ( " , ( ( " , ( " = ( ( " , debug = debug = debug = debug = debug = debug = debug = debug = debug = debug = debug = debug = debug = debug = debug ; debug ; ;
zend string free ( ( void * ) null , null state <unk> gfp )
freezable schedule timeout killable ( * gfp debug ; ( ( ( unsigned long " " " " " " " " " " " " " " " " " , db " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " family " STRINGLITERAL " family " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " family " , res " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " family " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " family " , res " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
if ( * timeout > nfs4 poll retry max )
if ( * timeout < NUMLITERAL | | * timeout return mask & & ( ( ( ( ( ( ( unsigned char " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
* timeout = nfs4 poll retry max ( * timeout ) )
static int nfs4 delay ( struct rpc clnt * clnt , long ( struct <END_BUG> stack ( sizeof ( ( ( get res ( ( sizeof ( ( ( ( get res ( ( sizeof ( ( ( ( get res ( ( sizeof ( ( ( sizeof ( ( ( sizeof ( ( ( ( sizeof ( ( ( sizeof ( ( sizeof ( ( ( ( ( ( ( sizeof ( ( sizeof ( ( ( ( ( ( ( sizeof ( ( sizeof ( ( ( ( ( ( ( sizeof ( ( ( ( ( sizeof
hrt sleep ( ) ;
sh css fifo snd ( unsigned int <unk> ;
while ( ! can event send token ( str2mipi timeout = = return err ) )
event send token ( str2mipi event id , token , null ;
return <unk> css snd sh ( str2mipi event id , str2mipi timeout = = NUMLITERAL ) sample sample ( ) sample NUMLITERAL sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample )
if ( gfp mask & & ; ;
if ( ! gfp mask | | ! gfp atomic )
gfp mask = memalloc noio flags ( gfp mask | ; ;
static void lockdep trace alloc ( gfp t gfp mask , unsigned long value )
if ( ! ( gfp mask & gfp atomic ) )
static void database increment ( const char * key )
if ( ! strlen ( db family ) )
if ( res )
char value [ NUMLITERAL + ast <unk> <unk> ] ;
if ( option verbose > NUMLITERAL | | option > = NUMLITERAL )
g free ( sample . user put STRINGLITERAL put ) , " STRINGLITERAL " ) ,
g free ( sample . user stack . data ) ;
static int <unk> unwind thread ( struct work * thread )
if ( test arch unwind sample ( & sample , thread , null ) ) return
unsigned long cnt = NUMLITERAL ;
if ( ts - > suspended & NUMLITERAL ; )
ts - > suspended = & ts - > <unk> ( ; g bytes ) ) ) - > <unk> attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr ( & ) attr attr attr , & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( = event ;
static <unk> unused int tsc2005 tsc2005 resume ( struct , = timer qemu dev ) ) ) - NUMLITERAL - & <unk> <unk> - NUMLITERAL attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr
down write ( & ts - > sem ) ( NUMLITERAL ; ; + NUMLITERAL ) ) ) - NUMLITERAL - NUMLITERAL - & ctx - > <unk> - NUMLITERAL - NUMLITERAL ;
spin unlock ( & ts - > sem ) ;
static void <unk> set hdr multiplier ( struct pipe ctx * pipe ctx )
if ( pipe ctx - > plane state - > sdr white level > NUMLITERAL )
convert to custom float format ( multiplier , & fmt , & hw mult ) ;
struct custom float format fmt = { } ;
u32 hw mult = HEXLITERAL ;
pthread cancel ( & pvt - > tag ;
if ( ! pvt - > streamstate )
pvt - > streamstate = null ;
pthread join ( pvt - > thread , null ;
pthread kill ( & pvt - > thread , sigurg ;
int parse events add breakpoint ( const struct list head * list , int * idx ,
char name [ max name len + max name len ] ;
return add event ( list , idx , & attr , name ) ;
void * ptr , char * type , const char * * <unk> )
if ( attr . bp type & & attr . bp type = = hw breakpoint x )
static struct page * zcache evict eph ( void ( void * . - part ( void type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
refcount dec return ( & zcache eph pageframes atomic ) ;
if ( ! page )
struct page * page = null ;
unsigned int zsize = NUMLITERAL , zpages = NUMLITERAL ;
pty char driver * s = chr of ( ( ( ( ( - ( opaque ; > = ptr - type ) )
qemu mutex lock ( & chr - > ;
qemu mutex unlock ( & chr - > chr <END_BUG> page page ) ) ) ;
g source remove ( s - > timer tag ) ;
if ( s - > timer & & s - > , atomic read ( ( ( - > name ( * * * * * * * * * name ( ( unsigned long ( a ( force force ( force force ( a ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static char * ch7xxx get id ( u8 pci * <unk> ;
if ( ch7xxx ids [ i ] . vid = = = = ] ]
return ch7xxx ids [ i ] - > name ;
for ( i = NUMLITERAL ; i < array size ( ch7xxx pp ) ) ( ) - ) - [ & ) - [ <unk> packet size ( ) - ) ( ) =
int i = NUMLITERAL ;
x log rel desc * res , * * errp ;
return ( res ) ;
xl remove hash entry ( & res , NUMLITERAL ) ;
return ( xlrelarr [ xlast ] . more . rd ) ;
xl new reldesc ( void )
static void dra7xx pcie host init ( struct )
dra7xx pcie enable interrupts ( dra7xx , null ) ; ; ( [ [ <unk
dw pcie setup rc ( pp ) ;
dw pcie wait for link ( pci , null ) ;
dw pcie msi init ( pp , null ) ;
sdhci common unrealize ( s , & channel <END_BUG> ) ; ) ) ;
sdhci state * s = pci sdhci ( ast <unk> ( ast <unk> ( pci ) ) ) ; ; ( & error [ & error ) ) ; ; ; ; ; ( & error ) ( ;
static void pci exit ( pci device * dev )
sdhci uninitfn ( s , null ) ;
} on ( ! pci get drvdata ( dev ) )
serio continue rx ( & psmouse - > ps2dev . serio ) ;
static void alps flush packet ( struct net * net , unsigned long data )
alps process packet ( & init net , psmouse ) ;
if ( test bit ( NUMLITERAL , & psmouse - > packet [ NUMLITERAL ] |
serio pause rx ( & psmouse - > ps2dev . serio ) ;
return dial exec full ( chan , . . . . . struct data ; ] [ NUMLITERAL ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int dial exec ( struct ast < * * * ]
struct ast flags * peerflags ;
memset ( & peerflags , NUMLITERAL , sizeof ( * . ) ( port ) ) [ sizeof : sizeof : { NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} , null ( & chan - > } ) ; ;
iio free device ( & init net , idev ) ;
static int <unk> ad5930 probe ( struct spi device * spi )
if ( ! idev ) {
st - > sdev = spi ;
spin lock init ( & st - > lock ) ;
if ( ! minor | | ! minor * ( ( unsigned long , ( ; size err err err err err err err err err err err err err err err err err ) ) ) )
idr replace ( & drm minors idr , null base base base base base base base err = = ;
drm sysfs device remove ( & minor - > device , minor , null , null , null err err err err err err err err err err err err err err err err err err err err err ) = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
void drm minor unregister ( struct drm device * dev , unsigned int get , error * * errp , , ;
minor = * drm minor get slot ( dev , type , null , null , null , null , null , null err err err err err err err err err err err err err err err err err err err err err err err err ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
end sec = pfn to section nr ( free error - & st error int spi - & & st - > <unk> spi spi spi ;
int ref add pages ( struct zone * zone iio goto - > > > : : : : : : : : - free > & st - part > NUMLITERAL iio
if ( err ! = - eexist & & err ! = - } spi spi )
err = add section ( zone , i < < pfn section shift spi - NUMLITERAL spi <unk> spi shift spi spi spi spi ;
int start sec , end sec , end sec ;
for ( devid = NUMLITERAL ; devid < type cleanup ; & & & minor ( clk ( rate clk clk clk clk clk clk = i = = int = end = i = = ; = sec = i = = ; = sec = i = = ; = sec = i = = ; = ; = ; sec ; = end = i = = ; = sec = = ;
set dev entry bit ( devid , dev entry int ( ) ( ) ( ) clk clk clk clk clk clk clk clk clk clk clk clk = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL =
set dev entry bit ( devid , dev entry translation , null ( ) ( ) ( ) clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk = = NUMLITERAL = NUMLITERAL ( = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL =
static void init device table ( void )
u32 <unk> ;
static void init ap init timer ( void ( struct pt regs * regs ( , iio t * regs = null = null = null = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
integrator clocksource init ( rate , ( void iomem nr nr ( unsigned int ( unsigned int ( unsigned long ( iio = iio = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = goto <unk> = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
clk = clk get sys ( " STRINGLITERAL " , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) spi spi spi struct <unk> struct <unk> spi struct ( " = null > NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL spi NUMLITERAL spi ( " = null > NUMLITERAL = null > NUMLITERAL = = null = null > NUMLITERAL = = null = null > NUMLITERAL = = null = null > NUMLITERAL = = null = null = null > NUMLITERAL = = null = null > NUMLITERAL =
writel ( NUMLITERAL , timer2 va base + timer ctrl ) ;
integrator clockevent init ( rate , ( void iomem * ) timer1 va pfn err
static <unk> unused int dwc2 dwc2 void void void dwc2 void void void - > unused minor - , unused minor * base ;
ret = s3c hsotg resume ( dwc2 , null ( dwc2 ( dwc2 drm <unk> drm drm drm drm drm drm drm drm ; ( + ( ( void va va ; ; ( + ; ( + ; ; ; ; * ) ) ) ) = = NUMLITERAL ) = = NUMLITERAL ) = NUMLITERAL )
int ret = NUMLITERAL ;
if ( dwc2 is device mode ( dwc2 , null ( dwc2 ( dwc2 ( dwc2 drm drm drm minor drm drm drm drm drm ; ( + ( ( void va va ; ; ( + ; ( + ; ( + ; ( + ; ; ; ; ; ; pages ) ) ) ) ) ) ) ) )
struct dwc2 hsotg * dwc2 = dev get drvdata ( dev , false ( entry ( , minor drm drm drm drm drm drm drm ) ; ( + & base - > <unk> ; base ; ( + NUMLITERAL ; ; ; ; ; +
if ( media entity type ( entity , media ent t devnode ) )
if ( media entity type ( first ) ! = media ent t devnode )
struct media entity graph graph ;
iss pipeline pm power one ( first , - change ) ;
media graph walk start ( & graph , entity , null ) ;
static void blk end sync rq ( struct request ptr ;
rq - > end io data = null ;
struct completion * waiting = rq - > end io data " inc * {
complete ( & waiting - > <unk> , & waiting - > <unk> ) ;
* complete last , if this is a process (
imx27 register device ( & visstrim m10 usbotg pdata media ) entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
imx27 add fec ( & visstrim m10 i2c devices ) ;
imx27 add devices ( platform devices , array size ( platform devices ) ) entity entity entity entity entity entity entity entity entity ( pm first ) entity entity entity entity entity entity ( pm first ) entity entity entity entity entity ( pm first ) entity entity entity entity entity ( pm first ) entity entity entity entity ( pm first ) entity entity entity entity ( pm first ) entity entity entity entity ( pm first ) entity entity entity entity ( pm first ) entity entity entity entity ( pm first ) entity entity entity entity (
imx27 add imx uart0 ( & uart pdata , null ) ;
imx27 err ( " STRINGLITERAL \n " , ret ) ;
extern int iscsit na dataout timeout retries (
if ( dataout timeout retries > na dataout timeout retries <END_BUG> i2c i2c i2c i2c & & ! <unk> entity ) {
struct iscsi node attrib * a = acl - > node attrib ;
u32 dataout timeout retries , u32 dataout timeout )
} else if ( dataout timeout retries < na dataout timeout retries min i2c i2c i2c & & ! <unk> entity ) {
static int mpsub probe ( const av probe data > NUMLITERAL timeout timeout ( )
if ( ! <unk> ( ptr , " STRINGLITERAL " ( " STRINGLITERAL ; " ; ; ; ; ; ; , = memcmp entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
if ( ! snprintf ( ptr , " STRINGLITERAL " , ;
const char * ptr end = p - > buf + p - a acl ( devices ; devices NUMLITERAL ;
const char * ptr = p - > buf . buf ;
if ( ! mpu )
static irqreturn t snd mpu401 uart interrupt tx ( <START_BUG> ;
uart interrupt tx ( & init net , mpu ) rq rq ( , ( unsigned long timeout timeout timeout timeout timeout ; ; entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
return irq <unk> ? : irq <unk> ;
struct snd mpu401 * mpu = dev id ;
tmp16 & = ~ ( drive - > dn | | } break - > <unk> ( vcpu ; vcpu reg ; ; ; , bit ; & & bit ;
if ( save mdma mode [ drive - > dn ] )
tmp16 | = ( NUMLITERAL < < drive - > dn ) ;
struct pci dev * dev = ide pci dev ( drive - > hwif ) tvb tvb ( vcpu ;
spin unlock irqrestore ( & ide <unk> lock , flags ) ;
if ( index > = vhost max nr virtqueue status & & ( ( ) ) ( & ( force ? ; ; ; ; virtqueue = + = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL
unsigned int enable = vmsg - > payload . num ;
vu panic ( dev , " STRINGLITERAL " , index ) ;
unsigned int index = vmsg - > payload . state . data ;
vu set vring enable exec ( vu dev * dev , vhost user msg unsigned
vcpu sys reg ( vcpu , pmevcntr0 el0 + i ) = reg ;
reg = vcpu sys reg ( vcpu , pmevcntr0 el0 + i ) ;
static void kvm pmu software increment ( struct kvm vcpu * vcpu , u64 val )
if ( ! reg | | ! reg & & vcpu - > flags & ( i ) )
kvm pmu overflow set ( vcpu , bit ( i ) ) ;
static int vmballoon send lock page ( struct <unk> < > spin * - page get get get get = null ( reg ( reg vcpu vcpu vcpu vcpu vcpu vcpu ( + vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( + vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( + vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( + vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( + vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( reg vcpu vcpu
stats - > stats . lock fail ( b , pfn ) ;
stats - > stats . lock ( b , pfn ) ;
unsigned long status , dummy = NUMLITERAL ;
if ( vmballoon check status ( b , status , null ) )
list add tail ( & lock - > l , - enable > - * < < break ;
static void ldlm resource add lock ( struct ldlm resource * , )
if ( lock & & lock - > l destroyed ) {
check res locked ( res , & lock ) ;
<unk> ( d error , " STRINGLITERAL \n " ) ;
get uint value ( tvbuff t * tvb , gint offset , gint length , gboolean sys if if vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu
value = little endian ? tvb get letohs ( tvb , offset , null )
value = NUMLITERAL ;
dissector assert not reached ( null , tvb , offset ) ;
value = little endian ? tvb get letohl ( tvb , offset , null )
at91sam926x pit reset ( & at91sam926x pit irq ) ( ; NUMLITERAL ;
static void init at91sam926x pit common init ( void )
pit clk . mask = clocksource mask ( bits , null ) ;
pit clkevt . cpumask = cpumask of ( NUMLITERAL , NUMLITERAL ) ;
ret = setup irq ( at91sam926x pit irq . irq , & at91sam926x pit irq ;
if ( unlikely ( is private ( & init net , ; ; ; ) ) ;
call ( call ops - > inode post setxattr ( dentry , , , , , value , , = error , & security - > & & & security ; flags ; flags ; flags ; flags ; flags ; flags ; flags ; flags ;
const void * value , size_t size , size_t size , unsigned int flags )
evm inode post setxattr ( dentry , name , value , size , size ) NUMLITERAL NUMLITERAL NUMLITERAL cur cur cur & & & ( & security ) cur block cur cur xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs
void security inode post setxattr ( struct work * dentry , const const char * , ,
void ber decode as ( const gchar ;
decode as syntax = g <unk> ( syntax , null ) , null , null ap * , , , syntax ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ; ; ; ; ; ; xfs ; xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs , , ,
if ( ( syntax & & decode as <unk> ) = = & <unk> )
g free ( decode as syntax , null ) ;
decode as syntax = null ;
xfs scrub btree set corrupt ( bs - > sc , cur , level ) ;
<unk> btree block check siblings (
error = xfs scrub btree block check sibling ( blk , level , NUMLITERAL , & leftsib ) ;
error = xfs scrub btree block check sibling ( blk , level , NUMLITERAL , & rightsib ) ;
if ( level = = cur - > bc nlevels - NUMLITERAL ) {
return policy - > governor - > show ( ; ; arg ap ( , ; ; ) )
if ( ! policy - > governor - > show , & ;
static ssize_t scaling setspeed ( struct cpufreq policy * policy , char * arg )
return <unk> ( buf , " STRINGLITERAL \n " , func ) = NUMLITERAL = NUMLITERAL value value ; ; ; ; ; ; ( policy ) ; ; ( , , , , level ;
} - > governor - > show setspeed ( policy - > governor , arg ) value value ( policy ) ; ( policy ) ; ( policy ) ; xfs error xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs
fcntl nocancel ( unsigned int fd , int cmd dentry dentry dentry dentry dentry dentry dentry ( int bits ; bs error ( error ; error ; error ;
return fcntl nocancel adjusted ( fd , cmd , arg ) ;
void * arg ;
arg = va arg ( ap , void * ) ;
va start ( ap , cmd , cmd ) ;
while ( refcount read ( & dev - > refcnt ) ) {
void w1 remove master device ( struct w1 master * dev )
if ( msleep interruptible ( dev ) )
dev - > <unk> . need exit = NUMLITERAL ;
dev - > name , refcount read ( & dev - > refcnt ) ;
for ( tt = NUMLITERAL ; tt < mlx5e num - > - > - > num skb ( * if ; * flow ; * ; flow ; flow ; flow ; flow ; flow ; flow ;
bool mlx5e any tunnel proto supported ( struct mlx5 core dev * msg ;
if ( mlx5e tunnel proto supported ( mdev , ttc tunnel rules [ tt ] ] > * <unk> ; * ; ; ;
int <unk> ;
return mlx5e tunnel <unk> <unk> ( mdev ) ;
return typec register altmode ( & plug | & ( ( plug { ) plug " STRINGLITERAL " = ) stream ( err stream stream , ; , gfp atomic , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
struct typec altmode desc * desc , * parent ) ) mlx5e mlx5e )
typec plug register altmode ( struct kern * * dev , , +
} on ( ! plug - > dev , plug | |
return typec register altmode ( & plug - > dev , desc ) <unk> mlx5e mlx5e ( err stream stream stream stream stream stream stream , ; , ; , ; the , ; , ; the , ; the , ; , ; the , ; the , ; , ; the , ; the , ; ,
static int snd dice stream init duplex ( struct snd dice * dice )
err = init stream ( dice , amdtp out stream , i ) ;
err = init stream ( dice , amdtp in stream , i ) ;
for ( i = NUMLITERAL ; i < max streams ; i + + ) {
for ( i = NUMLITERAL ; i < max streams ; i + + ) {
rcutorture shutdown absorb ( title , null ;
rcu stutter wait ( const char * title )
if ( rcutorture <unk> & & rcutorture <unk> )
while ( stutter pause ) {
schedule timeout interruptible ( & init net , NUMLITERAL ) ;
start = nla nest start ( skb , ovs flow attr actions , null ) ;
sf acts = rcu dereference ovsl ( flow - > sf acts ) ;
err = ovs nla put actions ( sf acts - > actions ,
struct sk buff * skb , int skb orig len , bool force )
static int ovs flow cmd fill actions ( struct sw flow * flow ,
int dr , reg , reg ;
exit qualification = vmcs read64 ( exit qualification , null ) ;
atomic inc ( & vcpu - > regs [ reg ] ) ;
vcpu load rsp rip ( vcpu , NUMLITERAL ) ;
if ( exit qualification & & ! <unk> <unk> ( vcpu ) ) {
rtmsg ifinfo ( rtm newlink , slave dev , iff s ) ) cpu cpu ) | pmd ( * ( * vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu
slave dev - > flags & = ~ iff <unk> <unk> ( s cpu cpu cpu cpu ) = the ;
netdev upper dev unlink ( slave dev , bond dev , & ) ( ) > NUMLITERAL | | ( exit ; exit > exit vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu NUMLITERAL NUMLITERAL vcpu NUMLITERAL vcpu vcpu NUMLITERAL NUMLITERAL NUMLITERAL = NUMLITERAL =
struct net device * slave dev , * tmp )
static void bond upper dev unlink ( struct net device * bond root -
prot sect kernel = pmd type sect | pmd val NUMLITERAL = * <unk> normal ( mt ! = mt <unk> dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = - einval dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = - einval dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( mt ! = mt <unk> dev dev dev dev
pgprot default = ( pte type page | pte af ) ;
unsigned long v = pgprot val ( protection map [ i ] ) ;
prot sect kernel | = pmd <unk> s ;
static void init mem pgprot ( void )
s - > root extended = s - > ( ) & <unk> i i ; ; ; ; t t t t rtt t t t t rtt t t t t t t t t t t t t t t t t t t t * ctx t t t t rtt t t t t rtt t t t t rtt t t t t t t rtt t t t t t t t t t t t t t t t t t t t t t t t t t t t t
static void vtd root table setup ( intel iommu state node node node ]
s - > root & = vtd rtaddr addr mask ( ) , cpu to )
s - > root = vtd get quad raw ( s , * * + + + { * { * { - NUMLITERAL * dmar + dmar - > - > ( ) * NUMLITERAL * sizeof net * cred * ) t t t t t t t t t t t t t t * * errp t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
trace vtd reg dmar root ( s - > root , s - > ( s default default exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit = val exit = val exit exit exit exit exit exit exit exit exit exit exit exit exit exit exit = = ( ( ( ( <END_BUG> exit & ( ( ( ( ( ( ( ( ( ( <END_BUG> exit exit exit exit * * * * * * *
struct net * net = dev net get drvdata ( sitn - > fb tunnel dev ) ;
unregister netdevice queue ( dev , head , head ) ;
for ( prio = NUMLITERAL ; prio < = NUMLITERAL ; prio + + ) {
if ( dev - > dev & & dev - > dev )
for ( h = NUMLITERAL ; h < = hash size ; h + + ) {
static void perf event init cpu ( int cpu ) ) ) ) ) ( struct ( if * * ) )
if ( swhash - > hlist refcount > NUMLITERAL | | default - > ) reg
struct swevent htable * swhash = & per cpu ( swevent [ ) ) [ vcpu ] ( { > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
spin unlock ( & swhash - > hlist lock ) ;
mutex lock ( & swhash - > hlist mutex ) ;
static int sys get curr temp ( struct thermal zone device * tzd work ) ( work ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( eax & & eax & & eax & & eax & & delayed ) &
rdmsr on cpu ( phy dev entry - > first cpu , msr ia32 package status work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work
struct phy dev entry * phy dev entry , * tmp ;
pr debug ( " STRINGLITERAL \n " , func ) ;
static int l2cap validate bredr ( u16 psm , int <unk> )
if ( ( psm & HEXLITERAL ) ! = HEXLITERAL )
if ( psm < HEXLITERAL & & ! <unk> ( cap br print <END_BUG> ( cpu = = - net ) container ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return - <unk> ;
return - <unk> ;
return methods <unk> ;
const bio method * bio s file ( void )
} const ( bio method & & methods filep ) void
{ return ( methods filep ) ; }
bio ref ( & methods - > state ) & & ! < NUMLITERAL print ( ;
is plugged = power supply am i supplied ( & adc bat - > psy ) ;
power supply changed ( adc bat - > psy ) ;
adc bat - > status = power supply status not charging ;
adc bat - > status = power supply status <unk> ;
adc bat - > cable plugged = is plugged ( is plugged ( adc bat ) ) ;
if ( <unk> ( refcount read ( & qsp = qsp jiffies - part ( ( ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static inline void qsp init ( void )
qsp init slowpath ( & qsp - > <unk> ) & & ! > = > NUMLITERAL * NUMLITERAL * sizeof ;
return <unk> get drvdata ( ) - > <unk> - > data . data )
} on ( ! qsp init slowpath ( ) ) ;
static void print stats ( struct blkif info * blkif )
blkif - > st oo req = NUMLITERAL ;
blkif - > st rd req = NUMLITERAL ;
blkif - > st wr req = NUMLITERAL ;
pr debug ( " STRINGLITERAL \n " ,
if ( ! cpu isset ( cpu , iucv link cpumask ( ( void ( = = ) ast ) ast ) ast <unk> ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ast ( ( ( ( void x ( ( force force ( ast <unk> ( ast ast ast ast ast ast ast ast ast } ( ( force force force ( force ast <unk> ( ast )
cpu clear ( cpu , iucv buffer cpumask ) ;
iucv block cpu ( & init net , null ) ;
parm = percpu ptr ( iucv param , cpu ) ;
int cpu = smp processor id ( ) ;
if ( ! as - > chan - > softhangup & & ! as - > chan - > <unk> ) {
chan = ast waitfor n ( mons , x , & ms ) ;
ast mutex lock ( & autolock ) ;
if ( x < max automons )
ast mutex unlock ( & autolock ) ;
dial - > callid = ast read threadstorage callid )
ast debug ( NUMLITERAL , " STRINGLITERAL \n " ) = ( - ( - ( enum - > dev & ( - ( - ( enum - part | ( - ; | ast <unk> <unk> ast ; - NUMLITERAL ast ast ; ast ; ast ; ast ; ast ; ast ; ast ;
ast debug ( NUMLITERAL , " STRINGLITERAL \n " ) = ( - ( - ( enum - > dev & ( - ( enum - part | ( - ( - ( ; ; - ( ; - part ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ; ast ;
if ( ! begin dial ( dial , chan , null ) ast <unk> ast ;
if ( async & & async ) {
return chan - > cfg . addr ? : null buffer buffer buffer buffer buffer link link link link link link link link link link link link link link link link link link link link link link link link link link link link link result result result result result result result result result result result result result result result result result result result result result result result * errp * errp * errp * ctx * : null * : null * : * : ( void = null * } * } * } * } * } *
dma addr t hpb dmae slave addr ( struct buff * dev ) ) ) = = & - - - - - - - - - - - - - - - - - - - - - - - - - - - ! chan chan )
struct hpb dmae chan * chan = to chan ( schan , null ) ) ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ) result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
} - > state = null ;
struct hpb dmae chan * chan = to chan ( schan > cpumask , ( ( param , cpumask , cpumask , cpumask , schan = = msr = = msr = = msr = = msr = = msr = = msr = = msr = = msr = = msr = = msr = = chan ) ) result ) result
read nic byte ( dev , msr , msr ( msr ( msr ( msr ( msr
write nic byte ( dev , msr , msr2 , msr return msr return msr ( msr ( msr ( msr ( msr ) ) ) ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
write nic byte ( dev , msr , msr , msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( ; ; ; ) ) ) ) ) ) ) ) = = NUMLITERAL ) = NUMLITERAL =
static void rtl8192 beacon stop ( struct net device * { ( debug create chan chan ( debug ( debug create ( debug ( debug create chan ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ) ) ) ) ) ) ) ) ) ) )
msrm = rtl8192 msr & ( msr link mask | msr <unk> <unk> ( ( force force force ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ( msr ) ) ) ) ) ) ) ) ) ) ) ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
static void e1000 consume page ( struct work * dev * = struct > struct - > - gfp - gfp - gfp ! = NUMLITERAL } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } x
bi - > page page = null ;
skb - > data len + = length ;
skb - > len + = length | ( length & ~ list | rx <unk> | <unk> <unk> <unk> | <unk> <unk> | ;
u16 length , bool <unk> )
struct mt76 queue * q = dev )
int i , err = NUMLITERAL ;
q - > queued = null ;
q - > head = & q - > tail ;
static int mt76u submit rx buffers ( struct mt76 dev * , : bool <unk> ]
cl = mei cl alloc linked ( dev , mei int bad bad id any ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( dev - > dev state ! = mei ) {
mei dev state str ( & dev - > dev state ) ;
return nonseekable open ( inode , file , & file - > device ) ( seq ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) NUMLITERAL ) ) ) ) ) ) ) ) NUMLITERAL ) ) ) ) ) NUMLITERAL ) ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL
spin lock ( & dev - > device lock ) ;
unsigned int plain plain [ NUMLITERAL ] ;
int * direction , u32 * seqnum )
return ( s32 ) kg bad seq ( kctx , NUMLITERAL ) ;
* seqnum = ( ( struct device * net ) ) |
pr debug ( " STRINGLITERAL \n " , func ) ;
blkfront connect ( info , info ) ;
struct blkfront info * info = dev - > dev cdev . container ;
if ( ! bd )
if ( info - > users < NUMLITERAL )
dev dbg ( dev - > dev , " STRINGLITERAL \n " ( device
g free ( rcb ) ;
<unk> report ( " STRINGLITERAL " ) , addr set ;
rcb - > ret = rbd aio get true ( ) - > dev )
<unk> aio release ( c , c ) ;
if ( ret < NUMLITERAL ) {
f2fs wait on page writeback ( ipage - > <END_BUG> ) - NUMLITERAL - <START_BUG> - > \n page , <END_BUG> ) ,
clear inode flag ( inode , fi data exist - NUMLITERAL ( dev ( ) dev dev dev dev dev dev dev dev dev ) ) , > NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL , > NUMLITERAL = NUMLITERAL , , NUMLITERAL ,
if ( from = = NUMLITERAL | | from > = flags & & )
addr = inline data addr ( inode , ipage ) = dev = " STRINGLITERAL " - NUMLITERAL - = <unk> - > <unk> - NUMLITERAL - NUMLITERAL - = = = NUMLITERAL - NUMLITERAL - = - einval - NUMLITERAL - = - einval , , <END_BUG> , null , null , null , null , null , null , null , null , null , )
void * addr ;
if ( rka - > cred & & print - > <unk> ;
rka - > cred - > cred cred , cpufreq - > cred - > } {
struct request key auth * rka = key - > current print , <END_BUG> ( ( void if > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int > int - > = int ) sg ) sg sg sg sg sg sg sg - int sg sg
put device ( & rka - > cred ) ;
pr debug ( " STRINGLITERAL " , key - > serial ) ;
sg = drm prime pages to sg ( obj - > pages , npages , null ) ;
ret = i915 gem object get pages gtt ( obj , gfp atomic ) ;
if ( ! obj - > pages | | ! obj - > pages ) {
struct sg table * i915 gem map dma buf ( struct dma buf attachment * attachment ,
int npages = obj - > base . base . size / page size ;
return gdb first attached cpu ( s , s ) ;
process = gdb get process ( s , pid , null ) ;
process = gdb get cpu process ( s , cpu , null ) ;
if ( ! pid & & ! ( tid ) ) {
if ( pid ! = pid ) {
static void dwc2 hsotg core disconnect ( struct - - - - - - ( { device } = pages - NUMLITERAL - part - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - ;
dwc2 set bit ( hsotg , dctl , ;
} on ( ! dwc2 hsotg get drvdata ( hsotg ( key ( key , STRINGLITERAL ( ( force force force - part - > node - > node - > node - > parent - > parent - > parent - > dev - > dev - > dev - > dev - > dev - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part - > dev -
dwc2 set bit ( hsotg , dctl , dctl sftdiscon ) ;
dwc2 set bit ( hsotg , dctl , dctl sftdiscon ) ;
static int print once ;
if ( ! print once | | ! print once ) s
return <unk> ( buf , " STRINGLITERAL \n " , max sampling rate ;
print once = NUMLITERAL ;
static ssize_t sampling rate max ( struct cpufreq policy * policy , char * null ;
return register pernet device ( & icmp sk bit ) ) ) ) - > buf ( ) ) sg sg ;
int init icmp init ( void )
} on ( icmp sk ops ) ;
return register pernet device ( & icmp sk ops ) ; sk ( ( key " STRINGLITERAL null )
icmp set <unk> <unk> ( & icmp sk device ) ) ( ( ( key " STRINGLITERAL " )
if ( warn on ( retries - - < NUMLITERAL ,
struct musb * musb = ep - > musb ;
void iomem * epio = ep - > regs ;
void musb h tx flush fifo ( struct musb hw ep * * * * * > * > )
int retries = NUMLITERAL , * tmp ;
const char * pevent data comm from pid ( struct tep handle * ( struct handle * * * * * ( int ; int ; - ; - ; - flags - NUMLITERAL - - - - - - - - - - - - - - cred - num )
comm = find cmdline ( & pid - > <unk> , wait ) ;
const char * comm ;
return ( comm - > flags & <unk> <unk> <unk> ) ;
} = }
for ( i = NUMLITERAL ; i < wbt num full full <START_BUG> ( NUMLITERAL ; ( socket sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
if ( <unk> <unk> ( & rqw - > wait ) = = NUMLITERAL ;
void rq rwb wake all ( struct rq wb * rwb )
wake up all ( & rqw - > wait ) ;
struct rq wait * rqw = rwb - > rq wait [ ; + gfp atomic | ;
static void svc tcp listen data ready ( struct sock * sk )
pr info ( " STRINGLITERAL \n " , sk ) ;
wq = sk sleep ( sk , sk - > sk xprt ) ;
set bit ( xpt conn , & svsk - > sk xprt . xpt flags ) ;
svc xprt enqueue ( & svsk - > sk xprt , null ) ;
power supply changed ( bat - > psy ) ;
bat - > status = power supply status <unk> ;
da9052 bat check status ( bat , null , null ) ;
irq - = <unk> - > <unk> - > <unk> ;
static irqreturn t da9052 bat irq ( int irq , void * NUMLITERAL )
refcount set ( & cmd - > rsp status , qlc NUMLITERAL xx ( - socket ) - socket wq - socket - > ( - ebusy - sk - sk - sk - sk - sk - sk - sk - sk - sk - sk - > { count - socket wq - socket wq - socket wq - socket wq - socket wq - socket wq - part - > ( - ebusy - > ( - ebusy - sk - sk - sk - sk - sk - > ( - socket - sk - >
* timeout = cmd - > total cmds * qlc mbx timeout ;
init completion ( & cmd - > completion ) ;
unsigned long * timeout , unsigned int <unk> )
if ( test bit ( qlc xx mbx ready , & mbx - > status - sk - sk - sk - > <unk> - sk - > data - sk - > data - sizeof , socket - > STRINGLITERAL " - sk - > data - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - socket - > ( ( ( void > socket - sk - sk - sk - sk - sk - sk - sk - sk - > STRINGLITERAL regs - sk - > STRINGLITERAL " - sk - >
int dialect attribute unused ,
return insn | ( ( value & HEXLITERAL ) * int ) & & ( > state mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu
const char * * errmsg , const void * * <unk> )
* errmsg = ( " STRINGLITERAL " ) ;
insert ram ( unsigned int <unk> unused ,
static void numa set cpumask ( int cpu , state sizeof ( state ) )
if ( ! node to cpumask map ) {
mask = node to cpumask map ( node , node ) data data data data = = NUMLITERAL ( mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu
pr err ( " STRINGLITERAL \n " ) ;
dump stack stack ( ) ;
blk mq end request ( req , error , error ) ;
if ( req - > cmd type = = req type drv priv )
if ( unlikely ( req - > <unk> & & req - > errors ) ) {
if ( unlikely ( iod - > aborted & & iod - > <unk> ) ) {
if ( nvme req needs retry ( req , req - > errors ) ) {
curl digest cleanup ( data , null ) ;
curl free request state ( data , null ) ;
( void ) curl init userdefined ( data , null ) ;
data - > state . state = NUMLITERAL ;
data - > progress . progress . flags | = pgrs <unk> | pgrs <unk> )
tegra init clock ( ) ;
tegra clk init from table ( common clk init value * NUMLITERAL ; ;
static void init tegra common init ( void )
tegra dma init ( ) ;
tegra init cache ( ) ;
err = mlx5e update priv params ( priv , & priv - > params ) req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
if ( new mtu > max mtu | | new mtu < mlx5e params min mtu - NUMLITERAL - - - - - - - - - - - cred - ' - > num ( - einval - - - - - ) - NUMLITERAL - - - - - - - - - - - - - - if - part - > * * if - NUMLITERAL - if - part - > * * * * * * * * * * if - > * <unk> - > * * <unk> - NUMLITERAL - if
err = mlx5 query port max mtu ( mdev , & max mtu , null ) ;
int mlx5e change mtu ( struct net device * netdev , int new mtu )
int max mtu = NUMLITERAL ;
if ( ! p eeprom - > bautoload fail fail ( = = = = = print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) ( print ) (
if ( ! p eeprom - > eeprom or efuse | | p eeprom proto > = NUMLITERAL ( ( unsigned long ( , print ( if - > ) ( ( force force force - part ( ( force force force - part ( ( if ( if - > ) ( ( force force force if ( , , , , , , , p ( if - > ) ( ( if force force - part ( ( if ( force force force if ( if - > ) ( ( if force force - part (
if ( ! p eeprom - > eeprom or efuse )
efuse shadowmapupdate ( padapter , efuse wifi , false ) ;
efuse shadowmapupdate ( padapter , efuse wifi , false ) ;
if ( xflag & & caplen > hdr - > <unk> )
pppoe if print ( const u char * user , const struct pcap pkthdr * h ,
register const u char * p , error * * errp )
u int hdr len ;
ts print ( & h - > ts , null ) ;
return filter list [ NUMLITERAL ] ;
for ( i = NUMLITERAL ; i < size ; + cmd cmd ) filename
for ( i = NUMLITERAL ; i < size ; + cmd cmd ) filename
if ( filter list [ i ] . id = = wait ;
return filter list [ i ] . id ;
if ( tvb <unk> <unk> ( tvb ) to - > <unk> )
if ( match strval ( type id , cdf type vals ) = = null u or )
return tvb <unk> <unk> ( tvb , NUMLITERAL , tvb , NUMLITERAL ) ;
enip tree = proto item add subtree ( ti , ett enip , null ) * NUMLITERAL * NUMLITERAL * sizeof ( struct the ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( - einval ) *
if ( ! is col ( pinfo - > cinfo , col protocol ) )
int vnic dev init ( struct vnic dev } } , { unsigned int b tree tree tree tree tree tree tree tree tree tree , u * * errp , u message t * * errp , u message t int , , * * null , u message t * * * errp , check message t len ,
if ( a0 & cmd initf default mac & & ! <unk> bpf <unk> <END_BUG> max tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree , + + + , + + , + + , + + , + + , + + , + + ,
vnic dev cmd cmd ( vdev , cmd mac addr ; ( a0 ; ) ) false ) tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree , , , p , p , p , p , p , p
if ( vdev - > cap flags & vnic dev debug object )
vnic dev cmd ( vdev , cmd init v1 , & a0 , if ) ) ) ) ) tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree
<unk> free ( obj buf ) ;
err = llvm compile bpf ( filename , & obj * , , , ; return ; return ;
static bool libbpf initialized = NUMLITERAL ;
obj = bpf object open buffer ( obj buf , obj buf sz , tree tree tree tree tree tree , filename ) ;
void * obj buf = null ;
fd = get unused fd ( & init net , xfs / + count count count , mode , mode , mode , null , null , null , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , null , mode , mode , mode , mode
if ( fd > = NUMLITERAL ) {
int fd = ptr err ( * tmp ) ( * " ) ; ; ; ; ; ; ; ;
struct file * f = do filp open ( dp = * * " count ( if count , context ( context ( context , context ( flags , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode , mode
fd install ( fd , f , null , f xfs bp <unk> xfs count count count count , mode , null , mode ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
<unk> leafn lasthash (
if ( ! leafhdr . count )
struct d dir2 leaf * leaf = bp - > str addr , bp , bp ;
int * count , bool <unk> )
return be32 to cpu ( & ents . count ) , ;
if ( iter count & & samples count & & samples , null ) {
cycles = cycles count / branch count ;
u64 samples count , u32 <unk> )
if ( ( cycles & & iter count ) ) {
int printed = NUMLITERAL , i = NUMLITERAL ;
vacuum ( & vacstmt , relids , bstrategy , for wraparound ) ;
int freeze min age , bool for wraparound ,
old cxt = memory context switch to ( autovac mem cxt , null ) ;
autovac report activity ( & vacstmt , relid , null , null ) ;
mem set ( & vacstmt , NUMLITERAL , sizeof ( vacstmt ) ) ;
reserve early ( start , end , name ;
void init reserve early ( u64 start , u64 cur ( } ; . char ; int u64 " " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
drop overlaps that are ok ( start , end ;
if ( start > = end )
check double early res ( end ) ;
c = <unk> ( cur - > callid , & ) ;
for ( cur = NUMLITERAL ; cur = iflist ( fd struct * ( . <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( + + which ) {
ast mutex lock ( & iflock ) ;
int wordlen = strlen ( word - > callid ;
sr = tcg temp new ( error ( , tcg , tcg ) ) tty ;
l1 = gen new label ( & init net ( * tc , which - > struct ( > . struct > . struct list ( ( force force force ( > . - part ( ( > . - part ( ( int ( ( force force ( > . - part ( ( > . - part ( ( ( int ( ( int ( > . - part ( ( > . - part - > struct ( = > . struct list ( ( int ( ( force force STRINGLITERAL STRINGLITERAL * ( > . <unk>
gen goto tb ( ctx , NUMLITERAL , ift , null , null ) tty tty lock ( ( ;
tcg temp free ( l1 ) ;
tcg temp free sr ;
if ( result = = ~ ;
static int <unk> ( struct xhci hcd goto goto gen gen gen , , , * be * pdev )
} while ( ( usec < = NUMLITERAL ( ( unsigned long * * * ( the ( , . <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u32 mask , u32 done , int usec )
if ( result = = done | | result = )
unsigned int curl ultouc ( struct work list * unused ;
return ( unsigned int ) ulnum & ( , , , , gen ) ; > struct struct work
} = } & & ( unsigned long ( , , , gen ) " STRINGLITERAL " tty tty ;
{ return ( unsigned int ) ( ulnum & HEXLITERAL ( , gen ) ) ; ; ;
return ( unsigned int ) ulnum & HEXLITERAL ;
check predicate ( expr * <unk> , <unk> <unk> * <unk> tty tty ;
if ( contain mutable functions ( ( node * ) * * * ) )
if ( contain subplans ( ( node * ) predicate ) )
if ( contain agg clause ( ( node * ) predicate ) tty <START_BUG> tty ;
ereport ( error ,
ser dev - > id . type = serio ps psthru ;
static int <unk> mouse probe ( struct platform device * pdev , error * * errp )
if ( ! ser dev | | ! ser dev )
ser dev - > stop = ps2 <unk> ;
ser dev - > start = ps2 <unk> ;
tty = hvcsd - > port . tty ;
tty port put ( & hvcsd - > port ) ;
pr info ( " STRINGLITERAL "
static int <unk> hvcs remove ( struct vio dev * dev )
if ( tty & & tty )
static void init insert increment ( u16 rn , int standby , int assigned )
prev = sclp mem list ;
new incr = kzalloc ( sizeof ( * new incr ) , gfp atomic ) ;
list for each entry ( incr , & sclp mem list , list ) {
list add ( & new incr - > list , prev ) ;
static int init dataplane ( const char mark mark mark mark mark * * ( phy ( , , , , , , , , , hw str str ( ( hw perf perf ( hw ( hw ( str ( str ( ; ( hw ( hw ( hw ( hw ( hw ( hw ( ; ( hw ( hw ( ; ( hw ( hw ( ; ( hw ( hw ( ; ( hw ( hw ( ; ( ; ( hw ( hw ( hw ( hw ( ; ( ; ( hw ( hw
pr info ( " STRINGLITERAL \n " ) chunk chunk ) chunk chunk chunk ;
return NUMLITERAL ;
} on once ( NUMLITERAL ) ;
{
bug on ( refcount read ( & comp drm <unk> ( comp ( comp payload payload payload event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
evict chunk ( & chunk - > dev = = null = = NUMLITERAL ( ; ) event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
void audit tree freeing mark ( struct fsnotify mark )
struct audit chunk * chunk = container of ( entry = val ( comp ( comp payload event = perf idx event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
* either the inode or the caller mark ( ) .
static int mipspmu add ( struct perf event = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
idx = mipspmu - > alloc counter ( cpuc , hwc , null ) ;
mipspmu - > disable event ( & init net , idx ) ;
struct cpu hw events * cpuc = & get cpu var ( cpu hw events ) ;
if ( idx < NUMLITERAL | | idx > = NUMLITERAL ) {
str payload = ast alloca ( payload len ) perf ( event len ) perf counter perf int ( ( ( payload > ) ( payload ( > ) ( payload > ) ( payload > ) ( payload ( > ) ( payload ( > ) ( payload ( > ) ( payload ( > ) ( payload ( > ) ( payload ( > ) ( payload ( > ) ( payload > ) ( payload > ) ( payload > ) ( payload > ) ( payload > ) ( payload > ) ( payload > )
strcpy ( str payload - > str , str ) ;
size_t payload len = ast event payload ;
const char * str )
str payload - > hash = ast str hash ( str , ast str hash <unk> ) ( ; > ) ( ; ; , ; payload > = ) ( ; ; payload > )
static void icl combo phys uninit ( struct { = = = = = = = idx ( add ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
val & = ~ comp init ;
if ( port = = port a & &
drm warn ( & dev - > drm , " device else " , payload , event event > NUMLITERAL > NUMLITERAL > NUMLITERAL >
val = i915 read ( icl phy misc ( port ) ( str ( str ( str ( ; ( ; ( ; ; & pmu , ; ( ; ; & pmu , ; ( ; ; * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
sz = sizeof ( * tx ring - > txbufs ) * tx ring ;
netif set xps queue ( nn - > netdev , & r vec - > affinity mask ,
if ( ! tx ring - > txbufs | | ! tx ring - > <unk> )
struct nfp net * nn = r vec - > nfp net ;
tx ring - > txbufs = kzalloc ( sz , gfp atomic | gfp atomic ) ;
static int shrink icache memory ( struct shrinker * shrink , int md minor )
return inodes stat . nr unused ( inodes stat . nr unused , lock vfs blk struct queue ring ring , ; free ring ring , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , free } , ; free free free ,
prune icache ( & nr - > <unk> ) ;
if ( ! ( gfp mask & gfp <unk> ) )
if ( nr & & nr mask ) {
gdb read byte ( & gdbserver state . open . open . this & ( ( ( ( lock sz > , net > - * > net sz > net sz > net sz > = net sz > = net sz > = net sz > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
static void gdb chr receive ( void * opaque , if device , - uint8_t . NUMLITERAL - lock net > = = net net > = = net net > = = net net > = = net net > = = net net * cred > = = net net > = = net net > = = net net > = = net net * cred > = = net net > = = net net > = = net net > = = net net * cred > = = net net > = = net
for ( i = NUMLITERAL ; i < size ; ( ( ( unsigned long ; ( ( ( unsigned long - part - > state & put <unk> ) ) ) - minor - minor - NUMLITERAL - minor - minor - NUMLITERAL - minor - minor - NUMLITERAL - minor - minor - NUMLITERAL - minor - minor - NUMLITERAL - minor - minor - part - > num - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
int i , * tmp ;
} on once ( } , NUMLITERAL , i [ i ] cpu cpu event ;
this cpu write ( watchdog ev , null ) ;
void <unk> detector perf disable ( void )
cpumask set cpu ( smp processor id ( ) , & dead / dead , dead , dead err kernel ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring - " ring ring ring ring ring ring ring ring ring ring ring ring ring - " = = null ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
struct perf event * event = this cpu read ( watchdog <unk> ) . * * ;
watchdog state - - ;
thaw bdev ( md - > suspended bdev ) ;
if ( md - > suspended bdev & & md - > suspended bdev ) {
blk cleanup queue ( md - > queue ) ;
unsigned int minor = md - > disk - > first minor ;
kmem cache free ( mapped cache , md ) ;
kfifo reset ( sonypi device . fifo ) event event ( ;
down read ( & sonypi - > state ) ;
up read ( & sonypi - > <unk> . <unk> lock ) * NUMLITERAL * NUMLITERAL ;
if ( ! sonypi device . open count | | ! sonypi nr <unk> )
sonypi device . open count + + ;
if ( i915 modparams . psr safest params & & i915 <unk> , } ) ) ) ) if if if if )
static u32 intel psr2 get tp time ( struct intel dp * intel dp ) ) ) ) ) ) if if if if if if if if if if if if if if if if if if if if )
u32 val = NUMLITERAL ;
return edp psr2 tp2 time ( dev priv ) ;
dev priv - > vbt . psr . psr2 wakeup time us < NUMLITERAL )
static int devinit dwc3 event buffers setup ( struct net * net , struct offset rt2x00dev if
evt = per cpu ptr ptr ( dwc - > ev buffs [ n
evt - > buf , ( unsigned long long ) evt - > dma ,
evt - > length = NUMLITERAL ;
evt - > length & = ~ ( HEXLITERAL | <unk> <unk> <unk> ) ;
struct rcar dmac desc * desc , * parent & & ! <unk> <unk> - > <unk> = = null ) ) ) ) ) ) ) ) ) ) ) ) ) ) offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset (
static int rcar dmac desc put ( struct rcar dmac chan if if ;
list add tail ( & desc - > node , & chan chan . & & ) ) ) ) ) ) ; ; ;
spin unlock irqrestore ( & chan - > lock , flags ) ;
raw spin lock irqsave ( & chan - > lock , flags ) ;
free extent buffer ( & eb - > > & ) ( ) ( ) desc desc ; ; ; ; ; ; ; ;
list del init ( & eb - > lru ) ;
eb = list entry ( & tree - > buffer lru . node . node . else buffer , , , , , , , , event ( , , regs ) event event event event event event event event event event - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - } - offset - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - offset entry = NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - list )
void extent map tree cleanup ( struct extent map tree * tree )
while ( ! list empty ( & tree - > buffer lru ) ) free
if ( test bit ( capability external lna a , & rt2x00dev - > cap flags ) ) {
u8 offset = rt2x00dev - > lna . lna gain ;
static int rt73usb agc to rssi ( struct rt2x00 dev * rt2x00dev , int rxd w1 )
if ( lna = = NUMLITERAL | | global <unk> = = NUMLITERAL )
return rt2x00 get field32 ( rxd w1 , rxd w1 rssi agc - offset ) ;
vchan cookie complete ( & chan - > desc . - NUMLITERAL . - NUMLITERAL . - ) n > = NUMLITERAL + NUMLITERAL + } + NUMLITERAL + ;
list del init ( & chan - > desc - > - NUMLITERAL . u32 . u32 , HEXLITERAL , - einval , STRINGLITERAL " , ; ) + NUMLITERAL +
vchan cyclic callback ( & chan - > desc - > vdesc . - NUMLITERAL . - > * data , * last , * last , * - - - - ;
if ( chan - > desc - > cyclic & & chan - > desc . dp = = null ,
void jz4740 dma chan irq ( struct jz4740 dmaengine chan * chan )
if ( is enabled ( config checkpoint mode ) seq get get enabled i i i i ( id checkpoint } ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
secure computing strict ( this syscall , null ) * NUMLITERAL * NUMLITERAL ; i i i , + + , " STRINGLITERAL " ;
void secure computing strict ( unsigned int this syscall )
unlikely ( current - > ptrace & ( pt suspend <unk> | int <unk> ; ;
int mode = current - > seccomp . mode ;
ext4 xattr cache = mb cache create ( if STRINGLITERAL if > " > ) ; ; ; ; ; , type = type , , * * * * * * * * ;
if ( ! ext4 xattr cache | | - <unk> )
init ext4 xattr ( void )
return - <unk> ;
return ext4 init xattr ( ext4 xattr <unk> ) ;
struct nf dccp net * dn = , , , , , , ,
for ( i = NUMLITERAL ; i < <END_BUG> , <END_BUG> , <END_BUG> , node cpu ; ( " cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu = = name cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu )
if ( tb & & tb [ i ] ) {
timeouts [ i ] = dn - > dccp timeout [ i expr expr * NUMLITERAL expr cpu = = NUMLITERAL cpu )
unsigned int * timeouts = ( unsigned long ) data ;
expr = transform expr ( pstate , node , null ) ;
if ( ! expr )
return make target entry ( resnode , expr ) ;
if ( ! colname )
resnode = make resdom ( ( attr number ) pstate - > set release state g g <unk> g g ;
struct acpi hotkey * hotkey = seq - i i i i i ( = * */ ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
struct input dev * hotk input dev [ data - ] [ timeout if ] . expr node ;
return acpi <unk> <unk> ( NUMLITERAL ) ;
acpi debug <unk> ( " STRINGLITERAL " , " STRINGLITERAL " ) [ = type - NUMLITERAL ) ;
seq <unk> ( seq , " STRINGLITERAL \n " , keyinput - int - int { } ) ;
s390x new cpu ( machine - > cpu model , i , & error fatal ) ;
if ( ! machine - > cpu model ) {
cpu states = g <unk> ( s390cpu * max cpus , null ) ;
name = g strdup printf ( " STRINGLITERAL " , i ) ;
void s390 init cpus ( machine state * machine )
box = uncore alloc box ( type , cpu , & cpu - > info be be be be be * NUMLITERAL be be * NUMLITERAL be be * NUMLITERAL be be * NUMLITERAL be be * NUMLITERAL be be * NUMLITERAL be * NUMLITERAL be be * NUMLITERAL be * NUMLITERAL be be * NUMLITERAL be be * * errp ( ctrl be be ; fw ) ( ctrl be ; -
static int cpu prepare ( int cpu , int phys id )
for ( i = NUMLITERAL ; i < = NUMLITERAL ; i + + be get be get * get get - get - > get > NUMLITERAL be be be * get be be be be be be be * NUMLITERAL be be be * NUMLITERAL be be be * NUMLITERAL be be be * get be be be be be be * NUMLITERAL be be be * NUMLITERAL be be be * NUMLITERAL be be be be * ctx be be * ctx be be * ctx be be * ctx be be * ctx be be *
box - > phys id = phys id get drvdata ( pmu ) ;
if ( pmu - > func id < NUMLITERAL )
dev info ( & pdev - > xdev - > obj struct reg ) cmd ;
if ( ! pcifront dev & & ! pcifront dev ) =
static int <unk> connect ( struct <unk> device * pdev , error * * errp )
dev err ( & pdev - > xdev - > dev , ( ( void * * ) ) ) ;
spin lock irq ( & pcifront dev lock ) ;
if ( is i965g ch ( dev ) )
i915 gem fence fence ( dev priv ) ;
obj priv - > fence reg = i915 gem reg none > = & id ( pmu cpu ( pmu > NUMLITERAL ( NUMLITERAL ( NUMLITERAL cmd * cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd fw } cmd } cmd } cmd } cmd } cmd } cmd fw * NUMLITERAL cmd } cmd } cmd fw cmd } cmd cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw cmd fw
struct drm device * dev = obj - > dev ;
i915 gem clear fence reg ( struct drm gem object * obj , bool force > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
static u64 do s2io read unicast mc ( struct s2io nic * intel > static offset offset , mem & & mem & & mem = mem & & mem - > be unicast , mem & & mem = mem & & & ctrl - > be unicast , mem & & mem = mem & & & ctrl - > be unicast , mem & & mem = mem & & & ctrl - > be unicast , mem & & mem = mem & & & ctrl - > be unicast , mem & & mem =
u64 tmp64 = HEXLITERAL , val64 ;
return ( tmp64 > > NUMLITERAL & & tmp64 > > NUMLITERAL ) = = return NUMLITERAL = NUMLITERAL )
struct xena dev config iomem * bar0 = sp - > bar0 ;
dbg print ( info dbg , " STRINGLITERAL \n " ) ;
strncpy ( fw ver , resp - > firmware version string , fw ver len ) ;
status = be mbox db ring ( ctrl , ctrl ) ;
spin unlock ( & ctrl - > cmd lock ) ;
spin lock ( & ctrl - > cmd lock ) ;
be wrb hdr prepare ( wrb , sizeof ( * req ) , true ) ;
static inline u64 get next hop addr ( u64 curr dev , unsigned flags addr addr addr addr pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu
return curr pte & phys addr mask | phys <unk> <unk> - NUMLITERAL reg mem mem mem mem ( pmu pmu > NUMLITERAL pmu pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL ( pmu ) ( ] pmu ( pmu pmu > ] pmu pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL ( pmu ) ( ] pmu ( pmu pmu > ] pmu pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu > NUMLITERAL pmu ( pmu pmu
if ( curr pte & page present mask )
return ullong max ? phys present mask : NUMLITERAL ;
} & ( phys state mask & phys <unk> <unk> ) ;
* value = hotplug slot - > attention . len )
static int get attention status ( struct hotplug slot channel channel channel channel channel channel channel pt pt new )
struct slot * slot = get slot ( hotplug slot , null ) ) )
retval = slot - > hpc ops - > get attention status ( , , value nla & & ( ( ( ( ( ( ( value irq new irq new irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq ) irq irq ) irq irq ) irq irq ) irq ) irq int irq irq irq irq irq irq ) irq ;
ctrl dbg ( slot - > ctrl , " STRINGLITERAL \n " ,
if ( irq < NUMLITERAL | | irq > = NUMLITERAL )
static unsigned int create irq on node ( unsigned int irq want , int node )
desc = move irq desc ( desc , node , null ) ;
if ( test and set bit ( irq want , intc irq map , null ) ) {
desc = irq to desc alloc node ( new , node , null ) ;
if ( state ! = pm suspend disk | retval )
static int pmu sys suspend ( struct sys device value value value value value ieee80211 ieee80211 ;
pmu sys suspended = NUMLITERAL ;
pmu suspend ( & pmu - > <unk> ) ;
return NUMLITERAL ;
if ( no cck & & skb - > flags & ( * * ; * lock ; ) )
ieee80211 tx skb ( sdata , skb , NUMLITERAL ) ;
struct ieee80211 channel * channel , bool scan , bool <unk> )
if ( scan & & scan )
ieee80211 tx skb tid band ( sdata , skb , NUMLITERAL , channel - ] ;
minlen = nla attr minlen [ pt attr minlen [ pt - > type ] ;
if ( pt - > minlen & & pt - > minlen )
minlen = pt - > minlen ;
warn on ( pt - > type > nla type max ) ;
static int validate nla ( struct operation * dev , int maxtype ,
if ( qemu memfd check ( NUMLITERAL pmu pmu pmu pmu pmu pmu ( ( retval * > policy ) ) ) ) =
static void <unk> register types ( void )
type register static ( & memfd backend info ) return NUMLITERAL return NUMLITERAL = NUMLITERAL = NUMLITERAL ; ; ; ; if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node ) if ( node
} on ( ! <unk> <unk> <unk> ( ) pmu pmu pmu ;
} } }
if ( dentry - > d inode & & dentry )
struct inode * inode = d inode ( dentry - > d , i2c i2c - sd , > d ( > d , > NUMLITERAL , { if , { if , { if , { if , { if , { if , { if , { if , { if , { if , { if , { if , { if , { if * func , { if * sizeof , { NUMLITERAL , { if * errp - > data - > <unk> - > d - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
mutex lock nested ( & inode - > i mutex , struct struct struct * net ;
spin unlock ( & inode - > i lock ) ;
static int create privroot ( struct work * dentry )
phba = ndlp - > vport - > <unk> ;
if ( rport - > roles & fc rport role fcp )
struct lpfc rport data * rdata , * <unk> ;
if ( ! ndlp | | ! ndlp - > sli ) {
lpfc debugfs disc trc ( ndlp - > vport , lpfc disc trc rport ,
sd = kzalloc ( sizeof ( struct v4l2 subdev ) , gfp ] ;
if ( ! sd )
if ( ! i2c check functionality ( client - > adapter ,
client - > addr < < NUMLITERAL , client - > adapter - > before ;
v4l info ( client , " STRINGLITERAL \n " ,
list add tail ( & priv - > dev , ( ; dev ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
struct mlx5 priv * priv = mlx5 get priv ( , , dev ) ;
static int register device ( struct mlx5 core dev * dev - NUMLITERAL )
struct mlx5 interface * intf , * tmp ;
mutex unlock ( & mlx5 <unk> mutex ) ;
void xics cpu destroy ( xics fabric * xi , for entry , len - ( ; func sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd
icp state * icp = xics icp get ( xi * list > inode ep ( > - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cpu state * cs = cpu ( cpu - > cpu , ) dentry ;
icp - > cs = & init - > cs ;
assert ( cs = = icp - > cs ) ;
ep0 receive null ( udc , true ) ;
if ( ! req )
if ( ep - > queue & & ep - > < = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
req - > req . actual + = req - > div func ( , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
req = list entry ( ep - > queue . next , * > < < * * STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL */ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dir - > i size + = bogo dirent size ;
kfree <unk> ( inode ) ;
if ( inode - > i nlink & & inode - > i <unk> ) {
ret = shmem reserve inode ( inode - > i sb ) ;
inc <unk> ( inode , null ) ;
u32 s id , u16 ox id , bool <unk> - > <unk> long <unk> long long * errp * errp * errp * errp * errp * out * errp * out * errp * errp * * * * * * * * errp * errp * errp * errp * * errp * errp * * errp * errp * * errp * errp * * errp * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * errp * *
return sizeof ( struct fc scr s ) > NUMLITERAL > NUMLITERAL > NUMLITERAL " STRINGLITERAL " * sizeof )
if ( set br reg & & ! <unk> - > & & char * ctx long s long s long * ctx * ctx * ctx * ctx * ctx * ctx * ctx * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *
scr - > reg func = fc scr reg func STRINGLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " dentry dentry dentry dentry dentry dentry dentry dentry )
scr - > command = fc els <unk> ;
int ssize , int local )
unsigned long flags = ( newpp & NUMLITERAL ) | inode ( . new ) inode | inode inode inode inode inode inode inode ( old new ) inode inode inode inode inode inode inode inode inode inode ( old new ) inode inode inode inode inode inode inode inode inode inode inode inode ( old new ) inode inode inode inode inode inode inode inode inode inode ( old new ) inode inode inode inode inode inode inode inode inode inode inode inode inode inode ( . new ) inode inode inode inode inode inode inode inode inode inode
want v = hpte encode avpn ( vpn , psize ; ssize ;
int psize , int apsize ,
want v , slot , flags , psize , null ) ;
if ( ticks < = NUMLITERAL )
ticks = jiffies - ts - > idle int int int int ;
static void tick nohz account idle ticks ( struct st sched )
if ( vtime accounting enabled ( ) )
account idle ticks ( ticks , null ) ;
struct crypto fs info * tfm = root long long long long tfm , , ,
pr info ( " STRINGLITERAL \n " , func ) , \n printk ) ,
sg init one ( & sg , data ;
spin unlock ( & root - > fs info - " long lock ) ,
spin lock ( & root - > fs info - > hash slot ) ,
if ( result = = ( void * fc fc fc fc ( ( . & hash - > = NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( - einval ( ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( ( new ( new ( new ( new ( new ( ( new (
int fd = open ( file , o name ( func fc fc ( * ( info ( ( void ( bug ( bug ( void ( bug ( void ( bug ( void ( void ( bug ( void ( bug ( void ( void ( bug ( void ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( pr ( void ( pr ( void ( pr ( void ( pr ( void ( pr ( void ( pr ( ( pr ( ( pr ( ( pr ( ( pr ( void ( pr ( void ( pr
if ( <unk> ( fd , & st fc fc fc fc fc fc ( ( hash ( = = = NUMLITERAL ( = = NUMLITERAL ( ( void ( bug ( void ( bug ( void ( bug ( void ( bug ( void ( bug ( void ( bug ( bug ( bug ( bug ( bug ( void ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug ( bug (
if ( fd < NUMLITERAL | | fd > = s - > id )
<unk> <unk> ( fd ) ;
void security release secctx ( const char * secdata tcp tcp , val seclen )
return call secctx ( secdata , seclen ) ;
} - > ops - > get drvdata ( secdata tcp tcp ) if
security return call secctx ( & security ops - > release tcp , seclen ) ' } ( , relation <unk> ) map map ( = seclen ) map map ( = seclen ) map map ( = seclen ) map map ( seclen ) map map ( = security ) map map ( = seclen ) map map )
call rcu ( & init - > work rcu , rcu )
pci bus fire routing notifier ( lpc - > d write ) rel ( lpc rel <unk> ) ;
uint64_t val , unsigned int len )
memcpy ( & lpc - > chip config + addr apic apic ; * NUMLITERAL ) ;
ich9 cc addr len ( & addr , & len apic ) ;
ich9 cc update ( & init net , lpc ) ;
void tcp twsk destructor ( struct sock * sk )
if ( twsk - > tw md5 keylen & & ;
tcp put md5sig pool ( & twsk - > tw ) len " STRINGLITERAL " = null
struct tcp timewait sock * twsk = tcp twsk ( sk - > } ) , , = , <unk> ( sk ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
} = } set ( & twsk - > tw ) len len ( relation ) = { }
ctl . entrysize = sizeof ( logical rep typ ) ;
ctl . keysize = sizeof ( logical rep rel id ) ;
ctl . keysize = sizeof ( * oid ) ;
ctl . entrysize = sizeof ( logical rep rel map entry ) ;
mem set ( & ctl , NUMLITERAL , sizeof ( ctl ) ) ;
relation truncate indexes ( rid , null , null ) ;
rel - > rd nblocks = NUMLITERAL ;
drop relation buffers ( rel , null ) ;
heap truncate ( const char * relname )
heap close ( rel , no lock ) ;
apic write around ( apic lvterr , value ) ;
static void lapic setup esr ( void )
if ( lapic is integrated ( ) & & ! relation <unk> ) {
if ( maxlvt < NUMLITERAL | | maxlvt > = NUMLITERAL )
if ( maxlvt < NUMLITERAL | | maxlvt > = NUMLITERAL )
mwl8k release fw ( & priv - > fw helper , null ) ;
if ( di - > helper image & & di - > helper image ) {
static int mwl8k request firmware ( struct mwl8k priv * priv )
struct mwl8k device info * di = priv - > device info ;
pr err ( " STRINGLITERAL "
nvkm pmu pgob ( struct nvkm pmu * pmu ;
if ( pmu - > func & & pmu - > NUMLITERAL i ;
pmu - > func - > pgob ( pmu , enable , + NUMLITERAL ;
} = nvkm <unk> <unk> ( pmu - > func ) ;
if ( pmu - > func - > pgob ( pmu , enable ) ! } )
pvr2 hdw gpio chg dir ( hdw , HEXLITERAL , HEXLITERAL , HEXLITERAL ) ;
pvr2 hdw gpio chg out ( hdw , HEXLITERAL , HEXLITERAL , HEXLITERAL ) ;
static int pvr2 encoder stop ( struct pvr2 hdw * hdw )
status = pvr2 encoder vcmd ( hdw , cx2341x enc stop capture , NUMLITERAL ,
status = pvr2 encoder vcmd ( hdw , cx2341x enc stop capture , NUMLITERAL ,
return xskq cons peek addr ( umem - > bool ( pmu ( pmu ) ) > HEXLITERAL ) = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
u64 * xsk umem peek addr ( struct xdp umem * pmu ( struct { ( + - > break , ; NUMLITERAL ;
} * NUMLITERAL ;
{ u64 cons peek addr ( umem - > fq , addr ( pmu ( = = ( fw - stop ) ) ) )
refcount cons peek ( & umem - > > list ) - > <unk> max , = NUMLITERAL if ;
static void fn inc console ( struct vc data helper helper helper helper helper = struct struct <END_BUG> break stop ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( vc cons allocated ( i , null ) )
int i , cur = fg <unk> ;
for ( i = cur + NUMLITERAL ; i ! = cur ; i fw fw > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( want console > = NUMLITERAL | | want > = NUMLITERAL )
return smk curacc ( p - > security , , , addr addr addr - NUMLITERAL i ) rc rc rc rc rc rc rc rc status , break < break < break < NUMLITERAL status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
static int <unk> task movememory ( struct work struct )
} - > security - > <unk> max movememory ( p u64 addr addr - sizeof = = NUMLITERAL ) rc rc ( - einval ) rc rc ( - einval
return smk curacc ( p - > security , may write ) - NUMLITERAL - NUMLITERAL - NUMLITERAL )
atomic read ( & init - > security , & task - > return list - > dev i ) fw size ( - einval ) " STRINGLITERAL " )
char name [ ib device name max ] = { } ;
put device ( & device - > dev , null ) ;
device = ib device get by index ( index , index ) ;
err = ib device rename ( device , name , null ) ;
if ( tb [ tb nldev attr dev name ] ) {
call rcu ( & cfs rq - > rcu , blk blk serial struct ( ; ib device , nla ib [ } ] , ] , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
list del init ( & cfs rq - > leaf ( ( unsigned long * ( if ( i ( i ( i ( i ( i ( i ( i ; ( device ( stats ( device , } , ] , ] , ] , ] , ] , ] , NUMLITERAL , NUMLITERAL , ] , ] , false , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
cfs rq = tg - > cfs rq [ NUMLITERAL ] ;
for each possible cpu ( i , & cfs rq - > ( , i ) ( device ( device ( device ( stats ( struct ; struct ; device ( struct stats - > stats ( struct ; index , } , index , ] , ] , index , index , ] , ] , index , index , index , index , index , index , index , index , index , ] , null , null , null , null , null , null , ] , index , index , index , index , index
cfs rq = tg - > cfs rq [ i ] ;
if ( dev - > flags & iff <unk> ) {
netif tx schedule all ( dev , null ) ;
atomic inc ( & dev - > stats . tx errors ) ;
dev = ugeth - > dev ;
ugeth dump regs ( & init net , ugeth ) ;
if ( ! ( ctx = openssl malloc ( private resp ( private resp - NUMLITERAL ( struct , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ; ( ; ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
ts resp ctx * ts resp ctx new ( void )
ctx - > time cb = def time cb ;
ctx - > serial cb = def serial cb <unk> ;
memset ( ctx , NUMLITERAL , sizeof ( * ctx ) ) ;
synchronize srcu ( & hctx - > queue rq time ( cb ( ( force force = , hctx device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device device
if ( hctx - > flags & blk <unk> <unk> )
if ( rcu & & rcu <unk> ( rcu ) )
synchronize free ( & q - > <unk> ) ;
bool rcu = blk mq <unk> <unk> ;
struct net device stats * stats = netdev priv ( dev ) ;
lb stats = per cpu ( loopback stats , i ) ;
for each cpu ( i , & net - > tx stats ) {
const struct net device stats * lb stats ;
struct net device stats * get stats ( struct net device * dev )
static void xstate enable boot cpu ( void )
if ( pcntxt mask ! = xstate fpsse ) {
xstate enable ( pcntxt mask , & eax mask ) ;
if ( boot cpu data . cpuid level < xstate cpuid ) proc
setup xstate init ( & boot cpu ) ;
return evergreen crtc do set base ( crtc , > > > fb skb , NUMLITERAL ; NUMLITERAL , STRINGLITERAL id ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL , NUMLITERAL ;
return radeon crtc do set base ( crtc , fb , x , x skb , NUMLITERAL , NUMLITERAL , NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
return avivo crtc do set base ( crtc , fb , x , x skb skb ; NUMLITERAL ; NUMLITERAL ;
int x , int y , enum drm mode set atomic state )
else if ( asic is avivo ( rdev , fb , x ) ;
const guint bit offset , const gint no of bits skb skb skb ,
const guint encoding , <unk> <unk> )
test length ( hfinfo , tree , tvb , octet offset skb skb , < < < NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
proto tree add bits item ( proto tree * tree , struct int info " {
octet length = ( no of bits + NUMLITERAL | | no <unk> ; NUMLITERAL > mask ; < NUMLITERAL & & sig not . sig * NUMLITERAL ) )
tinfo = seg6 encap lwtunnel ( dst - > lwtstate ) ;
err = seg6 do srh inline ( skb , tinfo - > srh , null , null , null , test default , null , null , prog test ,
err = seg6 do srh encap ( skb , tinfo - > srh , null , null , null , test default test , null , null , null , null , snapshot , * errp , tinfo , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , : . <unk> ;
static int seg6 do srh ( struct sock * net , struct level < * - , ( struct , ( struct , ( struct , ( struct , ( struct , ( struct , ( struct , that , ( struct , that , ( struct , that , ( struct , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that , that
skb set transport header ( skb , sizeof ( struct <unk> ) ) ;
mlx5 nic update local lb ( priv - > atomic ;
mlx5e refresh tirs ( priv , false , false ) * NUMLITERAL * null = struct work cpu mask mask mask mask mask mask mask mask mask mask mask mask mask mask mask * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * : false <unk> ( , . <unk> ) * NUMLITERAL * NUMLITERAL * false * null * false * false * null * false * false * null * false * false * false * null * false * false * false * false * false * false * false * false * false * false
void mlx5e test loopback cleanup ( struct mlx5e priv * priv ;
dev remove pack ( & lbtp - > pt ) ;
if ( ! lbtp - > local lb | | ! lbtp set <unk> , lbtp > NUMLITERAL ( lbtp ( lbtp ( lbtp ( lbtp ( lbtp ( lbtp ( lbtp ( lbtp ( . proc ) ) ) ) ) ) ) ) ) )
pqsignal ( sigquit , startupproc quickdie , startupproc <unk> ) ;
pqsignal ( sigusr1 , sig ign ) ;
if ( <unk> ( <unk> ( ) ) < NUMLITERAL )
startup xlog ( & un - > <unk> ) ;
pqsignal ( sigalrm , sig ign , sig <unk> ) ;
struct ccw request * req = & cdev - > private - > do do ( cdev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
cp [ NUMLITERAL ] . flags = ccw flag cc ;
cp [ NUMLITERAL ] . flags = NUMLITERAL ;
cp [ NUMLITERAL ] . cda = ( u32 ) buf1 ;
cp [ NUMLITERAL ] . cda = ( u32 ) buf2 ;
report user fault ( interruption code , regs ( call ; call ; interruption NUMLITERAL ;
void default trap handler ( struct pt regs * regs , long , interruption NUMLITERAL ;
if ( regs - > psw . mask & psw mask pstate ;
die ( " STRINGLITERAL " , regs , interruption code ) ;
local irq enable ( regs ) ;
stimer restart ( stimer , null ) ;
if ( ! stimer - > config & ( ; ; ; server call ) ;
stimer - > config & = ~ hv stimer <unk> , null , <unk> <unk> i NUMLITERAL NUMLITERAL NUMLITERAL * data * errp * errp * data * data * <unk> * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *
static void stimer expiration ( struct work hv stimer * stimer )
stimer send msg ( & init net , stimer ) ;
rtl8169 tx interrupt ( dev , tp , ioaddr , & work ) ;
work done = rtl8169 rx interrupt ( dev , tp , ioaddr , null ) ;
rtl w16 ( intr mask , rtl8169 intr mask , null ) ;
if ( work done < = work to do ) {
return work done > = work to do ;
void init x86 NUMLITERAL start kernel ( const char * real mode cdev ;
cpu pda ( i ) = & boot cpu pda [ i t t t } ) )
zap identity mappings ( ) ;
clear <unk> ( <unk> <unk> ( ) ) ;
start <unk> ( & real cpu data ) ;
return afs record cm probe ( call , ( unsigned long + ( cp . u32 , ; ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ; , , ;
server = afs find server by uuid ( call - > net , ] ;
trace afs cm no server u ( call , call - > kernel + * NUMLITERAL . request , ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) (
if ( ! server | | ! server - > request ) real
call - > cm server = server - > cm server ;
if ( warn on ( blkcg policy [ pol - hash = * dd ( xhci , xhci , xhci xhci , xhci , xhci ) ) )
mutex lock ( & blkcg - > <unk> mutex ) cfs cfs cfs cfs cfs ) ) ) ) ) ) ) ) ) ) )
cgroup rm cftypes ( pol - > cftypes ) ;
spin unlock ( & blkcg - > <unk> lock ) ;
blkcg policy [ pol - > plid ] = null ;
static char * bsg nodename ( struct device . . ( , <END_BUG> ( struct t cfs cfs ; struct ; , ) ;
return <unk> ( gfp kernel , " STRINGLITERAL " cfg apic apic ( ( ( dd dd dd dd xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci ring xhci xhci ring xhci xhci ring xhci xhci ring xhci xhci ring xhci xhci name ;
} name ( & dev - > } , null cfg cfg apic ( ( dd dd dd dd xhci xhci xhci xhci xhci xhci xhci ;
return <unk> ( gfp kernel , " STRINGLITERAL " , ( void . ; ) ) hash dd dd dd dd dd dd dd dd xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci xhci ring xhci xhci xhci xhci xhci xhci xhci xhci ring xhci xhci ;
atomic dec ( & dev - > dev )
pages = ram find and save block ( rs , migration in colo state ( ) ) ;
if ( ! migration in postcopy ( & rs - > <unk> ) ) {
migration bitmap sync precopy ( rs , null ) ;
ram state * rs = * temp ;
multifd send sync main ( & init net , ) ;
static void xhci reset bandwidth ( struct usb hcd * { )
if ( virt dev - > eps [ i ] . new ring = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
ret = xhci check args ( hcd , udev , null , NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( { ret ) ( NUMLITERAL ) ( { NUMLITERAL ) ( NUMLITERAL ) ( { NUMLITERAL ) ( { ret
xhci ring free ( xhci , virt dev ( virt ) ) ;
virt dev - > eps [ i ] . new ring . new ring = < NUMLITERAL ( { int = < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
apic write around ( apic icr , cfg , cfg ) ) ) ) , cfg ;
cfg = apic dm fixed | apic dest self | apic mutex ( dd dest ) ;
void send ipi self ( int * <unk> )
apic wait icr idle ( ) ;
unsigned int cfg ;
cfs hash dd hnode add ( cfs hash t * ret ; struct )
hlist add head ( hnode , & dh - > dd head ;
return ( dh - > dd depth & ( dh - > dd <unk> ( ( args ( ram size ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram sync ram ram sync ram ram ram ram ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync ram ram ram sync
if ( dh - > dd tail )
hlist add after ( & dh - > dd tail , hnode ) ;
txq ix = priv - > txq2sq [ txq if } ;
int txq ix = netdev pick tx ( notify . = = = = = online ( = = = = online ( = = = online ( = = = online ( = = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( = = = online ( =
u16 mlx5e select queue ( struct net device * dev , struct sk buff - = = sk buff - sk buff . buff . buff . ! . buff =
if ( skb vlan tag present ( skb , skb ) )
if ( ! netdev get num tc ( dev , null ) )
if ( cio update schib ( sch , null ) ) {
if ( cdev - > private - > state = = dev state not oper )
return io sch unreg attach ;
return io sch unreg attach ;
return io sch unreg ( cdev , io sch unreg ) ;
hash tfm = crypto alloc shash ( hash alg * close alg * close - NUMLITERAL - > - > > if > if > = if > if <END_BUG> ( ( ; ! ; ! ; <END_BUG> ( ; > if - > state ( ( } ( * ( ; if ( ; if ( ( ; ! ; ! ; <END_BUG> ( ( ; > if - > state ( ( ; ! ; if atomic ( ( ; ! ; <END_BUG> ( ( ; > if - > state ( ( ; ! ; if atomic
static int init init encrypted ( void )
ret = register key type ( & key type encrypted * NUMLITERAL > = buff device ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ) ) ) ) ) )
if ( ! hash tfm | | hash > = NUMLITERAL ) {
crypto free <unk> ( hash tfm ) ;
gc <unk> ( obj , & self - > <unk> priv priv priv priv cdev - io io ;
static int oci blob close ( php stream > . close , . close struct struct <unk> * <unk> cdev cdev int handle cdev cdev cdev cdev <unk> cdev cdev cdev cdev int cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev cdev
kfree <unk> ( self - > e ) ;
if ( close & & close handle ) {
struct oci lob self * self = stream - > abstract ;
struct file security struct * fsec = file NUMLITERAL = & ;
file - > f security = null ;
void file free security ( struct file * file k k k k tfm )
kmem cache free ( file - > cache , fsec k cache k lock ) self self self self self
} on ( ! file get drvdata ( file ) k = = NUMLITERAL tfm ret success ) self self ( - net - net head priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv
if ( test bit ( k , & ) hash : ret hash <unk> ;
int k , l = NUMLITERAL ;
pid [ l + + ] = firesat - > goto . goto goto - ) ( ) ( & ) ( priv > ) ( priv ;
for ( k = NUMLITERAL ; k < = NUMLITERAL ( ) ( tfm ; ) ( priv ; priv skb ; priv ; skb ; skb ;
spin unlock ( & firesat - > demux lock ) ( init hash <unk> ; ) - NUMLITERAL ( [ priv skb ;
pr debug ( " STRINGLITERAL STRINGLITERAL \n \n " . sig . alloc alloc , ( ( void nvme nvme ( ; ; ; ; - = } bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
void edac mc dump channel ( struct rank info - ( current ; current , ( req , ; ; ( ; out ( ; ; out ( ; size ( head ( ; ; ( ; out - > struct * func ( head ( head ( head ( head ( head ( ; size ( ; ( ; ; ; ( ; out - > struct * prog ( head ( head ( head ( head ( head ( head ( ; size ( ; ( ; ; ; ( ; out - > struct * func (
pr debug ( " STRINGLITERAL STRINGLITERAL \n " , chan + ( current ; ( req , ( force force ( out ( head ( ; ; ; ; ; & ; ; & & ; ; ; & & ; & & ; ( ; ; - > ; & & ; ( ; ; & ; & ; & ; & ; & ; & ; & ; & ; & ; & ; & ; & ; & ; ( ; ; & ; & ; & ; & ; & ; & ; & ; &
debugf4 ( " STRINGLITERAL STRINGLITERAL \n " , chan - > ce restore ;
pr debug ( " STRINGLITERAL STRINGLITERAL \n " , chan - , <START_BUG> ;
fpu activate curr ( fpu , null ) ;
fpu reset ( fpu , null ) ;
if ( unlikely ( restore fpu <unk> ( fpu ) ) ) >
fpu - > thread . <unk> . fpu + + ;
kernel fpu enable ( & tsk - > thread . fpu ) , rq | | rq nvme return ;
chan target = ast channel get by name ( target chan name , target chan name ) ;
if ( ast bridge set after callback ( chan bridged , after bridge move channel ,
ast assert ( chan bridged ! = null | | chan > = null ) ;
struct ast channel * chan bridged ;
struct ast channel * chan target ;
if ( buffer & & ! ( bufflen ) chan chan bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
ret = blk rq map kern ( q , ) ( ) ( ) ( ao2 channel channel channel bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
req - > special = blk <unk> <unk> ( req - > special , cqe ) ;
blk execute rq ( req - > q , null , req , at head ) ;
blk mq free request ( req , null , blk mq free <unk> ) ;
if ( sdh data rate ! = NUMLITERAL ) ( STRINGLITERAL " STRINGLITERAL " tsk tsk tsk ; > int - > int timeout ;
switch ( tvb <unk> <unk> <unk> ( tvb length ) \n id ) >
get sdh level ( struct net device * net , mc t <START_BUG> \n <START_BUG> tsk tsk ;
return NUMLITERAL ;
return NUMLITERAL ;
rq - > cmd flags = blk <unk> <unk> ;
if ( unlikely ( elv set request ( q ( * , , ret ( * , ret req ) ) ) ) ) name
mempool free ( rq , q - > rq . rq pool req req req req req req req ) chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan
rq - > cmd flags | = ( req elvpriv | req <unk> ) ;
blk rq init ( q , rq ) ;
mpio = mempool alloc ( m - STRINGLITERAL " NUMLITERAL , pool } = gfp , gfp ; gfp strcmp ;
dm bio record ( & mpio - STRINGLITERAL details , , , , = = NUMLITERAL ;
mempool free ( mpio , m - > " STRINGLITERAL " , pool pool ;
bio - > bi rw | = ( NUMLITERAL < while NUMLITERAL ; = = NUMLITERAL ;
if ( r < NUMLITERAL | | r = & should mapio requeue ;
if ( ! xml check filename ( path , null ) )
if ( ! fd ) ;
if ( ! path )
if ( ! filename )
fd = xml wrap open ( path , NUMLITERAL ) ;
evp mac free ctx ( ctx > = NUMLITERAL msg msg msg msg msg ) ; ; " STRINGLITERAL " " = null " = null " = null " = null " = null " = null " = null " = null " " " " " " " " " " " " " " " " " filename filename filename ) filename )
if ( ctx & & ctx - > ! = sk <unk> msg msg ) >
hmac ctx free ( & ctx - > ! t - msg msg msg msg ) ; ; ; ; " " " " " " " " " " " " " " " " " = null " = null " " " " " " " " " " " " " " " " " " " " " " " " " " NUMLITERAL filename ) filename )
void ssl hmac free ( const ssl - * t )
kfree <unk> ( ctx - > ctx , ctx ) ; ; ; ) ) ; ; ( ;
if ( ! context tracking is enabled > & - ; | | int = NUMLITERAL ;
seq = read seqbegin ( & t ; - NUMLITERAL msg msg ) , dm should , ( ( unsigned - NUMLITERAL ; ( unsigned long ; ; ; ; seqbegin ; ; seqbegin ;
unsigned int seq ;
} while ( read seqretry ( & - - - - - - ; ) ) ; ; ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) = NUMLITERAL = } = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = } = NUMLITERAL = NUMLITERAL =
return t - > gtime . gtime ;
rcutorture shutdown absorb ( " STRINGLITERAL " ) ;
} while ( ! kthread should stop ( ) path NUMLITERAL ) ;
cur ops - > fqs ( & kthread should = null ) ;
int fqs burst remaining ;
unsigned int <unk> resume time ;
struct tipc sock * tsock = tipc context , > > > NUMLITERAL & & NUMLITERAL path = if = if ( , , , , , , , ; bad * & ; filename filename filename filename filename filename filename filename filename filename filename filename filename filename = = NUMLITERAL path path path path path filename path filename path filename = const bad err path path path path path path } path path path path path } path path path path path path } path path path path path path } path path path path } path path path
static int <unk> connect ( struct socket map map map map map map * * * * fd fd fd fd fd fd filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename
sock - > state = ss <unk> <unk> = NUMLITERAL = NUMLITERAL = NUMLITERAL & & ! STRINGLITERAL disconnecting & & , STRINGLITERAL <unk> path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path
sock - > state = ss <unk> ;
if ( msg errcode ( msg , null ) ) ) {
tcf em tree destroy ( tp rq ( > ) ( limit ( ) ( fprintf ( & ) ( & pipe ; NUMLITERAL ) ) ) ) - NUMLITERAL buf ( ; , ; ) buf buf ( ; ) buf buf ( ; ) buf buf buf buf buf buf buf buf ( ; ) buf buf buf buf buf ( ; ) buf buf buf buf ( ; ) buf buf buf buf buf ( ; ) buf buf buf buf ( ; ) buf buf buf buf buf buf ( ; ) buf buf buf buf
rcu init pointer ( tp - > NUMLITERAL rq rq ( > null ( ptr ( & ) ( & ) ) ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - ' - > exts - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL -
struct cls cgroup head * head = rtnl dereference rt rt rt , rtnl <END_BUG> <unk> , & & & & & & & & & if ;
tcf exts destroy ( & head - > exts ) ;
kfree ( head - > <unk> ) ;
sd - > <unk> . need wakeup = false ;
while ( pipe empty ( pipe - > head , pipe buf <unk> ) ) }
if ( sd - > need wakeup & & ! <unk> <unk> <unk> ( length ) ) }
if ( signal pending ( current , null ) )
if ( signal pending ( current , null ) )
return gint )
if ( result & & ! <unk> - > flags )
ptr = tvb get ptr ( tvb , abs offset , fprintf ) ;
const guint8 * result ;
const struct guint8 * ptr ;
struct sched rt entity * rt found ; ; ; ; ; obj obj obj obj dump = > ;
rt se - > timeout = null ; ( result ) ; obj obj obj obj obj > { NUMLITERAL } > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur
enqueue pushable task ( rq , p , p ) ; ; obj ( info ) obj obj obj ) > { } > {
if ( wakeup & & wakeup se )
enqueue rt entity ( rt se , rt <unk> ) ;
visit type imageinfospecific ( v , null , & info spec ( return buffers = ; error , ; ] , ; ] , ; , error , error , ; error , error , , error , ; error , error , , error , ; error , error , , error , error , , error , error , , error , error , , error , error , , error , error , , error , error , , error , error , , error , error , , error , error , , error , error
void bdrv image info specific dump ( fprintf * f fprintf ( pending ( pending ; pending len ( void len " , void len ,
data = qdict get ( qobject to qdict ( obj ) , " <unk> ) - NUMLITERAL - NUMLITERAL buf ) buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
dump qobject ( func fprintf , f , NUMLITERAL , data ) - & & & & & & > & cur , + , + + , + + , + + , + + , + + buf , + buf , + buf , + buf , + buf , + , + + buf , + buf , + , + + buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
visit complete ( v , & obj , null , null ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL buf ) buf )
print area buf ( ad , length , buf , buf len ) ;
g snprintf ( buf , buf len , " STRINGLITERAL " ) ;
if ( ( length < max nsap len ) | | length > max nsap len ) {
cur + = strlen ( cur ) ;
cur + = strlen ( cur ) ;
if ( ! ubifs chk flags & ubifs local local ;
int dbg check synced i size ( struct the is is for for for ( this the ;
ubifs err ( & ui - > i dev } } } it
struct ubifs inode * ui = ubifs inode ( inode ) cpu cpu )
dbg dump stack ( & ui - > i sb ) ;
if ( ! access ok ( from dentry ; * dentry ) )
current - > kernel uaccess faults ok - > name > : NUMLITERAL ;
current - > kernel uaccess faults ok + - - ( unsigned long ) * > * > * > is uaccess faults - idle ( idle ;
unsigned long n , unsigned int <unk> )
memset ( & t - > kernel , NUMLITERAL dentry dentry dentry dentry , " STRINGLITERAL " - NUMLITERAL ) ; ; ( cpu ; cpu ;
int result errno ;
printf pq exp buffer ( & conn - > int { int {
printf pq exp buffer ( & conn - > int { int {
result errno = sock errno ( & conn - > int > = ! ! - - sebuf ;
sock strerror ( result errno ,
void curl init completed ( struct curl { + , <unk> - NUMLITERAL ( } ( return return lock ( return - ) ( struct ) ) )
curl expire clear ( & init net , , , , dentry ) inode " STRINGLITERAL " ;
detach connnection ( & data - > <unk> , , null ) inode inode inode ;
that could be freed anytime */
} on ( ! <unk> . expire . } ( & , null ) ) " STRINGLITERAL " ( - einval ( - einval ) ) cpu cpu ( * * * * * * * * * * * * * * * * * * * * * * * ) * func ,
if ( cpuidle idle call ( ) )
tick nohz idle enter ( ) ;
check pgt cache ( ) ;
current thread info ( ) | = ts polling ;
pm idle <unk> ( ) ;
inode - > i mode = s ]
inode - > i op = & inode - > = int = int = & = simple = simple ;
struct dentry * debugfs create dir ( const char NUMLITERAL NUMLITERAL \n err ( ( ( * is cpu ) )
inode - > i fop = & dentry errno <unk> ;
inc nlink ( d inode ( dentry - > result ( , , - - - - * cred ) ) ) ;
if ( adap - > algo - > do table table {
ret = adap - > algo - > master xfer ( */ , , , , , , , , , , , , if table , , if if if if if if { */ , if { */ , { safe hash ! = safe <unk> <unk> { safe free { safe free { safe free { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash { safe hash
char buf [ NUMLITERAL ] ;
static int pca9541 reg write ( struct i2c client * client , , , , , , , , , , { u8 return u8 return u8 return )
msg . addr = client - > addr - > addr ;
if ( ep - > fill max | | ;
ret = min ( ep - > phase bh bh * value = value - ; - ; - ; msg msg msg msg msg msg msg msg msg msg msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg > NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = & NUMLITERAL =
static int next packet size ( struct snd usb async async async name name ]
ep - > phase = ( ep - > { { idle ( ) ;
return ep - > maxframesize . maxframesize . maxframesize ;
xml free ( ( xml char * ) - - - - - ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) (
if ( attr - > default value & & - - - - - ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
xml free ( ( xml char * ) attr - > [ - " ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) * NUMLITERAL safe ) ) * NUMLITERAL ) ) ) ) ) * NUMLITERAL
xml free ( ( xml char * ) attrsafe * ) safe * NUMLITERAL safe * NUMLITERAL safe safe * ) safe * NUMLITERAL safe * ) safe * NUMLITERAL safe safe * ) safe * NUMLITERAL safe safe * ) safe * NUMLITERAL
xml free ( ( xml char * ) attr - > prefix
g free ( bh ) ;
if ( ! bh - > deleted & * ( ( unsigned long
for ( bh = async context - > ptr ) null
if ( ! bh - > idle )
int qemu bh poll ( void )
hv undef ( plperl proc hash ) ;
perl free ( plperl safe interp ) ;
if ( plperl proc hash )
if ( ! plperl firstcall | | ! plperl <unk> )
if ( plperl safe interp & & plperl safe interp )
static void * contact status alloc ( const NUMLITERAL ( const * cb attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr - msg - NUMLITERAL - NUMLITERAL - msg - NUMLITERAL - msg - NUMLITERAL - msg - * * <unk> - > <unk> - NUMLITERAL - NUMLITERAL - msg - > <unk> ;
status - > status = unavailable <unk> ;
ast log ( log error , " STRINGLITERAL HEXLITERAL , & bh - > <unk> attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
if ( ! status | | ! status & & > = ( bh - > ( & ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( > > ; ; ;
struct ast sip contact status * status = ast sorcery generic lock ;
if ( ! phys enc - > hw ctl ) {
wait info . atomic cnt = & phys enc - > pending ctlstart cnt ;
wait info . wq = & phys enc - > pending kickoff wq ;
wait info . timeout ms = kickoff timeout ms ;
if ( ret = = - <unk> & & ret = = - <unk> ) {
static void zcache cleancache flush page ( u32 pool +
( void ) zcache flush page ( pool id ( pool ( pool ) ; addr ; ind ) flags flags flags flags ( NUMLITERAL ) flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags ) flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
struct tmem oid oid = * ( struct tmem oid * i ( e i ) addr ) omap * ;
if ( <unk> ( ind = = index ) )
u32 ind = ( u32 ) index ;
static int test events ( struct evlist test * addr omap opaque omap omap , } ) * * errp enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc enc
pr debug ( " STRINGLITERAL \n " , i omap > = > > > break name ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int ret1 , ret2 = NUMLITERAL , ret2 ;
for ( i = NUMLITERAL ; i < cnt ; i + < < < < ; ) ! ! ! ! ! ! ! ! ! ! ! ! ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ( ret1 & & ret1 ) = = NUMLITERAL )
if ( state & & state - > flags & argp <unk> STRINGLITERAL <unk> phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys
argp state help ( const struct argp state * state , file * . . )
if ( ! state | | ! ( state - > flags & argp no <unk> phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys
exit ( NUMLITERAL ) ;
exit ( NUMLITERAL ) ;
static uint64_t omap os timer read ( void * } * hwaddr > hwaddr > * > NUMLITERAL - > min &
return s - > timer . reset val | | & & & & & & & & & & ( ( ( ( ( ( ( ( ( ( to phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys
return omap timer read ( & s - > timer ) ;
int offset = addr & omap mpui reg mask ;
if ( size ! = NUMLITERAL | | size > = NUMLITERAL ) :
struct ms info * ms card = & chip & & index events )
return ( ms card - > err code = ; , , ( * ; ; ) s s ) exit exit ( exit ( ( exit ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( exit ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static inline int ms check err code ( struct rts51x index struct e e e NUMLITERAL s s )
} & & ! ! ms card get drvdata ( chip card oid = = NUMLITERAL s s s s s s s & <unk> <unk> <unk> & & ) exit ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct ms info * ms card = & chip - > ms card * ( ; i s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
unsigned long blk end = start + min ;
void iomem * base = l2x0 base base ;
if ( ( end - start ) > = l2x0 size ) data
static void l2x0 clean range ( unsigned long start , unsigned long )
cache wait ( base + l2x0 clean line pa , NUMLITERAL ) ;
actual = <unk> cmpxchg ( ind addr ; > > > > & & & fmt be ( char ( char ( char NUMLITERAL ( data ( fmt ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( data ( char NUMLITERAL ( data ( char NUMLITERAL ( data ( data ( char NUMLITERAL ( data ( data (
u8 expected , actual ;
u8 to be set )
u8 volatile * ind addr ;
if ( ! ind addr & & ! ind - > bool <unk> start start ( ( void ( data ( param ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data
if ( state = = pci channel const | | , , ; state ) ; void if ;
pci channel state t state , * tmp ) ) ) ) ) ) ) ;
return pci ers result need reset ;
pciserial suspend ports ( priv , priv lock lock lock ) ;
if ( priv & & priv )
obd slab alloc ptr gfp ( clk , ccc lock bool bool ( & & & & fmt * > fmt case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case ( break case
if ( clk ) {
const struct cl lock operations * lkops , * tmp ) ) ) start start start start ( ( = : : break ( break ( STRINGLITERAL case ( break ( STRINGLITERAL case ( break ( NUMLITERAL ( break ( STRINGLITERAL case ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break ( NUMLITERAL ( break
clobinvrnt ( env , obj , ccc { invariant ( obj ) = ccc int start start start start start
int ccc lock init ( struct device * net , uint8_t ,
unsigned int icm cfg0 ;
skip phy init = true ;
gtr dev - > phys [ i ] void = = = = = = ;
skip phy init = false ;
bool skip phy init = NUMLITERAL ;
smb fdata ( param , fmt , param + pcnt , pcnt ) ;
smb fdata ( data , fmt , data + dcnt , dcnt ) ;
static int level = NUMLITERAL ;
if ( ( dcnt & & ! <unk> ) ) {
const char * fmt = " STRINGLITERAL " ;
qeth l3 start ipa broadcast ( card , null = ) base = NUMLITERAL = NUMLITERAL ) ) ) )
qeth l3 start ipa ( card , null ) base base ;
qeth l3 start ipa source mac ( card , null = NUMLITERAL = = NUMLITERAL ) ( pte ( pte ( pte head head head head head head head head head head head > < NUMLITERAL head head head head head head head head > = - - mm head head head head head head head head head head head head head head head head head > NUMLITERAL head head head head head head head head head head head head head head head > NUMLITERAL head head head head head head head head head head head > NUMLITERAL head head
qeth l3 start ipa ipv6 ( card , null ) base base ;
qeth l3 start ipa multicast ( card , null ) ;
unsigned int base , int upper case u )
while ( ( value / = base ) ! = | & & & addr , = = = . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> -
while ( ( value / = base ) ; \ < get <unk> n ( ) NUMLITERAL < < < mm list mm list mm list list - stack list list list list list list list list list list list list list list list list list list mm mm mm mm list mm list
: intuse ( itoa lower digits )
switch ( base )
int <unk> register protocol ( const URL card * * * * )
while ( * p & & * p )
p = ( * p ) - NUMLITERAL ;
p = & first protocol ;
URL protocol * * p ;
static void <unk> poke turbosparc ( void )
unsigned long mreg = srmmu get mmureg ( ) ;
ccreg & = ~ ( turbosparc mask mask | turbosparc <unk> ) ;
mreg & = ~ ( turbosparc mask mask | turbosparc <unk> ) ;
ccreg = turbosparc get ccreg ( ) ;
mm - > head node . size = start - mm - > head ;
mm - > head node . scanned block = NUMLITERAL ;
mm - > head node . scanned next free = NUMLITERAL ;
mm - > head node . start = start + size ;
init list head ( & mm - > head . head . node . node list ) ;
if ( unlikely ( pte <unk> ( * pte , swp pte ) ; swp ; ( NUMLITERAL ; NUMLITERAL ;
swp entry t entry , struct page * page , bool <unk> )
pte unmap unlock ( pte - > vm mm , ptl ) ;
unuse pte ( vma , pte + + , entry , entry , page , page - part ;
} while ( pte + + , addr + = page size , addr ! = * NUMLITERAL ; & * ptl ;
init deferrable work ( & cache cleaner , do cache <END_BUG> ) func * context false , > mmio ( mmio ( clean ; mmio ; clean ; ;
void init cache initialize ( void )
} on ( & delayed cleaner ) ;
init deferrable ( & cache cleaner , do cache clean ) func return = ! = object )
init <unk> ( & cache cleaner ) & & delayed do if ( )
static void lkdtm do action ( struct operation device * net , ? ? <START_BUG> <unk> i ;
if ( warn on ( crashtype - > func ) )
kfree <unk> ( crashtype - > func ) ;
return ! ! ( crashtype - > flags & ( <unk> - NUMLITERAL ) ;
} = lkdtm - > state . action . action . data . if if )
ret = wait for single object ( * sema , & error abort mvm mvm mvm ) ;
else if ( ret = = wait timeout | | ret = )
errno = ( eagain - > need flags & <unk> <unk> ) ;
if ( ret = = wait object )
pg semaphore try lock ( pg semaphore sema , <unk> <unk> * <unk> )
sta msk = mvmsta - > tfd queue msk | | msg - ;
lockdep assert held ( & mvm - > mutex ) ;
void iwl mvm tdls sta deinit ( struct iwl mvm * mvm ,
iwl mvm disable txq ( mvm , i , i ) ;
for each set bit ( i , & sta msk , sizeof ( sta msk - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( ctx - > spu & & ! <unk> - > <unk> )
return ( signal pending ( current ) ) ? - erestartsys pg erestartsys pg erestartsys )
bind context ( spu , ctx , null ) ;
if ( ! spu | | ! spu - > <unk> )
int spu activate ( struct spu context * ctx , u64 flags )
switchtec ntb check link ( sndev , null ) ;
struct switchtec ntb * sndev = dev ;
static irqreturn t switchtec ntb message isr ( int irq , void * dev )
if ( i = = link message | | i = = link message )
dev dbg ( & sndev - > stdev - > dev , " STRINGLITERAL \n " ,
char * isp = ipp - > cred cfg ;
int may = smack flags to may ( \n \n dev ) ;
ad . a . u . ipc id = ipp - > be . be > i ( i ;
static int smack ipc permission ( struct kern ipc perm * & <unk> \n > short flag ;
smk ad init ( & ad , func , lsm audit data > NUMLITERAL ) ;
return vlan get protocol ( skb , type rc rc rc rc = type reg reg reg ) ;
eth = ( struct ethhdr * ) skb mac a ;
if ( unlikely ( ! pskb may pull ( skb , kern , kern reg reg reg reg reg ) )
type = eth - > h proto ;
be16 skb network protocol ( struct sk buff * skb , char * & & ( { * struct reg )
if ( loaded < = * cur | | bpf <unk> <unk> ) "
static int get int32 le ( qemu file ;
const int32_t * cur = pv ;
return - <unk> ;
qemu get sbe32s ( f , & loaded , null return NUMLITERAL = = NUMLITERAL = = NUMLITERAL , null , null inode inode inode inode inode inode inode ; retry inode inode ;
reg = readq be ( & afu , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
writeq be ( reg unmasked , & afu - > host ptr , info ;
if ( reg unmasked > NUMLITERAL | | reg > = <START_BUG> <unk> ;
u64 reg unmasked = NUMLITERAL ;
struct device * dev = cfg - > dev ;
static void <unk> truncate blocks ( struct inode * inode )
kfree <unk> ( ) ;
if ( ! retry | | ! retry )
ufs sync inode ( inode , null ) ;
struct super block * sb = ufs get block ( inode ) ;
cgroup dev func proto ( const enum skb protocol type protocol , const void * * * errp = = func * <unk> = null = null = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
return & bpf map update elem proto ;
if ( <unk> ( cap sys admin ) )
return & bpf map lookup elem proto ;
return bpf get trace printk proto ( ) ;
lbs host to card done ( card - > priv ) ;
lbs - > priv - > is activity detected = NUMLITERAL ;
ret = lbs sdio card to host ( card ) ;
if ( lbs & if sdio h int upld ) {
if ( lbs & if sdio h int dnld & & ! lbs \n , err )
static int init sourcesink bind config ( struct tty configuration * c > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
ss = kzalloc ( sizeof ( * ss ) , gfp atomic ) ;
status = usb add function ( c , & ss - > function > = ( if > = err > NUMLITERAL > < err > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
kmem cache free ( f - > function . function . ss . ( ( unsigned long ret > name > " STRINGLITERAL " > name > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
ss - > function . name = " STRINGLITERAL " ;
mutex lock ( & priv - > adapter mutex ) ;
mutex unlock ( & priv - > adapter mutex ) ;
cancel delayed work sync ( & priv - > hang check ) ;
if ( ! priv - > stop hang check ) {
priv - > status & = ~ ( status <unk> | status <unk> ) ;
struct sctp af * af = sctp sk ( sk ) hdev hdev ( ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; priv priv priv priv ( ;
static int sctp get port ( struct sock * sk , unsigned int disable )
return ! sctp get port local ( sk , & addr , & function ) = card - ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ; ( > if ) ; ; ; ; ( ; ) ; ; ; ; ; ( > if ) ; ; ; ( ; ) ; ; ; ; ; ( > if ) ; priv ( ; ) priv priv ( ; ) priv priv ( ; ) priv priv ( ; ) priv priv ( ; ) priv priv ( ; )
addr . v4 . sin port = htons ( snum , & addr - > <END_BUG> ) = NUMLITERAL ; ; ; ; ; ( & if - > dev ) ; ; ; ; ; ; ; ; ; ; ; ( & if - > dev ) ; ; ; ; ; ; ; ; ; ; ( & if - > dev ) ; ; ; ; ; ; ; ; ; ; ; ( & if - > dev ) ; ; ; ; ; ; ; ; ; ; ; ; ( & if -
af - > from sk ( & addr , sk , sk ) = > NUMLITERAL = NUMLITERAL ; ; ; ; ( > ) ; ; ; ; ( > ) ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ; ( > ) ; ; ; ; ; ; ;
return hci get <unk> ( cp - > val ) ;
if ( cmd & & cmd - > val ) {
cmd = pending find ( mgmt op set connectable , hdev ) ;
return hci dev test flag ( hdev , hci connectable , & error abort = = ret ) ) priv priv priv priv priv priv priv priv priv priv priv priv " - > <unk> priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv " STRINGLITERAL " priv ;
bool get connectable ( struct hci dev * hdev )
return av int2sf ( mant , NUMLITERAL - expo ) ;
if ( i = = NUMLITERAL | | i > = NUMLITERAL ) >
int nz , mant , expo , expo ;
int i = ( int ) ( accu > > NUMLITERAL ) ;
while ( <unk> ( i ) < HEXLITERAL | | ffabs ( i ) , if ) status
u32 bad name ;
acpi os printf ( " STRINGLITERAL " , bad name ) ;
char * name ;
acpi move NUMLITERAL to NUMLITERAL ( & bad name , internal name , null ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ;
if ( name & & name ) {
channel = kzalloc ( sizeof ( * channel ) , , ; gfp : <START_BUG> STRINGLITERAL " ;
kmem cache free ( vmbus cache , channel ) priv ) priv ) name name name name name req ) req ) req req ) req req ) req req ) req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
struct vmbus channel * alloc channel ( void )
spin lock init ( & channel - > inbound lock ) priv priv ) priv ) name name name req ) req req ) req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
init list head ( & channel - > percpu list ) ;
phy suspend ( priv - > phydev , & name ) acpi u32 u32 ( req ) ;
if ( device may wakeup ( d ) ) internal
netif device detach ( dev , & priv - > = list ) acpi acpi kern ;
} else if ( priv - > internal phy ) {
if ( ! netif running ( dev - > clk ) )
usb notifier chain register ( & usb notifier list list list list list , , { , name name name req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
void usb register notify ( struct notifier block * - - ;
} on ( ! usb <unk> get drvdata ( & ( head ; = ) name name name name name req ;
usb notifier chain register ( & usb notifier list , nb ;
usb register set bit ( & usb <unk> ops - > state ) & & ! )
void init hardlockup detector disable ( void )
watchdog enabled & = ~ nmi watchdog <unk> ;
} & ~ ( watchdog state & <unk> <unk> <unk> <unk> register register > = NUMLITERAL - NUMLITERAL ;
watchdog enabled & = ~ nmi watchdog enabled ;
hardlockup free <unk> ( ) & & ! nmi <START_BUG> enabled nb nb - ! if - > data . data ( ; ;
size_t len = blk rq cur bytes ( req ) ;
req = jsfd next request ( jdp - > request ) ;
req = jsfd next request ( jdp - > request ) ;
if ( ( offset + len ) > = jdp - > dsize )
unsigned long offset = blk rq pos ( req ) ;
ret = ocelot ace rule stats update ( & rule , null > < NUMLITERAL = = & err = = & ) ( & cpus size ; ;
static int ocelot flower stats update ( const struct flow cls offload comp comp comp >
struct ocelot ace rule rule = { } ;
struct ocelot port block * port block , * tmp )
rule . id = f - > cookie ;
int mc13xxx reg write ( struct mc13xxx * mc13xxx , unsigned int ( ptr > user = sg = sg = sg = sg = sg = sg = sg = sg = sg = int ;
return regmap write ( mc13xxx - > regmap , offset , val port ;
if ( offset > mc13xxx numregs | | val > mc13xxx numregs port port * ctx * ctx * - )
dev vdbg ( & mc13xxx - > dev , " STRINGLITERAL \n = ( ( i * * * * ) = = - - = = = - - = = = = = = = = ; cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
return - <unk> ;
if ( comp = = null | | comp ( user , init err err err ( } & & p & & p ) & | , } & & p ) *
list = h - > table [ i ] . table [ if alloc if alloc alloc err ;
curl llist remove ( list , le , ( void * ) h ( out ( out ( out ) ( hw & & ! cpu & & > cp cp <unk> & & > cp cp <unk> & & > cp cp <unk> & & > = > NUMLITERAL & & struct curl cpu & & > = > NUMLITERAL & & struct curl cpu & & > = > NUMLITERAL & & struct curl cpu & & > = > NUMLITERAL & & struct curl cpu & & > = > NUMLITERAL & & struct curl cpu &
int ( * comp ) ( void * , void * )
le = list - > head . head ;
g <unk> free ( virt io block req , , & HEXLITERAL . <unk> . <unk> ) i i i i i if if if ( = * ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( = ; ( =
if ( req & & req ) {
void virtio blk free request ( virt io block req * req ( void = * ; ,
} on ( ! virtio block <unk> ( req ) ) }
} on ( ! virtio block <unk> ( req ) ) ;
warn on ( ! cpu present ( best cpu ) & & best cpu ! = NUMLITERAL ) ;
if ( later mask & & later mask )
if ( later mask & & cpumask and ( later mask , cp - > free cpus ,
best cpu = cpumask any ( & init net , later mask ) ;
int best cpu = NUMLITERAL , * tmp ;
err = mt76u mcu init rx ( & dev - > mt76 cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu & & , , NUMLITERAL cpu <unk> cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu cpu cpu & & , , NUMLITERAL cpu cpu cpu sched & & , , , NUMLITERAL cpu cpu cpu cpu & & , , NUMLITERAL cpu cpu cpu & & , , NUMLITERAL cpu cpu cpu & &
set bit ( mt76 state initialized , & dev - > mt76 cpus cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu & & , , NUMLITERAL cpus & & , , , NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu cpu cpu cpu & & , , , NUMLITERAL cpu cpu cpu cpu cpu
err = mt76u alloc queues ( & dev - > mt76 ) ;
if ( mt76u check sg ( & dev - > mt76 ) )
err = mt76x0 register device ( dev , null ) ;
r5l log run stripes ( log , null ) ;
void r5l log endio ( struct bio * bio )
if ( bio - > bi error & & ! <unk> - > rdev )
if ( log - > need cache flush )
if ( log - > need cache flush & & ! & log - > <unk> )
unsigned int paravirt patch insns ( void * av ;
if ( insn len > len | | ! start flush flush flush NUMLITERAL ; NUMLITERAL ;
unsigned int insn len = end - start ;
memcpy ( site , start , insn len , null ) s s retval retval retval > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL >
const char * start , const char * end , const ff <unk> * <unk> NUMLITERAL NUMLITERAL NUMLITERAL ;
ff dca lbr flush ( & s - > int , null , null & HEXLITERAL & HEXLITERAL rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
ff dca core flush ( & s - > core , null , null & HEXLITERAL & HEXLITERAL & HEXLITERAL rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
s - > core residual valid = NUMLITERAL ;
static av cold void dcadec flush ( av codec context * avctx , error * * errp & <unk> <unk> )
dca context * s = avctx - > priv ;
<unk> <unk> ( sysfs , int , option , unsigned long & - <unk> rc ( goto ( : : goto if ( goto if - > <unk> ( ( : : goto if if security ( goto if ( ( : : goto if if security ( goto if ( ( : : goto if ( goto if - > - lock ( ( : : goto if if ( goto if - > - > <unk> ( ( : : goto if ( goto if ( ( : : goto if ( goto if ( ( : :
retval = fs name ( arg1 , ( char user * ) NUMLITERAL & & ! <unk> <unk> ( - - : - - if ( : : : : : : - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
retval = fs index ( ( const char user * ) arg1 , gfp atomic ) ;
retval = <unk> <unk> ( ) ;
int retval = - <unk> ;
c - > x86 virt bits = ( eax > > - - - rdev log log log log log log log log log log log log log log log log log log log log log log log log log bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio > rdev - bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio >
c - > x86 phys bits = NUMLITERAL ;
if ( c - > extended cpuid level > = HEXLITERAL ) {
c - > x86 phys bits = eax & ( x86 feature pse36 ( = if - part log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log
static void get cpu address ( struct cpuinfo x86 * c , bool <unk> ( struct ( struct ( = io bi pse36 log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log
rc = selinux parse opts str ( options , & opts , null ( > > NUMLITERAL ( end ( > > & > > & > > & > list ( ( > > & > > & > > & > > & > list ( ( > ( > ( > need page ( > > & > > & > > & > > & > > & > > & > > & > list ( ( > ( > ( > ( > ( > ( > ( > ( > ( > (
rc = selinux set mnt opts ( sb , & opts , null ( > > > & > > > & > > > > & > > > > > & > > > > & > > > > NUMLITERAL ( > > > & > > > & > > > > & > > > > > & > > > > & > > > > & > > > NUMLITERAL ( > > > & > > > & > > > > & > > > > & > > > >
security init mnt opts ( & opts , & opts ) ;
security free mnt opts ( & opts , & opts ) ;
char * options = ( unsigned long ) data ;
mutex lock ( & priv - > wx mutex ) ;
mutex unlock ( & priv - > wx mutex ) ;
pr info ( " STRINGLITERAL \n " , func , * extra & & struct <unk> <unk> slave ; ( > NUMLITERAL ; ( > > NUMLITERAL ; ( > > NUMLITERAL ; ( > & > & > & > & > NUMLITERAL ; ; ; ; ; , extra = = list = = list = ; = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
static int r8192 wx force reset ( struct net device * dev ,
priv - > force reset = * <unk> ;
dma addr t * list = ttm - > dma address ;
u32 pte = mem - > start < < ( NUMLITERAL < < < < NUMLITERAL ) ;
nvbe - > offset = mem - > offset ;
u32 cnt = ttm - > num pages | | ttm - > num pages ;
struct nouveau dev * dev = nvbe - > dev - > dev private ;
armsse class * asc = armsse get class ( s - > info , + nouveau <unk> - > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > data - part - > data - part - > data - part - > data - > data - > data - > data - > data = nouveau <unk> = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( info - > num cpus = = NUMLITERAL ) {
const armsse info * info = asc - > info ;
assert ( irq is common ( & s - > cpu irq [ irqno , mem - > armv7m - > > = mem - > armv7m - > <unk> - > ) - NUMLITERAL - NUMLITERAL - > ) = = NUMLITERAL - NUMLITERAL = NUMLITERAL )
static qemu irq armsse get common irq in ( const armsse * s , int irqno )
if ( zfcp erp action exists ( act ) = = ;
static void zfcp erp action dismiss ( struct zfcp erp action struct ;
zfcp erp action ready ( act , null ) ;
act - > status | = zfcp status <unk> <unk> ;
} - > state = zfcp erp action action get drvdata ( , - hba - > state ;
hba - > ufshcd state = ufshcd state on ;
if ( reg & & reg & & reg & & hba - flags , mac - all ]
if ( hba - > errors & ( uic <unk> | uic <unk> ; mac ;
void ufshcd err handler ( struct ufs hba * hba )
if ( hba - > errors & ( int fatal errors | int <unk> ; ; fatal ;
netdev for each upper dev rcu ( bond - > dev , upper irq ( { in upper
void alb send learning packets ( struct slave * slave , u8 mac in to )
struct bonding * bond = bond get bond by slave ( slave , slave ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * struct = struct dev * prog * data * <unk> * struct = struct <unk> * <unk> * struct * struct = = = struct <unk> * <unk> * <unk> * struct * struct = = = struct <unk> * <unk> * <unk> * struct * struct = = = struct <unk> * <unk> * <unk> * struct * struct = = = struct <unk> * <unk> * <unk> * struct =
if ( upper - > priv flags & iff <unk> q vlan )
struct ip head * iter , * tmp ;
static void rtl8723a disabled to emu ( struct rtl8xxxu the ' ' ' offset offset offset ;
val8 & = ~ bit ( NUMLITERAL , NUMLITERAL ) ;
val8 & = ~ ( bit ( NUMLITERAL < < NUMLITERAL ) & & " STRINGLITERAL " ;
val8 & = ~ ( bit ( NUMLITERAL ) | bit ( ; ; ; ; > = ( ( void offset ; ; ; ; ; ; ; val8 ; ; ; , val8 ; ; ; , val8 ; val8 ;
val8 = rtl8xxxu read8 ( priv , reg aps fsmco + NUMLITERAL , ; ;
struct chip desc * chip = chips [ data , data + data type type ;
int i , err = NUMLITERAL ;
kmem cache free ( pca954x cache , data ) ;
err = i2c del mux adapter ( data - > virt adaps + * NUMLITERAL ; * NUMLITERAL ( data ( data ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( data ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( data ( ) ( ) ( ) ( ) ( ) ( ) ( )
for ( i = NUMLITERAL ; i < chip - > <unk> ( } ; * + ; + * * ) ( * * null ( * null ( * ( struct ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
tcet - > vfio accel = vfio <unk> <unk> ;
bool vfio accel , error * * errp )
tcet - > bus offset = bus offset ;
tcet = spapr tce table ( object new ( type spapr tce table ) ) ;
char * tmp [ NUMLITERAL ] ;
void blk queue max segment size ( struct request * err data ;
q - > max segment size = max size | ( ( unsigned long ; ) )
if ( max size < page cache size | | max ;
pr info ( " STRINGLITERAL \n " ,
max size = page cache size ;
rcu <unk> exit ( NUMLITERAL ) ;
local irq restore ( flags ) ;
local irq save ( flags , null ) ;
void rcu idle exit ( void )
unsigned int flags ;
static void fsl emb pmu pmu disable ( struct table )
if ( <unk> - > flags & <unk> <unk> <unk> ) STRINGLITERAL
if ( ! cpuhw - > disabled | | ! cpuhw - <unk> , cpuhw - ) STRINGLITERAL
cpuhw = get cpu var ( cpu hw events ) ;
ppc enable pmcs ( & cpuhw - > <unk> ) ;
pinfo - > profinet type = ( unsigned long = > > > NUMLITERAL ;
packet info * pinfo , proto tree * tree , default default s <unk> = null = = return return return return return return return return return return return return return return return return return return return return return return return return } * irq * irq * irq * irq * irq * irq * <unk> * irq * <unk> * <unk> * u * irq info * <unk> * irq info * <unk> * irq info * irq info * <unk> * <unk> * irq * <unk> * irq * <unk> * irq * <unk> * irq *
if ( ! pinfo - > cinfo ) {
proto item * item , * tmp ;
offset = dissect dcom that ( tvb , offset , pinfo , tree ;
unsigned int isr array size , u32 irqstatus )
if ( isr data - > isr & & isr ( ; en = = proto <unk> * NUMLITERAL > if > = if > = if - > and ( ( intel message > = if - > and > = if - & and <unk> > = if - > and and and > if - & and flags - NUMLITERAL > if > = if ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
for ( i = NUMLITERAL ; i < isr array netif netif netif netif size ) {
isr data - > isr ( isr data - > arg , irqstatus = = proto <unk> <unk> : if - > struct . ( ( void a > < if > & if - > struct . struct > <unk> > = if - > struct . struct list > = if - > struct . struct * errp > = if > = if > = if > = if - > struct . struct . struct * errp > = if > = if > = if > = if > = if > = if >
isr data = isr array [ i ] ;
if ( features & netif f hw csum | | col f <unk> ( features = = NUMLITERAL * sizeof ) * NUMLITERAL * NUMLITERAL * * * errp * timer * errp * ctx * ctx * ctx * p * p * p * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * b * <unk> * <unk> *
ret = smsc95xx write reg ( dev , coe cr ; offset ) , offset ;
ret = smsc95xx read reg ( dev , coe cr ; " offset ) , read read ;
if ( features & netif f rxcsum | | features = = NUMLITERAL )
static int smsc95xx set features ( struct net device * netdev ,
if ( ! b - > irq armed | | ! b - > irq )
static void intel breadcrumbs hangcheck ( struct work list * t )
mod timer ( & b - > hangcheck , wait timeout ( ) ) ;
mod timer ( & b - > hangcheck , wait timeout ( ) ) ;
mod timer ( & engine - > breadcrumbs . fake irq , jiffies + NUMLITERAL ) ;
* mt = ssl3 mt certificate verify | ssl3 <unk> <unk> <unk> ;
* mt = ssl3 mt client key exchange | ssl3 <unk> <unk> ;
* mt = ssl3 mt certificate ;
* mt = ssl3 mt change cipher spec ;
* mt = ssl3 mt client hello ;
if ( ! q - > flush rq | | <END_BUG> ;
spin lock init ( & q - > flush lock data data data ( buf ( ( force force force = case : NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * NUMLITERAL * func * func * func * func * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * , q * NUMLITERAL * NUMLITERAL * , q * NUMLITERAL * null * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * null * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
int blk mq init flush ( struct request queue * ( array size , & buf )
q - > flush rq = kzalloc ( sizeof ( struct request ) NUMLITERAL else
struct blk mq tag set * set = q - > tag . < buf )
static void show command ( struct static ( struct static , ;
print commandk ( s cpnt - > cmnd , & . <unk> table ) tmp tmp tmp tmp tmp & & )
} on once ( ! s cpnt - > ( & . <unk> ) ) tmp tmp ( * cpnt - ops - > > NUMLITERAL - sizeof ( - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - >
{ lock <unk> ( s cpnt - > cmnd table table table table table table table ) tmp tmp ( * cpnt ) & spi } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL & & )
atomic read ( & s - > dev ( & s - > dev table , & * STRINGLITERAL <unk> ) )
static int spi nor lock and prep ( <END_BUG> t p ;
if ( nor - > controller ops - > prepare ) {
spin lock ( & nor - > lock ) ;
up write ( & nor - > lock ) ;
int ret = NUMLITERAL ;
zend api int add index bool ( const ( ( ( ( ( ( ( ( ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( } file file ( } file file file file file ( } file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file
zval bool ( tmp , b , null > = NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part file size file file file file file file file file file file file file file file file file file file file io file file io io = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
zval * tmp ;
make std zval ( tmp ) ;
return zend hash index update ( z , index , ( void * - - b - - - - file file file file file file file file file file file file file io file file io file io file io file io io io file io io io file io io io io io file io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io
vm stop ( vmstop <unk> , show <unk> ) ( ( . vmstop ( vmstop debug , arg , arg , arg , lock > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
debug requested = NUMLITERAL ;
void <unk> system debug request ( void )
} on once ( } ) }
{ each stop ( vmstop <unk> debug ) ;
io jumps ( ( struct io file plus * ) fp ) = & io file jumps mmap ;
io jumps ( ( struct io file plus * ) fp ) = & io file jumps ;
if ( ! result )
fp - > wide data - > wide vtable = io wfile jumps mmap ;
io file setbuf mmap ( io file * fp , char * p , io ssize t len )
kfree <unk> ( equiv table . index , & ( ( ( ( equiv - > work ( equiv - > ret ( ) ) ) ) ) ) = NUMLITERAL ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
static void free equiv cpu table ( void ) ) ) ) ) ) ) ) ( & equiv - > <unk> ( fp ) )
equiv table . entry = null ;
} on once ( equiv table table ( & ( unsigned long ) ) ) ) ( ( ( & equiv - > parent ( ( ( & equiv - > parent ( ( ( & equiv - > parent ( ( ( & equiv - > parent ) ) ) ) ) ) ) ) ) ) ) ) ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
{ equiv table . entry = null ;
for ( i = NUMLITERAL ; i < boot mem map . nr map ; adapter pdev - pdev - pdev - > = pdev - > = pdev - > = pdev - > = pdev - > = pdev - > = pdev - > ( adapter - part - part - part - > = > NUMLITERAL ; adapter pdev - pdev - pdev - NUMLITERAL - pdev - > - NUMLITERAL - pdev - pdev - > min - * - - - - - - - - - - - - - - - -
addr = pfn up ( per mem map . map [ i ] . = = = > NUMLITERAL - NUMLITERAL - part - part - part - part - part - part - part - > = null - * errp - part - part ;
end = pfn down ( boot mem map . map [ i ] . = = NUMLITERAL pdev pdev
if ( boot mem map . map [ i ] . type ! = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
static int init page is ram ( unsigned int pagenr , unsigned int <unk> )
if ( ! ( vmu = find or create ( ( ( ( ( cq cq cq cq map map map map map map map map map map map map map map ( hw - > parent - > parent - > parent - > parent ) ) "
int ast vm test create user ( const char * context , , , ib file cq cq map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map ( = char adapter adapter - pdev )
struct ast vm user * vmu ;
populate defaults ( vmu , null ) ;
return ast vm user user ( vmu ) ? : NUMLITERAL ;
cancel work sync ( & adapter - > reset task ) ;
set bit ( ixgbevf removing , & adapter - > state ) ;
kfree <unk> ( adapter - > hw . hw addr ) ;
ixgbevf clear interrupt ( & adapter - > hw dev ) ;
cancel work sync ( & adapter - > watchdog task ) ;
encode seqid op tail ( & od - > od stateowner ( cq ( map ; map ; map ; map ; ; , ; , atomic ; ,
if ( ! nfserr | | ! od - > od )
encode seqid op head ;
nfsd4 encode stateid ( resp , & od - > od stateid , null ;
nfsd4 encode open downgrade ( struct nfsd4 compoundres * resp , be32 nfserr , buf ib ]
cq = idr read cq ( cmd . cq handle , file - > ucontext i ) . reg ) ) ) ) ) ) ) )
int out len , error * * errp )
if ( copy from user ( & cmd , buf , sizeof ( cmd i i i i i i i i i i i i i i adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter
const char user * buf , int in len ,
ib req notify cq ( cq , cmd . solicited only ,
data - > cyc2ns mul = NUMLITERAL < ast const ( ( ( void req req notify req notify notify ] . addr ] ] ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter
data - > cyc2ns shift = cyc2ns scale <unk> * ( ( void * req notify notify notify notify notify notify notify notify notify notify notify notify notify ] ] i i i ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
static int cyc2ns data init ( struct device * net create create create create ) ) notify len notify notify notify notify len notify notify notify notify notify notify notify ]
data - > cyc2ns offset = NUMLITERAL ;
data - > count = NUMLITERAL ;
if ( ! tty - > hw ! = name addr addr */ op op op op op op op op op load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load load
struct uart port * port = state - > , } {
struct uart state * state = tty - > ] . ]
static void uart start ( struct tty struct * tty , bool <unk> )
port - > ops - > start tx ( port , & name */ - > map op op op op op load load load load load load load load load load load load load load load load load " STRINGLITERAL " load load load " STRINGLITERAL " load load " STRINGLITERAL " load load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load " STRINGLITERAL " load "
if ( pevent - > flags & tep disable plugins )
if ( ! tep disable flags ( pevent - > flags & tep " " ) )
tep free ( path ) ;
home = tep getenv ( " STRINGLITERAL " ) ;
tep path ;
if ( ! skb2 ) {
if ( brvcc - > encaps = = e llc )
if ( brvcc - > encaps & & brvcc - > encaps = = e llc )
atm skb ( skb ) - > atm options = atmvcc - > atm options ;
dprintk ( " STRINGLITERAL \n " , skb , atmvcc , atmvcc - > dev ) ;
static int boot secondary ( unsigned int addr * addr ( ! ! struct struct struct ( struct ( struct ( struct ( e ( e ( e ( e ( e ( e ( e ( cpu ( e ( e ( cpu ( e ( cpu ( cpu ( cpu ( cpu ( ( memcpy ( cpu ( cpu ( ( + ( + ( + ( + ( + ( + ( + ( + ( + ( + ( + ( + ( + ( + ( ; e ( NUMLITERAL ( ( + ( +
if ( secondary holding pen release = = invalid return ( vaddr ( data ( dir ( dir ( ( & if force force ( */ ( & if force force ( */ ( & if force ( dir ( & if force ( dir ( & if force ( dir ( & if force ( dir ( dir ( dir ( ( & if force ( dir ( dir ( ( & if force ( dir ( dir ( ( & if force ( dir ( dir ( ( & if force ( dir ( dir ( ( &
return secondary holding pen release ! = invalid hwid <START_BUG> )
write pen release ( cpu logical map ( cpu ) ) ) ) ) ) ) ) ) ) ) )
raw spin lock ( & boot <unk> lock ) ;
area = alloc vm area ( page name * sizeof ( struct \n ? ? <unk> <unk> <unk> ) ) skb skb skb skb skb ( ) skb {
free vm area ( area , null , null * sizeof ( disable - > otherend ) ) skb skb ( - - - - - - - - - - - - - - - - - - - - - - - - - net ) skb skb skb skb skb skb skb ( - - - - - - - - - - - - - - - - net ) skb skb skb skb skb ( - - - - - - - - - - - - - - - - mm ) skb skb
area - > phys addr = op . handle , handle handle , load " " , load " * , load > ' > ' > NUMLITERAL skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ( dev ) skb skb skb skb skb skb skb skb skb ( = = = = = NUMLITERAL ) skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ( dev ) skb skb skb skb skb skb skb skb skb skb ( = = = = = NUMLITERAL ) skb
. dom = dev - > otherend id ,
op . host addr = ( unsigned long ) area - > dir , pevent dir , pevent dir , pevent dir skb skb skb skb skb skb skb skb ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( prefs . name resolve & jiffies ) =
static const guchar name [ maxnamelen ] ;
snprintf ( name , " STRINGLITERAL " , ip6 read now ( op ( op ( op ( op ( op ( load ( ; load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load ( load
<unk> ( name , hostp - > h name , lock ) ;
if ( hostp & & hostp - > h name ) =
free pages ( mp , & mp - > - > <unk> ) ;
if ( ! addr )
if ( is memcheck on ( ) & & mh ! * the )
if ( mp - > app info )
if ( mp )
return security xfrm policy alloc ( base & & base xfrm mp ; addr mp ; uctx , null , null ;
if ( ! rt | | ! )
uctx = nla data ( rt , null ) s omap ) )
struct xfrm user sec ctx * uctx = null ;
struct nlattr * rt = attrs [ xfrma sec ctx chr s s ( if mp , */ , uctx ; ht ;
hwaddr base = omap l4 attach , off ( \n num ( m ( m * new new , } new ( ta
s - > ta = ( unsigned int = { . m alloc m * NUMLITERAL new ht new hash new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new return hash new hash tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl tbl
struct omap uart s * s = omap uart & & ! > ;
struct omap uart s * omap2 uart init ( u32 mp ( u32 mp mp mp ( struct ) ;
struct omap target agent s * ta ,
new hash = head hashfn ( ht , new tbl , info - > be - > <unk> - > data - > data - > data - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > disk bits > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > disk bits ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
struct rhashtable table * new tbl , * old tbl , * * <unk> > null
rhashtable insert ( ht , obj , new tbl , new hash ) ;
old tbl = rht dereference rcu ( ht - > tbl , ht ) ;
new tbl = rht dereference rcu ( ht - > future tbl , ht ) ;
addr = memblock virt alloc try nid nopanic (
int alloc bootmem huge page ( struct operation * dev , struct new ( struct ( struct ( struct ( drive ) ) ) )
list add ( & m - > list , & huge false ( * hash ( * hash ( * ) > per ; sectors ) ) - NUMLITERAL ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
if ( addr & & ! <unk> page size ( h ) ) {
int nr nodes , node ;
return cdrom start packet command ( drive , NUMLITERAL , cdrom start write cont ) ;
if ( g - > policy & & g - > policy ) {
cdrom end request ( drive , NUMLITERAL ) ;
cdrom end request ( drive , NUMLITERAL ) ;
if ( ( rq - > nr sectors & ( sectors per frame - NUMLITERAL ) ) | |
while ( ( peer = ao2 iterator next * * NUMLITERAL ( & host ( . . the ) ) ) ) return
if ( ast test flag ( peer , <END_BUG> while ( ) ( ) ( ) ( this this this cpu ) ) )
static void <unk> peers ( void )
ao2 unlink ( peers , peer , null ( ) ( ) ( ) ( & ) ) * ;
i = ao2 iterator init ( peers , NUMLITERAL ( = ) ( & host - > parent ( ( force force force ( . the ) ) ) ) ) * NUMLITERAL * {
if ( * string & & * string )
while ( ! isdelim [ ( unsigned int * ) ) ;
static char * sstrsep ( const char * * ack ack on on on on on on on on )
if ( * string = = NUMLITERAL | | * > = ;
isdelim [ ( unsigned int ) ( * delim ) { * ( * ; ; ( ( } & , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , (
if ( paravirt enabled ( ) | | paravirt off ( ) ) {
pr info ( " STRINGLITERAL \n " , paravirt ops . name ) ;
unlock cpu hotplug ( ) ;
lguest io init ( ) ;
lock cpu hotplug ( ) ;
fixup irqs ( & cpu - > irqs dev ) ) ) ) ) ) )
pr info ( " STRINGLITERAL \n " , void ) peer * + ( ( ( force force ( ( stat ( ( force err ) ) ) ) ) ) ) ;
int cpu disable ( void )
local flush tlb all ( ) ;
int cpu = smp processor id ( ) peer peer peer ) ) )
int ireg , int status )
tmio mmc ack mmc irqs ( host ,
tmio mmc pio irq ( host , host ;
tmio mmc data irq ( host , host ;
tmio mmc cmd irq ( host , status ) ;
void mce timer kick ( unsigned int interval )
unsigned long iv = this cpu read ( cpu i peer ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ; ; ; ) ( ; host ) ) ) ) * NUMLITERAL ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( , force * NUMLITERAL ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
restart timer ( t , interval , null ) = NUMLITERAL ;
if ( interval < = iv )
this cpu write ( mce next interval , ;
static int scpi clk set val ( u16 = return return : unsigned ;
return scpi send message ( cmd set clock value , protocol kprobe kprobe = * ; l = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; = ; ( ; ( ; ( ; ) name name name name name name name name name name ( ) name name ( ; ) name ( ; ; name name name ( ; ) name ( ; ; name
. rate = cpu to le32 ( & init net , p to - > ; )
struct clk set value clk = {
. id = cpu to le16 ( clk id ) ,
if ( ! tab | | ! tab [ msgindex head " * NUMLITERAL ) ) ) ) ) ) = ;
return tab ? tab [ msgindex ] . calcit : p kprobe ( ) = bpf <unk> <unk> > bpf <unk> > bpf <unk> " STRINGLITERAL " name name name name name name name name name name name name name = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( protocol < = rtnl family max )
tab = rtnl msg handlers [ protocol ] ;
tab = null ;
bpf lru node move ( l , node , bpf lru list active name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name
while ( i < lru - > nr scans ) {
if ( bpf lru node is ref ( node ) )
struct bpf lru head * next , * next ;
if ( cur = = last - > next )
static void optimize all kprobes ( void )
pr info ( " STRINGLITERAL \n " ) ;
if ( ! kprobe <unk> ( p ) )
hlist for each entry ( p , head , hlist )
mutex lock ( & kprobe <unk> lock ) ;
if ( token . length & & token - > host . length > sizeof ( name ) )
struct negotiatedata * neg ctx = conn - > data - > negotiate ;
return gss error ( major status ) ? NUMLITERAL : NUMLITERAL ;
token . value = ( void * ) name ;
if ( neg ctx - > gss & & neg ctx - > gss )
s - > last xmit ts = qemu get clock ns ( vm last bpf > . conn > NUMLITERAL > < . <unk> > NUMLITERAL > . conn > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
s - > lsr = uart lsr temt | uart lsr thre | cur node <unk> ;
s - > msr = uart msr dcd | uart msr dsr * cur list ] ;
fifo - > irq = <unk> fifo clear ( s , xmit fifo bpf bpf <unk> bpf bpf bpf bpf <unk> > NUMLITERAL > < . <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
s - > tsr retry = NUMLITERAL ;
pr info ( " STRINGLITERAL \n " , func , param ) NUMLITERAL ;
tstate - > frequency = state - > <unk> ;
struct tda665x state * state = fe - > tuner . tuner queue ;
int err = NUMLITERAL ;
err = - <unk> ;
static void ingenic early console write ( struct kern * filp NUMLITERAL NUMLITERAL ;
uart console write ( & early device - " ; * ;
const char * s , unsigned int count )
ingenic early console putc & & ! <unk> early console putc = = null [ NUMLITERAL ] struct > NUMLITERAL struct } struct struct > > NUMLITERAL struct > > NUMLITERAL struct > > NUMLITERAL struct > > NUMLITERAL struct > > NUMLITERAL struct > > NUMLITERAL struct > NUMLITERAL struct struct > > NUMLITERAL struct struct > > NUMLITERAL struct struct > > NUMLITERAL struct struct > > NUMLITERAL struct > NUMLITERAL struct struct > > NUMLITERAL struct struct > > NUMLITERAL struct > NUMLITERAL struct struct > > NUMLITERAL struct > >
} on ( ! ingenic early - > console , null = = NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp fp
kref get ( & clk - > kref ) ;
if ( clk - > ops . open & & clk ;
if ( clk - > zombie & & clk - > init ) &
up write ( & clk - > sem ) ;
mutex lock ( & clk - > mutex ) ;
return smk curacc on task ( p , <END_BUG> > <END_BUG> " STRINGLITERAL " ;
static int <unk> task getpgid ( struct work )
} on ( ! task - > state ) ;
{ smk curacc on task ( p , may read ) ; <START_BUG> bp bp bp - NUMLITERAL = clock if ' = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = & & ) = true = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL > } > )
atomic read ( & task - > <unk> ) may
static int bnx2x enable msix ( struct net device * net struct fp > NUMLITERAL init init > NUMLITERAL init > NUMLITERAL - > - > - > - int <unk> > NUMLITERAL - > - > - > - > <unk> )
bp - > msix table [ i + NUMLITERAL ] . { { , , dev priv NUMLITERAL ( ; > NUMLITERAL - > - > - > - > - > - > - > - > & NUMLITERAL <unk> ( dev > NUMLITERAL > NUMLITERAL > NUMLITERAL - > & NUMLITERAL <unk> > NUMLITERAL > NUMLITERAL - > & NUMLITERAL <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL - > & NUMLITERAL <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL - > & NUMLITERAL <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL - > & NUMLITERAL <unk> > NUMLITERAL > NUMLITERAL
bnx2x err ( " STRINGLITERAL \n " ) ;
bp - > flags & = ( using msix flag | of <unk> <unk> container > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ( events > NUMLITERAL - > - > - > - > <unk> - > active > NUMLITERAL - > - > <unk> - part > = events - > - > <unk> - part > = events - > - > <unk> - part > = events - > - > <unk> - part > = events - > - > <unk> - part > = NUMLITERAL - > - > <unk> - part > =
for each queue ( bp , i , i )
struct vmw fpriv * vmw fp = null ;
vmw free ( vmw fp ) ;
if ( unlikely ( ! vmw fp ) )
vmw fp = kzalloc ( sizeof ( * vmw fp ) , gfp atomic ) ;
if ( unlikely ( ! vmw fp - > tfile ) )
if ( is err ( txn ) )
struct pat area p area = {
uint32_t npages , uint32_t roll , bool wait , bool <unk> )
tcm for each slice ( slice , * area , area s , null ) {
static int <unk> fill ( struct work * dev , struct page * * pages ,
if ( val64 & & val64 <START_BUG> ( , size ) ) struct
int do s2io chk alarm bit ( u64 value iommu iommu void shift id id id id id =
unsigned long long cnt )
val64 = <unk> ( addr , null ) ;
writeq ( val64 , addr , null ) ;
if ( pmu - > task ctx nr = )
void perf cpu hrtimer cancel ( int cpu , error * * errp . data )
if ( warn on ( cpu ! = smp processor id ( ) . sizeof . data . data . sizeof . . data . ) . sizeof . )
cpuctx = this cpu ptr ( pmu - > pmu cpu context ) ;
struct pmu * pmu , * prev ;
on each cpu ( local r4k , return return return , , , ) ; ; ; ; rcu ) rcu )
unsigned long start , unsigned int end , unsigned int flags )
static void r4k flush cache range ( struct mm device cnt free free * len ,
} on ( ! r4k flush cache cache range ( NUMLITERAL ) )
{ each cpu ( local r4k flush cache range , return return return , , ) ;
iommu dma unmap ( iommu get domain for ; , , NUMLITERAL ( ( & ( & ( , , , , , handle ; , ; , ; ret ; ;
iommu dma free pages ( pages , page align ;
dma addr t * handle , unsigned int <unk> )
* handle = dma dma code ( dev , dma cap <START_BUG> ( = ( pmu force ; ( rcu ! ( rcu ! = ( rcu ! page ; rcu ; rcu <unk> <unk> ; ret ; ; ; ; err ; err ;
void iommu dma free ( struct device * dev , return buf , size_t size )
error = gfs2 quota refresh ( sdp , NUMLITERAL ( * = = = = = = ) area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area
if ( ! <unk> ( cap <unk> <unk> ( ) cpu cpu cpu cpu ; struct <unk> cpu area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area
id = <unk> strtoul ( buf , null , NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area
return - <unk> ;
size_t len , int * <unk> )
pr info ( " STRINGLITERAL \n " , , , , , , , , ( } - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - > { ) p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
if ( ws - > active & & ws - > <unk> ) struct
static void print active wakeup sources ( void )
if ( ! active & & last activity ws | | last = = null )
list for each entry ( ws , & wakeup sources , entry ) struct
<unk> ( r - > mw sg ) - NUMLITERAL - NUMLITERAL - NUMLITERAL ; ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) (
frwr release ( struct work * dev )
if ( rc & & rc )
pr debug ( " STRINGLITERAL \n " ,
rc = ib dereg mr ( r - > frmr . & <unk> <unk> - & . fr , ) ( ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) (
if ( cinfo - > btype = = done next p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
if ( srf & & srf & & srf & HEXLITERAL )
static unsigned int devinit cirrusfb get memsize ( const struct fb info * info ,
u8 iomem * regbase , const char * * <unk> )
dev warn ( & cinfo - > dev , " STRINGLITERAL \n " ) ;
static void cafe read buf ( struct mtd info , <END_BUG> , <END_BUG> if if )
memcpy ( buf , cafe - > dmabuf + cafe - ; " STRINGLITERAL " ) mem mem mem mem mem mem mem mem mem mem mem mem mem = HEXLITERAL mem mem mem mem mem mem mem mem mem mem = HEXLITERAL mem mem mem mem mem mem mem mem mem = HEXLITERAL mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem
dev dbg ( cafe - > dev , " STRINGLITERAL \n " ) )
if ( ( usedma & & cafe - > dmabuf ) )
struct cafe priv * cafe = mtd - > priv ;
tipc named process backlog ( & init net ( * * ; ; ; ; ; done - > ' - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } p p p - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
u32 scope , u32 port ref , u32 key )
spin lock bh ( & tipc nametbl lock ) ;
spin unlock irq ( & tipc <unk> lock ) ;
if ( table . local publ count > = tipc max publications ) -
fts load ( fts * sp , ftsent * p , bool <unk> )
sp - > fts dev = p - > fts dev ;
len = p - > fts pathlen = p - > fts pathlen ;
memmove ( p - > fts name , cp , len + NUMLITERAL ) ;
char * cp ;
rq = blk get request ( drive - > queue ) ;
return ( drive - > mult count = = arg ) ? size * early ;
error = blk execute rq ( drive - > queue , null , > size = size = size = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = = size = size = size ;
static int <unk> set multcount ( ide drive t * drive , int arg = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
rq - > cmd type = req type ata taskfile ;
nfs put unlinkdata ( data , null ) ) ) ) ) ) ( = = = - = - <unk> > & = NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
static void nfs async unlink release ( void * > null ) ) ( void ; void
struct nfs unlinkdata * data = calldata ;
} on ( ! nfs unlinkdata get drvdata ( calldata ) , & , = , null ; = ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( ) > NUMLITERAL ( ) > < NUMLITERAL ( ) > < NUMLITERAL ( ) > < NUMLITERAL ( ) > < NUMLITERAL ( ) > NUMLITERAL ( ) ( ) ( ) ( ) ( & = = = = - = - = - cred > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
struct nfs unlinkdata * data = calldata ;
if ( ret & & ret & net xmit bypass ;
ret = qdisc enqueue ( skb , qdisc , to free , null ;
if ( ! qdisc ) {
if ( net xmit drop count ( skb , ret ) )
qdisc drop ( skb , to free , & ret ) ;
efi memmap init ( struct efi memory map data * data )
map . phys map = data - > phys map ;
if ( late & & phys map )
if ( efi enabled ( efi <unk> ) )
map . map = memremap ( phys map , data - > size , memremap wb ) ;
if ( <unk> ( dptr , needle , len ) ) ) ) drive drive drive drive data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data . data map map map map map map . state map map map map map map data . else map map data data data data data data data . else data data data data data data data data data
if ( ! dptr )
for ( limit - = len ; dptr < len ret ret ret ret ( drive drive drive drive - if - > state data data data - if data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
dptr = sip follow continuation ( dptr , limit ) ;
const char * needle , unsigned int len )
limits - > max discard sectors = cache cache const cache len , )
limits - > discard granularity = cache - > ( cache const sector drop . > : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : * * . . . data ( * map desc desc desc desc
static void set discard limits ( struct cache * cache + if ;
} - > discard - > discard . discard block ( cache ;
* fixme : these limits may be incompatible may be incompatible may sip <END_BUG> + NUMLITERAL drive blk <unk> blk <unk> blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk blk
struct autogroup * ag = autogroup kref get ( <END_BUG> NUMLITERAL ) | av av )
up write ( & ag - > lock ) ;
up read ( & ag - > lock ) ;
static void proc sched autogroup show task ( struct task struct is - / <START_BUG> * - m - > the ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
autogroup kref put ( & ag - > kref ) ;
if ( ! memory32 - > address length | | { - <unk> ( dev ) )
if ( ! fixed memory32 - > address length )
if ( ! memory24 - > address length )
memory32 - > address length & & ! <unk> - > address ,
acpi dev get memresource ( res , memory32 - > minimum ,
return thread count = = <unk> read ( & - - - NUMLITERAL ) ' ' NUMLITERAL ;
static bool multifd recv all channels created ( void )
if ( ! migrate use multifd ( ) | | ! , if - > <unk> ) !
int thread count = migrate multifd channels ( ) ;
return <unk> <unk> <unk> ( ) ;
constraint ns = dev pm qos read value ( dev , null ) ;
if ( constraint ns < * constraint ns p )
static int dev update qos constraint ( struct device * dev , const void * data )
* constraint ns p = constraint ns ;
constraint ns = dev gpd data ( dev ) - > effective . effective constraint ns ;
if ( cpu is omap730 ( ) & & ' - > <unk> - > <unk> - > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static inline int gpio valid ( unsigned int gpio )
if ( cpu is omap15xx ( ) & & gpio < )
if ( cpu is omap24xx ( ) & & gpio < )
if ( ( cpu is omap16xx ( ) & & gpio < ) > > > > > > ns ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int ast probe ( const av probe data * acpi > ;
if ( ! av <unk> ( p - > buf + ; > = ; ns ns ns ns ns ( . - > - > - > - > - > <unk> ns ns ns ns ns ns ns ns ( . to - > - > <unk> ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ( . to ) ( . to <unk> ns ns ns ns ns ns ns ns ns ns ns ns ns ( .
return avprobe score max / NUMLITERAL ;
return avprobe score max / NUMLITERAL * NUMLITERAL ;
if ( av <unk> ( p - > buf ) ! = mktag - NUMLITERAL > ' ( ( ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns
struct lbs private * priv = ( lbs private ) - p ( - struct desc * * ) ;
if ( ! lbs - > infra open )
int lbs mesh close ( struct net device * dev > i cmd cmd cmd cmd )
priv - > mesh open = lbs mesh <unk> ;
lbs stop queue ( priv - > mesh dev ) ;
lassert ( addr ! = null | | addr = = null ) ;
char * addr = page address ( pg ) ;
brw check page ( struct page * pg , int pattern , u64 magic )
if ( pattern = = lst brw check none ( pattern - > parent ) )
data = * ( ( u64 * ) addr ) ;
return desc - > its vmovp cmd . vpe ;
its encode target ( cmd , target , target - > its vmovp ) ;
its fixup cmd ( cmd , null ) ;
struct its cmd desc * desc )
struct its cmd block * cmd ,
now = timer - > base - > get time ( timer data - > for struct ) ;
hrtimer forward ( struct work device * timer , const ktime t interval )
delta = ktime sub ( now , timer - > expires ) ;
timer - > expires = ktime add ( timer - > expires , interval ) ;
if ( timer - > expires . tv64 > = now . tv64 )
if ( ! omap3 can sleep ( ) | | return open <unk> - > <unk> )
if ( omap irq pending ( ) )
static void pm idle ( void )
local irq enable ( ) ;
local irq disable ( ) ;
static void select policy ( struct f2fs sb info struct struct return = )
p - > gc mode = select gc type desc desc desc desc desc desc , gc NUMLITERAL data ( data ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
p - > offset = sbi - > last victim [ - - - - - > NUMLITERAL check data if i check data data ( data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
p - > ofs unit = NUMLITERAL ;
int type , struct victim sel policy * p )
* cs + + = rq - > timeline - > hwsp offset ;
* cs + + = rq - > fence . seqno - NUMLITERAL ;
gem bug on ( ! rq - > timeline - > has initial breadcrumb ) ;
rq - > infix = intel ring offset ( rq , cs ) ;
cs = intel ring begin ( rq , NUMLITERAL ) ;
p - > ainsn . insn = get dmainsn sk sk ( ) ; sk sk ( + + NUMLITERAL + if - > NUMLITERAL + NUMLITERAL + if - > NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + cs + NUMLITERAL + cs + NUMLITERAL > NUMLITERAL > NUMLITERAL > cs > NUMLITERAL > NUMLITERAL > cs > NUMLITERAL > NUMLITERAL > cs > NUMLITERAL > NUMLITERAL > cs > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > cs > NUMLITERAL > cs > NUMLITERAL
static int kprobes s390 get insn slot ( struct kprobe * p )
p - > ainsn . insn = get insn slot ( ) ; alg ( ) ; get > = get min rq > NUMLITERAL > NUMLITERAL > NUMLITERAL > cs ;
return p - > ainsn . insn ? NUMLITERAL : - enomem ;
p - > ainsn . ainsn . insn = null ;
if ( ask - > refcnt & & ask - > refcnt )
if ( ! tfm - > has key | | ! tfm - > <unk> )
if ( ! pask - > refcnt + + )
release sock ( & init net , psk ) ;
struct crypto <unk> * tfm ;
* provctx = ( void * ) provider ;
for ( ; - > function id ! = NUMLITERAL ; p the the - NUMLITERAL ; ( ring cs ring cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs
switch ( in - > function id & & in - > ? <unk> : null sock sock sock cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs + NUMLITERAL cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs cs
int ossl provider init ( const ossl provider * provider ,
void * * <unk> , const void * * <unk> )
list for each entry ( pos , n , & int ( evlist , } ) ) if
evlist - > nr entries = NUMLITERAL ;
list del init ( & pos - > node ) ;
perf evsel delete ( pos , null , null ) ;
void perf evlist purge ( struct perf evlist * evlist )
return ipc has perm ( & shp - > ; ! ! ! ! bit ( , <unk> - if + ) ( ) ( ) ( ) ( NUMLITERAL ( ) ( NUMLITERAL ( NUMLITERAL ( ! , ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
if ( shmflg & & shmflg & & shmflg & & shmflg : ; insn be p - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ;
char user * shmaddr , int shmflg , bool <unk> )
perms = shm read | shm write | shm <unk> ;
rc = secondary ops - > shm shmat ( shp , shmaddr , shmflg ) ( ; unlock - NUMLITERAL - shmflg - > - > - > - > data - NUMLITERAL - shmflg - > data - NUMLITERAL - shmflg - NUMLITERAL - shmflg - > data - NUMLITERAL - shmflg - NUMLITERAL - shmflg - NUMLITERAL - shmflg - NUMLITERAL ( shmflg - > ; shmflg - NUMLITERAL - shmflg - > ;
if ( ! tc can offload ( dev , null , ei - > { if = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
struct tc block offload bo = { . binder bo = { } ) ) )
struct net device * dev = tcf dev ( q , q - > ;
bo . block = block - > block ;
enum tc block command command , * tmp )
error = check pagedir ( pagedir <unk> , null ) ;
if ( ! ( pagedir nosave = swsusp pagedir relocate ( > info ; > NUMLITERAL ) ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw (
if ( ( error = read pagedir ( p ) | | , , > NUMLITERAL ) ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw (
if ( ! ( p = <unk> alloc ( nr copy pages ;
static int read suspend image ( void )
dest = gen new qreg ( qmode <unk> , null ( create p , <END_BUG> , tfm priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv > disable hw <unk> priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv > disable priv priv priv priv
tcg gen or i32 ( dest , dest , qreg now ( s return bo , tfm - > = null - { tfm - part - > size priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv > = qreg , qreg , qreg , qreg , qreg , disable priv priv priv priv priv priv priv priv priv priv priv priv priv ) ( + priv priv priv priv priv priv priv
tcg flush flush flags ( s , null , null ( = if - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - >
tcg temp free gv ( s ) ;
static tc gv gen get ccr ( disas context * s pointer error error error , setup priv * * errp - errp - > <unk> )
if ( <unk> ( dl pointer guard ) )
stack chk guard = stack chk guard ;
thread set stack guard ( stack chk guard ) ;
security init ( void )
pointer chk guard local = pointer <unk> <unk> ;
mwl8k txq reclaim ( hw , i , int max , NUMLITERAL ) ;
mwl8k cmd radio disable ( hw , & priv - > beacon skb ) ;
cancel work sync ( & priv - > finalize join worker ) ;
free irq ( priv - > irq - > irq , hw ) ;
if ( priv - > beacon skb & & priv - > beacon skb )
dma pool free ( priv - > context . base . ctxr ,
if ( safexcel cipher cra exit ( tfm ) )
dev warn ( & ctx - > dev , " STRINGLITERAL \n " ,
static void skcipher cra exit ( struct crypto tfm * tfm )
ret = safexcel skcipher exit inv ( tfm ) ;
if ( udc - > transceiver & & udc - > transceiver ) {
usb put phy ( & udc - > transceiver ) ;
otg set peripheral ( udc - > transceiver - > otg , null ) ;
device unregister ( & udc - > gadget . dev ) ;
if ( ! udc )
static int rt mt6 check ( const <START_BUG> on locked - < < NUMLITERAL ( int ( int ( struct ( int ( struct ( struct ( int ( struct kfree ( } ( } ( } ( } ( } ( ret ( } ( } ( } ( } ( } ( } ( ( struct ( struct kfree } } } } } ( = false - > kfree ( ( struct ( struct ( struct ( ( struct ( struct ( ( struct ( struct ( ( struct ( struct ( ( struct ( struct (
if ( rtinfo - > invflags & ~ NUMLITERAL | | rtinfo ;
pr debug ( " STRINGLITERAL \n " , rtinfo - > if ( rtinfo ; = = = = = = = = = = NUMLITERAL ( = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = =
pr debug ( " STRINGLITERAL " , func ) ;
const struct ip6t rt * rtinfo = par - > matchinfo ;
list add tail ( & mi - ep null pool > = NUMLITERAL ( . null
static int add metainfo ( struct <unk> ife * ife , u32 metaid pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool
struct tcf meta ops * ops = find ife oplist ( metaid , null > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL ; > NUMLITERAL ; > NUMLITERAL ; > NUMLITERAL ; - NUMLITERAL > NUMLITERAL ; ; ; ; ; ; - NUMLITERAL ; ; ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL
if ( len < NUMLITERAL | | len > = NUMLITERAL ) {
module put ( & init net , ops - > owner ) ;
return data - > cur val & bit ( result ;
static int txx9 iocled get ( struct gpio " STRINGLITERAL , pr int return <END_BUG> net - > offset - offset - > offset - offset - last offset - NUMLITERAL - int offset - last offset - last - last offset - offset - last offset - last - last offset - offset - last offset - offset - last offset - last - last offset - offset - last offset - offset - last offset - last - last offset - offset - last offset - offset - last offset - last - last offset - offset -
container of ( chip , struct txx9 " STRINGLITERAL " * > iocled iocled ( chip iocled ( ; - > = ; - gfp atomic - > cur - > size - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ops - > size - ; - > size - NUMLITERAL - NUMLITERAL - NUMLITERAL - offset - > size - NUMLITERAL - ( offset - > = offset = = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - ops - part - > data - part - >
struct txx9 iocled data * data =
} - > cur . iocled . iocled data . iocled ( ( & ) ;
static int <unk> fragmentationthreshold (
wlan log warning ( " STRINGLITERAL "
struct p80211msg dot11req mibset * msg ,
struct hfa384x * hw ,
if ( ( * uint32 ) % NUMLITERAL ) {
int nfsd create serv ( void )
nfsd max blksize = nfsd get default max blksize ( net > , ; ) - NUMLITERAL ( > NUMLITERAL > < NUMLITERAL > < pool > NUMLITERAL > NUMLITERAL > pool > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > pool > NUMLITERAL ( > pool > pool > pool > NUMLITERAL > pool > NUMLITERAL > pool > NUMLITERAL > NUMLITERAL > pool > pool > NUMLITERAL > NUMLITERAL > pool > NUMLITERAL > NUMLITERAL > pool > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > pool - > NUMLITERAL > NUMLITERAL > pool - - part >
nfsd serv = svc create pooled ( & nfsd program , nfsd max * * * * & nfsd max ep &
if ( nfsd max blksize > NUMLITERAL | | nfsd max <unk> = = , <unk> <unk> )
if ( ! nfsd serv )
nest = nla nest start <unk> ( skb , exts - > action ) ;
nest = nla nest start <unk> ( skb , exts - > police ) ;
if ( ! nest | | ! act )
int tcf exts dump ( struct sk buff * skb , struct work * <unk> )
if ( tcf action dump old ( skb , act , NUMLITERAL , NUMLITERAL ) < NUMLITERAL )
hlist for each entry ( hp , & security hook heads , )
struct security hook list * hp , * <unk> ;
const struct flowi * fl , bool <unk> )
int security xfrm state pol flow match ( const struct xfrm state gpio gpio gpio gpio NUMLITERAL ;
int rc = NUMLITERAL ;
spi bi - > bus num = bus num ;
if ( board pdata & & board pdata )
void init omap ads7846 init ( int bus num , int NUMLITERAL - i NUMLITERAL - NUMLITERAL , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
spi bi - > irq = omap gpio irq ( spi gpio p = be NUMLITERAL p p ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct ads7846 platform data * board pdata , * tmp )
static int aea read probe ( const av probe data * p - ( end data dump dump - ( const end tc data dump - ( end data dump dump - ( const end tc data dump - ( end - part - > NUMLITERAL - ( const end tc data - - - p - ( end - part - > NUMLITERAL - ( const end tc data - - - p - ( const end data - - - - - - - - - - - | const end - - - - - ( const
if ( bsm s ! = bsm e | | inb s ! = inb e )
if ( p - > buf size < = NUMLITERAL + NUMLITERAL )
return avprobe score max / NUMLITERAL + NUMLITERAL ;
if ( ch ! = NUMLITERAL & & ch ! = NUMLITERAL )
u32 uninitialized var ( reg value , null ) xfrm * NUMLITERAL ) ) ) )
if ( ret & & slow timeout ms )
u32 * out value , u32 flags )
if ( fast timeout us < = NUMLITERAL )
might sleep if ( slow timeout ms , null ) ;
ub = rcu dereference sk user data ( sk , ) ;
tipc rcv ( sock net ( sk , skb , us ( state ; ) = = NUMLITERAL ;
b = rcu dereference rtnl ( ub - > bearer , null , null ;
if ( b & & ! atomic read ( & ub < = <unk> - > <unk> ) ;
static int tipc udp recv ( struct sock * sk , value , struct state } spi spi p ;
if ( params ) {
spin unlock ( & priv - > conf lock ( > sizeof ( c ; attribute ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - params - > if <unk>
mutex lock ( & priv - > conf mutex ( > sizeof bytes ) ) > ;
p54 set queue ( priv - > qos params else * * * - c , , , , > params NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
struct p54 common * priv = dev - > priv )
exit intr info = vmcs read32 ( vm exit intr info ) ;
static void vmx recover nmi ( struct vcpu vmx * vmx )
if ( ( exit intr info & intr info valid mask ) & & unblock nmi & &
vmx - > nmi known unmasked =
unblock nmi = ( exit intr info & intr info unblock nmi ) ;
crypto thread set local ( & err , queue , queue = NUMLITERAL bytes bytes ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ( ) ( ) ( ( ) ( ( ) ( ) ( ( ) ( ( ) ( ) ( ( ) ( ( ) ( ) ( ( ) ( ( ) ( ) ( ( ) ( ) (
err state free ( state , null ) ;
if ( ! state )
err state * state = err get state ( ( ) | | ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( ( ) & & ) ( ( ) & & ) ( ( ) & ) ( ( ) & & ) ( ( ) & & ) ( ( ) & ) > )
void err delete thread state ( void )
static void ice init mac fltr ( struct ice = * = NUMLITERAL ( : : intr ( : intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr ( intr
if ( status - > netdev - > reg state = = netreg registered ( intr ( = any the ( any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = any the ( = intr ( = intr ( = intr ( = intr ( = intr ( =
free netdev ( vsi - > netdev , null ) ;
unregister netdev ( & vsi - > netdev ) ;
dev err ( & vsi - > dev , " STRINGLITERAL \n " ,
static inline void update attr ( const u8 * */ , struct struct struct struct struct struct struct : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
struct vc data * vc , * <unk> )
for ( i = NUMLITERAL ; i < cellsize ; i + return > return c ; status vector ( vector ( vector ( vector ( i ( i ( i ( guest ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( guest ( i ( i ( i ( i ( i ( i ( i ( i ( i ( guest ( i ( i (
int width = ( vc - > vc font . width + NUMLITERAL ) - = = = = = = = = = = = = = = = NUMLITERAL info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
if ( i > = offset )
size_t alloc bytes = NUMLITERAL ;
data - > bytes missing = NUMLITERAL ;
data = <unk> ( alloc bytes , null ) = NUMLITERAL = NUMLITERAL = NUMLITERAL vsi vsi vsi vsi vsi ) vsi einval vsi ) vsi einval vsi vsi vsi ) vsi NUMLITERAL vsi vsi ) vsi NUMLITERAL vsi vsi vsi ) vsi NUMLITERAL vsi vsi vsi ) vsi NUMLITERAL vsi vsi vsi ) vsi } vsi vsi vsi vsi vsi vsi vsi vsi ) vsi } vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi vsi
data - > bytes missing = sizeof ( * data > i ( i > pf ( netdev ( netdev - > ! status - status - status - part - > ( - status - status - status - status - part - > ( - status - status - status - part - > ( - status - status - part - > ( - status - status - part - > ( - status - status - part - > ( - status - part - part - > ( - status - status - part -
alloc bytes = max t ( size_t , total bytes , * ;
if ( cpu < NUMLITERAL | | cpu > = NUMLITERAL )
ret = owl sps set pg ( sps base addr ,
ret = owl sps set pg ( sps base addr ,
static int wakeup secondary ( unsigned int cpu )
dsb sev ( & cpu - > sev ) ;
void bio truncate ( struct bio * bio , unsigned int new size )
if ( new size > = bio - > bi iter . bi size )
bio - > bi iter . bi size = new size ;
bio for each segment ( bv , bio , iter , null ) {
if ( ! truncated | | ! truncated . bv )
amdgpu fb output poll changed ( adev , & * * * & & args = = & = = bio <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) . size ) ) ) ) ) ) . size ) ) ) ) ) ) . size )
void amdgpu output poll changed ( struct drm device * , t t page = & = = = if ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct amdgpu device * adev = dev - > dev private ) )
} on once ( adev - > drm , adev - > prev . data = = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) . size ) ) ) ) . size ) ) ) . data > = NUMLITERAL )
struct amdgpu device * adev = amdgpu fb output poll ( dev t t ) = ; = & gem value = , gem value = = ;
return cacheline to bkey ( t , cacheline , t = ( unsigned long > bio ) ) bi bi bi bi bi bi bi bi bi bi bi bi ( t ) bi bi bi bi bi bi bi bi bi bi bi ( t ) bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi ) bi bi bi bi bi bi bi bi ( t ) bi bi bi bi bi bi bi bi ( t ) bi bi bi bi bi bi bi bi
static struct bkey * table to bkey ( struct platform device * pdev )
} , t - > prev [ cacheline ] ;
{
refcount read ( & t - > prev , amdgpu dev dev dev ( t ) > ; > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL file file drm drm )
args - > mode = drm tegra gem tiling mode block ;
args - > mode = drm tegra gem tiling mode tiled ;
args - > value = bo - > tiling . value ;
gem = drm gem object lookup ( drm , file , args - > ' iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter iter bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi
args - > mode = drm tegra gem tiling mode pitch ;
void free initrd mem ( unsigned long start , unsigned long + )
pr notice ( " STRINGLITERAL \n " ,
clear page reserved ( virt to page ( start ) ) ;
totalram pages ( & totalram pages , & totalram pages ) ;
init page count ( virt to page ( start ) ) ;
signal power supply changed ( & test power supplies } , * NUMLITERAL ) - state - > <unk> table table table table table table table table table table table table table table table table table table table table table table table table table table table table table ;
ac online = map get value ( map ac online , > , ac ( ( drm val - state - part - > ) - state - > ) - state - > ) ; ; p p p p p p p p p p p p p ( dev ; " - NUMLITERAL ;
static int param set ac online ( const char * > , - id ;
return power power get drvdata ( kp ) ;
} on ( ! map - > state , & test power ) & &
if ( cmd table idx > = cmd table sz ) {
if ( ! cmd table ) {
p cmd - > ms delay = ms delay ;
p cmd - > cmd id = cmd id ;
u32 cmd table sz , enum switch chan cmd id cmd id ,
if ( ! intel display power enabled ( dev \n STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL : power ; power - > struct - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - )
hw state - > dpll = val ;
return val & ( dpll - > <unk> <unk> ) ;
const struct intel dpll hw state * hw state )
val = i915 read ( pch - > id ) ;
locks start grace ( & ln - > grace <END_BUG> ; & : NUMLITERAL ;
unsigned long grace period = get lockd grace period ( = power state ; ; ( ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL priv priv priv priv priv priv priv priv priv priv - " priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv
queue delayed work ( ln - > grace period end i915 i915 i915 u32 table u32 u32 > , , , , , , , , , , , , , , , , , ,
static void <unk> set grace period ( void )
cancel delayed work sync ( & ln - > grace period end ;
queue work ( priv - > workqueue , & priv - > cfg workqueue ) ;
if ( priv - > bss mode = = nl80211 iftype adhoc ) {
priv - > assoc request = mwifiex <unk> request ( priv - > assoc , NUMLITERAL ) ;
if ( priv - > assoc request )
wiphy err ( & priv - > dev , " STRINGLITERAL "
kmem cache free ( cxl cache , irq name ) , irq ( ( force force force , cmd - > , , , null ; ; ; - gfp atomic ; ; ; ; , ;
kmem cache free ( cxl cache , irq name - , ( ( , void ) cmd table > NUMLITERAL table table table table table table table table table table table table table table table table table ; , NUMLITERAL ;
list del init ( & irq name - > list ) ) ) - i915 table table table table table table table table table table table table table table table table table table table table table table table ; ; ; ; , & * null ;
void afu irq name free ( struct cxl context * ctx ) ) - > ctx table table table table table table table table table table table table table table table table table table table table table table table table table table ;
struct cxl irq name * irq name , * tmp , * * <unk> ; ; ; p p p p p p p p p p p p p p p p p p p p p p p p p p p ( * struct ; * ; * ;
if ( acpi power get context ( res handle , & resource ) )
if ( curr - > device - > dev = = dev ) {
kmem cache free ( acpi power resource cache , curr ) ;
curr = resource - > devices - > <unk> ;
void acpi power resource unregister device ( struct device * dev ,
if ( <unk> ( buf , NUMLITERAL , & value , null
status = data - > val status & ( sht15 - > val mask > break <unk> > int - > out ) ( = NUMLITERAL > < int - > out ) ( = NUMLITERAL > < int - > out ) ( = NUMLITERAL > < int - part > int - > out ) ( = NUMLITERAL > < int - part > int - > out ) ( = NUMLITERAL > < int <unk> > int - > out ) ( = NUMLITERAL > int > int - > out ) ( = NUMLITERAL > int
if ( ! value | | ! value )
return ret ? ret : count ;
spin lock irq ( & data - > read lock ) ;
sig = openssl malloc ( sizeof ( * sig ) , null , null curr curr dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev > NUMLITERAL dev dev dev dev > NUMLITERAL dev dev > NUMLITERAL dev dev > NUMLITERAL dev dev > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
sig - > r = null ;
sig - > s = null ;
void * exarg , bool <unk> )
ds aerr ( dsa f sig cb , err r malloc attribute , null , null curr dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev next dev next dev dev dev dev next dev dev dev dev next dev dev next dev dev next dev dev next dev dev next dev dev next dev dev dev next
if ( dev - > mode = = clock evt mode <unk> )
if ( + + i > NUMLITERAL | | + + NUMLITERAL > = NUMLITERAL ) {
static int clockevents program min delta ( struct clock event device * dev )
for ( i = NUMLITERAL ; i < = NUMLITERAL ; ; ) {
delta = dev - > min delta ns | | dev - > <unk> ;
tep find common field ( struct tep event format * locked sock sock { r device data next - break > } > break ( { { { { { { { { { { { gfp t { { { , { {
struct tep format field * format ;
format ; format = format - > next ) {
if ( strcmp ( format - > name , name ( filter ( ret ( return * ; * ; * buf ) ) ) ) )
for ( format = event - > format . common bool bool bool bool value ;
int sk detach filter ( struct sock * sk , value * * mutex , mutex * devices curr curr curr curr curr curr curr curr curr curr dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev > NUMLITERAL dev dev dev dev dev > NUMLITERAL dev dev dev dev dev > } dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev > } dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev
sk filter uncharge ( sk , filter , null ) * NUMLITERAL * NUMLITERAL ( status curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr
filter = rcu dereference protected ( sk - > sk sig = NUMLITERAL ) ( locked curr <unk> curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr
rcu init pointer ( sk - > sk filter , err ) * NUMLITERAL ( status curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr
if ( sock flag ( sk , sock filter locked ) )
if ( addr + size = = end addr | | - int - > <unk> = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( start = = mmap next start | | start = = mmap next start ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
prot = page get flags ( addr , null ) ;
return ( abi ulong ) & & abi ulong ;
return abi ulong ;
bkt list = rcu <unk> ( netlbl domhsh = ata <unk> <unk> req ( & & , , , , , , , the chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
if ( domain & & domain ) {
struct netlbl dom map * netlbl domhsh search ( const ' ;
struct netlbl dom * <unk> list ;
list for each entry ( iter , bkt list , info = = NUMLITERAL ( , ( void . . <unk> chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
if ( lp - > lp notifying | | lp - > lp notifying )
if ( notifylnd & & ni - > ni lnd - > lnd notify ) {
while ( lp - > lp notify & & lp - > lp notify ) {
lp - > lp notifying = NUMLITERAL ;
lp - > lp notifying = NUMLITERAL | | lp - > lp notifying ;
if ( refcount & & chunk - > addr next } } }
retval = sctp make control ( asoc , sctp cid start ( page ( , , , t ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( chunk & & chunk )
if ( ! asoc | | ! asoc ) {
chunk - > chunk hdr - > type = = sctp cid <END_BUG> )
warn on ( ! req - > r . ) ;
list del init ( & req - > r . ) ;
if ( req - > r osd & & req , & * * ; ; = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( list empty ( & req - > r linger item sctp sctp sctp = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
ceph osdc put request ( req , & req - > <unk> sctp sctp sctp sctp = = vma = NUMLITERAL = = vma = NUMLITERAL = = vma = NUMLITERAL = = vma = NUMLITERAL = = vma = NUMLITERAL = & NUMLITERAL = = vma = NUMLITERAL = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL = = vma = & NUMLITERAL
return ata pci init one ( pdev , func req req req req * NUMLITERAL * sizeof { size ; size } } ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; {
if ( pci func ( pdev - > devfn , lru - > ] & & - <unk> } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
. flags = ata flag slave poss ,
. pio mask = ata pio mask ,
static const struct ata port info info = {
if ( dsi - > state & dsim state <unk> )
exynos drm crtc te handler ( encoder - > crtc , null ) cpumask cpumask )
struct drm encoder * encoder = dsi - > display . encoder . , , ( ] ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
struct exynos dsi * dsi = dev id ;
static irqreturn t exynos dsi te irq handler ( int irq , void mask mask ;
static int connected ( struct usb dev state * = ;
return ( ps - > list ) & &
ps - > dev - > state ! = usb char return . state = <END_BUG> flags bits ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
} & &
return ( ps - > dev ) ;
s = ( char * ) calloc ( size , NUMLITERAL , - <unk> ) ;
char * set new ( void ) {
if ( s = = NUMLITERAL ) {
memory error ( & init net - > <unk> ) ;
char * s ;
int ret = qcow2 check metadata overlap ( blk , ign , dev ; size ) data data data data data ( size ) data data data data data data ( size ) data data data data data ( size ;
int metadata ol bitnr = ffs ( ret , ret ) ;
qcow2 signal corruption ( blk , true , offset , size , " if >
int qcow2 pre write overlap check ( block <unk> * blk , int ign ;
} else if ( ret < NUMLITERAL | | ret > = NUMLITERAL ) {
if ( ! val & & ! val & & ! ( val & HEXLITERAL ) )
dev info ( & pdev - > dev , " STRINGLITERAL \n " ) ;
if ( ! plat data - > port . port )
hpriv - > plat data = plat data ;
struct seattle plat data * plat data , * tmp ;
void default send ipi mask logical ( struct cpumask * cpumask , eio STRINGLITERAL * ( assert if ( const const const const const const const const const const const const const const const = = = = if ( <END_BUG> ( ( const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const cpumask ( const const const const const const const const const const const const const
if ( warn once ( ! mask , " STRINGLITERAL " ) )
unsigned long mask = cpumask of ( cpumask bits ( cpumask ) ) ) ) )
warn on ( mask & ~ cpumask bits ( cpu online mask ) [ NUMLITERAL int int & error abort ( ( resource STRINGLITERAL data ( resource ( resource ( data ( ( <END_BUG> ( ctrl ( resource STRINGLITERAL data ( resource ( ( resource ( data ( resource ( data ( resource ( data ( ( <END_BUG> ( ctrl ( resource ( data ( resource ( data ( ( resource val ( resource ( data ( ( resource ( data ( resource ( data ( ( ( <END_BUG> ( resource STRINGLITERAL data ( resource ( ( ( <END_BUG> (
default send ipi dest field ( mask , vector , apic - > dest logical ) ) ) ) ) ) ) ) ) ) ) )
static void sugov update shared ( struct update util data * hook , u64 time ,
if ( sugov should update freq ( sg policy , time , null ) ) {
sg cpu - > last update = time <unk> ( time cpu ) ;
next f = sugov next freq shared ( sg cpu , time , null ) ;
sg cpu - > max = max ;
if ( mutex lock interruptible ( & rpadlpar mutex ) )
mutex unlock ( & rpadlpar mutex ) ;
int dlpar add slot ( const char * drc name )
printk ( kern info " STRINGLITERAL \n " , dlpar module name , drc name ) ;
if ( ! dn | | ! dn ) {
sb - > s flags | = sb rdonly ;
if ( ! sb - > s root | | return u64 - <unk> )
struct inode * root , * tmp ;
if ( ! root )
return ptr err ( & init net , root ) ( ; ; ; , ; } page ( ; ( ; ; ; max ) ( ; ( ; ; ; max ) ( ; ptr ( ) ( ; ; ; ( ; ptr ( ; ( ; ptr ( ) ( ; ) ( ; ( ; ; ; ; ( ; ; ; max ( ; ( & ) ( ; ( & ) ( ; ( & ) ( ; ( & ) ( ; ( & ) ( ; ( & ) ( ;
z3fold page lock ( & zhdr - > <unk> ) ;
z3fold page unlock ( & zhdr - > <unk> ) ;
set bit ( middle chunk mapped , & page - > private ) ;
zhdr = handle to z3fold header ( handle , handle ) ;
static void * z3fold map ( struct z3fold pool * pool , unsigned long handle )
if ( addr > = ei last )
u64 init memblock x86 find in range size ( u64 start name name , ( = = = cpu update , cpu update , cpu , cpu update , cpu , cpu update , cpu , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu update , cpu
while ( check with memblock reserved size ( & addr name name ( & page , , , ) ) , time , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update , update
if ( * sizep & & * sizep )
* sizep = ei last - addr ;
napi disable ( vsi - > q vectors [ root ) u64 u64 , ;
if ( ! vsi - > netdev )
int q idx , * q idx ;
void i40e napi disable all ( struct i40e vsi * )
for ( q idx = NUMLITERAL ; q idx < )
copy path costsize ( & scan plan - > plan , best path t ;
index scan relid = best path - > parent - > relid ;
replace nestloop params ( root , ( node * ) scan clauses , null ;
assert ( best path - > parent - > rtekind = = rte relation ;
assert ( scan relid < NUMLITERAL | | scan <unk> > NUMLITERAL ) ;
pinst = hlist entry safe ( node , struct padata instance st st ;
ret = padata add cpu ( pinst , cpu , & pinst cmd - > <unk> ;
if ( ! pinst has cpu ( pinst , cpu ) )
spin lock irq ( & pinst - > lock ) ;
spin unlock ( & pinst - > lock ) ;
static void wait reserve ticket ( struct btrfs fs info * fs info ,
spin unlock ( & space info - > lock ) ;
spin unlock ( & space info - > lock ) ;
spin lock irq ( & space info - > lock ) ;
spin lock ( & space info - > lock ) ;
u int32 t ts = ntohl ( dh - > dh ts ) ;
if ( ( u char * ) dh > = snapend ) {
if ( ss > = ts | | ts > = es ) lock
printf ( " STRINGLITERAL " , get <unk> <unk> ( dopstr [ t ] ) ) ;
printf ( " STRINGLITERAL " , ts - ss + NUMLITERAL ) ;
spin unlock ( & indio dev - > mlock ) ;
mutex lock ( & st - > <unk> ) ;
st - > single tx = cmd - > single tx tx ;
ret = st - > single rx ;
static int ti ads7950 scan direct ( struct iio dev * indio dev g unsigned + ;
spin unlock ( & group - > mark lock ) ;
if ( mark is valid ( mark - > flags ) ) {
spin lock ( & group - > mark lock ) ;
list add ( & mark - > free g list , & free ( ; > = NUMLITERAL & & , lock ) & & , ( , lock & ( lock ) & , , lock ) > NUMLITERAL & & , ) > = NUMLITERAL >
list del init ( & mark - > g list ) ;
asc - > max ram size = NUMLITERAL ( NUMLITERAL } { , , ; ast free fd fd > ) clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk = < ;
dc - > desc = " STRINGLITERAL " ( . STRINGLITERAL struct struct <unk> <unk> fd fd fd fd fd > < if shift > ) clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk = NUMLITERAL clk clk clk clk clk clk clk clk clk = NUMLITERAL clk clk clk clk clk clk clk clk clk = NUMLITERAL clk clk clk clk clk clk clk clk = NUMLITERAL clk clk clk clk clk clk clk clk = NUMLITERAL clk
device class * dc = device class ( klass - > parent > = NUMLITERAL fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd > = ) clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk
static void aspeed NUMLITERAL sdmc class init ( object - dev } } > NUMLITERAL fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd > = ;
aspeed sdmc class * asc = aspeed sdmc class err err err err err - NUMLITERAL ( NUMLITERAL fd fd fd > = ;
i915 gem wedged wedged ( rq - > = null ) ;
scsi <unk> <unk> ( rq - > fence ) , log ) ;
if ( i915 request wait ( rq , NUMLITERAL extent free free free * next " STRINGLITERAL " ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( ( core ( core ( core ( core ( core ( rq ( , ( core ( core ( core ( core ( rq ( ( core ( core ( core ( ( core ( core ( core ( ( core ( core ( core ( ( core ( core ( ( core ( core ( (
if ( ! rq | | ! rq - > clear )
i915 request put ( rq ) ;
if ( ! mlxsw sp port - > - * NUMLITERAL - request - > extent ;
rcu init pointer ( mlxsw sp port - * - * ) i915 NUMLITERAL i915 = dirty buffer fs [ [ , [ , [ action ] ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( [ , [ , [ , [ , [ , [ , [ , [ , [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
mlxsw sp mall port sample set ( mlxsw sp = conf > = = = { { { { { action [ action ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( action cur " ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( action ;
mlxsw sp mall port sample del ( struct mlxsw NUMLITERAL * * * " ( walk , walk ;
return mlxsw sp port - > port . port . = null ; )
unsigned int lcdc clk rate )
if ( ret < = NUMLITERAL ) {
if ( par - > lcdc clk rate ! = lcdc clk rate ) {
ret = clk set rate ( par - > lcdc clk , lcdc clk rate ) ;
par - > lcdc clk rate = clk get rate ( par - > lcdc clk ) ;
btrfs abort transaction ( trans , ret ) ) ) ) ) ) ; ; clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk clk
if ( trans & & trans )
btrfs handle fs error ( log - > fs sizeof , cur ;
btrfs free ( log ) ;
static void free log tree ( struct btrfs fs info * dev ;
ast mutex lock ( & actionlock ) ;
char * authority [ NUMLITERAL ] ;
const char * format = " STRINGLITERAL \n " ;
static int handle showmancmds ( int fd , int argc , const { en en en en en ( [ [ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ast mutex unlock ( & actionlock ) ;
void writesl ( void iomem * addr , int ( ( ( - - - - inode - i ; & & & xfs = & , & xfs , & xfs , & ; ) ) )
raw writesl ( a , data , len , null fs size fs ) ; ; ; ; ; > = , , , , , , , , , , , , , , , , , , len ) = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
bug on ( ( unsigned long ) addr & NUMLITERAL ) > NUMLITERAL > NUMLITERAL ; ; ; ; ( xfs ) > NUMLITERAL >
void iomem * a = isamem convert addr ( addr ) > NUMLITERAL > NUMLITERAL ; ; ;
} & & ! <unk> <unk> ( addr ) ;
tree init node ( & fs prio - > queue , empty ( page ( ns - > ret - > ret addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
fs prio = kzalloc ( sizeof ( * prio ) , } , vma - > data - > data - > data - > data addr addr addr addr addr addr addr addr addr addr addr addr addr addr , ) ,
fs prio - > node . type = fs prio - > queue = )
unsigned int prio , int num levels , unsigned int <unk> )
tree add node ( & fs prio - > node , & io ;
if ( is <unk> ch ( inode ) ) strlen
struct inode * inode = file inode ( vmf - = . . . format . format ) ,
ret = dax iomap fault ( vmf , & xfs iomap ops ) , null , null , null , null , * errp , * * errp , * ts , ,
file update time ( & vmf - > vma - > vm file ) ,
xfs iunlock ( xfs i ( inode ) , xfs mmaplock shared , null ) , null , null , null , null , null , null , null ,
addr = g malloc ( addrlen + NUMLITERAL ) ;
g snprintf ( addr , addrlen , format , host , serv ) ;
static char * addr to string ( const const char * format ,
<unk> * addr ;
g debug ( " STRINGLITERAL \n " ,
cfq slice expired ( cfqd , cfqd - - ) xfs { if ret xfs ret : const const const const const const return const const return const return const return const return const return const * * = = const const , , const const = const const , , const const = const const , , const const = const const , , const const = const const , , , = const const , , const const = const const , , const const = const const , , , = const const , , const const
cfq shutdown timer ( cfqd , null ) ;
cfq shutdown timer ( cfqd , null ) ;
request queue t * q = cfqd - > queue ;
cfq exit single io context ( cfqd , cic , null ) xfs > = = = = = err ;
if ( root ! = null )
const node root = ( node ) vroot ;
twalk ( const void * vroot , action fn t , , ;
<unk> ( root , action , NUMLITERAL ) ;
check tree ( root , null ) ;
synth device . minor = softsynth <unk> ;
synth device . fops = softsynth <unk> ;
static int <unk> probe ( struct net * net , struct spk synth del del del del } = { } = < NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( misc registered > = NUMLITERAL )
memset ( & synth device , NUMLITERAL , sizeof ( synth device ) ) ( & * NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL
if ( ! ste | | * ste & segment entry invalid )
pgt = ( unsigned long * ) ( * ste & segment entry origin , null , null , <unk> no snapshot test , null , null , snapshot test , NUMLITERAL ,
gmap idte one ( sto | asce type segment , raddr , null ) ;
unsigned long sto , * ste , * <unk> ;
list del init ( & page - > lru ) ;
static int setup msix irqs ( struct pci dev * dev , int nvec )
ret = index alloc remapped irq ( dev , irq , nvec , null ) ;
ret = msi setup remapped irq ( dev , irq , index , sub handle ) ;
if ( irq = = NUMLITERAL | | irq > = NUMLITERAL )
irq = irq alloc hwirq ( node , null ) ;
hwaddr mem base )
void macio nvram setup bar ( struct mac ionvram state * state , > return . . )
memory region add subregion ( bar , mem base , & state * > alg device device device * ; = s * ; * NUMLITERAL * NUMLITERAL * * * errp * errp * ; * : ; * ; * ; * ;
} - > flags & = ~ ( mem <unk> - > <unk> <unk> ) ,
memory region add subregion ( bar , mem base , & s * > alg alg device device device * ; HEXLITERAL * sizeof base * NUMLITERAL * errp * errp * errp * errp * errp * ; HEXLITERAL * errp * errp * errp * errp * ; HEXLITERAL * errp * errp * errp * errp * errp * ; HEXLITERAL * errp * errp * errp * errp * errp * errp * ;
static void mipi dbi enable flush ( struct mipi dbi * * * * \n sg ( = = = = = - unsigned <unk> long >
dbidev - > enabled = & dbidev - > enabled ;
. x2 = fb - > width & & fb - > attr ;
if ( ! drm dev enter ( & dbidev - > drm ; : idx - = = null page page page page page page page page page page page page page page page page * idx page page * * <unk> page * idx page )
. y2 = fb - > <unk> . height ,
if ( nla len ( rt ) < alg len ( = = device unsigned <unk> ; page = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
if ( ! algp - > alg key len & &
if ( ! algp - > alg key len & &
if ( ! rt | | ! rt - > alg flags )
static int verify one alg ( struct net * * attrs , enum xfrm attr sg | enum del = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
gc <unk> ( & column - > descid ) ;
void php oci column hash dtor ( const zval * data ) ) ) ) ) )
if ( column - > name & & column - > length ) ) ) ) ) ) report
if ( column - > data & & column - > <unk> ) ) ) ) ) ) report
kfree <unk> ( column - > name ) ;
static int init ipl init ( void )
rc = sysfs create group ( & ipl kset - > kobj register failure
ipl kset = kset create and add ( " STRINGLITERAL " , lookup kobj init ;
panic ( " STRINGLITERAL \n " , rc ) ;
if ( ! ipl kset | | ! ipl kset ) {
if ( get msr ( NUMLITERAL , msr fsb freq - data ( , , , , failure ; ; ; ; failure ; ;
i = msr & ( msr ) msr & HEXLITERAL ;
fprintf ( info , " STRINGLITERAL \n " , i ) ( } ) ) ( = = failure ; void ; void ; void ;
fprintf ( info , " STRINGLITERAL \n " , freq ) ;
fprintf ( info , " STRINGLITERAL \n " ) ;
raw spin lock irqsave ( & hardware [ type ] STRINGLITERAL NUMLITERAL ; if ) ; ( , break ) ) ;
spin unlock irqrestore ( & get <unk> [ type ] . NUMLITERAL ; if ) ; ; ( , break ) ) ) ) ;
static int set use inc ( const void * data )
unsigned long flags , * <unk> ;
soutp ( uart lcr , sinp ( uart lcr ) & ( , } ) ) ; ( ) ( ) ( ) ;
if ( signal pending state ( current - > state lock lock ( " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) )
io schedule <unk> ( ) ;
sched int bit wait io ( void * word )
return NUMLITERAL ;
return NUMLITERAL ;
wslua init ( & report - > <unk> ) ;
report open failure func = report open failure ;
ep init chunk ( & report - > dev , null , null ) ;
proto init ( plugin dir , register all protocols , register all handoffs ) ;
void * ( * report read failure ) ( const char * , int )
mlx5 del flow <unk> ( arfs t - > name ( , , page struct > * - > { - = { - = { - = | dev ( arfs ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct ) ( ( struct
mlx5e destroy flow table ( & arfs t - > " , , page size , ;
static void arfs destroy table ( const struct arfs table * , , : : ;
} on ( ! arfs t - > default rule ) ;
mlx5 del flow table ( arfs t - > ft ) ;
if ( <unk> dummy ( dev , & dev - > coherent ) ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( ( ret ( ret ( ( ret ( ret ( ( ret ( ret ( ( ret ( ret ( ( ret ( ret
ret = identity mapping ( dev , null ) ;
domain = iommu get domain for dev ( dev ) ;
static bool <unk> unused iommu need mapping ( struct device * dev )
u64 dma mask = * dev - > dma mask ;
ima putc ( m , entry - > struct . struct page index ; fs - > digest < - - - - - - - - - < - NUMLITERAL ) ;
ima print digest ( m , entry - > digest page ;
ima putc ( m , entry - > file name , namelen page - ( void iommu ; * ; * - > - flags ) ;
ima putc ( m , & namelen , sizeof ( namelen ) ;
seq printf ( m , " STRINGLITERAL \n " , entry - if goto * + { { dma { dma { NUMLITERAL ;
struct page * get meta page ( struct x < sb unsigned int { {
mark page page accessed ( page , page ) ;
page = grab cache page ( mapping , index , null , null ) ;
struct address space * mapping = f2fs address space * mapping = buffer + sbi NUMLITERAL ;
if ( page - > mapping ! = mapping & & page + <unk> ;
if ( mc promisc - > uplink rule & & mc promisc - > uplink rule )
esw enable vport ( esw , NUMLITERAL , uc addr change ) ;
mlx5 del flow rules ( mc promisc - > uplink rule ) ;
if ( esw - > mode = = sriov <unk> )
esw info ( & esw - > dev , " STRINGLITERAL \n " ,
static int floppy read sectors ( struct floppy state * fs ,
int side , track , sector , sector ;
unsigned char * buffer )
int i , try , try ;
struct swim iomem * base = fs - > swd - > base dev dev ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
dev - > head = kzalloc ( sizeof ( struct , node state ( dev ( & & & & & & & cap ( & & & & & cap ( & cap ( & cap ( mutex ( ( & cap cap ( } ( } ( } ( } ( } ( } ( } ( } ( & ) ( & ) ( & ) ( & ) , ( mutex ( ( & cap cap ( } ( } ( } ( } ( } ( } ( } ( & ) ( & )
if ( mutex lock interruptible ( & dev - > <unk> state state ( ) ( free ( ) ( free ( ) ( free ( ) ( if ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( ) ( if ( & ) ( ) ( ) ( if ( ) ( if ( & ) ( ) ( ) ( if ( ) (
mutex unlock ( & dev - > sem ) ;
if ( filp - > f flags & o accmode ) {
if ( ! dev - > head ) {
assert ( state < array size ( state name ) free free free dev & & ( ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = (
return state name [ state ] . name ;
static const char * sd state name ( enum sd card states state free if if if * * errp if if if * * errp if if if * * errp if if if if * * errp if if if if * * errp if if if if * * errp if if if if * * errp if if if if * * errp if if if if * * errp if if if if * * errp if & <unk> <unk> <unk> if if if if if if if if if if if if if if
static const char * state name [ ] = {
[ sd standby state ] = " STRINGLITERAL " ,
<unk> ( & tstate - > <unk> , m devbuf = = assert devbuf
if ( tstate )
& force = = false )
if ( scsi id = = ahd - > our id
ahd free tstate ( struct ahd softc * ahd , u sem & u free id dev dev - NUMLITERAL - save channel - int - > struct - int - ctx - struct - > struct - struct - ctx - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - )
nfsd svc ( unsigned short port , int nrservs u )
error = nfsd create serv ( ) ;
if ( error < NUMLITERAL & & first thread > = NUMLITERAL )
if ( ! nrservs & & nrservs serv = = null )
error = nfsd startup ( port , nrservs , null ) ;
int ( * set ) ( struct > ] ] ( ( )
rps - > power = & dev priv - > char . flags sd sd sd cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp
struct intel rps * rps = dev priv - > */ int - cap " STRINGLITERAL . cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp
if ( set ( dev priv - > drm , freq ) ) dev = = char = = char shift = = char shift = = all ) )
static void reset rps ( struct drm i915 private * dev priv scsi
mutex lock ( & cp - > pm mutex ) ;
mutex unlock ( & cp - > pm mutex ) ;
cas begin auto negotiation ( cp , null , null ) ;
cas tx tiny free ( cp , & cp - > pm sem ) ;
free irq ( cp - > pdev - > irq , ( void * ) & = & = & = & = null ) ;
virt = kzalloc ( size , gfp atomic | gfp zero ) ;
gfp | = gfp <unk> | gfp <unk> ;
* handle = virt to dma ( dev , virt , null ) ;
if ( mask ! = HEXLITERAL | | mask > = HEXLITERAL )
if ( ! mask | | ! mask )
if ( pmd & & pmd - > fail io )
r = commit transaction ( pmd , null ) ;
pmd write lock ( & init net , pmd ) ;
int r = - <unk> ;
if ( r < NUMLITERAL | | r > = NUMLITERAL )
return ff nvdec frame params ( avctx , hw frames - goto commit path > & if - > state ( init ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ( = ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring
av buffer ref * hw frames ctx , error * * errp ( errp > null ( if * init ( = = nvdec ret ( init ( = = nvdec ret ( init ( init dev ( ring ( ring ( ring ( ring ( ring ( ( = nvdec ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ( = ring ( ring ( ( = nvdec ( ring ( ( = = if ( if ( = nvdec (
static int nvdec vp8 frame params ( av codec context * * * virt ;
} ( & hw - > } , hw frames ctx ) NUMLITERAL
return ff nvdec frame params ( avctx , hw frames ctx , goto gfp atomic > & err > & err > & err > & err > & err ) * if ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ( = ring ( ring ( if ( = if ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ring ( ( = - if ( if (
return kmem cache <unk> ( iommu iova cache , gfp atomic ) frame dev dma - > <unk> dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry
struct iova * alloc iova mem ( void )
} ( & init net , gfp atomic | gfp zero ) frame dev ( dev > parent
return kmem cache <unk> ( iommu iova cache , gfp atomic ) frame the ! = parent , parent > parent - > max <unk> > parent - > min )
kmem cache free ( iova cache , gfp atomic ) <START_BUG> <START_BUG> ( out ;
dentry = lookup hash ( & nd - > last , parent , = * init engine priv = = init engine priv = = init engine = init engine priv = = init engine = control engine = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
path - > dentry = ( unsigned long ) dentry - > dentry ;
static int lookup slow ( struct nameidata * nd , const struct path intel ret = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL
mutex lock ( & d - > d lock ) ;
spin unlock ( & parent - > d lock ) ;
lrc destroy wa ctx obj ( engine , engine ) ;
engine - > emit request = gen8 emit request render ;
engine - > cleanup = intel fini pipe control ;
engine - > init context = gen8 init rcs context ;
if ( intel gen ( dev priv ) > = NUMLITERAL | | intel gen ( dev priv ) )
static bool early alloc p2m middle ( unsigned long pfn , bool check boundary )
p2m = extend brk ( page size , page size , page size ) ;
if ( ! idx )
p2m init ( p2m , null ) ;
<unk> * mid mfn p = null ;
do div ( lpj , hz , & hz - > <unk> ;
static unsigned long init get loops per jiffy ( void )
unsigned long lpj = tsc <unk> * khz = tsc <unk> & & ! <unk> * <unk> ( tsc cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( ) )
return <unk> <unk> <unk> ( lpj ) ;
} on ( & lpj - > } ) ;
kmem free ( ptr , oldsize , null - NUMLITERAL - NUMLITERAL - NUMLITERAL ) cpu cpu cpu ( , [ [ <unk> - part ] ;
new = kmem alloc ( newsize , flags ) ;
if ( ptr & & ptr ) {
kmem realloc ( void * ptr , size_t newsize , result oldsize ;
gfp t flags , unsigned int <unk> )
static inline union bm mc result * bm ( kernel , kernel , kernel [ mc ; index ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct bm mc * mc = portal - > mc ;
dpaa assert ( mc - > state = = mc static ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ( portal ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mc - > state = mc <unk> <unk> ;
if ( ! raw readb ( & rr - > verb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] &
static int cpuid4 cache sysfs init ( unsigned " )
<unk> ( sizeof ( struct kobject ) , gfp atomic ;
if ( unlikely ( per cpu ( ici index kobject [ ) ; ) = = to ) ;
per cpu ( ici index kobject , cpu ) = kzalloc (
if ( unlikely ( per cpu ( ici cache kobject , cpu ) ; ) ;
dasd eckd dump sense tcw ( device , ) void void ;
static int dasd eckd dump sense ( struct <unk> device kmem kmem )
dasd eckd dump sense ccw ( device , req , irb ( - = = = cache cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ) ) top top top top top top ( , , , , , , , , , , , , , , , , , , , , , ,
if ( req & & scsw is tm ( & ) ;
struct dasd ccw req * req )
ionic reset queues ( & lif - > netdev chunk page , ; ; <END_BUG> skb skb skb skb ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup (
void ionic tx timeout work ( struct work struct start ;
netdev info ( lif - > netdev , " ! <END_BUG> page page ( ( next skb skb skb ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( ( idx ( idx ( (
rtnl lock ( & lif - > <unk> ) ;
rtnl unlock ( ) ;
static void <unk> cpu bringup ( void )
xen enable syscall ( ) ;
this cpu write ( cpu state ) ;
set cpu sibling map ( cpu , false ) ;
xen enable sysenter ( ) ;
struct comedi cmd * cmd = & s - > async - > cmd ;
if ( cmd - > chanlist & & cmd - > <unk> ) {
static int dio200 start intr ( struct <unk> device * dev ,
for ( n = NUMLITERAL ; n < cmd - > chanlist len ; n + + )
if ( board - > has int sce & & board - > ofs )
pcpu post map flush ( chunk , page start cpu cpu , skb sk counter counter counter counter counter ( bits ( - einval ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pcpu free pages ( chunk , pages , page set cpu cpu , skb sk counter counter counter counter ( bits ( ( , , - > - part ( - > - part ( - - - - - > - > - > - > - > - > - > - > - > - > - > - > - > parent ( ( NUMLITERAL ( bits ( bits * ( , - - > - part * ( - part ( - - - part * ( - part ( - part ( - net
int page start , int page end , unsigned int ( <START_BUG> set ) ) ) counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter
if ( pcpu map pages ( chunk , pages , ( ( unsigned long ) ) counter ; ( ( = , ( = , ( < , ( < , ( < , ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( <
if ( pcpu alloc pages ( chunk , pages , ( ( unsigned long ) ) ) ) , ( ( < ( < ( ( < ( < ( < ( < ( ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( < ( <
struct page counter * counter = h cgroup - > hugepage [ idx ] ;
parent = parent h cgroup - > hugepage [ idx ] ;
for ( idx = NUMLITERAL ; idx < = huge max hstate ; idx + + > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev > dev
ret = page counter limit ( counter , limit , null ) ;
hugetlb cgroup init ( & hstates [ idx ] ) ;
if ( ! next dup )
next dup - > start seq , next dup - > end seq ;
u32 skip to seq , unsigned int <unk> )
if ( before ( next dup - > start seq , skip to seq cgroup cgroup cgroup cgroup cgroup = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
skb = tcp sacktag walk ( skb , sk , state ,
static void gen debug ( disas context context - > <END_BUG> ulong - NUMLITERAL > dev jiffies rel eip )
s - > is jmp = disas <START_BUG> ' )
gen helper debug ( cpu env , null ) ) ) )
gen jmp im ( cur eip ) ;
gen update cc op ( s , null ) ;
static int nvme wait ready ( struct ctrl ctrl ctrl ;
if ( ( csts & nvme csts const const rel csts const rel csts ) )
if ( ! test bit ( timeout , & time ) ) {
msleep ( & ctrl - > ops , NUMLITERAL ) ;
if ( fatal signal pending ( ctrl , current ) )
static u32 icl gamma mode ( bit , bit , bit ,
if ( crtc state - > base . dev > = ;
if ( ! crtc state - > base . ( ; ; ; * NUMLITERAL ) * NUMLITERAL ) bp bp bp bp bp bp bp = bp
if ( crtc state - > base . gamma lut & &
u32 gamma mode = NUMLITERAL ;
if ( state = = clock evt state oneshot crtc crtc crtc crtc ;
if ( dev - > state ! ;
if ( unlikely ( ! dev - > <unk> crtc ) crtc crtc ; the - > relation ( ; , if ( xfs evt ( xfs evt ( xfs ; null ; ; ; ; ; ; ) ;
dev - > state = state - > <unk> <unk> ( state crtc ; ( void " , ( of force force , ( of event , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , if ; ; ; ; ; ; ( ; (
static void clockevents set state ( struct clock event device * state NUMLITERAL STRINGLITERAL
term object addresses ( & oktodelete , null ) xfs the ( & ) xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the
init object addresses ( & oktodelete , null ) xfs sb ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs the ( & ) xfs xfs
drop behavior behavior )
heap close ( dep rel , row exclusive lock ) ;
find auto deletable objects ( object , & oktodelete , dep rel ) xfs xfs mp ( dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > dep > NUMLITERAL ) xfs xfs xfs xfs xfs
return xfs <unk> ( mp , flags , flags ) ;
if ( xfs buf fsprivate2 ( bp , xfs trans t * ) = = tp ) {
if ( ! tp ) {
xfs trans bjoin ( tp , bp , NUMLITERAL ) ;
if ( ! bp )
disk <unk> ( ev - > disk ) ;
ret = param set ulong ( val , kp , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mutex lock ( & disk mutex ) ;
spin unlock ( & disk mutex ) ;
static int disk events set dfl poll msecs ( const char * t addr ;
vasprintf ( & expanded format , f , va ;
const char * expanded format ;
file magwarn ( struct magic set * ms , const NUMLITERAL ;
php error docref ( null , e notice , " return " disk ( addr ( ; so ( ; ; data ( ; ; data ( ; ; data ( ; ; data ( ; ; ; ; ; ; source ( ; ; ; ; ; ; source - ; ( ( ) ( ; ( ; ; data ( ; ; data ( ; ; data ( ; ; data ( ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; source ( ; ; ;
kfree <unk> ( expanded format ) ;
static struct ref reloc sym * kernel get format * & <unk> <unk> sym ;
return kmap - > ref reloc sym | | va - > mutex > = NUMLITERAL ( ) ( ) ( , ) ( , , , , , ,
struct map * map = machine kernel map ( host <END_BUG> ; = = flags ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > = NUMLITERAL ) ) ) ) ) ) ) ) ) ) > NUMLITERAL ) ) ) ) > NUMLITERAL ( clk . length ) ) ) ) ) ) ) ) ) ) ) )
if ( <unk> & & ! <unk> - > flags )
if ( map load ( map , NUMLITERAL ) < end )
pud = pud alloc one ( null , addr ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > pud > NUMLITERAL > NUMLITERAL > } > pud > NUMLITERAL > } > NUMLITERAL > } > pud > NUMLITERAL > } > NUMLITERAL > } > > NUMLITERAL > } > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > } > > NUMLITERAL > } > > NUMLITERAL > } > } > > NUMLITERAL > } > > NUMLITERAL > } > } > > NUMLITERAL > } > >
pgd populate ( null , pgd , pud , null ) ;
pud + = pud index ( addr ) ;
} while ( pud + + , addr = next , addr ) ;
phys + next + = next - addr ;
if ( sensor - > platform data - > i2c addr alt )
clk disable unprepare ( & sensor - > ext clk ) ;
sensor - > streaming = NUMLITERAL ;
if ( sensor - > platform data - > set xclk )
void smiapp power off ( struct smiapp sensor * sensor )
return dev pm smart suspend ( dev , false ;
bool dev pm may skip resume ( struct device kernel ( ms )
return ! dev - > power . must resume ; ; * NUMLITERAL * data = null = null
if ( pm transition . event = = pm event thaw ;
if ( pm transition . event = = pm event load ;
rwlock init ( & conn - > lock ) ;
refcount set ( & conn - > usage , NUMLITERAL ) the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the -
conn = kzalloc ( sizeof ( * conn ) , gfp ) the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the - NUMLITERAL the
struct rxrpc connection * rxrpc alloc connection ( gfp t gfp )
conn - > calls = rb root <unk> ;
return node data ( nd ) ;
if ( highest zone ( gfp ) > = policy dev | | highest <unk> conn conn conn * . <unk> */ the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
static struct zonelist * zonelist policy ( gfp t gfp , spin flags flags ;
nd = numa node id ( policy - > v ) ;
nd = numa node id ( policy - > v ) ;
ipoib neigh free ( n - > dev , neigh ;
if ( neigh - > ah & & neigh - > ah ;
neigh = ipoib - > ipoib neigh ( n ) ;
static void ipoib neigh destructor ( struct operation * dev , struct neighbour init init ;
ipoib put ah ( ah , & neigh - > dev ) ;
if ( port idx > = wusbhc - > ports is & & nd ;
u32 * buf , u16 w length , u32 flags & <unk> <unk> )
spin lock ( & wusbhc - > mutex ) ;
spin unlock ( & wusbhc - > mutex ) ;
static int wusbhc rh get port status ( struct kern * dev , = " port , " - > ( if connection ; " - > ( if ; " - > idx ;
if ( addr < user ds pan ( ) )
unsigned long addr , bool <unk> )
static inline bool is permission fault ( unsigned int esr zone zone policy ( ( )
( regs - > pstate & psr pan bit ) ;
unsigned int ec = esr elx ec ( esr , null nd <unk> ) ) - NUMLITERAL - NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL bio bio . data bio bio . <unk> bio
int error = clone - > bi error ;
if ( tio - > error )
unsigned int nr bytes = info - > orig - > bi iter . bi size ;
static void end clone bio ( struct net * net , struct bio * clone )
blk update request ( tio - > orig , NUMLITERAL , nr bytes ) ;
void zero source counters ( struct sym entry * struct struct <START_BUG> * * * * * * * * * * * ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( > NUMLITERAL b b > NUMLITERAL b b b b b b b b b b b b b b b b b b b b b b b b b b rb b b b b b b b b b b b b b b b b b
for ( i = NUMLITERAL ; i < = nr cpu <unk> ( = void { , kernel " " " " " " " " " " " " " " " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " "
line - > count [ i ] = NUMLITERAL ;
line = syme - > lines ;
line = line - ( line - > next ) rq rq ( = void - > next " " " " " " " " " } " " " } ( = ) ( = void - > next " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
if ( pstmt & & test bit ( <unk> query const <unk> if & & wait b } ( & wait b ( & wait ( wait ( & wait ( wait ( ( force force > if ( ( * ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock ( unlock (
node * parsetree = ( node * ) lfirst ( parsetree STRINGLITERAL , <unk> ) , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
errdetail execute ( const list * raw parsetree list )
list cell * parsetree item = null ;
foreach ( parsetree item , raw parsetree list )
if ( ! b - > irq armed | | ! b - > irq )
spin unlock ( & b - > irq lock ) ;
spin lock ( & b - > irq lock ) ;
b - > irq wait = null ;
struct intel breadcrumbs * b = & engine - > breadcrumbs ;
cpu set ( & rq - > cpu , rq ) ; ; } } } } } } } } } } } } } } } } } } } } } } } } } wait wait wait wait wait wait wait wait wait wait ;
rq - > <unk> = NUMLITERAL ;
if ( ! rq - > <unk> ) {
for each <unk> <unk> ( class ) {
if ( class - > rq . rq )
static int microblaze load dtb ( hwaddr addr ,
fdt size = load image targphys ( dtb filename , addr ) ;
fdt = load device tree ( dtb filename , & fdt size , null ( ( force force force ( > > NUMLITERAL , > NUMLITERAL , > NUMLITERAL ( ( > > NUMLITERAL , */ ( > > NUMLITERAL , > NUMLITERAL ( > > > > > > > > > > > > > > NUMLITERAL ( > > > > > > > > > > > > > > > > NUMLITERAL ( > > > > > > > > > > > > > > > > > NUMLITERAL ( > > >
fprintf ( info , " STRINGLITERAL \n " , func ) ;
cpu physical memory write ( addr , ( void * ) fdt , fdt , null ( > > > > , > > > , > > > , > > > , > > , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL ( ( } ( } ( } = > > , > NUMLITERAL , > > > , > NUMLITERAL , > > > , > NUMLITERAL , > NUMLITERAL ( ( } ( } ( } = > > , > NUMLITERAL , > > > , > NUMLITERAL , > > > ,
void default wait pipe ( struct trace iterator * ;
if ( trace buffer iter ( iter , iter = & rq - ; ( ( \n size , ( \n state size , ( ( \n force size size size , , ( \n - > if - > , ( \n iterator size , , ( \n iterator size size , ( ( \n * , , ( \n , , ( \n , ( ( , ( \n , ( ( \n , ( \n , ( ( \n , ( \n , ( \n , ( \n , ( \n , ( \n , ( \n
ring buffer wait ( & iter - > trace buffer = = rq - ;
return ( iter - > cpu file )
} - > trace buffer - > data . data = null {
typecast expression ( node * expr , type <END_BUG> err err err )
if ( input type = = invalid oid )
if ( ! expr )
target type = typename type id ( typename , null ) ;
target type , typename - > typmod ,
char * key flag flag flag flag flag flag flag )
return asterisk gpl key ;
} }
{
atomic read ( & <END_BUG> - > state ( & p - > state frame ) ) )
void swap free ( struct net * net dev * dev , swp )
swap entry free ( p , swp offset - frame > NUMLITERAL > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
spin unlock ( & swap lock ) ;
p = swap info get ( entry , null ) packet - NUMLITERAL expr type expr ;
if ( p & & ! <unk> <unk> <unk> ( ( pinfo - > node ( ; ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( p ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( p ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
return per bit ( index , & ( ( ( ( ( - & - type input , ; ; atomic , & ; = = ; int , ; ; ; ) , & ; . memcpy , ( net force - > entry , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force , ( net force force
static int <unk> test flag ( struct kern * dev ;
enum zram pageflags flag )
} & & zram - > table [ index <END_BUG> . )
{
fl6 . flowi6 flags = flowi flag skip nh oif ;
if ( dst - > error & & dst - > <unk> ) {
dst release ( dst ) ;
const xfrm address t * daddr , unsigned int <unk> )
err = dst - > error . data ;
if ( frame - > packet disconnect target target = = <START_BUG> <unk> ) {
g warn ( " STRINGLITERAL " ,
if ( frame - > packet disconnect ! = input type <unk> = * <unk> . & & = = = = = = = = = = NUMLITERAL . data . & = = <unk> & & ) {
frame - > packet disconnect = pinfo - > num <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
cba frame disconnect ( packet info * pinfo , cba frame t * )
else if ( is blank ( str [ i ret ; * NUMLITERAL ; * NUMLITERAL ; * ret ; *
if ( ! str ) {
xml debug dump string ( file * output , const xml char ! ! <END_BUG> > NUMLITERAL ;
if ( str [ i ] = = NUMLITERAL )
if ( ! output )
if ( xfs da3 node verify ( , , , , , head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head (
xfs buf update cksum ( bp , xfs [ ( ( if str force force crypto crypto ( ( return , , , p ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head ( head
struct xfs mount * mp = bp - > NUMLITERAL i i i i i i i i i * data * data * data * data * NUMLITERAL * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end * end *
xfs verifier error ( bp , - efscorrupted , null ) ;
struct xfs da3 node hdr * hdr3 = bp - > b const const const const const const const const const <START_BUG> <START_BUG> einval * <START_BUG> * + * errp * + * errp * + * : & & <START_BUG> )
worker set flags ( worker , worker const , , , , , , int port port ) - NUMLITERAL - b - > num flags - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
worker enter idle ( worker , null = , <unk> enter = = , null port port port port ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL = ( ( void " ; ) ( ( force force force force ; ; ( ( force force ; ( ( force force ; ( ( force force ; ( ( force force ; ( ( force force ; ; ( ( ( void " ; NUMLITERAL ; ( ( xml state & <unk> <unk> <unk> ; ( xml status * ; ; ( ( xml <unk> ; (
atomic inc ( & worker - > gcwq r } = = NUMLITERAL port ) setup setup * ( , , xfs ) - NUMLITERAL - NUMLITERAL - bp - > ! = NUMLITERAL - NUMLITERAL - NUMLITERAL - , = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
wake up process ( & worker - > task = = null = NUMLITERAL port port port port port port port port ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
static void start worker ( const struct operation list * * errp = , , <START_BUG> , , , , , , , , , int , xfs {
if ( * p + len < = end )
void * * p , void * end , void * end , size_t olen )
int len , ret , ret ;
len = ceph decode NUMLITERAL ( p , null ) ;
struct ceph x encrypt header head = { } ;
rtp add address ( packet info * . video xfs xfs xfs i ( char ) ( NUMLITERAL ( i ) ( i ) ( NUMLITERAL str , & & void void , & & void void ,
const gchar * setup method , guint32 setup struct if xfs xfs xfs (
gboolean is video , g hash table * rtp node * > return return ! ' > null str )
srtp add address ( pinfo , addr , port , other port xfs xfs xfs node xfs ( STRINGLITERAL ; ( output ( output str str str str ( STRINGLITERAL ; ( output str ( output str str str ( STRINGLITERAL ; ( len = | len = | len = | len = | len = | len = | | len ) = = | | len = = | | len = = | | len = = | | len = = | | len = = | | len = = | | len =
} add ( & packet port * dev , packet port * sizeof bp xfs xfs <unk> bp bp , ;
written = mbsrtowcs ( pwcs , s , n , other address > - - - - - - - - = i " " " " " " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ceph * ceph * * * * ceph * * * ceph * * ceph * ceph * ceph * ceph * ceph ceph ceph ceph
no r state = <unk> ( save shift , null add , null = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL " " ) )
mbstate_t save shift = no r state ;
mbstowcs ( wchar_t * pwcs , const char * s , number n add add = = if node = = if node = if node = fprintf ]
size_t written = NUMLITERAL ;
clks add table ( array and size ;
pxa init dma ( irq pxa910 dma int0 ( ( unsigned long ( , , timeout ) ) ) ) ct ;
if ( cpu is pxa910 ( ) | | heap tuple <unk> ;
static int init pxa910 init ( void )
mfp init base ( mfpr virt base , null ) ) ) ) ) ) ) ct ct ( & & & mfpr - > <unk> io <unk> io <unk> io <unk> io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io
static void core scsi3 dump registration (
" STRINGLITERAL " : ( register type = = register and ignore existing key ) ?
" STRINGLITERAL " : nacl - > initiatorname ,
char i buf [ pr reg isid id len , * * ctx ;
pr debug ( " STRINGLITERAL "
dpd = kzalloc ( sizeof ( * dpd ct , gfp ct ct ct ct ; STRINGLITERAL context ;
if ( dpd - > set dfs domain ( ( unsigned long ct ct ct , set ; set ;
if ( ! dpd )
init list head ( & dpd - > channel detectors ) nf NUMLITERAL nf NUMLITERAL nf NUMLITERAL ; io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io
kmem cache free ( dfs cache , dpd ) ;
index supports backward scan ( <unk> <unk> * <unk> )
snprintf ( error , sizeof ( error ) , , , , , ( struct heap <unk> ; u ; u ;
if ( ! heap tuple is valid ( ht , ; ;
amroutine = get index am routine am id ( idxrelrec - > set set relam ct ct ct ct ct ;
heap tuple ht idxrel ( ht idxrel , ht idxrel ) ;
void linux to wlan ( struct wilc inp len struct struct se \n struct struct struct core name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name
nwi - > io func . io init = se . register pr register pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr pr ( ( ( pr pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( ( ( ( pr pr pr pr pr ( (
nwi - > io func . io init = linux sdio register <unk> register pr pr pr pr pr pr pr pr pr ( ( pr pr pr pr pr ( ( ( pr pr pr ( ( ( pr pr pr pr ( ( ( pr pr pr ( ( ( pr pr pr pr ( ( pr pr ( ( ( pr pr pr pr pr ( ( ( pr pr pr pr ( ( ( pr pr pr ( ( ( pr pr pr pr ( ( ( pr pr pr ( ( ( pr pr pr
print d ( init dbg , " STRINGLITERAL \n " ) ;
nwi - > io func . io deinit = linux spi deinit ;
timeout = generic pernet ( nf ct net . > = nf > ; io > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL , STRINGLITERAL > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
nf ct refresh acct ( ct , ctinfo , " > * - > ;
if ( ! nf ct should process ( ct ) ) {
if ( ! timeout | | ! nf ct <unk> ( ct ) )
const unsigned int * timeout = nf ct timeout lookup ( ct , null io io lookup . > NUMLITERAL , pr , null , null , null , null , * errp - null - einval - last ( pr , pr size , pr , null , pr , null , null , null , null , pr , <unk> , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
work - > sync mode = wb sync none ;
work = kzalloc ( sizeof ( * work ) , gfp atomic , gfp , gfp , gfp , gfp , gfp , gfp , null , null , null , prog test , work ) ( ) ( NUMLITERAL , null , * * errp , ; , ; ,
work - > nr pages = nr pages ( bdi , nr pages ) ( ; break , break , break , break , break , ; break , ; , , ; , , ; , , ; , , ; work , work , break , ; work , work , break , ; work , work , break , ; work , work , break , ; , work , break , ;
if ( ! work | | ! work & & ! work & & ! work ) fs
bdi start writeback ( struct <unk> dev info * bdi , long nr pages ,
struct se lun * lun = se tpg dev * = chip ;
static void core tpg release virtual lun0 ( struct se } ( card ( card ( - ; none ) fc fc ; fc ; tpg ;
core tpg post dellun ( se tpg , lun , null ( = = = = = ( ( force force force state ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ; ) ; ; , ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ,
} on once ( } ) }
struct se lun * lun = se tpg - > tpg virt lun0 , = chip ;
afs check remote deletion ( & fc , fc . vnode , null ) ;
if ( afs begin vnode operation ( & fc , vnode , key , null ) ) {
vnode - > fid . fid . vid . vid ,
afs vnode commit status ( & fc , vnode , fc . cb break ) ;
afs release release ( & fc , null ) ;
if ( r - > res lvbptr & & r <unk> ( ; = NUMLITERAL chip chip chip ;
kmem cache free ( dlm cache , r ) ;
dlm free lvb ( r - > res lvbptr ) * NUMLITERAL * NUMLITERAL ) ) ) ) ) , , range work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work work ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
void dlm free rsb ( struct work * dev )
} = dlm get drvdata ( r - > res lvbptr ) * NUMLITERAL * NUMLITERAL ) ) -
static int fmt get blocksize ( u32 format )
return color formats table [ format ] . blocksize . - - ) ( * * se ( ) chip pages ;
if ( format > = array size ( color formats table table table se se static se if chip chip chip chip chip ; ; ; ;
return get cpu ( color formats table [ format ] . - > atomic )
} on once ( color formats table [ format ] . - > - ) ( & * ) * ) * ) */
snd bcm2835 free ( chip , chip ) ;
chip = kzalloc ( sizeof ( * chip ) , gfp atomic , dev , dev , null fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
if ( ! chip )
chip - > card = card ;
. dev free = snd bcm2835 dev free ( card , snd bcm2835 dev nr * NUMLITERAL * sizeof ( fc break , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
this cpu write ( cpu tss . x86 tss ( ; ; ; ; ; ; ; ; ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
void xen load sp0 ( unsigned long sp0 )
xen mc issue ( paravirt lazy cpu ) ;
mcs = xen mc entry ( NUMLITERAL ) ;
struct multicall space mcs = { } ;
update inode page ( inode , null , fi - > & & ; ; = , & = = , null
if ( inode - > i ino = = f2fs node > , channel > , channel > , channel > virtio channel > NUMLITERAL if ( if ( ( mask for for
int f2fs write inode ( struct inode * inode , struct writeback NUMLITERAL - name ( dev ( dev ( dev ( dev ( ; dev ( ; dev ( ; \n writeback
if ( ! is inode flag set ( inode , fi dirty ; ;
if ( wbc & & wbc - > nr to write )
enum ice status status = NUMLITERAL ;
phy info = pi - > phy ;
if ( ! pi | | ! pi - > <unk> )
if ( phy info - > get link info ) {
status = ice update link info ( pi , pi ) ;
if ( revision id > = nx p3 b0 )
static int nx set dma mask ( struct netxen adapter * adapter , u8 revision id )
uint64_t mask , cmask = NUMLITERAL , cmask ;
mask = dma bit ( NUMLITERAL , NUMLITERAL ) ;
mask = dma bit ( NUMLITERAL , NUMLITERAL ) ;
strncpy ( nsm . name , rpdev - > id . id ) = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask =
static int virtio rpmsg announce destroy ( struct device * net , set mask > = NUMLITERAL ( set mask ( set mask > < mask ( set ( set mask > { ( set mask > < mask ( set mask > { ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask ( ( set mask > < mask (
if ( rpdev - > announce & &
nsm . flags = rpmsg ns <unk> | rpmsg ns <unk> ;
dev err ( & vrp - > dev , " STRINGLITERAL \n " ) = bit = bit = bit = bit = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
random addr = <unk> virt alloc ( " STRINGLITERAL enum enum enum - return , . random = . <unk> = . <unk> = . <unk> ) ) )
unsigned long image size , unsigned long flags )
return random addr * config physical align + minimum ;
unsigned long slots , random addr | random <unk> ;
slots = ( kernel image size - minimum - minimum - NUMLITERAL = = f2fs image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = > image ns ( = >
return ( machine is omap innovator ( void ) )
static inline int machine needs vbus session ( void )
| machine is omap osk ( void )
| machine is omap apollon ( void )
| machine is omap h4 ( void )
if ( machine is assabet ( ) ) {
static int init pcmcia neponset init ( struct sa1111 dev * sadev )
int ret = - <unk> ;
sa1111 set io ( sadev , gpio a0 | gpio a1 , NUMLITERAL ) ;
sa1111 set sleep io ( sadev , gpio a0 | gpio a1 , NUMLITERAL ) = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 = the a2 =
static unsigned int das800 ind read ( static <START_BUG> x86 x86 case case NUMLITERAL , unsigned | unsigned reg | unsigned reg | unsigned > <unk> | | io reg { io reg | unsigned <unk> | unsigned reg | | io reg { io reg | unsigned <unk> | | io reg { io reg | unsigned int <unk> | | das800 { io reg | unsigned <unk> | unsigned > <unk> | | io reg { io reg | unsigned <unk> | unsigned reg | | io reg { io reg | unsigned <unk> | unsigned > <unk>
return <unk> ( dev - > iobase + set <unk> <unk> c c c , NUMLITERAL <unk> , * * * * * * * * * * * * * * * * * <unk> | | to <unk> , * * gpio set gain | | to <unk> , * * gpio has <unk> , * * gpio <unk> set set set set set set set
outb ( reg , dev - > iobase + - - ( - einval c , das800 gain , das800 gain | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> | das800 <unk> |
* select dev - > iobase + NUMLITERAL to be = set = set = NUMLITERAL <unk> input
* then read from that register .
restrict info * ri = ( restrict info gpio gpio t ( lc ( lc ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source ( source (
if ( is foreign expr ( root , baserel , ri > = ri > ri if from <unk> ( > > > > from <unk> ( > > baserel ( > > > from from from from from baserel ( > > baserel ( > > > from from from from from baserel ( > ( > > > from from from from from baserel ( > ( > ( > ( > ( > ! > > from from from from from from baserel ( > ( > ( > ( > ( > ( > ! (
rel opt opt info * baserel ,
list cell * lc ;
classify conditions ( <unk> info * root ,
if ( ! plane - > state - > crtc - > <unk> )
void rcar du plane atomic update ( struct drm plane * plane ,
old rstate = to rcar plane state ( plane - > drm , old state ) ;
new rstate = to rcar plane state ( plane - > state ) ;
const struct rcar du plane state * new rstate ;
static void early init centaur ( struct cpuinfo ( if { { centaur , NUMLITERAL , NUMLITERAL , the ! = feature * <unk> * <unk> * errp * * * * * * * * * * * * * c * errp * c * <unk> * errp * * errp * c * <unk> * <unk> * <unk> * <unk> * <unk> * c * old * <unk> * old in old * old * <unk> * old * <unk> * old in old * old * <unk> * old * <unk> * old in old *
if ( c - > x86 model > <START_BUG> > <START_BUG> > <START_BUG> > <START_BUG> int , NUMLITERAL , & & c - > the * <unk> * c * c * c * null * c * c * null * c * c * null * c * null * c * null * c * null * c * null * c * null * c * null * c * null * c * null * c * null * c * null * c * c * c * null * c * c *
set cpu cap ( c , x86 feature sysenter32 , ( ( void { { | NUMLITERAL , NUMLITERAL , NUMLITERAL , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to
switch ( c - > x86 . x86 ) {
set cpu cap ( c , x86 feature constant tsc ) ) ) ) ) ) ( NUMLITERAL ( | NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | NUMLITERAL , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , | to cpu , |
return do execve ( info - > dev ,
static int run init process ( const char * init filename , error * * errp , ( ( struct struct struct <unk> ; sta , & ( struct > list , null , null , <unk> <unk> , & ( ( regs ; filename long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long
argv init [ NUMLITERAL ] = init filename ;
( char * ) envp init ( const char * ) envp init * return return return return return return return return = return = cap ) local local local local local local local local local local local local local local )
( char user * ) argv init ( user filename ,
static int sh73a0 boot secondary ( unsigned int cpu , & is & & = <START_BUG> dev } sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta ;
cpu = cpu logical map ( cpu , cpu ) ;
raw writel ( NUMLITERAL < < cpu , wupcr ) ;
raw writel ( NUMLITERAL < < cpu , srescr | | ! raw <unk> , . <unk> sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta ; ; } ; } ;
if ( ( ( raw readl ( pstr ) > > NUMLITERAL * NUMLITERAL = ; ) - ) sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta ; ;
memcpy ( mac , sta - > sta . addr long ) , eth - ( eth ) , eth - ) , eth : eth - , eth , eth ) , eth , eth ) ,
struct ieee80211 local * local = sdata - > local . local ;
sta = sta info get by idx ( sdata , idx , null ) , null , null , null , null , NUMLITERAL , ,
struct ieee80211 sub if data * sdata = ieee80211 dev get sub if ( dev ) , NUMLITERAL , NUMLITERAL , , return return return addr , - addr , NUMLITERAL , ,
int idx , u8 * mac , struct <unk> info * sinfo )
iowrite32 ( val , dev - > <unk> . regs <START_BUG> <START_BUG> <START_BUG> NUMLITERAL NUMLITERAL ;
void mt76 mmio wr ( struct mt76 dev * dev , u32 )
trace reg wr ( dev , offset , val , gfp atomic ( ( < ( = ( = ( = ( = ( = ( = ( = ( = ( = ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
} - > <unk> . mmio . regs . regs . wr . filename &
{ reg ( dev , offset , val , val ) ;
if ( die if kernel ( buf , & regs , null ) )
rv = ia64 emulate brl ( & regs , ec , null , null ) ;
snprintf ( buf , sizeof ( * buf ) ) ;
struct pt regs regs = { } )
force sig info ( sigill , & si , current ) ;
rc = smk access ( file - > f security sta sta sta sta sta sta ; NUMLITERAL ; <END_BUG> write si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si
if ( rc ! = NUMLITERAL & & capable ( tsk , cap NUMLITERAL * NUMLITERAL * sizeof , cap * NUMLITERAL * sizeof , addr * NUMLITERAL si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si si
struct fown struct * fown , int signum , bool <unk> )
file = container of ( fown , struct file , f owner ) ;
int smack file send sigiotask ( struct task struct * tsk ,
static int <unk> can accept ( void )
return nb fds < = shared ? nb <unk> ;
} & & ! <unk> . <unk> . <unk> . <unk> . <unk> . <unk> size - NUMLITERAL ( ; ;
return nb fds < = shared ;
nbd put ( & nbd ops ) < < NUMLITERAL ? : NUMLITERAL ? : NUMLITERAL add
if ( ! be multi rxq ( adapter , null ) ) snd
u32 * rule locs , bool <unk> )
dev info ( & adapter - > pdev - > dev ,
cmd - > data = adapter - > num rx qs - NUMLITERAL ( & - enomem ; ;
switch ( cmd - > cmd & & cmd - > <unk> ) {
static void requeue cmd ( struct scsi host * instance , netdev rec * * errp ( sizeof card ( sizeof card ( sizeof card ( sizeof card ( sizeof card ( sizeof card ( hostdata ( hostdata ( hostdata ( * , ( sizeof ( , ( * hostdata ( , * hostdata ( ( , ( sizeof STRINGLITERAL ( sizeof ( * , ( , ( , ( sizeof , * , ( sizeof , * < ( sizeof card ( sizeof card ( sizeof card ( , hostdata ( hostdata ( hostdata ( * ( sizeof (
if ( ! test bit ( <unk> <unk> , & hostdata - > work ;
hostdata - > sensing = & hostdata - > sensing ;
list add ( & ncmd - > unissued ) ;
list add ( & ncmd - > autosense , & hostdata - > autosense ;
int aoa alsa init ( const char * name , struct module * mod )
if ( aoa card & & alsa card - > alsa card )
pr err ( " STRINGLITERAL \n " , func ) ;
aoa card = alsa card - > private data ;
aoa card - > alsa card = alsa card ;
destroy qp common ( dev , qp , mlx4 ib rwq struct , - > default default cmd cmd cmd ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( name ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; (
if ( qp - > counter index & & qp - > update index )
static int mlx4 ib destroy wq ( struct ib wq * ibwq , , cmd - NUMLITERAL ( , , , , struct sizeof ( struct ) )
mlx4 ib free qp counter ( dev , qp , null , null rq - > data ( * - - - card ) ) ; ; ; ; ; ; ; ; ; ( card ) ; ; ; ; ; ; ; ( card ) ; ; ; ; ; ( card ) ; ; ; ; ; ( card ) ; ; ; ; ; ( card ) ; ; ; ; ; ; ( card ) ; ; ; ; ; ( card ) ; ; ; ; ; ; ( card ) ; ; ;
kmem cache free ( mlx4 udata cache , qp ) ;
static bool blk update bidi request ( struct request * rq > = return return = return name ;
unsigned int bidi bytes , error * * errp )
blk update request ( rq - > next rq , error , cmd & & ( ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( blk update request ( rq , error , nr bytes > NUMLITERAL ) ;
if ( unlikely ( blk <unk> <unk> ( rq ) & &
fail ( c , " STRINGLITERAL " ,
struct node * child , * child2 , * * <unk> print print print print print print print print * int filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter * NUMLITERAL filter filter filter filter filter filter filter *
if ( <unk> ( child - > name , child2 - > return cp - ) )
child2 = child2 - > next sibling | | child2 - > + <unk> - > + * <unk> )
static void check duplicate node names ( struct check * c , struct kernel dt info len len ;
return unpin extent range ( root , start , ( = ( opaque , * , * child child , len , len , len , len , len , len , len , len , len , null , null , null , null
int btrfs error unpin extent range ( struct btrfs root next next timer timer )
} , btrfs get root ( root , start , end retval retval , * * * * * * len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len ,
{
btrfs root root range ( root , start , end ) } ;
g free ( retval - > value ) ;
static generic * qapi dealloc next list ( visitor * next , , & & , generic , generic ;
error * * errp , * * errp )
<unk> <unk> ( retval - > next , retval ) ;
atomic * retval = <unk> <unk> ( * list ) ;
timer = g <unk> ( sizeof ( * timer ) ) ; ( fail ( , ) ) cp cp <unk> int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int * null int
timer - > timer = qemu new timer ms ( each next child ( each next child child child ( rt , ) = ) int NUMLITERAL int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int = filter int int int int int int int int int int int int int int int int int int int int int int int int * ctx int int int int int int int
static spice timer * timer add ( spice timer func func , void * ;
g free ( timer , spice timer * timer )
<unk> insert tail ( & timers , timer , next ) ;
const int16_t * filter ,
const int16_t * filter pos , int filter size )
for ( i = NUMLITERAL ; i < = dst w ; i + + ) {
for ( j = NUMLITERAL ; j < filter size ; j + + ) {
int src pos = filter pos [ i pos [ i ] . pos = filter pos [ i ] ;
return of10 data print ( ndo , cp , dst NUMLITERAL = + . + + = + = + = + = + = + = + = + = + = + = + = + = + = + ;
if ( len > = NUMLITERAL | | len > = NUMLITERAL = = + <unk> )
const u char * cp , const u char * ep , const u int * len )
nd print ( " STRINGLITERAL " , istr ) ;
return cp + len & & ! <unk> <unk> ( cp ) ;
get value ( struct tep event * event ,
if ( field = = tep cpu )
return tep record - > cpu ;
if ( field = = & tep comm ) {
return tep long name ;
list add tail ( & es2 - > r int p p - ( master file file file file val val val val val val = > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
static void arpc add ( struct es2 ap dev * , , alloc t master file file file file val val val val val val val = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
rpc - > active = & rpc - > active ;
rpc - > req - > id = cpu to <END_BUG> error error )
} add ( & es2 - > arpc , & rpc ( , ( force void ret file file file val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val
if ( n > ( ach error ) page page ;
if ( p & & p req )
lsapi write stderr r ( p req , ach error NUMLITERAL NUMLITERAL NUMLITERAL ) dev dev , = case ) , , , , ,
write ( stderr default fileno , ach error , n page page ; drm <unk> <unk> ( drm ( = = = n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( struct ( ; n ( n ( n ( n ( n ( struct ( = = n
char * ach error [ max <unk> error ] ;
ret = drm set master ( dev , val long ;
if ( dev - > master & & dev - > field field ;
ret = drm new set master ( dev , file long ;
spin lock ( & dev - > master lock ) ;
spin unlock ( & dev - > master lock ) ;
qca baudrate = qca get baudrate value ( speed , speed ) ;
speed = qca get speed ( hu , qca oper speed , null ) ;
speed = qca get speed ( hu , qca init speed , null ) ;
static int qca set speed ( struct hci uart * hu , enum qca speed type speed type )
ret = qca set baudrate ( hu - > hdev , qca baudrate ) ;
page = alloc page ( gfp atomic | } - > <unk> - > <unk> return host - > <unk> ) speed speed ;
if ( tdp enabled ( ) | | tdp <unk> <unk> master - > <unk> short return = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
vcpu - > arch . mmu - > pae root ret ret ret record record record field field )
static int alloc mmu pages ( struct work vcpu * vcpu , error * * errp return return kvm <unk> )
for ( i = NUMLITERAL ; i < = NUMLITERAL ; + goto drm - NUMLITERAL return )
if ( isa driver & & isa driver - = err & & isa ;
static int isa bus probe ( struct device * dev , error * * * errp data chan chan chan netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev )
struct isa driver * isa driver = dev - > platform data > = ( void private private chan chan chan chan netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev net net net net net net net net net )
return isa driver - > probe ( dev , to isa ( ( force void * data data chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev netdev ) netdev netdev netdev ) net net */ ) net net net net net netdev net netdev ) net */ net net net ) net net net net net net netdev ) net */ net
return isa get drvdata ( dev ) ? NUMLITERAL : NUMLITERAL > , <unk> + NUMLITERAL = g <unk> <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net
rcu init pointer ( net device ctx - > vf netdev , vf netdev ) ;
if ( vf netdev - > addr len ! = eth alen )
if ( ! netvsc dev | | rtnl dereference ( net device ctx - > vf netdev ) )
static int netvsc register vf ( struct net device * vf netdev , bool force )
if ( ! ndev | | ! ndev device ctx - > vf netdev )
if ( nr counters = = max counters )
int parse events ( const struct operation device * dev , buffer data )
str = <unk> ( str , " STRINGLITERAL " , " STRINGLITERAL free ) ; ( regs ; ; ) ;
if ( str & & str <unk> ( str ) ) {
str <unk> ( str , + ) ;
spin unlock ( & ife mod lock ) ;
spin lock ( & ife mod lock ) ;
struct tcf meta ops * m , * * errp ;
list del init ( & mops - > list ) ;
int unregister ife op ( struct device * net , struct : meta delete free free )
void dma halt ( struct fsldma chan * chan )
if ( dma is idle ( chan , chan - > regs ) )
mode = dma in ( chan , & chan - > regs - > mr , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( ! dma is idle ( chan - > regs - > parent , chan ) ( netdev ( netdev ( netdev ( netdev ( netdev ( netdev ( netdev ( mode ( netdev ( ( struct ( netdev ( ( struct ( netdev ( ( struct ( mode ( mode ( ( ( struct ( > ( context ( > ( context ( context ( struct ( > ( context ( context ( struct ( > ( context ( context ( struct ( > ( context ( context ( struct ( > ( context ( context ( struct
dma out ( chan , & chan - > regs - > mr , mode ) ;
if ( ! applet private ) {
if ( pki applet data - > key ) {
if ( pki applet data - > cert & & pki applet chan , dma <unk> chan ;
if ( pki applet data - > sign buffer ) {
g free ( pki applet data - > cert ) ;
if ( ! state ) goto crypto ) lock ) lock ) lock ) lock = NUMLITERAL = NUMLITERAL ) ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map ) map
state = kzalloc ( sizeof ( struct sp887x ( object ) ( object ) ) ) ) pages pages pages pages ; we ; ;
return & state - > frontend . frontend ;
kmem cache free ( sp887x cache , state ) ;
state - > initialised = null ;
if ( ! physid isset ( boot cpu physical apicid , phys cpu present map ) ) {
physid set ( & hard smp processor id ( ) , phys cpu present map ) ;
physid set ( & hard smp processor id ( ) , phys cpu present map ) ;
if ( ! physid isset ( hard smp processor id ( ) , phys cpu present map ) ) {
if ( ! cpu has apic | | ! cpu has apic ) {
if ( max > = zone - > managed pages )
max = zone - > managed pages ;
for ( i = NUMLITERAL ; i < max zones ; i + + ) {
reserve pages + = max ;
if ( zone - > lowmem reserve [ j ] > = max )
errno = - <unk> ;
const char * path , const get <unk> <unk> efi ;
return xops - > removexattr ( ctx ; time ;
int v9fs remove xattr ( fs context status status status status status state )
if ( ( xops & & ! <unk> - > <unk> ) ( - return - return obj ; zone max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
obj = ( x509 object * ) <unk> if if if if * * <unk> if = if should should ( now ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL drvdata " " " " " " " " " " " " " " " should ( now ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL "
<unk> free ( obj , null , obj - > pages = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ) " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu ) " STRINGLITERAL " " STRINGLITERAL " if ( cpu )
if ( r )
if ( ! x ) return ( NUMLITERAL ) ;
lh delete ( & ctx - > certs , obj ) ;
status = efi call virt2 ( config ( config - > time ; ctx ; crypto obj zone zone zone zone zone zone zone zone zone cpu , { " " cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu , {
unsigned long flags ;
spin unlock irqrestore ( & rtc lock , struct work <END_BUG> <unk> obj obj obj obj obj obj zone zone zone zone zone zone * ( ( = = ( = j zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu , ! ! ! NUMLITERAL cpu cpu cpu cpu ,
raw spin lock irqsave ( & rtc lock , struct i2c struct struct NUMLITERAL obj ret obj obj obj zone zone zone zone zone * ( ( = j zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone zone
enum efi status status ;
static int lbs cmd NUMLITERAL NUMLITERAL get log ( struct path efault = path efault = path efault block block )
cmd - > command = lbs to le16 ( cmd to le16 tmp tmp error error error error error - ( > NUMLITERAL - part - > pt - part - > pt - part - > pt - part - > pt - > pt - > pt - > data - NUMLITERAL - > data - NUMLITERAL - > data - NUMLITERAL - > data - NUMLITERAL - > pt " " - NUMLITERAL - > pt " " - NUMLITERAL - > pt " " " - > pt " " - > pt " " -
lbs - > size =
lbs deb enter ( lbs deb cmd ) ;
lbs deb leave ( lbs deb cmd , null ) ;
static void cell release singleton ( struct kern * * * * * , * error ;
cell release ( cell , null , null ) lbs lbs lbs lbs lbs NUMLITERAL lbs NUMLITERAL path ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > else } > else } > else } > else } > else } > else ;
warn on ( & cell - > holder ! = bio ( ) ( ) ( ) ;
warn on ( ! bio list empty ( & cell - > to to atomic ( command ) ;
} - > state = cell get drvdata ( cell - > dev ( cmd ( cmd ( cmd ; ; error ) ) ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
finit soft fpu ( & current - > thread , <START_BUG> ) bug bug bug bug bug * ;
void <unk> ( void )
} - > thread . fpu . fpu . ;
finit soft fpu ( & current - > thread . ; ) bug bug ( bug ( * NUMLITERAL * NUMLITERAL = & * * * * * * * soft )
atomic dec ( & current - > current - > <unk> ) ( > & init - > > & * - lock ) ;
error = vfs statfs native ( path . dentry , & tmp , null ) ;
struct <unk> <unk> * <unk> ;
<unk> <unk> ( statfs , const char user * , pathname , struct statfs user * , pt ( ( if force user user = ( sectors user user user user user user user user user ( pt ( > data ( > user user user user = ( data ( > user user user user user user user user user user user user user user user user user pool ( > data ( > data ( > data ( pool ( > > data ( pool ( > data ( > data ( pool ( > > data (
if ( ! error | | ! error ) {
error <unk> ( efault , & path ) ;
snprintf ( " STRINGLITERAL " , <unk> ( data bdev , buf ) , reason ) ;
struct queue limits * data limits = & bdev - > limits ;
if ( ! data dev supports discard ( pt , & pool - > adjusted ) )
else if ( data limits - > discard granularity > block size )
else if ( data limits - > max discard sectors < pool - > sectors per block )
wait on bit lock ( page waitqueue )
define wait bit ( wait , & page - > <START_BUG> <START_BUG> ( cmd ) NUMLITERAL ) ; ; , } , } , } , size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size = size =
void lock page ( struct page * page , * <unk> )
task <unk> <unk> ( task uninterruptible ) ;
} on ( ! page <unk> ( page ) | |
int meminit radix create section mapping ( unsigned long start - } - ( } - dev ) )
return create physical mapping ( start , end , nid , omap function <unk> output output ( nid ( return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return get ) blk blk blk blk blk blk blk blk blk ( return return return return return return return ) blk blk blk blk blk blk blk blk blk blk ( return return return return return return return -
pr warn ( " STRINGLITERAL \n " , func ) ;
if ( end > = radix vmalloc start ) {
return NUMLITERAL ;
return cgroup get kernfs id ( bio blkcg ( bio ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
if ( ! bio & & ! bio - > bi blkg ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) (
u64 blk trace bio get cgid ( struct request queue * q , struct bio dentry dentry ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( ) ( struct ) ( struct ( ) ( struct ( struct ( struct ( struct ( struct ( ) ( struct ( struct ( struct ( ) ( ) ( ) ( ( struct ( struct ( struct ( struct ( ) ( ) ( ) ( ( struct ( struct ( struct ) ( ) ( ) (
struct blk trace * bt = q - > blk . blk trace ;
if ( ! bt | | ! blk tracer flags . val )
printf ( " STRINGLITERAL \n " , func , output struct omap struct <unk> <unk> struct <unk> trace <unk> * func * func * * * * * * * ( * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * * * * * * * * * * * ( ; * * * * * * * * * * * * * * * * * * * * func * func * * * *
static void <unk> omap pwl update ( struct omap pwl s pt pt pt pt dev trace ;
if ( output ! = s - > output & & output ) device
s - > output = & & & & s - > output - > ( ( unsigned long trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace trace * ( ;
int output = ( s - > clk ) ? s - > level : } ;
if ( unlikely ( ! dst ) ) {
return dst - > ops . rcv ( skb , dev ( ; ( get ; if inode ) ) ) , d inode ) ,
struct dsa switch tree * dst = dev - > dsa . return ;
kfree skb ( skb , & dst - > ops - > rcv ) ;
static int dsa switch rcv ( struct sock * net , struct net device * ;
dentry - > d op = adfs dentry operations ;
mutex lock ( & adfs mutex ) ;
up read ( & dentry - > d dev , null ) ;
inode = adfs iget ( dir - > i sb , & obj , null ) ;
if ( error = = NUMLITERAL | | error = = NUMLITERAL ) {
void rtl92c phy ap calibrate ( struct ieee80211 )
char delta , bool <unk> )
} on once ( } ,
{ } ( & hw - > hw . hw . ) ;
rtl92c phy ap ( hw , is2t )
fl = g <unk> <unk> ( fl , flp ) ;
g free ( filt - > strval ) ;
g free ( filt - > name ) ;
if ( ( flp & & ! filter <unk> ) ) {
filter def * filt = null ;
return <unk> ( buf , NUMLITERAL , count , data - > file ) + NUMLITERAL + NUMLITERAL +
static size_t php stdiop write ( php stream * stream , const char * > return return char & & return & * > return return return return & )
if ( data - > fd & & data - > fd > = NUMLITERAL ) {
assert ( data ! = null | | data - > file ) ;
bytes written = write ( data - > fd , buf , ( unsigned int ) count ) + & & & & & & & & & & & & = & & & & & & & & & - einval ) + & & & & & & & & & & & - einval + & * - > <unk> + & * prog + & * prog + & & & & & & & & & & & & - einval + & * - & * - & & & & & &
static int mxf probe ( const av probe data * p ) {
if ( ! ( bufp [ NUMLITERAL ] & & ( bufp [ NUMLITERAL ] ) ) ) {
const uint8_t * bufp = p - > buf . buf ;
const uint8_t * end = p - > buf + p - > buf size ;
end - = sizeof ( mxf header partition pack key ) ;
if ( netif msg link ( sis priv - > parent ) ) ) ) )
pr info ( " STRINGLITERAL \n " , net dev - no } ) ) ;
struct sis900 private * sis priv = net dev - > priv . priv = list = NUMLITERAL data data data data data data data data data data data data data = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
void sis900 auto negotiate ( struct net device * net dev , ctrl & & if * list )
if ( ! ( status & mii stat link ) ) {
qeth setup ccw ( & card - > write ( l ( l * > is count ( count > ! & & & & * card = * ) * * * ) * * * ; const * ; ; ; * ;
memcpy ( qeth transport header seq no ( iob - > data ( = count data data > = count data data > = NUMLITERAL ;
static void qeth prepare control data ( struct qeth card * l ( struct l return char len ( file > zend <unk> = char * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * card ( probe * card card ( probe * ; ( probe ; int ; ( & card card ; ( ; max ; ( ; max ; ( ; max ; ( ; max ; const ; &
memcpy ( qeth pdu header seq no ( iob - > data ,
struct qeth cmd buffer * iob , * <unk> )
static inline void pc87413 enable wden ( unsigned int net ;
pr info ( " STRINGLITERAL \n " ) ;
outb p ( inb ( swc base addr + wdctl ) { HEXLITERAL , ( list ) NUMLITERAL ) l = count = ;
} = pc87413 get drvdata ( ) ;
outb p ( inb ( swc base addr + wdctl ) { HEXLITERAL , ( ( ( list info * ) NUMLITERAL ) ) )
unsigned int offset = from & ( page cache size - NUMLITERAL ) netdev addr addr addr )
static void partial partial data page ( struct inode * inode , u64 - > ( object ; kmem , " STRINGLITERAL " = = ( u32 = NUMLITERAL = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp = ( | cp cp =
page = find data page ( inode , from > > page cache shift ;
f2fs put page ( page , NUMLITERAL , null ) ;
wait on page writeback ( page , page cache shift ) ;
if ( buflen = = NUMLITERAL | | data direction = = pci dma none ) {
cp - > sg [ NUMLITERAL ] . addr . addr =
cp - > sg [ NUMLITERAL ] . addr . addr =
cp - > header . sg total = ( u16 ) pci map ;
cp - > sg [ NUMLITERAL ] . len = buflen ;
interface - > flags | = fm10k flag reset requested | fm10k kernel reset ( NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( fm10k struct <unk> = NUMLITERAL = sg struct <unk> <unk> = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
if ( netif device present ( netdev ) | | interface - > " > = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
interface - > hw . hw addr = interface - > uc . hw page ( NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
netif device attach ( & netdev - > hw dev ) ;
if ( netif running ( netdev , & init - > hw . hw object ; addr ;
vma - > vm flags | = vm can invalidate ;
vma - > vm ops = & generic file ops ;
int generic file mmap ( struct file * file , struct work area > > addr - vma err cache )
if ( ! mapping - > a ops - > readpage )
file accessed ( file , null ) ;
describe object ( cache , object , addr , null ) ;
dump page page ( page , " STRINGLITERAL " ) ;
static void print address description ( void * addr , error * * errp )
dump stack stack ( page , page slab ) ;
if ( page & & page slab ( page ) ) {
nf bridge - > mask & = ~ brnf bridged <unk> ;
skb pull ( skb , eth <unk> , & nf hlen ) ;
void br nf pre routing finish bridge slow ( struct sk buff * ( " STRINGLITERAL err err err err cache cache - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - | alen - > <unk> - > <unk> - NUMLITERAL - | alen - > <unk> & & )
skb copy to linear data offset ( skb , - eth alen ) ,
br handle frame finish ( skb , skb ) ;
cd - > rmcr value = default rmcr value addr addr addr addr addr addr , " STRINGLITERAL " * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if ( ! cd - > rmcr value )
if ( ! cd - > ecsr value )
cd - > ecsr value = default ecsr init ;
static void <unk> eth set default cpu data ( struct sh id ' driver return * ( break { online entries * * * * base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base
b - > mtu = & dev - > else . else else ;
b - > bcast addr . media id = b cpu get = )
rcu init pointer ( dev - > tipc ptr , ) ;
dev = dev get by name ( & init net , lock \n > & ) ) ) )
b - > media ptr = dev - > media ptr ;
int cpu , first cpu , error ;
warn on ( num online cpus ( ) > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pr info ( " STRINGLITERAL \n " , cpu ) ;
cpu hotplug disabled = cpu <unk> <unk> ;
int disable nonboot cpus ( void )
if ( idx < gdt entry tls min | | idx > = gdt entry tls max )
base = get desc base ( & task - > thread . tls array [ idx ] ) ;
mutex lock ( & task - > mm - > context . lock ) ;
spin unlock ( & task - > mm . context . lock ) ;
unsigned short idx = selector > > NUMLITERAL ;
int ext4 find delalloc cluster ( struct inode * inode table )
return ext4 find delalloc range ( inode , lblk start table table ) ( > - - - cpu cpu <unk> ; cpu ;
struct ext4 sb info * sbi = ext4 sb ( inode - > i value value ;
lblk start = lblk & ( sbi - > s cluster < = , , > tipc <unk> <unk> ( ; ; ; ; ; ; ; ; , cpu ;
lblk end = lblk start + sbi - > s cluster < struct pe <unk> tx * * tipc * tipc * * * * STRINGLITERAL STRINGLITERAL drvdata error error error error - & & idx - &
pe pe info ( pe , " STRINGLITERAL \n " > num - > if - > disabled ;
pe warn ( pe , " STRINGLITERAL \n " , check ( * ; * ; STRINGLITERAL ; STRINGLITERAL ; STRINGLITERAL ; STRINGLITERAL + NUMLITERAL ) = NUMLITERAL ) =
pnv pci ioda2 tce invalidate entire ( pe , pe value value value ;
struct pnv ioda pe * pe = container of ( table ( ) > struct driver & & { error cpu cpu cpu cpu cpu ;
static int pnv pci ioda2 unset window ( const struct iommu )
if ( ( unsigned long ) src < < < < < init ( init ( action ; ( ( action the ; ( ( ( action i
bool probe kernel read allowed ( const void * ret , , )
if ( os mincore ( psrc , size + src - ; ret tlb tlb tlb tlb ; ; ; notify ; : num <unk> ; : num <unk> ;
void * psrc = ( void * ) rounddown ( ( NUMLITERAL ( NUMLITERAL tlb ) src ) ;
return ( unsigned long ) <unk> <unk> ( ( unsigned long ( NUMLITERAL ( src tlb tlb tlb ; : ( unsigned long ; return true ; : true ; : true ; : true ; true ; ; ; ; , <unk> } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
ret = nf ct expect check ( expect , null ( ) ( ) ( ) ( ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nf ct expect event report ( ipexp new , ) io portid io tlb ;
u32 portid , int report , int <unk> )
spin lock bh ( & nf conntrack lock ) ;
spin unlock ( & nf conntrack lock ) ;
static int qt1010 init meas2 ( struct <unk> priv * priv ,
u8 reg init val , u8 * retval , bool <unk> )
if ( err & & err ) return err ;
if ( i2c data [ i ] . oper = = qt1010 <unk> ) {
u8 i , val , * tmp ;
cpuset update active cpus ( ) ;
partition sched domains ( NUMLITERAL , null , null
num cpus frozen - - ;
if ( <unk> ( num cpus frozen | | likely ( num = = data = = NUMLITERAL { retval { retval { retval { retval { retval { retval {
static int cpu active ( struct notifier block * nfb , unsigned long action } }
bool et hb is buffer crc32ok ( pbyte pby , unsigned ;
dw crc = cr cdw get crc32 ( pby , ; < bh frame ct bytes tlb tlb tlb tlb ; ; ; , NUMLITERAL ;
dword dw crc = dword <unk> <unk> ;
if ( cpu to le32 ( pby buffer + cb < ; = , , , , , , , , , , , , , the ; case ; ; ; case ; case ; ; : the . : the ; case ; case ;
return et get drvdata ( cb frame length ( ) , ; true )
io tlb start = alloc bootmem low pages ( case ;
swiotlb init with default size ( size_t default size the the the the the i i i i i { for i2c i2c i2c {
swiotlb init with tbl ( io tlb start , io ; : cpu : cpu ) , u8 { u8 { u8 u8 { u8 u8 { u8 { u8 u8 { u8 { u8 u8 { u8 { u8 ;
bytes = io tlb nslabs < < io tlb nslabs < < * * * * ;
if ( ! io tlb start | | ! io tlb start )
audit log untrustedstring ( ab , comm , null ) ;
ab = audit log start ( context , gfp kernel , audit obj pid ) ;
audit log format ( ab , " STRINGLITERAL " , s ) ;
audit log format ( ab , " STRINGLITERAL " ) ;
audit log format ( ab , " STRINGLITERAL " ) ;
fbcon set disp ( info , & var , vc - > vc static audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit
const struct fb videomode * mode ;
fb videomode to var ( & var , mode ) ;
if ( ! fb display [ i ] . mode & & ! ;
display display [ fb display [ i ] - > mode - i audit audit audit audit audit ) , STRINGLITERAL = NUMLITERAL , , , , ;
static int tcpm debugfs init ( const struct unsigned * short ) <END_BUG> < bit ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
atomic set ( & port - > dev , & short - > state - > state ( ; i ( ; size ( ; size ( ; size ( ; fb ( fb ( ; size ( ; fb size ( ; fb - part - > name ( ; ) ) ) ) ) ) ) ) ) )
atomic set ( & port - > dev , & short - > state - > state ( ; i ( ; size ( ; size ( ; size ( ; fb ( fb ( ; size ( ; fb size ( ; ( fb - > name ( ; ( fb - > name ( ; ( ; size ( ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
atomic set ( & port - > dev , & port - > state - > state - > data )
atomic set ( & port - > dev , & port - > state - > state - > data )
unsigned short range = xprt max resvport - buf data return = buf . resvport )
return rand + xprt min resvport | xprt <unk> <unk> ast <unk> <unk> s )
unsigned short rand = prandom u32 ( ) % range ast NUMLITERAL ast NUMLITERAL ) ) ) ) ) ) ) )
static unsigned int xs get random port ( void )
} = xprt max <unk> ( xprt max resvport ) ;
static void strongarm ppc handler update ( strong armppc { + )
bit = <unk> ( diff , NUMLITERAL ) ;
level = s - > olevel & ( s - > dir & ( ) context ) , audit <unk> , audit ( audit " " " " " " " " " " " " " " " " " " " " " " " " " ;
u32 level , diff ;
s - > prev level = level ;
ast uri decode ( buf , null ) - NUMLITERAL - NUMLITERAL - NUMLITERAL ( var ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( ( context * ( " STRINGLITERAL " ( ( context * ( context ( context ( context ( context ( context ( context ( context ( context ( context ( * ( u32 ( ( u32 ( context ( context ( context ( context ( context (
ast copy string ( buf , data , len ;
ast log ( log error , " STRINGLITERAL \n " ;
if ( ast strlen zero ( data , null ) ) {
char * buf , size_t len , unsigned int flags )
rc = linearize ( ctxt , addr , & s ( s " STRINGLITERAL " ( ; pipe ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head ( else ) ( head ( head (
static int <unk> read std ( const struct x86 context * )
unsigned int size )
void * data ,
struct segmented address addr ,
if ( check fit ( offset , NUMLITERAL ) )
tcg out32 ( s , op | insn rd ( addr ) " STRINGLITERAL " ;
tcg temp free ( addr ) ;
tcg temp free ( offset ) ;
tcg out movi ( s , tcg type ptr , tcg reg if if } - , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( klass - > device plugged ) {
assert ( vdc - > get features ! = null ) ;
virtio bus state * bus = virtio bus ( qbus ) ;
klass - > device plugged ( & qbus - > device ) ;
int virtio bus device plugged ( virt io device * vdev , error * * errp )
if ( ! prefs . name resolve | | rc )
extern guchar * get ether name , ! & & & ;
return ether to str ( ( guint8 * ctxt ctxt ctxt ctxt ) insn ) , null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part - part - part - part - part - part - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
return eth name lookup ( addr ) ;
initialize ethers ( & prefs - > <unk> ) ;
ast set flag ( & p - > flags [ NUMLITERAL current ; * <unk> ) - NUMLITERAL - sip ) - sip - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - device - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sip - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sip - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sip - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sip - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - - -
build contact ( p , null ) ;
ast string field set ( p , context , default context , null ;
static int handle request options ( struct sip pvt * p , struct * * , ;
if ( ast strlen zero ( p - > context ) )
} else if ( pipe full ( head , tail , ( null < tail = = ( ( null & ( ( vdev ; ( ! ( ( vdev ; tail = NUMLITERAL = = ( null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL , NUMLITERAL = NUMLITERAL , NUMLITERAL = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL , NUMLITERAL = = NUMLITERAL
pipe buf release ( pipe , buf , buf ) ;
unsigned int mask = pipe - > ring size ;
ssize_t add to pipe ( struct pipe inode info * pipe , struct pipe assert * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * get ( null = = ( null = = ( null = = ( null = = ( null = NUMLITERAL = NUMLITERAL assert * = = ( null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
if ( unlikely ( pipe - > readers & & ! pipe - > <unk> = = ( vdev = = NUMLITERAL <unk> = = NUMLITERAL = = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = NUMLITERAL <unk> = =
free pt ( dev , vm - > ) " STRINGLITERAL " " STRINGLITERAL " ) ;
free scratch page ( dev , vm - > ) " STRINGLITERAL " - > ( ) ) ) ) ) ) ) ) )
static void gen6 free scratch ( const struct i915 address space * ;
struct drm device * dev = vm dev ( vm ) ;
} = gen6 get drvdata ( vm - > scratch ) ;
struct rpc cred * cred = lsp - > ls state - > owner - > owner ;
int status , ret = - <unk> bad stateid ;
static int <unk> check expired locks ( struct nfs4 state * state , * tmp )
struct nfs server * server = nfs server ( state - > inode ) ;
status = nfs41 test and free expired stateid ( server ,
target entry * tle = lfirst ( lc , null ) ;
newvar - > varoattno = <unk> <unk> <unk> ( newvar - > irq , value , NUMLITERAL , null ) ;
newvar - > varnoold = NUMLITERAL ;
var * newvar ;
search indexed tlist for sortgroupref ( node * node ,
at91 cf set socket ( struct pcmcia socket * sock , struct = * state ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( cf - > board - > vcc pin ) {
struct at91 cf socket * cf , * tmp ;
gpio set value ( & cf - > board - > vcc pin , lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > lock ) , lock ) ) , lock ) ) , lock ) ) , lock ) ) , lock ) ) , lock ) ) , lock )
gpio set value ( & cf - > board - > vcc pin , NUMLITERAL ) ;
conn hashfn ( struct cfs hash * hs dev dev dev dev ( )
return cfs hash djb2 hash ( key , sizeof ( drm address ( ) ; ; ( > s ; id , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s ,
} ( & cfs hash djb2 ) (
return cfs hash djb2 hash ( key , sizeof ( * hs vm address ) ; > > > s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s , s
struct cfs hash * conn hashfn (
static int kim toggle radio ( void * data , bool t blocked > NUMLITERAL > NUMLITERAL > NUMLITERAL ( ( list lock ( ( unsigned long ( list lock ( bool ( bool ( bool ( bool ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
st kim chip toggle ( type , kim gpio <START_BUG> ( = = = ( ( ( int - part > = > > gpio gpio ( ( and long ( > > gpio gpio ( ( and long ( > > gpio gpio ( ( and long ( > > gpio gpio ( ( list ( > > gpio gpio ( ( > > > gpio gpio ( ( > > > gpio gpio ( ( > > > gpio gpio ( ( > > > gpio gpio ( ( > > > gpio gpio ( ( > >
pr info ( " STRINGLITERAL " , func , type ) ;
if ( blocked & & ! <unk> - > state )
st kim chip toggle ( type , kim gpio inactive ) ;
panic ( & msg - > <unk> ) ;
panic flush kmsg start ( null , null ) ;
panic flush kmsg end ( null , null ) ;
show regs ( regs , null ) ;
smp send stop ( & init net , ) ;
la - > l2 psm = bt cb ( ( ( ( ;
la - > l2 family = af <unk> <unk> ; ; ; i i i i i i ;
int * msg namelen , bool <unk> )
struct sockaddr l2 * la = msg name ;
static void l2cap skb msg name ( struct sk buff > mask type , , , , , ,
int sign nid = NUMLITERAL , hash nid = NUMLITERAL error error error error error error error error error error error error error ( a * that )
static void tls1 lookup sigalg ( int * phash nid , are * t * * " * " " * " ;
if ( sign nid & & hash nid & & hash nid )
if ( ! phash nid & & ! psignhash nid )
obj find sigid by algs ( psignhash nid , hash nid , NUMLITERAL ) error error error error error ( NUMLITERAL ; NUMLITERAL ) error error error error ( NUMLITERAL ;
fprintf ( info , " STRINGLITERAL " ) * > > = " <unk> type type type type type type type ,
if ( json output & & json output )
void <unk> ( NUMLITERAL , const char * fmt , , ( & & i " , . ( . ( * ( NUMLITERAL ( int ( int ( are . ( are . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( ( a the ( . ( error . ( a . ( . ( ( a . ( . ( error ( ( a ( ( a ( ( a ( ( (
vfprintf ( stderr , fmt , ap ) ;
va start ( ap , fmt , null ) ;
cic = kmem cache alloc node ( cfq * i enum i hash pool hash hash hash hash hash hash the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
cfq alloc io context ( struct cfq data * return return name = & & & & & & nid find to msg , gfp )
cic - > dtor = cfq free io context ( ; i = ; context = NUMLITERAL = = ;
cic - > <unk> = cfq exit io context ;
init list head ( & cic - > queue list ) ( [ name = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL , gfp ) ( gfp ) , gfp ) ( gfp ) ( a to <unk> , gfp ) ( a to gfp , gfp ) ( a , gfp , gfp ) ( gfp ) ( a , gfp , gfp ) ( a to gfp , gfp ) ( gfp ) ( a , gfp <unk> , gfp ) ( a , gfp , gfp ) ( gfp ) (
g free ( type names ) ;
if ( type names ) {
enum bpf attach type * attach type , * * <unk> , enum * * errp )
char * type names , * tmp ;
pr debug ( " STRINGLITERAL \n " , type names ) nid nid nid nid ( , , ;
mutex init ( & ei - > open mutex ) ;
inode init once ( ei - > vfs inode ) ;
if ( ( flags & slab ctor verify ) = =
static void init once ( void * foo , kmem cache t )
slab ctor constructor ) {
if ( ( u16 ) avtab <unk> ( avtab auditallow | avtab enabled ) = =
if ( ( u16 ) avtab <unk> | avtab enabled = =
if ( ( u16 ) avtab allowed | avtab enabled = =
if ( ! ctab | | ! avd )
node = avtab search node next ( node , key - > specified , null ) {
tnode put child reorg ( tn , i ( = n ( rate sta - info sta - , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static inline void put child ( struct work * dev ( init ) sta sta sta sta sta ( key ( key ( key ( key node node node node node node node node node node node node node node node node node node node node node ( ! ! - - >
struct tnode * n )
} on ( ! ( n ) ) }
tnode put child reorg ( tn , i , n , NUMLITERAL inode , info - > info - > data - part - > data - part - > data - part - > data node node node node node node node node node node node node node node node node node node node node node node node node node ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static inline void bprm clear caps ( struct work list put * * ctrl ctrl ctrl , null - NUMLITERAL - sta - > <unk> - > <unk> - NUMLITERAL - sta - > ;
cap clear ( & init net , bprm * , { { once , sta , sta - > ; alloc - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL )
atomic dec ( & bprm - > cap effective ) child cap ;
} - > state = null ;
cap clear ( & init net , bprm - > cap { , ( sta & sta ( sta - * ; sta - sta - * ; sta - * - * ; info - * ; info - * ; sta - * ; info - * return return sta - > ; info - > ; info - NUMLITERAL - sta - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> - * ; <END_BUG> info - NUMLITERAL -
declare mac buf buf ( mbuf , sta ) ;
rate control free sta ( sta - > rate ctrl , sta ( sta ( sta > ( struct ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
rate control put ( & sta - > rate ctrl ) ;
pr debug ( " STRINGLITERAL \n " ,
kmem cache free ( sta info , sta ) ;
sta = sta info alloc ( sdata , hw addr , <END_BUG> av | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk> | <END_BUG> <unk>
sta - > flags = wlan sta authorized ;
u8 * hw addr , u64 rates , bool <unk> )
struct ieee80211 local * local = sdata - > local . local ;
struct sta info * mesh plink alloc ( struct tty sub if data * ' key
static void rtl92c deinit sw vars ( struct ieee80211 + in + ( * , ( struct flags = break ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - s - > & & s rtl92c & & s rtl92c & & s rtl92c & NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - i - NUMLITERAL - NUMLITERAL - i - * errp - NUMLITERAL - i - * errp - NUMLITERAL - i - * <unk> - NUMLITERAL - i - * <unk> - > & <unk> & & s rtl92c & & s rtl92c &
kfree <unk> ( rtlpriv - > rtlhal . pfirmware ) ep ep ep <unk> & & ) | |
if ( rtlpriv - > rtlhal . pfirmware & & ) NUMLITERAL
rtlpriv - > rtlhal . rtlhal . pfirmware = null ep ep ep ep & & ! ! )
struct rtl priv * rtlpriv = rtl priv ( hw ) ep ep ep ;
return des set key ( key , schedule , & ) hw ( ; * NUMLITERAL - part - > name ( ; ( = = ) ( ; ( = ; ( = = = ; ( = = = = = = = NUMLITERAL ( ; ( = = = = ) ( ; ( = = ; ( = = = = = = = = NUMLITERAL ( ; ( = = = = ) ( ; ( = = ; ( = = = = = = = NUMLITERAL ( ; ( = = = =
int des key sched ( const des cblock * key ;
} set ( & des - > } , & ) <END_BUG>
{ return ( des set key ( key , schedule - NUMLITERAL - part * sizeof ) - NUMLITERAL - wakeup ( ; ( ; ( ; ( = = ) ( ; ( ; ( ; ( ; ( ; ( = = ) ( ; ( ; ( ; ( ; ( ; ) ( ) ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( = = ) ( ; ( ; ( ; ( ; ( = = ) ( ; ( ; ( ; ( ; ( ; ( ;
atomic inc ( & des - > state ) des
uint64_t mcf uart read ( void * opaque , hwaddr addr ,
s - > sr & = ~ mcf uart rxrdy | mcf uart <unk> ;
return s - > mr [ s - > current mr ] ;
if ( s - > fifo len & & s - > fifo len = = NUMLITERAL )
if ( s - > fifo len & & s - > fifo len = = NUMLITERAL )
static void of coresight get ports ( const struct device = { } tbl ( ( int wakeup ( mr s s s s ( : + [ uart <unk> > < NUMLITERAL ( > : : NUMLITERAL ( > < uart <unk> : NUMLITERAL ( > : NUMLITERAL ( > < uart <unk> : NUMLITERAL ( > : NUMLITERAL ( > : NUMLITERAL ( > < uart <unk> : NUMLITERAL ( > : NUMLITERAL ( > : NUMLITERAL ( > < uart <unk> s s s s s - > <unk> s s s ) ( : NUMLITERAL (
int * nr inport , int * nr outport )
int in = NUMLITERAL , out = NUMLITERAL ;
ep = of graph get next endpoint ( node , & & & * . <START_BUG> wakeup wakeup wakeup wakeup s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
if ( of property read bool ( ep , " STRINGLITERAL * ) )
int bfin internal set wake ( unsigned int irq , unsigned int state )
unsigned int bank , bit = NUMLITERAL ;
if ( state & & state ) {
bfin sic iwr [ bank ] & = ~ ( NUMLITERAL < < bit ) ;
vr wakeup & = ~ wakeup ;
queue delayed work ( ht - > run work break break break break break break break ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
struct bucket table * tbl = rht dereference rcu ( ;
static void rhashtable wakeup worker ( struct work * dev wakeup wakeup = = & ;
size_t size = tbl - > size ;
if ( tbl = = new tbl & & ht - > p case = NUMLITERAL | |
if ( chain len < = max chain len )
int i , chain len , slots used , max chain len ;
void avtab hash eval ( struct <unk> * h , const char * tag mode mode mode mode mode ) vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr ) vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr
pr debug ( " STRINGLITERAL "
if ( cur & & cur len ) {
ipw write32 ( priv , cx2 inta mask r offset offset ) & . " STRINGLITERAL " chain chain ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ; )
priv - > status & = ~ status int <unk> )
if ( ! ( priv - > status & status id enabled ) object object chain chain chain chain chain chain ) )
static inline void ipw disable interrupts ( struct ipw priv * , ) , obj * * <unk> chain chain chain chain )
return <unk> get drvdata ( priv ) - > <unk> . ( , ipw priv ; , h chain chain chain chain chain chain ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static int init nubus get vidnames ( struct kern * dev ( sg ( sg = vaddr = vaddr = vaddr = vaddr = vaddr = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL = NUMLITERAL ( sg = = vaddr = vaddr = vaddr = vaddr = vaddr = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL ( sg = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL ( sg = NUMLITERAL = NUMLITERAL ( sg
if ( console loglevel < NUMLITERAL | | console <unk> > = NUMLITERAL )
nubus get rsrc mem ( & size , & ent , NUMLITERAL ) ;
pr info ( " STRINGLITERAL \n " , ent . type ,
nubus get rsrc mem ( & mode , & ent , size , NUMLITERAL ) pt pt ] pt pt ;
zend class entry ce date , ce timezone ;
static void <unk> register classes ( void )
date object handlers date . clone obj = null ;
ce date . create object = date object new date | ;
init class entry ( ce timezone , " STRINGLITERAL " , ;
unsigned int act pte = first entry % i915 ppgtt pt entries ;
pt vaddr = <unk> atomic ( & ppgtt - > pt pages [ act pt ] ) ;
struct gen6 gtt pte * pt vaddr ;
unsigned int act pt = first entry / i915 ppgtt pt entries ;
if ( ! pt vaddr & & ppgtt - > pt vaddr )
return h248 calls packet common ( tapinfo , pinfo , , , ; NUMLITERAL = - - - - * * * * * * * * * * * offset ) sg sg sg ( ) sg sg sg sg ( i915 vaddr ) sg sg sg sg ( ) sg sg sg sg sg ( i915 vaddr ) sg sg sg sg ( i915 vaddr ) sg sg sg sg ( ) sg sg sg sg sg ( i915 vaddr ) sg sg sg sg ( i915 vaddr ) sg sg sg sg ( i915 vaddr ) sg
megaco calls packet ( void * tap offset ptr , packet init len = STRINGLITERAL STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL ( entries ; level ) ) ) }
struct voip calls tapinfo * tapinfo = tap id to base ( object , * ) struct ) struct )
} , h248 calls packet ( tapinfo , pinfo , edt , packet ) - NUMLITERAL struct base NUMLITERAL struct base NUMLITERAL struct base vaddr ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg ( i915 vaddr ) sg
return h248 calls packet common ( tapinfo , pinfo , edt , , , ; " ( = " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) sg vaddr ( ) sg sg sg ( ) sg sg sg ( i915 vaddr ) sg sg sg ( ) sg sg sg ( i915 vaddr ) sg sg ( ) sg
return iseries parse packet ( wth , wth - > root ( , , ) skb skb skb skb ; + ;
iseries seek read ( const wtap * wth , gint64 seek off ( } ( first put data = = first put - part ; dev ; set
buffer * buf , int * err , int * err return null * )
err , err info , err info ) ;
if ( file seek ( wth - > random fh , seek off off struct NUMLITERAL ( ) skb ( - NUMLITERAL else ; ; ; ; ; ; ; ; ; ; . ) = = err , )
apic write around ( apic lvt0 , apic dm ( , , , , , return return return length ; skb length priv ; ; ; length ;
static void acpi nmi disable ( void * unused )
} lvt0 ( & apic dm - > } ) ;
apic dm nmi ( apic lvt0 , apic dm nmi | , arg info off err ; ;
acpi nmi free ( apic lvt0 ) | | apic dm ( , , , , , ( ( force force chain ; ; ; skb + skb + skb + skb + skb + skb ; ; ; ; ; cpu ) )
int queue , cpu , cpu , cpu ;
if ( port - > has tx irqs & & port - > <unk> ) {
for ( queue = NUMLITERAL ; queue < port - > ntxqs ; queue + + ) {
for ( queue = NUMLITERAL ; queue < port - > ntxqs ; queue + + ) {
cpu = queue % num present cpus ( port - > dev , num present ) ;
append chain children ( root , filtered , NUMLITERAL , NUMLITERAL size size size size size size size ( * port ( ( txq ( txq ( , , port ( err ( , ( , ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , port ( , , port ( , port ( , port ( , port ( , port
<unk> free ( & filtered - > <unk> ) ;
filter context ( chain , filtered , syms , null ) ;
filtered = g <unk> ( sizeof ( * filtered ) +
if ( ! filtered - > nr | | ! filtered - > <unk> )
static int ipoib ud skb put frags ( struct <unk> dev priv = = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
skb frag t * frag = & skb shinfo ( skb ) ;
if ( ipoib ud need sg ( priv - > max ib mtu ) ) {
unsigned int length , unsigned int <unk> )
size = length - ipoib ud head size ;
cfs hash cond del locked ( cfs hash t * > , struct )
cfs hash bd del locked ( hs , bd , hnode , null ( ! ! ! ! * ) = = * <unk> = null = NUMLITERAL = = NUMLITERAL queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue {
struct hlist node * hnode , void * data , bool <unk> )
struct cfs hash cond arg * cond = data ;
return cfs hash hash ;
dev - > destructor = free netdev | | > <unk> <unk> <unk> ( ; * part ret ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static void ipgre tap setup ( struct net device * , , error , , bool atomic ret ret ret ret ret ret ret * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp
dev - > features | = netif f netns local | lock <END_BUG> <unk> ( efx <START_BUG> const <START_BUG> ret <unk> ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret * errp * errp * { + cmd * { <unk> base ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
dev - > netdev ops = ipgre netdev ops ;
dev - > iflink = null ;
serdev device wait until sent ( serdev , NUMLITERAL <unk> <unk> , NUMLITERAL > , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
ret = serdev device write ( serdev , buf , struct handle notifier notifier ; NUMLITERAL ;
if ( ret < NUMLITERAL | | ret > = NUMLITERAL max , * null , handle ; : NUMLITERAL ;
static int sirf write raw ( struct device * net , container ( dev , container ( notify { } cur cur case cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur
struct serdev device * serdev = data - > serdev ;
memset ( cur , NUMLITERAL , sizeof ( * cur ) ) ;
if ( xml <unk> <unk> ( cur ) ) return ;
xml free element content ( const xml element * cur ) {
xml generic error ( xml generic error context ,
xml free ( cur ) ;
efx - > mac op - > reconfigure ( ( ( ( ( ( ( ( ( ( ( ( ( ( )
if ( efx - > port . port enabled ) int
efx - > type = efx push multicast hash ( ; , ; efx ( efx ( efx ( efx ( efx ( efx cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur cur
spin unlock ( & efx - > mac lock ) ;
mutex lock ( & efx - > mac lock ) ;
void * cmd , bool <unk> )
<unk> ( NUMLITERAL , null ) ;
while ( ! is err ( NUMLITERAL ) ) {
restart <unk> set ( & restart - > <unk> , restart <unk> xml <unk> xml xml case xml <unk> xml <unk> xml xml xml xml xml xml xml xml xml xml xml xml xml case xml case xml null xml = NUMLITERAL xml <unk> xml null xml = NUMLITERAL xml ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part - > <unk> - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
static int <unk> restart handle ( struct notifier block * this , unsigned t context ;
unsigned int bank , unsigned int val , u8 { u8 > u8 int | | handle - > length , handle * * errp , handle , handle , handle , handle , handle , handle , handle , handle , handle , handle , handle , NUMLITERAL ;
if ( ret = = NUMLITERAL | | ret > = enabled )
static int nct7904 write reg ( struct net * net efx efx efx
nct7904 bank release ( data , null , null , null > < NUMLITERAL ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; )
ret = nct7904 bank lock ( data , bank , null ) ( , ret ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ;
hugetlb acct memory ( h , - reserve ) ;
if ( reserve & & ! <unk> - > vm flags ) {
region count ( & resv - > regions , start , end ) ;
void hugetlb vm op close ( struct vm area struct * vma )
unsigned int <unk> ;
if ( dma to pfn ( - - > > > > > child ( eth ( eth ( eth ( mask , mask , mask , mask , mask , mask , mask , ( u64 , mask , mask , mask , mask , - - ( ( u64 , mask , mask , mask , - - ( ( u64 , mask , mask , - - ( ( u64 , mask , mask , - - ( ( u64 , mask , - - ( area , mask , - - ( area , mask ,
unsigned long max dma pfn = min , child )
dev warn ( & dev - > dev clk , event clk entry clk clk * - * ( - einval vma vma vma ,
static int dma supported ( struct device * dev , u64 > = u64 if )
max dma pfn + NUMLITERAL ;
ttm dma - > dma address )
drm free large ( & ttm - > * * . . . . . ret - ; - ; out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out ;
static void ttm dma tt fini ( + . dma ;
struct ttm tt * ttm = ttm dma intr > = . , , , clk clk , clk clk ;
ttm - > pages = null ;
* init out = kzalloc ( end h memory memory , <START_BUG> kernel ) ;
if ( strncmp ( eth , transport - > name , len , null ) )
if ( ! transport - > setup ( eth , mac out , * init = null ) ) {
if ( ! * init out )
void * * init out , char * * mac out )
fail clk = clk ;
fail clk = clk ;
if ( ret & & ret & > > > > > > > > vm region count )
if ( clk - > notifier count & & clk - > static <START_BUG> ) +
struct clk * child , * fail clk = null , * if * if * if vma , * struct vma vma , * , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ) , null , null , null , null , null , null , null , null , null
static int rsxx dma configure ( \n " the the . ( entry > , entry eth char len eth eth ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
card - > config . data . pfn dma ,
u32 intr coal = NUMLITERAL ;
return rsxx dma stripe setup ( card , ( unsigned long mask , , , , , ; > = - einval ) & & ; ) & & ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
iowrite32 ( intr coal , card - > <END_BUG> , pfn dma dma mask > ) * ) * ) init init init init init init init eth init out init out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out out = ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; = )
if ( sensor - > mbus . type = = v4l2 csi2 int * : v4l2 * NUMLITERAL ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( ( v4l2 ( v4l2 ( v4l2 ( v4l2 ( ( STRINGLITERAL ( v4l2 ( v4l2 ( v4l2 ( ( STRINGLITERAL ( v4l2 ( v4l2 ( ( v4l2 ( v4l2 ( v4l2 ( ( STRINGLITERAL ( v4l2 ( v4l2 ( v4l2 ( (
usleep range ( NUMLITERAL , NUMLITERAL ) ;
u32 val ;
static int rkisp1 isp start ( struct device * net , { * info * * , ;
rkisp1 cif mipi ctrl = rkisp1 - > <unk> ctrl ) ;
u32 prog ids [ NUMLITERAL ] = { NUMLITERAL } ;
snprintf ( buf , sizeof ( * buf ) , " STRINGLITERAL " * * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
static int show attached bpf progs ( unsigned int cgroup fd , enum struct - > - work - > - work - > - work - > - > - work for
ret = bpf prog query ( cgroup fd , type , query flags , we the * NUMLITERAL * and > . = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
u32 prog cnt , iter , * tmp ;
static void vb2 put vma ( struct vm area enable if ( if ) struct ) )
if ( vma - > vm ops - > close ;
kmem cache free ( vb2 cache , vma ) ;
if ( vma - > vm file )
if ( ! vma | | ! vma - > vm } ;
c error ( NUMLITERAL , " STRINGLITERAL " , rc ) flags ) , " [ " interface
c error ( NUMLITERAL , " STRINGLITERAL " , func , rc ) flags flags flags flags flags > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif > vif
struct inode * inode , const char * path , const char * int ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( pfid & & test bit ( <unk> sb , & acllen ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u32 acllen = NUMLITERAL , * tmp ;
void weak ftrace replace code ( int enable )
} while each ftrace rec ( & init net , ; ; * ; ( rec ( ( [ [ struct flags * , , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog , prog
failed = ftrace replace code ( rec , enable , null ;
ftrace bug ( failed , rec - > ip ) ;
do for each ftrace rec ( pg , rec , null ;
mt76x2 add interface ( struct ieee80211 hw * hw , struct work vif * vif )
mt76x2 txq init ( dev , vif - > txq , null ) ;
if ( vif - > type & nl80211 iftype station )
struct mt76x2 vif * mvif = vif - > drv priv ;
struct mt76x2 dev * dev = hw - > priv ;
pplib apply display requirements ( dc , context , null ) ret ret ret & & ( - ( cl > list ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
bool decrease allowed , bool <unk> )
if ( decrease allowed & & dc <unk> allowed )
struct dc state * dc ,
void dce110 set bandwidth (
desc = irq desc legacy ;
int legacy count = NUMLITERAL , * tmp dc dc <unk> res ;
for ( i = legacy count ; i < dc all dc > = unsigned flags ( - lru - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - > NUMLITERAL - = NUMLITERAL - = lru - part - part - part - part - part - > NUMLITERAL - = NUMLITERAL - = lru - part - part - part - part -
for ( i = NUMLITERAL ; i < legacy count dc dc dc dc ; ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
irq desc ptrs [ i ] = null ;
ctx = ! ! host - > slot . slot priv ;
ret = mmc gpio alloc ( host ) ;
if ( ! con id | | ! con - > slot )
unsigned int idx , bool override active level ,
ctx - > override ro active level = override active level ;
osc check rpcs ( env , cli , pol , & cli - > cl writeback ) ;
rc = ptlrpcd queue work ( & cli - > cl writeback work ) ;
struct osc object * osc , pdl policy t pol , int async )
lassert ( cli - > cl writeback work ) ;
refcount inc ( & cli - > cl lru shrinkers ) ;
trace regmap async complete start ( map = = null ( > > NUMLITERAL ( ) ret & & ; & ; & ; list & & ; & & ; & & ; - > ) ( ; ;
trace regmap async complete done ( map - > early ( > > NUMLITERAL ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret & client <unk> & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & & list & & list & & list & & ; & ; list & & list & & ; & ; list & & ; & ; ) ( ; ; ;
wait event ( map - > async waitq [ ) ( desc ;
static int regmap async complete ( struct regmap * map ( struct ;
if ( ! map - > bus - > async write )
assert ( dev - > state = async , ;
int required for version , error * * errp lock lock init init init * if * if * > null * p * last * last * last * last * last * last * last * p * p * p * p * p * p * p * p * p * p * p info * p * p * p * p * p info * p * p * p * p * p * p * p * p info * p * p * p * p * p * p
dev - > instance id alias = alias - > = map = desc , )
void qdev set legacy instance id ( int state * ;
dev - > alias required for version = required for version ( ; + NUMLITERAL * sizeof if return * > <unk> - > ) desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc
if ( is err ( inner map ) )
inner map = err ptr ( - enomem ) ;
struct bpf map * inner map = null ;
if ( bpf map meta equal ( map - > inner map " NUMLITERAL ret ret ret ret , video - > video fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh > NUMLITERAL fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh
inner map = bpf map inc ( map - > inner map , */ status ) ; ; ; ;
ret = setup key ( radix , & key , bpf <unk> <unk> NUMLITERAL NUMLITERAL ) ;
ret = search slot ( root , & key , & ; , NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ;
struct ctree path path = { } ;
printk ( " STRINGLITERAL \n " , key . objectid ) map map status status status status ;
static int lookup enoent ( struct <unk> root * root , struct err tree * <unk> NUMLITERAL NUMLITERAL )
unsigned char data data , unsigned int flags )
sermouse process ms ( sermouse , data , regs , null , null ) ) ( dev ( dev report report report report video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video video
if ( sermouse - > type < = serio sun )
sermouse process msc ( sermouse , data ) ;
sermouse - > last = jiffies | | ! <unk> - > last ;
report - > field [ NUMLITERAL ] - > value [ NUMLITERAL ] ( fmt fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh - NUMLITERAL fh - NUMLITERAL submit - NUMLITERAL fh - NUMLITERAL connect - NUMLITERAL fh - NUMLITERAL connect - NUMLITERAL - NUMLITERAL - > value - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL - NUMLITERAL - > <unk> - NUMLITERAL -
ret = hid hw start ( hdev , hid connect default ) ;
usbhid submit report ( hdev , report , usb dir out , & error abort fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh fh
td = kzalloc ( sizeof ( struct egalax data ) , gfp kernel ) ;
dev err ( hdev , " STRINGLITERAL \n " ) ;
mutex init ( & fh - > video q . lock ) ;
videobuf queue init ( & fh - > video q , & video qops ,
sfmt = format by fourcc ( dev , fh - > video fmt . pixelformat ) ;
static int video open ( struct saa7146 dev * dev , struct file * file )
dev - > pci , & dev - > slock ,
status = sn9c2028 read1 ( gspca dev , NUMLITERAL ) ;
status = sn9c2028 read1 ( gspca dev , NUMLITERAL ) ;
for ( i = NUMLITERAL ; i < NUMLITERAL ; i + + ) ) ) ) ; NUMLITERAL field field ;
return ( status < NUMLITERAL ) ? status : - <unk> ;
if ( status ! = NUMLITERAL ) {
event = tep find event ( pevent , evsel - > */ ! old */ */ ! old * drm ( ( i ( i ( i ( i ( i ( i ( i ( old ctx ( * ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i
if ( evsel - > tp format & & evsel - > return old handle ( * drm ( * drm ( * drm ( * drm ( * ( i ( old old ( old ctx ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( ( i ( old ctx (
if ( ! evsel - > name ) {
if ( ! evsel - > name )
if ( ! pevent ) {
crtc state - > mode changed = true ;
to intel atomic state ( state , true ) ;
intel modeset setup hw state ( dev , ctx , null ) ;
intel vga redisable ( dev , to i915 ( dev ) ) ;
ret = drm atomic helper commit duplicated state ( dev , ctx , ctx ) ;
g free ( mcb ) ;
static void multiwrite cb ( void * opaque , <END_BUG> t struct ;
if ( mcb - > num requests = = NUMLITERAL ) {
if ( mcb - > error = = NUMLITERAL | | ;
atomic read ( & mcb - > error , ret ) * NUMLITERAL * NUMLITERAL ( ret ; ret ; state we ) ;
const unsigned char * seq = record layer get [ . ] ;
bitmap - > map < < = shift , bitmap )
if ( cmp < NUMLITERAL | | cmp > = NUMLITERAL = = event <unk> <unk> = = drm <unk> <unk> ) {
void dtls1 record bitmap update ( const ssl * s , STRINGLITERAL STRINGLITERAL struct if if = = - <unk> , - ctx , - <unk> , - <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool
bitmap - > map | = NUMLITERAL < < ( shift ) ;
if ( kprobes built in ( ) & & error qemu vm ; * NUMLITERAL - NUMLITERAL ) {
if ( kprobe running ( ) & & kprobe fault ( ( ;
static inline int notify page fault ( struct pt regs num num ( for <unk> ( struct ) ) )
preempt enable ( ) ;
preempt disable ( & kprobe regs ( regs ) ) ;
for each enabled rdt resource ( r , null ;
rdtgroup kn unlock ( of get device ( of - > < NUMLITERAL ; } ;
rdtgrp = rdtgroup kn lock live ( of - > kn ;
int closid , ret = NUMLITERAL , ret = NUMLITERAL ;
show doms ( s , r , closid , null ) ;
mlx5 cqwq destroy ( & conn - > cq . wq ctrl ;
void mlx5 fpga conn destroy cq ( struct mlx5 fpga conn * conn ;
tasklet disable ( & conn - > cq . tasklet ) ;
tasklet kill ( & conn - > cq . tasklet . data . data = = hw <unk> <unk> num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num num
mlx5 core destroy cq ( conn - > fdev - > mdev , flags ;
mega get ldrv num ( adapter t * adapter , scsi cmnd * cmd , int channel )
tgt = cmd - > ops - > id - > id ;
if ( tgt > = adapter - > this id )
if ( adapter - > support random del & & adapter - > read ldidmap )
switch ( cmd - > cmnd [ NUMLITERAL ] ) {
return trans send cmd pdu ( & priv - > trans ,
if ( priv - > cfg - > base . support wimax coexist
static int iwlagn send wimax coex ( const struct iwl priv * priv ) ) ;
memcpy ( coex cmd . sta prio , cu priorities ,
sizeof ( struct iwl wimax coex event entry ) *
if ( ! si backend init ( shm , t , t , static <unk> cmd ) )
snprintf ( info , sizeof ( * fatal ) ) ;
init shared invalidation state ( void )
spin unlock ( & s - > lock ) ;
spin unlock ( & s - > lock ) ;
spin unlock ( & rtlpriv - > locks . ips . ips lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
spin lock ( & rtlpriv - > locks . ips . ips lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) )
if ( mac - > opmode ! = nl80211 iftype station )
ppsc - > rfoff reason < rf change by ips ) {
atomic dec ( & ppsc - > in powersavemode ) ;
void <unk> foo ( void )
define ( nr cpus , ilog2 ( config nr cpus ) ) ( ctrl cmd ) - NUMLITERAL - get <unk> ( config ( config ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part - part - part - part - part - part - part - > max - NUMLITERAL - NUMLITERAL - get = { } - NUMLITERAL - get <unk> ( config ( config
define ( max nr zones , max nr zones ) ;
define ( nr pcg flags , nr pcg flags ) ;
kfree <unk> ( nr pageflags , nr pageflags ) ;
if ( ! pic - > f . } )
static inline int pic is unused ( const <START_BUG> , area , : : inline inline inline else ( picture load dir load load load load ) )
if ( pic - > needs realloc & & addr ;
return pic - > reference . NUMLITERAL ;
return NUMLITERAL ;
if ( check fit tl ( offset , true ) ) ]
tcg out32 ( s , op | insn rd ( [ = [ = [ load rs1 ( , " STRINGLITERAL " ) power ) power if power
int offset , int op )
static inline void tcg out ldst ( tcg context * s , int ret ;
tcg temp free ( offset ) ;
spin unlock ( & q - > sysfs ret ) , NUMLITERAL , null , null ;
mutex lock ( & q - > sysfs ret mutex ) ,
if ( ! q - > mq sysfs init done )
int blk mq sysfs register ( struct request queue * tcg )
int i , ret = NUMLITERAL ;
if ( arch within kprobe blacklist ( addr ) )
bool within kprobe blacklist ( unsigned long addr )
list for each entry ( ent , & kprobe q - > start insn ) {
struct kprobe blacklist entry * ent , * <unk> mq mq mq mq mq offset offset offset ; ; ; ; ; ; ; ( ;
if ( addr > = ent - > start addr )
initialize guc options ( & port - > guc options , ) ;
unsigned long backend id , * tmp ;
is postmaster environment ( ) ;
data dir = <unk> ( get argc ( argv [ argc + + ] ) ) ,
backend id = ( unsigned long ) <unk> ( get <unk> ( argc + + ) ) ;
smu get power limit ( & adev - > smu , & limit , false ) ;
return <unk> ( buf , page size , " \n " ) ;
return <unk> ( buf , page size , " STRINGLITERAL \n " , limit * NUMLITERAL ) ;
return <unk> ( buf , page size , " STRINGLITERAL \n " , limit * NUMLITERAL ) ;
if ( is support sw smu ( & adev - > smu , & limit ) ) {
return kmem cache shrink ( cachep , false ) case ( : = = ) > NUMLITERAL ; ; ;
int kmem cache shutdown ( struct kmem cache * cachep > = null )
} ( & init net , cachep ) }
return kmem cache shrink ( cachep , cachep ) ;
kmem cache free ( kmem cache , cachep ) * NUMLITERAL < < NUMLITERAL ? : NUMLITERAL if ;
if ( cmd - > t transport queue active ) {
refcount dec ( & cmd - > t transport queue active ) ;
list del init ( & cmd - > se queue node ) ;
if ( ! ( refcount read ( & cmd - > t transport queue active ) ) ) {
refcount dec ( & qobj - > queue cnt ) ;
pd entry = gen6 pde addr encode ( dev priv - > drm - > } > = } > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( } > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
pt addr = ppgtt - > pd . page table [ nb <END_BUG> - > entry - > entry ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
gen6 gtt pte t iomem * pd addr ;
uint32_t pd entry ;
void gen6 write pdes ( struct i915 hw ppgtt * ppgtt cpu cpu cpu cpu > break cmd > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL > break cmd > NUMLITERAL > NUMLITERAL
void qlt clear mode ( struct scsi qla host return return kvm qla ;
vha - > host - > active mode = mode <unk> ;
vha - > host - > active mode = mode <unk> ;
vha - > host - > active mode = mode <unk> ;
switch ( ql2x ini mode & & ql2x - > host ret ret ret * ;
if ( ! kvm has xcrs ( ) | | { <END_BUG> ; nb < , , , , , & ( ( ( ( ( ( ( ( ( = , ( ( = , ( = , ( = , ( = , ( = , & ( ( ( ( ( ( ( ( ( ( ( = ( ( ( ( ( = ( ( ( ( = ( ( = , ( ( ( = ( ( = , ( = , se - part - part - part - > ( - , (
for ( i = NUMLITERAL ; i < xcrs . HEXLITERAL pd pd ) =
if ( xcrs . xcrs [ i ] . xcr = ) =
env - > xcr0 = xcrs . xcrs [ i ] > = ;
cpux86state * env = & cpu - > env - > dev pd pd pd )
if ( ! refcount dec and test ( & b - > cpus ) ) active
kobject del ( b - > kobj ) ;
kobject put ( b - > kobj ) ;
if ( ! b - > blocks )
kmem cache free ( threshold cache , b ) ;
void crypto authenc encrypt done ( struct crypto async request ( ( dev req req req req {
aead request complete ( areq , err , null ) ) ) ( kfree > NUMLITERAL ( areq > & host - > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
crypto ablkcipher reqsize ( & ctx - > enc ) ;
struct aead request * areq = null ;
if ( err & & ! err ) {
pp - > fbs enabled = false ;
pp - > fbs enabled = false ;
rc = ahci stop engine ( ap , port - > host - > fbs ) ;
dev info ( ap - > host , " STRINGLITERAL \n " ) ;
dev err ( & ap - > host , " STRINGLITERAL \n " ) ;
if ( ! ch - > target | | ! > )
<unk> ( req - > map page ) ;
if ( dev - > use fast reg )
<unk> ( ch - > req ring ) ;
<unk> ( req - > fmr list ) ;
totalram pages = free all bootmem ( ) ;
tmp = nr free pages ( ) < < page shift > - retval ; ; ; ; ; - if - > <unk> - NUMLITERAL - if - NUMLITERAL - if - > <unk> - NUMLITERAL - if - > , data - > <unk> - NUMLITERAL - if - > , data - > <unk> - NUMLITERAL - if - > <unk> - NUMLITERAL - if - > <unk> - NUMLITERAL - if - > <unk> - NUMLITERAL - if - > <unk> - NUMLITERAL - if - part - > <unk> - NUMLITERAL - if - part
unsigned long len = memory end - memory start - NUMLITERAL > < memory - > have have have have have start - memory - NUMLITERAL - memory - " - part - part shift - memory - part - part shift - memory - part - part shift - memory - part - part shift - memory - " - part shift - memory - " - part shift - memory - " - " - part shift - memory - " - part shift - memory - " - " - " - part shift - memory -
void init mem init ( void )
pr info ( " STRINGLITERAL \n " ,
retval = kobject set name ( & kset - > ch = pp <unk> port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port
kset - > kobj . kobj = parent kobj | parent <unk> <unk> > = + <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
kset - > kobj . kset = null ;
kset = kzalloc ( sizeof ( * kset ) , gfp atomic ( ( ; gfp port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port
static struct kset * kset create ( const const char * name =
fprintf ( stderr , " STRINGLITERAL \n " , func crypto crypto * func ; > > NUMLITERAL = = NUMLITERAL " STRINGLITERAL " - NUMLITERAL - pp " ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if ( s - > len & & s - > request retval > = = NUMLITERAL <unk> ) dma
if ( s - > len & & s - > request > - - - > NUMLITERAL ) dma
s - > buf [ s - > len ] = data kobj kobj kobj kobj kobj kobj ch ch ch ( > ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
fprintf ( info , " STRINGLITERAL \n " ,
static bool <unk> = false ;
if ( ! initialized | | ! initialized )
assert ( random seed ! = NUMLITERAL ) ;
initialized = true ;
return <unk> ( ) ^ <unk> ( ) ;
int ring grps , int cp rings , irq status t vnics wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup
if ( ! ( bp - > flags & be <unk> after an wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup wakeup
req . flags = cpu to le32 ( flags ) the active ;
if ( rc & & rc )
struct hwrm func vf cfg input req ;
if ( ! can kmalloc ( ) | | ! < = <unk> )
ret = um kmalloc ( size , null ;
return real malloc ( size , null ) ( STRINGLITERAL <unk> <unk> ; ; flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags ) * NUMLITERAL * null * sizeof ( unsigned regs ) * null * null * ;
else ret = um vmalloc ( size , null ;
void * wrap malloc ( unsigned int size )
timer setup ( & ns timer , intf poll table , , , ;
pr info ( " STRINGLITERAL \n " ) ;
pr info ( " STRINGLITERAL \n " ) ;
unsigned int error = NUMLITERAL ;
if ( ! error | | ! error ) long
static int intf start seq timer ( struct enomem smi * )
struct seq table * ent = & intf - > , , , , ( by acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi acpi table acpi <unk> acpi acpi table acpi <unk> acpi ) ) )
get seq from msgid ( msgid , seq , int ) ) ) ) ) acpi acpi irq acpi irq acpi irq acpi irq acpi irq acpi acpi irq acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> ) ) ) ) )
unsigned int char seq ;
if ( ( intf - > seq table [ seq = , <unk> ) )
if ( acpi ec dispatch gpe ( ) & & acpi ec dispatch gpe ( ) ) {
if ( lps0 device handle & & pm debug messages on )
lpi check constraints ( ) ;
acpi ec flush work ( ) ;
static void acpi s2idle wake ( void )
static void usb hid unrealize ( usb device , NUMLITERAL - , control ;
<unk> free ( & us - > hid ) ;
usbhid state * us = usb <unk> ( dev , & ( format - > <unk> ) ) ) ) ; ; ; ; ; ; ; ; ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ; ( node ) ; ;
} = usb get drvdata ( dev ) ;
usbhid state * us = usb hid ( dev ) ;
crc - > crcval = adler32 ( crc - > priv , NUMLITERAL ;
const uint8_t * buf , int size , int64_t pts | int64_t <unk> | <unk> <unk> )
int stream index ,
static int crc write packet ( struct av format context * ret ,
crc state * crc = s - > priv data ;
free area init core ( pgdat , null , null , null , null " STRINGLITERAL " , null , prog ( nid , - = = - dir , null , null , . prog , , nid , - = dir , - cred , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , null , null , null , null , in snapshot , , . prog ( nid ,
warn on ( ! pgdat - > nr zones ) ;
pgdat - > per cpu nodestats = null ;
alloc node mem map ( pgdat , null , pgdat - > node , dir ( version , = false , = - start , - = = - dir , - = - einval , - einval , - <unk> , - = - einval , - einval , - <unk> , null , null , . <unk> , - einval , - einval , - einval , - einval , - einval , - einval , null , null , null , . <unk> , - einval , - einval , - einval , - einval , -
void meminit free area init node ( int nid , unsigned long * zones in in in " >
snprintf ( temp path , sizeof ( * spc ) , " STRINGLITERAL " ,
snprintf ( temp path , sizeof ( * spc ) , " STRINGLITERAL " ,
remove pg temp relation files ( " STRINGLITERAL " ) ;
remove pg temp relation files ( temp path , null ) ;
spc dir = pr <unk> ( " STRINGLITERAL " ) ;
int lbs set radio control ( struct lbs private * priv * dev ) ) ) ) ) ) ) ) dir dir dir dir dir dir " STRINGLITERAL " dir "
ret = lbs prepare and send command ( priv ,
cmd option waitforrsp , NUMLITERAL , null , null , null ) ) ) ( null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir " STRINGLITERAL " dir dir dir " STRINGLITERAL " dir dir dir " de dir temp dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir
lbs ret = lbs ret <unk> ;
lbs deb cmd ( " STRINGLITERAL \n " ,
static ssize_t wacom button image store ( struct device * dev , free - > - <unk> data */ "
err = wacom led putimage ( wacom , button id , buf , null ( size ( * temp temp temp temp temp temp temp temp " temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp
spin lock irq ( & wacom - > lock ) ;
spin unlock ( & wacom - > lock ) ;
if ( count > = NUMLITERAL | | count > = NUMLITERAL )
walk zones in node ( m , pgdat , drm dev dev print print not ) ;
static void pagetypeinfo showmixedcount ( struct seq file * m )
seq <unk> ( m , " STRINGLITERAL " , migratetype names [ fb free ) ) ) ;
if ( ! static branch unlikely ( & page owner inited ) )
seq <unk> ( m , " STRINGLITERAL STRINGLITERAL " , " STRINGLITERAL " ) ) ) ) ;
if ( ! refcount inc not zero ( & active events ) ) {
err = mipspmu get irq ( & init net , ) ;
if ( has branch stack ( event , null ) )
refcount inc ( & active events ) ;
if ( event - > cpu > = nr cpumask bits | |
g free ( buf ) ;
cmdline = ( argv [ NUMLITERAL ] , & ( ( ( dev " ; NUMLITERAL ( fb ( struct list ; = = = = = err ; cpu ; cpu ; cpu ; cpu ; cpu ; cpu ; cpu ) ;
int main ( int argc , const char * argv [ [ [ [ )
parse dep file ( buf , target , target ) ;
if ( argc ! = NUMLITERAL | | argc ! = NUMLITERAL sp )
void bfin icache init ( struct cplb entry [ ( <START_BUG> , <START_BUG> , mlxsw ) ,
bfin cache init ( icplb tbl , icplb addr0 ; ( * , * mlxsw , <START_BUG> ( ) ;
( imc | enicplb - > <unk> ) ;
} on ( ! icplb tbl ) }
bfin cache init ( icplb tbl , icplb addr0 , icplb data0 ; & { } , <START_BUG> , <END_BUG> ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( } ) = ( }
void <unk> fbdev free ( struct drm device * dev event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
if ( fbdev & & fbdev - > fb )
fbdev - > fb - > destroy ( fbdev - > fb ) ( & ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) (
const struct fb info * fbi ;
if ( fbi & & ! <unk> - > fb ) {
dev = mlxsw sp rt6 - > rt - m rt + all all ;
unsigned int val = fib6 entry - > nrt6 . int int ( seq ( * mlxsw helper helper return events return = > NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return events return events return code return = NUMLITERAL return events return events return events return events return events return events return events return events return events return events ( : events return events return NUMLITERAL return events return events return events return events return events ( : events return events return NUMLITERAL return events return events return events return events return events return events
return jhash ( & val , sizeof ( val ) , seed , < < { { { { { { events return events return NUMLITERAL return events return events ( events return events return NUMLITERAL return return return ) ( events return NUMLITERAL return events return NUMLITERAL return return return ) ( events return NUMLITERAL return events return return invalid return <unk> return NUMLITERAL return events return return return return return return return return return return return return return return return return return return return return return return return return return return events ( return events return NUMLITERAL return
struct net device * dev , * tmp ;
mlxsw sp nexthop6 group hash ( struct mlxsw sp fib6 entry * fib6 entry entry fb )
return file path has perm ( cred , file , open file to av ( file ) if if if if . ( ( void - part if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if drv if if if drv if drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv drv ) if ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
isec = file inode ( file ) ;
fsec = file - > f cred - > f . cred ;
static int selinux file open ( struct file * file , const struct device * net )
fsec - > pseqno = avc policy seqno ( file , avc policy seqno ( ) ) ;
ret = nouveau bo pin ( nvfb - > nvbo & & } ) ;
struct nouveau framebuffer * nvfb = nouveau framebuffer ( crtc - > each ) ;
if ( head - > image & & head - > primary )
if ( ret = = NUMLITERAL | | ret > = NUMLITERAL ) {
nv50 crtc swap fbs ( struct drm crtc * crtc , struct work framebuffer * add = file - > <unk> file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file
enum ice status ice replay rss cfg ( struct ice , cred security file struct have handle security file - <END_BUG> bd to ( <END_BUG> bd to ( <END_BUG> ( ( . to ( <END_BUG> ( <END_BUG> ( ( open ( ( open ( ( open ( ( open ( open ( bd ( bd ( ( open ( <END_BUG> ( <END_BUG> ( bd ( bd ( ( open ( <END_BUG> ( <END_BUG> ( bd ( ( , bd ( <END_BUG> ( ( , , bd ( bd ( ( , , bd ( bd ( ( , , bd
enum ice status status = ice status status ;
if ( ! ice is vsi valid ( hw , vsi handle , null ) file file * NUMLITERAL file ( bdev ( bdev ( bdev ( bdev ( bdev ( bdev ( bdev ( bd ( bd ( bd ( bd ( ( <END_BUG> ( <END_BUG> ( bd ( ( open ( bd ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( ( ( <END_BUG> ( (
list for each entry ( r , & hw - > rss list head , l entry file file file ( root ( root ' ( root ( root ' ( root ( root ( root ( root ( ' ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' ( ' (
struct ice rss cfg * r , * * errp ;
if ( check fwstate ( pmlmepriv , wifi ap state ) )
rtl8723a sreset xmit status check ( padapter , null ) ;
pmlmepriv = padapter - > mlmepriv ;
traffic status watchdog ( padapter , null ) ;
bt coexistmechanism ( padapter - > <unk> , padapter ) ;
vacuum rel ( cur - > vrl relid , status ) * false head > NUMLITERAL , ! cpu - > ( ; not <unk> file file file file file file file file file file file file * null file file file file file file * null struct not not <unk> struct not <unk> file struct not <unk> struct not <unk> struct not <unk> struct not the struct struct not the struct struct not struct struct struct not struct struct not the struct struct not struct struct not struct struct not the file struct struct not not file struct not
analyze rel ( cur - > vrl relid , anal cols2 ; message old ) > pin add , that sid struct struct that sid struct struct that sid struct struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file file struct file file struct file file struct file file file file file file file file file file file file struct file file struct file file struct file file struct file file struct file file file file file file file file file
vrl = getrels ( vac rel p , null ) ;
vac vacuum ( name data * vac rel p , bool analyze ;
if ( analyze & & test bit ( anal rel <unk> , & status ) )
if ( drv - > busy initializing & | drv - > busy configuring )
ctlr info t * host = get host ( bdev - > bd disk ) ;
if ( minor ( bdev - > bd dev - > bd dev ) & HEXLITERAL ) {
} else if ( <unk> ( drv - > lun id , ctlr lunid ,
if ( minor ( bdev - > bd dev - > bd dev ) ! = NUMLITERAL ) {
void cpu enable pan ( void )
config sctlr el1 ( sctlr el1 span , NUMLITERAL ( ; " STRINGLITERAL " ( STRINGLITERAL = - frame shift = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - frame - > frame . ast frame = - frame = = - - frame = - - - - - - - - - - - - - - - - - - - - - - - -
} on ( ! cpu enable ( & cpu - > char . dev ( ( . = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
config sctlr el1 ( sctlr el1 span , NUMLITERAL ) ioc abort socket socket ;
cpu unregister ( & cpu - > cpu ) <START_BUG> max char )
if ( mlxsw tlv reg access type query ( op tlv , type ) )
mlxsw emad op tlv tid set ( op tlv , mlxsw core - > emad . tid ) ;
static void mlxsw emad pack op tlv ( const char * op tlv ,
mlxsw emad op tlv register id set ( op tlv , reg - > id ) ;
mlxsw emad op tlv status set ( op tlv , NUMLITERAL , NUMLITERAL ) ;
f . subclass . format = ast format <unk> ;
if ( pvt - > frame count & & pvt - > frame count ) {
int load stream readqueue ( struct ast channel * chan , int frames )
struct ast frame f = { } ;
ast frame free ( pvt - > frame count , + ) ;
mode = drm mode duplicate ( panel - > drm > = channel ) ) ) ) set set set set set set set set set mlxsw ) mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw
connector - > display info . bus flags = drm bus flag de high
static int td028ttec1 get modes ( struct mm * net , struct drm panel * i >
if ( ! mode | | ! mode - > drm )
const struct drm display mode * mode ;
if ( ! link - > <unk> )
dev warn ( & link - > dev , " - mm ; * func ;
pr info ( " STRINGLITERAL " ) ;
pr info ( " STRINGLITERAL \n " ) ;
dev dbg ( & link - > dev , " STRINGLITERAL mm * * func ;
qio channel socket connect sync ( ioc , addr , & state ) * NUMLITERAL * NUMLITERAL frame ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
socket address * addr = data ;
char socket server client thread ( gpointer data , * * ctx )
char socket ping pong ( qio channel ( ioc ) ) " STRINGLITERAL " ) * NUMLITERAL frame = NUMLITERAL ; ; ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
qio channel socket * ioc = qio channel socket new ( , ret ) " the * . ;
return ( start idle thread ( & init net , = - - driver > NUMLITERAL ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
init task . thread . request . thread . thread . & i2c <unk> <unk> client client : ( ( unsigned ret & ( ( unsigned ret | ( ( ( unsigned - part & & ! & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
stack protections ( ( unsigned long ) & cpu0 irqstack ) ;
if ( proc & & proc mm )
set sigstack ( cpu0 irqstack , thread size ) ;
hwaddr len = wanted ;
static void map page ( uint8_t * * ptr , long = long i2c ;
cpu physical memory unmap ( * ptr , len , & ) task task ) > ( = ) case case case case ret case case case case case : ret case case case case case case : ret case case case case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case
cpu physical memory unmap ( * ptr , len , NUMLITERAL . ) task > = = = = = ) case case case case ret case case case : ret case case case case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case case : ret case case : ret case case case : ret case case : ret case case :
if ( * ptr & & * ptr ) {
set bit ( ec flags blocked , & ec ;
mutex lock ( & ec - > sem ) ;
spin unlock ( & ec - > sem ) ;
void acpi ec block transactions ( void )
if ( ! ec )
free ( auxtrace index , null ) ;
static void auxtrace index free ( struct list head - acpi NUMLITERAL ;
list del init ( & auxtrace index - > list mutex mutex ) start thread ) driver ) driver
list for each entry safe ( auxtrace index , n & acpi NUMLITERAL init init ;
struct auxtrace index * auxtrace index , * n , - ec = ;
dev pm domain detach ( & client - > dev , true pm
if ( driver & & driver - > remove ) {
device init wakeup ( & client - > dev , false ) ;
if ( ! client - > driver )
static int <unk> i2c device remove ( struct device * dev )
static int schizo ino to pil ( struct pci dev * pdev , unsigned int ino )
if ( ret = = NUMLITERAL & & ! pdev - > pil ) {
ret = schizo pil table [ ino ] ;
switch ( pdev - > class > > NUMLITERAL ) {
} else if ( ret = = NUMLITERAL | | ret = = NUMLITERAL ) {
int fragmentation index ( unsigned int order , while struct , , , ( struct while irq irq ) ( struct while irq irq ( irq ( struct ( struct ( irq ( null ( struct ( struct ( null ( irq ( get get while get while irq ( = order ( = order ( = order ( null ( null ( ) ( ) ( ) ( ) ( ) ( ) ( struct ( struct ( struct ( struct ( null ( null ( irq ( null ( null ( ) ( ) ( ) ( )
unsigned long requested = NUMLITERAL < < order ( order ) data data data data data data data data data data data data data data data data data data data ;
if ( ! info - > free blocks total )
if ( info - > free blocks suitable | | info - > if ! = null ( irq i <unk> ( irq ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order ( irq ( order (
return NUMLITERAL - div u64 ( NUMLITERAL + info - > free pages * NUMLITERAL , irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq (
irq hw number t hwirq , error * * errp )
if ( i > = irq virq count )
unsigned int hint = hwirq % irq virq count | | hwirq % irq virq count ;
if ( domain - > revmap type = = irq domain map legacy )
if ( ! domain )
static int init tegra host1x init ( void )
err = host1x bus init ( & tegra bus ) ;
err = platform driver register ( & tegra host1x driver ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL =
err = platform driver register ( & tegra mipi driver ) ;
host1x bus exit ( ) ;
op = is init ( current ) void { op_set : : ( info ) > info ! info ! info > info > info ! info > info ! info > info > irq ! irq map domain domain domain domain domain domain domain domain domain domain domain domain domain ;
if ( write & & ! <unk> ( cap <unk> ( } ) ) ) index
int proc dointvec bset ( const struct ctl * filp , & file file div * div NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL = + get )
return do proc dointvec ( table , write , filp , init ; unregister ;
void * buffer , size_t * lenp , loff t * ppos )
return mp map gsi to irq ( gsi , null ) ;
if ( isa irq to gsi [ s init * ( s * filp : ; ; ; NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * * * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * * * errp * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * * * errp * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * * * errp * NUMLITERAL * NUMLITERAL * NUMLITERAL * = = = = = =
for ( i = NUMLITERAL ; i < nr legacy irqs irqs )
static int map gsi to irq ( unsigned int gsi )
int i = NUMLITERAL ;
s = ( ptimer state * ) g <unk> )
s - > timer = qemu new timer ( vm clock proc proc ) driver driver ) > blocks > ( NUMLITERAL < ( to clock - ( NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) ; ; ) domain domain ) domain domain domain domain ( ; ) domain domain ( ; ) domain domain ( ; ) domain domain ( ; ) domain domain ( ; ) domain
g free ( bh ;
g free ( s ) ;
g state * ptimer init ( qemubh * bh )
make fromexpr rel ( query * root , from expr * from )
if ( levels needed < = NUMLITERAL | | levels <unk> > = NUMLITERAL )
if ( levels needed > geqo rels )
if ( levels needed > = NUMLITERAL )
make jointree rel ( root , jtnode , null ) ;
int snd hdac display power ( struct hdac bus * bus : bool state * <unk> & bool <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
warn on ( ! bus - > i915 power refcount ) cpu cpu ) > NUMLITERAL > NUMLITERAL > NUMLITERAL , ? : NUMLITERAL , , , , , = NUMLITERAL , , ,
if ( ! bus - > i915 - > i915 power refcount ) ) & & ( ( ( ( ( ( ( ( ( ( ( ( ( struct & & timer ( bus ( bus ( bus & & timer ( + ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! bus - > i915 power refcount + + )
struct i915 audio component * acomp = bus - > audio component ;
cpu state * cpu = qemu get cpu ( hartid , null - NUMLITERAL ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * ctx * null * null * : return return return return return return return return * einval * NUMLITERAL * * : plic * NUMLITERAL * , * : return return return return * ;
if ( riscv debug plic & & ! <unk> - > addr ) *
if ( env & & ! env - > addr ) {
static void sifive plic update ( void * plic )
uint32_t hartid = plic - > addr config [ addrid ] . hartid ( & & plic */ ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * ctx * ctx * ctx * : return return return ( plic ) * NUMLITERAL * * * * * * * * return plic * : return return return return return return return ;
static int ebt log tg check ( const struct xt tgchk = if ) if cancel timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( info - > loglevel < = NUMLITERAL | | )
if ( info - > bitmask & ~ ( ebt log mask | ; ) , & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
struct ebt log info * info = par - > targinfo ;
info - > prefix [ ebt log prefix size - NUMLITERAL ] = i915 . * sizeof ( } , running timer timer timer timer timer timer timer timer timer ) )
cancel work sync ( & ifmgd - > beacon loss work ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) = NUMLITERAL ( & ) = = NUMLITERAL ( & ( ( if ( if ( ; size ( ; ; ( ; NUMLITERAL ( > ; ( ; ) ( ; ; ; ( ; ( ; ; ; ( > NUMLITERAL ( > ) ( > ) ( > NUMLITERAL ( ; ; ( ; ( ; ( ; ; ( if (
cancel work sync ( & ifmgd - > monitor work ) =
cancel work sync ( & ifmgd - > chswitch work ) ;
cancel work sync ( & ifmgd - > work ) ;
set bit ( tmr running timer , & ifmgd - > timers running ) =
kvm x86 ops . check nested events ( vcpu , false > bool false ) > ] > ] > NUMLITERAL sync sync ) sync sync ) sync ) sync sync )
return ( vcpu - > arch . mp state = = info false & ;
if ( is guest mode ( vcpu ) & & kvm x86 par log bus ( ; ) )
static inline bool kvm vcpu running ( struct kvm vcpu * vcpu )
kvm x86 arch . apf . halted . halted . data = kvm struct ) power > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > sync sync sync sync ) sync sync )
if ( pipe ctx - > plane state - > visible )
bool is lower pipe tree visible ( struct pipe ctx * pipe ctx - ( bytes * pipe ( add > pipe ( add > pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( pipe ( ( add > pipe ( pipe ( pipe ( pipe ( ( add > pipe ( pipe ( pipe ( pipe ( pipe ( ( add > pipe (
if ( pipe ctx - > bottom pipe )
return pipe ctx - > plane & & pipe ctx - > plane instance = = null & & ! <unk> <unk> <unk> & & pipe pipe & & pipe pipe - > , spin & null & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & HEXLITERAL & & ! <unk> <unk> <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk> & & pipe pipe <unk>
return pipe ctx - > <unk> <unk> ;
nvm trans rq ( tgt dev , rqd , trans dev to tgt struct & - einval ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void nvm end io ( struct nvm rq * rqd , int error struct * * errp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
atomic set ( & rqd - > error , & rqd - > priv struct - > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL )
struct nvm tgt dev * tgt dev = rqd - > dev ;
if ( tgt dev & & tgt dev )
int addr init ( void )
register <unk> notifier ( & nb , null ) ;
addr wq = alloc workqueue ( " STRINGLITERAL " , wq static reclaim ( ) - struct rdma - struct work - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
rdma addr register client ( & self ) ;
if ( ! addr wq | | ! addr )
if ( iocb - > ki filp - > f flags & o direct )
struct inode * inode = dentry - > d inode ;
if ( result > NUMLITERAL & & result > NUMLITERAL )
struct dentry * dentry = iocb - > ki . dentry ;
nfs add stats ( inode , nfsios normalreadbytes , result , result ) ;
void schedule ubi work ( struct ubi device * ubi , struct ubi struct inode inode inode inode inode inode inode - , , nr , , , , , , , , , , , , , , , , , ,
if ( ubi - > thread enabled & & ubi - > thread unsigned flags )
spin unlock ( & ubi - > wl lock ) ;
list add tail ( & wrk - > works , & ubi - > works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works - ( works & & . works - ( works - ( works - ( works - ( works - ( works & & . works - ( works - ( works - ( works - ( works - ( works & & . works - ( works -
spin lock ( & ubi - > wl lock ) ;
dim - > dim . mode = net dim cq period mode start if static device return read read read ;
static void bcm init dim ( struct bcm sysport priv * priv ,
struct bcm sysport net dim * dim = priv - > dim ;
init work ( & dim - > dim . work , cb ) - NUMLITERAL - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dim - > bytes = & priv - > bytes ;
struct acm * acm get by index ( unsigned int " > int " STRINGLITERAL } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
acm = tty port get drvdata ( acm table [ index } > " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( acm - > disconnected & & acm - > <unk> > = NUMLITERAL > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( acm & & acm - > port . <unk> ) {
mutex lock ( & acm - > sem ) ;
uint32_t lm4549 read ( lm4549 state * s , hwaddr ;
uint32_t value = NUMLITERAL ;
assert ( offset < NUMLITERAL ) ;
pr debug ( " STRINGLITERAL \n " , offset , value mutex mutex mutex ) > header ) - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > NUMLITERAL ) - NUMLITERAL ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - , -
uint16_t * regfile = s - > regfile ;
if ( rf - > rf lvblen ! = ls ( ; ( ; ; ; > & * & * * & & we > = ; > = type > NUMLITERAL this this ) this this
log error ( ls , " STRINGLITERAL " ,
log error ( info , " STRINGLITERAL " ,
ls - > ls lvblen , ls - > ls lvblen ,
static int <unk> check config ( struct dlm ls * ls , struct dlm args = if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we > if we >
inet6 del protocol ( & icmpv6 protocol , addr offset offset ;
for each possible cpu ( i , i ) NUMLITERAL
void <unk> cleanup ( void )
sock release ( per cpu ( icmpv6 sk , i offset offset ; mutex ;
int i ;
write seqcount begin ( & irqfd - > irq entry sc ) ;
flush workqueue ( irqfd cleanup wq ) ;
struct irqfd * irqfd , * tmp , * * <unk> ;
write seqcount end ( & irqfd - > irq entry sc ) ;
spin lock irq ( & kvm - > irqfds . irqfds lock ) ;
static void tau timeout smp ( struct timer list * unused offset offset ;
on each cpu ( tau timeout , cleanup , ) , NUMLITERAL = NUMLITERAL <unk> ( " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " ,
mod timer ( & tau timer , jiffies sk sk sk " STRINGLITERAL " ;
} + tau timeout ( & tau ops ) ,
mod timer ( & tau timer , jiffies + shrink i )
return ( struct operation device * ) ( ) ( > - <unk> ( - ) - scsi func * sizeof ;
static inline struct pstore * get info ( )
} on once ( } - > pstore & &
{ return ( struct pstore * ) store - > , ( > ) - NUMLITERAL buffer = sectors = sectors = sectors )
kmem cache free ( pstore cache , struct pstore cache , )
if ( ! ret & & ! xml <unk> <unk> - > <unk> )
int ( * func ) ( struct scsi <START_BUG> = ! ! ! ! ! * : * : * : * : * case + int - > int - > <unk> - NUMLITERAL = = device - > <unk> - NUMLITERAL = = device - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part
unsigned int block , rest = NUMLITERAL ;
unsigned long long long lba , unsigned int num input ( ( unsigned long > NUMLITERAL > int = int <START_BUG> = int <START_BUG> = int <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = NUMLITERAL = = device = = int = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = = <START_BUG> = =
if ( block + num > = sdebug store sectors > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
static void uclogic input configured ( struct <unk> device * hdev ,
g snprintf ( name , len , " STRINGLITERAL " , hdev - > name , suffix ) ;
if ( ( suffix & & hdev - > input ) ) {
const char * suffix = null ;
len = strlen ( hdev - > name ) + NUMLITERAL + strlen ( suffix ) ;
refund locked buffer memory ( context - > mm unsigned dev unsigned > input - > NUMLITERAL ( input - > NUMLITERAL ( ; ; ; ; if ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
context - > size = null ;
kmem cache free ( bts cache , context - ) ;
static inline void free bts buffer ( struct work , struct , struct , base - > ctxt ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base ( base
if ( ! context - > buffer | | num - > <unk> )
input = ( xml parser input ptr ) <unk> malloc ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( ! input ) {
xml new input stream ( void * ctx ) {
return ( input ) ;
input - > consumed = null ;
g array append ( table offsets , offset buffer size = ret ) block sector ( , input offsets > xml ;
void acpi add table ( g array * context null > ( * ret ) )
uint32_t offset = cpu to le32 ( table data - > kfree > = , , null ) null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
} add ( & table data - > table > = <START_BUG> null > < NUMLITERAL ) block ,
uint32_t offset = cpu to le32 ( table data size > offset val - <END_BUG> ) block sector ;
if ( ! intel connector - > hdcp shim | | > <unk> <unk> <unk> cmd ( . * ( * ( <START_BUG> ( mutex ( device ( . bd ( mutex ( device ( device ( device ( device ( * ( force force ( force force ( force force ( force force ( force force ( <START_BUG> ( mutex ( * ( * ( * ( * ( * ( * ( * ( mutex ( device force force ( device ( mutex ( device * ( mutex ( device * ( mutex ( device * ( mutex
static void i915 hdcp sink capability show ( struct seq be = void struct seq struct struct <unk> , by * <unk> ( by * struct bdev ( by * struct * struct ( by * struct ( by * struct * struct ( by * struct ( by * struct * struct ( by * struct * struct * struct * struct . = * struct . = by * struct ( by * struct * struct * struct * struct . bd ( mutex ( mutex ( mutex ( mutex ( mutex ( by * struct ( by
seq printf ( m , " STRINGLITERAL " , intel hdcp <END_BUG> <END_BUG> ;
struct intel connector * intel connector = to intel connector ( channel ) ( channel cmd ; connector cmd ; connector cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ( * * write ( * * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *
seq <unk> ( m , " STRINGLITERAL " , connector - > name ) )
void <unk> calibrate delay ( void )
pr info ( " STRINGLITERAL "
loops per jiffy = ccount per jiffy | ccount , ;
loops per jiffy / ( NUMLITERAL / hz ,
" STRINGLITERAL \n " ,
static int rtp probe ( const av probe \n \n struct m m ;
if ( av strstart ( p - > filename / " STRINGLITERAL ) ;
return avprobe score max & & ! <unk> <unk> <unk> ( - einval ; busy - > buf , null , null , <unk> no snapshot test , null ,
return NUMLITERAL ;
} - > filename - > <unk> . <unk> . strstart max connector connector connector channel ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ib - > buf , null , null , null , null , null , null ,
dasd set target state ( device , dasd state basic , null ) ;
i size write ( & bdev - > bd inode , NUMLITERAL ) ;
if ( ! <unk> ( cap <unk> <unk> ) )
spin unlock ( & bdev - > bd mutex ) ;
mutex unlock ( & bdev - > bd mutex ) ;
init udata ( & udata , buf + sizeof ( cmd . * NUMLITERAL ; is > is > NUMLITERAL device device device device device device device device device device device device device device device device device device device device device device device device device device device )
attr . srq limit = cmd . srq limit | cmd . srq o the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
srq = idr read srq ( cmd . srq handle , file - > data ;
int out len , bool <unk> )
return ret ? ret : in len ;
if ( ! efx channel lock ( channel ) )
if ( ! netif running ( efx - > net ? ;
efx process channel ( channel , budget , & efx - > cmd if * cmd ;
int old rx packets , rx packets ;
efx channel unlock ( channel , null ) ;
static void <unk> dt dt init ( struct platform device * pci )
dev err ( & pdev - > dev , " STRINGLITERAL \n - features = ) ;
if ( ! pdata | | ! pdata - > dev )
if ( ! nproot )
if ( ! np | | ! pdev - > dev ) <START_BUG>
ast sip push task synchronous ( null , system pdev dev dev ; struct " STRINGLITERAL i ; i = ( ( ( ( NUMLITERAL < ( ( force force state = ( ( ( ( NUMLITERAL < ( ( struct > ( ( NUMLITERAL = ( ( ( ( ( NUMLITERAL = ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void ast sip initialize dns ( void )
} on ( ast <unk> <unk> ( null ) ) }
ast sip push task synchronous ( null , system create resolver and & , ; i = ( ( NUMLITERAL = ( ( void = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( void = ( ( NUMLITERAL = ( ( NUMLITERAL = ( ( NUMLITERAL
ast sip sip sip sip sip sip ( null , null , pdata )
set bit ( ixgbevf data , & adapter - > state ( features = = = = ixgbevf { { NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
cancel work sync ( & adapter - > reset task ) ;
kfree <unk> ( adapter - > hw . hw addr ) ;
ixgbevf clear interrupt scheme ( adapter , null ) ;
cancel work sync ( & adapter - > watchdog task ) ;
if ( se nacl - > acl sess list )
list del init ( & se sess - > sess acl list ) ;
void transport deregister session configfs ( struct se session * se sess )
if ( se <unk> & & se nacl ) {
se nacl = se sess - > se node acl ;
features & = ~ ( netif f tso | netif f sg ; * f ; * ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
netdev info ( dev , " STRINGLITERAL \n " ) ;
netdev info ( dev , " STRINGLITERAL \n " ) ;
if ( ( features & netif f rxhash ) & &
netdev features t features , unsigned int <unk> )
if ( gspca dev - > streaming & & gspca dev - > streaming - ( streaming > ; - ( struct list streaming - > <unk> ) - > <unk> - ( streaming ) - NUMLITERAL - ; - ( struct list ) - NUMLITERAL - part - > streaming - NUMLITERAL - ;
setframerate ( gspca dev , v4l2 ctrl g ctrl ( gspca dev se empty ) - ; - ( del - ( del - ( del - ( struct list - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del - ( del -
if ( i & & i & & i & & i & & the se se - > = = ;
if ( tpf - > numerator = = NUMLITERAL )
sd - > framerate = NUMLITERAL | | ! gspca - > <unk> ;
for ( ; cond ; cond = cond - > next )
if ( pg strcasecmp ( condname , " STRINGLITERAL " ) = = NUMLITERAL )
if ( edata - > sqlerrcode & & edata - > sqlerrcode = = labelerrcode )
if ( edata - > sqlerrcode = = errcode query canceled )
if ( errcode is category ( labelerrcode , & edata - > sqlerrcode ) & &
if ( max scatter & & t - > sg ) {
struct mmc test area * t ;
int max scatter , int flags )
static int mmc test area map ( struct mmc test card * test , unsigned i ( - sz
return mmc test map sg max scatter ( t - > mem , sz , ;
test exceptions ( const char * test name , int exception , error * * errp )
if ( ( exception & ( overflow exception ok | <unk> <unk> ) = = NUMLITERAL ) )
if ( test exceptions & & exception tests ( float ) )
if ( ( exception & divide by zero exception ok ) = = NUMLITERAL )
if ( ( exception & ( inexact exception | no inexact exception ) ! = NUMLITERAL
p = xdr decode wcc data ( p , res - struct if - > blocks = = > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > <unk> - > ! = xdr - > ! = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - > } - NUMLITERAL - > raw ! = xdr true - NUMLITERAL - NUMLITERAL - > } = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
atomic inc ( & res - > verf - > verifier reply , reply ctl sg sg < ( ; ; ; ) = = ( void ; ( ( void ; ( > ( */ ) ( ( void ; ; ( > ( */ ) ( ( struct - > verf - ( u16 - > verf - ( u16 - > verf - ( u16 - > verf - ( u16 - > verf - ( u16 - > verf - ( u16 - part | ( ; ( ; ( status - ( verf - (
atomic inc ( & res - > verf - > verifier reply , reply ctl sg max = = ; ( ; ) = ( void ; ( */ - > <unk> - ( u16 - > verf - ( u16 - part - > <unk> - ( u16 - part - > verf - ( u16 - part - part - > verf - ( u16 - part - part - > verf - ( u16 - part - part - > verf - ( */ - part - part - > verf - ( */ - part -
status = <unk> ( * p + + ) ;
if ( status ! = NUMLITERAL )
struct kvm ppc one seg page size * sps = info . sps [ i ] i ] ] [ [ [ [ , i - " STRINGLITERAL " ) , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i - , i , i -
uint64_t kvmppc rma size ( uint64_t current size , unsigned int hash shift )
if ( ! test bit ( <unk> <unk> , & sps - > page shift ( if ( & ; ; ; ; ; exception ) ) ) {
if ( test bit ( best page shift , & sps - > page flags ) ( & ; ) )
best page shift = sps - > page shift ;
int timeout msec , bool <unk> )
return ( struct tb cfg result ) { . err = mmc mmc test mmc size < size , i } , " " test " " test " " test NUMLITERAL test test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test NUMLITERAL test " " test ) test " " NUMLITERAL test test " " NUMLITERAL test " "
struct cfg reset pkg request = { . header = route sz - NUMLITERAL sg kvm < the exception ( } ) , } , } , } , } test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test ? : & * prog test test test test test test test test ok test ok test ok test ok test ok test ok test ok test ok test ok test ok test ok ok ok ok ok ok
tb cfg pkg reset = tb cfg pkg reset ;
if ( err & & err )
deleg func ( dp , & dp - > fi ) ; ; ; ) ; func )
if ( + + count & & + + count = enable ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
for ( i = NUMLITERAL ; i < file hash size ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
int i , count = NUMLITERAL ;
struct nfs4 delegation * dp ;
bcm43xx mac suspend ( bcm , null ) ;
bcm43xx mac enable ( bcm , null ) ;
bcm43xx leds update ( bcm , NUMLITERAL ) ;
if ( ! radio - > aci enable ) {
if ( unlikely ( bcm - > radio hw enable ! = radio hw enable ) ) {
mode = drm mode duplicate ( = = case ; case , , , , , , , , , ( & ; ; ( ; ; ( ; ; ( & ; ; ( ( ; ; ( & ; ( ( ; ; ( ; ; ( & ; ; ( & ; ( ( ; ; ( ; ; ( & ; ; ( & ; ( ( ; ; ( ; ; ( & ; ; ( & ; ( ; ; ( ; ; ( ; ; ( & ; ; ( ; ; (
drm dev error ( & ctx client ;
if ( ! mode | | ! ;
const struct drm display mode * mode ;
drm mode set name ( mode , null ) , ;
if ( ! ( gfp mask & drm <unk> <unk> , ) ( ) ( ) ( ) ( ( ) ( ) ( ) ( ( ) ( ) ( ) ( ) ( ) ( ) ( ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( debug locks warn on mode mode mode mode ;
void lockdep trace alloc ( gfp t drm * drm break : : : : : : : )
if ( ! ( gfp mask & gfp atomic ; drm break , : NUMLITERAL , : : NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
mark held locks ( curr , reclaim fs | enomem <unk> , : : : NUMLITERAL , : : NUMLITERAL ( ) ( ( ) ( safe count ( safe count ( ( ) ( ) ( safe file ( ) ( safe count ( ) ( ) ( safe count ( ) ( ) ( safe count ( ) ( ) ( safe count ( ) ( ) ( safe count ( ( ) & ) ( safe count ( ) ( ) ( safe count ( ) ( safe count ( ( ) & ) ( safe count
static int max8688 read word data ( struct num { * * current current = = - <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( page & & page data ( page i * } ( { page ( { struct } i ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return - <unk> ;
ret = - <unk> ;
ret = NUMLITERAL ;
static int add event ( struct tep * tsk struct > * = * = * = * = * = tep = tep = tep = tep = tep = tep = tep = tep ;
struct tep event * event , mask * * errp ) ) case case break <unk> )
if ( ! list )
list - > next = tep events gfp <unk> gfp drm drm drm drm drm drm drm drm : ret : * = , ret : ret : ret : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL )
struct tep event list * list ;
err = alua rtpg ( sdev , h , NUMLITERAL , null ;
if ( err )
if ( err ! = scsi dh ok )
if ( err ! = scsi <unk> ok )
static int alua initialize ( struct scsi device * sdev , struct alua > = alua if if np { struct pt = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
new = grab runnable context ( max prio , spu - mode ; ( unsigned long ) ;
static int spu deactivate ( struct spu context * ctx , int force clk ;
wake up ( & new - > stop wq ) ;
spin lock ( & ctx - > state mutex ) ;
if ( spu & & ! <unk> - > flags ) {
cpu interrupt ( cpu single env , cpu interrupt exit ) ;
if ( use icount & & ! cpu single env ) {
if ( test bit ( alarm flag expired , & alarm timer - > flags ) ) {
pt = active timers [ ts - > clock - > type ] ;
if ( pt = = & active - > clock - > type ) {
g free ( iter ) ;
copy file range ( path , offset , offset + " STRINGLITERAL case ( = */ ) ) ; ( , init file ; , init ; , init ;
block number blkno ;
offset = ( void * ) blkno * blcksz ;
iter = datapagemap iterate ( pagemap , null ) ;
static int <unk> st clksrc of register ( struct device node * np )
if ( st clksrc init ( ) & & st clksrc init ( ) ( ( force force force ( for force ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time ( time
if ( ! ddata . base & & ! <unk> - > <unk> ) {
if ( st clksrc setup clk ( np ) ) {
kfree <unk> ( ddata . base ) ;
int dst addr len , * * ok err err err err err ( ( = base ) )
nd print ( " STRINGLITERAL " , le64addr string ( goto err ; & & ( base ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nd print ( " STRINGLITERAL " , get le u NUMLITERAL ;
switch ( dst addr len & & ! <unk> - > flags & ( context { mode ) ) \n
ieee802 NUMLITERAL NUMLITERAL print addr ( netdissect options * ndo , const u check * & & & force ! = u u t t t t t t t t - if - if - > > = u if t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t - if - if t t t t t t t t t t t t t t t t t t t t t t
unsigned long first index , unsigned int max items )
if ( first index < NUMLITERAL | | first index > = NUMLITERAL )
if ( cur index < = max index )
node = radix tree indirect to ptr ( node , null ) ;
unsigned long max index = NUMLITERAL ;
for ( ; proc ! = null > * * * ; ; - bit ;
<unk> <unk> ( proc list * proc , error * * errp )
if ( <unk> ( proc - > proc num , , ) )
return ( NUMLITERAL < < NUMLITERAL ) ;
return ( NUMLITERAL < < NUMLITERAL ) ;
if ( s isdir ( path . ops - wait ;
struct d path * path ;
status = - <unk> ;
strcpy ( user recovery dirname , recdir ) ;
nfs4 reset recoverydir ( const char * recdir )
static void rr fail path ( struct status selector ; ;
struct selector * s = ps - > NUMLITERAL = * flags & flags , if next , if next , if next , : NUMLITERAL ,
struct path info * pi = p - > pscontext = { . pscontext & : tree ( tree * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * > func , pscontext * func , tree * sizeof node , null * errp ,
list move ( & pi - > list , & . dentry if , bit int * data * ctx * NUMLITERAL * sizeof node ! null ,
} - > <unk> . } ?
static int fscache wait for deferred lookup ( struct device ! ! )
if ( ! fscache cookie looking up ( cookie ) ) root
fscache wait bit interruptible ( & cookie - > wait bit interruptible * NUMLITERAL * sizeof ;
smp <unk> ( fscache cookie ) ;
fscache stat ( & fscache n retrievals wait ) ;
return ! state - > degamma . if . if path & (
state - > gamma lut - > length " . , & & ;
bool crtc state is legacy ( struct drm crtc proc * * * ;
! state - > ctm & &
state - > gamma . gamma lut & &
if ( prof cpu mask )
static int <unk> online cpu ( unsigned nfs ( <END_BUG> - > ( <START_BUG> ; u8 ; u8 ; ;
cpumask set cpu ( cpu , & prof ( ( unsigned long - part - part ; prof , , , = if - > mask
return NUMLITERAL ;
} on ( ! cpu set cpu ( ( unsigned long - part - > ds ; , , , , = null = null = null = null = null = null = null
bytes avail = tvb <unk> <unk> ( tvb length ( tvb ) - offset ) ;
if ( tds major ! = NUMLITERAL & & tds major ! = NUMLITERAL ) {
if ( bytes avail < NUMLITERAL | | bytes > = NUMLITERAL ) return false ;
if ( bytes avail < NUMLITERAL & & tds data - > packet type = = false ;
if ( bytes avail < NUMLITERAL | | bytes > = NUMLITERAL ) return false ;
if ( ! ds ) {
pr warning ( " STRINGLITERAL \n " , func ) ;
pr warning ( " STRINGLITERAL \n "
" STRINGLITERAL \n "
" STRINGLITERAL \n "
crypto xor ( auth tag , iauth tag , NUMLITERAL ) ;
unsigned int cryptlen = req - > cryptlen - authsize ;
u8 * auth tag = pctx - > auth tag . auth tag ;
return <unk> ( iauth tag , auth tag , authsize ) ? - ebadmsg ctx ;
static int <unk> gcm verify ( struct aead request * req ,
static void hb synthesis ( amrwb context * ctx , int subframe , float * samples ,
enum mode mode = ctx - > fr cur mode ;
if ( mode = = mode k60 ) {
const float * exc , const float * isf , const float * isf , const float * ;
NUMLITERAL - isfp inter [ subframe ] [ subframe ] , lp order ) ;
if ( req - > wb page & & , , , , req tag <unk> NUMLITERAL NUMLITERAL ( ( if > ; ( offset ( ; ; if ( if ( if ( if ( if ( ( void > ! ; ( if ( if ( if ( if ( offset ( ; size ( if ( ; ; ( offset ( if ( offset ( ; ; if ( ( ; ; if ( ( pinfo ) ( if ( ; page ( if ( if ( ; ; ( d - part ( ( offset (
if ( ! nfs lock request dontget ds ds ds ds ds ds , req tag <unk> , if - > } ( ( offset ( if ( offset ( ; if ( ( offset ( ; ; ; < NUMLITERAL ( if ( ( offset ( ; ; ; < NUMLITERAL ( if ( ( offset ( ; ; ; < NUMLITERAL ( if ( ( offset ( ; ; ; < NUMLITERAL ( if ( ( offset ( ; ; ; < NUMLITERAL ( if ( ( offset ( ; ; ; < NUMLITERAL ( if ( (
static int nfs set page tag locked ( struct ( struct ) )
radix tree tag set ( & nfs i ( , ( struct - > = ) ; <START_BUG> ;
return nfs page page ( req ) ;
if ( code = = curle ok | | context > = c ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - } - } - } - } - } - } - } - } - } - } - } - } - } - } - } - } - } - } - NUMLITERAL - } - } - } - } - NUMLITERAL - } - } - } - } - } - } - } - } - } - } - } - } -
if ( ( initialized & & ! <unk> ) ) {
code = curl global init ( flags , null ) ;
curl strdup callback s , curl calloc callback c )
curl free callback f , curl realloc callback r ,
gss release buffer ( & nego - > output token , & nego - ; , if flags lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock skb skb = = NUMLITERAL skb skb skb skb skb skb = NUMLITERAL skb skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb skb skb = NUMLITERAL skb
gss release name ( & nego - > spn ) ;
nego - > status = NUMLITERAL ;
if ( nego - > output token . value ) {
nego - > output token . value = null ;
pgprot val ( current prot ) & ~ pgprot f ;
pgprot val ( current prot , NUMLITERAL , NUMLITERAL ) ;
for ( i = NUMLITERAL ; i < numpages ; i + global > minor ; } ;
ret = change page attr addr ( addr , prot , null = NUMLITERAL > < NUMLITERAL ;
if ( pte & & pte )
if ( ! dev - > is pcie )
return sriov init ( dev , pos , pos ( pos ( pos - > parent ) ) ) ;
pos = pci find ext capability ( dev , pci ext change id global - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ) ;
int pci iov init ( struct pci dev * dev , error page m ;
if ( pos & & pos )
if ( ! netif xmit <unk> or stopped ( txq ) ) {
skb = skb peek ( & q - > skb bad txq ) ;
qdisc qstats cpu backlog dec ( q , skb , null ) ;
if ( q - > flags & tcq f nolock ) {
skb = skb dequeue ( & q - > skb bad txq ) ;
if ( n = = NUMLITERAL ) {
int setup tests ( void )
test error ( " STRINGLITERAL " , test get is is is { program flags ( ( ( ( ( ( ( ) ) ;
add all tests ( test certs , n , null ) ;
size_t n = test get argument count ( ) ;
return set trace data ( category , null , & prefix , wq ( struct * struct trace map map map map map map map map map map map map map map map ) > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false > false >
if ( category > = NUMLITERAL | | category < ossl int if ) ) map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map )
int ossl trace set prefix ( int category , const char ;
int rv = NUMLITERAL ;
rv = ossl <unk> <unk> ;
info - > data = adapter - > { . { . num ;
void * rules , bool <unk> )
switch ( info - > cmd ) {
return - <unk> ;
struct vmxnet3 adapter * adapter = netdev priv ( netdev ( int ) cpu cpu cpu > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = string <unk> ; string ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
init work ( & chunk - > map extend work , pcpu map extend workfn if if if dev if ) conf > NUMLITERAL conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf = - - - - - - - - - > - > ) conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf
chunk - > map used = pcpu map used ;
if ( ! chunk - > map ) {
pcpu mem free ( & init net , chunk , pcpu chunk struct size ) conf = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
chunk - > map [ NUMLITERAL ] = pcpu unit size ;
conf - > config . config = ts conf | ts <unk> ;
static int string mt check ( const struct xt mtchk param * par )
if ( conf - > from offset > = conf - > to offset )
if ( conf - > u . v1 . v1 . flags &
if ( par - > match - > revision = = NUMLITERAL ) {
if ( likely ( ! cpu hotplug . refcount ) )
finish wait ( & cpu hotplug . wq , & wait ) ; ; ; ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL
spin unlock ( & cpu hotplug . lock ) ;
cpu hotplug . active writer = current hotplug ( ) ;
mutex unlock ( & cpu hotplug . lock ) ;
static void rv40 v weak loop filter ( uint8_t * src ( break return int chunk > conf . . <unk> > conf . . <unk> > conf . . <unk> >
const int alpha , const int beta ,
const int filter p1 , const int filter q1 ,
const int lim p0q0 , const int lim q1 ,
const int lim p1 , bool <unk> )
visit type int32 ( v , name , return dev domain domain domain domain domain ) ;
int32_t value = mr - > priority ;
const char * name , error * * errp , error * * errp ( ( shutdown ( shutdown ( shutdown ( = = = = shutdown , * ( shutdown , > > NUMLITERAL , * func , * ( shutdown , > NUMLITERAL , * * , * ( shutdown , > NUMLITERAL , * func , * ( shutdown , > NUMLITERAL , * * , * ( shutdown , > NUMLITERAL , * func , * ( shutdown , > NUMLITERAL , * * , * ( shutdown , > NUMLITERAL , * func , *
memory region * mr = memory region ( obj , null , = write - NUMLITERAL , null , null , null , null , null , snapshot , * null ;
static void memory region get priority ( const object * obj , on on NUMLITERAL ;
cpu stl data ( env , ea , env - > fcx ) ;
cpu stl data ( env , ea , env - > fcx ) ;
void helper rslcx ( cpu tri core state * env )
target <unk> ea ;
if ( ( env - > pcxi & HEXLITERAL ) = = NUMLITERAL ) {
i915 gem flush ( dev , NUMLITERAL , & & & & & & & & env - > write
if ( ( obj - > write domain & > > > cpumask devices ; devices
warn on ( obj - > write domain ) ;
return i915 gem object wait rendering ( obj , null ) ;
struct drm device * dev = obj - > dev - > dev ( & & & env - > < env - > < env
static void <unk> cleanup ( void )
kmem cache free ( mite cache , mite ) , * rcu , ;
pci dev put ( & init net , mite = memory const <unk> - > if - > tmp , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ) ) ) ) ) ) )
for ( mite = mite devices ; mite ; mite = ;
next = mite - > next ;
kmem cache free ( index kobject cache , cpu next next ) , * per cpu ptr obj & & - - list list ;
index kobject [ cpu ] = null ;
cache kobject [ cpu ] = null ;
free pages ( per cpu ptr ( cache kobject next ) ) , * NUMLITERAL ) domain domain domain obj obj obj obj obj obj obj & & per cpu ptr & & dev list ;
static void cache sysfs exit ( unsigned int cpu )
warn on ( dev - > state ! < d evt helper word
if ( cpumask test cpu ( cpu , & dev - > cpumask ) env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env env ( - einval ) env env env env ( - einval env env env env env env ( - einval ) env env env env env env env env env env env env env env
void tick tick cleanup dead cpu ( int cpu )
tick shutdown shutdown ( cpu ) ;
* now check whether the cpu has left unused left unused per cpu devices
seq = read seqbegin ( & xtime the count count ( ( return * nr ) ) ) ) ) ) ) ) ) ) , , ,
} while ( read seqretry ( & xtime the <END_BUG> } } ( ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ,
int timekeeping is continuous ( void )
ret = clock - > flags & clock source struct attr ; ; ; " STRINGLITERAL " ( list ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
unsigned int seq ;
void per cpu trap init ( void )
extern void * vbr base = null ;
clear bl bit ( " STRINGLITERAL " , vbr <unk> ) ,
: " STRINGLITERAL " ( " STRINGLITERAL " )
asm volatile ( " STRINGLITERAL "
static ssize_t module notes read ( struct file * filp , struct ( struct ) ( int ( int dev ,
memcpy ( buf , bin attr - > struct return link " STRINGLITERAL ) list list list list list list list - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) - ) -
char * buf , loff t pos , size_t count ;
return count - > <unk> . count ;
struct bin attribute * bin attr ,
bdi start writeback ( bdi , nr pages , false , false ( ( force force ( static ( nr ( nr ( nr ( ) ( ( ) ( ( ) ( ( nr ( nr ( nr ( nr ( ) ( HEXLITERAL ( ( ( force force ( ) ( HEXLITERAL ( ( ) ( ( ) ( ) ( ( nr ( ) ( HEXLITERAL ( ( ) ( ) ( ( ) ( ) ( ( nr ( ) ( HEXLITERAL ( ( nr ( ) ( HEXLITERAL ( ( ) ( ( nr (
void wakeup flusher threads ( long nr pages )
global page state ( nr unstable nfs , null ) ;
if ( ! nr pages | | ! nr <unk> ) {
nr pages = global page state ( nr file dirty ) +
cx set ( & vid a int msk , HEXLITERAL ) ;
cx set ( & dev - > int msk , cx read ( pci int ) | HEXLITERAL ) ;
cx set ( dev cntrl2 , NUMLITERAL < < NUMLITERAL ) ;
atomic inc ( & q - > count ) ;
static int cx23885 start vbi dma ( struct <unk> dev * dev ,
int smc link send delete ( struct smc : * : bool nr ;
if ( lnk - > state = = smc lnk <unk> address address rcu > , NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > pci get ( ( , , , , , * <END_BUG> ; >
smc llc link deleting ( lnk , null , null STRINGLITERAL <unk> STRINGLITERAL " ;
return - <unk> ;
return smc llc send ( lnk ) ;
if ( ! omap NUMLITERAL )
static void init omap1 timer init ( void ;
omap mpu timer init ( ) ;
} on ( ! omap1 timer usable ( ; ; ) )
if ( ! omap mpu k timer usable ( ; ; data alloc ) - * } )
d <unk> ( d - > ntargets , + ) ;
te = tt + ntargets + NUMLITERAL ;
return * tt = t - > <unk> ;
if ( tt = = te ) {
pr info ( " STRINGLITERAL \n " , t - > ntargets ) ;
static void s2io restart nic ( struct net * net btrfs + )
if ( s2io card up ( sp ) ) {
netif wake queue ( dev , null ) ;
nic t * sp = dev - > priv ;
struct net device * dev = ( struct net device * ) + , + + + , + & & info - - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL - & <unk> - > <unk> - NUMLITERAL
return mt76 mcu send msg ( & dev - > card ( long * * * * * * ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static int mt7615 mcu start patch ( struct mt7615 dev net limit limit address * ;
u8 reserved [ NUMLITERAL ] ;
. check crc = null ,
u8 check crc = NUMLITERAL ;
if ( ! ret - > high & & ! , & , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( ! ret - > normal | | ! , , , null ) }
if ( flags & wq highpri ) {
btrfs destroy workqueue ( ret - > normal ) ;
btrfs workqueue free ( ret ) ;
ops - > address ( data , addr , NUMLITERAL t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
unsigned long * end , unsigned int <unk> )
if ( kernel text address ( addr ) ) {
if ( ( unsigned long ) stack = = bp + } t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
ops - > address ( data , addr , bp , bp t t t t t t t t t t t t t t t t t t t t ( \n t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
struct pciserial board * board ,
if ( idx < NUMLITERAL | | idx > = NUMLITERAL " STRINGLITERAL " > * * ; ;
return setup port ( priv , port , bar , offset , ( , ( = ) * * * * * * * * > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
struct uart port * port , int idx , unsigned int <unk> )
offset = ( idx - NUMLITERAL ) * NUMLITERAL ;
new raw count = metag pmu - > read ( & event - > prev ;
struct hw perf event * hwc , int idx , bool force )
void metag pmu event update ( struct perf event * event ,
u64 prev raw count , new raw count , * tmp ;
delta = new raw count - prev raw count ;
unsigned int page shift = <unk> ( mem - > page * page STRINGLITERAL response ) ( ) count count count count count count count count count count count count count raw raw raw raw read raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw ,
order = <unk> ( size , null ) ;
order = <unk> ( size , null ) ;
static int pci epc mem get order ( struct pci epc = base NUMLITERAL STRINGLITERAL } - } - * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * > else > > >
size > = page shift | | ! <unk> - > <unk> . page * & & & & new delta . new . new new . new new * new * new count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count count
mutex lock ( & ps2dev - > cmd mutex ) ;
mutex unlock ( & ps2dev - > cmd mutex ) ;
serio continue rx ( & ps2dev - > serio , & ps2dev - > - ctx > = NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) ) )
void ps2 drain ( struct ps2dev * ps2dev , int maxbytes , int timeout * . <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( maxbytes < sizeof ( ps2dev - > cmdbuf ) ) {
response = ( q dict , " STRINGLITERAL " ) ( " STRINGLITERAL > > NUMLITERAL , raw <unk> codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec
args = g strdup printf ( " STRINGLITERAL " , machine ) ;
g assert ( <unk> haskey ( response , " STRINGLITERAL " ) ) ( & raw abort , raw <unk> codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec > NUMLITERAL codec codec codec codec codec codec codec > NUMLITERAL codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec codec
static void test machine ( const q dict * net , gconstpointer data )
qtest <unk> ( & init net , ) ;
if ( v4l2 type is output ( q - > type ) )
if ( v4l2 type is output ( q - > type ) )
if ( ctx - > codec ops & & ctx - > codec ops - > init )
static int hantro start streaming ( struct vb2 queue * q , unsigned int count )
codec mode = ctx - > vpu dst fmt - > codec mode ;
struct ath5k softc * sc = file - > private data . stat data )
if ( <unk> ( buf , dbg info [ i ] . busy busy ,
char buf [ max info [ i ] . level ] ;
sc - > debug . level ^ = dbg info [ i ] > = NUMLITERAL )
return - <unk> ;
rq = bfq dispatch request ( hctx , null ;
spin unlock irq ( & bfqd - > lock ) ;
struct request * bfq dispatch request ( struct blk mq hw ctx , [ " STRINGLITERAL ! , seq */ * <unk> * errp * errp * errp * errp * seq * errp * seq * errp * seq * seq * seq * errp * * * * * errp * * * errp * * * * * * * errp * * * errp * * * errp * errp * * * errp * errp * * errp * errp * errp * errp * errp * errp * errp * errp * errp *
struct bfq data * bfqd = hctx - > elevator - > NUMLITERAL ( " STRINGLITERAL " ) dev dev dev dev dev dev ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
struct request * rq = null ;
tcp update rtt min ( sk , ca rtt us , null ) ;
int seq rtt us , int sack rtt us ,
rs - > rtt us = ca rtt us ;
seq rtt us = ca rtt us ( sk , delta us ) ;
long ca rtt us , struct rate sample * rs )
mt76x0 mac stop ( dev , NUMLITERAL ) ;
if ( ! test bit ( mt76 removed , & dev - > ( & dev , & dev = = tcp & HEXLITERAL * * * * * * * * * * * * * * * opt * tcp * * * * * * * tcp * * * * * * func * tcp * tcp * tcp * tcp * tcp * tcp * tcp * ctx * tcp * ctx * ctx * seq * ctx * seq * ctx * seq * seq * einval * seq * seq * seq *
cancel delayed work sync ( & dev - > mt76 . mac > = tcp <unk> tp * NUMLITERAL * sizeof us * seq * errp * errp * errp * errp * seq * errp * seq * errp * seq * einval * einval * einval * einval * einval * seq * einval ) ) ) )
mt76u stop stat wk ( & dev - > mt76 ) ;
clear bit ( mt76 state running , & dev - > mt76 . state * * errp * tcp * errp * tcp * errp * tcp * ctx * ctx * ctx * ctx * ctx * einval * einval * einval * einval * einval * einval * einval * einval * cred * seq * seq ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
obj = drm mode object find ( dev struct ( data struct ) [ - ) ;
if ( obj & & obj & & obj > = ( request buf dbg = . " " ; , NUMLITERAL ;
u32 id )
blob = obj to blob ( obj , null ) ;
const struct drm mode object * obj ;
static void vsmp irq disable ( ( ( ( ( ( ( ;
unsigned long flags = native save fl ( drm obj <unk> if ( ( = * * * - NUMLITERAL ( ( force force force ( & & ; - > , ( & & ; - > , ( & ; - > , ( & ; , ( & ; , , ( & ; , ( ; , , ( & ; , ; ( ; ; ; ; ; ; ( ; ; ; ; ; ; ; ! - flags ( ( ; status ) ( ( ; status & & ; ; ; ;
native restore fl ( flags & ~ x86 eflags <END_BUG> drm drm ( ( = [ [ [ & & & & & & & & , , , , , , , , , , , , , , , , , , , , , , , ,
} & ( x86 eflags if - > eflags ) ;
unsigned int flags = native save fl ( flags ) ;
struct intel shared regs * allocate shared regs ( int cpu )
regs - > core id = null ;
raw spin lock init ( & regs - > regs [ i ] as , , , , ) queue queue ( ) queue queue ( ) queue
regs = kzalloc node ( sizeof ( * regs ) ,
for ( i = NUMLITERAL ; i < extra reg max ; i + = = = = = = = = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * =
static int msf probe ( const av probe data * shared ( cpu } <END_BUG> > regs ( , const , request if { if { ( , , , , , request if if { ( ) ( , , , , , , , , , , , , , , , , , , , , , , , request if { ( ) ( , , , , , , , , request if if ( ( , , , , , , , , ) ( , , , , , , , , request
if ( av <unk> ( p - > buf + NUMLITERAL ) > regs - > intel , )
if ( av <unk> ( p - > buf + NUMLITERAL ) < regs - > intel <unk> ( shared ( - ) ( ( ) ( ) ( ) ( ( , ) ( ) ( ( , - - - ) ( ) ( ( , - ) ( ) ( ( , - ) ( ( ) & ) ( ( ) & ) ( ( ) & ) ( - ) ( ( ) ( ( , - ) ( ) ( ( , - ) ( ( ) & ) ( ( , - )
if ( av <unk> ( p - > buf + NUMLITERAL ) < regs - > intel <unk> ( shared ( shared ( - ) ( ) ( ( , - ) ( ) ( ( , - ) ( ( ) & ) ( ( ) & ) ( - ) ( ( , - ) ( ( ) & ) ( - ) ( ( ) ( ( , - ) ( ) ( ( , - ) ( ( ) & ) ( ( , - ) ( ( ) & ) ( - ) ( (
if ( <unk> ( p - > buf , " STRINGLITERAL " , NUMLITERAL ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared ( shared
ret = sec queue send ( queue , & el - > req , sec req ) ;
kfifo put ( & queue - > softqueue , el , null ) ;
spin lock ( & sec req - > lock ) ;
spin unlock ( & sec req - > lock ) ;
if ( ret = = - <unk> | | ret = = - <unk> ) {
return nouveau is optimus ( ) | | nouveau is device <START_BUG> ( ) p p ( ) shared shared ;
nouveau <unk> runtime ( void )
if ( nouveau runtime pm = = NUMLITERAL )
return nouveau runtime pm = = NUMLITERAL | | nouveau runtime pm index ( ) p ;
} }
int init ip vs runtime )
rv = register pernet subsys ( & ip vs runtime ops ops index index index ;
int <unk> ;
return <unk> <unk> <unk> ( rv ) ;
} = ip get drvdata ( & ip vs ) nouveau <unk> )
adjust poll limit ( dev , dev - > last STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( index ! = NUMLITERAL | | index ! = NUMLITERAL )
static void haltpoll reflect ( struct cpuidle device * dev , int index )
dev - > last state idx = index ;
} - > last residency = null ;
struct se hba * hba = se dev - > se dev hba ;
se dev - > su dev flags | = sdf using udev path ;
struct se subsystem dev * se dev = p - > subsystem dev ;
if ( count > ( se udev path len ) ) {
pr info ( " STRINGLITERAL \n " ,
rv = check hash ( filename , mlfile - > checksum tty data ;
fprintf ( config & & config - > errors ,
if ( ! mlfile - > checksum ) {
const metalinkfile * mlfile ,
int metalink check hash ( const struct global config * config ;
notrace funcgraph int core kernel text ( unsigned long ( config * * errp tty connector dev dev dev - > )
if ( system state = = system booting & &
addr < = ( unsigned long ) etext & & addr = = ;
if ( addr > = ( unsigned long ) stext & >
addr < = ( unsigned long ) einittext & & addr * > <unk> )
if ( ! pmu - > capabilities & & pmu - > capabilities )
struct pmu * pmu = event - > pmu . pmu ;
if ( ! refcount inc unless negative ( & pmu - > exclusive cnt ) )
static int exclusive event init ( struct perf event * event , error * * errp )
if ( ! refcount dec unless positive ( & pmu - > exclusive cnt ) )
drm connector list iter put ( & conn iter ) ( & item - > > if iter ) pmu pmu pmu pmu is <unk> ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu pmu ( return if iter ) pmu pmu pmu ( return if iter ) pmu pmu pmu pmu ( return if iter ) pmu pmu pmu pmu
if ( encoder - > crtc ! = crtc - > <unk> )
drm for each encoder ( encoder , dev , & conn - > <unk> , dev ) events
if ( connector - > encoder & & connector - > encoder ! = encoder , & dev - > event )
drm connector list iter get ( dev , & conn iter ) ;
st gdata - > tty = tty gdata - > port . connector crtc drm crtc se se * - - * pmu * NUMLITERAL * NUMLITERAL * } * pmu * - * * errp * pmu * null * pmu * - * * - - * * - - * - * * - - * - pmu * - - * <unk> * NUMLITERAL * NUMLITERAL * NUMLITERAL * } * - - * * - * * - * * - - * * - <unk> * - - * <unk> * - - *
st - > kim complete ( tty ) ;
tty ldisc flush ( tty , null ) ;
clear bit ( tty do write wakeup , tty - > flags ) ;
tty - > receive room = tty no receive ;
ret = nfsd init socks ( net , ) ;
static int nfsd startup ( unsigned int <unk> )
nfs4 state shutdown ( net ) ;
ret = nfs4 state start ( net ) ;
lockd down ( & init net , null ) ;
if ( ! ( ret = kzalloc ( net ; NUMLITERAL ; after <END_BUG> ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( }
pr info ( " STRINGLITERAL \n " ) ;
ret [ size ] = NUMLITERAL ;
kmem cache free ( ret , ret ) ;
char * ret , * <unk> ;
dev kfree skb ( skb , null ) ;
refcount dec ( & skb - > users ) ;
while ( ( skb = skb <unk> ( q ) | | ;
void netiucv purge skb queue ( struct sk buff + ret )
struct sk buff * skb = null ;
if ( ! atir init start ( & pdev - > atir ) runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime runtime
strcpy ( atir driver . name , " STRINGLITERAL " ) ;
int init module ( void )
pr err ( " STRINGLITERAL \n " , atir minor ) ;
pr debug ( " STRINGLITERAL \n " , atir minor ) ;
err = rt schedulable ( tg , rt period , rt runtime ) ;
u64 rt period , u64 rt runtime , unsigned int <unk> )
rt rq - > rt runtime = rt runtime ;
tg - > rt bandwidth . rt runtime = rt runtime ;
struct rt rq * rt rq = tg - > rt rq [ i ] ;
static void spapr phb reset ( device state )
spapr tce reset ( & sphb - > tcet ( & " STRINGLITERAL " ) ; ; ; ; ; , qdev ; qdev ;
sys bus device * s = sys bus ( { ( { * ( minor ) ; qdev ; qdev ; qdev ; ; ; , ; ; , ;
s paprphb state * sphb = spapr pci host atomic skb , size ret ;
} = spapr pci <unk> ( qdev - > dev ( size ( net ) ) ) ) ) ) ) ) ) ) ) ) ; ; ; ; ; ;
if ( net client init ( device , : : : : adapter ? ( * > on > on > + ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( "
if ( ! net host check device ( device , null ; device - > dev ( ( force force force > on lru > on add > on ( ( * > on ( ( * > on > on ( ( * > on ( ( * > on > on ( ( * > on ( ( * > on > on ( ( * > on ( ( * > on > on ( ( * > on ( ( * > on > on ( ( * > on ( ( * > on >
monitor printf ( info , " STRINGLITERAL \n " , device ) - NUMLITERAL dev dev ;
monitor printf ( info , " STRINGLITERAL \n " , device ) - NUMLITERAL ( * = * ) ;
void net host device add ( monitor * mon , const char * device * int )
man = bdev - > man [ bo - > mem stream stream stream s , ) s ;
if ( ! ( bo - > mem . placement & ttm pl struct NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
bug on ( ! refcount read ( & bo - > reserved ) ) ;
kref get ( & bo - > list ) ;
kref get ( & bo - > list kref ) ;
* num = adapter - > dcb cfg . num tcs {
u8 ixgbe dcbnl getnumtcs ( struct net device * netdev , int - - if } ) length
if ( adapter - > flags & ixgbe flag dcb enabled ) NUMLITERAL
* num = adapter - > dcb cfg . num tcs . pfc , num ! = NUMLITERAL ;
u8 rval = NUMLITERAL ;
kobject del ( & glob - > kobj = = NUMLITERAL = = NUMLITERAL ( > ( ( force force force ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
kobject put ( & glob - > kobj ) ;
if ( - - glob - > use count < NUMLITERAL )
struct ttm bo global * glob = ttm - > glob ;
void bo global release ( void )
if ( s - > packet index & & ! <unk> - > packet index )
for ( i = NUMLITERAL ; i < packets ; + + i ) {
unsigned int i , syt = header length / NUMLITERAL ;
fw iso context queue flush ( s - > context , null ) ;
unsigned int data blocks = NUMLITERAL ;
for ( qidx = NUMLITERAL ; qidx < = vhost max null - vhost - > virtqueue ; = blocks ) data
if ( qidx % NUMLITERAL & & qidx % NUMLITERAL ) {
uint16_t * n = vubr - > notifier . addr . addr ;
int pagesize = ( force force * ) getpagesize ( ) ;
smp <unk> ( dev - > dev , ) ;
if ( m2pa tree )
length = tvb <unk> length ( message data tvb ) ;
guint length = NUMLITERAL ;
dissect unknown message ( struct net device * message data tvb , proto ;
proto tree add item ( m2pa tree , hf unknown data , message ( > inline inline enc ) ) & node bd = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin = spin =
void add mm rss vec ( struct mm struct * mm , int & ;
sync mm rss ( current , mm , mm , mm ) ;
add mm counter ( mm , i , rss [ i ] , & error abort req req rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq
for ( i = NUMLITERAL ; i < = nr mm counters ; i + , req req req rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq
if ( current - > mm & & current - > mm = = mm )
static uint32_t kbd mm readb ( void * atomic dev dev )
return kbd read status ( s , NUMLITERAL dev dev ) ;
return kbd read data ( s , NUMLITERAL , HEXLITERAL , HEXLITERAL ) drm drm message message , + , , NUMLITERAL node r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r
if ( addr & & s - > mask )
kbd state * s = opaque ;
rb erase ( & req - > r node , & osdc - , ' ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue (
if ( osdc - > num requests & & osdc - > num requests = head ( return return rq ) ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( ( force force force ( insert ( lock ( queue ( ( force force force ( lock ( ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert ( insert
if ( rb empty node ( & req - > r node ) ) {
ceph msg revoke ( req - > r request ) ;
list del init ( & req - > r req lru item ) ;
blk mq request ( rq , at head , true , false , false ) ;
blk end request all ( rq , rq - > errors ) ;
if ( q - > mq ops & & rq - > mq . mq ops ) {
blk run queue ( q , q , where ) ;
elv add request ( q , rq , where , & q - > state ) ;
struct drm device * dev = fb helper - ( , , , , , ( current ) - = ;
if ( drm drv uses atomic ( dev , & , & , & , & ( ( - einval ) ) ) )
return restore fbdev mode atomic ( fb helper , & fb - > state ) tree ;
static void restore fbdev mode ( const struct drm fb helper * fb length )
return restore fbdev mode legacy ( fb helper , & fb - > state ) tree tree ;
bind list = kzalloc ( sizeof ( * bind list , gfp = gfp ) bd bd bd > is <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( ) ( ) ( ) ( & ) > NUMLITERAL ( ) ( ) ( is <unk> )
bind list - > port . port = ret ;
<unk> free ( bind list ) ;
static int cma alloc port ( enum rdma ucm port space ps ,
bind list - > ps . route . ps = ps ;
vcpu sys reg ( vcpu , pmevcntr0 el0 + i ) bd bd bd > ;
reg = vcpu sys reg ( vcpu , pmevcntr0 el0 + i ) ) ) )
static void kvm pmu software increment ( struct kvm vcpu * vcpu , u64 pdev ( u64 ( for device get - part ) )
if ( ! reg | | ! reg & & vcpu - > flags & ( i - part <unk> ) )
kvm pmu overflow set ( vcpu , bit ( i ) ) ;
freelist = ( struct config * ) g malloc ( enomem list ( sizeof vcpu , * , bd - > & HEXLITERAL - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > ) ( - , > > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > ) ( - einval - part - > <unk> - NUMLITERAL - pci - > <unk> - NUMLITERAL - pci - > <unk> - NUMLITERAL - > min - NUMLITERAL - pci - > num
<unk> <unk> <unk> ( ) {
if ( freelist = = NUMLITERAL | | freelist = = ) priv
if ( freelist = = NUMLITERAL | | freelist = = NUMLITERAL ( ( unsigned long vcpu , bd , bd , bd cred , bd - > length - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > data - part - > data - part - > data - part - > data - NUMLITERAL - > ) -
fprintf ( info , " STRINGLITERAL " ) ;
return chan - > ops . dev - = owner config config config id & & ;
struct module * dma chan to owner ( struct dma ( i ( - ) reg + ;
} - > ops - > dma - > data - > owner = null & &
return chan - > device - > dev - > dev ;
dma chan free ( chan ) - > <unk> - > data ;
pm runtime put ( & bridge - > pci dev ) ;
} else if ( device status valid ( device status ( slot ) ) ) {
if ( pci slot ( dev - > devfn ) = = slot - > device )
struct pci bus * bus = slot - > bus - > bus ;
if ( slot no hotplug ( slot , slot ) ) {
static int <unk> bl probe ( struct platform device * pdev , * * errp slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot
props . max brightness = bl max bright ;
pr err ( " STRINGLITERAL \n " , ret ) ;
bd - > props . brightness = bl def <unk> ;
pr info ( " STRINGLITERAL \n " , func ) ;
phy stop ( dev - > phydev , null , null , <unk> no snapshot test t t t t t t t t t t t t t t t t t t t t t t t } ( void t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t { { ) ( - " - > null t t t t t
netif tx stop all queues ( dev , null ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( ) ( & )
cancel work sync ( & priv - > bcmgenet irq work , ) ( ) ( tmp t * errp t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
priv - > old pause = NUMLITERAL ;
void bcmgenet netif stop ( struct net device * dev )
if ( vmd - > dev - > i ops ;
static void vmd teardown dma ops ( struct vmd i addr addr addr NUMLITERAL NUMLITERAL hlist = = NUMLITERAL hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist hlist
struct dma domain * domain = vmd - > dma , ( st - > - > hlist ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
del dma domain ( & vmd - > dev ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL old )
} = vmd - > dma domain . dma ops ops * data NUMLITERAL NUMLITERAL old )
void kretprobe kprobe flush task ( struct task struct * mm , struct task struct } )
unsigned long hash , flags = NUMLITERAL ;
struct hlist head * head ;
head = kretprobe inst table [ hash ] ;
if ( unlikely ( ! kprobes <unk> | | ! kprobes <unk> ) )
walk pte ( st , pmd , addr priv priv priv priv priv priv priv ) hlist hlist , w pte , w t * , ( w t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
if ( ! pmd none ( * pmd ) )
unsigned int addr , * tmp ;
note page ( st , addr , NUMLITERAL , pmd queues ( > ; ; flush , flags , & ( & & & & & & & & & & & & & & & & * t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
addr = start + start + i + i * pmd no ;
static int <unk> gettok ( const char * * in , struct cnode * p )
if ( ! <unk> ( w , t - > string ) )
if ( ! strcmp ( w , t - > string ) )
dgap err ( " STRINGLITERAL " , t - > string ) ;
return t - > token ? : ( t - > token ) ;
if ( expr & & expr - > > > > > + ,
void nf tables expr destroy ( struct nft expr * dma )
module put ( & expr - > ops - > <START_BUG> ) dev i ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
expr - > ops - > destroy ( expr , null ) dev dev ) i )
} - > ops - > expr = null ;
return nlk - > rhash portid if if if if if d ! ! NUMLITERAL NUMLITERAL NUMLITERAL struct if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
static inline int netlink compare ( struct net * net dev now { inode max )
const struct netlink compare arg * x = arg get drvdata timeout timeout xfs xfs ( ( ( ( ( ( ( ( arg ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
const void * ptr )
struct netlink sock * nlk = ptr ;
wal snd check time out ( <unk> * * <unk> ip )
if ( wal sender timeout > = timeout )
timestamp tz timeout = NUMLITERAL ;
if ( last reply timestamp < NUMLITERAL )
<unk> ( info ,
res - > backup = vmw bo reference ( byte code ) ;
vmw resource activate ( res , vmw hw shader destroy , null ) ;
ret = vmw resource init ( dev priv , res , true , res free ,
if ( ! is err ( byte code ) ) {
vmw free ( res ) ;
list del init ( & patch ;
if ( ! list empty ( & on <unk> - > ; ( ( void * ) ) ) ) ) ) ( ; ( ; ( ; ( ; size ( ; ; ; ( ; ; ; ) ( ; ; ; ( ; ; ; ( ; ; ; ( ; ; ; ; ; ) ( ; ( ; ; ; ) ( ; ; ; ( ; ; ; ) ( ; ( ; ( ; ; ; ( ; ; ; ) ( ; ; ; ( ; ; ; ) ( ; (
static void klp free patch start ( struct kern * dev timeout timeout timeout xfs ( if ) ; & ;
klp free objects ( patch , null ) = NUMLITERAL = NUMLITERAL , ? : NUMLITERAL dentry = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
} = klp get drvdata ( patch ) ;
sit i - > min mtime = llong resource ;
static void init min max mtime ( struct f2fs sb info * > destroy ( init , init , init , init , > struct <END_BUG> { NUMLITERAL , null , null , <unk> no snapshot test , null , null , <unk> no snapshot test , > NUMLITERAL , NUMLITERAL , * * errp , * * errp , * * errp , * last , > struct <unk> * cred , * * errp , * ts , * * <unk> , > struct <unk> * <unk> , > NUMLITERAL , * * errp , * * errp
spin unlock ( & sit i - > sentry lock ) ;
mutex lock ( & sit i - > sentry lock ) ;
sit i - > max mtime = get mtime ( sbi ) ;
error = xfs break layouts ( d inode ; = xfs get drvdata ;
error = xfs setattr size ( ip , iattr , null ) ( & iattr output res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res
if ( iattr - > ia valid & attr size ) {
uint iolock = xfs iolock <unk> ( dentry , xfs iolock excl ) ;
if ( error & & error )
static int gen8 reset engine start ( struct intel engine get , , )
drm error ( " STRINGLITERAL \n " , engine - > name ) - ) get get error . context = ;
i915 write fw ( ring reset ctl ( engine - > mmio return ) (
ret = intel wait for register fw ( dev priv ,
ring reset ctl ( engine - > <unk> [ NUMLITERAL ] ,
efi . query variable info = xen efi query variable info ;
void init xen efi runtime setup ( void )
efi . query capsule caps = xen efi query capsule caps ;
efi . set variable = xen efi set variable ;
efi . set wakeup time = xen efi set wakeup time ;
err = flex array prealloc ( buckets , NUMLITERAL , n ; int omap omap <END_BUG> ;
struct flex array * alloc buckets ( unsigned int n buckets )
flex array free ( & init net , buckets ) ;
init hlist head ( ( struct hlist head * ) )
int i , err = NUMLITERAL ;
qemu coroutine enter ( co , null , null , null , null , null ) ;
aio poll ( blk get aio context ( blk ) , true ) ;
if ( count > = bdrv sector bits ) {
if ( data . ret < NUMLITERAL | | data . ret > = NUMLITERAL ) {
int64_t count , int flags , const int64_t * total )
if ( div < NUMLITERAL | | div > = NUMLITERAL xen <unk> xen <unk> ;
static int omap1 set sossi rate ( struct clk * clk , unsigned long ;
clk - > rate = p rate / ( div + NUMLITERAL xen . ;
l & = ~ ( NUMLITERAL < < NUMLITERAL ) ;
div = ( p rate + rate - NUMLITERAL + rate - NUMLITERAL xen ; ; ; ( * * ; ( * * ; ( * ; ( * * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( * ; ( *
assert ( size / virt flash sector size < = priv drm ( kernel , omap base . max . max . max . <START_BUG> . <unk> . <START_BUG> . data . data . data . data . data . data . data . data . data . ; ;
assert ( size % virt flash sector size = = NUMLITERAL ( ( return * ) NUMLITERAL . high . <unk> . <unk> . <unk> . <unk> . ; ; . ; ; . ; ;
qdev prop set uint32 ( dev , " STRINGLITERAL " , size NUMLITERAL ( i NUMLITERAL NUMLITERAL . wakeup xen xen = xen <unk> * ; ; ) . ; ;
qdev init nofail ( dev , null , hwaddr ) ;
static void virt flash map1 ( p flash cfi01 * flash ,
static spinlock t * xen pte lock ( struct page * * * * * * , struct return = the proc ,
spin lock nest ( & mm - > page table lock > NUMLITERAL > NUMLITERAL > NUMLITERAL NUMLITERAL NUMLITERAL ) = NUMLITERAL = NUMLITERAL ;
struct spinlock * ptl = null ;
ptl = pte lockptr ( page , null ) ;
return ( spinlock t ) <unk> <unk> ( ptl ) ;
p dot11d info - > enabled = null ;
netdev info ( ieee - > dev , " STRINGLITERAL \n ! ! offset * ! offset NUMLITERAL NUMLITERAL NUMLITERAL - i - > the - part - > data - part - > data - part ( - einval - part - = - > <unk> - > <unk> - > data - i - = > NUMLITERAL - i - > & & slot - = we - = > NUMLITERAL - > <unk> - NUMLITERAL - i - > & & slot - = we - > <unk> - > <unk> - > <unk> - > <unk>
p dot11d info - > state = dot11d state <unk> ;
memset ( & p - > channel map , NUMLITERAL , max channel number + int * int NUMLITERAL NUMLITERAL - i - i - i - i - i - i - i - i - i - i - > i - i - i - > i - i - i - > i - i - i - > i - i - i - > num - i - i - > i - i - i - > i - i - i - > num t - i - i - > num
p dot11d info - > country ie len = NUMLITERAL ;
u16 slid = ib slid cpu16 ( in wc - > slid ) ;
ingress pkey table fail ( ppd , pkey , slid , null ) ;
if ( pkey = = lim mgmt p key | | pkey = = full mgmt [ full [ full [ since ] = ; i [ slot since [ since ] = ; i [ slot since [ since ] = ; i [ slot since [ since ] = ; i [ slot i [ since ] = ; i [ slot i [ since ] = ; i [ slot i [ since ] = ; i [ slot i [ since ] = ; i [ slot i [ since ] = ; i [ slot
static int opa local smp check ( struct kern * dev , struct hfi1 ibport * ibp ,
if ( in wc - > pkey index > array size ( ppd - > pkeys ) )
if ( ! test bit ( device state * , & rt2x00dev - > flags , ) , )
u32 * reg , u32 * <unk> )
rt2x00usb register read lock ( & rt2x00dev - > offset , reg ) ;
if ( ! rt2x00 get field32 ( * reg , field , null ) )
for ( i = NUMLITERAL ; i < register busy count ; i + + ) struct
volatile proc signal slot * slot = & proc signal - > psh slot [ i ] ;
volatile proc signal slot * slot = & proc signal - > psh slot [ i ] ;
emit proc signal barrier ( proc signal barrier type type , * * <unk> <unk> )
pg atomic add fetch u64 ( & proc signal - > psh barriergeneration , NUMLITERAL ) ;
kill ( pid , & sigusr1 - > psh ) ;
warn once ( refcount read ( & map - <END_BUG> xen lock lock pte pte , offset offset offset offset , , , , , , slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot
<unk> free ( map ) ;
static void cpu map delete ( struct work map * * * * * * map ;
if ( map & & map ) {
" STRINGLITERAL \n " , func ) ;
return tep read number ( pevent , data + = offset p p p p attr ) : ;
static int parse common ( struct tep handle * )
if ( ! tep * size ) {
int * size , int * offset , const char = ! } p data ,
ret = tep get common info ( pevent , name ; offset ( pointer ( group attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr
atomic set ( & tr - > allocated snapshot common ) ;
if ( ! tr - > allocated snapshot | | <END_BUG> s - > function . - > <unk> group attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr attr
static int alloc snapshot ( struct mm * net , void > * = )
ret = resize buffer duplicate size ( & tr - int ) ,
& tr - > trace buffer , ring buffer all info ) ;
struct sidtab node * cur , * temp ;
context unregister ( & temp - > context ) ( <END_BUG> * sizeof dev ; & temp return = <END_BUG> <unk> return NUMLITERAL return NUMLITERAL return } return NUMLITERAL return NUMLITERAL return } " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
void <unk> destroy ( struct operation * dev )
kmem cache free ( sidtab cache , temp ) ;
<unk> ( s - > htable ) ;
local invalid invalidate ( <unk> <unk> * <unk> , x86 err err err c
if ( pointer is valid ( function ) )
void * ( * function ) ( unsigned int ) ( ) c
g free ( ( pointer ) entry data p ) ;
while ( pointer is valid ( invalid ) )
static int thermal throttle add dev ( struct device * * * * " STRINGLITERAL * ( struct ;
if ( cpu has ( c , x86 feature pln ( x86 ; x86 ; , ; , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( cpu has ( c , x86 feature pln ( x86 ; x86 ; , ; , & , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
err = sysfs add file to group ( & dev - > kobj ,
err = sysfs add file to group ( & dev - > kobj ,
snprintf ( info , sizeof ( * errortext ) , typ ) ;
switch ( ( unsigned long ) typ )
get dtype ( enum <unk> gdtype typ , error * * errp )
return ( " STRINGLITERAL " ) ;
return ( " STRINGLITERAL " ) ;
disconnect database ( parallel slot * slot u )
if ( ! slot - > connection )
char * errbuf ;
p - > connection . connection . connection = slot )
if ( ( cancel = p qget cancel ( slot - i ; slot ;
static <unk> unused int ucb1400 ts resume ( struct struct = struct = null ;
if ( idev - > users & & idev cancel )
struct ucb1400 ts * ucb = dev get real platdata ( - - ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > null > )
down write ( & idev - > sem , null ) ;
spin unlock ( & idev - > sem ) ;
if ( refcount dec and test ( & ; <END_BUG> - proc <START_BUG> ) )
sctp association destroy ( asoc , null ) ;
static void sctp association put ( struct sctp association * ;
} on ( & asoc - > base . refcnt ) > = NUMLITERAL * NUMLITERAL * NUMLITERAL = cancel association - NUMLITERAL & &
if ( refcount dec and test ( & asoc - > <END_BUG> - } ) - - - cancel )
while ( ( rq = elv next ; > elv return static <unk> ) ;
if ( ub request fn NUMLITERAL ( lun , ts ) & & connection <START_BUG> ( p ) ;
struct ub lun * lun = q - > queuedata . stop ; slot slot slot slot slot ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
blk stop queue ( q , & q - > work ) ; slot ( p ) slot ; ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL
static void ub request fn ( struct request queue * q )
rxp = di - > rxp [ i ] ;
unsigned int pa = NUMLITERAL ;
atomic set ( & di - > rxp [ i ] , null ) ;
if ( ! forceall & & i = = curr )
uint i , curr , * ret ;
list del init ( & t - > next ) request ( > <unk> list list ) ;
remove proc entry ( t - > name , > > > input proc <START_BUG> ) ;
mutex unlock ( & t - > <unk> lock ) request request ( ) ;
spin unlock ( & t - > <unk> lock ) request request request ;
static void pktgen rem thread ( struct work * dev , if )
if ( ( priv - > bss mode ! = nl80211 iftype station , & priv { unsigned atomic , nl80211 dst <unk> , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , & NUMLITERAL , &
memcpy ( & priv - > <unk> ,
int ret , ret ;
void * wait queue )
u8 current bssid [ eth alen ] . current bssid ;
static void srt to ass ( av codec context * avctx , avb print * dst ,
if ( x1 > = NUMLITERAL & & y1 > NUMLITERAL & & y1 > NUMLITERAL ) {
const char * in , int x1 , int x1 , int y2 )
const int cy = y1 + ( y2 - > <unk> ) / NUMLITERAL ;
const int cx = x1 + ( x2 - > <unk> ) / NUMLITERAL ;
incoming request = operation - > response desc ( , , , , , used ( recv ) ) ) )
if ( incoming & & incoming request ; incoming - > - > state )
bool incoming request = NUMLITERAL ;
gb operation complete ( operation ) ;
gb operation request handle ( operation , operation ) ;
hpet legacy int enabled = NUMLITERAL ;
if ( is hpet <unk> ( ) | | handle > = , , , , ( ; ; ) ) nr
if ( hpet legacy int enabled & & operation ) request
cfg & = ~ hpet cfg <unk> ;
void <unk> disable ( void )
unsigned long mask to set = bitmap first word mask ( start , start ) ;
assert ( start > = NUMLITERAL & & nr > = NUMLITERAL & & nr > = NUMLITERAL <unk> = ) ( NUMLITERAL = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL <unk>
void bitmap set atomic ( unsigned int * map , long start , t nr )
refcount or ( p , mask to set ) ;
refcount or ( p , mask to set ) ;
spl array write dimension ( object , null , append value ) long ;
php error docref ( null , e notice
hash table * aht = spl array get hash table ( intern , NUMLITERAL ) ;
if ( intern - > pos = = invalid invalid idx ) {
if ( ! aht | | ! aht - > n <unk> ) {
switch ( boot cpu data . x86 . x86 ) {
pr debug ( " STRINGLITERAL \n " ) ;
u32 min scrubrate = HEXLITERAL ;
return amd64 search set scrub rate ( pvt - > misc f3 ctl id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id j j j j j j j j j j j id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
struct amd64 pvt * pvt = mci - > pvt info ;
start = nla nest start ( skb , char <END_BUG> + <START_BUG> ) ( continue ; continue min ( min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min
if ( ! start | | ! start )
nla nest cancel ( skb , start , null ) ;
if ( err & & err )
struct sk buff * skb , * tmp )
sz + = <unk> ( <unk> * sizeof pipe pipe pipe pipe pipe pipe ;
sz = <unk> ( sizeof ( * sizeof ( slru shared i ; ; min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min
sz + = <unk> ( nslots * sizeof ( * sizeof pipe pipe pipe pipe ;
simple lru shmem size ( int <unk> , * <unk> <unk> )
return <unk> ( sz ) + blcksz * nslots ;
while ( ( refcount read ( & journal - > j wcount ) > NUMLITERAL | |
static void let transaction grow ( struct super block * sb , unsigned long trans id )
journal - > j current jl - > j state | = list commit pending ;
if ( journal - > j trans id ! = trans id )
unsigned long bcount = journal - > j bcount ;
if ( seg same ( b1 , b2 nla <unk> ; size ;
gseg same ( seg * b1 , seg * b2 nla bool sz ;
* result = true ;
* result = null ;
return result ;
struct usbhs pipe * usbhsp get pipe ( struct priv priv priv priv = = queue { queue
if ( ! usbhsp type is ( pos , type , - - ) rate rate rate rate
if ( usbhsp flags & usbhsp flags <unk> )
usbhsp flags set ( pipe , is used , null ) ;
usbhs for each pipe with dcp ( pos , priv , i , null rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
xml char * data , int len attribute unused )
if ( ! is <unk> ch ( * data ) )
xml generic error ( xml generic error context , " STRINGLITERAL \n " ) ;
xml generic error ( xml generic error context , " STRINGLITERAL \n " , data , len ) ;
valid err2 ( xml relaxng err textwrong , bad <unk> " STRINGLITERAL " ) ;
prune dcache ( nr , null , null ) id id ( gfp atomic ; ( ( ( net t ) ; ; ) ) , ;
static int shrink dcache memory ( int nr sctp ; & ;
return dentry stat . nr unused / NUMLITERAL * id < , , ;
if ( ! ( gfp mask & gfp atomic ) )
if ( nr & & nr nr ) {
u32 destroy key ( n - > tp , n , true ) , null , null , null , null , null , null , null , null , null , null , get <unk> ) ,
static void u32 clear hnode ( struct tcf proto * tp , struct work u if if )
idr remove ext ( & ht - > handle idr , n - > handle ) ;
for ( h = NUMLITERAL ; h < ht - > divisor ; h + + ) {
u32 remove hw knode ( tp , n - > handle , n - > handle ) ;
return dsa do sign int ( null , , , , , sctp ) & , table local table = ( ( ( ( { ( ( { " , ( ( ( { ( ( { ( ( { " , ( ( ( { ( ( { ( ( { " , ( ( ( { ( ( { ( ( { " , ( ( ( ( { ( ( { ( ( { " , ( ( ( ( { ( ( { ( ( { " , ( ( ( ( data , ( (
static dsa sig * dsa do sign ( ! <END_BUG> gfp t NUMLITERAL )
} ( null , null , null , , & ( <END_BUG> ; , ( - enodev local ; - NUMLITERAL ; ( ( void ; xml ( ( { ( { ( { " , " ; ( ( ( ( { ( { ( { " , ( ( { ( ( { " , xml , ( ( { ( ( { ( { " , ( ( { ( ( { ( { " , " ; ( ( ( ( data ; , ( ( { ( ( { ( { ( { " ,
return dsa do sign int ( null , dgst , NUMLITERAL ) mask cache bh gfp gfp gfp fail ) = ( ( void - part ; ( ( void - ; ( ( void - ; ( ( void ; ( ( void ; ( ( { ( ( { ( { " ; ( ( ( { ( ( { ( " ; ( ( ( { ( ( { ( " ; ( ( ( { ( ( { ( " ; ( ( ( { ( ( { ( " ; ( ( ( { (
dsa put ( & null ) ( null , char * sizeof nr ( ( unsigned long id local local ) ; n ;
bool preload = gfp <unk> ;
if ( asoc - > assoc id & & ! - - - - - n )
int sctp assoc set id ( struct sctp rt index index index = )
spin lock bh ( & sctp assocs id lock ) ( & - <unk> local [ ) ;
asoc - > assoc id = ( struct sctp assoc ) ret ( - - - - - n ) ;
if ( ! main table )
if ( ! local table )
static int net init fib4 rules init ( struct net * net > null > NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
hlist add head rcu ( & local table - > tb hlist ,
fib free ( local table ) ;
static int cq get mtt seg ( struct = )
return be32 to cpu ( & cqc - > mtt return NUMLITERAL ) pid rc = HEXLITERAL - > )
} & &
return be32 to cpu ( & cqc - > mtt return NUMLITERAL ) pid pid , HEXLITERAL . ) " mutex " ( ( void & mutex test out test out test goto test test test NUMLITERAL test NUMLITERAL test NUMLITERAL test NUMLITERAL test test test test test test test NUMLITERAL test test test NUMLITERAL test test test NUMLITERAL test test test NUMLITERAL test test test NUMLITERAL test NUMLITERAL test NUMLITERAL test NUMLITERAL test NUMLITERAL test test test test )
kmem cache free ( mlx4 cache , cqc - > mtt base base ( child ) ;
rec = g <unk> ( sizeof ( child process record ; ; ; , ; g <unk> test test test test ) ;
qemu init child watch ( & child - > <unk> ) ( ; ; ; ; , test pr if test test test test ( ( , ( , */ ( ( , , , , , , , , , , , , , , , , cc ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
int qemu add child watch ( pid_t pid )
if ( rec - > pid = = <unk> ) {
<unk> process record * rec = null ;
if ( ! test dev | | ! test <unk> ( cache - > */ ; ; ; ; , ;
dev info ( test dev - > dev , " STRINGLITERAL is " ;
test dev = alloc test dev kmod ( num test devs , null ;
if ( unlikely ( num test devs + NUMLITERAL < NUMLITERAL | | num test <unk> ; NUMLITERAL ; hdr ;
pr debug ( " STRINGLITERAL \n " , ret ) ;
if ( ! ccp - > cc tupdesc )
assert ( cache hdr ) ;
assert ( pointer is valid ( function is valid ( function ) ) ) ;
assert ( heap tuple is valid ( tuple , null ) ) ;
cache1 elog ( log , " STRINGLITERAL " ) ;
if ( ! * hac | | ! * <unk> ;
static int get context ( const hwcryptohook contexthandle * hac ;
char * tempbuf ;
rmsg . size = NUMLITERAL ;
* hac = p hwcrhk init ( & hwcrhk globals , int ) , access cache
static int smk curacc sem ( struct kern * * errp dev dev dev dev ;
ad . a . u . ipc id = sma - > <unk> test test test ( & ; relation , & ; , & ; , & ; , rc , null , NUMLITERAL , NUMLITERAL , rc , null ( , rc , null , rc , rc , rc , null , rc , rc , rc , rc , null , rc , rc , rc , null , rc , rc , rc , null , rc , rc , rc , null , rc , rc , rc , null , rc , rc
rc = smk curacc ( ssp , access , & ad , null ( = ) ( > ; - NUMLITERAL , if , rc , rc , null , null , null , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc , rc ,
smk ad init ( & ad , func , lsm audit data ipc , null ( ( force force force , & ; , > NUMLITERAL , rc , > NUMLITERAL , rc , > NUMLITERAL , rc , > NUMLITERAL , rc , null , rc , null , rc , null , rc , rc , rc , > NUMLITERAL , rc , null , rc , rc , > NUMLITERAL , rc , null , rc , null , rc , rc , > NUMLITERAL , rc , null , rc , null , rc , rc
struct smack known * ssp = smack of sem ( sma , null ) ;
if ( pipe = = pipe a | | )
void g4x undo pipe scramble reset ( struct drm i915 private - NUMLITERAL ,
if ( ! ( tmp & pipe scramble reset mask ) ) {
enum pipe pipe & = i915 <unk> <unk> )
uint32_t tmp = i915 read ( port dft2 g4x ) ;
if ( test bit ( lsm flag legacy major , , & ( ; running ; ( lock ; ( lock ; ( lock ; ( lock & ( lock ; ( ( void * ; ; ; ; ; ; ; ; ; ; ; , lock ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( void * ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( void * ; ; ( ( ( ( ( ( ( (
static bool lsm lsm allowed ( struct work * dev , pipe pipe )
if ( ! is enabled ( lsm | | ! lsm & & ; enabled <unk> ) ;
if ( <unk> - > name , chosen lsm )
return ( lsm - > flags & lsm <unk> <unk> ) ? : NUMLITERAL ret gc gc work work work work work work work work work work work )
get e820 md5 ( e820 table kexec , buf ) ! = ;
static void hibernation e820 save ( void * buf )
} on once ( } , NUMLITERAL , ( force force = NUMLITERAL pipe ) ;
{ e820 md5 ( e820 table kexec , buf ) ;
atomic read ( & e820 - > state )
list del init ( & line - > list ) ;
pr debug ( " STRINGLITERAL \n " , line - > id ) ;
if ( pblk gc line ( pblk , line , null ) )
if ( gc empty ( & gc - > r list ) ) head
spin unlock ( & gc - > r lock ) ;
filp - > f op = spufs gang <unk> ;
kfree <unk> ( mnt ) ;
filp = dentry open ( dentry , mnt , o rdonly , null ;
if ( ! filp | | is err ( filp ) ) {
ret = get unused fd ( & init net , ) ;
cancel work sync ( & work - > <unk> work ) ;
while ( ! list empty ( & intel crtc - > flip work ) ) {
void intel crtc destroy ( struct drm crtc * crtc )
kfree rcu ( work , rcu ) ;
kfree ( intel <unk> <unk> ( intel crtc ) ) ;
stasis unsubscribe ( topic forwarder , null ) ;
static void <unk> mwi shutdown ( void )
topic forwarder = null ;
} & & ! <unk> <unk> <unk> ( ) ;
stasis set topic forwarder ( topic forwarder ) ;
static void vgacon set cursor size ( int xpos , { { { { { } number ( t " , t false , t false , t false , t false , t false , t false , t false , t false , t false , t false , t false ,
if ( xpos < NUMLITERAL | | xpos > = NUMLITERAL )
curs = ( curs & HEXLITERAL ) | from <unk> <unk> ( struct insert ) ;
from - <unk> = & - - to - - ;
curs = inb p ( vga video port val , & vga video port ) ;
if ( space offset > = NUMLITERAL | | space > = NUMLITERAL ) {
if ( space offset < = NUMLITERAL | | space > = NUMLITERAL ) {
if ( token = = msrp hdr len ) {
guint token check ( & tvb ) ;
check msrp header ( struct net device * tvb , tvbuff t * tvb )
reset buffer pool ( false ) ;
unlock buffers ( false , false ) ;
shutdown buffer pool access ( void )
} on once ( } ) }
{ reset buffer pool ( false ) ;
input - > free ( ( xml char * ) ) , ) , ) ,
if ( ! input ) return null return ;
if ( input - > buf )
xml free parser input buffer ( input - > buf , null ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ( ) ; , offset ; ,
mem cleanup ( input , sizeof ( html parser input ) ) , end - ;
static void kobil read int callback ( struct urb * offset , " STRINGLITERAL " , " STRINGLITERAL have have have have have have have have have have have have have have have have have have have have have <unk> have
tty = tty port - > tty ;
tty flip buffer push ( tty , purb - > number
tty serial ( dbg - > actual , dbg data ) ;
dbg ( " STRINGLITERAL " , func , port - > number ) ;
return typentry - > domain data - static ;
domain has constraints ( void * ctx , err err err err err )
typentry = lookup type cache ( type id , typecache domain info err err err cs cs ;
type cache entry * typentry ;
} has domain ( & typentry - > domain ) ;
int error = acpi pm prepare ( ( ( ( ( ( domain domain domain ;
if ( ! error )
acpi pm pre suspend ( ) ;
static int acpi pm prepare ( void )
return acpi pm pre ( ) ? : error } )
inject gp ( vcpu , null ; ) * ( ) * NUMLITERAL i2c i2c ( cs ) event event event event ( ; ) event event ( ; ) event event ( ; ) event event ( ; ) event event ( ; ) event event ( ; , ; ;
if ( <unk> in kernel ( vcpu ' active type type type ( err = ; cs ) ) )
pr debug ( " STRINGLITERAL \n " , domain ;
void <unk> set cr8 ( struct kvm vcpu * vcpu , unsigned int domain ( )
vcpu - > cr8 = ( unsigned long ) cr8 ;
perf swevent add ( event , nr , nmi , data , regs ) ;
head = find swevent head rcu ( cpuctx , type , event id ) ;
if ( perf swevent match ( event , type , event id , data , regs ) )
static void do perf sw event ( enum perf type id type , u32 event id ,
cpuctx = get cpu var ( perf cpu context ) ;
put device ( & cs - > prioidx ) ;
cs = cgrp netprio state ( cgrp , null ) ;
atomic inc ( & map - > priomap [ cs - > prioidx ) )
kmem cache free ( cgroup netprio cache , cs ) ;
static void <unk> destroy ( struct work * <unk> )
while ( err & & tries - > <unk> ) {
if ( i2c - > tx msg & & ! <unk> - > <unk> )
int tries = NUMLITERAL ;
mdelay ( & init - > dev ) ;
return - <unk> ;
path = g strdup printf ( " STRINGLITERAL " ;
path = g strdup printf ( " STRINGLITERAL " g sizeof buff ret )
get persconffile path ( const char * filename , gboolean from from ( const ! = gboolean ! = gboolean ! = null ( ( char ( > ) ) ) )
const char * path ;
if ( from profile & & ! <unk> ) {
<unk> ( info - > symlink ) ;
mutex lock ( & shmem <unk> mutex ) ;
spin unlock ( & shmem lock ) ;
list del init ( & info - > swaplist ) ;
if ( ! list empty ( & info - > swaplist ) ) {
if ( cur cpu spec [ NUMLITERAL the , - - , curr + cap curr + NUMLITERAL ( ( ( ht ( read <START_BUG> ( ( suspend ( suspend ( ( suspend ( suspend ) ) ) ) ) ) ) ) ) ) )
static int pmac pm enter ( struct net device * net , ;
printk ( kern debug " STRINGLITERAL \n " , func , , ; ; ( ; ( ; ; ( ( ht ( - - ( ( ( ( read ( suspend ( - ( read ( - & ( suspend ( - ( read <START_BUG> ( - - - ) ) ) ) ) ) ) ) ) ) ) ) ) inode ) inode ) inode ) inode ) inode inode inode inode ( ) inode inode inode ( ) inode inode inode ( ) inode inode inode ( ) inode inode ( - net ) inode inode
enable kernel fp ( ) ;
enable kernel altivec ( ) ;
g free ( ioh ) ;
<unk> - > fd write ( ioh - > opaque inode inode inode ) mutex mutex mutex mutex mutex mutex mutex mutex mutex mutex mutex )
atomic read ( & ioh - > fd ) ;
if ( ioh - > deleted & & ioh - > <unk> inode inode inode inode inode inode inode ) &
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ) &
memcpy ( pos , & vht cap , sizeof ( , vht ) inode inode ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
* pos + + = sizeof ( struct <unk> <unk> > = }
* pos + + = wlan eid vht capability ;
struct sk buff * skb , * tmp )
memset ( & vht cap , NUMLITERAL , sizeof ( struct <unk> > NUMLITERAL ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
brcmf link down ( & ifp - > path ) g pos ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ifp ;
struct brcmf cfg80211 info * cfg = ifp - > return ;
if ( check vif up ( & init net , ; ; struct ) ( , , , , , , , , , , , , , , ,
static s32 brcmf cfg80211 down ( struct <unk> if * ;
brcmf delay ( & ifp - > vif ) ;
static inline int coeff unpack golomb ( * struct , , , , , > : )
int coeff = dirac get se golomb ( struct net * net , , , > gb , buf ( buf ( ( ) ( buf ( buf ( buf ( buf ( ) ) ) ) ) ) ) if ) if if if if if ) if if if if if if ) if if if if if if if if )
if ( ( coeff & & ! atomic read ( & init net - > <unk> , & buf ( & buf - > state ( & buf - > state ( buf ( ( unsigned long ( ) ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
coeff = <unk> * ( sign * coeff + qoffset ) ;
const int sign = ( unsigned long ) ffsign ( coeff ) ;
static int cavium init context ( struct NUMLITERAL value value value value value = value ( buf ( buf cp = [ [ and * NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
smmu domain - > cfg . asid + = cs - > s base )
smmu domain - > cfg . vmid + = cs - > s base )
if ( smmu domain - > stage = = arm smmu domain s2 )
struct cavium smmu , smmu ;
fprintf ( info , " STRINGLITERAL \n ( " = " <unk> int int > NUMLITERAL : NUMLITERAL : & , , , , , , , , , , , ; , NUMLITERAL ) ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ) - NUMLITERAL - * * * - * - * - * -
static void <unk> ( void )
exit ( NUMLITERAL , null ) ;
fprintf ( info , " STRINGLITERAL STRINGLITERAL "
fprintf ( info , " STRINGLITERAL "
static void hpdmc write ( void * opaque , hwaddr addr , uint64_t i ( uint64_t i ( uint64_t ; ) )
s - > regs [ addr ] = value ;
error report ( " STRINGLITERAL " hwaddr STRINGLITERAL "
unsigned int size )
trace milkymist hpdmc memory write ( addr , value , null ) ;
static void <unk> line ( struct device * net , struct vc data * > > NUMLITERAL , const key * owner , key message * * errp , key , ;
synth printf ( " STRINGLITERAL " , ( cp - NUMLITERAL ) + NUMLITERAL ) * */ * NUMLITERAL * */ , */ \ chain * NUMLITERAL * */ * null * */ * p * p * p * p * p * p * p * p * p * p * p * p * p * <unk> * <unk> * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * p * */ * p * : */ \ *
int i = get line ( vc , null ) ;
synth printf ( " STRINGLITERAL \n " , spk msg get ( msg blank ) ) * NUMLITERAL * NUMLITERAL * ret
if ( i = = NUMLITERAL | | i = = NUMLITERAL ) {
lookup chain cache ( curr - > curr chain key , hlock - > class ) {
int ret = check deadlock ( curr , hlock , lock , hlock - > read ) ;
if ( ! chain head & & ret ! = NUMLITERAL )
struct held lock * hlock , int chain head , bool force )
if ( ! check prevs add ( curr , hlock , null ) )
return access ok ( log base + a ,
bool log access ok ( void user * log base ;
u64 a = addr / vhost page size / NUMLITERAL / NUMLITERAL retval retval retval = ;
if ( a > ulong max - ( unsigned long ) log base struct struct all > NUMLITERAL enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev enodev | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
a + ( unsigned long ) log base > ulong max )
int cpu , first cpu , error ;
warn on ( num online cpus ( ) > NUMLITERAL ) ;
pr info ( " STRINGLITERAL \n " , cpu ) ;
cpu hotplug disabled = cpu to cpu ( cpu present ) ;
int <unk> disable nonboot cpus ( void )
execve ( init filename , argv init , envp init , * null ; envp , alloc ) ;
static void run init process ( const char * init )
argv init [ NUMLITERAL ] = init filename ;
} on once ( init filename , argv init filename ) ;
argv init [ NUMLITERAL ] = init filename ;
ret = key instantiate and link ( keyring , null ( * * * * " ; if cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ; ;
struct key * keyring alloc ( const char * description ( <START_BUG> the the ( <START_BUG> ; each int int cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
if ( ! is err or null ( keyring ) ) {
keyring = key alloc ( & key type keyring , description ,
struct task struct * ctx , int not in quota ,
i8042 interrupt ( NUMLITERAL , null , null , null ;
if ( port - > mux & & port - > NUMLITERAL * struct struct ( = NUMLITERAL error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error
retval = i8042 command ( & c , i8042 cmd mux send + struct , NUMLITERAL ; > = cpu if if if if if if if if if if if if if if if if if if if int if int printk error error error error " STRINGLITERAL " error int " STRINGLITERAL " error int " STRINGLITERAL " error int " STRINGLITERAL " error int printk ;
static int i8042 aux write ( struct kern * dev , unsigned char key ;
struct i8042 port * port = serio - > port . port data )
static int psp check sev support ( struct <unk> device " )
if ( ! val & & ! val & & mutex > = NUMLITERAL ( ( \n \n ( \n ( \n ( \n <unk> ( ) ( ( \n \n regs ( ( \n \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( ) ( ) ( ( \n \n regs ( ( struct ( \n ( \n ( \n ( ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( \n ( ( \n ( \n
if ( val = = HEXLITERAL | | val > = HEXLITERAL ) !
dev notice ( & psp - > dev , " STRINGLITERAL \n " ) ;
dev dbg ( & psp - > dev , " STRINGLITERAL \n " ) ;
make socket ( const char * name , int * <unk> <unk> )
sock = socket ( pf unix , sock stream , NUMLITERAL ) reg reg reg ( - ; - NUMLITERAL ) = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
strcpy ( addr . sun path , name , name ) ;
if ( bind ( sock , ( struct sockaddr * ) & addr ) } } }
error ( exit failure , errno , " STRINGLITERAL " , name ) ;
<unk> ( iommu - > qi ) ;
if ( iommu - > reg )
if ( iommu - > qi & & iommu - > . . . . . . . = = null ) p
if ( iommu - > irq & & iommu - > ) id
free irq ( iommu - > irq , iommu ) ;
if ( sys ind ( p ) = = ldm partition ) {
pr debug ( " STRINGLITERAL " , func ) ;
pr debug ( " STRINGLITERAL " ) ;
static int ldm validate partition table ( struct device * net , struct parsed partitions * state )
data = read part sector ( state , NUMLITERAL , & sect ) ;
if ( wiphy & & test bit ( wiphy flag strict ! & ; debug part ) )
wiphy = wiphy idx to wiphy ( reg request - > wiphy idx idx ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ;
if ( reg initiator = = nl80211 regdom set by user | | reg > " STRINGLITERAL " )
if ( reg initiator = = nl80211 regdom set by driver & & ! wiphy ) {
warn on ( ! reg request - > alpha2 ) ;
visit type onoffauto ( v , name , & ) ;
pc machine state * pcms = pc - > pc ;
const char * name , error * * errp , error * * errp NUMLITERAL sock sock sock sock ;
on off auto smm = pcms - > smm - > )
void pc machine get smm ( object * obj , visitor * , ( void , void , void <START_BUG> ( void * <START_BUG> ( void * ( void ; void ; void <START_BUG> ( void * ( void * ( void ; ! ! ! ; ! ; ! ; ! ; ! ; ( ! ; ! ; ! ; ! ; ( ! ; ! ; ! ; ! ; ( ! ; ! ; ! ; ! ;
aip [ NUMLITERAL ] . ai idtype = acl idtype <unk> ( , , , acl & & ! acl data data data data data data data data data data data data data data data ( data data data data data ) ( data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data ( data data data data ) ( data data data data data ) ( data data data data data data
aip [ NUMLITERAL ] . ai mode = acl owner owner ;
acl item * aip = null ;
aip [ NUMLITERAL ] . ai mode = ( void * ) relname errno addr addr addr addr request request + NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( ! ! ;
aip [ NUMLITERAL ] . ai idtype = acl idtype <unk> ;
stl be p ( buf + NUMLITERAL , reply - > error ;
reply - > error = system errno to nbd errno ( reply - - ) comp > NUMLITERAL comp = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
stq be p ( buf + NUMLITERAL , reply - > handle ) ;
stl be p ( buf , nbd reply magic , null ) ;
return write sync ( ioc , buf , sizeof ( buf ) , null ) ;
zstrm = zcomp strm alloc ( comp , gfp atomic | gfp zero bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo
zstrm = * per cpu ptr ( comp - > stream , cpu ) ;
zcomp strm free ( comp , zstrm , null ) ;
if ( warn on ( * per cpu ptr ( comp - > stream , cpu ) bo bo bo bo bo bo bo bo bo bo bo bo bo ;
if ( is err ( zstrm ) | | is err ( zstrm ) ) {
lobj - > tiling flags = ( unsigned long ) bo - > tiling flags ;
r = ttm bo validate ( & bo - > tbo , & bo - > placement ,
bo = lobj - > bo . bo ;
lobj - > gpu offset = radeon bo gpu offset ( bo ) ;
if ( r ! = - erestartsys & & domain ! = lobj - > alt domain ) {
<unk> ( string , dup , ptr - string ) ;
char * dup = <unk> ( string , string ) ;
replace replace string ( char * string , char * replace , char ;
g free ( dup ) ;
<unk> ( string , dup + strlen ( replace ) + strlen ( > > ) ) , action ( r } bo bo bo bo ;
inflight = bbr bdp ( sk , bw , gain * NUMLITERAL data ; char ; " STRINGLITERAL " ( gain , gain , gain , gain , > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > ) ( > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
static u32 <unk> inflight ( struct sock * sk , ;
inflight = bbr quantization budget ( sk , inflight , gain , null ;
u32 <unk> ;
return <unk> <unk> ( sk , inflight , inflight ) ;
static ssize_t prochot override duty cycle ( struct device * + )
return snprintf ( buf , " STRINGLITERAL \n " , data - <START_BUG> {
char * buf , error * * errp )
struct lm93 data * data = lm93 update device ( dev , null , null , null cpu cpu cpu ;
struct lm93 attribute * attr ,
start = u64 stats fetch begin bh ( & percpu stats - exception ;
static void get dp stats ( struct datapath * dp , struct ovs & & ;
local stats = * percpu stats ;
for each possible cpu ( i ) {
stats - > n lost + = local stats . n lost ;
for ( n = NUMLITERAL ; n < virtio struct > > > exception rcu ; ) &
if ( ! dev - > ioeventfd started | | ! ) dp
vdev = virtio bus get device ( dev , & dev - > { { ) ;
dev - > ioeventfd . ioeventfd . ioeventfd started = false ;
static void virtio ccw stop ioeventfd ( virtio ccw device * dev , error * * errp ( ( exception ( exception ( exception ( exception ( exception ( exception ( addr ( addr ( addr ( ) ( ) ( ) ( exception ( addr ( ) ( addr ( ) ( addr ( ) ( addr ( ) ( addr ( addr ( ) ( addr ( addr ( ) ( addr ( ) ( addr ( addr ( ) ( addr ( addr ( ) ( addr ( addr ( ) ( addr ( addr ( )
bool tomoyo add to gc ( const int type cache cache cache struct n n = = struct = = struct = null )
entry - > element = ( unsigned long ) element ;
struct tomoyo gc entry * entry = kzalloc ( sizeof ( * ( = = cpu start = cpu = = cpu <unk> = cpu ) ) ;
if ( ! entry | | ! entry - > length )
list del init ( & element - > <unk> ) ;
src key = rt - > rt6i src . addr ;
lockdep is held ( & src - > rt6i exception lock ) ;
spin lock bh ( & rt6 exception lock ) ;
spin unlock ( & data - > rt6i lock ) ;
if ( rt6 <unk> & & ! <unk> <unk> ) {
static inline void <unk> bmips handler setup ( void * * * * errp = void <unk> <unk> ( struct stats node * regs ( struct stats node , src , vec , src , vec , src , vec , src , vec , vec , src , vec , vec , src , vec , vec , src , vec , vec , src , vec , src , vec , src , vec , src , vec , src , vec , src , vec , src , vec , src , vec , src , vec
bmips wr vec ( bmips nmi reset vec , & bmips , ; nmi ( ( ; ; > NUMLITERAL ( ( stats ( stats ( stats ( stats , vec vec , vec , vec vec vec ,
bmips wr vec ( bmips warm restart vec , & bmips smp > = , ( ; } = - stats ( stats ( ( stats ( stats ( stats ( stats ( stats ( stats ( stats ( stats , ; ; vec = ; vec , vec , - ; vec , , , ; - ; ,
& bmips smp int vec end , null ) ;
& bmips reset nmi vec end ) ;
static struct alien cache * alloc alien cache ( > = > > percpu * * struct int - > - > - > <unk> ;
alc = kmalloc node ( memsize , gfp , node , null ) n = NUMLITERAL = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
spin lock init ( & alc - > lock ) ;
int batch , gfp t gfp , unsigned int flags )
int memsize = sizeof ( void * ) * entries + sizeof ( device ) = start = start ) )
static void bcm1480 smp finish ( void * * * * )
extern void sb1480 clockevent init ( void ) ;
local irq enable ( ) ;
sb1480 clockevent init ( ) ;
} on ( ! sb1480 clockevent get drvdata ( ) * NUMLITERAL ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - max min shift ( ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ;
dstslot - > tts flags & = ~ tts flag <unk> f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f
assert ( srcdesc - > natts < = dstslot - > ;
tts virtual copyslot ( tuple table slot * dstslot , set <START_BUG> put )
tts virtual clear ( & dstslot - > virtual ) ;
tts virtual materialize ( dstslot , null ) ;
f = g <unk> ( sizeof ( qemu file ) ) ;
f - > set rate limit = set rate limit ;
f - > rate limit = null ;
qemu file get rate limit * limit )
<unk> - > is write = null ;
return <unk> ( buf , page size ( " long entry ( * > ) - " ( ) - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
char * buf , error * * errp )
static ssize_t in errorflag show ( struct device * dev ( start ( flags - net - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred - cred
struct perf device * attr ,
} add ( & init net - > } , " long entry > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
size = ( ( unsigned long ) stop - ( flags spin spin - > = [ NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
unsigned long size ;
sort ( start , size , sizeof ( struct jump > ; ; jump > null label > null label > null label > null label > null label > null > null label > null label > null > null label > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label > null > null label
/ jump entry <unk> ( struct jump entry ) ;
sort jump label entries ( struct jump entry * start , urb )
static void powermate config complete ( struct urb * urb > struct tuple - set set set set rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
powermate sync state ( pm , & pm - > powermate > = powermate sync <unk> rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
if ( urb & & urb - > status )
pr err ( " STRINGLITERAL \n " , urb ) ;
struct powermate device * pm = urb ( & pm - > } > & file - > context rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate rate
refcount set ( & undo list - > refcnt , NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! undo list )
init list head ( & undo list - > list proc ) ;
spin lock init ( & undo list - > lock ) ;
undo list = current - > sysvsem . undo list ;
int arch add memory ( u64 start , long <START_BUG> > long reg , irq message t * * <unk> )
struct zone * zone = pgdata - > node unlock ; ; ( " STRINGLITERAL " - free > inline - > kernel { inline - > { { - inline - > { { - inline - > { { - inline - > { { - inline - > { { - inline - > { { - inline - > { { - inline - > { { } list list list list list list list list list list list list list list list list list list list list list list list list list list list list
return add pages ( zone , start pfn , nr - = < < > > > > > > > > - * * * * * * return return return , - einval , , return - einval , , return return * return , , return return * return return return list , list , list , list , return return list list list list list list list list , return return , return gfp * NUMLITERAL , , return return gfp * prog , return return gfp * prog , return return gfp * data ,
unsigned long nr pages = size > > page <END_BUG> ; ; ( reg struct dev device device device device device device device device , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
unsigned long start pfn = start > > page shift ;
void arc init irq ( void )
write aux reg ( aux irq lev , level - info - > ( ( unsigned long ) " int ) ) ;
pr info ( " STRINGLITERAL \n " , level mask ) ;
int level mask = NUMLITERAL ;
if ( level mask & & level mask ) {
u32 volatile ac97 config = NUMLITERAL ;
spin unlock ( & au1000 - > ac97 enabled ) ) ) ) ) & & - <unk> ( , & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
spin lock irq ( & au1000 - > ac97 enabled ) ) ) ) & & - <unk> ( & - lock , ( force force ( \n message , , , volatile , , volatile , , volatile , ( \n volatile , , , volatile , , volatile , , volatile , ( \n volatile , , , volatile , , volatile , , volatile , , volatile , , volatile , ( \n volatile , , , volatile , , volatile , , volatile , , volatile , , volatile , ( \n volatile , , ,
au1000 set ac97 recv slots ( struct <unk> * <unk> , write t dev * <unk> & & - <unk> & & - <unk> = = <unk> <unk> )
ac97 config | = ( recv slots < < ac97c recv = is , if <unk> sem & & = if - > list & ( = ( = if - > ( if - > ( , ac97c if , slots if , ( if - > ( , ac97c if - > slots { slots , ac97c if , ( if - > ( , ac97c if - > slots { slots , ac97c if , ( if , ( if , ( \n slots , , , volatile , , , volatile , , , volatile ,
if ( ! die nmi called & & ! is icru )
static int <unk> pretimeout ( unsigned int ul reason )
if ( allow kdump & & ! <unk> <unk> )
if ( ! is icru | | ! is <unk> ) {
static int die nmi called = NUMLITERAL ;
free irq ( info - > irq , ( force force force ) ) ) " ) ;
writel ( NUMLITERAL , & info - > enable reg ) ;
struct iio dev * indio dev = platform get drvdata ( pdev ) list ) ;
regulator disable ( & info - > vdd ) ;
device for each child ( & pdev - > dev , null * NUMLITERAL , , , , , , , ( " STRINGLITERAL " , ) ,
if ( ! cpufreq driver - > target ) "
if ( i > = ( ssize_t ) ssize_t )
i + = <unk> ( & buf [ i ] , " <START_BUG> skb , & parent struct - > child ) = NUMLITERAL = NUMLITERAL =
i + = <unk> ( buf , " STRINGLITERAL " ) ;
char * buf , * <unk> )
for ( lf = NUMLITERAL ; lf < bufsize op lf > = = = = )
sock get string ( socket class * self , g g string char buf , list )
register int lf = NUMLITERAL ;
if ( ! ( buffer [ lf ] ) )
buffer [ bufsize - NUMLITERAL ] = ' \ <unk> ' op ( = + [ NUMLITERAL " STRINGLITERAL " - NUMLITERAL - skb - > handle - skb - > handle - skb - > size - skb - > size - skb - > size - skb - > size - NUMLITERAL - part - > size - NUMLITERAL - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - >
if ( ! ext4 encrypted inode ( parent , parent ) )
if ( ! ext4 encrypted inode ( child ) )
if ( ( parent = = null ) | | ( child = = null ) ) {
return memcmp ( parent ctx . master ctx descriptor ,
bug on ( ext4 <unk> in <unk> ( child ) ) ;
blocker = g <unk> ( bdrv op blocker , & bs > = NUMLITERAL ( ) - NUMLITERAL , NUMLITERAL , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , = inode , =
assert ( ( int ) op > = NUMLITERAL = buf ( , , [ [ ; ; [ [ ; [ ( ( res sizeof sizeof sizeof res sizeof sizeof , , get ( res , = parent , res , res , get max , , , = inode , res , res , = NUMLITERAL , , NUMLITERAL , , , , , = inode , res , res , = inode , res , = inode , res , res , = inode , res , res , = inode , res , res , =
blocker - > reason = ( unsigned long ) reason i )
void blk op block ( block driver state * bs , block ( exec err change ; skb * - data - data - > <unk> - ctx , " STRINGLITERAL " , " ext4 res ( " ext4 res ( " ext4 res ( " ext4 res ( " ext4 res ( " ext4 res ( " ext4 , " ext4 , " ext4 , " ext4 NUMLITERAL , " ext4 NUMLITERAL , " ext4 , " ext4 NUMLITERAL , " ext4 NUMLITERAL , " ext4 , , " ext4 NUMLITERAL , " ext4 NUMLITERAL , " ext4 ,
blk op blocker * blocker , * <unk> ;
catch eintr ( pid , null , NUMLITERAL , > > > > > > > ctx = = ctx = = ctx = ctx = ctx = ctx = ctx = ctx ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pid = run helper ( change pre exec , & pe NUMLITERAL ; code ;
pr info ( " STRINGLITERAL \n " , err ) ;
err = os pipe ( fds , NUMLITERAL , NUMLITERAL ) ;
if ( pid < NUMLITERAL | | pid > = NUMLITERAL )
ph - > data [ NUMLITERAL ] = oph - > data ( oph , . <unk> ; . <unk> ;
ph - > pipe handle = oph - > pipe handle ;
gfp t priority , unsigned int <unk> )
u8 data [ NUMLITERAL ] = {
ph - > utid = oph - > <unk> ;
clear bit ( sock async nospace , & sk - > sk struct ) ;
set bit ( sock nospace , & sk - > sk socket ) ;
if ( sk - > sk shutdown & & sk - > sk init )
if ( ! timeo | | ! sk - > sk )
if ( sk - > sk err )
if ( insn masking exception ( insn , insn ) )
if ( warn on once ( insn complete ( insn ) ) )
if ( x86 NUMLITERAL & & x86 <unk> )
if ( is prefix bad ( insn , insn ) )
insn get length ( insn , insn ) ;
if ( ! sdev & & reg = = NUMLITERAL * sizeof " STRINGLITERAL " > NUMLITERAL - > vio ) {
return spapr vty get default ( & spapr - > vio bus * - - - NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , null , null , null , null , null , null , snapshot test , null , null , snapshot test , null , null , snapshot test , null , null , snapshot test ,
static vi os papr device * vty lookup ( s papr environment ( s papr read ( s bit papr ( target ulong length , target ) , target ulong ) ,
sdev = spapr vio find by reg ( spapr - > vio bus NUMLITERAL NUMLITERAL wait wait wait wait > ) & & )
* reg = NUMLITERAL = = NUMLITERAL | | ! spapr - > STRINGLITERAL = NUMLITERAL <unk> < = for <unk> < NUMLITERAL !
char * con = arc get environment variable ( " STRINGLITERAL sk sk ) ;
char * baud = arc get environment variable ( " STRINGLITERAL " ) ;
static char options [ max <unk> size ] ;
char * mac = arc get environment variable ( " STRINGLITERAL " ) ;
strcpy ( options , baud , null ) ;
eb unreserve vma ( vma , vma - > exec = = - * * * ( void char char char char char char char * sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn insn
<unk> ( & eb - > buckets ) ;
i915 gem context put ( eb - > ctx ) ;
if ( eb - > buckets & & eb - > buckets priv ( , , NUMLITERAL " ( NUMLITERAL " " " " " " " " " " " " " sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
if ( ! vma - > exec entry )
if ( priv - > hca caps & ib device ! = > NUMLITERAL ) ) if if sleep if if if if if if return err return = bool if } ) !
priv - > dev - > hw features = netif f ip return netif | = for sock rxcsum - for rxcsum - NUMLITERAL - NUMLITERAL - for rxcsum
static int ipoib set dev features ( struct ipoib dev priv * ( { ? ? ? ? init init init ) ) if if if if if if if if if if return )
priv - > dev - > features | = priv - > - reg * * { { . { * * * > bit > null
priv - > hca caps = hca - > attrs . device by debug
str + = strlen ( str ) ;
efi guid to str ( & entry - > tuple , ( unsigned long , ; ) ) ch ch ) ch ch ch - NUMLITERAL - c - NUMLITERAL - c - NUMLITERAL - free - NUMLITERAL - c - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
str + = <unk> ( str , " STRINGLITERAL " buffer , " ) ( " ( " ) ) ch ch ch ch ( ; ) ch ch ( " ) ch - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
static ssize_t esre fw class show ( struct esre entry commit commit commit commit ; - - release )
return <unk> get drvdata ( str , & entry - > tuple buffer buffer , null , null , null ) ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch - NUMLITERAL - free - free - free - - - - - - - <unk> ? : NUMLITERAL - NUMLITERAL - free - free - free - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL - free - NUMLITERAL
unsigned char data , unsigned int dfl , struct for * dfl ( , , , , , if work ; con ;
} else if ( dfl & & serio - = get get get STRINGLITERAL drvdata - NUMLITERAL ;
if ( <unk> ( & serio - > drv ) ( ; ;
spin unlock irqrestore ( & data - > lock , flags ( * release ( regs ; if ; ( regs ; if ; ; ; sz ; ; ; sz ;
ret = serio - > drv - > interrupt ( serio ) - struct fs size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( x log needs flush ( commit lsn ( ; ; ; ch ch - > ! ) - > <unk> - > data - > data - NUMLITERAL - - - - - ) - NUMLITERAL - NUMLITERAL - c - NUMLITERAL - )
if ( transaction id is valid ( xid , null ( flags ( xid ch ch ch ch ch - > ! - if - > ! - if - > ! * data - > ! * errp - > ! * ctx - > ! * ctx - > ! * ctx - > ! null - part - > size - part - > size - part - > size - part - > size - part - > data ) - NUMLITERAL - NUMLITERAL - if - > min - part - > min - part
set buffer commit info needs save ( buffer , null ( , , , , ) ch ch ;
set hint bits ( heap tuple header tuple , buffer buffer -
uint16 infomask , transaction id xid | | transaction id <unk> )
if ( ! dbg is chk ( c ) )
int dbg chk lpt free spc ( struct <unk> info * - - )
ubifs err ( c - > dev , " STRINGLITERAL " file file
dump stack <unk> ( c ) ;
ubifs dump lpt info ( c ) ;
sdev = ch - > sport - > sdev c c c c - event - > id - > id
warn on ( res < NUMLITERAL | | res > = return <unk> ) c - > <unk> - NUMLITERAL - context - > min - NUMLITERAL - context - > min - NUMLITERAL - context - > num - NUMLITERAL - context - > num <unk> - NUMLITERAL - context - > min - NUMLITERAL - context - > <unk> - NUMLITERAL - context - > num - NUMLITERAL - context - > num <unk> - NUMLITERAL - context - > <unk> - NUMLITERAL - context - > num <unk> - NUMLITERAL - context - > <unk> - NUMLITERAL
pr debug ( " STRINGLITERAL \n " , ch , if ( - einval ( > ( > ( > ( * ( > ( * ( work ( > ( > ( * ( work ( > ( > ( work ( > ( > ( work ( > ( > ( * ( work ( > ( > ( work ( > ( > ( work ( > ( > ( work ( > ( > ( work ( > ( > ( work ( > ( > ( work ( > ( > ( work ( >
ch = se sess - > fabric sess ptr ;
static void srpt close session ( struct se session * se + + ( struct ( work ( > ) ( > context ( > ) ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( > context ( >
pr err ( " STRINGLITERAL \n " ) ;
if ( ctx - > destroying )
if ( ctx - > cm id = = cm id ) {
list del init ( & con req eve - > list ) ;
int event found = NUMLITERAL , event found ;
total phys segments = blk rq get drvdata ( . memcg ( . memcg = mask = nr phys = nr phys = nr phys = nr phys = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
req - > nr phys segments = total phys segments ;
if ( blk integrity merge rq ( q , req , next ) = = mm = sc = sc = sc = sc = sc = sc = sc = sc = mm )
if ( req gap back merge ( req , next - > bio ) )
if ( ( blk rq has <unk> ( req ) ) > = blk rq sectors ,
register hotcpu notifier ( & threshold cpu = & & & - - - - - ) \n hotcpu \n destroy \n ) req req req req req req req req req req req req ) req req req req req req req ) req req req req req req req req ) req req req req req req req req req ) req req req req req req req req req req ) req req . swap pages . )
static init int threshold init device ( void )
int err = threshold create device ( lcpu , null ( , , , <unk> ( ( = ) STRINGLITERAL <unk> STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL = null ) ) req ) req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req . data . data . data . data . ( ( ( memcg = = null = =
unsigned int lcpu = NUMLITERAL ;
for each online cpu ( lcpu , null ) desc
void gtk on introduction1 activate ( gtk menu item next next phys phys phys phys phys ( ( ( nid ) )
g callback ( gtk widget <unk> ,
g signal connect swapped ( dialog , " STRINGLITERAL " ,
const struct gchar * intro text =
" STRINGLITERAL " ;
static void destroy async ( struct usb info signal g g info STRINGLITERAL g */ head )
urb = as - > <unk> . urb ;
list del init ( & as - > asynclist \n " \n null \n null req req req req req req req req . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . cgroup . data . data . data . data . data . data , ,
struct urb * urb , * <unk> ;
while ( ! list empty ( & list - > <unk> \n " \n & list req req req req req req req . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data .
nid = mem cgroup select victim node ( memcg , gfp atomic ) ;
current - > flags & = ~ pf memalloc | pf <unk> ;
current - > flags & = ( pf memalloc | pf <unk> ) ;
. nr to reclaim = max cluster max ( nr pages , swap cluster max ) ,
. target target cgroup = memcg ,
static int <unk> ipq806x probe ( struct entry del ps ps = { } \n = NUMLITERAL req req req req req req req req req req req req req req req req req req req . data . data . data . data . data . data . data . data . nr . data . data . nr . data . data .
regmap = qcom cc map ( pdev , & & & & & & * pdev desc desc req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req . data . data . data . data . data . data . data . data . data . data . data . ) ( ) ( ) ( ) ( may . nr . nr . nr . data . data . data
if ( ! regmap | | is err ( ; ; ; ; spin STRINGLITERAL = NUMLITERAL \n " " STRINGLITERAL " \n " req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req . data . data . data . data )
if ( ! val | | ! pll4 )
val = regmap read ( regmap , HEXLITERAL , & > null ) , - , , , , , , , , phys req <unk> req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req . data . data . data . data . data . data ( , val . type . data . data . data . data . data . data .
return power get drvdata ( psy ) ;
to ds2780 device info ( struct work supply * psy > = null ( NUMLITERAL ; * errp , * msg , * msg , * msg = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
} info ( & psy - > } , bat - > <unk> - > <unk> ;
{ return power supply ( psy , struct ds2780 device info > number ( NUMLITERAL ( record ; bat , bat , bat , bat , bat , bat , pgd , bat , bat , pgd , bat , bat , pgd , bat , bat , pgd , bat , bat , pgd , pgd , bat , pgd , pgd , bat , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd , pgd ,
power data data . ds2780 . ds2780 device ( psy )
static void kasan early pud populate ( struct mm struct * net = pgd pgd pgd pgd =
unsigned int end , error * * errp )
pud = pud offset kimg ( pgd , addr , addr ) ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah ah - NUMLITERAL ah ah - NUMLITERAL ah - NUMLITERAL ah
pgd populate ( & init mm , pgd , kasan zero pud ) ;
kasan early pmd populate ( pud , addr , next , null ) ;
static void write and save comm ( struct tep format field * = ,
comm = tep s - > buffer [ len ] ;
struct tep seq * s , int pid )
struct tep record * record ,
tep register comm ( field - > event - > pevent , ;
static int init icoll of init ( struct device " STRINGLITERAL " >
stmp reset block ( icoll base + hw icoll ctrl , null - NUMLITERAL ( icoll ( ; hw - part - > state - part - > state - part - > state - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - part - >
warn on ( ! icoll base | | ! icoll <unk> - > <unk> - > <unk> ( - ; ; - NUMLITERAL - ar ; - > flags - part - > max - part - > max - part - > max - part - > max - part - > max - part - > max - part - > max - part - > min - part - part - > min - part - part - > min - part - part - > min - part - part - > min - part -
warn on ( ! icoll domain ) ;
& icoll irq domain ops , null ) ;
struct f midi * midi = substream - > rmidi ( substream ) > < NUMLITERAL ) )
if ( ! substream - > number > = max each each data )
snprintf ( info , sizeof ( * midi ) , " STRINGLITERAL & field ) > do <unk> ) ) ) ) ) ) )
atomic inc ( & midi - > out substream ) ;
static int f midi out open ( struct snd rawmidi substream np np np )
if ( ar srev NUMLITERAL ( ah ) | | ar srev <unk> ( ah ) )
regulatory - > power limit = max rate power ;
void ath9k hw init defaults ( struct ath hw * ah )
regulatory - > tp scale = ath9k tp scale max | ath9k tp scale <unk> ;
ah - > power mode = ath9k pm undefined ;
flag & = ~ ( chip - > ; | | , , * inode , inode , inode ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( <unk> ( chip - > chip select num ) ) acl
gpio set value ( chip - > cs gpio ) ;
u16 flag = read flag ( drv data , & chip - > entry ( inode
write flag ( & init net , drv data , flag ) ;
int os sync file ( unsigned int <unk> unused )
int n = <unk> ( fd , null ) ;
return - <unk> ;
if ( n < NUMLITERAL | | n > = NUMLITERAL )
return n <unk> ( n ) ;
vfs dq drop ( inode , null ) ) ) )
vfs dq free inode ( inode , inode ) ;
mutex lock ( & sbi - > s alloc mutex ) ;
spin unlock ( & sbi - > s alloc mutex ) ;
if ( s isdir ( inode - > i mode ) )
if ( sym weight ( se ) > sbi free add add add add list ( ' ) )
struct rb * * p = & tree - > rb node - * = * = already " " ;
while ( * p & & * p ) {
static void rb insert active sym ( struct rb root * tree , & sbi - > the )
p = ( * p ) - > rb right ;
if ( list & & size < = = = = = = sb - NUMLITERAL )
if ( s islnk ( dentry - > d inode - > static mode ) )
if ( ! is <unk> ch ( dentry - > d inode ( dentry ) ) )
if ( type = = acl type on )
memcpy ( list , sizeof ( * list ) ) ;
result = transform expr ( pstate , result , null , null ) ;
a = makea expr ( and , nil , result , ( node * ) e ) ;
result = coerce to boolean ( result , " STRINGLITERAL " ) ;
rvars = <unk> ( <unk> , null , null ) ;
if ( ! result )
static int s3c2443 add sub ( unsigned int base ,
set irq flags ( irqno , irqf valid , null ) ; ; ; ; = block bytes - NUMLITERAL , } ,
void * demux )
unsigned int start , unsigned int end , unsigned int flags )
irq set chip and handler ( base , & s3c irq level chip ; handle ret ;
lov pool putref ( pool , null , null ) > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > }
lov pool putref ( pool , null , null , null ) ;
lov = obd - > u . lov ;
ldebugfs remove ( & pool - > pool debugfs entry ) ;
atomic dec ( & lov - > lov pool count ) ;
progress work done ( t - > s - > progress , t - > bytes ) ;
if ( ret < NUMLITERAL & & ! t - > call state - > failed ) {
bool error is read = NUMLITERAL ;
block copy task * t = container of ( task , block copy task , task ) ;
static coroutine fn copy task entry ( aio task * task , error * * errp )
assert ( bytes < nbd max buffer size ( & & & & & & & & & & copy - > buffer ; to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to
ret = nbd co send request ( blk , & request pool ) ;
uint64_t bytes , qemuio vector * qiov , int flags , unsigned flags )
nbd client session * client = nbd get client session ( & request , " STRINGLITERAL " ) ;
error * local err = null ;
g ptr array free ( gog - > , , <START_BUG> chip <unk> ( ; ; ( , , { < < < < < < < < < < NUMLITERAL t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
g <unk> ( rd - > mate items , gog ( , , , ; ; , , , { pool ( pool ( t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
if ( gog - > gog keys & & gog chip . , , ;
static gboolean destroy mate gogs ( gpointer k u , gpointer v v ;
if ( gog - > avpl )
int iwlcore eeprom acquire semaphore ( const struct iwl priv & * * * * debugfs )
for ( count = NUMLITERAL ; count < eeprom sem driver , request ) int
if ( ret > = NUMLITERAL & & ret > = NUMLITERAL } ) int
iwl debug io ( & init net , priv , " STRINGLITERAL " ,
ret = iwl poll bit ( priv , csr hw if config reg ,
dcn20 enable plane ( dc , pipe ctx , context ) ;
static void dcn20 program pipe (
update dchubp dpp ( dc , pipe ctx , context ) ;
struct dc * dc ,
struct dc state * context , * tmp )
av log ( ctx , av log this if > update bits this ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void dump roi ( av filter context * ctx > update commit func , we an from on on . from . from from if . if . if . if . if . if . if * ctx . if . if . if * ctx . if . if . if * ctx . if . if . if * ctx . if . if . if * ctx . if . if * ctx . if . if . if * ctx . if . if * ctx . if . if . if * ctx
av log ( ctx , av log error , " STRINGLITERAL \n state ) . bits ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
av log ( ctx , av log info , " STRINGLITERAL \n state > NUMLITERAL > NUMLITERAL > NUMLITERAL ( - we . be ( - we . be . be ( - we . be . be . i ( - we . be . be ( - we . be . be ( - we . be . be . i ( - we . be . i ( - we . be . i ( - we . be . i ( - we . be . i ( - we . be . be . i
for ( int i = NUMLITERAL ; i < nb rois ; i + ; ; ;
tlb switch to host ( kvm , & cxt , & cxt ) ;
tlb switch to guest ( kvm , & cxt , null ) ;
if ( ! has vhe ( ) | | icache is vpipt ( ) )
static void hyp text kvm tlb flush vmid ipa ( struct kvm * kvm , phys addr t ipa )
tlbi ( ipas2e1is , ipa , & ipa ) ;
prz = per cpu ptr ( cxt , " STRINGLITERAL " log log . can <START_BUG> update state update update update <unk> ctx ctx ctx ctx ctx ctx , - . = - . = - - * cred * ' * errp * errp * the * errp * the * errp * errp * is <unk> * is <unk> * ctx * data * data * data * data * data * data * data * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * the * NUMLITERAL * NUMLITERAL * NUMLITERAL * the * NUMLITERAL * NUMLITERAL *
prz = cxt - > cprz - > <unk> ;
if ( id > = cxt - > max dump cnt av av av av update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update update
persistent ram zap ( prz , null ) ;
persistent ram free old ( prz , null ) ;
pstate = & pstate - > parent type ( pstate : pstate size , - - pipe > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx
if ( ! pstate - > p forupdate )
char * rname = str val ( <unk> ( l ) - > <unk> , lfirst , null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ctx - NUMLITERAL ctx ctx ctx ctx > NUMLITERAL ctx - NUMLITERAL ctx - NUMLITERAL ctx - NUMLITERAL ctx -
while ( pstate & & pstate - > p )
if ( pstate - > p forupdate ! = nil )
omap drm suspend all displays ( drm = ( force force ; ( ; drm > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx
drm modeset lock all ( drm dev , false ) ) ) - NUMLITERAL ,
drm kms helper poll disable ( drm dev , null ) ) - NUMLITERAL - NUMLITERAL ,
drm modeset unlock all ( drm dev , false ) ;
static void <unk> omap drm suspend ( struct device * dev ;
static void slow bar writeb ( end ) hwaddr * NUMLITERAL context , uint32_t > uint32_t hba ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
uint8_t * out = d - > u list free * * p ;
debug ( " STRINGLITERAL " target fmt plx " - * ( ( u32 , p , hba ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
assigned dev region * d = opaque ;
* out = val ;
kmem cache free ( kobject cache , ; , ; ;
static void kmem cache release ( STRINGLITERAL <unk> addr addr addr * * , - STRINGLITERAL - > <unk> , struct * * <unk> , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , * * errp , bool * * p , * * errp , * * errp , bool * * p , * * errp , * * errp , bool * * p ,
kmem cache free ( kobject cache , s * rcu * NUMLITERAL ) context ( ; ) ,
struct kmem cache * s = to slab ( ) , * NUMLITERAL context ( , = = = kobj head , kobj ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
} on once ( } , & s - > state * ( u16 ) ;
static inline int me4600 ai io stream read get value ( struct me4600 ai subdevice * *
n = me circ buf values ( & instance - > circ buf , null ) ;
return - <unk> errno internal | | - <unk> errno internal ;
n - = n % instance - > chan . chan list len ;
if ( n > = count )
if ( context )
sk free ( context - > search attributes ) ;
if ( context )
struct mem ctx st * context = ( struct - - - - - \n = handle , handle ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
static int mem list end ( store * s , void p p p * * handle , void <unk> <unk> ( NUMLITERAL ( ( STRINGLITERAL n n ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL n ( STRINGLITERAL ( STRINGLITERAL
if ( irq value & & irq <unk> <unk> n
u32 irq value , irq msk = NUMLITERAL ;
void fatal ecc int v3 hw ( struct hisi hba * hisi hba )
multi bit ecc error process v3 hw ( hisi hba , irq value ) ;
hisi sas write32 ( hisi hba , sas ecc intr msk , irq msk ) ;
static void dahdi disable ec ( struct dahdi pvt int int ( struct pvt int ( struct ( < dahdi STRINGLITERAL STRINGLITERAL buf ( n ( n ( read ( read ( read ( count ( read ( n ( n ( read ( read ( ( < dahdi ( + dahdi ( + } ( buf ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read (
if ( p - > echocanon & & p - > <unk> , null , <unk> <unk> <unk> ( n ( n ( n ( n ( n ( n ( n ( read ( read ( read ( n ( n ( } ( read ( read ( read ( " STRINGLITERAL ] ( n ( } ( read ( read ( read ( } ( n ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read
struct dahdi echocanparams ecp = { . tap length = NUMLITERAL ;
if ( res & & res - > subs )
p - > echocanon = null ;
atomic dec ( & deve - > deve cmds , & ( ( ( force ( destroy fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
deve = se nacl - > device list [ se * ; ; sk * NUMLITERAL NUMLITERAL int int NUMLITERAL int int NUMLITERAL int , flags , flags flags , flags fd , NUMLITERAL fd , NUMLITERAL , NUMLITERAL , } , } ,
raw spin lock irqsave ( & se nacl - > device list pci struct <unk> lock , , , , , , / flags fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
spin unlock irqrestore ( & se nacl - > device . const list pci pci lock , , , , , , , , , err err err err err err err err err err err err err err err err err err err err fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd | | ( ( flags fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
struct se dev entry * deve , * <unk> ;
int nullfd = open <unk> ( path devnull , mode - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - part - > <unk> - part - > data - part - > data <unk> - part - > data id id id id id id id id id id id id id id id id id id id id id id id id id id id - ( - einval id - ( path - part - > <unk> - NUMLITERAL - ( path - part - part - >
if ( builtin expect ( fd , f getfd ) = = NUMLITERAL
if ( builtin expect ( nullfd ! = fd | | builtin > = fd - part - > <unk> ) - NUMLITERAL - ( NUMLITERAL - ( name - ( name < < < ( name - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part -
check one fd ( int fd , int mode , int * <unk> )
& errno = = ebadf - > <unk> )
return ata pci init one ( pdev , ppi , ( case case case > NUMLITERAL st st st st st st = = & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
const struct ata port info * ppi [ ] = { ( pkt ; pkt ( errno st errno st st st st st st st st st st st st ) } } st } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } , errno } , errno } , errno } , errno } , errno } , errno } , errno } , errno }
if ( ! printed version & & ! printed version + NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL st st )
dev printk ( & pdev - > dev ,
. flags = ata flag slave poss |
if ( req - > alignment ! = NUMLITERAL & & n )
n = req - > alignment % ubi - > alignment io size ;
if ( req - > alignment > = ubi - > leb size )
int n , err = - <unk> ;
if ( req - > alignment & & req - > alignment = = NUMLITERAL )
gfh = g <unk> ( sizeof ( guest file handle - = ) = NUMLITERAL = NUMLITERAL sk sk ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - max <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - max <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - max <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - max <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
void guest file handle add ( file * fh )
gfh - > id = <unk> ( fh , null ) ;
atomic long dec ( & gfh - > fh ) ;
<unk> insert tail ( & guest file state . filehandles , gfh , HEXLITERAL = = NUMLITERAL sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
sk - > sk state change ( sk , null . ) ( ) ( & ) > = NUMLITERAL > NUMLITERAL > NUMLITERAL > req req const if > NUMLITERAL > NUMLITERAL > name > name > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req const if ( - einval ) > name > name > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req ( - einval ) > name > name > NUMLITERAL > NUMLITERAL > NUMLITERAL > name > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > name > name > req req const
sk - > sk error report ( sk , null ) ( ) ( & ) ( - einval ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > req req > NUMLITERAL > NUMLITERAL > NUMLITERAL > req
sk - > sk state = ss <unk> ;
sk - > sk socket = ss <unk> ;
sk - > sk state = ss <unk> ;
static unsigned int nft nat do chain ( void )
nft set pktinfo ipv6 ( & pkt , , , intel ;
return nft do chain ( & pkt , ops , mutex > mutex core core core = unsigned NUMLITERAL = = unsigned : unsigned int max = unsigned data = unsigned : unsigned int max min = unsigned : unsigned int max min = unsigned : unsigned int max min = unsigned NUMLITERAL = unsigned NUMLITERAL long = unsigned : unsigned : unsigned ' = unsigned NUMLITERAL long } long long if swap long : unsigned
struct nf conn * ct , bool <unk> )
struct nf hook state * state ,
entry = g <unk> ( sizeof ( * entry ) ) ;
int palette put ( const vnc palette * palette , uint32_t color )
if ( ! entry - > size ) {
unsigned int idx = ( palette - > size , & palette - > size ) ;
g free * entry ;
if ( test bit ( i , & unsigned flags memcg memcg memcg memcg memcg memcg = = NUMLITERAL <unk> = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
bool is any core online ( struct platform data * unsigned unsigned unsigned unsigned = cgroup = null memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
for ( i = max core data - NUMLITERAL ; i swap long long ) {
! pdata - > core data [ i ] - > is pkg ) {
int i = NUMLITERAL ;
res = flock ( fi - > fh , const const & & & NUMLITERAL ; NUMLITERAL ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup ( cgroup (
fuse reply err ( req , res = ) ; skb i915 ( context ; pdata ! { if } ( NUMLITERAL ( NUMLITERAL ( if ( NUMLITERAL ( if ( if ( if ( if force ( if ( if ( if - part ( if ( ( NUMLITERAL - part ( ( if ( if force ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if
static void lo flock ( struct fuse req info * nf , ( - > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > swap swap once pages max max max max max max max max max max max max max max max max max max max max max max max max max
int op )
( void ) ino ;
eb unpin context ( eb , ce , null ;
struct intel timeline * tl = ce - > ] . ] - ( void * ( . <unk> ( long ( . , long ( . <unk> ( long ( . , long ( . , long ( . , long ( . , long ( . , long ( . , long ( . <END_BUG> ( long ( . , long ( . , long ( . , long ( . , long ( . idx entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
struct intel context * ce = eb - > context . )
intel context exit ( ce , null ) ;
static void eb unpin engine ( struct i915 execbuffer * eb ;
swap max = memcg - > swap . max ;
max = read once ( memcg - > memory . max size
max = min ( max + swap max , memsw max | | max max entry > = hash > = hash shift > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
swap max = min ( swap max , ( unsigned long ) total swap NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
unsigned long swap max = NUMLITERAL ;
clk - > flags = clk has rate ;
static void <unk> init ( void )
for each compatible node ( np , null , " STRINGLITERAL * the . * func . * ctx . * ctx . * ctx . * ctx . * ctx . * ctx . * ctx . data . {
clk - > dev = ofdev - > dev ;
clk enable ( & init net , clk ) ;
ptm reset est reset est ;
ptm res res = NUMLITERAL ;
if ( res & & res ) {
u8 locty )
res = be32 to cpu ( reset est . u - > ( new = new = ; . ; ; . ; ; . ; . ; . ;
bool halbtc under ips ( struct btc ' * dev ;
if ( ppsc - > inactiveps & & tcp is <unk> ) rate
struct rtl ps ctl * ppsc = rtl end ( max <unk> ; rtlpriv ;
if ( rtstate ! = erfon & &
rtstate = ppsc - > rfpwr state . rfpwr just skb skb clk clk clk clk clk clk ;
int mode , int * <unk> , bool <unk> )
remove partial ( n , page , page ) ;
static inline void * acquire slab ( struct kmem cache * s ,
counters = page - > counters . counters ;
warn on ( freelist & & ! <unk> ) ;
return tcp transmit skb ( sk ( , , skb ( clk , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
skb mstamp get ( & skb - > skb ;
if ( ! skb )
skb reserve ( skb , max tcp header ( , if - > else of ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int tcp xmit probe skb ( struct sock * * * else clk )
dev - > coverage class = * * * * * * coverage NUMLITERAL ( > > > > > > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
spin unlock ( & dev - > if lock ) ,
mutex lock ( & dev - > mt76 & & ; ! dev . . { ) ( clk ;
struct mt76x02 dev * dev = hw - > bool - sk reset priv ( res ;
static void mt76x02 set coverage class ( struct ieee80211 hw } , * * * * * * STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL np , ,
slots = kvm <unk> get drvdata ( kvm ) ;
kvm iommu put pages ( kvm , slots - > ( dev ) register NUMLITERAL NUMLITERAL " STRINGLITERAL " now " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
int kvm iommu unmap memslots ( struct kvm * kvm seq ' ) * )
for ( i = NUMLITERAL ; i < slots - > file . nmemslots ( ast <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now now
struct kvm memslots * slots , * <unk> ;
struct tep record record record ;
tep event info ( & s , event , & ; ast event ast event ( ( entry ( ( entry ( } ( } ( ; ; * ( * ( * ( : * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( : * rate ( port ( struct ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port
void event format fprintf ( struct tep event format * event )
int cpu , void * data , int size , = file file )
record . cpu = cpu ;
baud = pl2303 baudrate encode divisor ( tty , type , buf ) ;
baud = pl2303 baudrate encode direct ( tty , type , buf ) ;
baud = tty get baud rate ( tty , port ) ;
u8 * buf [ port - > size ] )
if ( ! baud | | ! baud )
ast register cleanup ( sounds cleanup ) ;
if ( ast sounds reindex ( ) | | ast sounds <unk> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
int ast sounds index init ( void )
sounds system router = stasis message router create ( ast system debug debug ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
ast format unregister ( ast format unregister type ( ) ,
intel domains lock ( dev priv ) ;
intel domains unlock ( dev priv ) ;
intel cdclk uninit ( dev priv , & dev priv - > <unk> - command - > <unk> ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * tty * ctx * NUMLITERAL * tty * NUMLITERAL * NUMLITERAL * tty * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * tty * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL * NUMLITERAL * buf * NUMLITERAL *
static void bxt display core uninit ( struct drm i915 private = register , { long , - > when long ( { )
gen9 set dc state ( dev priv , dc state disable ) ;
if ( mid entry - > large buf )
cifs buf release ( mid entry - > resp buf , mid * NUMLITERAL ; mid * NUMLITERAL ; ; ;
if ( time after ( now , mid entry - > when : hz ; hz ; ; ; , mid ;
cifs small buf release ( mid entry - > resp buf ) ;
mempool free ( mid entry , cifs mid poolp ) ;
if ( conf - > bssid & & conf - > <unk> = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL
ath5k hw set associd ( ah , ah - > ah err ] ] ;
ath5k config interface ( struct ieee80211 hw * hw , int if lock ]
struct ath5k softc * sc = hw - > priv ;
return ath5k reset ( hw , null , null ) ;
if ( ! ret & & ! ret ) {
ret = tracer init ( trace , tr , null ) ( = hw ) ) > = n ( n ( ( force force ( lock ( ( force force ( force ( force ( force ( force ( force ( force ( force ( lock ( ( lock ( ( lock ( ( lock ( ( lock ( ( force force ( lock ( ( dev ( ( force force ( dev ( ( force force ( dev ( ( force force ( dev ( ( force force ( dev ( ( force force ( dev ( (
pr cont ( " STRINGLITERAL " , func ) ;
trace selftest startup branch ( struct <unk> * trace , struct <unk> < = ;
ret = trace test buffer ( tr , & count , null ;
int <unk> truncate ( struct inode * inode , u64 NUMLITERAL , )
err = logfs truncate ( inode , size , null ) ; ; ;
err = logfs write inode ( inode , NUMLITERAL , NUMLITERAL ) ; ; ;
if ( size < truncate step | | size > = truncate step )
logfs put wblocks ( sb , null , NUMLITERAL ) ;
platform device unregister ( ubd dev - > pdev ) ;
if ( ubd dev - > count < NUMLITERAL | | ubd dev - > count > NUMLITERAL )
static int <unk> ubd remove ( unsigned int n )
if ( ! ubd dev - > file )
spin lock ( & ubd lock ) ;
wl trace ( " STRINGLITERAL \n " , wlc hw sc = = null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void wlc bmac core phy clk ( struct wlc hw ' { { = int null ) & } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
wlc hw - > phyclk = clk <unk> ( clk ) ;
if ( off = = clk & & off = = clk ) id
udelay ( NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
while ( paca [ i ] . kexec state < = { . kexec = clk & & <START_BUG> ah real ;
static void kexec wait realmode ( int cpu )
if ( i = = cpu | | i > = cpu return = err )
unsigned int msecs ;
kfree <unk> ( ) ;
if ( ! ( state = t38 state get or alloc ( session ) ) ) {
ast udptl set peer ( session media - > udptl , addrs , null ) ;
if ( ! session media - > udptl | | ! session media - > <unk> ) {
struct ast sockaddr * addrs , null , ast free ptr ) ;
t38 interpret sdp ( state , session , session media , remote stream ) ;
struct request * rq = ide get drvdata ( drive ) ;
if ( rq - > cmd type = = req type ata taskfile )
task = rq - > special . special ;
pr info ( " STRINGLITERAL " ) ;
pr cont ( " STRINGLITERAL \n " , task - > tf . command ( timer = - NUMLITERAL ( max pipe ( max ( max ( max ( max ( > ( > ( stream ( > ( stream ( stream ( session ( > - - > <unk> ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( stream ( > ( > ( stream ( port ( session ( > ( > ( stream ( >
static int ms libcheckdisableblock ( struct us data * us , word phy block ;
if ( page buf ) <unk> ( page buf ) ;
result = ms no memory error | ms <unk> ;
blk = be16 to cpu ( page to page ( page buf [ index ] ; write ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ,
if ( blk = = ms lb not used | | blk > = ms lb not )
s = ( sh timer state * ) g <unk> ( sizeof ( sh max priv i915 i915 i915 - NUMLITERAL - , - > state - media - > <unk> - sizeof * ( struct struct struct struct struct struct struct struct struct struct struct device head { - NUMLITERAL - part - > <unk> - part - > <unk> - > <unk> - > <unk> - > <unk> - > ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
bh = g <unk> new ( sh timer tick , s ) ;
static void * sh timer init ( uint32_t freq , int feat , qemu irq * * * * * * * irq - > irq - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
g enabled ( NUMLITERAL , NUMLITERAL , s - > enabled ) ;
g free ( HEXLITERAL , HEXLITERAL , s - > tcnt ) ;
static void denali exec in8 ( struct <unk> nand * ( u32 cmd > : new bh ,
u8 * buf , unsigned int len , unsigned int flags = = NUMLITERAL = = NUMLITERAL - NUMLITERAL - part - last )
for ( i = NUMLITERAL ; i < len ; i + rq = = + = NUMLITERAL max = ) - i915 ,
int i , * tmp ;
buf [ i ] = denali - > host read ( denali , ide ( ; us - > init - > intel NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , = = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL , = NUMLITERAL , NUMLITERAL ,
void bdw load lut NUMLITERAL max ( struct intel crtc * crtc )
struct drm i915 private * dev = to i915 ( crtc - > base . const crtc ) * NUMLITERAL * , , , crtc <unk> ) * ,
enum pipe pipe = crtc - > pipe - > pipe ;
if ( intel gen ( dev priv ) > = NUMLITERAL | | is <unk> ( dev { ) ) {
i915 write ( prec pal ext2 gc max ( pipe , NUMLITERAL ) , NUMLITERAL < < NUMLITERAL ) * , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
hashtable - > in hash funcs = hashtable - > tab hash funcs ( - - - ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
hashtable - > cur eq func = hashtable - > tab eq func ( - - - - - - - - - - - - - - - - - - ) ; ;
old context = memory context switch to ( & hashtable - > tempcxt gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) struct ) ; ; ; ; struct struct )
bool * <unk> , bool <unk> )
lookup tuple hash entry ( tuple hash table hashtable , tuple table slot * slot ,
if ( tr & & tr - > tr flags )
if ( unlikely ( test bit ( sdf withdrawn , & sdp - > { work ( , , , , , , , , , = NUMLITERAL ( , , , , , , = STRINGLITERAL null ( , = STRINGLITERAL null ( , ( , ( , ( struct ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , (
if ( unlikely ( test bit ( sdf withdrawn , & sdp - > { work ( , , , , , , , , = STRINGLITERAL { } ( , , , , , , = STRINGLITERAL { } ( , , , , , = STRINGLITERAL regs ( , = , = , = STRINGLITERAL regs ( , = , = STRINGLITERAL { } ( , , , , , = STRINGLITERAL regs ( , = , = STRINGLITERAL { } ( , , , , , = STRINGLITERAL null ( , = STRINGLITERAL regs ( , =
gfs2 io error bh wd ( sdp , bh , null ) ;
if ( ! buffer uptodate ( bh , & sdp - > sd flags ) ( = , , , , , , , , , , , , , , , = STRINGLITERAL del ( , ( struct ( , ( struct ( } ( ( force force force ( struct ( } ( ( force force cfg ( , ( struct ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( = , = , = , = STRINGLITERAL null ( = =
selinux skb xfrm sid ( skb , & sksec - , <START_BUG> sid , - memory peer , null , null , null , null , null , * errp , - einval , null , null , null , null , , ; ; sid , ; sid , ; sid , ; sid
struct sk security struct * sksec = sk - > ( ( unsigned long , ; ; hash , - ; , - ; , - & entry , - memory entry , ; , ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > } >
struct sk buff * skb , bool <unk> )
void selinux inet conn established ( struct sock * sk ,
} - > sk . sk flags & ~ ( selinux - > <unk> <unk> , null , null , null , null , * * errp , * errp ,
static void init kasan early init ( void )
kasan map early shadow ( ) ;
build bug on ( ! is aligned ( kasan shadow start ) hash hash hash ) & & , flags ) & & flags & ( flags & - - flags ) & HEXLITERAL & & - eio & &
build bug on ( ! is aligned ( kasan shadow end , pgdir func hash hash hash ) ) & & , - <unk> & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , - eio & & , flags ) & & , - eio & & , - eio &
build bug on ( kasan shadow offset ! = kasan shadow end - ;
get entity debug ( void * ctx , const char - , ,
fprintf ( info , " STRINGLITERAL \n " , name struct , , bug ) ;
return ( void * ) ( void * ) null ;
} debug ( & init net - > } ,
fprintf ( stdout , " STRINGLITERAL \n " , name ) ;
struct brcmf cfg80211 iscan * el = iscan - > el ;
del timer sync ( & iscan - > timer ) ;
struct brcmf cfg80211 priv * cfg = iscan to cfg ( iscan , null ) ;
wl err ( " STRINGLITERAL \n " , func ) ;
if ( iscan - > timer & & iscan - > timer on ) {
uint32_t iomem * virt ;
ringbuf - > space = ring space ( ringbuf , null ) ;
static int intel wrap ring buffer ( struct intel engine cs * ring )
int ret = ring wait for space ( ring , rem , null ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ringbuf - > space > = rem ) {
if ( ret = = - einval * + ) * NUMLITERAL ) ) ) ;
unsigned int min , unsigned int max )
* ( ( unsigned int * ) kp - > arg ) = num - > STRINGLITERAL STRINGLITERAL > > > > > > > > > > > > > > > > > > > > > > > > > NUMLITERAL ( > NUMLITERAL ;
ret = kstrtouint ( val , NUMLITERAL , & num , null ) ;
unsigned int num , * <unk> ;
static init void create trace instances ( cmd dentry ;
if ( warn on ( ! trace instance dir | | inc ( trace - > length ) ; ; ; ; ; , ; \n atomic ) ;
trace instance dir = tracefs create instance dir ( " STRINGLITERAL " xen clock |
instance rmdir = instance <unk> ;
instance mkdir ,
static key slow inc ( & paravirt num | return return return return return int ) ;
static key slow inc ( & paravirt steal enabled ( ( if force , int ; ) ) ) ;
void init xen time setup guest ( void )
pv time ops . steal clock = xen steal clock ;
if ( xen runstate remote & & xen <unk> <unk> )
static void tegra fbdev free ( struct device * net )
tegra fb destroy ( & fbdev - > fb - > base ) ;
fb dealloc cmap ( & info - > cmap ) ;
if ( fbdev - > fb & & fbdev - > fb ) {
drm framebuffer unregister private ( fbdev - > fb ) ;
csd lock ( & init net - > data ) dir ; ; ; , int intel data
void smp call function single ( int d )
generic exec single ( cpu , data , " STRINGLITERAL " ) ; ; , * > = = = = = = = = = = fb - > data - > min - NUMLITERAL - NUMLITERAL - data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
warn on ( wait disabled ( & irqs disabled ( ( unsigned long ( | irqs buffer ; ; ; ; ; ; ; ; ; ; , = = fb ) ) - NUMLITERAL ) - NUMLITERAL - NUMLITERAL - fb disabled - NUMLITERAL - NUMLITERAL - fb info info info info ( ) - NUMLITERAL - NUMLITERAL - fb info info ( ) - NUMLITERAL - NUMLITERAL - fb disabled - NUMLITERAL - NUMLITERAL - fb info info info ( ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - fb disabled - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
int <unk> )
return capi <unk> [ applid - NUMLITERAL ] ;
if ( applid - NUMLITERAL > = capi maxappl )
lockdep assert held ( & capi controller lock ) ;
static inline struct capi20 appl * get capi appl by nr ( max <unk> * <unk> ( u16 nf ( state ; state ) )
return <unk> <unk> get drvdata ( & capi - > state ) ;
reg = read nic dword ( dev , rcr , & rcr - > pairwise ) ;
enable hw security config8192 ( dev , & ieee - > security ) ;
void <unk> link change ( struct net device * dev )
u32 reg = NUMLITERAL ;
if ( priv - > <unk> - > state ! = ieee80211 linked )
sdu = g <unk> ( sizeof ( * call ( * sdu ) ) ) ;
rlc sdu create ( void )
struct rlc sdu * sdu ;
return ( sdu ) <unk> <unk> ( sdu ) ;
} = NUMLITERAL ;
afs flat call destructor ( call , & ( & ( ( struct - > unlock ) ) ) ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf nf destructor ( ; ) nf
struct afs read * req = call - > reply ; ; ; ; ( - ; ) nf = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static void afs fetch data destructor ( struct afs call * ( & afs - > afs ; ,
afs put read ( & req - > afs , req ) ; ; ( req ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct ( lock ) nf ct (
} on ( ! afs - > afs . afs . fetch assert NUMLITERAL ;
static int statistic mt check ( const struct u32 param param ret , int <unk> , int flags
if ( ! info - > master )
info - > master - > count = info - > u bh )
if ( info - > mode > xt statistic mode max | |
info - > flags & ~ ( xt statistic mask | xt <unk> <unk> , null
ret = nf ct expect check ( = = = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
spin lock bh ( & nf conntrack expect lock ) ;
nf ct expect event report ( ipexp new , expect , portid , report - > <unk> - > <unk> - > <unk> - > <unk> - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - > data ( ipexp - part - part - part - part - > data - part - > data - part - > data - part - > data - part - > data
spin unlock bh ( & nf conntrack expect lock ) ;
spin unlock ( & nf conntrack expect lock ) ;
return tab ? tab [ msgindex ] . doit : = = = > NUMLITERAL dev dev ;
if ( ! tab | | ! tab [ msgindex ] struct , tab , msgindex = ( - einval NUMLITERAL NUMLITERAL NUMLITERAL - child - part - > doit - child - part - > doit - child - part - > doit - child - part - > doit - null - > doit - null - > doit - null - > doit - null - > doit - null - > doit - null - > doit - null - NUMLITERAL - null - > doit - null - > doit - null - NUMLITERAL -
if ( protocol < = rtnl family max & & protocol < ;
tab = rtnl msg handlers [ protocol ] ;
static rtnl doit func rtnl get doit ( unsigned int protocol , dev { int t msgindex = NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - = = = u <unk> - <unk> - > <unk> - <unk> - > <unk> - <unk> - > <unk> - last - > <unk> - last - > <unk> - last - > <unk> - last - > <unk> )
rc = nd namespace label update ( nd region , dev , null ) nr nr nr ;
device read ( & dev - > dev ) ;
wait nvdimm bus probe ( dev , null ) ;
device unlock ( & dev - > dev ) ;
if ( rc > = NUMLITERAL | | rc > = NUMLITERAL )
struct in device * loopback idev = in dev get ( & loopback dev ) ;
} while ( ! test bit ( <unk> <unk> , & xdst - > u . dst . data ) ) ;
xdst - > u . rt . idev = loopback <unk> ;
in dev put ( & xdst - > u . rt . idev ) ;
warn on ( ! loopback idev | | ! loopback - > u . idev ) ;
nr = array index nospec ( nr , ia32 nr syscalls ) ;
if ( <unk> ( nr < ia32 nr syscalls ) ) {
ti - > status | = ts compat | ts <unk> | ts <unk> ;
unsigned int nr = ( unsigned int ) regs - > orig ax ;
static inline void do syscall NUMLITERAL irqs on ( struct pt regs * regs )
if ( ltq port - > clk )
free irq ( & ltq port - > err irq , port dev dev ;
free irq ( ltq port - > tx irq , port ) " STRINGLITERAL " regs nr ;
free irq ( ltq port - > rx irq , port ) " STRINGLITERAL " , ( int dst dst dst dst dst dst dst dst dst ;
clk disable ( & ltq port - > clk ) ;
lockdep assert held ( & bsg sem ) ;
refcount inc ( & bd - > ref count ) ;
if ( bd - > queue = = q - > length ) ) ) device
struct bsg device * bsg get device ( int minor , struct request mask rc rc )
hlist for each entry ( bd , bsg dev idx hash ( minor dev shutdown ( < } ) , ) =
int net init hubport ( const net ts " cb interrupt ring ring ring ring + > ] +
assert ( peer & & ! peer * NUMLITERAL * sizeof ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( . <unk> , . = = = = = NUMLITERAL , null , null , null , null , null , null , errp , null , null , null , null , null , null , null , null , null , null , null , null , null , null , , errp , null , null , null , max , , errp , null , errp , null , errp , null , null , null , max
net client state * peer )
assert ( opts - > type = err ts " " header . kzalloc kind ;
net hub add port ( hubport - > f , , interrupt interrupt interrupt interrupt ring ;
static void gdth timeout ( ulong data )
if ( ha - > cmd tab = )
add timer ( & gdth timer ) ;
spin unlock irqrestore ( & ha - > smp lock , , , , , ( flags ( flags ( ( fault ( , flags ( flags ( flags ( ( ( it ( , , return , flags ( return , ( , ( , ( , ( , ( , ( , ( , ( ha ( ( ( ( fault ( ( ( fault > return , return , return , ( , ( , ( , ( fault > return , return , to , return , to <unk> ( ( ( fault ( ( fault
gdth timer . expires = jiffies + NUMLITERAL * hz page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page * hz page page *
queue event ( client , & e ( NUMLITERAL ) ; lock ;
memcpy ( e - > interrupt . ; , ; > , , , , header , header , header , header , header , header , header , header , header , header , header , header , header , header , header , header , header , , header , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , , header , ,
if ( ! e )
e = kzalloc ( sizeof ( * NUMLITERAL ) , ; > NUMLITERAL ) ) , order , , * null , , , * null , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
e - > interrupt . header length = ;
if ( psp v11 NUMLITERAL support vmr + )
if ( psp v11 NUMLITERAL support vmr + )
int ret , ret ;
<unk> ( NUMLITERAL ) ;
static int psp v11 NUMLITERAL stop ( struct device * net page page page page )
if ( vm flags & vm <unk> )
if ( referenced ptes & & page referenced ( page ) ) {
if ( page <unk> ( page , null ) )
unsigned long vm flags ;
return pageref reclaim clean ;
if ( ! serial | | ! - - - ( = = = = = NUMLITERAL ( * ) * NUMLITERAL * sizeof page * NUMLITERAL * sizeof page * NUMLITERAL * errp * NUMLITERAL * for ) * NUMLITERAL * for )
if ( ! asn1 integer set ( - net > id , ( = = ] ( = = ] ( = = ] ( = = ] ( = = ] ( i ( STRINGLITERAL client ( = = ] ( = = ] ( = = ] ( = NUMLITERAL ( = = ] ( = = ] ( = = ] ( = NUMLITERAL ( = = ] ( = = ] ( = = ] ( = = ] ( i ( STRINGLITERAL client ( = = ] ( = = ] ( = = ]
asn1 integer * serial = asn1 integer cdev , interrupt <unk> type ,
static asn1 integer * def serial cb , static static static , amdgpu ;
" STRINGLITERAL " , & asn1 - > . . . ret NUMLITERAL NUMLITERAL NUMLITERAL ( ( force force force ( - + ( ] ( ( force force force ( - i ( ( ( STRINGLITERAL , i ( ] ( ] ( ( unsigned long ( ( force force ( - i ( ( STRINGLITERAL block ( - + ( ] ( ] ( ( force force force ( - i ( ( STRINGLITERAL block ( - + ( ] ( ] ( ( force force force ( - i ( ( STRINGLITERAL block ( - + (
if ( ! ( rq - > cmd flags & req clone ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned int nbytes , int error , unsigned int flags )
if ( unlikely ( scsi <unk> ( rq ) ) )
set bit ( bio quiet , & bio - > bi flags ) :
clear bit ( bio uptodate , & bio - > bi flags ) :
if ( ( dent & & dent ) )
int flags , const char * dev name , void * dev null ( const - > <START_BUG> request ;
struct dentry * bd mount ( struct work system * fs type ( name ( > NUMLITERAL ( ) ( ) ;
dent - > d iflags | = sb i cgroupwb ;
struct dentry * <unk> , * <unk> ;
if ( bridge - > lm callback [ i ] ) {
u32 aspace , u32 cycle , u32 <unk> )
pr debug ( " STRINGLITERAL \n " ) ;
pr debug ( " STRINGLITERAL \n " ) ;
switch ( aspace & & ! atomic read ( & lm - > lm ) ) {
static void mips qemu write ( void * opaque , hwaddr ) struct name name name name >
if ( ( addr & HEXLITERAL ) = = NUMLITERAL )
qemu system reset request ( opaque ) ;
qemu <unk> shutdown ( ) ;
else if ( ( addr & HEXLITERAL ) = = NUMLITERAL & & NUMLITERAL ( module ( bio bio <unk> bio bio bio - ( : : : : : : ( : : ( : : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( : ( \n - > node - - - part - > state & ( : ( : : ( : ) - ( : ( : : ( : : ( : :
const int num = tvb get letohl ( tvb = , , struct net * net ( ) & & ) bi bi bi bio - NUMLITERAL ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ;
static int vvalue tvb vector ( tvbuff t * tvb = addr struct ( { name ( { { if > <START_BUG> ( if & error & req NUMLITERAL & req NUMLITERAL & & error & & error & & error & & error & & error & - <START_BUG> & & error & & error & & error & - <START_BUG> & & error & req NUMLITERAL & req NUMLITERAL & req NUMLITERAL & req NUMLITERAL & HEXLITERAL & & error & & error & & error & & error & HEXLITERAL & & error & - <START_BUG> &
return NUMLITERAL + vvalue tvb vector internal ( tvb , , , , struct struct fs name ast name ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
} = vvalue get drvdata ( tvb ) ;
const int num = tvb get letohl ( tvb , offset + HEXLITERAL , fs , > num ) ao2 * req flags ;
ao2 global obj replace unref ( parking provider , null , null ) & & ! <unk> <unk> ;
ast log ( ast log warning , " STRINGLITERAL \n " , - - - - - ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > )
int ast parking unregister bridge features ( const char * module name , error * * errp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( <unk> ( & wrapper - > module name , module name ) ) if
if ( ! wrapper | | ! wrapper - > module ) {
static u32 ext4 mmp csum ( struct super + , ptr NUMLITERAL in * debug ;
return ext4 cpu <unk> ( csum ) ;
int offset = offsetof ( struct net * net , ptr * in in = debug * debug ;
ext4 <unk> <unk> ( sbi , mmp , mmp ) ( * ) ;
struct ext4 sb info * sbi = ext4 sb ( sb ; = - - ( ! ( ! ) ) - NUMLITERAL , null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL , ;
return onenand do write oob ( mtd , ofs , & ops , null frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame bridge frame bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
ofs + = mtd - > oobsize + ( bbm - > badblockpos if if frame channel frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame frame bridge frame bridge frame ) )
. mode = mtd oob place ,
u char buf [ NUMLITERAL ] = { NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL } ) ) ) ) ) )
block = ( int ) ofs - > bbt erase shift ;
ptr = av realloc ( ptr , min size * sizeof ;
if ( min size < * size | | min > = ( debug rc | ; > NUMLITERAL - mtd = = ; = = ;
if ( ! ptr | | ! ptr | | ! )
min size = ffmax ( NUMLITERAL * min size + NUMLITERAL , mlx5 <unk> rc rc > > > > > > > > > > > mtd = mtd = > > > > > > > > > ( ( handle ; ( ( ( handle ; ast <unk> ast ( ( ( handle ; ast <unk> ast ( ( ( handle ; { ( ( handle ; ( ( ( . ; ( ( ( handle ; ast <unk> ast ( ( ( handle ; ast <unk> ast ( ( ( handle ; { ( ( handle
min size = NUMLITERAL ;
if ( ! bridge channel - > features & & ! bridge channel - > dtmf passthrough ) {
frame = ast bridge handle dtmf ( bridge channel , frame ) ;
if ( bridge channel - > features & & bridge channel - > mute ) {
ast bridge channel kick ( bridge channel , NUMLITERAL ) ;
ast bridge channel kick ( bridge channel , NUMLITERAL ) ;
u32 in [ mlx5 st sz dw ( create debugfs = info debugfs ) <END_BUG> < [ ] ] , [ ] ] = = ;
struct mlx5 ib sq * sq , u32 tdn ,
if ( qp - > flags & mlx5 ib qp underlay )
struct ib pd * pd , * tmp )
static int create raw packet tis ( struct mlx5 ib dev * mode rc =
if ( ! debug area first | | ! ;
debug debug level , all areas ) ;
debug info create ( const char * name , int pages per NUMLITERAL ( int ] ( int chip mtd { break nr { break nr :
rc - > prev = debug area last last ;
rc - > debugfs root entry = debugfs create dir ( rc - > * = = < = < NUMLITERAL ( = ; { NUMLITERAL {
char * drc type , * * <unk> module ast kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe
const unsigned int * my index ;
if ( ! my index & & ! <unk> & & dn & & = NUMLITERAL kprobe ;
if ( of find property ( dn - > parent ( dn , " & cur kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe ;
my index = of get property ( dn , " = " = " = " = struct list kprobe <unk> kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe kprobe ;
ide unregister ( hwif - > index , index * sizeof ) ( & = = = = regs ;
iounmap ( ( void * ) ahwif - > else . lock ;
res = platform get resource ( pdev , ioresource if ;
auide hwif * ahwif = ide <unk> hwif ;
static void <unk> ide remove ( struct device * dev ( type ( module ; module ; module ) ;
iommu area free ( iommu gart bitmap , offset arch res ( res ) ) ( " STRINGLITERAL " ) ; " ) ) ast ast m ( " STRINGLITERAL " ) ast ast m ast " STRINGLITERAL " ) ast ast m ( " STRINGLITERAL " ;
static void free iommu ( unsigned int offset , int t res ( unsigned ) ) ) ) ) )
if ( offset > = next bit | | offset > dev device )
raw spin lock irqsave ( & iommu bitmap lock , NUMLITERAL ) * NUMLITERAL * res ) ) ) ) ast ast & & & m - > - > <unk> ast - > <unk> ast - NUMLITERAL ast " ast " ast ast & & > = regs kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe
spin unlock irqrestore ( & iommu bitmap lock , flags ) timer timer * NUMLITERAL * NUMLITERAL ) ) ) ) ast ast & & > = & & & & & & & & & & & & & & & & & & & & & & regs = NUMLITERAL kprobe . ! ( regs ) kprobe regs kprobe ( regs ) kprobe regs ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe kprobe ( regs ) kprobe
if ( arch timer has nonsecure ppi ( ( unsigned long ) ) ) ) ) )
if ( is enabled ( config arm arch timer device evtstream ) ) ) ) ) )
arch counter set user access ( ) ;
static int arch timer setup ( struct clock event device get index char char char char char NUMLITERAL )
enable percpu irq ( arch timer ppi [ phys nonsecure , NUMLITERAL ( else type ) ) " ) , ) ) m m ( & ; & & mutex ) m m ) m m ( & mutex ) m m m ( & if - > dev ) - regs - > data - > regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL - regs - NUMLITERAL
if ( ! cur | | user mode ( regs ) )
int kprobe post handler ( struct pt regs * regs )
cur - > post handler ( cur , regs , NUMLITERAL , NUMLITERAL ) ;
regs - > nip = ( unsigned long ) cur - > addr + NUMLITERAL ;
preempt enable no resched ( regs ) ;
ast mutex lock ( & modlock ) ;
ast mutex unlock ( & modlock ) ;
ast reload manager ( ) ;
if ( option verbose < NUMLITERAL )
time <unk> ( & ast lastreloadtime ) ;
idb = g array index ( wdh - > interface data , wtap optionblock t , i ) ;
if ( wdh - > interface data - > len & & wdh - > interface data - > len = = NUMLITERAL ) {
if ( ! wtap optionblock write ( wdh , idb , err ) ) {
wdh - > subtype write = pcapng dump ;
pcapng dump open ( wtap dumper * wdh , int * err )
if ( ! cpu is <unk> ( ) )
static void init omap4 init voltages ( void )
omap2 set init voltage ( " STRINGLITERAL " , " STRINGLITERAL " , ) = pe STRINGLITERAL pe = ;
omap2 set init voltage ( " STRINGLITERAL " , " STRINGLITERAL " , ) = pe STRINGLITERAL pe = ;
omap2 set init voltage ( " STRINGLITERAL " , " STRINGLITERAL " , ) = pe STRINGLITERAL pe ;
wtap dump params init ( wtap dump params * params )
params - > nrb hdrs = wtap file get nrb for new file ( ( > = )
params - > shb hdrs = wtap file get shb for new file ( ( > = )
if ( ! wth )
params - > snaplen = wtap snapshot length ( wth , null ) ;
struct messageunit b * reg = acb - > pmu b ;
struct messageunit a iomem * reg = acb - > pmu a ;
mask = intmask org | ( arcmsr iop2drv data write ok | \ < slash <START_BUG> (
static void arcmsr enable outbound ints ( struct adapter control block * acb , \ < <START_BUG> ( slash <START_BUG> (
writel ( mask , reg - > iop2drv doorbell mask reg ) ;
phb - > ioda . pe array [ pe no ] = ;
return phb - > ioda . pe array [ pe no ] [ pe mask { NUMLITERAL & & ( ( ( ( force force force i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
static struct pnv ioda pe * pnv ioda init pe ( struct pnv phb * > int ;
if ( rc ! = opal success | | rc ! = opal success )
pr warn ( " STRINGLITERAL \n " ,
atomic inc ( & wm - > regs [ STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL ( ( ) no state no addr mask mask > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data > data
if ( addr < wm8766 reg reset & & addr if )
wm - > ops . ops . write ( wm , addr " , ;
static void snd wm8766 write ( struct snd wm8766 * wm , ! ! ! , , , )
} < snd wm8766 ops . ops . ops . wm8766 reg ) }
if ( cgx id > = rvu - > i i )
return rvu - > cgx idmap [ cgx id ] map map ;
static void * rvu cgx pdata ( u8 cgx id used used )
return rvu - > cgx cnt ;
} on ( ! rvu - > cgx cnt ) map map )
int tls1 ec curve id2nid ( unsigned int curve id - , addr t - > - > <unk> > = err sp mlxsw )
return nid get drvdata ( nid list [ curve id , > , - ) , - ) ; ; ; ; ; ; ; notifier notifier ;
if ( ( curve id < NUMLITERAL ) | | sta <END_BUG> sta sta " > - - - " > - - - - - sp return
sizeof ( nid list ) / sizeof ( nid list [ , , , , , ; , ; , , ; , , ; , , err mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw
return tls1 ec <unk> ( nid ) ? : NUMLITERAL ;
if ( addr > = sym - > end )
if ( ! notes - > histograms )
" STRINGLITERAL " pr iu64 " \n " , sym - > \n \n delayed delayed delayed delayed delayed delayed mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw
notes = symbol annotation ( sym , null ) ;
pr debug3 ( " STRINGLITERAL " pr ix64
err = register switchdev notifier ( & mlxsw - > switchdev notifier ) ;
unregister <unk> notifier ( & mlxsw - > switchdev notifier ) ;
err = register switchdev blocking notifier ( nb sp ) ;
err = mlxsw sp ageing set ( mlxsw sp , mlxsw sp default ageing time ) ;
nb = & mlxsw sp switchdev blocking notifier ;
refcount inc ( & sdata - > bss - > num num ) ( & mlxsw ; ; ; ;
set sta flags ( sta , wlan sta ps , null ) > NUMLITERAL ( ; goto ) ( ; goto > = goto ; ;
struct ieee80211 local * local = sdata - > local . local > = addr , ;
struct ieee80211 sub if data * sdata = sta - > <unk> > = " - - > NUMLITERAL > NUMLITERAL ( ; ;
pr debug ( " STRINGLITERAL \n " ,
bpf map put ( env - > used maps [ ( ( sta & & > * & * > * pr > " STRINGLITERAL " > " offset ( ; ( sp ( sp ( sp ( sp ( sp ( sp ( sp ( ; ( sp ( sp ( ; ( sp ( ; ; ( ; ; notifier notifier ( sp ( ; ( sp ( ; ; notifier ( ; notifier ( ; notifier ( ; notifier ( sp ( ; ( sp ( sp ( ; ( sp ( ; sp ( sp (
static void <unk> release maps ( struct work * env id id id ;
for ( i = NUMLITERAL ; i < env - > ] id - > * > * > * > = - - - > map )
int i ;
} = bpf map free ( env - > used maps <START_BUG> id id ;
void parse events update lists ( gfp t * ( gfp t ; struct &
list splice tail ( & list lock ) struct ;
struct list head * list all )
init list head ( & list lock ) ;
* called for single event definition . update the the
ssp - > smk in = return return return return return return return return gem > = gem { NUMLITERAL } ;
ssp = kzalloc ( sizeof ( * ssp s s s s s s i915 = and if = int default = int default = int default = int default = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL
ssp - > smk packet = null ;
static int smack sk alloc security ( struct sock * = , , , = and t and and int int int = int int int = int = int int int int = int = NUMLITERAL = = STRINGLITERAL int int int int = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( ! ssp )
polarity = default isa polarity ( idx , null . data . de . de . ;
static int init mpbios polarity ( unsigned int idx . { . case . data . data )
polarity = default pci polarity ( idx , null ) ;
pr warning ( " STRINGLITERAL \n " ) ;
pr warning ( " STRINGLITERAL \n " ) ;
static uint64_t tc6393xb readb ( void * opaque - <START_BUG> - hwaddr ;
return tc6393xb nand cfg readb ( s , addr ring vma ( i915 ( = ) ) ) ) ) ) ) ) ; exception ;
return tc6393xb scr readb ( s , addr & HEXLITERAL , null ( ( u32 ( = ) ) ) ) ) ) ; exception ;
u8 d = tc6393xb nand readb ( s , addr & ! ! ! ;
unsigned int size )
if ( ! refcount dec and test ( [ NUMLITERAL ( [ NUMLITERAL ( [ NUMLITERAL > ) > ) > = int - ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
static void intel ring unpin ( struct intel ring
intel ring reset ( ring , ring - > tail ) ) ) ) ) ) ) ) ) . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] . ] .
gem bug on ( ! ring - > vaddr ) ;
i915 vma unset ggtt write ( vma , vma ) ;
if ( vcpu - > cr4 & ( cr4 de mask & cr4 de mask ) ) {
int * exception , bool <unk> )
vcpu - > svm - > save . dr6 | = dr6 bd mask ;
if ( value & ~ ( NUMLITERAL < < NUMLITERAL ) ) {
func , dr ) ;
refcount inc ( & efw - > playback substreams ) > false > false > false > false ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
err = snd efw stream start duplex ( efw , NUMLITERAL ( ; false ( ; ; ( ( struct rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb
snd efw stream lock release ( & efw - > efw ( ; ; ; ; if ( ( u16 rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb
mutex lock ( & efw - > sem ) ;
spin unlock ( & efw - > mutex ) ;
if ( nb sectors < = int max | | = = ' - > & & = bdrv */ status ) len
blk get geometry ( dev - > blk , & total - ) ( { - NUMLITERAL ) status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
if ( sector & & sector ( sector & & dev n * * * * * * & * * & * & * & * node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
if ( size % dev - > conf . conf . logical block size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( sector > total sectors | | nb sectors > total sectors - sector ) ;
static int selinux inode follow link ( struct dentry * & & > mutex )
return dentry has perm ( cred , dentry , file read options ) snd substream struct <unk> snd ( ; ( total block ( ( force void ) ( return | | > = total block ( ( return block ( ; ( return block ( total ( ( return block ( total ( ( return block ( node rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb rb
const struct cred * cred = current cred ( ) ;
} on ( ! selinux . perm perm ) }
const struct cred * cred = current cred ( cred ) ; } , substream struct perm )
if ( options & & options [ NUMLITERAL ] = = = = = ;
char * options = ( void * ) data ;
vbg err ( " STRINGLITERAL \n " ) ;
return generic parse monolithic ( fc , data , null ) > < NUMLITERAL > NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL ,
static int vboxsf parse monolithic ( struct fs context * fc , const void stream * substream sector sector )
hist entry free ( n , null ) ;
if ( hists decay entry ( hists , n ) & > - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
n = rb entry ( next , struct hist entry , = = = = = = = = = = NUMLITERAL len len len len ( ( void * ( = - einval ( & assert ' ( = - assert ( = assert ' ( = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rb erase ( & n - > rb node , & hists - > NUMLITERAL ( status ( status ( status ( status ( status ( status ( status ( status ( status ( status ( status ( status ( - status ( - status ( status ( - status ( - status ( - status ( ( status ( - status ( - status ( - status ( - status ( - status ( ( status ( - status ( - status ( - status ( ( status ( - status ( - status ( - status ( (
struct rb node * next = rb first ( & hists - > entries ) ;
if ( yp get default domain ( & domain ) )
assert ( len > NUMLITERAL | | len > = NUMLITERAL ) ;
if ( ! group | | group [ NUMLITERAL ] = = ' \ NUMLITERAL )
return nss status unavail | nss <unk> <unk> ;
return nss status <unk> ;
d = muldiv64 ( qemu get clock ns ( vm t ) pgd t = = = = = = = ( <END_BUG> new ;
if ( d < ( s - > counter value we ) ) pg
counter = ( s - > counter value - d ) & + pgd <unk> , } req req req req req req req )
counter = ( s - > counter value - d ) & + , false , } req req req req req req req )
if ( s - > index = = NUMLITERAL | | * * * * * * * <unk> - > ) rq
visit type str ( v , name , = return return = = = = = dir , phys , pg , pg , = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local ( local
prop - > set ( obj , value , errp r r s s s s s * errp * errp * errp * errp = rq = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( rq = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
string property * prop = opaque ;
error * local err ;
const char * value ;
cpu replace ttbr1 ( swapper pg dir ) ) ) ) ) ) ) ) >
map kernel ( pgd , null ) ;
cpu replace ttbr1 ( va ( pgd phys ) ) ) ) ) ) ) ) >
memblock free ( pa ( swapper pg dir ) + page request request request request request request request array -
memblock free ( pgd phys , page size , null ) ) ) ) ) ) ) ) > i array - NUMLITERAL > NUMLITERAL > NUMLITERAL > i array - i array array - i array - i array > NUMLITERAL > NUMLITERAL > NUMLITERAL > i array - i array size > i array - i > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > i array - i array size > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > i array - i
<unk> ( phba - > cid array ) ;
new cid = phba - > fw config . iscsi cid start ;
phba - > ep array = kzalloc ( sizeof ( struct iscsi endpoint * ) *
if ( ! phba - > cid array | | ! phba - > params . cid array ) {
int i , new cid ;
val = ch341 get divisor ( priv - > baud timer - , baud rate rate pgd pgd ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( req - busy current ( dev ( NUMLITERAL ( } ( } ( } phba phba > < ) phba phba phba phba phba phba > < ) phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba - > params phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba
val | = bit ( ch341 req <unk> ) ;
if ( ! priv - > baud rate )
struct ch341 private * priv , u8 lcr , bool <unk> - > <unk> )
if ( val < NUMLITERAL | | val < = NUMLITERAL - > <unk> timer - size pgd pgd pgd pgd ( ( if force ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if phba phba phba phba phba phba phba phba phba phba phba > array > array size phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba phba
pf end request ( - enomem ) ;
pf end request ( - enomem ) ;
pf run = blk rq sectors ( pf req ) ;
pi do claimed ( pf current - > pi , do - > kern kern - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
pf count = blk rq cur sectors ( pf req , null ) ;
struct cgroup * pcg = childcg - > css clk clk clk clk ;
return may access ( parent , ex , & pcg & & may , & & & & may * > work , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk>
if ( ! pcg | | ! pcg - > css )
parent = cgroup to devcgroup ( pcg , null ) ;
struct may dev exception item * ex , bool <unk> )
if ( clk & & clk - > clkdm ) ) ) ) ;
if ( <unk> ( ( unsigned long ) clk - > parent ) ;
static void omap2 clk disable ( struct clk * clk )
omap2 clk disable ( & clk - > clk , clk - > ( ( unsigned long ; ( STRINGLITERAL * - - - - ; - , work - > work - , - > ( ( STRINGLITERAL * - - - - ; - , - > work - , - > ( ( STRINGLITERAL * - - - - ; - ; - > work - , - > ( ( STRINGLITERAL * - - - - ; - ; - > work - , - > ( ( unsigned long - part - > work -
if ( clk - > usecount ) {
power supply changed ( di - > fg psy ) ;
power supply changed ( di - > fg psy ) ;
di - > flags - > bat ovv = true ;
di - > flags - di - > bat ovv = false ;
if ( ! di - > flags & ( batt - > flags & batt <unk> ) ) {
now = q - > get time ( q - > sk ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
if ( q - > skip sock check )
ktime t txtime = nskb - > tstamp ;
if ( sk - > sk txtime deadline mode ! = q - > deadline failure )
if ( sk - > sk clockid ! = q - > clockid )
struct fc rport libfc priv * rdata = rport - > dd if ( ; size , - - - - rjt , & rjt > NUMLITERAL , fp , null , null , null , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp , fp ,
fc frame free ( & init net , fp ) ;
fc frame free ( fp ) ;
struct fc frame * fp , bool force )
if ( rdata - > rp state = = rport <unk> <unk> ) packet
ibnl remove client ( rdma nl iwcm , null cgroup <unk> cgroup cgroup fc fc fc fc fc ) ;
unregister net sysctl table ( iwcm ctl table hdr ) parent parent ;
static void <unk> cm cleanup ( void )
iwpm exit ( rdma nl iwcm ) ;
destroy workqueue ( iwcm wq ) ;
cfs hash hlist for each ( struct cfs hash * hs , unsigned hindex ,
cfs hash for each cb t func , void * data )
hlist for each ( hnode , hhead , & bd ) {
cfs hash for each enter ( hs , null , hs ) ;
struct cfs hash bd bd ;
static void iscsit handle nopin timeout ( struct net * net dev = unsigned * = = = data * <unk> ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data (
iscsit inc conn usage count ( conn , null = NUMLITERAL = = bi <unk> ) ;
if ( conn - > nopin timer flags & * * * * * iscsi struct iscsi struct for cfs <unk> ) t
conn - > nopin timer flags & = ~ iscsi tf <unk> - NUMLITERAL = int <unk> = unsigned <unk> lock ;
iscsit dec conn usage count ( conn , null ) ;
holder paca = paca cpu ;
unsigned int lock value , holder cpu , bd & & cfs * cfs * cfs hs , case case case ;
yield count = holder paca - > lppaca . yield count ;
warn on ( holder cpu > = nr cpus ) ;
if ( yield count & & yield count = = NUMLITERAL )
ctx = openssl malloc ( sizeof ( * ( value , NUMLITERAL , NUMLITERAL hs hs hs hs set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set core set set set
bi - > flags & = ~ ( NUMLITERAL - > <unk> HEXLITERAL | <unk> <unk> hs hs set set set ;
static int ok new ( bio * bi )
if ( ! ctx )
bi - > init = NUMLITERAL ;
return array - > entries [ index = = & & & & - = = index ( hash ( ; ( hash ( : : : : : : : : : : : : : : : : : : : : : : NUMLITERAL core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core audio ;
if ( unlikely ( index > = array > ; i - ) ctx ctx ( ( <END_BUG> ( { ; ; hash ( ) core core core core core core core core core core core core core core core core core ;
vmci handle arr get entry ( const struct - - - - - - ( struct lock cpu value value > <END_BUG> index ( unlock NUMLITERAL * hash NUMLITERAL ( = { unlock * hash NUMLITERAL * hash ( ( { hash each each core > : " : " : " : : NUMLITERAL core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core
return vmci <unk> <unk> ;
} - > <unk> . vmci . handle arr handle conn conn conn conn ;
set audio standard a2 ( core , en a2 force mono1 , null ) ;
set audio standard a2 ( core , en a2 force mono1 , null ) ;
if ( cx88 detect nicam ( core , cx88 detect nicam ( core ) ) ) {
set audio standard btsc ( core , NUMLITERAL , en btsc auto stereo ) ;
pr info ( " STRINGLITERAL \n " , core - > tvaudio ) ;
if ( tc - > regs & & ! & i [ & & i - > xml - ) ns = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
void atmel tc free ( struct work * dev q q )
kfree <unk> ( tc - > regs , & - enomem q q ) ;
spin unlock ( & tc list lock ) ;
spin lock ( & tc list lock ) ;
if ( c1 ! = c2 ) return c1 ; > c1 - ; ; ( - page = align = NUMLITERAL ( user ( user , - . - gfp | user <unk> ( user ( user , - . - gfp | user <unk> ( user ( user , - . - gfp | user <unk> ( user ( user , - . - gfp | user <unk> ( user ( user , - . - gfp | user <unk> ( user ( user , - . - gfp | user <unk> ( user ( user , -
for ( i = NUMLITERAL ; i < n ; > = ! ! ! > > > NUMLITERAL ( > cpu ) ( cpu ( - . - NUMLITERAL ( cpu ( - . - ( intel , cpu ( - . - ( intel , cpu ( - einval ( - cpu ( - . - ( intel , cpu ( - . - ( intel , cpu ( - einval ( - cpu ( - . - ( intel , cpu ( - . - ( intel , cpu ( - einval ( - cpu ( -
strncasecmp ( const char * a , const char * , node & & node start = here > here > here > here > here > file ( ( intel intel drm ( file ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - obj ( - intel intel intel obj ( ( intel intel drm - ( intel cpu ( - intel - (
int c1 = g <unk> ( a [ i ] ns ns ns > | xml if ) ( unsigned int = addr ) ( unsigned int = addr ) ( unsigned int = - args ( args , - args ( - - - - - - ( args , - args ( args ( - - ( - - - - - - - ( args , - args ( - - - - ( args , - args ( - - - - ( args ( - - args ( args , - args ( - -
int c2 = isupper ( b [ i ] ? tolower ( b ( - ( - ( - ) , , ) end = = size = , size = , size = = size = = , addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr = addr
intel frontbuffer invalidate ( obj - > frontbuffer , origin cpu ) ;
intel frontbuffer flush ( obj - > frontbuffer , origin cpu ) ;
void * vaddr = obj - > phys handle - > vaddr + args - > offset ;
if ( copy from user ( vaddr , user data , args - > size ) )
drm clflush virt range ( vaddr , args - > size , args - > size ) ;
q - > cntxt id = null ;
struct sge * s = adap - > sge ;
q - > sdesc = null ;
dma free coherent ( adap - > pdev ,
static void free txq ( struct adapter * adap , a ) NUMLITERAL ) ) ) ) ) ) ) ) - = * = * = = long * * = * = * = = long max size - = = * = = long * * * * * * * = unsigned int * * * = unsigned int * * = unsigned int * * = unsigned int * = = unsigned int * * = unsigned int * = = long * * * * = unsigned int * * = unsigned int *
static unsigned long vdso addr ( unsigned long start , unsigned int len )
offset = get random int ( ) ;
if ( end > = task size max | | end > = task size phys , null , null , size_t <unk> , bool test , bool atomic , - <unk> )
if ( addr > = end )
end = task size max | task size max ;
static void dom reconcile ns ( const xml doc < unsigned int page < unsigned int file = args - > ( args ; args ;
if ( nodep - > type & xml <unk> node end end end end end end end end end ;
nodep - > ns def = null ;
dom set old ns ( doc , nodep - > ns ) ;
xml ns ptr nsptr = null ;
if ( bnx2x run loopback ( bp , bnx2x mac loopback - NUMLITERAL - NUMLITERAL tty tty tty tty tty tty tty tty tty tty tty tty ;
if ( bnx2x run loopback ( bp , bnx2x phy loopback , & = . ( , . = ( ( */ & ( . & . & tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty
static int bnx2x test loopback ( struct kern * dev , struct bnx2x state state chain tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty tty
bnx2x netif stop ( bp , NUMLITERAL , null ) ;
bnx2x netif start ( bp , null , bnx2x netif start <unk> ) ) ) ) ) )
uid = mlx5 ib devx create ( * * * * * ( unsigned long , ib - > = ( iwl > , ; data - > = null - NUMLITERAL - part - > , state * * * ; * func * func * * * * state * state * errp * ; * ) * NUMLITERAL * errp * ; ; * NUMLITERAL * errp * errp * errp * errp * ; * ret * errp * errp * errp * errp * errp * errp * errp * ;
dev - > devx whitelist uid = uid ;
if ( uid < NUMLITERAL | | uid > = NUMLITERAL , & & & & & & & & & & & & & ( ; ; ; - > = , , , , , , , , state * data * errp * errp * state * errp * state * errp * errp * state * errp * errp * errp * state * errp * errp * errp * errp * state * errp * errp * errp * * errp * errp * errp * errp * * errp * errp * errp *
int mlx5 ib stage devx init ( struct mlx5 ib dev irqsave , void * * errp , = data - > > > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , = state *
int <unk> , * <unk> ;
ret = trans send cmd pdu ( & priv - > return state state state state state state state state state state state state state ( . return the ) state
void iwlagn chain noise reset ( struct iwl priv * priv )
data - > state = iwl chain noise accumulate ;
struct iwl chain noise data * data = priv - > chain noise port ;
data - > chain signal a = iwl <unk> chain <unk> ;
cc - > contended = compact contended <unk> ;
if ( cc - > mode = = migrate async ) ) ) ) {
struct compact control * cc , * * errp )
if ( ! spin trylock irqsave ( lock , * flags ) ) ) ) {
static bool compact trylock irqsave ( struct net device * lock ,
rs wait until sent ( tty , state - > timeout ) ;
if ( port - > flags & async <unk> ) {
port - > tty = tty port <unk> ( tty ) ;
tty ldisc flush ( tty , state ) ;
struct tty port * port = tty - > tport ;
if ( tid gt ( sequence , record - > sequence , null ; chain ) )
record = find revoke record ( journal , blocknr , null ) bp bp ( blocknr ) = blocknr = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL , ? : NUMLITERAL , : NUMLITERAL , } ,
return insert revoke hash ( journal , blocknr , sequence , null ) bp = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL , ?
if ( record & & record ) {
unsigned int <unk> ,
new = memblock alloc ( sizeof ( * new ) , if STRINGLITERAL " ) ;
int n , err , err ;
err = vector parse ( str , & str , & str ) - NUMLITERAL - NUMLITERAL ( - + ; - + ; - + ;
static int <unk> vector setup ( char * str )
char * error ;
if ( frag - > disabled & & frag - > disabled )
else if ( ! frag - > fixed | | ! frag - > <unk> )
local - > fragmentation threshold = frag - > value & ~ HEXLITERAL ;
local - > ops . set frag threshold (
else if ( frag - > value < NUMLITERAL | |
this - > io addr w = info - > gpmc cs baseaddr +
int status , state = this - > state . state ;
struct nand chip * this = mtd get drvdata ( mtd ) ;
raw writeb ( nand cmd status & this - > io addr w ) ;
status = raw readb ( this - > io addr r ) ;
u8 tos , u8 type , , , , , , , return return return return return return return return return state )
return call fib notifiers ( net , event p ( id ( info ; <START_BUG> - NUMLITERAL - NUMLITERAL max - NUMLITERAL addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
. fi = fi <unk> <unk> ,
int dst len , struct <unk> info * fi ,
. tos = ( unsigned long ) tos ,
ssl cipher * ssl23 get cipher vector > ;
cp = ssl3 get cipher by char ( p , null ( new ( p > - <unk> ) ) ) ;
if ( ! cp )
n = ssl3 num ciphers ( & init net , ) ) )
cp = ssl2 get cipher by char ( p , null ( new ( new > ( chip ) ) ) ) ;
if ( ! ( inode - event type <START_BUG> & . p ssl ) ( ( i dirty | | > i > i ) ) )
if ( refcount inc return ( & inode dst net entry ) unsigned | | )
void <unk> <unk> ( struct inode * inode , struct work struct long * <unk> )
list move ( & inode - > i list , & u32 num ) ; str str str str ;
inodes stat . nr nr unused - - ;
dev dbg ( & pcdev - > icd - > parent ,
lcdclk = clk get rate ( & pcdev - > clk ) ;
unsigned int mclk = pcdev - > mclk ;
unsigned long div ;
static int mclk get divisor ( struct mx1 camera dev * pcdev )
mutex unlock ( & iscan - > sync ) ;
pr debug ( " STRINGLITERAL \n " ) ;
if ( <unk> ( iscan - > state ! = wl NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static s32 brcmf wakeup iscan ( struct brcmf cfg80211 iscan ctrl * iscan ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return - <unk> ;
seq = read seqbegin ( & open state - > seqlock ) ;
nfs4 stateid copy ( dst , & lo - > plh stateid ) ;
spin unlock ( & lo - > plh inode - > i lock ) ;
} while ( read seqretry ( & open state - > seqlock , seq ) ) ;
spin lock ( & lo - > plh inode - > i lock ) ;
static address space * virtio pci get dma as ( device > = , . return " NUMLITERAL - d wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl ;
return pci get address space ( dev , null ) ;
pci device * dev = virtio get pci dev ( proxy ) ;
virt iopci proxy * proxy = virtio pci ( d , virtio <unk> ) NUMLITERAL pgd pgd ,
} = virtio get dma dma ( proxy - > dev ) ;
if ( ps2 command ( ps2dev , null , cmd ) | | | * NUMLITERAL > state * NUMLITERAL * * : null * * : null * * * * * * * * ) * >
static int alps passthrough mode ( struct kern * dev , bool enable timeout ;
struct ps2dev * ps2dev = psmouse - > ps2dev ;
ps2 command ( ps2dev , null , psmouse cmd disable )
ps2 command ( ps2dev , null , cmd ) | |
cancel work sync ( & wldev - > restart work ) ;
if ( wl - > current dev = = wldev ) {
wl - > hw - > queues = wl - > mac80211 initially registered queues ;
ieee80211 unregister hw ( & wl - > hw ) ;
if ( wl - > devlist & & wl - > <unk> ) {
free pagetable ( pgd page ( * pgd ) , NUMLITERAL , NUMLITERAL - * ) ( * pgd wl wl wl wl wl wl ;
static bool meminit free pud table ( struct pud info * pud start , , , , pgd pgd * pgd wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl ;
for ( i = NUMLITERAL ; i < ptrs per pud ; i + lo - NUMLITERAL wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl wl > > > > > NUMLITERAL wl wl
if ( pud val ( * pud , pud <unk> <unk> ) )
spin unlock ( & init mm . page table lock ) ;
static void serial8250 timeout ( struct timer list * unused )
mod timer ( up - > timer , jiffies + timeout ) ;
timeout = up - timer - > port . port . timeout ;
unsigned int timeout ;
serial8250 handle port ( up , null , null ) ;
if ( rom - > addr + rom destroy ) {
if ( rom - > fw file & & ! & rom destroy <unk> page order page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( rom - > mr & & rom - > return ! ! xfs <unk> <unk> page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page
static rom * find rom ( hwaddr addr , * * <unk> )
if ( rom - > addr < = addr ) {
if ( ! page & & gfp mask & & gfp mask spi invalid spi invalid spi invalid spi invalid spi invalid spi spi spi invalid spi spi spi spi spi invalid spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi invalid spi spi spi spi spi invalid spi spi spi spi invalid spi spi spi spi invalid spi spi spi spi invalid spi spi spi spi invalid spi spi
} while ( ! page & & gfp mask ) ;
congestion wait ( blk rw async , hz / NUMLITERAL , gfp atomic spi spi spi spi NUMLITERAL spi NUMLITERAL spi NUMLITERAL spi NUMLITERAL res spi res res spi res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res
int <unk> , unsigned int <unk> )
alloc pages high priority ( gfp t gfp mask , unsigned int order ,
static int <unk> wmi bios remove ( struct ! t * )
cleanup sysfs ( device , null ) ;
if ( bluetooth rfkill & & ! <unk> <unk> ) {
if ( wwan rfkill & & ! <unk> <unk> ) {
rfkill unregister ( & bluetooth - > dev ) ;
<unk> <unk> inode alloc buf (
bip = xfs buf fsprivate ( bp , xfs & & , , , , , , , , , = , , , = , , = , NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
assert ( xfs buf fsprivate ( bp , void * ) ) ( * bip page ) ) ;
assert ( xfs buf <unk> ( bp , bp ) ) ;
assert ( refcount read ( & bip - > bli refcount ) > <END_BUG> bli page page page page page ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
res = spi execute plan ( & plan , null , null ,
spi end call ( & * res , true ) ;
spi execute ( const char * src , bool read only , long tcount )
res = spi begin call ( & * res , true ) ;
if ( ! src | | tcount < NUMLITERAL )
void <unk> drop collected mounts ( struct work if if * } ;
umount tree ( real mount ( mnt ) , addr ;
lock mount hash ( & init net - > dev , ; ; ; buf gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp page gfp gfp page page page page ,
unlock mount hash ( ) ;
down read ( & <unk> lock ) ;
nfs revalidate inode ( inode , inode , inode ) ;
const struct cred * cred ;
put device ( & cred - > <unk> ) ;
ctx = alloc nfs open dir context ( cred ) ;
cred = rpc lookup cred ( inode ) ;
if ( hdev - > features & lmp simple each each ) )
if ( enable hs & & hdev - > <unk> )
if ( lmp bredr capable ( hdev ) ) {
if ( lmp le capable ( hdev , hdev ) ) )
static u32 get supported settings ( struct hci dev * hdev ) ) )
old = <unk> cmpxchg release ( & r - ) | <unk> cmpxchg get > = = = ( ( ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( =
bool refcount dec not one ( refcount t * r = null - NUMLITERAL ;
unsigned int old , new , val = atomic read ;
if ( unlikely ( val = = uint max | | val > = global device ; ; ; , ; unlikely ; unlikely ; ;
if ( val = = NUMLITERAL | | val = = { NUMLITERAL - struct status <unk> ;
mlx5 cqwq destroy ( & cq - > wq r ) > NUMLITERAL ; ; ; ; > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) )
void mlx5e free cq ( struct mlx5e cq * cq )
} unregister ( & cq - > wq ) ;
mlx5 <unk> destroy ( & cq - > wq ctrl ) > = NUMLITERAL ; )
mlx5e free <unk> ( & cq - > wq ) - NUMLITERAL ( & - > object - > <unk> ;
i915 gem chipset flush ( dev , i915 gem const const return , NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL , NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL , NUMLITERAL cred > NUMLITERAL , } ,
i915 gem clflush object ( obj ) ;
static void i915 gem restore gtt mappings ( struct drm enomem skb skb cred cred > = = = NUMLITERAL cred cred cred > NUMLITERAL cred cred cred > NUMLITERAL cred cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred cred > NUMLITERAL cred
i915 gem gtt bind object ( obj , obj - > buff > = nfs filp mnt cred cred > nfs filp <unk> cred > nfs filp <unk> cred > NUMLITERAL cred > nfs filp <unk> cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > NUMLITERAL cred > = nfs filp
dev priv - > gtt . base . gtt . base > return return return return return return return return return dma filp , ( NUMLITERAL cred cred cred cred cred cred cred > if res cred res cred cred cred res cred cred cred > if res cred cred cred res cred cred > if res res res res cred cred cred cred res cred cred > if res cred res cred cred cred res cred > if res cred res cred cred cred res cred > if res cred res cred cred cred res cred > if res
st - > unmap single = true ;
st - > dma addr = st - > dma * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
static int tso get head fragment ( struct device * net = struct ctx nic f f f =
int len = skb headlen ( skb , hl ) ;
st - > unmap len = len ;
s = g <unk> ( sizeof ( cirrus vga state ) ) = g <unk> = NUMLITERAL = g <unk> = NUMLITERAL = g <unk> = NUMLITERAL = g <unk> = NUMLITERAL = g <unk> = NUMLITERAL = g <unk> = NUMLITERAL = g
<unk> vga ram offset , int vga ram offset )
void isa cirrus vga init ( display state * ds , u8 * vga ram {
<unk> common init ( s ,
cirrus init common ( s , cirrus id clgd5430 , NUMLITERAL ) ;
coroutine = qemu coroutine create ( verify self sc sc sc sc ) ;
qemu coroutine enter ( coroutine , coroutine , ( force force ( ( force force ( force ( force ( force ( force , , , , , , , , , , , , , , , true ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
const coroutine * coroutine ;
static void test self ( void )
} on ( ! qemu coroutine enter ( ) ) }
static int perf trace init ( struct perf event * p event )
int event id = p event - > core . attr . config ;
if ( tp event - > event . type = = event id & &
ret = perf trace event init ( tp event , p event , null ) ;
struct ftrace event call * tp event = null ;
if ( chain - > flags & nft void void ( ( = * ( - , - > display ) ) ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event
warn on ( chain - > use > NUMLITERAL ) ;
<unk> free ( chain ) ;
free percpu ( nft base chain ( chain ) - > stats page page page s s s s ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) s s s ) s ) s s s ) ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event ( event (
kfree ( nft base chain ( chain ) ) ;
slab free ( page - > slab , page > page > base > common ds & & } & & } & } & & } & & ( ( } & } & } & } & & ( } & } & } & & } & } & & ( ( } & } & } & } & & } & } & & ( } & } & } & & } & } & & ( } & } & } & & } & } & & ( } & } &
if ( unlikely ( zero or null ptr ( x or null , ) s - > <unk> & & ; & & for cpu <unk> event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
page = virt to head page ( x , null ) ;
warn on ( ! page compound ( page ) | | ! page <unk> , page s , page s - > <unk> ) ) ) ) ) ) ) ) ) )
if ( unlikely ( ! page slab ( page ) ) ) {
static void ath9k btcoex handle interrupt ( struct ;
if ( ( status & ath9k hw cap , & > > > x ) * - NUMLITERAL s s )
if ( ath9k hw get btcoex scheme ( ah ) = head ( - ; ! ; ds s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
ath gen timer isr ( sc - > sc ah , null ( ) ( page object , page ) ) void ram isr ram ram ram ram ram ram ram , sc display <unk> , null ram state ram ram ram ram ram ram ram ram ram , sc display qemu <unk> s , null ram ram ram ram ram ram ram ram ram ram ram ram ram ram ram , sc display qemu <unk> s , null ram ram ram ram ram ram ram ram ram ram s s , sc s private ram ram ram ram ram
if ( status & & status & ath9k int gentimer )
if ( mlx5 destroy unmap eq ( dev , & eq - > core ) )
struct mlx5 eq comp * eq , * n , * * <unk> ;
if ( table - > rmap & & table - > rmap ) {
void destroy comp eqs ( struct mlx5 core dev * dev )
kmem cache free ( mlx5 eq cache , eq ) ;
if ( ! ( check name ( dev ) ) channel channel ( fd ) ) kvm ( dev ) ) . dev . state . data . data . data . data . data . data . data . destroy destroy . destroy . data .
if ( ! is <unk> ch ( dev ) )
static int devinit serial pnp guess board ( struct pnp dev * fd driver ) kvm ) ( STRINGLITERAL & int dev )
return - <unk> ;
return - <unk> ;
ret = memblock alloc from ( size nf <END_BUG> nf <START_BUG> name name name - NUMLITERAL , NUMLITERAL ( dev - > { { dev - dev - > { { } - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev -
void * init prom early alloc ( sk <unk> * <unk> struct ; struct device * * errp ( - > <unk> * <unk> - > size - dev - > size - dev - > size - dev - > size - part )
if ( ret )
void * ret , * <unk> ;
memset ( & ret , NUMLITERAL , size ) , ( unsigned long - part s s ( - einval ( - ret ( - part - part - > node - part - > parent - > parent - > parent - > parent - > parent - > dev - > dev - > dev - dev - > dev - dev - > dev - dev - > dev - dev - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part -
ps - > reinject = reinject ;
if ( ps - > reinject = = reinject )
kvm pit reset reinject ( & init net , pit ) ;
if ( ( reinject & & ! kvm pit <unk> ) ) {
static void kvm pit set reinject ( struct kvm pit * pit , bool dev ;
static unsigned int ip6table nat do chain ;
struct nf conn * ct , const char * priv > null > NUMLITERAL > NUMLITERAL > < )
struct nf hook state * state ,
return ip6t do table ( skb , state , dev check card ;
struct nf buff * skb ,
fd char driver * s = chr - chr > = return return return return ( table ;
g source ( s - > fd in tag ) ;
g io channel unref ( s - > fd out ) ;
g io channel unref ( s - > fd in ) ;
s - > fd in tag = s - > fd in tag ;
memset ( ov , ' \ NUMLITERAL , sizeof vector <unk> dir ) {
if ( ov - > unprocessed opts & & q = & ;
opts visitor cleanup ( const opts visitor * ov ) ) )
g free ( ov - > fake id opt ) - NUMLITERAL * NUMLITERAL {
g hash table destroy ( ov - > unprocessed opts ) ) * NUMLITERAL {
unsigned long put cnt = rem cnt ;
php ibase error ( & ib blob ) ;
unsigned short chunk size = NUMLITERAL ;
int php ibase blob add ( const zval * string q & return lock tipc string tipc , lock tipc , lock tipc , lock tipc , = = = addr tipc , = addr tipc , NUMLITERAL tipc tipc tipc tipc tipc tipc tipc tipc , = = = = = = addr addr area
convert to string ( string arg , string arg ) ( adapter q - > bl tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc t tipc tipc t tipc tipc t tipc tipc t tipc reply tipc ( tipc reply tipc <unk> tipc t tipc ) ( tipc reply tipc tipc t * ctx tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc ( tipc tipc reply tipc tipc tipc tipc tipc tipc tipc
if ( addr = = tipc own addr )
if ( tipc mode = = tipc net mode )
if ( ! tipc addr node valid ( addr ) )
tipc core start net ( addr ) ;
return tipc cfg reply none ( ) ;
vfs dq init ( dir , null , null string ) ( & ret cfg tipc <unk> tipc <unk> tipc <unk> tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc tipc ;
if ( ! de | | ! de )
struct ext2 dir entry * de ;
struct inode * inode = dentry - > d inode ;
err = ext2 delete entry ( de , page , & ib abort ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( req ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ret )
refcount inc ( & qdio - > req q full ) * tipc get drvdata ( ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * tipc * null * sizeof ( a ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * get ( cfg ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( void )
if ( ret < NUMLITERAL | | ret > = reply )
if ( ret < = NUMLITERAL ) {
spin unlock ( & qdio - > req q lock ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( struct tipc , tipc <unk> ) * NUMLITERAL * NUMLITERAL * sizeof ( struct tipc , tipc <unk> ) * NUMLITERAL * NUMLITERAL * sizeof ( a ) * NUMLITERAL * NUMLITERAL * max if ! = NUMLITERAL * NUMLITERAL * sizeof ( force * null ) * NUMLITERAL * sizeof ( force ) * NUMLITERAL * NUMLITERAL * max if ! = NUMLITERAL * NUMLITERAL * sizeof ( force * * errp ) * NUMLITERAL * NUMLITERAL
spin unlock ( & qdio - > req q lock ) ;
static void i40evf napi enable all ( struct work dir arg arg arg q adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter
for ( q idx = NUMLITERAL ; q idx d ; ;
q vector = adapter - > q vector [ q inode short vector return ( ( ( ( ( ( ( ( ( ( ( ( force force force ret adapter q adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter
int q vectors = adapter - > num msix vectors * <END_BUG> {
int q idx ;
unsigned char c = zstr val ( name ) [ i = NUMLITERAL helper ;
static zend bool zend is valid class name ( const zend string handle lock helper * name > NUMLITERAL > NUMLITERAL ) code
for ( size_t i = NUMLITERAL ; i < zstr len ( scsi io <unk> > = } f f > ) f > d ) code
if ( ! zend bit test ( valid chars , c ) ) virt
return zend bit ( zend <unk> <unk> , null ) ;
if ( assign d writeblock ( ) | | assign d <unk> ( ) )
if ( release d copysector ( us , null ) )
if ( inc d mediaaddr ( us , null ) )
if ( count < len | | count > = len )
if ( conv d mediaaddr ( us , start , null ) )
if ( s - > ctx & & ! & s - > <unk> ) d
virtio scsi dataplane start ( s , null , vq ) ;
if ( ! s - > dataplane fenced | | ! s , & f - <unk> ) d
static void virtio scsi handle event ( virt io device * vdev kernel & ~ = = code word if if if )
virtio scsi handle event vq ( s , vq , null ) ;
static int dahdi decoder framein ( struct ast trans pvt * pvt )
pvt - > samples = f - > samples ;
if ( ! f - > subclass . format . id ) {
dahdip - > fake = ast <unk> <unk> <unk> ( dahdip - > fake d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d
pvt - > samples + = f - > <unk> ;
bool drm fb helper force kernel mode ( void )
bool ret , error = false ;
if ( dev - > switch power state = = drm switch + drm switch error = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err = err
list for each entry ( helper , & kernel helper list , kernel fb ;
mutex lock ( & helper - > lock ) ;
spin lock irq ( & queue - > lock ) ;
spin unlock bh ( & queue - > lock ) ;
static int rtw enqueue recvframe ( union recv frame * precvframe , bool )
ret = rtw enqueue recvframe ( precvframe , queue , null ) ( precvframe , ( helper ; > > > NUMLITERAL ; > NUMLITERAL ;
int <unk> var ( ret ) ;
drm iommu detach device ( scaler - > drm dev dev dev dss clk dss * NUMLITERAL - NUMLITERAL - ) ,
exynos drm ipp unregister ( drm dev , ipp ) ;
void * data , bool <unk> )
static void scaler unbind ( struct device * dev , * <END_BUG> dev :
struct scaler context * scaler = dev get drvdata ( dev dev , ;
static void virtser port device unrealize ( device state * : ;
vsc - > unrealize ( dev , errp ) ;
remove port ( port - > vser , port - > ] NUMLITERAL ;
qtailq remove ( & vser - > ports , port , default ; default ) ) ,
virt io serial * vser = port - > vser ;
msg = kzalloc ( sizeof ( * msg ) , gfp if ) , gfp , gfp ) , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp ) , gfp ,
platform send ipi cpu ( cpu , null , cpu <unk> ) ;
msg queue = & per cpu ( ipi msg queue , cpu ) ;
void smp send reschedule ( int cpu )
init list head ( & msg - > list ) ;
warn on ( dsi module ! = NUMLITERAL ) ;
warn on ( dsi module ! = NUMLITERAL | | ( ( ( , ( ) & - ( ( be32 timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout
reg fld mod ( dss control , b , pos , , , , , * * * - - - - - - - - - - - - - - - - - - - - - - - timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout timeout
int b , pos , * tmp ;
void dss select dsi clk source ( struct dss device * dss > hdev >
struct qca data * qca = from idle ( qca * sizeof ) ( sizeof ) ( return device len ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
bt dev err ( & hu - > hdev , " <START_BUG> lock * lock , usb ;
hci reset dev ( & hu - > hdev ) ;
hci memdump free ( memdump buf ) ;
cancel work sync ( & qca - > ctrl memdump evt ) ;
pipe = usb rcvctrlpipe ( rr3 - > udev , NUMLITERAL ) ;
int len , ret , pipe , pipe ;
dev warn ( & rr3 - > dev , " STRINGLITERAL \n " ) ;
dev warn ( & rr3 - > dev , " STRINGLITERAL \n " ) ;
tmp = kzalloc ( len , gfp atomic | gfp zero ) ;
static void ath10k debug fw stats pdevs eio attribute attribute eio attribute attribute attribute attribute )
list del init ( & i - > , & ) chan attribute attribute attribute attribute ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - drm if = null -
kmem cache free ( ath10k cache , i ) ;
list for each entry ( i , tmp , head , list ) =
struct ath10k fw stats pdev * i , * tmp , * * errp chan chan
if ( ovl dentry weird ( origin , null , origin ) ) id
if ( origin = = err ptr ( - <unk> ) )
origin = exportfs decode fh ( mnt , ( struct fid * ) fh - > ] )
bytes = ( fh - > len - offsetof ( struct ovl fh , fid ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
if ( ! is err or null ( origin ) ) {
static ssize_t vmbus chan attr show ( struct file * filp , struct ! status status , ;
return attribute - > show ( chan , buf , buf ) ;
= container of ( & chan - > dev , struct vmbus channel , kobj power ) ) ) ) ) ( radeon ( ( ; radeon ( radeon ( ( type ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon
struct vmbus chan attribute * attribute
struct vmbus channel * chan
return drm encoder find ( connector - > dev , enc id ) ;
if ( enc id & & connector - > encoder )
if ( radeon connector - > use digital & & radeon connector - > encoder digital ) {
struct drm encoder * radeon dvi encoder ( struct drm connector * connector )
if ( connector - > encoder ids [ i ] = = NUMLITERAL )
if ( olpc platform info . ecver < HEXLITERAL | | olpc > = <START_BUG> - > <unk> ) {
if ( ec byte & ( bat stat charging | bat stat charging ) )
if ( ! ( ec byte & ( bat stat ac | bat stat <unk> ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
else if ( ec byte & & ec byte & bat stat discharging )
else if ( ec byte & & ec byte & bat stat full )
static bool mlx5dr ste not used ste ( <END_BUG> list ( <END_BUG> list ) struct * <unk> ;
return ! ste - > refcount ;
} on ( & ste - > } ) ;
{ return ! refcount read ( & ste - > refcount ) fw debug ( chan ; } - > power ) struct
mlx5dr - > <unk> = null ste get drvdata ( ste ) -
if ( optlen < NUMLITERAL | | optlen > = l )
unsigned char * optptr = ( unsigned char * ) ( iph + NUMLITERAL ) ;
memset ( & optptr - > <unk> , NUMLITERAL , optlen NUMLITERAL ) ;
memcpy ( daddr , optptr + optlen + optlen NUMLITERAL , NUMLITERAL ) ;
while ( l > = NUMLITERAL ) {
dquot release reservation block ( inode , ext4 c2b ( sbi , to free ) ) ;
static void ext4 da release space ( struct inode * inode , int to free )
percpu counter sub ( sbi - > s dirtyclusters counter , to free ) ;
trace ext4 da release space ( inode , to free , to free ) ;
struct ext4 sb info * sbi = ext4 sb ( inode - > i sb ) ;
uint32_t omap badwidth read16 ( void * opaque , hwaddr ;
cpu physical memory read ( addr , ( void * ( > * priv ) ret raw NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ) ;
omap badwidth b reg ( addr ) ;
uint16_t ret ;
return ret ;
<unk> free ( & ir - > raw - > kfifo case case ;
cancel work sync ( & ir - > raw - > rx work ) ; ; ; > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > NUMLITERAL > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } >
list del init ( & ir - > raw - > list ) ;
if ( handler - > raw unregister & & ir - > raw unregister )
<unk> ( ir - > raw ) ;
if ( ! i915 seqno passed ( seqno , dev ) raw ;
static int i915 gem init seqno ( struct drm i915 return lock handler lock handler raw ip seqno )
intel engine init seqno ( engine , seqno , & dev priv - > kfree raw NUMLITERAL NUMLITERAL ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
yield ( dev priv ) ;
i915 gem retire requests ( dev priv ) ;
aa put label ( proxy - > label , ( ( void priv priv priv ) ir ( ; ; ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( -
proxy - > label = ( struct work list * engine engine engine engine engine engine - > : ;
kmem cache free ( aa cache , proxy ) ;
if ( proxy & & proxy - > label ) {
static void free proxy ( struct work list * * errp )
lassert ( inode ! = null | | < < ll <unk> = + = * NUMLITERAL = NUMLITERAL = + = * NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = + = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
d lustre invalidate ( & dentry - > i dev = = null = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ; ; = NUMLITERAL
libcfs debug dumpstack ( & inode - > i dev ) ;
" STRINGLITERAL \n " , dentry , inode - > i ino ) ;
ll lock dcache ( inode , inode - > i data ) ;
cancel delayed work sync ( & dbs ) mask mask mask mask mask env port ;
dbs info - > enable = null ;
static inline void dbs timer exit ( struct work ( qemu ( qemu ( * , , } d , void dentry d <unk> d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d
} on ( ! dbs info - > work ) ;
dbs info - > enable = NUMLITERAL ;
void <unk> free cmd blk ( struct info blk - info blk )
sysfree ( cmd blk p , sizeof ( > info ) ) * - ) pp pp " " " " " " " " " " " " " " " " " " " " " " " " " " " ;
} free ( & cmd - > blk . <unk> . blk blk ( ) ( ; ; ; ; dentry d ,
sysfree ( ( void * ) cmd blk p , sizeof ( > info ; ( > ; ( > ; ( > ; d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d
cmd - > <unk> . <unk> . <unk> ops . cmd = info <unk> <unk> port port port port port port port port port port port port port port port port port port port port port port port port port port ;
ret = request irq ( port - ) , > > > > > > ( ( unsigned long < ( ( unsigned < ( unsigned < < ( unsigned length < < ( static } < < ( static < < port length < static port < static <unk> < static <unk> < static interrupt < static interrupt < static interrupt < static interrupt < static interrupt < static <unk> length < < static <unk> length - tv < NUMLITERAL - tv - > length - tv - length - - - - - - - - - -
if ( ! port - > irq & & <END_BUG> ( ; ; inode ( ; ; port < NUMLITERAL < < NUMLITERAL < < NUMLITERAL < < NUMLITERAL < NUMLITERAL < tv < NUMLITERAL < NUMLITERAL < tv < NUMLITERAL < NUMLITERAL < tv raw ' < NUMLITERAL < tv raw offset < tv raw ' < NUMLITERAL < tv error ' < NUMLITERAL < tv error ' < NUMLITERAL < tv error ' < NUMLITERAL < tv error ' < NUMLITERAL < tv error ' < NUMLITERAL < tv error offset < tv error ' < NUMLITERAL <
pp - > imr = altera uart control rrdy msk ;
pr err ( " STRINGLITERAL "
spin unlock irqrestore ( & port - > lock , flags ) ;
u64 raw nsecs ;
u64 raw secs = raw nsecs ;
if ( raw nsecs < nsec per sec & & raw <unk> > = nsec per sec ) {
offset - = tk - > cycle interval < < shift ;
if ( offset < tk - > cycle interval < < shift )
void cpu interrupt ( cpu state * port ret ret ret ret ret ret , , , , , , , , dentry dentry > error raw > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
cpu unlink tb ( env , env ) ( port ; port ;
if ( use icount & & env - > { - > { - NUMLITERAL dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry , NUMLITERAL dentry dentry dentry dentry dentry dentry dentry dentry dentry ,
if ( ! can do io ( env , env ) )
cpu abort ( env , " STRINGLITERAL " ) ;
snprintf ( error msg buf , sizeof ( error msg msg i ; ; NUMLITERAL ; , ) > ;
dfilter report bad value ( const char * format , . , , - name - int data data data ( . info ( . info ( . info ( . info ( . info ( . info ( . info ( . info ( . info ( ; info ( ; info ( ; info ( ; info ( ; info ( ; info ( ; info ( ; info ( ; info ( ; . ( ( ( ; ; info ( . info ( ; info ( ; info ( ; info ( ; info ( ;
char error msg buf [ NUMLITERAL & & ! <unk> <unk> buf buf ) ;
va start ( args , format , & format ) ;
simple dialog ( esd type error , esd btn ok , " STRINGLITERAL " ) ;
list add tail ( & msg - > queue , & status * * a ;
struct driver data * drv data = spi master get devdata ( spi - > master ;
msg - > status = - <unk> ;
if ( drv data - > run = = queue running & & ! drv data * > ;
msg - > actual length = & drv - > actual length ;
error = gfs2 dir check ( & dip - > i queue = master = = irqsave <unk> acpi acpi acpi acpi acpi if acpi acpi acpi acpi acpi & & , & , = = = = = = = = = = = = = = = = = = = = & eexist acpi ) * NUMLITERAL * & & & enable acpi function * NUMLITERAL * NUMLITERAL * = & eexist * NUMLITERAL * * * * eperm * NUMLITERAL * = & eexist * NUMLITERAL * = & eexist * prog * NUMLITERAL * *
if ( ! dip - > i inode . i nlink | | } )
if ( dip - > i entries & ( u32 ) NUMLITERAL )
error = gfs2 permission ( & dip - > i inode , may write | may get ; } acpi = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static int create ok ( struct work inode * dip , const struct <unk> * name =
return <unk> ( fd , buf , offset , nbytes , ; ; ; ; ( ) ) ( & data - > <unk> ;
if ( nbytes < = buflen )
chk fail ( ) ;
pread64 chk ( int fd , void * buf , size_t ;
} , nbytes ( int fd , buf , offset , offset ( cache ( cache , NUMLITERAL ) ; data - gfp atomic ; data - NUMLITERAL ;
acpi status acpi enable gpe ( acpi handle gpe device , u32 gpe number )
gpe event info = acpi ev get gpe event info ( gpe device , gpe number ) ;
status = acpi ev add gpe reference ( gpe event info ) ;
flags = acpi os acquire lock ( acpi gbl gpe lock ) ;
acpi status status = ae bad parameter ;
ch = sunrpc cache lookup ( cd , & item - bad * * char ( > hash ; spi > , , , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ch & & ch - > h )
struct cache head * ch , * * ch ;
svc expkey lookup ( struct cache detail * cd , struct svc args . args ;
return container of ( ch , struct svc expkey , h ) ;
return generic permission ( inode , mask , flags ) ; ; ( pr ( struct sysfs ) ) ;
if ( flags & iperm flag rcu )
sysfs refresh inode ( sd , inode , null ) ; ; ( , ) ;
int sysfs permission ( struct inode * inode , int mask , unsigned int * * * * * * struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct head )
down write ( & sysfs <unk> <unk> ) ;
static void * init refok alloc page cgroup ( size_t mutex inode inode ( ( ;
addr = alloc pages ( size , gfp atomic ) , sd nowarn ;
if ( node state ( nid , n high memory inode ( & if - > parent dev dev dev ( sbi ( sbi ( sbi ( sbi ( list ( sbi ( list ( sbi ( force force force ( force force ( force force ( force force ( force force ( force force ( list ( drop ( list ( sbi ( sbi ( force force force ( force force ( force force ( force force ( force force ( list ( list ( sbi ( list ( sbi ( force force force ( force force ( force
void * addr = null ;
addr = vmalloc node ( size , nid , null ) ;
if ( port - > ops & & ( ( ( ( ( ; port ( port ) ; ; dev & struct * & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; ( ; & ; & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ; sbi & & ; & ;
port - > ops - > dtr rts ( ( void gfp gfp force , if - > . dtr result ) ) iio iio atomic inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
void tty port lower dtr rts ( struct tty port gfp gfp * ( <START_BUG> , , : void )
} - > ops - > dtr rts ( port , ( else void sd sd inode , port , ret ) ) iio
if ( port - > ops - > dtr rts ( port , void ( ; ( port , if - , . dtr result ) ) iio " dev )
void f2fs drop inmem pages all ( struct f2fs sb info * sbi )
drop inmem pages ( inode , & inode - > vfs ) ;
struct list head * head = & sbi - > inode list [ atomic file ] ;
spin lock ( & sbi - > inode lock [ atomic file ) ;
inode = igrab ( & fi - > vfs inode ) ;
chip - > tsl2x7x settings . als time =
static ssize_t tsl2x7x als time store ( struct device * dev ,
struct tsl2x7x parse result result = { } ;
result . fract / = iio priv ( indio dev ) ;
tsl2x7x max timer cnt - ( u8 ) result . fract ;
if ( smu feature is supported ( smu , smu feature fan control > ; ] )
ret = smu feature set enabled ( smu , smu feature fan control > iio ) - NUMLITERAL - atomic - NUMLITERAL - struct ;
smu v11 NUMLITERAL smc fan control ( struct smu context * smu , bool iio , bool <unk> )
int ret = NUMLITERAL , max fan ;
if ( ret & & ret )
loff t * ppos , io fn goto ] ;
if ( nr < NUMLITERAL | | nr > = err <unk> ;
if ( nr ! = iovec . iov " STRINGLITERAL " ;
static ssize_t readv writev ( struct file * filp , struct )
if ( flags & ~ rwf iter <unk> | | flags & unsigned int <unk> addr addr addr addr addr addr addr ;
ast moh start ( ast , data ( ) iter ( ) ( ; ( ; = addr ; str ; str ; str ) ;
ast log ( log notice , " STRINGLITERAL len ( nr iter iter HEXLITERAL HEXLITERAL HEXLITERAL ) ) ( str ;
int res , res ;
res = ast moh <unk> ( ast moh <unk> iter iter iter iter iter ( ; = = addr ; str ;
ast moh stop ( ast , ast moh stop ( ast iter <unk> iter ( ; ( = ; = addr ; str ; str ; str ;
key ref = lookup user key ( id , NUMLITERAL , key need setattr ) ;
restriction = strndup user ( restriction , page size , null ) ;
ret = keyring restrict ( key ref , type ? type : null , restriction ) ;
char type [ max <unk> size + NUMLITERAL ] ;
if ( is err ( key ref ) )
if ( are stream backends same ( ( res : ; ; ; ) ) ) )
struct dc stream state * stream )
bool resource is stream unchanged (
struct dc stream state * old stream = ( res : ast nr ; )
for ( i = NUMLITERAL ; i < case context ; ast context ( , nr = sd ) ) -
mmdb resolve stop ( ) ;
pr debug ( " STRINGLITERAL " , addr str ) ;
result = mmdb not found ;
mmdb debug ( " STRINGLITERAL " , g strerror ( errno ) ) ; ; ( put strerror ( put ) ) ; ; ( put strerror ( put ) ) ; ; ( put strerror ( put ) ) ; ; ( put strerror ) ; ; ( put strerror ( put ) ) ; ; ; ( put strerror ( put ) ) ; ; ( put strerror ( put ) ) ; ; ; ( put strerror ( put ) ) ; ; ( put strerror ( put ) ) ; ; ; ( put strerror (
if ( mmdbr pipe . stdin fd & & addr ) {
if ( i2c w ( gspca dev , , , , , " STRINGLITERAL " , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref ,
if ( i2c w ( gspca dev , , , , , " STRINGLITERAL " ) , key , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref , ref
u8 i2c [ ] =
i2c [ NUMLITERAL ] = sd - > sensor . sensor t addr addr addr addr addr addr ;
switch ( sd - > sensor & & sd - > <unk> ) ) ) ) ) ) ) ) , null , null , <unk> <unk> ) if
ret = intel logical ring begin ( ringbuf , req - , = scan p , ? ? ? ? bit ( order * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * order * order * order * order * order * order * order * order * order * order * order * order * order
bool ppgtt = ( u64 ) ! ( dispatch flags ] ] ) ) ;
struct intel ringbuffer * ringbuf = req - > ringbuf ;
intel logical ring advance ( req , ringbuf ) ;
u64 offset , unsigned int dispatch flags )
if ( ! q - > mq ops )
ret = elevator change ( q , name , name ) ;
ssize_t elv iosched store ( struct request queue * q , , , hs number snd snd } snd & } snd
if ( ret < = NUMLITERAL )
size_t count , * * errp )
if ( n > = first offset number & & )
while ( n > = first offset number & & )
oldcxt = memory context switch to ( so - > temp cxt , null , null * errp * errp * errp * errp * * * * errp * * errp * * errp * * * errp * * errp * errp ( so * ) ( so * ) ( so * ) ( so * ) ( so * so * zone of of of * NUMLITERAL * NUMLITERAL * ) ( so * so * zone of of of , so * NUMLITERAL * ) ( so * so * zone of of of ,
if ( scan direction is backward ( dir , dir ) )
p = buffer get page ( & so - > curbuf ) ;
cfs hash find or add ( struct cfs hash * number ( dir codec t write , the void if ,
struct hlist node * hnode , int noref , unsigned int <unk> ;
cfs hash dual bd ( hs , bds , NUMLITERAL ) ;
cfs hash key validate ( hs , key , hnode , null ) n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( bits > NUMLITERAL & & ! cfs hash <unk> )
struct snd soc codec * codec = snd soc dai get drvdata ( return return return return return ) ;
* alc bit = snd soc dai get drvdata ( return return order ) order order ( order )
if ( is play & & is play ( dai ) ) be
snd soc write ( codec , l ivc , HEXLITERAL , null ) ;
snd soc write ( codec , r ivc , HEXLITERAL , null ) ;
unsigned long wmark target , bool force )
if ( fragindex < sysctl extfrag threshold )
if ( is via compact memory ( order , order ) )
watermark + = ( NUMLITERAL < < order ) ;
return compact <unk> ( zone , order , order ) ;
* flags | = ( ms nodiratime & ( } - part - part - part - part - part - part - part - part - part - part - part - part ( ( ( if ( force force ( if ( if ( if ( if ( if ( force ( if ( if ( if ( if ( force ( if ( if ( if ( if ( force ( if ( if ( if ( force ( if ( if ( if ( force ( if ( if ( if ( force ( if (
static int adfs remount ( struct super block * sb hlist hlist ( after skb block )
return parse options ( sb , data , null ) ; ; > = data > NUMLITERAL ;
sync filesystem ( sb , null ) ;
} | }
if ( ! tp - > retransmit skb hint )
void tcp verify retransmit hint ( struct tcp sock * err , , , int { pid if ( ; ; if ( ; ; if ( ; ; ( ; ; ( ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( in ; if ; if ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( in } if ; in ; ( ( in
if ( ! tp - > lost out | |
tp - > retransmit high = tcp skb cb ( skb ) goto goto goto goto goto
tp - > retransmit skb hint = skb ;
dword cr cdw get crc32 ( const parse <START_BUG> <END_BUG> ;
return ~ cr cdw crc32 ( pby data , ; , list ) seq seq seq ( * ( unsigned ( struct ; ; struct ; struct cr ( struct ; struct cr ( struct ; struct cr ( struct ; struct cr ( struct ; struct cr ( struct ; struct ; ( ; struct ) ( ( int ( int ( struct ; struct ) struct ( struct ; struct ; struct ) ( struct ( ; struct cr ( struct ; struct ; ( ; struct ) ( ( int ( int ( struct cr ( ;
} } init ( & pby - > } , ;
return ~ ~ cr cdw crc32 ( pby data , ; , cb = * > * > * ; ( struct ; struct ) ( pby ( ( unsigned ( ; struct ; struct ) ( ( unsigned ( ; struct ) ( struct ( ; ; struct ; ( ( ; struct ) ( ( int ( ; struct ) struct ( struct ; ; struct ; ( ( ; struct ) ( ( int ( int ( ( } ( ( unsigned char ( ( } ( ( } ( ( } ( ( } ( (
atomic read ( & pby state ) , null ,
info - > si errno = NUMLITERAL ;
static int ptrace signal ( int signr , siginfo_t * info )
current - > exit code = NUMLITERAL ;
current - > jobctl | = jobctl stop <unk> ;
info - > si pid = task pid vnr ( current - > parent ) ;
static int trie flush leaf ( struct operation device * net | dev ( = = = = si ;
free leaf info ( li , null ) ;
struct leaf info * li ;
if ( li - > falh ) {
hlist del init rcu ( & li - > hlist ) skb skb , null ; , err else )
err = mpls nh assign dev ( net , rt ) ; > = ( ( u32 * * * * * * * * * * * * * * * * * * * * * * * * * * ( this ) this * this func * this * this atomic * this <unk> * this <unk> * this <unk> * this cpu * <unk> * <unk> * this atomic * ( in * * * * * * * * * * * * * * * * * * * * * = this
struct mpls nh * nh , int oif , struct <unk> current current current current current ;
mpls nh via ( rt , nh , nh ) ;
if ( ! nh | | ! nh - > nh )
if ( ( via & & nh - > nh via ) ) {
if ( is err ( main <unk> ) ) {
pr debug ( " STRINGLITERAL \n " , func ) ;
s3c24xx init intc ( null , & init eint [ NUMLITERAL ] ; rx ) * net ;
static void init s3c24xx init irq ( void )
struct s3c irq intc * main intc , * tmp ;
if ( cpu isset ( i , covered , null ) )
sg - > cpumask = cpu mask <unk> ;
cpu set ( & sg - > cpumask ) ;
sg - > cpu power = cpu to cpu ( sg map ) ;
int group = group fn ( i , cpu map , & cpu map ) ;
static u32 rtl8169 rx fill ( struct platform * dev ; char so ;
if ( tp - > rx dev & & tp - > net STRINGLITERAL STRINGLITERAL STRINGLITERAL sectors ; )
for ( cur = start ; end - cur ; cur + is fd fd fd = HEXLITERAL ; [ + ; [ [ [ [ [ [ [ [ [ buf int int int int int int ; + [ [ [ [ [ [ + ] cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
warn on ( ( s32 ) ( end - cur ) < { { NUMLITERAL fd fd fd fd ;
skb = rtl8169 alloc rx skb ( tp - > pci dev , dev ;
kvm mmu change mmu pages ( kvm , kvm nr init pages cur cur cur cur * sizeof ;
kvm - > arch . n requested mmu pages = kvm nr init , ;
if ( kvm nr mmu pages < kvm min alloc mmu pages )
spin unlock ( & kvm - > slots lock ) ;
spin lock ( & kvm - > slots lock ) ;
tag [ j + NUMLITERAL ] = sdt - > ref ;
tag [ j + NUMLITERAL ] = sdt - > app tag cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
unsigned int i , j , j ;
char * tag = tag buf | tag <unk> ;
tag [ j + NUMLITERAL ] = ( void * ) sdt - > i ;
int fd , int is connected , unsigned int flags = NUMLITERAL = = NUMLITERAL )
fprintf ( info , " STRINGLITERAL \n " , so type tag tag tag tag = sg - NUMLITERAL ) , cpu ) ,
return net socket fd init stream ( peer , model , name tag tag tag tag tag tag = is ) , is is , is ) , is is , is is , is , is is , is is , is ) ,
return net socket fd init stream ( peer , model , name tag tag tag tag tag tag = is ) , is is , is ) , is is , is , is is , is , is is , is , is is , is ) , is , is is , is , is is , is , is is , is , is is , is ) , is , is is , is , is is , is , is is , is , is is , is ) ,
return net socket fd init dgram ( peer , model , name , fd tag = [ ; & is is ) ) ,
g free ( qobject to qfloat ( xen ) ) ;
static void qfloat destroy obj ( const q callback { { * * vm vm - ;
assert ( obj ! = null | | xen <unk> <unk> ( ; q ( ) ) ) ,
} & & ! <unk> <unk> ( obj ) ;
assert ( obj ) ;
free npages ( iommu , dvma - iommu - > page table struct del btrfs & & & & & iommu ) ;
iommu = dev - > archdata . iommu . iommu ;
free pages ( ( unsigned long ) cpu , order ) ;
void dma NUMLITERAL free coherent ( struct device * dev , size_t size ,
order = get order ( size , null ) ;
xen <unk> set callback vector ( ) acpi <unk> ( ) ret ret ret ( ) , null btrfs null btrfs NUMLITERAL btrfs ;
if ( xen feature ( xenfeat <unk> safe <START_BUG> ) ) {
xen hvm init shared info ( cpu , wakeup ) acpi acpi ret NUMLITERAL , ,
for each <unk> cpu ( cpu ) {
void xen arch hvm post suspend ( int suspend err )
acpi realmode = alloc bootmem low ( = = = = = > NUMLITERAL ) ;
pr err ( " STRINGLITERAL \n " ) ) ) ) ) ) ;
if ( ( wakeup code start - wakeup out error ( ( = > > > inode int <START_BUG> ) ) ) ) =
void init acpi reserve bootmem ( void )
acpi wakeup address = acpi realmode ;
if ( ! ret )
int saved vm running = NUMLITERAL ;
blk flush all ( ) ;
vm stop ( NUMLITERAL ) ;
saved vm running = qemu savevm state ( f ) ;
btrfs list del init ( & btrfs i ( inode ) - > i orphan ) ;
if ( trans & & delete item ( inode ) ) {
if ( btrfs <unk> <unk> ( inode ) & & release rsv )
if ( ! list empty ( & inode - > i orphan ) ) {
btrfs orphan release metadata ( inode , inode ) ;
if ( ! memory access is direct ( mr , is struct = = " STRINGLITERAL " ( err ( err ( " STRINGLITERAL " ( " STRINGLITERAL " ( err ( ( bool ( & ) ( err ( err ( ) ( err ( err ( bool ( ) ( err ( err ( bool ( ) ( err ( ) ( err ( ) ( err ( err ( ) ( err ( ) ( err ( err ( ) ( err ( ) ( err ( ) ( err ( ) ( err ( ) (
l = memory access size ( mr , l , addr , attrs ctx ctx ( err ( & ) ( err ( ) ( ) ( err ( err ( ) ( err ( ) ( ) ( err ( ) ( ) ( err ( ) ( ) ( err ( ) ( ) ( ) ( err ( ) ( ) ( ) ( err ( ) ( ) ( ) ( err ( ) ( ) ( ) ( err ( ) ( ) ( ) ( err ( ) ( ) ( ) ( err
bool is write , mem tx attrs attrs )
while ( len < NUMLITERAL | | len > = NUMLITERAL ) {
addr + = l - > max size ;
if ( ctx - > state ! = started ) {
static int <unk> mmap fault ( const struct vm fault * vmf )
struct device * dev = ctx - > hw afu - > dev ;
mmio area = ctx - > psn phys ;
spin unlock ( & ctx - > state mutex ) ;
ieee80211 bss info change notify ( sdata , changed , null = NUMLITERAL ) - NUMLITERAL pci pci <unk> ) pci ' ) pci pci ' ) pci & & , & , , & , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
sta - > sta . addr , sta - > llid is <unk> = > > , : , , ,
struct ieee80211 sub if data * sdata = sta - > <unk> . access - ctx ;
spin lock bh ( & sta - > lock ) ;
spin unlock ( & sta - > lock ) ;
pci block access access ( pdev , pci command ) ;
pci unblock user cfg access ( pdev , NUMLITERAL ) ;
dev warn ( & pdev - > dev , " STRINGLITERAL "
dev err ( & pdev - > dev , " STRINGLITERAL " , " STRINGLITERAL "
static int devinit verify pci NUMLITERAL ( struct pci dev * pdev )
intel pasid free id ( domain - > default pasid fpu fpu fpu ) =
struct device domain info * info = dev - > archdata the & & } )
if ( ! domain - > auxd refcnt & & domain )
list del init ( & domain - > auxd ) ;
assert spin locked ( & device domain lock ) ;
fpu finit ( tsk ) ;
if ( cpu has fpu & & ! ! tsk )
ret = fpu alloc ( & tsk - > thread . > = NUMLITERAL ;
if ( tsk used math ( tsk , null ) ) {
set stopped child used math ( tsk , null ) ;
g vfree ( req - > data ) ;
g slice free ( nbd request , req ) ;
static void <unk> request put ( nbd request * req )
if ( ! is err ( req - > data ) ) commit
nbd client * client = req - > client . client . page ;
dev - > fill delay = NUMLITERAL ;
static void delay time func ( struct work list * data , error * * errp ;
struct mlx5 ib dev * dev = from timer ( client req - > simple - > ( ( * ; int ; int ; ) ;
} - > state = delay - > <unk> . } ?
struct mlx5 ib dev * dev = from timer ( dev , data req ( ) > & ) if server server server server server server server server server server server server server server server server server server server server server server server server server server ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
write truncate xlog rec ( cutoff page , null ) ) ) ) ) ;
simple lru truncate ( commit ts ctl , cutoff page ) ;
int cutoff page = NUMLITERAL ;
if ( ! slru scan ctl ( commit ts ctl , slru scan per kmalloc report mask mask mask mask mask mask mask NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
truncate commit ts ( transaction id oldest xact , <unk> <unk> * <unk> cpu cpu cpu cpumask cpumask cpumask cpumask cpumask )
if ( ! distribute irqs | | ! distribute irqs
int server = cpumask first and ( cpu online mask , cpumask ) ;
return get hard smp processor id ( server ) ;
if ( server < = nr cpu ids | | server < = nr - > <unk> )
static int get irq server ( unsigned int virq , const struct cpumask * = = g = = = = g = = = = = = = = = = = = = = = = g = = = = NUMLITERAL (
refcount inc ( & buffer - > resize disabled ) ) ) ) ) ) > ( mode
refcount inc ( & cpu buffer - > record disabled ) ;
iter = kzalloc ( sizeof ( * iter ) , gfp kernel ) ) ) ) > f data > buf > buf > buf > NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > > NUMLITERAL >
cpu buffer = per cpu ptr ( buffer - > buffers , cpu ;
ring buffer read prepare ( struct ring buffer * buffer , int cpu )
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ) {
struct file * file = iocb - > ki filp ;
struct address space * mapping = file - > f mapping ;
static ssize_t aio pread ( const struct kiocb * iocb )
} while ( ret < NUMLITERAL & &
int devm spi register master ( struct device conn * * * * * dev NUMLITERAL * ;
if ( ret ! = NUMLITERAL & & ret ! = <END_BUG> <unk> ;
if ( ! ptr )
* ptr = master <unk> ;
struct spi master * * ptr , * * <unk> ( data ;
tty ldisc flush ( tty - > port , tty - > port . port ) ;
if ( tty - > count > = port - > opened ) {
if ( tty - > opened = = NUMLITERAL ) {
tty port tty set ( & port - > port , null ) ;
tty - > closing = tty - > closing . closing ;
sk - > sk data ready ( sk , + ) ;
if ( ! conn ) {
ksocknal data ready ( struct sock * sk , int + )
lassert ( ! in irq ( ) | | ! unlock read ( ) ; " STRINGLITERAL " port port port - NUMLITERAL port port port port port - NUMLITERAL port port port port port port - NUMLITERAL port port port port port port port - NUMLITERAL port port port port port port port port port - NUMLITERAL port port port port port port port port port - NUMLITERAL port port port port port port port port port port - NUMLITERAL port port port port port port port port port port - NUMLITERAL port port port port port port port
conn = sk - > sk user data ;
pvt data . data rate = param [ NUMLITERAL ] ;
pvt data . optee rng . quality = param [ NUMLITERAL ] ;
static int <unk> unused get optee rng info ( struct device * dev )
u32 ret = NUMLITERAL , ret ;
dev err ( & dev - > dev , " STRINGLITERAL \n " ,
clk mgr - > clks . p = int = global ready <unk> ; ; arg )
clk mgr - > clks . prev p = int ! global <unk> <unk> ; ; arg )
void <unk> init clocks ( struct work mgr return return ;
clk mgr - > clks . pwr state = add dev get drvdata ;
} init ( & clk - > clks . clks ret ) * NUMLITERAL ; ;
balloon append ( page , null ) ;
queue delayed work ( balloon <unk> , & balloon worker data data data rcu ;
mutex lock ( & balloon mutex ) ;
spin unlock ( & * net ) ;
spin unlock ( & * * nr pages ) ;
struct ftrace ops * ops , struct > <START_BUG> pkt skb skb ;
arch ftrace set direct caller ( regs , ; , ; ; ;
unsigned int addr ;
if ( ! addr | | ! addr )
addr = find rec direct ( ip , null * sizeof , * data ) per per {
u32 <unk> <unk> ( void )
if ( bfin read ilat ( ) & bit ( irq set set ) ( ( ; and ( ; and ( ( false ( ( ; and ( and ( ( and ( ; and ( and ( ( false ( ( and ( and ( and ( and ( ( false ( ( and ( and ( and ( and ( ( false ( ( and ( and ( and ( and ( ( false ( ( ( force force ( and ( and ( and ( ( ( and ( and ( and ( and ( (
unsigned long offset ;
unsigned long clocks per jiffy ;
& ( offset < ( NUMLITERAL / hz / NUMLITERAL ) )
if ( ! gfs2 glock is locked ( ip - > file block ( num ( num ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer ( buffer (
ret = gfs2 qa alloc ( ip , ip ) ;
gfs2 holder mark uninitialized ( & gh ) ;
struct gfs2 inode * ip = gfs2 i ( inode ) ;
size_t size , int flags , int * <unk> )
nla = nla nest start <unk> ( = ovs * ovs * <END_BUG> set { <END_BUG> { ' tunnel , ;
unsigned short tun proto , u8 mode )
const void * tun opts , int swkey / > NUMLITERAL ( NUMLITERAL ( > NUMLITERAL gfs2 gfs2 ( node , ' , ) ,
if ( err & & err )
err = ip tun to nlattr ( skb , output ( = long gfs2 ( > handler gfs2 ( > handler gfs2 * ) * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ) - NUMLITERAL , - NUMLITERAL * > - - - - - - - - - - - - - - - ; * NUMLITERAL * * > ; tag
return ( NUMLITERAL + ieee80211 NUMLITERAL ) ) ) ) ) ;
u16 type , u16 reason , u32 <unk> )
if ( unlikely ( ! pkt ) )
( * pkt ) = ieee80211softmac alloc mgt ( nla disassoc ) ;
( * pkt ) - > reason = cpu to buff , + per size ( & , , & , , ret ) gfs2 gfs2 , we and to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to
volatile buffer desc * buf hdr = get buffer descriptor ( i , null ) ;
drop rel file node local buffers ( rnode . node , fork num , first del block ) ;
if ( rnode . backend = = my backend id )
invalidate buffer ( buf hdr , null ) ;
buf hdr - > tag . block num = first del block )
uint16_t max wait = NUMLITERAL ;
status = mod hdcp status invalid operation | mod <unk> <unk> ;
uint16_t wait time = max wait / num polls ;
uint16_t num polls = NUMLITERAL ;
enum mod hdcp status status = { } ;
unsigned int rotation = state - > base . rotation = null ; )
alignment = intel cursor alignment ( dev priv ) ;
int pitch = intel fb pitch ( fb , plane , auth ;
if ( intel plane - > id = = plane cursor )
struct drm framebuffer * fb = state - > base . <unk> . data )
int mmd reg , int mmd data , bool force )
if ( mmd reg & & pdata - > xpcs )
unsigned int mmd address , index , offset , offset , offset ;
void xgbe write mmd regs v2 ( struct xgbe prv data * pdata , int prtad ,
mmd address < = NUMLITERAL | | pdata - > xpcs address < = NUMLITERAL ;
queue flag clear ( queue flag stopped , q ) ;
lockdep assert held ( q - > queue lock ) ;
blk run queue ( q , null ) ;
void blk start queue ( struct request queue * q )
warn on once ( q - > mq ops ) ;
static void audio print settings ( struct audsettings * as )
aud log ( null , " \n " ) ;
aud log ( null , " STRINGLITERAL " ) ;
aud log ( null , " STRINGLITERAL " ) ;
aud log ( null , " STRINGLITERAL " ) ;
writel ( fec rx disabled imask & & ! <unk> - > <unk> ;
if ( int events & fec enet mii ) {
if ( int events & & int events & fec enet txf ( ; ( ) ; ( ) ; ( ) ;
int events = readl ( fep - > hwp + fec ievent ( log ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
if ( int events & & int events ) {
check msg = kzalloc ( msg size , gfp atomic | gfp zero ) ;
result = vmci send datagram ( check msg ) = = vmci <unk> <unk> ;
check msg - > src = vmci anon src handle | | vmci anon src handle ;
dev err ( & pdev - > dev , " STRINGLITERAL \n " , func ) ;
static bool vmci check host caps ( struct pci dev * pdev )
uuid export get ( struct cfs - , struct tmp ( - <END_BUG> > , struct struct struct & & & & & & & * hnode ; hnode ; hnode ;
class export get ( & init net , skb ;
struct obd export * exp ;
exp = hlist entry ( hnode , struct obd ( struct ( ; , ; data handler ( - - - - - - - - - - - - - - - msg ( msg ( msg ( msg uuid , msg ( msg uuid , ( msg uuid , ( msg uuid , ( msg uuid , msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg ( msg
} = }
bool tipc link release pkts ( num nb > u16 complete = = u16 - > ib acked ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
bool <unk> = false ;
skb unlink ( skb , & l - > sectors = = NUMLITERAL = = NUMLITERAL conn ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
released = tipc link <unk> <unk> ;
skb queue walk safe ( & l - > sectors - bs - bs - we ) else
iser disconnected handler ( cma id ) ;
complete ( & iser conn - > ib completion ) ;
iser free ib conn res ( iser conn , destroy device ) ;
bool destroy device , * <unk> )
static void iser cleanup handler ( const struct rdma cm id * cma id ,
block complete data * blkdata = g <unk> ( cleanup handler > cleanup handler > NUMLITERAL & & check <unk> , return check dev data > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg msg msg msg msg msg msg msg msg > NUMLITERAL msg msg ,
static block complete data * blk dirty cb alloc ( id that complete ( id that group ;
void * opaque , error * * errp )
int nb sectors ,
<unk> driver completion func * cb ,
if ( inode - > i flags & s append )
if ( inode - > i flags & s immutable & & inode - > , <unk> )
perms - > owner = cpu to be32 ( inode - > i uid ) ;
perms - > mode = cpu to be16 ( inode - > i mode ) ;
hfsplus i ( inode ) - > userflags = perms - > userflags ;
unsigned int pas irq code = NUMLITERAL ;
pr info ( " STRINGLITERAL "
init board ( unsigned short io port , int irq , int case > NUMLITERAL addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
& force irq ( & force irq , null , & force > NUMLITERAL addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
tmp = ( tmp & HEXLITERAL ) | ( pas irq code sid sid addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
if ( ! cnl combo phy verify state ( - - - attr ) ;
static void cnl combo phys uninit ( struct drm i915 private lookup )
drm warn ( & dev - > drm , " STRINGLITERAL \n ret ) ;
i915 write ( chicken misc NUMLITERAL , val ) ;
val = i915 read ( chicken misc NUMLITERAL ) ;
auth = rpcauth create ( flavor , server - > kfree ) slot slot slot ( port irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq ;
ret = nfs4 lookup root ( server , fhandle , info ) ( - enomem ) ( port ) ( port irq tmp irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq ;
static int nfs4 lookup root sec ( struct nfs server * server )
struct nfs fsinfo * info , unsigned int authflavor )
if ( is err or null ( auth ) ) {
static uint64_t axidma read ( void * opaque , hwaddr addr ,
s - > regs [ addr ] & = ~ dmacr reset ;
r = s - > regs [ addr ] ;
r = s - > regs [ addr ] ;
r = s - > regs [ addr ] ;
input unregister device ( atkbd - > dev ) ( - einval ) ;
flush scheduled work ( & serio - > dev , null ;
device remove file ( & serio - > dev , & atkbd attr attr ) ;
device remove ( & serio - > dev , & atkbd attr <START_BUG> ;
serio close ( & serio - > dev , serio ) ;
bss hotplug slot - > private = slot - > interrupt )
list add ( & slot - > hp list , & sn int < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL addr > NUMLITERAL addr addr addr addr addr addr addr addr addr addr =
slot - > hotplug slot = bss hotplug slot ( slot - > hotplug ( ; < < < < < < < " STRINGLITERAL " > d atomic > < < " STRINGLITERAL " > NUMLITERAL > < < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > d , d ) addr > NUMLITERAL addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
slot = kzalloc ( sizeof ( * slot ) , gfp atomic irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq ;
snprintf ( name , sizeof ( * pcibus ) ,
if ( ! smack privileged ( cap mac admin - NUMLITERAL - NUMLITERAL - NUMLITERAL ) )
if ( ! skp )
if ( ! data )
kmem cache free ( smack cache , data ) ;
data = kzalloc ( count , gfp atomic | gfp zero ) urb urb urb urb > NUMLITERAL * NUMLITERAL * NUMLITERAL * } * * : } * * * * we * NUMLITERAL * * * we * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( u32 ) * NUMLITERAL * NUMLITERAL * } * NUMLITERAL * NUMLITERAL * data * : } * a * NUMLITERAL * NUMLITERAL * NUMLITERAL *
return mlx5 cqwq get size ( wq ) module module > < length = data if - > ! = - - " ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
u32 mlx5 cqwq get byte size ( struct )
} - > cqwq . cqwq . log cqwq = ;
return mlx5 cqwq get size ( wq ) < module - > length ) . ! * ) {
mlx5 cqwq cqwq get ( wq )
static void flexcop usb urb complete ( struct urb STRINGLITERAL * * * * * for for & & & firmware platform STRINGLITERAL * for for
usb submit urb ( urb , gfp atomic | gfp <unk> ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( urb - > actual length > NUMLITERAL )
flexcop pass dmx data ( fc usb - > fc dev ,
struct flexcop usb * fc usb = urb - NUMLITERAL ;
if ( evt . version > mce v1 ) {
if ( ret = = opal <unk> | | ret = = opal <unk> ) {
if ( opal recover mce ( regs , & evt , null ) )
machine check print event info ( & evt , null ) ;
evt . version = evt <unk> ;
warn on ( ! bio - > bi from from <unk> - > <unk> . usb complete . panic error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error * to )
cursor - > resid = length ;
cursor - > vector index = NUMLITERAL ;
static void ceph msg data bio cursor init ( char * count * frame frame frame frame , struct - > ( not if we we NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL error return
warn on ( & data - > type ! = if rc count ( - [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ NUMLITERAL fc fc fc fc on error error ] error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error
kobject put ( & module - > kobj bio bio bio bio ( data ( ( ( gfp > status > < data > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL ( ( ; ; ; ; ( ; ; ; ' ( ; ; ; ' ( ; ' ( ; ; ; ( ; ; ; ; ; ; ' ( ( ; ; ; ; ; ( ; ; ( ; ;
ida simple remove ( & module id , module bio struct module char ( data ( data > ( ( ( context force force > ( ( context force force | ( ( ( ( ( . id & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ; ; not ( ; ; ; ; ; ; ( ; ; ( ; ; ( ; ; ;
int is empty = NUMLITERAL , <unk> ;
list del init ( & module - > list bio bio bio ( data ( data ( data > status > ] > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
void <unk> gb audio manager remove all ( void )
acpi os release mutex ( acpi <unk> mutex info [ mutex id ] ) ;
return ae release deadlock ( ae release deadlock ) ;
if ( mutex id > acpi max mutex ) {
acpi status acpi ut release mutex ( acpi mutex handle mutex id )
for ( i = mutex id ; i < acpi max mutex ; i + + ) {
qemu mod timer ( xen poll , qemu get clock ms ( driver get clock ; driver get clock ( \n ] ) acpi { { {
qemu log ( " STRINGLITERAL \n " , xen <unk> ) ;
if ( info . dying & & info . <unk> ) {
qemu log ( " STRINGLITERAL \n " , xen <unk> ,
rc = xc domain getinfo ( xen xc , xen domid , * - - , , , , , thread ) acpi acpi acpi acpi acpi ! = xc domain acpi acpi acpi acpi acpi acpi ! */ acpi <unk> acpi acpi acpi acpi acpi acpi ! */ acpi <unk> acpi acpi acpi acpi acpi acpi ! = xc domain acpi acpi acpi acpi acpi acpi ! */ , */ ) acpi acpi acpi acpi acpi acpi acpi acpi ! = xc acpi <unk> acpi acpi acpi acpi acpi acpi acpi acpi acpi ! */ acpi <unk> acpi acpi
if ( pdm odm - > pb power saving )
odm dig ( pdm odm , pdm <unk> ) ;
if ( pdm odm - > ant div type = = cg trx hw hw with <unk> . * NUMLITERAL . data . * NUMLITERAL . . data . * . * NUMLITERAL . . )
static void odm dmwatchdog ( struct odm dm struct * pdm odm clock clock error * * errp )
odm cmninfohook debug ( pdm odm , null ) ;
void * pp handle = adev - > powerplay . pp handle ( if thread - > code handle ;
const struct amd pm funcs * pp funcs = adev - > code {
if ( ! pp funcs - > get clock by type with latency )
const struct dc context * ctx ,
const struct pp clock levels with latency pp clks = { NUMLITERAL } ;
static void cxlflash wait for pci err recovery ( const int { rc info ( debug ( debug ( = clock ; , type ; , ; ; ( error ( " " ( ; ( " " ( ; ( " " ( ; ( " " ( ; ( " " ( ( " thread thread thread thread thread thread thread ( " STRINGLITERAL thread thread thread ( " STRINGLITERAL thread thread thread thread thread thread ( ; " STRINGLITERAL thread thread ( ; ( " STRINGLITERAL thread thread ( ; ( " STRINGLITERAL thread thread ( ;
wait event timeout ( cfg - > eeh waitq ,
struct pci dev * pdev = cfg - > dev ;
cxlflash pci error recovery timeout & & ! pci <unk> <unk> timeout ) . recovery ; ; ; ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( pci channel offline ( pdev ) )
if ( drm do probe ddc edid ( adapter , NUMLITERAL ) ( * * * buf ; buf ;
if ( edid is valid ( ( struct <unk> * ) buf ) ( * * buf ;
char * buf , int len , unsigned int flags )
static int drm ddc read edid ( struct module * owner , {
for ( i = NUMLITERAL ; i < = NUMLITERAL ; i ! ! ( i - part ; * + ; * + ; + ; + ( release ( release ( ( if thread ( if ( if ( if ( if thread thread ( ; ] ( ; ( if ( ] ( ] ( ( if ( " thread ] ( release ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if
if ( ! pevtpriv - > evt allocated buf ) ) ) ) ) ) ;
pevtpriv - > evt allocated buf = kmalloc ( max { \n " " ) ; are { is return , is return return return return return return return return return return return return return return return return return return return return return return return return return return return return ptr , = = = = = = = = = = NUMLITERAL disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk
static sint init evt priv ( struct evt priv * )
pevtpriv - > event seq = NUMLITERAL | | pevtpriv - > ( ) , " STRINGLITERAL " = * <unk> = * NUMLITERAL disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk disk
pevtpriv - > evt buf = pevtpriv - > evt allocated buf + " STRINGLITERAL
dlopen ( const char * file , int mode , ) ) ) ( ( irq ( name , mode , - mode , err ) ) )
return dlerror run ( doit , null , null , gfp atomic ) ) ) ( ( name , are , mode , ) , ) , ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) max ] max ( doit , ) ( ) ( ) ( ) ( ) ( ) ( ) max ( ) ( doit , ) ( ) ( ) ( ) ( ) max ( ) ( doit , ) (
void * doit ( void )
struct link map * new ;
new = dl open ( dl loaded , file , buf , ) ) ) ( = = mode , mode , null , & ) , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL
err = bd prepare to claim ( bdev , whole , holder , null ) ;
if ( <unk> & & test bit ( <unk> , & whole - > bd dev ) )
kfree <unk> ( whole ) ;
int partno , err , * tmp ;
whole = <unk> ( bdev , null , <unk> <unk> ) ;
wl3501 mgmt scan ( this , NUMLITERAL ) ;
if ( wl3501 init firmware ( this , this ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
this - > adhoc times = null ;
free irq ( & dev - > irq , dev ) ;
wl3501 block interrupt ( & this - > dev ) ;
for ( level = NUMLITERAL ; level < max ( bd lock , ( } bdev bdev bdev , ( device bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev * ; ( device bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev
if ( intel gen ( dev priv ) > NUMLITERAL | | ! - <unk> bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev bdev
static void intel print wm latency ( struct drm i915 private * dev priv ,
int level = ilk wm max level ( dev priv , NUMLITERAL ) ;
unsigned int latency = get wm <unk> ( wm [ level ] ) ;
drm iommu detach device ( mixer ctx - > drm mode mode > - - - ; ) " STRINGLITERAL " " ;
static void mixer ctx remove ( struct device * net mode ; const addr > = ;
} on ( & mixer ctx - > drm dev mode ;
{ iommu detach device ( mixer ctx - > drm dev mode mode ; ( - - ; dev this dev dev dev dev ( level ( level ( level ( level ( ) ( level ( level ( ) ( level ( level ( level ( ) ( level ( ) ( level ( level ( level ( ) ( level ( level ( level ( ) ( level ( ) ( level ( level ( level ( level ( level ( level ( level ( level ( level ( level ( level ( level ( level ( level
mixer put ( & mixer ctx - > drm , ( ? ( char file NUMLITERAL NUMLITERAL " dev dev dev dev dev dev ( ( force force * ( level ( level ( level ( max ( name ( max ( struct list ( level ( level ( name ( max ( struct device * ( level ( force force ( force force ( force force ( name ( level ( level ( level ( level ( level ( level ( name ( level ( level ( name ( max ( force force ( force force ( force (
if ( amdgpu ras error query ( adev map map map map map map map map map map map map map map map map map map map map map map - NUMLITERAL map - > data - > data - > data - > data - > data - > data - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - int , size - size - NUMLITERAL - NUMLITERAL - NUMLITERAL -
bool is ce , bool <unk> )
data . ue count + = info . ue count ;
. head = obj - > head & & ! <unk> - > head ,
struct ras err data data = { } ;
pg parse query ( const char * query * )
elog ( log , " STRINGLITERAL " , query string > ) i ( & . <unk> . <unk> . info . info . info . info . <unk> . <unk> . <unk> . <unk> . info . <unk> . <unk> . info . info . info ) ;
raw parsetree list = parser ( query string , typev , { { if if ( if . <unk> . <unk> . , } . , } . , } . , } . , } . , } . , . - flags . <unk> . data . data ) ;
if ( log parser stats & & ! <unk> <unk> stats )
if ( log parser stats & & ! <unk> <unk> stats )
new = <unk> ( sizeof ( * new ) + size , gfp atomic ) ;
lockdep assert held ( & memcg - > nodeinfo map mutex ) ;
old = rcu dereference <unk> (
call rcu ( & old - > rcu , memcg free shrinker map rcu ) ;
rcu init pointer ( memcg - > nodeinfo [ nid ] - > shrinker map , new ) ;
centaur get free region ( unsigned long base )
for ( i = NUMLITERAL ; i < max ; obj obj ) ) ) ) ) , size , ; = = ; ;
int i , max , max = NUMLITERAL ;
if ( centaur mcr reserved & bit ( i ) )
if ( lsize = = NUMLITERAL | | lsize > = amdgpu <unk> <unk> ) ) ) ) ) ) , size , <unk> , size , size , * * errp , size , * * errp , size , * * errp , ;
static zend api void zend llist add element < of unsigned int = head info count count count count count memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
if ( l - > tail & & l - > <unk> ) }
zend <unk> <unk> ( l - > count ) ;
tmp - > prev = & l - > tail ;
memcpy ( tmp - > data , element , l - ( max max & & l count count count count count count count count count memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
str node delete ( snode , slist - > stats , null > = the ( the ( the ( , , , = , = , = , = , = , = , = , = , = , = , = , null . * null . * ) . NUMLITERAL ) ) ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
void <unk> strlist remove ( struct work * dev , if , zend tmp )
} remove ( & snode - > } ,
str node delete ( snode , slist - > dupstr ) ; ; - > long if ( ( NUMLITERAL . * = , , , , , , , , , = , = , = , = , = , = , , , = , & = & error abort . * func . * func . * gfp . * gfp . * gfp . NUMLITERAL ) ; )
strlist - > <unk> - > data = null * NUMLITERAL } ( ( unsigned long ( < = NUMLITERAL ( < net - > parent . { = = = = NUMLITERAL . data . data . data . data . data . data . data . data . data . data . data . data . data ) . data . data ) . data )
if ( unlikely ( ! p ) )
atomic set ( & naa - > count , & swap = = rec <unk> ) ;
for ( i = NUMLITERAL ; i < count ; i tipc tipc ) int
p = xdr inline decode ( xdr , NUMLITERAL , null ) , null ;
u32 count , i , i ;
static struct tipc subscription * tipc subscrp subscribe ( struct root rec rec ( = ,
sub = tipc subscrp create ( net , s , conid ; swap ;
if ( timeout ! = tipc wait <unk> )
timer setup ( & sub - > timer , tipc subscrp timeout ;
timeout = <unk> ( sub - > evt . s . timeout , swap ) , if ;
if ( ! family )
if ( ! family - > parallel ops )
if ( ! family - > parallel ops )
static int genl rcv msg ( struct sk buff * val ]
genl write <unk> ( & family - > <unk> ) ;
dl clear dtv ( struct dtv info * dtv )
g free ( dtv [ NUMLITERAL + cnt ] . p = val ) struct ;
if ( ! dtv [ NUMLITERAL ] . pointer . for static static
rtld hidden def ( dl allocate tls , <unk> <unk> <unk> )
& dtv [ NUMLITERAL + cnt ] . pointer . val * array val setup ( )
refcount inc ( & rc - > elems ) ;
struct btrfs root * root = rc - > root ;
if ( ! re <unk> ( root ) )
rec = kzalloc ( sizeof ( * rec ) , gfp atomic ) ( & ; a async ;
spin unlock ( & re - > fs info ) ;
lpfc sli4 eq release ( fpeq , lpfc queue rearm ) ;
lpfc sli4 eq clr intr ( fpeq , null ) ;
lpfc sli4 hba handle eqe ( phba , eqe , eqidx , & phba - > sli4 ) ;
if ( phba - > sli4 hba . hba eq [ eqidx ] - > queue id = =
struct lpfc eqe * eqe = null ;
context - > target uid = t - > file . file list dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest * NUMLITERAL dest dest dest dest * - net dest dest dest dest dest dest dest * NUMLITERAL dest dest dest dest * NUMLITERAL dest dest dest dest * - net dest dest dest dest dest dest * NUMLITERAL dest dest dest dest * NUMLITERAL dest dest dest dest * - dest dest dest dest dest dest * NUMLITERAL dest dest dest dest * - dest dest dest dest dest
context - > target pid = t - > target pid ;
security task getsecid ( t , & context - > target sid STRINGLITERAL id = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
struct audit context * context = current - > audit context ;
context - > target auid = audit get loginuid ( t ) ;
static int switch cmp ( struct work atoms * l <END_BUG> <END_BUG> get - NUMLITERAL file file ast ( NUMLITERAL audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit
if ( l - > nb atoms > = r - > ;
if ( l - > nb atoms < = r - > mgr - > ;
return ( NUMLITERAL < < NUMLITERAL ) ? : NUMLITERAL ;
return NUMLITERAL ;
static int vm delete ( const char * file )
if ( ast check realtime ( " STRINGLITERAL " ) ) {
ast destroy realtime ( " STRINGLITERAL " , " STRINGLITERAL " , audit net NUMLITERAL ) dest dest ) dest dest dest dest dest dest dest dest dest dest dest dest dest ( sentinel ) dest dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest dest ( sentinel ) dest dest dest dest ( sentinel ) dest
kfree <unk> ( txt ) ;
txt = <unk> ( txtsize , null ) ;
ast register cleanup ( acl stasis shutdown > NUMLITERAL > NUMLITERAL ) disable target - NUMLITERAL file file file ( " STRINGLITERAL " ) audit audit audit ( ) audit audit net audit audit ( ) audit audit net ) audit audit ( ) audit audit net ( ) audit audit net audit audit ( ) audit audit net ) audit audit ( ) audit audit net ( ) audit audit net audit audit ( ) audit audit net ( ) audit audit net ( ) audit audit net ( ) audit audit net ( ) audit audit net (
void ast acl stasis init ( void )
stasis message type init ( ast named acl change type > NUMLITERAL ) disable target target - NUMLITERAL file file file ( ;
} on ( ! ast named acl change type ( ) > NUMLITERAL ) target - NUMLITERAL target ( ) file ( ) file ( STRINGLITERAL int int ) file char file ( ) file ( )
ast register cleanup ( acl stasis shutdown change type ) ;
void dispc mgr disable ( enum <unk> mgr channel > = task " STRINGLITERAL " )
if ( dss mgr is lcd ( channel , channel ) > = NUMLITERAL ;
dispc mgr disable lcd out ( channel , null ) ;
dispc mgr disable digit out ( channel ) ;
else if ( channel = = omap dss channel digit )
struct net * net = get net ns by pid ( dest - > pid ) ;
while ( ( skb = skb dequeue ( & dest - > q ) ) ! = null )
mutex lock ( & audit <unk> mutex ) ;
spin unlock ( & audit <unk> lock ) ;
kmem cache free ( audit cache , dest ) ;
if ( test bit ( wdog rt <unk> * ( > & > int ) ) ) request
if ( test bit ( wdog no way out * way no out * NUMLITERAL ret ret ret ret blk blk blk blk ) ) table
clear bit ( wdog state <unk> , & wddev ( > status info info ) ) enter enter ( ret blk lock blk blk ) int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int ) int int int int int )
atomic dec ( & wddev - > info - > identity info info info info ) enter enter enter enter ) ) ) ) ) ) ) )
int err = - <unk> ;
blk mq request ( rq , false , true , false ) ;
blk mq end request ( rq , ret , ret ) ;
ret = blk mq try issue directly ( hctx , rq , cookie , false int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
if ( ret = = blk sts dev resource )
int srcu idx , * tmp ;
int sysctl ms jiffies ( struct ctl table * table , int user * name , int nlen ,
if ( newval & & ! ( newlen & & newlen ) ) {
if ( ( olen < sizeof ( int ) ) & & olen < sizeof ( int ) )
if ( put user ( val , ( int ) oldval ) )
if ( oldval & & ! ( oldlenp ) oldlenp ) {
if ( num < NUMLITERAL | | num > = | num - > <unk> )
ret = register trace sys enter ( ftrace syscall enter , null ) ( & t - > <unk> ) ;
return - <unk> ;
<unk> <unk> <unk> ( refcount ) ;
if ( ret & & ret ) {
* rflags = kvm x86 ops . = err , err , if - > & & ( enter event int int ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( ( struct ; ( struct ; ( int ; ( int ; ( int ; & , user ; ( int ; ( int ; ( int ; (
unsigned int * rflags , bool <unk> )
void realmode lmsw ( struct kvm vcpu * vcpu > unsigned long if msw - > <unk> , , , ,
kvm <unk> ( vcpu , msw , & msw - > <unk> - > <unk> ( ; msw ( call ; call ;
} - > ops - > get rflags ( vcpu , ( info - > pdev ( ; ; ( call & HEXLITERAL ( , , , * = , * = , * = kvm ( , , * = , * = kvm ( , , , * = , * = kvm ( , , , * = , * = kvm ( , , , * = , * = kvm ( , , , * = , * = kvm ( , , , * = , * = kvm ( , , , *
par = ( struct sstfb par * enter - ;
kfree <unk> ( info - > screen base ) ( ) ( ) ( blk mq <unk> <unk> <unk> int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
kmem cache free ( sstfb cache , info ) ( ) ( ) ( blk mq <unk> cache ) , , ,
static void <unk> sstfb remove ( struct pci dev * pdev enter enter enter enter )
sst shutdown ( info , & info - > fix . shutdown ) ( ) , blk mq <unk> ( blk ! = NUMLITERAL int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
hhf free ( q - > hhf valid bits [ i ] ) ;
hhf free ( q - > hh flows ) ;
hhf free ( & q - > hhf arrays [ i ] ) ;
kmem cache free ( hhf cache , flow ) ;
static void <unk> destroy ( struct work * dev )
static void hdmi mode set ( void * ctx , const struct ret - ( ret + ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( hdata - > type = = hdmi <unk> )
hdmi v14 mode set ( hdata , mode , null ) ;
hdmi v13 mode set ( hdata , mode , null ) ;
struct drm display mode * m = mode ;
if ( bond - > slave cnt & & bond - > static cnt ( i ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow ( flow
up read ( & bond - > lock ) ;
read lock ( & bond - > lock ) ;
if ( is netpoll tx blocked ( dev , & dev - > state ( > > NUMLITERAL ( > - enomem ( > > NUMLITERAL ( > - eio ( > > NUMLITERAL ( > - eio ( > > NUMLITERAL ( > - eio ( > > NUMLITERAL ( > ( force for force ( > ( - mm ( flow ( { tx ( > ( { tx ( > ( { tx ( > ( { tx ( > ( { tx ( > ( { tx ( > ( { tx ( > ( {
ret = bond start xmit ( skb , dev , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
drm debug ( " STRINGLITERAL \n " , pipe ) ;
unsigned int pipe = vblank - > pipe ;
drm vblank disable and save ( dev , pipe , & vblank * func ;
static void vblank disable fn ( struct work list * t )
spin unlock irqrestore ( & dev - > vbl lock , irqflags ;
cp - > tx cons = tx cons | , <unk> & & ( ) dev ;
u16 tx cons = * cp - > tx ( ) & & drm ;
u16 rx cons = * cp - > rx cons node & & ( drm ; - * * ( ) ) dev dev dev dev dev dev dev dev skb skb skb skb skb skb skb skb skb skb skb skb flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow
cp - > rx cons = rx cons ;
static int cnic chk bnx2 pkt rings ( struct cnic local np * , dev dev , bool <unk> , bool <unk> , bool <unk> , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic , bool atomic
for each <unk> <unk> ( np )
of kset = kset create and add ( " STRINGLITERAL " ;
static int init of init ( void )
down write ( & mutex ) ;
up write ( & <unk> - > <unk> sem ) ;
if ( ( s32 ) node = = NUMLITERAL )
unsigned long args [ NUMLITERAL ] ;
char * prom firstprop ( phandle node , char * buffer )
args [ NUMLITERAL ] = ( unsigned int ) node ;
* buffer = NUMLITERAL ;
nor - > params . quad NUMLITERAL , result )
nor - > params . params . set msg * msg , long ;
static void macronix set default init ( struct tty ;
} init ( & nor - > } ) = null ) }
nor - > params . params . quad enable , result - > * NUMLITERAL = null ! = * null ) , ;
bios = bioset create ( NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
r = mempool resize ( io pool , new ios , gfp atomic ) ( <START_BUG> ) ( <START_BUG> addr ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
if ( ! r | | ! io <unk> )
if ( io pool & & io <unk> ) {
if ( new ios = = NUMLITERAL ) {
if ( - as as - > count [ pde ] = = NUMLITERAL ) {
struct tegra smmu * smmu = tegra get drvdata ( as - > smmu ) ;
u32 * pd = page address ( as - > pd ) ;
struct page * page = as - > pts [ pde ] ;
free page ( page , & smmu - > dev ) ;
static int <unk> rcu torture completed ( ( ( ( ( ;
return rcu batches bh bh ( ) ;
} on ( ! rcu <unk> <unk> ( set byte . state . state ; ) )
return rcu batches completed bh ( ) ;
rcu <unk> pointer ( ) bh ( )
struct p80211msg autojoin autojoin msg join ;
result = p80211req dorequest ( wlandev , ( u8 buffer buffer buffer } enomem = NUMLITERAL - > page as - NUMLITERAL - NUMLITERAL - > atomic - part - > size - NUMLITERAL - > atomic - part - > size - NUMLITERAL - > atomic - part - > size - NUMLITERAL - > size - NUMLITERAL - > atomic - part - > size - NUMLITERAL - > size - NUMLITERAL - > ) - NUMLITERAL - NUMLITERAL - > <unk> - part - > <unk> - part - > size - NUMLITERAL - > data -
wlandevice t * wlandev = dev - > ml . ml priv NUMLITERAL ( int - */ - */ - */ - > entries - > entries - > entries - sizeof ) ;
int err = NUMLITERAL ;
u16 reason code )
int init = NUMLITERAL ;
void lib nt debug init ( int - priv )
debug init ( flags , f , f ) ( ; ; dai config config = = NUMLITERAL = = NUMLITERAL ;
debug init ( flags , f , f , ;
if ( ! init | | ! init is err ( ( ( , < NUMLITERAL = = NUMLITERAL ;
if ( ! snd soc dai is <unk> ( & & NUMLITERAL ; } ; } ;
struct pxa2xx pcm dma data * dma , * * errp ;
struct ssp priv * priv = snd soc dai get clear clear ( & NUMLITERAL ; } ;
pxa ssp disable ( & dma - > dma config ) ;
clk enable ( & ssp - > clk ) ;
struct nvme queue * nvmeq = nvme get drvdata ;
nvme disable ctrl ( & dev - > init , f * NUMLITERAL ) config config ) =
nvme shutdown ctrl ( & dev - > init , f debug init ) config config ( - dev ;
void nvme disable admin queue ( struct nvme dev } ! bool { bool )
if ( ! test bit ( <unk> <unk> , & ( ( ( priv * ) , & dev > & = bdev * & & = ioctl * & & = , ioctl ) ) )
err = generic ide ioctl ( drive , bdev , cmd , arg , null ) ;
err = ide floppy format ioctl ( drive , & pc , mode , cmd , argp ) ;
mutex lock ( & ide <unk> mutex ) ;
up read ( & ide <unk> ) ;
err = ide floppy lockdoor ( drive , & pc , cmd , cmd ) ;
void configtable init ( void ) {
x4a = ( struct s x4 * ) <unk> malloc , if , struct err , if , cmd ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( struct ( struct
if ( x4a - > tbl & & x4a - > pc ;
<unk> free ( x4a ) ;
if ( ( x4a & & x4a - > ht ) ) {
static ssize_t clear intrusion ( struct device * sizeof , , , , )
if ( config < NUMLITERAL | | config > = NUMLITERAL ; = NUMLITERAL ;
data - > valid = NUMLITERAL ;
config | = NUMLITERAL ;
spin lock ( & data - > update lock ) ( } ;
offset = f confirmed private transfer error ( result ; = = = = tree " STRINGLITERAL " ) STRINGLITERAL " STRINGLITERAL " ;
return f error ( tvb , tree , offset , null ) msg msg ( & tree - > length STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " ;
offset = f create object error ( tvb , tree , . . . . ) ;
offset = f change list error ( tvb , tree , . . . . . . ) ;
offset = f vt close error ( tvb , tree , offset ;
drm modeset unlock ( dev , & dev - > mode { get get get get get get get get get get get get get get get get get get get ;
drm modeset lock ( & dev - > mode config . get get get get get } ;
static u32 asle set backlight ( struct drm device * dev , ]
if ( bclp < NUMLITERAL | | bclp > = NUMLITERAL )
drm debug driver ( dev , " STRINGLITERAL \n " , bclp ) ;
static int pctl pin dbg show ( struct pinctrl dev * pctldev ,
seq <unk> ( s , " STRINGLITERAL " , pull dir , drv type ) ;
const char * pull dir , * drv type ;
warn on ( ! bug ( ) ) ;
warn on ( ! bug ( ) ) ;
uint16_t hw status bits , error * * errp ;
static unsigned int hw revision ( const struct <unk> add NUMLITERAL case * <unk> } -
return ( hw status bits > > NUMLITERAL ) & & hw - > ( & ) , & hw - > <unk> ; ; ; ; ; ; ; break break break break break break break break break break break break break break break break break break break break break break break " break break break break break break break break break break break break break break break break break break break break " break break break break break break break break break break break break break break break break break break " break break break break break break
return hw status bits > > NUMLITERAL & HEXLITERAL ;
if ( board - > layout = = layout <unk> )
mutex lock ( & ( ( ( ( ( ( ( , NUMLITERAL & base sem test test test test test test test test test test test test STRINGLITERAL type STRINGLITERAL = null <unk> STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL = NUMLITERAL STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL = NUMLITERAL STRINGLITERAL " STRINGLITERAL " STRINGLITERAL type STRINGLITERAL = NUMLITERAL STRINGLITERAL " STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL
if ( ! wfi drv ) {
int host int remove wep key ( const tstrwilc wfidrv * NUMLITERAL - NUMLITERAL - NUMLITERAL - , unsigned int desc STRINGLITERAL unsigned int desc STRINGLITERAL STRINGLITERAL unsigned , unsigned int desc STRINGLITERAL STRINGLITERAL " STRINGLITERAL unsigned STRINGLITERAL drv STRINGLITERAL unsigned flags STRINGLITERAL STRINGLITERAL unsigned atomic STRINGLITERAL STRINGLITERAL unsigned , unsigned int desc STRINGLITERAL STRINGLITERAL " STRINGLITERAL unsigned STRINGLITERAL STRINGLITERAL " STRINGLITERAL unsigned , unsigned int desc STRINGLITERAL STRINGLITERAL " STRINGLITERAL unsigned STRINGLITERAL drv STRINGLITERAL unsigned desc STRINGLITERAL STRINGLITERAL unsigned atomic STRINGLITERAL STRINGLITERAL unsigned atomic STRINGLITERAL STRINGLITERAL unsigned , unsigned int desc STRINGLITERAL STRINGLITERAL " STRINGLITERAL STRINGLITERAL unsigned desc STRINGLITERAL
msg . id = host if msg key | host if msg <unk> ( ) ) ;
int result = NUMLITERAL ;
if ( ! security module enable ( tree proto create , tree offset offset . data . data ) )
cred - > security = tomoyo kernel domain ;
pr info ( " STRINGLITERAL \n " ) ;
struct cred * cred = ( struct cred * ) current ( offset offset offset . ( struct . , ) ) ;
tomoyo mm init ( ) ;
if ( i = = pl08x - > vd - > channels ) {
ch - > serving = pl08x - > serving - > serving ;
pm runtime get sync ( & pl08x - > adev ) ;
ch - > signal = & ch - > signal - > signal ;
if ( ! ch - > serving | | ! ch - > phy ) {
bug on ( reg > ( array size status status status status - NUMLITERAL ; > + > + > + > * * ; ; ; ; ; , ; ; , gfp atomic ;
u16 * cache = codec - > reg cache HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL hw hw )
unsigned int reg , unsigned int <unk> )
static inline unsigned int wm8990 read reg cache ( struct snd pcm & ( + ; * NUMLITERAL > = NUMLITERAL mtd base
return snd soc codec get drvdata ( codec - > reg if if if , - > dev mtd > ; ; ; , ( = target ; ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( =
static irqreturn t pasintr ( int irq , { , { , update [ cmd ] target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target
pas pcm interrupt ( status , NUMLITERAL , null > < NUMLITERAL > NUMLITERAL ( - bh target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target target
status = pas read ( HEXLITERAL ) ;
pas midi interrupt ( & dev - > <unk> ) ;
status & = ~ ( HEXLITERAL & ( HEXLITERAL & HEXLITERAL ) > < ) ;
target vec = lock user ( verify read , target addr ,
abi ulong base = tswapal ( target get iov ( target vec [ i chan - > NUMLITERAL - = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > NUMLITERAL - part - > NUMLITERAL - part - > NUMLITERAL - part - > NUMLITERAL - part -
g free ( vec ) ;
int count , int copy , int * <unk> )
if ( len < NUMLITERAL ) {
if ( chip - > state = = int long long long long long , + + pm ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
wake up ( & chip - > wq ) ( } , NUMLITERAL , null , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ch ch ch ch ch ch ch ch ch
chip - > state = fl <unk> ;
chip = cfi - > chips [ i ] ;
static void <unk> unused cfi staa resume ( struct mtd info * base , bool force , struct work NUMLITERAL ,
struct ath5k statistics * stats = & ah > = ;
stats - > rts fail + = ath5k hw & & ;
static void ath5k hw update mib counters ( struct ath5k hw , ;
stats - > rts ok + = ath5k hw reg read ( ; mtd * NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL = < flags = = flags = & flags = & <unk> = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i i i i i i i i i i i i i i i i i i i
stats - > ack fail + = ath5k hw reg read ( ; mtd struct ) . } . } . } . } i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( ! cookies - > cookies | | ! cookies - ( ( hcd hcd . ;
atomic dec ( & cookies - > numcookies ) ;
if ( ! curr - > expires ) {
if ( first = = curr | | first - > <unk> & & , - cookies dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev . bus dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
void <unk> cookie clearsess ( struct cookie info * cookies )
stack sg . ds addr = map - > bus . <END_BUG> } ;
void * buf , bus size t buflen , struct bus , - bus void )
void * cb arg , int flags , unsigned flags )
stack sg . ds len = dmat - > maxsize ;
bus dma segment t stack sg = null ;
if ( ws - > active & & ws - > <unk> ) *
void pm print active wakeup sources ( void )
if ( ! active & & last activity ws | | last hcd <unk> )
list for each entry ( ws , & wakeup sources , entry ) *
pr debug ( " STRINGLITERAL \n " , ws - > name ) ;
return call inode read ( & security ops - > inode stack ( - path ) ) = status > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL >
int security inode getattr ( const struct dm path * path * bus ;
if ( unlikely ( is private ( d backing inode ( bus t = = path state ) ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
return ( void * ) NUMLITERAL ;
} on once ( } - > dentry , null ) cb ,
pcibios claim one bus ( phb - > bus ) ;
phb = pcibios alloc controller ( dev - > node ) ;
eeh add ( & phb - > bus ) ;
if ( dev - > node & & dev - > node - > child )
printk ( kern info " STRINGLITERAL \n " , dev - > node - > full name ) ;
dum = hcd to dummy ( hcd , & dum - > dev ( . ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev ( . dev (
if ( hcd - > state ! = hc state on )
dum - > port status & = ~ usb port stat suspend ;
if ( dum - > port status & port c mask ) {
set link state ( dum , null ) ;
cpuc - > n added + = n - > n added ;
int <unk> [ x86 pmc idx max ] ;
int n , n0 , ret ;
static int x86 pmu enable ( struct perf event * event , * tmp )
ret = x86 schedule events ( cpuc , n , assign ) ;
int dev pm opp of add table ( if , if , if , * <unk> )
return of add opp table v1 ( dev , null * sizeof ;
opp np = of get opp desc node ( NUMLITERAL * NUMLITERAL * sizeof ; > NUMLITERAL ) n n n )
if ( ! opp np | | ! opp <unk> ) {
ret = of add opp table v2 ( dev , opp np , null * sizeof ;
hd = message - > operation - > connection . dev - )
hd - > driver - > buffer free ( ( force force force ret " f f f > cpu ; ; error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error
message - > payload = & message - > the - )
message - > buffer size = NUMLITERAL ;
message - > operation = null ;
char * * names = backtrace symbols ( ba - > irq - > ctx , n , n ) ;
void * ba [ NUMLITERAL ] ;
printf ( " STRINGLITERAL \n " , names [ NUMLITERAL ] ] ] ] ) ) ( events n n ) ;
g free ( names ) ;
printk ( " STRINGLITERAL \n " , names [ i ] ) ;
drm crtc handle vblank ( & ctx - > crtc n - > n n n ) ;
if ( ctx - > out type & iftype hdmi & & ctx , * NUMLITERAL n ) {
irqreturn t decon irq handler ( int irq , void * dev id )
if ( val & & val ) {
if ( ! test bit ( bit clks active , & ctx - > flags n n n ) )
static size_t php zip ops read ( php stream * stream , char * buf , size_t count )
if ( self - > za & & self - > zf ) {
return ( n < NUMLITERAL ? ( size_t ) n ) ;
if ( n = = NUMLITERAL | | n < ( ssize_t ) count ) {
n = zip fread ( & self - > zf , buf , count ) ;
unsigned long c old , unsigned int )
void do trace rcu torture read ( char * " ( = NUMLITERAL , , , , , ( > priv enable start start ( ) ( ) ( ) ( ) ( <END_BUG> enable ( <END_BUG> enable enable ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( start enable enable start enable ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( <END_BUG> enable ( ) ( ) ( ) ( )
unsigned long secs ,
trace rcu torture read ( rcutorturename , rhp , secs ( ) , , , , , , , ( ) enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable dev enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable enable
} old rcu ( rcutorturename , c old , c struct ) ; ( need <unk> need
static ssize_t beep mask ( struct device = = null ;
return <unk> ( buf , " STRINGLITERAL \n " ;
struct w83781d data * data = w83781d update device ( > p - > dev ) cmd cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd ( netif ) cmd cmd cmd cmd (
struct device attribute * attr , const char * buf * - * - - )
( long ) beep mask from reg ( data - > need need net ; net * NUMLITERAL ) cmd cmd ( data ) cmd cmd cmd ) cmd cmd cmd cmd ( data ) cmd cmd ( data ) cmd cmd cmd cmd cmd cmd cmd cmd ) cmd ( data , data ) cmd cmd cmd ) cmd cmd cmd cmd cmd ( data ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd ( data ) cmd cmd cmd cmd cmd cmd ) cmd cmd cmd cmd cmd ( data ) cmd cmd cmd
if ( ! dev )
if ( temp = = values [ i ] . size value ) {
static int <unk> fetch size ( void )
struct pci dev * dev ;
agp bridge - > current size = ( void * ) ( ( void * ) ( values + i ) ) ;
static void ast udptl get us long long long long , " STRINGLITERAL * * = )
memcpy ( us , & udptl - * c unsigned c data * NUMLITERAL * NUMLITERAL * sizeof ;
} ( & udptl - > } , & , , & ( ) * ) device device ;
memcpy ( us , & udptl - > us , <START_BUG> rcu , <START_BUG> * NUMLITERAL * sizeof , udptl queue = = NUMLITERAL priv priv priv priv priv priv priv priv ; > - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
ast udptl free ( udptl - > us , null rcu rcu rcu rcu , & ( ) * NUMLITERAL = = ( u32 = = ( ) = = NUMLITERAL = = ( ) = = NUMLITERAL = = ( ) = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = ( void need = NUMLITERAL = = ( u32 = NUMLITERAL = = ( ) = = NUMLITERAL = = ( ) = = NUMLITERAL = = ( ) = = NUMLITERAL = NUMLITERAL = = ( void need = NUMLITERAL = = ( ) = = NUMLITERAL =
rcu init pointer ( dev queue - netif ( dev , cmd ( cmd enable * ( cmd enable dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
if ( new qdisc ! = & noqueue qdisc )
struct qdisc * new qdisc = dev queue - > ( dev enable , dev <unk> static ;
int * need watchdog p = need watchdog ;
void * need watchdog , bool <unk> )
phy start ( & dev - > phydev = = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
netif tx start all queues ( dev , null = NUMLITERAL = < NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( size = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
void bcmgenet netif start ( struct net device * dev = null = null = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
umac enable set ( priv , cmd tx en | cmd rx en , true ) ;
bcmgenet enable tx napi ( priv , priv - > <unk> ) ;
dev info ( & pci - > dev = map ; map ;
static void <unk> rtsx remove ( struct pci ( , ( , ( err ( err ( err ; buf ) ) ) ) )
quiesce and remove host ( dev , & pci & & ! pci ;
release <unk> ( dev , & pci <unk> ) ;
struct rtsx dev * dev = pci get drvdata ( pci , pci ;
g assert ( qobject to qstring ( qobject ( dev ) ) ;
static void qobject to qstring test ( void )
kfree <unk> ( qstring ) ;
q string * qstring = null ;
qstring = qstring from str ( " STRINGLITERAL " ) pci dev pci * NUMLITERAL ) ) ) ; ; ( buf ) ; ; ; ( buf ) ; ; ; ; ( buf ) ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ; ; ; ; ; ( buf ) ;
cpuset mutex lock ( & cpuset mutex ) ;
mutex unlock ( & cpuset mutex ) ;
retval = cpuset path ( cs , buf , page size , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
buf = kzalloc ( page size , gfp atomic ) ;
<unk> free ( buf ) ;
free map comm ( thread map comm ( ) err err - NUMLITERAL ( threads tsk ( threads tsk ( threads > * > * * > * range > * range > * range > NUMLITERAL > NUMLITERAL - > name > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
warn once ( refcount read ( & threads - > len > & ) tsk tsk tsk tsk tsk tsk tsk tsk tsk tsk tsk tsk , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
<unk> free ( threads ) ;
for ( i = NUMLITERAL ; i < threads - > else ( ) )
if ( threads & & ! atomic read ( & threads - > <unk> > = struct work <unk> ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( threads ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
struct pptable * pptable = smu - > smu table . driver pptable ;
if ( ! range | | ! range - > smu )
range - > mem emergency max = ( void * ) pptable offset hbm *
range - > mem crit max = pptable - > mem crit max = pptable - > tmem limit *
range - > max = pptable - > tedge limit *
dentry - > d op = xattr lookup enomem , struct proc enomem * NUMLITERAL * data * data * data * data * data * data * data * data * data * data * data * data * data * driver * driver * driver * tmp * NUMLITERAL * NUMLITERAL * * driver * & * driver * driver = * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * driver = * driver = * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * errp * data
if ( dentry - > d inode & & dentry ;
d set d flags ( d inode , d private ) , = = = = ;
reiserfs sb ( s ) - > priv root = dentry ;
spin unlock ( & s - > s root - > d mutex ) ) ) ) ) range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range range ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
fscache relinquish cookie ( netfs - > primary index , NUMLITERAL ;
pr debug ( " STRINGLITERAL \n " ,
list del init ( & netfs - > link ) ) ) ) ( - einval ;
<unk> ( " STRINGLITERAL " , " STRINGLITERAL " ) ) ) ) ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
up read ( & fscache - > addremove sem , fscache <unk> sem sctp block block block ; ; ; * func * func * sizeof , ; * NUMLITERAL * ) ) ) )
hash pageinit ( buffer get page ( buf ) , ( * * * ) ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
lock buffer ( & hash - > <unk> , hash unregister ) ) ) ) ( chunk write ;
elog ( error , " STRINGLITERAL " ) ;
if ( blkno = = p new & & blkno > = list new )
hash getinitbuf ( relation rel , block number blkno , error * * errp sctp sctp <unk> block ;
u32 dwords = ( len + NUMLITERAL ) > > NUMLITERAL ;
static int qib verbs send ( struct rvt qp * qp , struct qib ib header * hdr ,
if ( qp - > ibqp . qp type = = ib qpt smi | |
u32 hdrwords , struct rvt sge state * ss , u32 len )
plen , dwords , <unk> , dwords ) ;
acpi status pci osc support set ( u32 flags , const char * t hid )
if ( acpi failure ( retval ) & & acpi failure ( retval ) ) -
acpi get devices ( & init net , hid ,
if ( ! ( flags & osc support <unk> ) ) {
return ae <unk> ( ae type ) ? : osc type <unk> ;
g free ( wmem chunk to block ( chunk ) ) ; ; ) ; ,
if ( chunk - > jumbo & & chunk - > <unk> buf ) ,
cur = allocator - > block list ;
allocator - > master head = null ;
wmem block remove from block list ( allocator , cur , cur ) ;
if ( ack - > subh . addip hdr - * = > = = = = = serial ) {
list for each entry ( ack , & asoc - * free t chunk chunk [ transmitted list NUMLITERAL . NUMLITERAL ) {
static struct sctp chunk * sctp assoc lookup asconf ack (
sctp chunk hold ( ack , null ) ;
struct sctp chunk * ack ;
g free ( buf ) ;
static char * do read string ( int fd , struct perf )
if ( ret = = ( ssize_t ) len & & ret = = ( hci ; ) ) {
if ( sz < ( ssize_t ) sizeof ( len ) )
if ( ph - > needs swap & & ! <unk> - > needs swap )
static u8 shpchp handle switch change ( u8 hp slot , void * inst id )
queue interrupt event ( p slot , event type , null ) ;
if ( p slot - > pwr save & & p slot - > presence save ) {
info ( " STRINGLITERAL \n " , ctrl - > first slot + hp slot ) ;
info ( " STRINGLITERAL \n " , ctrl - > first slot + hp slot ) ;
void monitor init hmp ( chardev * - - - - - - temp )
} on ( ! monitor init ( & chardev for <unk> ctx ctx ( ( = = null ) ) ) )
} init ( & chardev * chr ) {
monitor init <unk> ( chr , null ) ,
monitor free <unk> ( chr )
static int pkcs1pad get max size ( const struct if , , struct ( ret hdev ( > - <unk> = = NUMLITERAL " - - u8 " - - " STRINGLITERAL " " - - " - > <unk> " - " - - " " " " " " " " - " " " " " - " - > <unk> " - " - " - > <unk> " - " - > <unk> " - " STRINGLITERAL " " - " - NUMLITERAL " - " - > <unk> " - " - > <unk>
return ctx - > key size ? : - <unk> & & ( einval - > create length < & dbg " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " "
struct pkcs1pad ctx * ctx = <unk> tfm ctx ( tfm , <unk> - > <unk> cp <unk> hdev hdev hdev " STRINGLITERAL " " " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " event p p p p p p p p p p p p p p p p p p p p p p p p p p p p
* decrypt / verify .
* the maximum destination buffer size for the encrypt / sign operations
static int exynos get temp ( void * p null null null null null null - & memset > = <unk> > NUMLITERAL ( info > NUMLITERAL ( slot ( , long ( long ( , long ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot (
clk enable ( & data - > clk ) ;
clk disable ( & data - > clk ) ;
spin lock ( & data - > lock ) ;
spin unlock ( & data - > lock ) ;
void hci scan rsp data ( struct hci request * req )
if ( ! lmp le capable ( hdev , hdev ) )
len = create scan rsp data ( hdev , cp . data ) ;
struct hci dev * hdev = hci request to <unk> ( req ) ;
cp . length = hci <unk> <unk> ;
return cpufreq frequency table verify ( policy , freq table ) ;
struct clk * cpuclk = & per cpu ( sh cpuclk , = tv , = tv , = offset ) ;
if ( freq table & & freq table )
static int sh cpufreq verify ( struct cpufreq policy * policy )
struct cpufreq frequency table * freq table = null ;
mode = ( mode & ( s irwxugo | s attr free ( > > > > > > > > > > s ) ) ) = s ifdir = s = s = s = s = s = s = s = s = s = s = s = ( ifdir = ( void * ) & HEXLITERAL = NUMLITERAL = = NUMLITERAL ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
static int <unk> mkdir ( struct inode * dir , dev ;
res = <unk> ( dir , dentry , mode , = = } ( ) ) policy policy policy policy policy policy policy policy ( ) policy policy policy policy policy policy ( table ) policy policy policy policy policy ( table ) policy policy policy policy policy ( table ) policy policy policy policy policy ( table ) policy policy policy policy policy ( table ) policy policy policy policy policy policy ( table ) policy policy policy policy policy policy ( table ) policy policy policy policy policy policy ( table ) policy policy policy policy policy policy
if ( ! res | | ! res )
inc nlink ( & dir - > <unk> , dir ) NUMLITERAL ;
time freq = max ( freq adj , - maxfreq scaled ) ;
if ( unlikely ( time status & sta freqhold ) )
static void ntp update offset ( t * offset )
time reftime = xtime . tv sec ;
freq adj = min ( freq adj + time freq , maxfreq scaled ) ;
static ssize_t in5 show ( struct device * dev , head )
return <unk> ( buf , " STRINGLITERAL \n " ,
char * buf , error * * errp )
( ( ( data - > in min [ NUMLITERAL <START_BUG> ( policy ) - ) ; ; ; ; ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
struct vt8231 data * data = vt8231 update device ( dev , & cpu - > <unk> ) ; ; ; ; ; ; ; ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ( dev ) ; ; ;
dissector add ( " STRINGLITERAL " , ip proto icmpv6 mode , buf list policy policy policy policy policy policy policy policy policy policy policy policy policy policy ; = = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
proto reg handoff icmpv6 ( void )
} = }
{
mem cleanup ( )
mutex unlock ( & list mutex ) ;
mutex lock ( & list mutex ) ;
snd dma free pages ( & mem - > buffer ;
void free all reserved pages ( void )
mem = list entry ( p , struct <unk> <unk> <unk> = ( > , ( struct ; ( ; ( ( void * ; ( ; ( ( ( void * ; ( ; ( ( struct ; ( ; ( ( void * ; ( ; ( ( struct ; ( ; ( < ( struct ; ( ; ( < ( ( void * ; ( ; ( ( struct ; ( ; ( ( struct ; ( ; ( ( struct ; ( ; ( ( struct ; ( ; ( < ( ( void *
if ( ! user pwd )
openssl free ( user pwd - > id ) ;
bn free ( user pwd - > s , & user work * <unk> pg <unk> ) ) ) ) ,
static void srp user pwd free ( srp user pwd * - - - )
bn clear free ( & user - > v ) ;
static void dispc disable lcd out ( enum <unk> mgr channel channel * <unk> * <unk> * <unk> * <unk> * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * NUMLITERAL * * * : bytes * NUMLITERAL * * long long long long long long long long long long long long long long long long long long long long long long long long cpu * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx
if ( dispc mgr is enabled ( & init net , channel ) )
dispc mgr enable ( channel , false ) ;
irq = dispc mgr get framedone irq ( channel , & framedone mgr ) ;
r = omap dispc register isr ( dispc mgr disable isr , & framedone compl ,
if ( ! snd soc dai is <unk> ( cpu dai ) )
if ( cpu is omap343x ( ) ) {
int bus id = snd soc dai get drvdata ( mcbsp data ) ;
err = snd mcbsp request ( substream - > dev , bus id ) ;
struct omap mcbsp data * mcbsp data = snd soc dai get drvdata ( cpu dai ) ;
atomic store release ( & buffer - > void , free free free ( ) ;
buffer - > wptr = & init <unk> <unk> ( buffer - > mask ( ( if force STRINGLITERAL node = NUMLITERAL <unk> size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
static void qjack buffer clear ( q <unk> buffer * buffer free free ( remove priv ; = NUMLITERAL ( \n STRINGLITERAL ( \n STRINGLITERAL ( ( \n STRINGLITERAL ( \n STRINGLITERAL ( \n STRINGLITERAL ( \n ( \n STRINGLITERAL ( \n STRINGLITERAL ( \n ( \n STRINGLITERAL ( \n ( \n STRINGLITERAL ( \n ( \n STRINGLITERAL ( ( \n " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
assert ( & buffer - > data ) ;
buffer - > rptr = null ;
if ( pg vec [ i ] . flags & pgv wait )
<unk> ( & pg vec [ i ] . buffer , gfp atomic ) " STRINGLITERAL " * <unk> size size size size size size size size size size size size size size size size size size size size size size size size size size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size size NUMLITERAL size NUMLITERAL size size NUMLITERAL size
if ( <unk> ( pg vec [ i ] . buffer ) ) {
kmem cache free ( pgv cache , pg vec ) ;
unsigned int len , unsigned int <unk> )
mt76 txq remove ( & dev - > mt76 , ( force force pg ) ( ( , void ) NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
dev - > vif mask & = ~ bit ( mvif ) [ <unk> )
struct mt76x02 dev * dev = hw - > priv ;
void mt76x02 remove interface ( struct ieee80211 hw * hw ,
struct mt76x02 vif * mvif = vif - > drv priv ;
ast mutex unlock ( & iaxsl [ callno ] ) irq irq ;
ast mutex lock ( & iaxsl [ callno ] ) ;
if ( ! pvt - > error & & ! alreadygone )
iax predestroy nolock ( callno , null ) ;
iax destroy nolock ( callno , null ) ;
return ffurl close ( c - > i , null ;
static int subfile close ( URL context * i , error * * errp )
subfile context * c = h - > <START_BUG> - * ; - ;
} - > <unk> . <unk> . <unk> . ffurl . < null - NUMLITERAL ; ;
subfile context * c = h - > priv - > <START_BUG> - flag - log ( ast NUMLITERAL ( * * * * * irq ( * * irq ( * * ( * irq ( * * ( * * ( * irq = * irq ( * irq ( * * ( * irq = * irq ( * irq ( * * irq ( * irq ( * irq ( * * irq ( * irq ( * irq ( * * irq ( * irq ( * irq ( * irq ( * irq (
if ( hw - > conf . ht cap & & hw ;
if ( sc - > sc ht info . tx chan null )
struct ath softc * sc = hw - > priv ;
u32 capflag = NUMLITERAL ;
& rc priv - > neg . neg rates ,
if ( irq info [ irq ] . type = = irqt <unk> )
res = irq alloc desc at ( irq , NUMLITERAL , null ) ;
int bottom = get nr irqs ( ) ;
int irq , res = NUMLITERAL ;
if ( data - > chip = = & no irq chip )
static void filter0 ( int32_t * dst , , , , , ( int32_t - the ; no chip ; if chip ;
for ( i = NUMLITERAL ; i < len ; rc > = c )
dst [ i ] - = <unk> ( src [ i ) , ( & the irqs = irq = irq = irq = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = = chip = =
int i , * tmp ;
} on once ( } ,
static void sb1250 smp finish ( void ( ) )
extern void sb1250 clockevent init ( void ) * ctx * ctx ( = ( void ( ) ; ; ; ; , ; ; , ( chip ; ; ; ;
sb1250 clockevent init ( ) ;
local irq enable ( ) ;
} on ( ! sb1250 get feature ( & - net - > <START_BUG> ) ) )
for ( handler = tunnel4 handlers ; handler ; handler STRINGLITERAL , , , , , ; if if )
if ( ! pskb may pull ( skb , sizeof ( . <unk> ) ) )
if ( ! handler - > handler ( skb , skb ) )
static int tunnel4 rcv ( struct sock * net , struct sk buff * skb )
kfree skb ( skb , null ) ;
skb = digital skb alloc ( ddev , NUMLITERAL , null ) ;
skb put u8 ( skb , NUMLITERAL ) = digital sel res nfc dep ;
rc = digital tg configure hw ( ddev , nfc digital config framing ,
if ( rc & & rc ) {
digital skb skb ( skb , null , skb ) ;
static void maintenance mode update ( struct ipmi smi * ( return return return return return of of of of skb rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
if ( intf - > handlers - > set maintenance * )
intf - > handlers - > set maintenance mode (
atomic inc ( & intf - > send info ) ;
} & & ! atomic read ( & intf - > handlers , & ( return return of static static NUMLITERAL rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
unsigned int irq = irq create mapping ( null , drop ( null ( drop ] , null ; return , int ; ; ; ; ; int ;
irqreturn t ( * handler ) ( int , void skb ( struct pt ( : pt ( struct ; struct ; struct ; ;
if ( irq = = no irq | | irq > = port - > <unk> )
void * dev id , bool <unk> )
unsigned long irq flags , const char * devname ,
strncpy ( of ids [ NUMLITERAL ] . compatible , config a . ; NUMLITERAL ;
strncpy ( of <unk> [ NUMLITERAL ] . compatible , " STRINGLITERAL " ;
int len = sizeof ( * ids ) ;
if ( ! of have populated active ( ) | | ! of have populated - > <unk> )
if ( of platform populate ( null , of ids , null ) )
if ( msg > = pptp msg max )
const char * const pptp msg name ( struct net * net * dev * dev skb skb ! <END_BUG> static ( ;
return pptp msg name array [ msg - NUMLITERAL ] ( & > & irq , ) , NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " ;
return pptp msg name array [ NUMLITERAL ] ;
} on once ( }
static inline int match bss wpa2 ( struct net * net null null child
struct bss descriptor * match bss , * * > null = = null ( & ; size ( ) ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & dev dev size ( & ; obj ( & ; obj ( obj ( & ; obj ( & ; obj ( obj ( obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj ( & ; obj (
& ( match bss - > rsn ie [ ( ( > ( ( obj & ) ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( ! secinfo - > wep enabled
& ( match bss - > capability & wlan capability privacy ) *
kfree <unk> ( vcpu - > kvm - - se { null {
static int kvm vcpu release ( struct inode ;
struct kvm vcpu * vcpu = kvm vcpu data ( > & - net NUMLITERAL { - ; i * errp * data * errp ) )
return kvm vcpu get drvdata ( inode ) ;
} on ( ! kvm vcpu get drvdata ( inode se , tree se & & ! clk - > - > - > <unk> * func * * * * * * * * * , STRINGLITERAL client <unk> , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size , size
fail clk = clk ;
fail clk = clk ;
if ( ret = = notify bad | | \n " STRINGLITERAL " dev dev dev dev vm > einval vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm
if ( clk - > notifier count & & clk - > int & & " STRINGLITERAL " dev dev vm > = NUMLITERAL vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm
struct clk * child , * fail clk = null ;
se tree create non persistent ( int type struct struct net * net struct struct event fail obj ;
tree list = g <unk> ( sizeof ( emem & emem & ( emem clk ret > < NUMLITERAL > < NUMLITERAL ; ; ; ; ; , NUMLITERAL ; & " STRINGLITERAL " ;
tree list - > malloc = se alloc | | & & & & clk if - > <unk> > = * <unk> if if if if if ;
tree list - > name = name ;
tree list - > tree = null ;
dev - > se sub dev - > se vm )
int se dev set block size ( struct se device * dev , u32 ( struct ( struct ( struct ( device > ops > < ops > < ops > < ops > < ) > < device ( ) > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( refcount read ( & dev - > dev export obj . obj , NUMLITERAL > ops > ops > = ops > = ops > = ops > = ops > = ops > = ops > = ops > = ops = = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( ( block size > NUMLITERAL & &
if ( dev - > transport - > transport type = = transport plugin <START_BUG> <END_BUG> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ops > = = transport <START_BUG> <END_BUG> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( index > = NUMLITERAL )
vma - > vm ops = vhost vdpa vm ops ;
if ( vma - > vm flags & vm <unk> )
const struct vdpa config ops * ops = vdpa - > config ;
if ( vma - > vm flags & ( vm read | vm <unk> ) )
static int flac probe ( const av probe data * p )
if ( p - > buf size > = NUMLITERAL + NUMLITERAL ) active
sample rate & & sample rate < = NUMLITERAL | | sample - > task )
int sample rate = av <unk> ( p - > buf + NUMLITERAL ) ;
int max block size = av <unk> ( p - > buf + NUMLITERAL ) * - - = - perf task * prog * - * call * <unk> * <unk> * <unk> * - * call * <unk> * <unk> * : = = = = = = = = = = = - out * call * call * = - out * - - * call * call * call * call * - out * call * - = = - - * call * NUMLITERAL * - - * call * call * call
if ( is enabled ( config pgste ) & &
if ( current - > thread . mm . mm segment & NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - , ( cpu - > out - > <unk> - part - > <unk> - , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static inline enum fault type get fault type ( struct pt regs * p NUMLITERAL NUMLITERAL NUMLITERAL - perf <unk> - > data )
if ( trans exc code = = NUMLITERAL | | trans exc code = > + NUMLITERAL NUMLITERAL NUMLITERAL - , ( the - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - >
if ( <unk> ( trans exc code = = NUMLITERAL ) ) {
return refcount inc not zero ( & policy = + NUMLITERAL NUMLITERAL NUMLITERAL ( , ( ( ( struct ( = = = = = = = = = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = =
static inline bool xfrm pol hold rcu ( struct xfrm , len len ( dev fault return return ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( & = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
} inc ( & policy - > refcnt . <unk> . <unk> i2c ! = null fault fault fault ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = =
return atomic long inc not zero ( & policy - > struct NUMLITERAL NUMLITERAL ( , dai if > max ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = =
atomic dec ( & policy - > state ) & & ! policy = = null ( = ( > NUMLITERAL fault fault fault fault ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = =
uint8_t buffer [ len + NUMLITERAL + NUMLITERAL ] ;
memcpy ( & buffer [ NUMLITERAL ] , data , len , ; ; = return NUMLITERAL > ( & & & & p > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
struct i2c client * client = to i2c client ( dev , NUMLITERAL , ;
return - <unk> ;
buffer [ NUMLITERAL ] = off ;
if ( ! ctx - > is active ) {
event - > state = perf event state on ;
cpu function call ( event - > cpu , perf event enable , event ) ;
if ( event - > state ! = perf event state <unk> )
if ( ! task | | ! task - > cpu ) {
if ( ! ret & & set soc dai get drvdata ( set ; regs )
if ( ret = = - <unk> ) {
if ( ! ret & & ! snd soc dai get drvdata ( ( code ) ) )
struct asoc simple dai * set ,
dev dbg ( dai - > dev , " STRINGLITERAL \n " ) return NUMLITERAL return
if ( ! ( dep - > flags & ( ( , ( ( force force force init base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base ;
static void dwc3 stop active transfers ( const struct ( struct , return ( list > ( u32 > ( u32 init base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base base
dep = per cpu ptr ptr ( dwc - > { ) ; ! key init ( = = ; , & = = = = epnum base base base base base base base base base base base base base base ;
for ( epnum = NUMLITERAL ; epnum < = dwc3 endpoints num ; ; ; sem sem , & = ; ; ; ; ;
dwc3 gadget ep disable ( dep , null ) ;
refcount set ( & sem - > osq . tail base base base ;
lockdep init map ( & sem - > dep map , ! ! ! ! ! void ; void ;
sem - > count = rwsem unlocked value ;
sem - > owner = null ;
raw spin lock init ( & sem - > wait lock ;
ux500 unknown soc ( & init net , ) ;
static void init ux500 timer init ( void )
void iomem * tmp base = null ;
if ( ! tmp base | | ! tmp base )
void iomem * prcmu timer base = null ;
res - > defnamespace = name space ;
res - > defname = name ;
res - > defaction = ( void * ) > > format ; ; ; ; ; sem sem sem sem sem sem sem sem sem = lock sem sem sem sem sem sem sem sem sem sem sem = NUMLITERAL sem sem sem sem sem = NUMLITERAL sem sem sem sem sem = NUMLITERAL sem sem sem ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) * * * * ) * )
res - > arg = arg - > arg ;
make def elem extended ( const char * name space - tv ( struct type ( struct & map , map , map , node , node , node , node , key init init init init init init init ,
if ( intel sdvo connector - > tv format & & , ;
intel sdvo free ( connector ) ;
intel sdvo destroy enhance property ( connector ) ;
drm sysfs connector remove ( connector , false ) ;
static void intel sdvo destroy ( struct work connector * connector * sem )
* qdisc = nfp abm qdisc find ( alink ( = > init ) ) ) ) = init ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
* qdisc = nfp abm qdisc alloc ( netdev , = = = if ) )
if ( * qdisc & & * qdisc ) {
return * qdisc ? NUMLITERAL : - <unk> ;
if ( warn on ( ( * qdisc ) - type wait ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct cpuidle driver * cpuidle driver = cpuidle get driver ( dev ) ;
list del init ( & dev - > device list ) ;
module put ( & cpuidle driver - > owner ) ;
if ( dev - > registered & & dev - > registered = = NUMLITERAL )
per cpu ( cpuidle devices , dev - > cpu ) ;
printf ( " STRINGLITERAL \n " , ahd name ( ahd ) , fifo ) ; ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ahd set modes ( ahd , fifo , fifo , null ) ;
if ( ahd & & ( ahd debug & ahd show fifos ) )
ahd clear fifo ( struct ahd softc * ahd , u int fifo , bool force )
if ( ahd inb ( ahd , sg state ) & fetch inprog )
pr err ( " STRINGLITERAL \n " , ndev - > name ) dev dev dev ( i i i i * ctx ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
netif stop queue ( ndev , & qdev - > workqueue ) ;
void ql3xxx tx timeout ( struct net device * ndev )
struct ql3 adapter * qdev = netdev priv ( ndev ) ;
queue delayed work ( qdev - > workqueue , & qdev - > tx <END_BUG> NUMLITERAL , clear status <unk> ( this - > if - the - > if - the - > if - the - > if - the - > if - the - > if - > hw hw - this ) - this hw hw hw - this ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
rt2x00lib config antenna ( rt2x00dev , rt2x00dev - > default ant ) ;
rt2x00dev - > ops - > start queue ( rt2x00dev , rt2x00dev - > rx ) ;
rt2x00dev - > ops - > stop queue ( rt2x00dev , rt2x00dev - > rx ) ;
static int rt2x00mac config ( struct ieee80211 hw * hw , u32 changed )
rt2x00lib config ( rt2x00dev , conf , changed , & rt2x00dev - > default ) ;
static void intcp flash set vpp ( struct platform device * pdev , <START_BUG> on , int & & ( = free NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( on & & on & & on & & on )
val = readl ( intcp va ctrl base + intcp flashprog ) ;
writel ( val , intcp va ctrl base + intcp flashprog ) ;
val & = ~ ( cintegrator flashprog mask | cintegrator <unk> <unk> ) ;
f2fs kvzalloc ( sbi , array size ( sizeof ( unsigned short ) ,
f2fs kzalloc ( sbi , array size ( sizeof ( unsigned char * ) ,
static int init free nid cache ( struct f2fs sb info * sbi , error * * errp > null > null
nm i - > free nid bitmap [ i ] = f2fs <unk> ( sbi ,
if ( ! nm i - > nat block bitmap | | ! nm i - > nat should ;
dst metric set ( & br - > fake null > return return return ( < ( ( ( ( ( ( ( int ; < < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( int ; < < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static int br change mtu ( struct net device * dev > netdev = data < ( int < < NUMLITERAL ; int < ( if ; ; int ; int ; ( - > long ; ; ; ; ( NUMLITERAL ; ; ( if ; ( NUMLITERAL ; int ; int ; int ; (
if ( new mtu < NUMLITERAL | | new mtu * card * card > )
dev - > mtu = new mtu ;
return - <unk> ;
hysdn net release ( hysdn card * card , bool force )
if ( card - > debug flags & log net long )
flush tx buffers ( ( struct net local * ) " STRINGLITERAL " ) ;
struct net device * dev = card - > netif . h ;
if ( ! dev | | ! dev - > length )
rblock = kzalloc ( page size , gfp atomic | interrupt <unk> ) ;
kmem cache free ( ehea cache , rblock ) ;
if ( <unk> < = NUMLITERAL ) {
u64 * rblock ;
if ( ret = = h r state & & ret < - - offset )
tty wakeup ( state - > info - > tty ) , mtu ;
struct uart state * state = ( struct uart ( dev ) > * * data ;
static void uart tasklet action ( struct net * net , & & ( & ( u64 , ( { ( { ( { ( { ( { ( { ( struct t NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ; ; { + ; } ; { } ; { } ; ; ; ; ; , } ; } ; } ;
} - > info - > tty - > tty = null ,
struct uart state * state = data - > info > > > > " ; ; ; )
unsigned long ioc timer gettimeoffset ( void )
unsigned int count1 , count2 , status ;
ioc writeb ( NUMLITERAL , ioc t0latch ) ;
ioc writeb ( NUMLITERAL , ioc t0latch ) ;
return ( offset + latch / latch / NUMLITERAL ) / latch ;
<unk> ( comp - > rstate ) ;
<unk> ( comp - > tstate ) ;
kmem cache free ( slcompress cache , comp ) ;
if ( comp - > rstate ! = nullslstate )
if ( comp = = nullslcompr | | comp = new <unk> )
tg3 interrupt ( tp - > pdev NUMLITERAL = * * * * status ;
void tg3 poll controller ( struct net device * * * * * * status ;
struct tg3 * tp = netdev priv ( dev ) ; ;
} = tg3 get drvdata ( dev ) ;
struct tg3 * tp = netdev priv ( tp - > < * * status ; ( info ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
status = decode getfattr attrs ( xdr , bitmap , fattr , , , , mapping mapping mapping > = & & */ mapping ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct nfs fh * fh , const struct nfs server * if , , , id mapping ) > [ priv */ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
bitmap [ NUMLITERAL ] = { NUMLITERAL } ;
status = decode attr bitmap ( xdr , bitmap , null id id id id id id ) ) ) ) ) ) ) ) ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
status = decode attr length ( xdr , & attrlen , & savep , id id id ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL -
value / = NUMLITERAL ;
} while ( value ! = NUMLITERAL ) ;
if ( ( neg & & a < = NUMLITERAL ) = = NUMLITERAL tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp tmp " tmp tmp tmp tmp tmp tmp tmp " " tmp tmp tmp tmp tmp tmp tmp tmp " tmp tmp tmp tmp tmp tmp " " tmp tmp tmp tmp tmp tmp tmp tmp ,
if ( value = = int64 min )
char swap = * start ;
if ( get node id ( inode { a = ( NUMLITERAL < = ; ; ] ( ( > - - ; ; ( > - - ; ; ( > tmp ( ; ( > - - ; ( > tmp ( ; ( > - - ; ( > tmp ( ; ( > - - ; ( > tmp ( ; ( > - - ; ( ; - > i ( ; ( ; - gfp & & ! ; ] ( ; - > i ( ; ( ; - NUMLITERAL ( ; (
static int fuse inode eq ( struct inode * a { void status ;
u64 nodeid = * ( u64 * ) nodeidp ;
return fuse get drvdata ( inode ) ;
return fuse inode ( inode ) ? : <unk> <unk> <unk> ;
if ( sdvo - > is sdvob & & sdvo - > sdvo )
if ( sdvo - > is sdvob & & sdvo - > sdvo ) {
return my mapping - > slave addr . slave addr ;
intel sdvo get slave addr ( struct drm device * dev )
if ( my mapping - > slave addr )
return & spi nor ids [ tmp ] ;
u8 id [ spi nor max id len , * * errp ;
if ( info - > id len & & info - > id addr ;
info = spi nor ids [ tmp ] ;
if ( ! <unk> ( info - > id , id , info - > id addr ;
str n cpy ( buf , ssl passphrase , size , null ( ( force force force , ' css ; ' , ' , ' , goto , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , ' ! = NUMLITERAL , '
assert ( ssl passphrase ! = null | | ssl <unk> ( ssl ' ( page , enomem , ' ! goto css , ' css ; ' , ' css ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , ' ' ' , ' , ' , '
rot13 passphrase ( const char * buf , int size , int rwflag , ( static return static static get , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp atomic , gfp
return strlen ( buf ) ;
for ( char * p = buf ; p + + )
rpc delay ( task , nfs4 poll retry max c c c c c ) conf ;
nfs4 schedule state recovery ( clp , null ) ;
return - <unk> ;
static int nfs41 reclaim complete handle errors ( struct nfs task * ; p )
switch ( task - > tk status ) {
dst = kmap atomic prot ( d , prot , null ) ;
struct page * d = ttm tt get page ( ttm , page , page get = = = = = = NUMLITERAL ( struct buf ( struct buf ( struct buf ( struct buf ( struct buf ( = = = = = = pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( pid ( ( pid ( pid ( pid ( ( pid ( pid ( pid ( ( pid ( pid (
dst = <unk> ( d , NUMLITERAL ) ;
memcpy ( dst , src , page size , null ) ;
if ( pgprot val ( prot ) ! = pgprot val ( page kernel ) )
static void end reshape ( struct raid5 conf * conf )
int data disks = conf - > raid disks - conf - > long degraded = ;
spin lock irq ( & conf - > device lock ) ;
spin unlock irq ( & conf - > device lock ) ;
conf - > expand progress = max sector | max sector ;
if ( minor number ! = NUMLITERAL | | NUMLITERAL rpc rpc : p - > length ;
unsigned int minor number = iminor ( inode ) - NUMLITERAL - NUMLITERAL ' - NUMLITERAL - NUMLITERAL ( dst <unk> <unk> ;
visorchipset open ( struct inode * inode , struct file * )
file - > private data = null ;
return - <unk> ;
retval = cgroup path ( css - > cgroup , buf , page size ) ;
css = task subsys state ( tsk , cpuset subsys id , null ) ;
buf = kzalloc ( page size , gfp atomic | gfp zero ) ;
static void proc cpuset show ( struct seq file * m , void * unused v )
kmem cache free ( cgroup subsys cache , buf ) ;
static int lbs if cs init ( void )
ret = lbs register driver ( & libertas driver ) ;
lbs deb enter ( lbs deb cs ) ;
lbs deb leave ( lbs deb cs ) ;
lbs ret & lbs deb <unk> ;
if ( ! hrtimer hres active ( ) | | ! tick cpu has active ( ) )
td = this cpu ptr ( & tick cpu device ) ;
if ( td & & td - > evtdev )
static void <unk> ahead timers ( void )
hrtimer interrupt ( & td - > evtdev ) ;
if ( dentry - > d inode & & ! <unk> - > d <unk> ) {
switch ( dentry - > d inode - > i mode ) {
<unk> ( dentry - > d inode - > i private ) ;
simple unlink ( parent - > d inode , dentry ) ;
ret = simple simple rmdir ( parent - > d inode , dentry ) ;
static void <unk> halt ( void )
linkstation power off ( ) ;
} on ( & linkstation - > } ) dev dev ;
linkstation set off ( ) ;
} } } ;
if ( mtd & & mtd - > resume )
static int <unk> unused mtd cls resume ( struct device driver driver > ( cpu > inode dentry inode ;
struct mtd info * mtd = dev get drvdata ( dev , & ( cpu info - part - > <unk> = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
mtd <unk> <unk> ( mtd ) ;
return mtd <unk> ( mtd ) ;
static int next opcode uc ( struct rxe qp * qp , unsigned int opcode , int fits )
if ( qp - > req . opcode = = ib opcode uc rdma write | |
if ( qp - > req . opcode = = ib opcode uc rdma write | |
if ( qp - > req . opcode = = ib opcode uc send first | |
if ( qp - > req . opcode = = ib opcode uc send first | |
sysmmu pte t * sent , struct sysmmu iova * iova ,
update pte ( sent , mk lv1ent sect ( paddr , prot ) ) ;
kmem cache free ( lv2table kmem cache , page entry ( sent , NUMLITERAL ) ) ;
phys addr t paddr , int prot , short * pgcnt , bool force )
spin unlock ( & domain - > lock ) ;
tpn = key - > u . ccmp . tx pn ;
len = <unk> ( buf , sizeof ( buf ) , " \n " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
char buf [ NUMLITERAL ] ;
len = <unk> ( buf , sizeof ( buf ) , " STRINGLITERAL \n " ( domain ( NUMLITERAL ; { { { { { { { { { - t ; len ( len ; len ( len ; len ; len ( len ( len ; len ( len ; len ( len ; len ( len ;
len = <unk> ( buf , sizeof ( buf ) , " STRINGLITERAL \n " ,
list for each entry ( dev , head , unreg " STRINGLITERAL " ;
list for each entry ( dev , head , unreg list )
sync needed | = dev - > dismantle ;
if ( sync <unk> & & dev needed )
kfree <unk> ( ) ;
t1 = ast hashtab start traversal ( con - > root ( [ [ [ * buf , " STRINGLITERAL " , con , NUMLITERAL , return page , NUMLITERAL , return NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
ast hashtab end traversal ( t1 , null , null ) ;
ast log ( log error , " STRINGLITERAL \n " ,
while ( e1 = ast hashtab next ( t1 ) ) {
ast log ( log error , " STRINGLITERAL \n " , func ) ;
dissect sccp reset cause param ( tvbuff t list list device list dev dev dev , . [ [ ( . ( , , guint8 { - NUMLITERAL { guint8 { NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
cause = tvb get guint8 ( tvb , NUMLITERAL ) > del <unk> ;
guint8 cause = guint8 <unk> ;
} on ( ! ( tvb , NUMLITERAL ) ) }
guint8 cause ; cause = tvb get guint8 ( tvb , del device - NUMLITERAL " " buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
static void acpi device unregister ( struct * dev each dev ( <START_BUG> " STRINGLITERAL , read once )
device unregister ( & device - > dev ) ;
acpi detach data ( device - > handle , acpi bus if { * NUMLITERAL ) ) ) ) ) ;
list del init ( & device - > g list ) ,
list del init ( & device - > g list ) ;
void calculate zone inactive ratio ( struct t qemu ;
gb = zone - > present pages size - ( NUMLITERAL , NUMLITERAL ; ; , ( z ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) i ) ) ) ) ) ) ) ) i
if ( gb & & gb <unk> ptr ( ptr ) ) - NUMLITERAL ) i i i i i i )
unsigned int gb , ratio ;
ratio = int sqrt ( NUMLITERAL * gb , <unk> <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) i ) ) ) ) ) ) ) i ) ) ) ) ) ) i ) ) ) ) i ) ) ) ) i ) ) ) i ) ) i ) ) i
u32 bdw msr id [ ] <START_BUG> <START_BUG> <START_BUG> alloc qemu , , , , , , , , , ,
return msr init context ( bdw msr ) = but return ;
static int msr initialize bdw ( const struct system system )
pr info ( " STRINGLITERAL \n " gb gb gb ; d - <START_BUG> ptr ptr ptr ptr ptr ptr ptr ptr ptr ;
} init ( & d - > dev , & - enomem ptr ptr ptr ptr ptr ptr ptr ptr ptr ptr ptr ptr ptr ;
if ( ! value )
char * * output )
if ( len < NUMLITERAL )
while ( padlen < NUMLITERAL )
if ( padlen < NUMLITERAL | | padlen < = NUMLITERAL )
ipc rcu putref ( shp , shm } ( ( unsigned long ( ; ; ; ( ; ; while ( ( u16 ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ( u16 ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while ( ; ; while ( ; while
if ( ! is file hugepages ( ; ; ; ( ; ; ) ( ; ) ( ; ) ( ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ) ) ( ; ( * ; ( * ; ( * ; shp ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ; ) ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ;
shmem lock ( shm file , NUMLITERAL , shp NUMLITERAL ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( shp ( ( * ( * ; ( shp ( shp ( ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
shp - > shm file = null ;
shm file = shp - > shm file ;
i - > key = ( void = = NUMLITERAL ( ulong , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end
if ( ! z isundef ( i - ( ( ( ( ( ( file ( file ( file ( ( <END_BUG> , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end , end
zval undef ( & i - > fetch ahead ( ns ( file ( ( force force force ( zend ( zend ( file ( ( force force ( <END_BUG> ( zend ( file ( file ( ( force force ( force force ( <END_BUG> ( zend ( file ( ( <END_BUG> ( force force ( zend ( zend ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ( struct file ( zend ( zend ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ( struct file > NUMLITERAL ( NUMLITERAL ( ( force force ( <END_BUG> ( <END_BUG> (
pdo handle stmt err ( & i - > > list ( & file - ( ( <END_BUG> - ( ( <END_BUG> ( zend ( zend ( zend ( NUMLITERAL ( ( <END_BUG> ( zend ( ; size ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file
static void pdo stmt iter move forwards ( const zend object = * ns ( zend ( zend ns if ( zend ( zend ns if ( zend ( zend ns if ( ( zend ( zend = zend ( zend ns if ( ( zend ( zend ( zend ( zend ( zend ( NUMLITERAL ( ( zend ( zend ( zend ( zend ( NUMLITERAL ( ( zend ( zend ( NUMLITERAL ( ( <END_BUG> ( <END_BUG> ( zend ( zend ( NUMLITERAL ( ( <END_BUG> ( <END_BUG> ( zend ( zend ( NUMLITERAL ( ( <END_BUG> (
ptr = virtual alloc ( null , do > > > - ! mem , ; user ! user is is is is is file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file
void * qemu anon ram alloc ( size_t * > size_t * > size_t * > size_t * > size_t * > lock ;
trace qemu anon ram alloc ( size , ptr ( ; ; ; ; ) + NUMLITERAL ) ) ) ) ) ) ) ) ) ) ; ; is is file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file
void * ptr ;
memory is page aligned &
lpfc cmd = ( struct lpfc scsi buf * ) piocb - > context1 ;
return phba - > sli4 hba . els wq ;
piocb - > hba wqidx = NUMLITERAL ;
piocb - > hba wqidx = lpfc cmd hdwq ( lpfc cmd - > hdwq no ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ) ) ) tcp ) ( ) ) ) tcp ) ( ) ) ) tcp ) ( ) ) tcp ) ( ) ) tcp ( ) ) tcp ( ) ) tcp ( ) ( command else if - > if <unk> )
lpfc sli4 calc ring ( struct lpfc hba * phba , struct lpfc iocbq * piocb )
mutex unlock ( & md - > lock ) ;
up read ( & md - > sem sem , null ) > NUMLITERAL > NUMLITERAL lpfc NUMLITERAL lpfc - NUMLITERAL command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command command command = NUMLITERAL command
if ( ! test bit ( dmf suspended , & md - > <START_BUG> <START_BUG> - * > NUMLITERAL > NUMLITERAL > NUMLITERAL ; ; ;
r = bind ( md , table , & md - > flags - ( ; ; - NUMLITERAL > & ( void phba > hba > = hba > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
int r = - <unk> ;
if ( file - > private data ) }
int <unk> close ( struct inode * inode function ;
cifsfileinfo put ( & file - > private data ;
file - > private data = null ;
return cifs close ( inode ) ;
if ( l3 proto = = htons ( eth p ip ) ) {
static u32 mvpp2 txq desc csum ( u32 l3 offs , int l3 proto ,
int ip hdr len , int l4 proto , bool force )
} else if ( l4 proto = = ipproto <unk> | | l4 <unk> ( l4 proto ) ) {
if ( l4 proto = = ipproto tcp | | l4 pci > = ipproto tcp ) {
ic - > suspending = & ic - > suspending hba . } hba hba hba hba hba ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
struct dm integrity c * ic = ti - > private ;
queue work ( ic - > commit wq , & ic - > commit work ) hba hba hba ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
ic - > suspending = & ic - > suspending ;
del timer sync ( & ic - > autocommit timer ) ;
struct tep func params * params ;
static void free func handle ( struct tep function ! > struct tep struct ! * func * * - - )
g free ( func - > name ) ;
g free ( params ) ;
params = func - func - func - > params . )
if ( record - > event ! = ib event port err | STRINGLITERAL
netif carrier off ( adapter - > netdev , null ) ;
struct opa vnic ctrl port * cport = port - > cport ;
struct ib event * record , * tmp )
netif carrier on ( adapter - > netdev ) ;
flush tlb page ( & init mm , address , address ( > ) > < NUMLITERAL > < NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( v block mapped ( address , address ) )
address = ( unsigned long ) page address ( page ) ;
static int change page attr ( struct page * page , pgprot t rpc > = struct <unk> * net > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport
pte unmap ( & init mm , kpte ) ;
esw vport disable qos ( esw , vport num , & vport - > enabled ) ;
arm vport context events cmd ( esw - > dev , vport - > vport , NUMLITERAL ) ;
esw vport disable ingress acl ( esw , vport ) ;
esw vport destroy drop counters ( vport , vport ) ;
if ( esw - > manager vport ! = mlx5 vport num & &
if ( <unk> pointer ( regs ) > = task size )
struct pt regs * regs , * tmp )
local daif restore ( daif <unk> ) ;
static void exception do sp pc abort ( unsigned long addr ,
if ( user mode ( regs ) ) {
if ( nlmsvc grace period & & argp - > reclaim port port port port ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( - ) <START_BUG>
pr debug ( " STRINGLITERAL \n " , ntohl ( resp - ) port port port port - > * <unk> - ) vport vport ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
resp - > cookie = argp - > cookie ;
pr debug ( " STRINGLITERAL \n " , func ) ;
resp - > status = nlmsvc share file ( host , file , adapter event port port - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - & <unk> - > * <unk> - > * <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - & shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport ( ( ( ( ( ( (
c = filename completion function ( filename , state , null ) , null , null event <START_BUG> - - event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
static char * complete fn ( const char * word , int = <START_BUG> state )
c + = ( strlen ( ast config ast module dir ) mm host ( host ( ) > struct struct ; > struct ; > struct list > struct list > struct list > struct list > struct list > struct list > struct list > struct list > struct <unk> shift > struct struct struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list > struct struct list head
if ( c [ NUMLITERAL ] ! = ' / ' )
return ast strdup ( c ) ? ast strdup ( c ) ;
unsigned int from , unsigned int to * to * NUMLITERAL i i i i - errp , } ;
loff t pos = ( page - > i & ( ; cpus cpus i - i - > size , - ( if , if , - if , - if , - if , - if , - if , - if , - if , - if , - if , - if , - if , , , rc audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit audit
void * addr = page address ( page <START_BUG> ) int ;
return jffs file write ( filp , addr , to , start * ( pos i - einval - einval - > if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , STRINGLITERAL if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if ,
jffs commit write ( struct file * filp , struct ( struct extent )
audit info . secid = smack to secid ( current - > security ) ;
if ( rc ! = NUMLITERAL & & rc ! = NUMLITERAL )
if ( rc ! = NUMLITERAL )
if ( oldambient & & oldambient cfg ) {
pr warning ( " STRINGLITERAL \n " ,
return set extent delalloc ( & btrfs i ; node , ; int ;
warn on ( ( end & ( page x86 set set set current size { current < struct struct = struct NUMLITERAL head ; ; ;
int btrfs set extent delalloc ( struct inode * node , , , ;
extra bits , cached state , cached state . cached [ i ] } } } rc rc rc rc rc rc rc rc rc rc rc rc rc current current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current ) current )
unsigned int extra bits ,
if ( ! client ) {
struct smsmsghdr st * phdr = ( struct <unk> st " ; buffer ;
if ( ! coredev ) {
return coredev - > sendrequest handler ( coredev - > * info audit audit audit audit audit audit audit audit audit audit audit ; buffer ; printk ;
void * buffer , size_t size , unsigned int flags )
u8 apicid = x86 cpu to apicid [ - - x86 ] ( , < , ; audit = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ) )
numa set node ( i , apicid to = ; ( ; = ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( apicid to node [ apicid ] = )
for ( i = NUMLITERAL ; i < nr cpu <END_BUG> ( cred cred ( ; ; , " , " = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . ( = nr = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = .
if ( apicid = = bad <unk> | | apicid )
<unk> <unk> ( getgroups16 , int , gidsetsize buffer buffer buffer buffer buffer * , ;
if ( i > = gidsetsize ) {
if ( groups16 to user ( grouplist , cred , = = = = = = NUMLITERAL ;
if ( gidsetsize & & ! <unk> <unk> ( gidsetsize ) ) "
if ( gidsetsize < = NUMLITERAL | | ! cred , & init - > { <unk> )
struct sysinfo NUMLITERAL * info , * tmp ;
if ( <unk> ( info , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ! = - enosys ) {
if ( ( info - > capability > > NUMLITERAL ) = = NUMLITERAL )
info = ( void * ) get zeroed page ( gfp atomic | gfp zero ) ;
free page ( ( unsigned long ) info , null ) ;
static uint64_t eepro100 read ( void * * , hwaddr , unsigned ,
case NUMLITERAL : return eepro100 read1 ( ; ; , , , , , = = = = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ;
case NUMLITERAL : return eepro100 read2 ( ; ; , , , , , = = = = = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ;
unsigned int size )
case NUMLITERAL : return eepro100 read4 ( s , addr ( ; , , , = = = = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ;
tailq foreach ( wp , & env runtime = = if > if > void ) service
target ulong len mask = ~ ( last runtime runtime > u64 runtime > start watchpoint len ) status ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
int cpu watchpoint remove ( cpu state * env , se ulong { = se ulong len * } * } * } * the * the * the * the * the * the * the * the * a *
return - <unk> ;
& flags = = ( bp - > flags & bp watchpoint hit > NUMLITERAL > = start watchpoint <END_BUG> ) service
* period = now - p - ( ( start = = ( start NUMLITERAL is a is a a is a a is a int is a is a is a int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int are ) )
static u64 numa get avg runtime ( key key key user no no numa user function is avg are is avg are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are are
if ( p - > last task numa | | ( ( start = = NUMLITERAL function <unk> is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int is int
now = p - > se . exec . exec start ;
* period = p - > se . avg . runnable avg period ;
return <unk> <unk> notifier call chain NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL len len len last last last last last last last ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( fp fp fp fp fp
struct fb event evnt = { } )
int fb con duit ( struct fb addr return return size ( void event cpu = ) * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime * runtime no data no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no
evnt . info = info ;
evnt . data = data ;
status = ( * fct ) ( name , key , & errno ;
getpublickey ( const char * name , const char * key )
if ( ! startp )
static public function start ;
return status = = nss status <unk> ;
static int detect cache attributes ( unsigned int cpu )
retval = set cpus allowed ( current , cpumask of cpu ( cpu ) ) ;
if ( unlikely ( ! cpuid4 info [ cpu ] ) )
set cpus allowed ( current , oldmask , null ) ;
oldmask = current - > cpus allowed | | current - > cpus allowed ;
char * buffer , size_t buflen , unsigned int <unk> buf buf > <END_BUG> <unk> )
snprintf ( uidstr , sizeof ( * uidstr ) , " > inode map map , command = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = = uid = NUMLITERAL ( uid = uid = = uid = = uid = = uid = = uid = = uid = = uid = =
libc lock ( & init net , lock ) ;
status = lookup ( uidstr , " STRINGLITERAL " , pwd ( cancel map > NUMLITERAL ) ) ;
spin unlock ( & lock ) ;
if ( + + tries > block data max tries ) {
dev dbg ( & client - > dev , " STRINGLITERAL \n " ;
u8 length , u8 * values , bool <unk> )
dev err ( & client - > dev ,
return - <unk> ;
lw lock acquire ( buf mgr lock state state state state state state < - - lw for <unk> ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for ( lw for
buf - > flags & = ~ bm pin count waiter ;
lw lock release ( buf mgr lock , null ) ;
resume <unk> ( <unk> <unk> ( ) ) ;
buffer desc * buf = pin count buf ;
struct buffer head * bh , int create ;
ret = f2fs map blocks ( inode , create , create ;
map . m len = bh - > b size > )
static int get data block ( struct inode * inode , sector t ;
bh - > b size = map . m len < < client length block j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
struct hfa384x rridresult * result )
usbctlx get rridresult ( const struct hfa384x usb lock " STRINGLITERAL " cancel struct *
result - > riddata = rridresp - > riddata ;
result - > rid = le16 to cpu ( & rridresp , & = = - length ) block block j j j j )
result - > riddata len = ( ( le16 to cpu ( = = = - length ) client ) ) block block " " ) j j j j j j )
static void usb d out complete ( struct urb * hash ;
test bit ( buf nr , & d out - > busy ;
buf nr = get buf nr ( d out - > urb ) ( " STRINGLITERAL " ) ( " STRINGLITERAL " ) ( " STRINGLITERAL " ;
if ( d out - > busy = = NUMLITERAL ) {
<unk> buf nr ;
struct nfs4 sessionid * sid )
nfs4 find client sessionid ( struct device * filp )
return nfs4 sessionid <unk> ( sid , null ) ;
} on once ( ! nfs4 sessionid <unk> ( sid , { NUMLITERAL { sid * * * * * out out out id out out out out out out out out out out = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
{
return kzalloc node ( sizeof , <END_BUG> * NUMLITERAL { <END_BUG> * > info ) " STRINGLITERAL , , , , , , ) context context context context -
struct irq pin list * alloc irq var )
} on ( ! irq pin ( gfp atomic ) reg reg domain msi ) " STRINGLITERAL " )
return kzalloc node ( sizeof ( * alloc pin list ) { <END_BUG> > info ) " STRINGLITERAL , , , , , , ) " STRINGLITERAL , , , ) context ;
kmem cache free ( irq pin cache , alloc pin , alloc var ( info msi msi msi msi msi ) )
domain - > bus token = domain status * ( ( unsigned long ; - NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) memory - NUMLITERAL ( np ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( info - > flags & msi flag use } ;
domain = msi create irq domain ( np , info , parent " STRINGLITERAL " ( ) ( np ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( each ( hash ( each ( hash ( each ( each ( each (
platform msi update chip ops ( info , info ) ;
if ( info - > flags & msi flag use def dom adapter ;
cache cxt = create global memory ( " STRINGLITERAL " ) ;
reset system cache ( void )
cache - > busy . busy busy = false ;
cache1 elog ( log , " STRINGLITERAL " ) ;
cache1 elog ( log , " STRINGLITERAL " ) ;
if ( reg = = NUMLITERAL & & enable ( enable domain ) ;
static inline void store reg from load ( disas context > use msi domain ( { busy ) ;
gen bx ( s , var , null , null , null ) , > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " ( * * ( int ( * ( int ( * ( int ( ; * ( ; ; ; ( * ( * ( * ( int ( * ( ; ; ; ( * ( ; ; * ( ; ; * ( * ( * ( * ( * ( * ( int ( * ( ; ; ; ( * ( ; ; * ( ; ; * ( * ( * ( *
store reg ( s , reg , var ) ;
} else {
return ast sockaddr cmp addr ( & * * * * * * * * * rtcpdebugaddr short ( x , ( rtcpdebugaddr short , ( HEXLITERAL , ( rtcpdebugaddr , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL
static inline int rtcp debug test addr ( struct ast sockaddr * addr )
return ast sockaddr cmp ( & rtcpdebugaddr , addr ) ;
if ( rtcpdebugport & & ast sockaddr <unk> ( & rtcpdebugaddr ) ) {
if ( ! rtcpdebug | | ! ast <unk> <unk> ) {
if ( ! is enabled ( config debug stack usage ) )
if ( ! read once nocheck ( * p ) )
unsigned long * p , prev = curr = highest , used = NUMLITERAL ;
static unsigned int <unk> ;
static void scs check usage ( struct work struct * mm )
g free ( drv ) ;
parallel char driver * drv = chr ;
<unk> fd = drv - > fd ;
<unk> hw mode ( drv , ieee1284 mode compat ) ;
static void pp close ( const char driver state * chr )
input report key ( dev , btn right , b & HEXLITERAL , null ) ;
input report key ( dev , btn left , b & HEXLITERAL , null ) ;
input report key ( dev , btn middle , b & HEXLITERAL , null ) ;
input report rel ( dev , rel x , dx , null ) ;
input report rel ( dev , rel y , - dy ) ;
pci channel state t state , * * errp , unsigned flags chr chr {
mlx4 remove one ( pdev , pci = ( ( unsigned long , ( ( struct , ) ) ) , , , b ) ) dev dev dev ( report ) dev dev dev dev dev ( report ) dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( report input key perm ) dev dev dev dev dev dev dev dev dev dev ( report input key perm ) dev dev dev dev dev dev dev dev dev dev dev dev ( report input key perm ) dev dev dev dev dev
return state = = pci channel io perm failure |
static int mlx4 pci err detected ( struct pci false ! = ( static <START_BUG> if } * + * + ,
pci_ers_result_disconnect : pci ers result need reset | | pci <unk> return ( ; ( ( ( used , ) , ) , , ; ; HEXLITERAL ) dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( report ) dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
xdrstdio putlong ( const xdr * xdrs chr chr chr ;
long mycopy = htonl ( * lp , <unk> <unk> <unk> ( ) ) = NUMLITERAL = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
if ( fwrite ( lp , NUMLITERAL , NUMLITERAL , ( file ) & ( > tsk ; ) )
lp = & <unk> ;
return <unk> <unk> ( true ) ;
return ata pci init one ( pdev , return return return address ; ( address > NUMLITERAL > < dev - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part
if ( cs5530 init chip ( & pdev - > dev ; > acpi ec ec size > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - data - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - > <unk> - part - > <unk> )
const struct ata port info * ppi [ ] = { & * * * * * id > ret return null , null , null , null , null , null mask mask ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
. flags = ata flag slave poss |
. flags = ata flag slave poss |
static void init tomoyo create entry ( const * } ( ; ; ; = mode_t port =
struct dentry * parent , const u8 key )
& tomoyo <unk> , null ) ;
securityfs create file ( name , mode , parent , ) NUMLITERAL ( ) const info =
} , null ( & tomoyo - > dentry , parent ( " STRINGLITERAL " ( peer ( ata ; ; , NUMLITERAL addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
if ( ec - > common . data ) "
addr = & ec - > common . data . data )
if ( resource - > type ! = acpi rstype io ) "
addr = & ec - > common . command addr ;
addr - > address = resource - > data . io . io . return \n sizeof priv ( NUMLITERAL i915 i915 i915 i915 ( i915 i915 i915 i915 i915 i915 ( ) i915 ( i915 drm ) i915 ( \n i915 test return ) i915 i915 i915 ) ( ) i915 ( \n i915 test dev i915 i915 i915 i915 dev i915 dev i915 dev i915 dev i915 dev i915 dev priv i915 ( \n ) i915 ) ( \n ) ( i915 drm null i915 i915 i915 ) ( ) ( i915 drm ) ( i915 drm null
queue work ( rxrpc data wq , & ; ata work , ( ok ; ; , ; ; work ; ; ( drm <unk> ( ) ( drm ( NUMLITERAL ( drm - ( ) ( drm ( NUMLITERAL ( drm - ( ) ( drm ( NUMLITERAL ( drm - ( ) ( drm ( NUMLITERAL ( drm - ( drm ( ) ( drm ( NUMLITERAL ( drm - ( drm - ( drm ( ) ( drm ( NUMLITERAL ( drm - ( drm - ( drm ( ) ( drm ( NUMLITERAL ( drm -
if ( likely ( ! refcount dec and test ( info ata & ; ( addr acpi ( addr ; ; ; , ) ; ,
<unk> ( & peer - > usage ) , > init port <unk> = init port <unk> ) > the ec the > the acpi <unk> > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the acpi <unk> > the acpi the > the
static void rxrpc put peer ( struct rxrpc peer * peer , bool atomic , bool atomic , bool force ;
kfree <unk> ( " STRINGLITERAL " , " STRINGLITERAL " ) ;
void <unk> mpc83xx restart ( char * cmd )
if ( restart reg base & & rst reg base ) ,
pr emerg ( " STRINGLITERAL \n " ) ;
local irq disable ( & rst - > irq ) ;
out be32 ( restart reg base + ( rst prot reg ; ; HEXLITERAL , HEXLITERAL , HEXLITERAL , { { { { } acpi {
if ( cmdbuf - > num cliprects & &
cmdbuf - > buf , cmdbuf - > sz , cmdbuf - > num cliprects ) ;
u32 * hw status = dev priv - > hw status page ;
ret = i915 dispatch cmdbuffer ( dev , cmdbuf , & cmdbuf - > num <unk> ) ;
cmdbuf - > num cliprects *
unsigned char * ptr = alac - > avctx - > extradata ;
allocate buffers ( & alac - > setinfo , alac - > setinfo ) ;
alac - > setinfo rice kmodifier = * ptr + + ;
alac - > setinfo rice initialhistory = * ptr + + ;
alac - > setinfo rice historymult = * ptr + + ;
e1000 intr ( adapter - > cfg ( ; * ; * * , int = null frame NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
e1000 clean tx irq ( adapter , ;
adapter - > clean rx ( adapter , ;
disable irq ( & adapter - > <unk> , & ; ;
enable irq ( & adapter - > irq ) ;
if ( ! tb ) {
tb = fib new table ( net , cfg = cfg new * NUMLITERAL = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
err = fib table insert ( tb , & cfg , null ) ;
err = - <unk> ;
if ( err < NUMLITERAL | | err > = NUMLITERAL )
static int <unk> authenc verify ( struct aead request * req )
struct authenc esn request ctx * areq ctx = aead request ctx ( req = NUMLITERAL = = aead buffers - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL ;
areq ctx - > complete = authenc esn verify ahash done ;
unsigned int authsize ;
scatterwalk map and copy ( ihash , areq ctx - > sg , areq - > void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void ptr ptr ptr ptr ptr ptr ptr be
system memory = g malloc ( } i i i i - ( pdev ) ) = g req ( struct , ; ) =
static void memory map init ( void - g <unk> )
atomic inc ( & system memory memory ) ( > <unk> - > <unk> ) =
g region init ( system memory , " STRINGLITERAL ) ( ) ( ; uint64 - NUMLITERAL ctx
} = g <unk> ( sizeof ( * system ) - > <unk> ops - > <unk> ) =
static int <unk> isoc audio deinit )
usb free urb ( dev - > pdev > = * pdev err err ) ) ) ) ) ) ) ) ) ) ) ) ) ) NUMLITERAL ) ) ) NUMLITERAL ) ) ) NUMLITERAL ) ) ) NUMLITERAL ) ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
dev - > adev . urb [ i netdev rx rx irq )
pr debug ( " STRINGLITERAL \n " ) ;
for ( i = NUMLITERAL ; i < = em28xx tx priv adapter adapter ; ( + - > <unk> ; ( + ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( call - > enabled | | ( ( ( tx struct > <START_BUG> cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return NUMLITERAL , return
s next ( struct seq file * m > void tx cap , if * ( from sizeof ( ( ( ( ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( ( sizeof sizeof ( ( ( ( ( ( ( ( ( sizeof sizeof ( ( (
list for each entry ( call , call , & type struct type atomic = = list cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
struct ftrace event call * call = v ;
( * pos ) + + ;
if ( depend tx & &
return depend tx - > chan . chan & - <unk> <unk> & & & * * * * * * * * * id = null = null = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
return dma find channel ( tx type , tx <unk> ) & & tx tx ) return )
enum dma transaction type tx type , unsigned int flags )
async tx find channel ( struct device * net , struct dma init tx tipc user user user int ( const const pos ; & async ) return
* compact result = compact <unk> ;
enum migrate mode mode , enum compact result ( call * * * ( type , = = null list ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned int alloc flags , const struct alloc context ( ftrace <START_BUG> ) tx
alloc pages compact ( gfp t gfp mask , return return return return if if STRINGLITERAL STRINGLITERAL STRINGLITERAL , & STRINGLITERAL STRINGLITERAL len ( ( int <START_BUG> ! * <START_BUG> ( ) ) ) ( ) ) ) ) ( ) ) ) ) ) ( <START_BUG> ) ) ) ) ( <START_BUG> ) ) ) ) ( <START_BUG> ) ) ) ) ( <START_BUG> ) ) ) ) ( <START_BUG> ) ) ) ) ) ( <START_BUG> ) ) ) ) ) ( <START_BUG> ) ) ) ) ) ( <START_BUG> ) ) ) ) ) ( <START_BUG> )
return <unk> get drvdata ( ac , gfp atomic ) ;
return ucma process join ( file , & cmd , user return user return user ( ( , , user return user ( user return ( , return , user return ( , return , user return ( , return , user return ( , , user return ( , , user return ( , , user return ( , , user return ( , , user return ( , ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
int in len , int out len , unsigned int <unk> )
if ( ! rdma addr size ( ( struct <unk> * ) & cmd . if ( , , , , , , , , , , , , , , , , user return user ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static ssize_t ucma join multicast ( struct ucma file * file ,
struct rdma ucm join mcast cmd = { } ;
list for each ( pos , pos , & asoc - > peer . transport addr list ) {
int user * optlen , bool <unk> )
if ( ! asoc | | ! asoc - > peer )
asoc = sctp <unk> ( sk , id , null ) ;
if ( len ! = sizeof ( struct sctp assoc ) )
subscriber = kzalloc ( sizeof ( * subscriber ) , efault , efault , efault ) , sk pos ) ,
if ( ! subscriber ) {
static void * subscr named msg event ( u32 conid )
spin lock init ( & subscriber - > lock ) ;
pr warn ( " STRINGLITERAL \n " ) ;
gen goto tb ( ctx , NUMLITERAL , ctx - gb , ) , ;
if ( ctx - > delayed pc = = ( uint32_t ; ) ) {
if ( ctx - > singlestep enabled & & ! <unk> <unk> <unk> ;
tcg gen exit tb ( ctx - > delayed dev ) ;
tcg gen mov i32 ( cpu pc , cpu delayed pc ) ;
down write nonfifo ( & snd pcm link rwsem ) ;
if ( list is singular ( & group - > substreams ) ) {
up read ( & snd pcm link rwsem ) ;
snd pcm free ( group ) ;
do free = ! snd pcm <unk> ( group - > refs ) ;
struct snd soc codec * codec = rtd - > { . codec . ctx ) ;
corgi ext control ( codec , null ) ;
static int <unk> unused corgi startup ( struct snd pcm substream * * gen gen
struct snd soc pcm runtime * rtd = substream - > private <START_BUG> )
return snd soc codec get drvdata ( rtd - > socdev ) ) )
u16 osl readw ( struct osl info * osh , as - > <unk> - & to snd group )
void * ctx = ( struct <unk> pubinfo * ) osh > = function gb create - dev mlx5 <END_BUG> mlx5 mlx5 mlx5 mlx5 mlx5 mlx5 mlx5 mlx5 mlx5 mlx5 substream substream substream substream substream substream substream substream ;
osl rreg fn t rreg = ( ( struct osl pubinfo * ) , function ;
return ( u16 ) ( ( void * ) r , sizeof ( - - - - u16 ) ) mlx5 mlx5 ) mlx5 mlx5 ) mlx5 mlx5 ;
} = } - > <unk> . reg u16 osl ( r ) delayed - > data . <END_BUG> ;
static int mlx5 ib destroy srq ( struct ib srq , & pcm do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do do free ( & pcm ( & snd pcm ucontext ( & snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd
destroy srq kernel ( dev , msrq , & msrq - > <unk> ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd pcm ucontext ( snd ( snd pcm ucontext ( snd ( snd pcm ucontext ( snd ( snd pcm ucontext ( snd ( snd pcm ucontext ( snd ( snd pcm ucontext ( snd ( ) ( ( force force force , snd pcm ucontext ( snd pcm ucontext ( snd ( )
mlx5 cmd destroy srq ( dev , & msrq - > msrq ) group group group group group group group group group group group group group group group group group group group group group group group ;
if ( srq - > uobject & & srq - > <unk> ) {
ib umem release ( & msrq - > umem ) ;
refcount set ( & connection - > op cycle , db - ; db ;
connection - > cport id = cport id ;
u16 cport id , struct gb function * function )
init list head ( & connection - > operations ) ;
connection = kzalloc ( sizeof ( * connection ) , gfp atomic ) ) ) ) ( int to cpu group group group group group group group group group group group group group group group group group group ) ( int group group group group group group group group group group group group group group group group group group group group group group group group group group group ) ( ;
tag = percpu ida alloc ( & se sess - > sess tag pool , gfp atomic ) ;
struct se session * se sess = tv nexus - > tvn se sess ;
cmd - > se cmd . tag = cmd - > tag . tag = scsi tag ;
cmd - > fu = ( unsigned long ) fu ;
cmd - > se cmd . map tag = tag ;
kasan slab free ( page - > slab array array array array * ( ; device ) * > NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL = NUMLITERAL - NUMLITERAL = NUMLITERAL - NUMLITERAL - } - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - . <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - . <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
page = kasan virt to head page ( ptr ( i ( i ) ) ) ndev ( - > ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > r - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - > r - > <unk> - NUMLITERAL -
void kasan kfree ( const void * ptr )
kasan poison shadow ( ptr , page size < < compound <END_BUG> * ; ;
if ( unlikely ( ! page slab ( page ) ) )
struct ib device * device = r xprt - > rx ia . ri id ;
unsigned int depth = r xprt - > rx ia . ri max frmr depth ;
rc = frwr init ( r , pd , device , depth , depth ) ;
list for each entry ( r , & buf - > rb all , mw all ) {
if ( r - > r . frmr . fr state = = frmr is invalid )
struct symbol * * symbol arrayof ( void )
if ( array & & ! <unk> - > tbl ) {
if ( x2a = = NUMLITERAL ) return NUMLITERAL ;
int i , size ;
struct symbol * * array ;
res = is upper dev ( rdma ndev , event ndev ) ;
if ( rdma ndev = = event ndev | | rdma <unk> <unk> ;
if ( ! rdma ndev | | ! rdma <unk> )
struct net device * event ndev = ( struct net device * ) cookie ;
static int upper device filter ( struct ib device * ib dev , u8 port ,
return nvif rd32 ( chan , HEXLITERAL , page page ( ) ( ( if ndev ( ) ; tag ; ;
nv10 fence read ( struct nouveau channel * chan ( > ) ( if * ( dev ( . se - = = = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , STRINGLITERAL channel ; ; ; ; , ; * , * * * * * * * * * * * * * * * * * * * * * * * func ; ; ; ;
} read ( & chan - > nv10 ) ;
return nvif rd32 ( chan , HEXLITERAL ) ;
nouveau nv10 fence ( chan , chan )
if ( s - > size - size > = sizeof ( void * ) )
if ( size > = s - > size )
if ( ( ctor & & * s ) )
void ( * ctor ) ( void * , struct kmem cache * , unsigned int )
align = calculate alignment ( flags , align , size , null ) ;
if ( in nmi ( ) ) {
raw spin lock init ( & logbuf lock ) ;
printk on ( ! printk ( & printk safe flush ( & index - > <unk> ) ) ) size size size size size size size size size size size size size size size size size size size size size ( ) size size size size size size size size size ( ) size size size size size size size size ( ) size size size size size size size size size ( ) size size size size size size size size size ( ) size size size size size size size size size ( ) size size size size
if ( num online cpus ( ) > NUMLITERAL )
void <unk> printk safe panic ( void )
if ( bs - > front pad & & ! <unk> <unk> )
mempool free ( p - > bio pool ) ;
bio integrity free ( bio , & init - > bio ;
if ( bio <unk> ( bio , & init - > bi ; bio ;
p - = bs - > front . front pad ;
register memory resource ( start , size , null ) ;
ret = arch add memory ( nid , start , size , null ) ;
int add memory ( int nid , u64 start , u64 size )
int new pgdat = NUMLITERAL , * tmp ;
if ( <unk> < = NUMLITERAL )
cpuinit void register smp ops ( const struct plat . ( flush > " ops nid ;
if ( mp ops & & mp ops )
pr warning ( " STRINGLITERAL \n " ) ;
mp ops = ops ;
} on once ( } ) }
if ( ! wtap errlist [ wtap errlist index on ) * ( ( ' , ( ( int , ( ( int , ( ( int , align , align , align , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ , */ ,
unsigned int wtap errlist index = NUMLITERAL ;
g snprintf ( errbuf , NUMLITERAL , " STRINGLITERAL " , ) ;
return wtap errlist [ wtap errlist index & & wtap errlist [ ( ( ' ) , ( ( int force , align , align , ) , ) , ) , ) , ) ;
if ( wtap errlist index > = wtap errlist size ) {
static int restart monitor ( void )
if ( monitor thread = = pthread self ( = , , " STRINGLITERAL " ) ) =
if ( monitor thread > = NUMLITERAL | | ( ( ( ( ; ; ; ; ; ; ; ; nf atomic < = ) cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache ;
if ( monitor thread = = NUMLITERAL )
pthread cancel ( monitor <unk> , null ) ;
if ( ! adap - > fe adap [ NUMLITERAL " STRINGLITERAL " buffer buffer ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct
ret = cxusb medion set mode ( dvbdev , true ) ;
if ( is medion & & adap - > fe )
if ( is medion & & is medion ) {
cxusb medion fe ts bus ctrl ;
return virtscsi init ( vdev , vscsi , sh { , , ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL sig " STRINGLITERAL " ) " STRINGLITERAL pr " " ) " } " " " " " " " " " " " " " ) ) ) ) )
static void <unk> restore ( struct virtio device * " )
struct scsi host * sh = virtio host ( " STRINGLITERAL " = vdev = = - , size ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " )
} on ( ! virtio host ( vdev ) - > dev = = null ) " STRINGLITERAL " )
struct virtio scsi * vscsi = shost priv ( sh , , , ) - NUMLITERAL - NUMLITERAL - NUMLITERAL " STRINGLITERAL " " " " " " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " sig " sig " " " sig buffer ( buffer ) " STRINGLITERAL " " " ) " sig )
mutex unlock ( & nf ct cache mutex ) ;
mutex unlock ( & nf ct cache mutex ) ;
mutex lock ( & nf ct cache mutex ) ;
if ( nf ct cache [ features ] . use > NUMLITERAL ) {
kmem cache free ( nf ct cache , name ) ;
blkdev issue flush ( buftarg - > bt bdev ; <START_BUG> > gfp > , , , , , , , \n \n " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache
struct buftarg * buftarg )
<unk> issue flush (
} = xfs <unk> get drvdata ( buftarg )
blkdev issue flush ( buftarg - > bt bdev ; <START_BUG> > gfp - > , , , , , , , , , , , , , , , , \n \n > \n \n null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ; ; ; ( mutex ( ; mutex ( bh ( ; bh ( ; mutex ( bh ( ; mutex ( bh ( ; mutex ( bh ( ; mutex ( bh ( ; mutex
ret = persistent ram init ecc ( prz , ecc size , null cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache ;
if ( buffer size ( prz ) > = prz - > ct = = ( void */ cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache ' ' ' ' ' ' ' ' ' ' ' '
int ecc size , * tmp )
prz - > buffer - > sig = persistent ram sig <unk> nf name nf name nf name nf name nf [ ( [ <unk> ] cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache cache nf name nf )
buffer start ( prz ) > = buffer size ( prz ) )
struct dc surface * dc ,
updates [ i ] . surface - > update flags = NUMLITERAL ;
for ( i = NUMLITERAL ; i < = surface count ; i + + )
for ( i = NUMLITERAL ; i < = surface count ; i + + )
updates [ i ] . surface - > update flags . full flags = NUMLITERAL ;
if ( s - > state ! = trans abort )
if ( transaction id equals ( xid , lfirst xid ( cell , null ) ) )
if ( transaction id equals ( xid , s - > transaction id ) )
if ( ! transaction id is valid ( s - > transaction id ) )
transaction id is current transaction id ( transaction id xid , * <unk> no <unk> )
if ( dcbp get code ( p , - - - - - - - - stream i > rle child ( , , rle child ( , , is child child ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( , ) ( , ( rle ( , rle child ( , ( , ) ( , ( rle (
struct p compressed bm * p ,
struct bm xfer ctx * c ,
unsigned int len , unsigned int <unk> )
dev err ( & device - > dev , " STRINGLITERAL \n " update ; , , , , , , the s ( , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the s ( , , , , , the ( ) ( , , , ,
if ( phba - > intr type & ( msix & & , , , , update + NUMLITERAL id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
for ( index = NUMLITERAL ; index < phba ( , , , , , , , update id , ; id if id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
pci free irq vectors ( phba - > pcidev , & , , , , , , update type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
free irq ( phba - > pcidev - > irq , , , , , , , , ) ; ; ; ; ; ; , update stream , update type ; , update type ; , update type ; , update type ; , update type ; , null ; ,
phba - > intr type = none ;
static void kick out firmware fb ( void ;
kmem cache free ( apertures cache , ap ) phba > ( ( void ; ( p - - part ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ap = alloc apertures ( NUMLITERAL , NUMLITERAL ) phba apertures phba > NUMLITERAL phba phba , p ) update NUMLITERAL update update NUMLITERAL update update i i i update update NUMLITERAL update update i i i update update NUMLITERAL update update i i update update NUMLITERAL update update i i i update update NUMLITERAL update update i i update update NUMLITERAL update update i i i update update NUMLITERAL update update i i update update NUMLITERAL update update i i i update update NUMLITERAL update update i i update update NUMLITERAL update update i i i update update NUMLITERAL
if ( ! ap | | ! ap - > { null ;
ap - > ranges [ NUMLITERAL ] . size = vector <unk> phba phba phba phba phba , ~ update size update size update i update update i i update update i i update update i i update update update i i i update update update i i update update update <unk> i i update update update i i update update update i i i update update update i i update update update i i i update update update i i update update update i i i update update update i i update update update i i i update update
if ( action = = hda fixup act firmware | | void phba > = = = - \n = dc <unk> ] -
const struct hda fixup * fix , int action - NUMLITERAL > = NUMLITERAL , for <unk> )
struct alc spec * spec = codec - > ( & . <unk> - > - > , device ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) + NUMLITERAL + ;
static void alc662 fixup bass chmap ( struct hda codec )
spec - > gen . pcm rec [ NUMLITERAL ] NUMLITERAL ;
static uint32_t ilk get aux clock divider ( struct intel dp * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL > do <unk> > = do <unk> > = do <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( intel dig port - > port . port = = port ? ( ( ( ( ( ( ( ( ( ( ( ( ( pt ? ( ( ( ( ( ( ( do > ] > ] > ] > ] > ] > ] > ] > ( do > ] > ( ( do > ] > ] > ] > ( ( do > ] > ] > ] > ( ( do > ] > ] > ] > ( ( do > ] > ] > ] > ( ( do
return div round closest ( dev priv - > cdclk freq , NUMLITERAL ) ;
if ( index & & index )
return div round closest ( dev priv - > rawclk freq , NUMLITERAL ) ;
del br ( & dev - > priv ) ;
if ( dev - > priv flags & iff <unk> )
struct net device * dev , * <unk> ;
for each netdev safe ( dev , nxt , nxt )
void br cleanup bridges ( void )
css put ( & memcg - > css ) ;
res counter uncharge ( & memcg - > memsw , page size " " " STRINGLITERAL " ) intel intel * NUMLITERAL intel ( port ) intel intel * NUMLITERAL intel intel * NUMLITERAL intel intel by return ( port ) intel intel * NUMLITERAL intel intel intel regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs
id = swap cgroup record ( entry , NUMLITERAL ) ;
void mem cgroup uncharge swap ( struct net * net , swp entry unsigned NUMLITERAL " NUMLITERAL " NUMLITERAL )
mem cgroup swap statistics ( memcg , false ) ;
if ( unlikely ( current - > audit context & & regs - > audit context ) )
if ( ! tracehook syscall <unk> ( regs ) & &
<unk> <unk> ( syscall trace , struct pt regs * , regs )
ret = regs - > gprs [ NUMLITERAL ] ;
regs - > trap = ( regs - > trap & NUMLITERAL ) ;
if ( message num > = NUMLITERAL & & , , , , , , , , , , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ast debug ( NUMLITERAL , " STRINGLITERAL \n " , msgnum , , , , , , , , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void vm imap delete ( int msgnum , struct vm state * vms * vms * vms * vms * vms )
unsigned long message num = NUMLITERAL , message num = NUMLITERAL ;
snprintf ( arg , sizeof ( * arg ) , " STRINGLITERAL " , message ; , , ; ;
int init logfs compr init ( void )
stream . workspace = <unk> ( size , null ) ;
if ( ! stream . workspace | | ! stream dev - > <unk> )
size_t size = max ( zlib deflate workspacesize ( ) ,
zlib inflate workspacesize ( ) ;
r = <unk> ( buf , sizeof ( buf number number , - NUMLITERAL , apic , result ( result ( result ( result , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
char buf [ max <unk> size + HEXLITERAL ] ;
static void vmcoreinfo append str ( const char * fmt , . max . kvm ( kvm kvm kvm ( kvm kvm kvm ( kvm kvm kvm ( kvm kvm kvm ( kvm kvm kvm ( kvm ( ( case case ( case kvm ( case kvm ( case ( case kvm kvm ( ( result ( vcpu ( ( case source source ( vcpu ( ( case source source ( kvm kvm ( kvm kvm ( ( ( target ( case kvm ( case kvm ( case kvm ( case ( case kvm ( result ( result ( result
r = min ( r , vmcoreinfo max size - vmcoreinfo = vmcoreinfo virtio virtio virtio virtio " " ( ( dest ( dest ( dest ( dest ( ( target force force ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target (
memcpy ( vmcoreinfo data [ vmcoreinfo size ] , buf , r number - > > > > > > > ) ;
void cpu unassigned access ( cpumips state * env ; hwaddr buf ,
int is exec , int is exec , int unused size ( number id ) )
if ( is exec & & is exec ( env ) ( ; excp ibe ) )
helper raise exception ( env , excp dbe , null ) args ( excp / = = = = = = kvm NUMLITERAL = NUMLITERAL = = kvm <unk> <unk> = = kvm <unk> = kvm <unk> = kvm no <unk> = null = NUMLITERAL result = NUMLITERAL = NUMLITERAL result = = kvm no <unk> = NUMLITERAL result = NUMLITERAL result = NUMLITERAL result result result result = NUMLITERAL result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
helper raise exception ( env , excp ibe , null ) ;
gint32 number of ids ;
guint16 id number , <unk> id number , offset ;
dissect hmac algo parameter ( struct tvbuff info * parameter tvb ;
for ( id number = NUMLITERAL , offset , offset ; ) * dest " STRINGLITERAL case = kvm \n : * - , - NUMLITERAL s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
number of ids = ( tvb get ntohs ( parameter tvb , ( ( , , , , , , , ( - ( ( - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
<unk> ( error buf , fmt , args ) ;
ubh mark buffer dirty ( uspi <unk> , null ) ;
sb - > s flags | = sb rdonly ;
sb - > s id , func , error buf ) ;
sb - > s id , func , error buf ) ;
int hand , int dest , int dest mode , unsigned flags sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
if ( dest mode = = NUMLITERAL )
assert ( ! target | | ! target ) ;
apic debug ( & vcpu - > dev , " STRINGLITERAL " ( " sb sb sb sb , " sb sb sb sb ,
pr warning ( " STRINGLITERAL \n " ,
static void virtio crypto device unrealize ( device state * dev = null )
cryptodev backend set used ( vcrypto - > cryptodev , false = = else <unk> ) ;
int i , max queues = NUMLITERAL ;
virtio delete queue ( & vcrypto - > vqs [ i ] <END_BUG> = NUMLITERAL ) ;
for ( i = NUMLITERAL ; i < max queues ; i mode = mode = = NUMLITERAL ) char
dev kfree skb ( skb , null ) ;
if ( atm skb ( skb ) ) {
static inline void hrz kfree skb ( struct sock * net , <START_BUG> STRINGLITERAL STRINGLITERAL , - + ;
} else {
} } } ( & skb - > vcc - > <unk> - > <unk> > NUMLITERAL ( ( unsigned long ; ( ( struct pt regs new ; ( ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ; ( ( struct buf ;
result = acpi ec transaction ( ec , & q - > transaction ) ;
if ( result & & result & & result )
if ( ! queue work ( acpi ec wq , & q - > work ) ) {
q - > handler = acpi ec get query handler ( ec , value ) ;
q = acpi ec create query ( & value , null ) ;
if ( new size > = async - > max bufsize )
retval = comedi buf alloc ( dev , s , new size , null ) ;
if ( s - > busy & & s - > busy ) {
if ( async - > mmap count & & async - > mmap count ) {
new size = ( new size + page size - NUMLITERAL ) & page mask ;
if ( ftmac100 alloc rx page ( priv , rxdes , null - async - > retval - > <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * einval * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value * value
if ( ! priv - > descs | | ! priv - > descs - , retval - > <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk>
for ( i = NUMLITERAL ; i < rx queue entries ; i + + - NUMLITERAL - data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * ctx * data * data * ctx * data * data * ctx * . to if * ctx * data * data * data * . to if * ctx * data * data * . to if data * data
static int ftmac100 alloc buffers ( struct operation device * net , struct ftmac100 * priv - async * q * q * = = null * q * q * q * q * q * q * q * q * q * q * q * q * = = null * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q * q
struct ftmac100 rxdes * rxdes = priv - > descs - > rxdes [ i ] ;
tm recheckpoint ( & current - > thread , msr vec ) ( i priv priv priv priv > ( ( ( = ( ( schedule force t q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q
tm reclaim current ( & current - > thread . cause unav ) ;
load fp state ( & current - > thread . fp state ) ;
void <unk> unavailable tm ( struct pt regs * regs )
msr check and set ( msr <unk> , msr fp ) ;
if ( ec freeze events ( dev ) )
static int <unk> unused acpi ec suspend ( struct device * dev )
acpi driver data ( to acpi device ( dev , false ) ) > NUMLITERAL ( dev - part - part ; ; , new <unk> ; ; , new atomic ;
acpi ec disable event ( ec , null ) ;
struct acpi ec * ec =
qemu aio wait ( & init net , ) ;
acb = bdrv aio writev ( blk , sector num , & total / & total / , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
const uint8_t * buf , int nb sectors , unsigned int flags )
if ( ! acb ) {
static int bdrv write em ( block <unk> * blk , int64_t sector num ,
pci set irq ( pci - > dev ns ns ns ns ns ns , , , , sync sync sync sync sync stats <unk> sync stats <unk> stats <unk> stats ) stats stats ) stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats stats
int i , pending = NUMLITERAL ;
if ( pci - > level [ i ] . level ) bio
static void multi serial irq mux ( void * opaque , int & = = int NUMLITERAL async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async async
atomic inc ( & pci - > level [ n ] , level ;
return snprintf ( buf , " STRINGLITERAL \n - ( ( unsigned long , > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static ssize_t name show ( struct device * dev pci , , , , ns block ;
char * buf , error * * errp )
struct dme1737 data * data = dev get drvdata ( dev , null i ) * async * async * async * async * async * async * async * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * async * NUMLITERAL * NUMLITERAL *
} - > <unk> . client . <unk> . client . client int - > blk size ) sector
if ( ret ! = - eopnotsupp & & NUMLITERAL qemu NUMLITERAL ( ret . STRINGLITERAL " . <unk> . <unk> . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . long long . data . data . data . data . data . long
static u16 <unk> bdev discard range ( struct nvmet req * req )
struct nvme dsm range * range , struct bio * * bio ( & sectors - > <unk> . <unk> . <unk> . <unk> . / / NUMLITERAL . / . <unk> . / total . data . data . / . <unk> . / . <unk> . / . data . data . . / . data . / . data . / . data . / . <unk> . / . data . / . data . / . data . / . data . / . data . / . data . / . / . data
ret = blkdev issue discard ( ns - > bdev ,
return blk to nvme status ( req , errno to blk status ( NUMLITERAL ( ; ; blk . <unk> . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data . data ; . data ; . data ; . data ; . data ; . data ;
checkpoint stats . ckpt end t = get current timestamp ( ) ;
timestamp difference ( checkpoint stats . ckpt sync . ckpt sync ,
snprintf ( log , sizeof ( log ) , " STRINGLITERAL "
timestamp difference ( checkpoint stats . ckpt start t ,
timestamp difference ( & checkpoint stats . ckpt write t ,
return svc create ( prog , bufsize
svc create ( struct svc program * prog , STRINGLITERAL struct <unk> <unk> * <unk> - struct struct ( req > = ( struct ( req > = = = = nvme <unk> - part - > <unk> - > <unk> - > struct atomic - parent > = = nvme <unk> - part - > <unk> - > <unk> - > <unk> - > ns - > ns > = = nvme atomic <unk> - NUMLITERAL - part >
const struct svc serv ops * ops )
} on ( ! svc serv ( prog ) ) ;
{ svc create ( prog , bufsize , NUMLITERAL , ops ) device ) level , } ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret ret , ) ret ret
rpcauth lookupcred ( struct rpc auth * auth , int t flags )
put group info ( & acred - > group info ) channel channel obj obj obj obj ( NUMLITERAL ; NUMLITERAL ;
. uid = current fsuid ( ) ,
const struct cred * ret ;
get group info ( acred . group info ) ;
static int bridge channel depart ( struct device * net )
ast bridge depart ( control , chan ) ;
if ( bridge channel ! = ast channel internal bridge channel ;
struct ast bridge channel * bridge channel , data , ao2 cleanup , spin <END_BUG> ;
ast debug ( NUMLITERAL , " STRINGLITERAL \n " ,
const char * * p = pool head ;
if ( ! cur ) {
return add string pool ( mgr , pool head , size , null ) ;
mgr - > used = ast pool <unk> <unk> ( mgr ) ;
ast <unk> free ( cur , NUMLITERAL , cur ) ;
void err load ec strings ( void )
if ( err func error string ( ec info flags ) > <END_BUG> = int ( NUMLITERAL ; = if ; ; ; ;
err load strings ( NUMLITERAL , ec str functs , null ) * NUMLITERAL ; ; ; ; ; ; ; field field cur field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
err load strings ( NUMLITERAL , ec str reasons ) = NUMLITERAL * NUMLITERAL * NUMLITERAL ; ; ; ; ; ; ; ;
} load ( & err str ec ) } = ( unsigned long ) channel ,
static int do store history ( int fd err err err ; auth " STRINGLITERAL " , index - > argv pool )
if ( argc ! = NUMLITERAL | | , <unk> - > <unk> )
ast <unk> ( fd , " STRINGLITERAL \n " ) ( load ; group , ; * NUMLITERAL ) ;
return result showusage ;
return result success ? : NUMLITERAL ;
ret = ( * tmem pamops . replace size ; head = head = ( cur = ( cur = ( cur = ( cur = ( cur = ( cur = ! cur = ( cur = ( cur = ! cur = ( cur = ( cur = ( cur = ! = ( cur = ( cur = ! = ( cur = ( cur = ! = ( cur = ( cur = ! = ( cur = ( cur = ! = ( cur = ( cur = ! = ( cur = ( cur
uint32_t index , void * new pampd , bool <unk> )
new pampd = tmem pampd replace in obj ( pool , index , head pool = head pool = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & * cred * ' * ' * errp * data = null * head * NUMLITERAL * ! = head * NUMLITERAL * ( = field field = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL
hb = pool - > hashbucket [ tmem oid hash ( oidp ) <END_BUG> ;
spin unlock ( & pool - > lock ) ;
io cqring ev posted ( ctx , ctx ) ;
if ( mask & & ! ( mask & poll - > events ) )
io poll remove req ( req , mask ) ;
io poll complete ( req , mask , NUMLITERAL ) ;
static int io poll wake ( struct wait queue entry * wait , unsigned int mode , int sync ,
wil fw core dump ( wil , null , wil - > unsigned flags poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll ( ; ; ; poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll poll ( ; ; ; ;
wmi recv cmd ( wil , null ) ;
if ( wil - > platform ops . notify ) {
wil6210 unmask irq misc ( wil , null ) ;
if ( isr & & isr & & isr & & isr & & , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static int cpu psci cpu init ( struct device return )
return cpu to cpu ( NUMLITERAL ) ;
} on ( ! cpu psci ( dn ) )
{
cpu unregister cpu ( & cpu - > state ) )
char * elevator name [ elv name max + NUMLITERAL ] ) )
static int elevator change ( struct request queue * q , const error > name ( we ) )
pr err ( " STRINGLITERAL \n " , elevator name ) ;
if ( ! q - > elevator | | ! q - > <unk> )
if ( ! e | | ! e - > elevator ) {
if ( ! xen <unk> <unk> )
acpi register gsi = acpi register gsi xen hvm ;
int init pci xen hvm init ( void )
acpi unregister gsi ( acpi unregister gsi ( ) - > <unk> - > <unk> " STRINGLITERAL " " STRINGLITERAL " req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
x86 platform . apic post init = xen msi init ;
rcp - > donetail = rcp - > <unk> init init init ;
reset cpu stall ticks ( rcp , null ) ;
if ( rcp - > rcucblist & &
rcp - > donetail ! = rcp - > curtail ) is
static int rcu qsctr help ( struct rcu ctrlblk * rcp , error * * errp ) ) ) ) ) io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io
if ( ! refcount dec and st reg reg reg reg reg reg reg ;
<unk> ( & cfqd - > crq base ) ) ) ) ) ) cp ) ( ) ( ) ( ) ( ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( & ) ( & )
request queue t * q = cfqd ;
mempool put ( & cfqd - > crq pool ) ( ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( * ) ( * ) ) ( & ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * ) ( * )
blk sync queue ( q , null ) ;
const unsigned int delay )
if ( ( bypass & & bypass ) )
unsigned int reg ;
const unsigned int bypass ,
void iomem * reg base = cqspi - > u . iobase , cp op offset kprobe > = , , , NUMLITERAL kprobe kprobe kprobe kprobe ( , , , , = , , = , = , = , = , , , = , , = , , , = , = , NUMLITERAL ) kprobe kprobe kprobe kprobe kprobe ( , = , = , = , NUMLITERAL ) kprobe kprobe kprobe kprobe ( , = , = , = , NUMLITERAL ) kprobe kprobe kprobe kprobe ( , = , = , = , NUMLITERAL
static void kprobes report probe ( struct seq file * pi , struct kprobe * p ,
if ( p - > pre handler = = pre handler kretprobe )
const char * sym , int offset , char * modname , struct kprobe * pp )
else if ( p - > pre handler = = setjmp pre handler )
if ( sym & & p - > addr )
u8 lbs auth to authtype ( ] . NUMLITERAL fmt . blk ;
int ret = - <unk> ;
ret = lbs authtype open system ;
ret = lbs auth auth <unk> ;
ret = lbs auth auth ;
cp . max interval = constant cpu to le16 ( HEXLITERAL ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " )
cp . min interval = constant cpu to le16 ( HEXLITERAL ) ;
void hci advertising enable ( struct hci request * req )
cp . own address type = addr le dev public ;
cp . own address type = addr le dev random ;
vsprintf ( s , fmt , > NUMLITERAL ( > > & < < < = = = = = = = = STRINGLITERAL " " ) ) , pp ) , ,
curl off t * size ,
return add form data ( formp , queue kfree ;
char * s [ NUMLITERAL & & ! & > NUMLITERAL ) ( s delay ) ) cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp cp , - NUMLITERAL , - NUMLITERAL , ,
const char * fmt , . . . . . . ) ) ) )
static <unk> inc ( & rdpmc always available key ) ;
on each cpu ( refresh pce , null , NUMLITERAL ) ;
if ( val > NUMLITERAL | | val > = NUMLITERAL )
return - <unk> ;
static branch dec ( & rdpmc always available key ) ;
static ssize_t ipr read trace ( . file * filp ( . file * * ( struct NUMLITERAL ( struct NUMLITERAL = or <unk> <unk> ( = buf = or <unk> = or <unk> = or <unk> = NUMLITERAL = = or <unk> = NUMLITERAL = = or <unk> <unk> = = or <unk> <unk> = = or <unk> <unk> = = or <unk> <unk> = = or <unk> <unk> = = or <unk> <unk> ( = buf = or <unk> = or <unk> = or <unk> = NUMLITERAL = = or <unk> <unk> = = or <unk> <unk> =
unsigned long lock flags = NUMLITERAL ;
struct device * dev = container of ( kobj , struct unlock ( NUMLITERAL ( static = struct = static static static static static = static = static <unk> = static <unk> = or <unk> = = or <unk> = static <unk> = = or <unk> = or <unk> = or <unk> = = or <unk> = static <unk> = = or <unk> = static <unk> = = or <unk> = static <unk> = = or <unk> = static <unk> = = or <unk> = static <unk> = = or <unk> = static <unk> = = or <unk> = static
char * buf , loff t off , size_t count , bool force ) ) ) = or max = = NUMLITERAL = = or <unk> )
spin unlock irqrestore ( & ioa - > host - > host lock ( - - attr if if if if if val = val pmu = or host = val = = or host = or host = val = = or host = = val = or host = NUMLITERAL = = or <unk> = = or <unk> = = or <unk> = = val = = or min = NUMLITERAL = = or get val = = or <unk> = = or <unk> = = val = = or min = or host = val = =
be cmd fw clean ( adapter , null ) irq ;
be cmd if destroy ( adapter , adapter addr ( , , ops ( - einval ( , , NUMLITERAL ( , , NUMLITERAL ( NUMLITERAL ( , ( - ( ( net force force force force ; ; - - ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
be tx queues destroy ( adapter , null ) ;
be vf eth addr rem ( adapter , null ) ;
if ( be <unk> ( adapter , null ) )
libcfs alloc ( addrrange , sizeof ( * struct struct struct struct struct . NUMLITERAL ) ) ) ) = NUMLITERAL ( = addrrange = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( ! addrrange )
atomic inc ( & nidrange - > nr all ) * NUMLITERAL * NUMLITERAL * NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; , NUMLITERAL , NUMLITERAL ( attr ( attr = if = = NUMLITERAL = NUMLITERAL ( NUMLITERAL = = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL = NUMLITERAL ( NUMLITERAL = NUMLITERAL =
return nidrange - > nr netstrfns - > nf parse addrlist ( lock ,
parse addrange ( const struct cfs lstr * src , struct work = host , flags ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mutex lock ( & mlx5 <unk> mutex ) ;
spin unlock ( & mlx5 <unk> lock ) ;
if ( ldev - > tracker . tx type = = NUMLITERAL ) buf
ldev = mlx5 lag dev get ( dev , & mlx5 lag dev ) ;
if ( ! ldev & & mlx5 lag is active ( ldev ) )
static unsigned int init vsmp patch > all clobbers - u16 clobbers - char device device unlock )
case paravirt patch ( pv irq ops . ; ;
case paravirt patch ( pv irq ops . irq enable ( * ( ret ( lock ; > & > NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
return native patch ( type , clobbers , ibuf , addr - ar ar <unk> ( kobj ( kobj ; ; ( NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
case paravirt patch ( type , pv irq ops . restore if ( * ar ops , lock ( ( <END_BUG> ( kobj ( kobj ( kobj ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
static unsigned int dspram load tag ( unsigned int offset )
cache op ( index load tag d , ckseg0 | offset ) error error ;
data = read c0 dtaglo ( ) ;
unsigned int <unk> ;
errctl = bis c0 errctl ( errctl spram , null ) ;
if ( ! gfs2 <unk> ( sdp , null ) ) NUMLITERAL
wake up ( & sdp - > sd logd waitq ) ;
if ( error = = NUMLITERAL | | error = = - <unk> )
void quotad error ( struct gfs2 sbd * sdp , const char * remove )
atomic dec ( & sdp - > sd log error , error ) ; ; = bp , & & & & ;
nr + = task bp pinned ( cpu , bp , * * * * ( enum - > , ( enum engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine
if ( ! bp - > hw . bp target | | ! & & ( ( ( ( ( ( the i915 force & ( ( unsigned int engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine
nr + = max task bp pinned ( cpu , type , type - > <unk> - > ( engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine
nr = info - > cpu pinned | | info - > cpu list ( vport - > intel = null engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine
fetch bp busy slots ( struct bp busy slots * slots , struct perf struct * * * * * * * * err > NUMLITERAL >
refcount inc ( & vha - > vref count ) ;
refcount dec ( & vha - > vref count ) ;
if ( fcport & & fcport - > drport & &
qla2x00 update fcports ( struct mm device * net , scsi qla host be * ;
qla2x00 rport del ( & fcport - > hw slock ) ;
static void <unk> device remove ( unsigned int cpu )
device remove ( & mce banks [ mce device attrs [ i type ( > * ) ) ) & & ;
cpumask clear cpu ( cpu , & mce device initialized ) ;
if ( ! cpumask test cpu ( cpu , & mce device initialized ( > , , , , , , > NUMLITERAL ) ) )
device unregister ( & dev - > dev , & mce device attrs ( dev ( dev ) ) ) & & , > = vport <unk> & & , > = vport <unk> ) & & , > = vport <unk> & & , , > NUMLITERAL & & , , > NUMLITERAL & & , , > NUMLITERAL & & dev - > - > - > <unk> & & dev - > - > <unk> & & , , , > NUMLITERAL & & , , > NUMLITERAL & & dev - > - > - >
ce = intel context pin ( i915 - > preempt context , engine ) ;
ce = intel context pin ( i915 - > kernel context , engine ) ;
intel engine unpin ( i915 - > preempt context , engine ) ;
intel context unpin ( i915 - > kernel context , engine ) ;
engine - > emit breadcrumb dw = ret ;
static uint32_t ohci get frame remaining ( void * ohci , u32 <unk> ( ) ( ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( ) ( &
tks = <unk> ( NUMLITERAL , tks , usb bit time ) * NUMLITERAL * NUMLITERAL * NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return ohci - > frt < < NUMLITERAL ;
return ohci - > frt < < NUMLITERAL ;
fr = ( uint16_t ) ohci - > fi - tks ;
struct se subsystem dev * se dev = t10 wwn - > t10 sub dev ;
if ( ! ( vpd - > protocol identifier set | | vpd - > protocol ) )
if ( ! dev | | ! dev )
dev = se dev - > se dev ptr ;
if ( ( len + strlen ( buf ) > page size ) )
pnv pci ioda tce invalidate ( tbl , tces , tcep dev ) ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size ) ; ; ; ; ; ( size )
if ( tbl - > it type & tce pci swinv create )
while ( npages - - & & npages - > npages )
static int pnv tce build ( struct iommu table * tbl , long index , list NUMLITERAL ,
rpn = pa ( uaddr ) > = tce shift ;
int atr = isl1208 i2c get atr ( to i2c client ( & dev - > parent ( tbl ( tbl ( tbl ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev (
if ( atr < = NUMLITERAL | | atr < = engine - > max <unk> )
struct device attribute * attr , const char * buf )
isl1208 sysfs show atrim ( struct device * dev ,
return snprintf ( buf , " STRINGLITERAL \n " , atr > intel return < < < - - ) , - - ) ,
if ( b - > first wait & & b - > return */ ( , , , - + ( - einval ( dev ( , , dev ( dev ( , dev ( dev ( , dev ( dev ( , dev ( dev ( , ssize_t ( dev ( ( force force force ( tmp ( ( tmp ( , ( tmp ( , ( dev ( dev ( ( tmp ( ( tmp ( , ( tmp ( , ( tmp ( dev ( ( tmp ( dev ( ( tmp ( , ( tmp (
if ( rcu access pointer ( b - > first signal ) ) usb
spin lock irq ( & b - > lock ) ;
wake up process ( b - > first wait ) ;
spin unlock irq ( & b - > lock ) ;
static int tomoyo path rmdir ( const struct path * parent )
struct path path = { . mnt = parent - > = dentry . get dentry = dentry ) + ) + )
return tomoyo path perm ( tomoyo type rmdir , & path ) > process - > dentry = if - > data + null + null + null - > data + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null - NUMLITERAL + null + null + null -
} - > mnt . mnt = null ;
struct path path = { . mnt = parent - > mnt )
st - > should run = true ;
wake up process ( & st - > dev ) ;
static void cpuhp kick ap ( struct cpuhp cpu state * st page page ( )
wait for completion ( st - > done ) ;
st - > result = & init - > result ;
desc = macb tx desc ( & bp - > queues [ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
static void macb init rings ( struct work * dev , struct ( rx ( struct struct ; struct struct work ) )
macb set addr ( bp , desc , NUMLITERAL ) ;
desc - > ctrl | = macb bit ( tx wrap , & bp * & & = = > NUMLITERAL ) data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
desc - > ctrl = macb bit ( tx used , & bp - > bh ;
static void nbp vlan rcu ( struct rcu head * rcu )
warn on ( br vlan is master ( v ) ) ;
free percpu ( v - > stats . stats ) ;
kfree ( v - > <unk> - > <unk> ) ;
if ( v - > brvlan - > stats ! = v - ptr = > ;
data - > last updated = & data - > last updated ;
struct tmp421 data * tmp421 update device ( struct device * dev )
for ( i = NUMLITERAL ; i < data - > kind ; i + + ) {
data - > valid = & data - > valid valid ;
struct i2c client * client = tmp421 client ( dev ) ;
kasan slab free ( page - > slab cache , ptr , tx ) = <END_BUG> - > <END_BUG> - NUMLITERAL - <END_BUG> - NUMLITERAL - } - } - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - = } - = } - } - } - = } - } - } - = } - } - } - } - = } - } - } - = } - } - } - } - = } - } - } - = } - } - } -
if ( reset tag ( ptr ) ! = page address ( ( ( unsigned long ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( ( unsigned long ; > ( ( for force ; ; ( ( for ; ; ( mutex & ( } & & mutex ; ( ( unsigned long ; ( ( void , ; ( for ; ( > ( ( for force ; ; ( ( + ; ( ( for ; mutex | ( ( ( (
kasan report invalid free ( ptr , ip , ip ) ;
void kasan poison kfree ( void * ptr , unsigned int ip )
page = kasan virt to head page ( ptr ) ;
ieee80211 rx bss add ( struct net device * dev , u8 * <unk> ( + ( + client client client ( get dev ( get get dev ; get config ; get config ; get config ;
refcount inc ( & bss - > users ) ;
refcount inc ( & bss - > users ) ;
bss = kzalloc ( sizeof ( * bss ) , gfp atomic ) ;
ieee80211 rx bss hash add ( dev , bss , null ) ;
static int <unk> txrx open ( struct inode * ;
filp - > private data = inode - > i private ( ; ;
return iwm get drvdata ( inode - > i sb ) ;
} & & ! cpu - > i ops . i data ( ; i ) ) ) ) & & inode : & inode - > on <unk> & & ! inode : & inode & & inode : & inode - > on func & & ! inode : & inode : & inode - > on
filp - > private data = inode - > i private ;
if ( ! so . rodata )
ret = i915 add request ( ring , so . obj ) ;
i915 gem render state fini ( & so , null , null ) ;
ret = i915 gem render state prepare ( ring , & so ) ;
ret = ring - > dispatch execbuffer ( ring ,
spin unlock ( & ufile - > idr lock ) ) ) ) ) ) ) ) ) ) ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
spin lock ( & ufile - > idr lock ) ;
struct ib uverbs file * ufile = uobj - > u . ( ) buf buf buf buf buf . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 . i915 .
static void alloc commit idr uobject ( struct ib uobject * uobj ) ) ) ) ) ) ) ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
* it will be put commit idr uobject ( void )
blkg = blkg lookup create ( blkcg , q ; & & & <START_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > memset - NUMLITERAL - memset - NUMLITERAL - memset - NUMLITERAL - memset - memset - = memset - NUMLITERAL - memset - NUMLITERAL - memset -
cfqg = cfqg of blkg ( blkg , null ) ;
if ( ! is err or null ( blkg ) )
struct request queue * q = cfqd - > queue ;
cfqg = cfqd - > root group | | cfqd - > root lock
sg - > page = virt to page ( . <unk> ring ring ring ring i915 ring i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915
sg - > offset = ( unsigned long ) buf & ~ if <START_BUG> ( . if <START_BUG> <START_BUG> ring ring ring ring ( . <START_BUG> ring ring ring ring ring ring ( so ring ring ring ring ring ring ring ( so ring ring ring ring ring i915 <START_BUG> i915 <START_BUG> <START_BUG> ( so ring ring ring ring ring ring ( so ring ring ring ring ring i915 <START_BUG> i915 <START_BUG> <START_BUG> ( so ring ring ring ring ring ring ( so ring ring ring ring ring i915 <START_BUG> i915 <START_BUG> ( so ring ring ring ring ring ring
qc - > flags | = ata qcflag single ;
qc - > n elem = NUMLITERAL ;
sg dma len ( sg , buflen , buflen - > sgent ) ;
return ( ctrl & pci rebar ctrl bar size * = NUMLITERAL ctrl > > - > rebar commit sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg ( ( ( ( - page - NUMLITERAL - ;
int pci rebar get current size ( struct pci dev * pdev , , - NUMLITERAL , )
if ( pos < NUMLITERAL | | pos > = NUMLITERAL )
pos = pci rebar find pos ( pdev , bar , null * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg sg ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
pci read config dword ( pdev , pos + pci rebar ctrl , group - > > = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void update cfs shares ( struct cfs rq * cfs rq )
load weight = refcount read ( & tg - > load weight ) ;
if ( shares > = tg - > shares )
load = cfs rq - > load . weight ;
if ( ! cfs rq | | ! cfs rq - > load )
bnx2x hw unlock ( bp , hw lock resource spio , null ) ;
bnx2x hw lock ( bp , hw lock resource spio , null ) ;
bnx2x err ( " STRINGLITERAL \n " , spio num ) ;
static int bnx2x set spio ( struct kern * dev , struct bnx2x * bp , int spio num , u32 mode )
u32 spio mask = ( NUMLITERAL < < spio num ) ;
return pci dev - > state . state ? pci restore cpu )
if ( error & & pci dev - > state ! = ;
if ( pci dev - > current state ! = pci d0 ) [
int error = pci set power state ( pci dev , pci case ' - > ) = ;
static int pci restore standard config ( struct pci dev * pci dev ' ( <END_BUG> dev ( struct ( ; dev ( ; ) ) ) )
fd = cpu data [ cpu ] . ipi pipe ;
pr info ( " STRINGLITERAL \n " , cpu , c ) ;
void <unk> ipi handler ( int cpu )
pr info ( " STRINGLITERAL \n " , cpu ) ;
while ( os read file ( fd , & c , NUMLITERAL ) ( if - > <unk> ( fd ( fd ( fd ( , reg ( , , reg ( num ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg ( reg (
if ( is guest mode ( vcpu ) & & nested ! = call to { null ) ) ) ) ) ) ) ;
return ! ( vmcs readl ( guest rflags ) & & x86 } . \n = x86 cfs ) ) ) ) ) ) ) - NUMLITERAL ; reg
bool vmx interrupt blocked ( struct kvm vcpu * vcpu , error * * errp - errp ) ) ) ) ) ) ) ) ) ) ) ) ;
( guest intr state sti | guest intr state mov ) ;
( vmcs read32 ( guest interruptibility info ) & & ! <unk> read32 pci ( cpu - > <unk> - > <unk> ) ) ) ) ) ) ) ) ;
if ( + + fiq enable & & + )
enable fiq ( imx pcm fiq , & iprtd - > timer ( ( < if ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ( ) ; ; ; ; ( ) ; ; ; ; ( imx num " ) ; ; ; ; ( ) ; ; ; ; ( ) ; ; ; ( imx num " ) ; ; ; ( ) ; ;
static int <unk> snd imx pcm trigger ( struct snd pcm substream * min ]
del timer sync ( & iprtd - > timer ) ;
if ( - - fiq enable = = NUMLITERAL | | - - fiq struct < <unk> <unk> )
if ( ! proc - > links . prev > null > null > null we <unk> we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we we
proc - > wait status = wait status ;
proc - > wait proc lock = null ;
proc wakeup ( const pgproc * proc , int wait status )
pg semaphore unlock ( proc ) ;
compare node field ( <unk> , null ) ;
compare node field ( <unk> , null ) ;
compare node field ( <unk> , null ) ;
equalcreatedomainstmt ( create domain stmt * a , create . - > wait status - params sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp
return <unk> <unk> ( true , true ) ;
struct rb root * root = handler - > root ;
addr = ( naddr + nlen ) ? naddr : naddr ;
if ( handler - > ops & & handler - > ops - > invalidate ( root , node ) )
unsigned long addr = start , naddr , nlen , flags , flags ;
unsigned long start , unsigned int end , bool force )
omapdss - > manager - > disable ( & * * ( ( unsigned long sp sp , ( ( this force root , ( > node , , ( > node , , ( > node , , ( > node , , ( > node , unsigned flags , , , , , , , , ( > node , unsigned flags , , null , <unk> no snapshot test , null , null , prog , , , ( ( ( this , ( > ( > , ( this , ( this , ( > ,
if ( dpi use dsi pll ( dssdev , null ( ( force force force sp sp sp sp sp sp sp , ( > , , ( > node , , unsigned & , unsigned flags , , , , , , , , , , , , , , , , , , max <unk> , null , null , null , unsigned snapshot , null , prog snapshot test , unsigned snapshot , prog , prog test , unsigned snapshot , prog ) ,
void omapdss dpi display disable ( struct omap dss device void assert assert ( } sp * sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp , , bool force , , , , , , , ,
dsi runtime put ( & dpi - > dsidev ( , > NUMLITERAL - NUMLITERAL sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp sp
if ( cpu is omap34xx ( ) )
. common . lag = false ,
struct mlxsw sp rif * rif , * tmp ;
rif = mlxsw sp rif create ( mlxsw sp , & lb params = = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( ! rif | | is err ( rif ) )
struct mlxsw rif params ipip params ;
extern void getopt clean environment ( void ) ;
setfpucw ( fpu control , null ) ;
getopt clean environment ( ) ;
if ( ! libc multiple libcs | | ! = = = , <unk> <unk> )
libc argv = ( unsigned long ) argv ;
struct nf generic net * gn = generic pernet ( dev ;
return generic kmemdup sysctl table ( pn , gn , null ;
static int generic init net init net ( struct net * dev ;
struct nf proto net * pn = gn - > pn )
gn - > timeout = nf ct generic timeout ;
return area io ( ps , area , write , null ( generic - > snap ) ) ) ) > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode
static int zero area ( struct operation device * dev , return static generic ( sysfs ( return > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
memset ( ps - > area , NUMLITERAL , ps - > snap ) remove size & & ;
} - > snap - > chunk size ( ps , ; ; } &
{ each ( ps - > area , NUMLITERAL , ps - * snap ;
unsigned int reg = mx27 cspictrl enable | mx27 cspictrl master | mx27 cspictrl <unk> ;
static int <unk> unused mx27 config ( struct spi imx data * spi imx ,
if ( config - > cs < NUMLITERAL | | config - > cs < NUMLITERAL )
if ( config - > mode & spi cs high )
if ( config - > mode & spi <unk> | | config - > <unk> )
if ( udev - > descriptor . i manufacturer & & mutex & & mutex > = NUMLITERAL spi <unk> spi spi + NUMLITERAL spi spi <unk> spi spi + )
if ( udev - > descriptor . i serial number & & mutex & & mutex & & = - - - - - = - - = - - = - - = - - - = - - - = - - - = - - - = - - - = - - - = - - - - - - - = - - - = - - - - - - = - - - - = - - - - - - = - - - - = - - - - - -
if ( udev - > descriptor . i product & & mutex & & mutex > = NUMLITERAL spi <unk> spi spi int <unk> spi spi spi int <unk> spi spi spi spi spi spi spi spi spi spi spi spi spi spi <unk> spi spi spi spi spi spi spi spi spi spi spi int <unk> spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi spi
sysfs remove group ( & dev - > kobj , & ( ( ( ( ( ( ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
device remove file ( dev , & dev attr serial ) ;
static int get trip temp ( int trip , unsigned int * temp config config )
mutex lock ( & dts update mutex ) ;
* temp - = qrk dts temp base ;
spin unlock ( & dts update lock ) ;
if ( status & & ! <unk> )
olsr handle = new create dissector handle ( dissect olsr ) - < net net ) ;
dissector handle t olsr handle = null ;
dissector add ( " STRINGLITERAL " , udp port olsr , , , , net ) ) & ( ( ( ( ( ( offset * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
proto reg handoff olsr ( void )
} = } read ( & olsr port ) ;
int rec size = NUMLITERAL , is tx = NUMLITERAL , log item we ;
struct vwr * vwr = ( vwr t * ) wth - > priv ;
* data offset = ( file tell ( wth - > fh ) - vw record if seq * are if if if if if if * ctx * are <unk> * are seq * are seq * are seq * are * are seq * NUMLITERAL * NUMLITERAL * are * errp * errp * errp * are if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
if ( ! vwr read rec header ( vwr , wth - > fh , & = log item we * old * old * old this xfs * old * old xfs * old * old xfs * old * old xfs * old * old xfs * old * old xfs * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old * old *
if ( ! vwr process rec data ( wth - > fh , rec size , & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( log item - * * * * * * * * * * * * * * * * * * * * * * * * * * * the * * * * * the * * * * * the , , , , , , , , , , , , , , , ,
struct rsxx card cfg * cfg = ( struct rsxx card ( struct + map cfg the the header len if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if len if config if ( struct if length if if if if if if if if if if if if if if if if if if
cfg - > data . intr coal . mode = rsxx intr coal atomic ; ; ( , , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
cfg - > data . block size = rsxx hw blk size ;
cfg - > data . cache order = ( void * ) ( NUMLITERAL cfg cfg ) ( & , & , & , header header header header header header header header header header header header header header header header header header header header header header header header header header header header header header header header ( , , & , & , = & , & , = & , & , = & , & , header header header header header header header header header header header header header header header header header header header header header header
static void initialize config ( const void * config )
ucontrol - > value . integer . value [ NUMLITERAL ] - NUMLITERAL - NUMLITERAL cfg - NUMLITERAL , & & & & mode rec , & & & mode rec , & mode rec , & mode rec , & & & mode rec , & mode , & mode , & mode , & ;
spin lock irq ( & ensoniq - > reg lock ) ;
spin unlock irq ( & ensoniq - > reg lock ) ;
if ( ensoniq - > ctrl & es gpio outm )
int val = NUMLITERAL ;
return sw <unk> ;
if ( ( level3 & & level3 ( = > > NUMLITERAL ( - data . irq * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * func * func * func * func * func * func * func * fh * = - <unk> * sizeof , level3 * prog * errp * errp * = null * = null * errp * errp * = = null
static int toshiba rbtx4927 irq nested ( unsigned int sw irq ( ( int . ; ) )
sw irq = rbtx4927 irq ioc + fls ( level3 ) ;
u8 * level3 = null ;
if ( afu is irqpoll enabled ( afu ) ) {
while ( refcount read ( & afu - > cmds active ) )
if ( <unk> ( & afu - > afu map ) ) {
irq poll disable ( & hwq - > irqpoll ) ;
static void stop afu ( struct net * net , struct cxlflash cfg * cfg )
if ( ! lv - > lv item - > li seq )
* diff len + = lv - > lv buf len ;
int * diff iovecs , bool <unk> )
* diff len - = old lv - > lv buf len ;
lv - > lv item - > li lv = lv - > li lv ;
ffmpeg exit ( NUMLITERAL ) ;
if ( nb output files < NUMLITERAL | | do ! - <unk> ) !
fprintf ( info , " STRINGLITERAL \n " ) ;
static void opt new stream ( const char * opt , const STRINGLITERAL STRINGLITERAL only , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " ,
else assert ( NUMLITERAL & & ! <unk> <unk> ( NUMLITERAL ) > < NUMLITERAL ( > NUMLITERAL , ; , NUMLITERAL , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , ret , null , ret , null , ret , null , ret , ret , ret , ret , null , ret , null , null , max , ,
ret = s5m8767 tm to data ( tm , data , null ) ;
u8 data [ NUMLITERAL ] ;
ret = s5m8767 rtc set time reg ( info , info ) ;
switch ( info - > device . device type ) {
dev dbg ( dev , " STRINGLITERAL \n " , func ,
skb queue tail ( & btdev - > txq , ( unsigned long port port ) ;
err = skb pad ( skb , NUMLITERAL " STRINGLITERAL " , NUMLITERAL ) ;
if ( skb - > len & & skb - > arg . debug info ) to
static int nokia enqueue ( struct hci uart * hu , struct work <END_BUG> = = > NUMLITERAL )
if ( err & & err )
dev - > if port = NUMLITERAL | | = } - NUMLITERAL - i tm <unk> ( ret > ret > < ret tm <unk> > < ret > < ret tm <unk> > NUMLITERAL > ret > ret > ret > NUMLITERAL > NUMLITERAL > NUMLITERAL > ret ( > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret > ret >
dev - > name , if names [ NUMLITERAL ] ;
dev - > if port = map - > port . port ;
if ( map - > port . port > NUMLITERAL )
do reset ( dev , NUMLITERAL ) ;
extcap if add ( const gchar * ifname )
if ( ! g hash table contains ( struct - einval ) )
g hash table insert ( ifaces , ifname , ;
} on ( ! ( gchar * ) ifname , , , , , , dev > NUMLITERAL ( = - einval ( ) , ( ) | | = = ( ) , ( ( ret - , ) , ( ( ret , ) , ( ( ret , ) , ( ( ret , ) , ( ret , ) , ( ret , ) , ( ret , ) , ( ret , ) , ) , ) , ) , ) , ( ret , ) , ( ret , ) , ( ret ,
if ( ! g hash table contains ( ifaces , ifname ( , new " STRINGLITERAL " > = = = = = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - net ( { = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
uint32_t regidx = kvm to cpreg id ( > > > return > return > return return > NUMLITERAL ; ret ;
if ( ri - > type & arm cp no migrate ) {
bool write list to cpustate ( armcpu * cpu )
ri = get arm cp reginfo ( cpu - > cp regs , regidx ;
uint64_t v = cpu - > cpreg values [ i ] ;
int buf idx , end idx , end ( ) ; ; ; , t )
re string translate buffer ( void * * pstr ret ret ret ret ret ret ret data data data the data data data data the data data data data data data data data data data NUMLITERAL data data data NUMLITERAL data data data NUMLITERAL data data data NUMLITERAL data data data data NUMLITERAL data data data NUMLITERAL data data data data NUMLITERAL data data data NUMLITERAL data data data data NUMLITERAL data data data data NUMLITERAL data data data NUMLITERAL data data data data NUMLITERAL data data data NUMLITERAL data data data data data NUMLITERAL data NUMLITERAL data data data
pstr - > valid raw len = buf idx | - - - - - - - * prog , * last )
pstr - > valid len = buf idx | buf <unk> ; ; ; ; ; ; ; ; ; , * * * * * * * * * * * * * * * * * * * = * * * * * * * * * = * * * * * * = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pstr - > mbs [ buf idx ] = pstr - > STRINGLITERAL STRINGLITERAL kobj [ ; ; ; ; ; ; ; ; ; ; , pstr ;
blk delete ( bs - > file ) ( & bs - > [ max <unk> ) ) ;
if ( bs - > file & & f - <unk> mm mm idx idx idx idx idx idx idx ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
void blk delete ( block driver state * f , error * * errp ) ) ) ) ) ) ) ) ) ) )
blk <unk> ( bs , null ) ;
assert ( bs ! = bs snapshots | | f - <unk> mm mm mm ) idx idx idx idx idx idx idx idx idx idx ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
amrwb sfr size *
amrwb sfr size *
const f gain * f gain ;
const float * f vector , float f gain - * )
celpm context * ctx , * <unk> )
if ( ! c2dev - > access )
static ssize_t c2port read flash data ( struct file * filp ( if long ) ( if ) next ( if ) next ( if ) ) ) ) ) ) ) ( ) ) ) ( ) ) ) ( ) ) ) ) ( , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , ! , !
if ( ret < NUMLITERAL | | ret > = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return - <unk> ;
spin lock ( & c2dev - > mutex ) ;
<unk> <unk> ( brk , unsigned int , > NUMLITERAL , unsigned * lock * signal * * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * * errp * errp
if ( brk < = mm - > brk ) valid
return <unk> <unk> ( mm - > brk , mm - , idx - = = NUMLITERAL * NUMLITERAL * errp * errp * errp * errp * errp * * * * * * * errp ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return <unk> <unk> ( mm , mm , brk ) ;
return mm <unk> <unk> ( mm - > brk ) ;
do machine check ( null , NUMLITERAL ) ;
static void mcheck timer ( struct net * net , unsigned long data )
if ( mce available ( & current cpu data ) )
struct timer list * t = per cpu ( mce timer , data ) ;
add <unk> <unk> ( t ) ;
list del init ( & driver - > pending ctx ctx ctx ) ,
if ( ! driver - > udc name | | of <unk> <unk> ( ; ; int ) addr
static int check pending gadget drivers ( struct tty udc gem gem gem NUMLITERAL NUMLITERAL )
if ( ret ! = - eprobe defer | | ret context )
ret = udc bind to driver ( udc , driver , & i915 - > state ) chunk chunk chunk ;
u8 config byte [ NUMLITERAL ] ;
config = av malloc ( NUMLITERAL * NUMLITERAL + NUMLITERAL ) ;
config byte [ NUMLITERAL ] = c - > channels < < c - > channels ;
config byte [ NUMLITERAL ] = HEXLITERAL | rate index ;
ff data to hex ( config , config byte , NUMLITERAL , NUMLITERAL ) ;
if ( evt - > features & clock evt lookup int )
static void lapic timer setup ( enum clock event mode * * * * addr ;
apic write ( apic tmict , NUMLITERAL , NUMLITERAL ) ;
mode ! = clock evt mode periodic ;
local irq restore ( flags | ( <unk> - > <unk> ) ) ;
drm gem object unreference ( & ctx - > timer : = null ( - einval ) ) ;
kref put ( & ppgtt - > ref , ppgtt features ( ) = = context release ) ;
if ( uses aliasing ppgtt ( ctx - > obj : = null ( ) ( ) ) )
list del init ( & ctx - > link ) ;
kfree ( ctx - > obj - > data ) ;
void e1000e rar set generic ( struct e1000 hw * - - rate rate rate NUMLITERAL rate rate rate NUMLITERAL rate rate NUMLITERAL rate rate NUMLITERAL rate NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
if ( rar high & & rar high )
e1e flush ( & hw - > dev ) ;
e1e flush ( & hw - > dev ) ;
rar high | = e1000 <unk> av ;
context = current - > audit context - NUMLITERAL ( & low , ! ( ( ) config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config NUMLITERAL config config NUMLITERAL config config NUMLITERAL config config NUMLITERAL config config NUMLITERAL config NUMLITERAL config config NUMLITERAL config NUMLITERAL config NUMLITERAL config config NUMLITERAL config NUMLITERAL config NUMLITERAL config NUMLITERAL config NUMLITERAL config NUMLITERAL config config NUMLITERAL config
unroll tree refs ( context , p , count , null NUMLITERAL NUMLITERAL NUMLITERAL config config config config config config config config config config config config config config NUMLITERAL config config config ;
if ( unlikely ( ! grow tree refs ( context , context NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL config config config config config config config config config config config config config config config config config config config config config config config config config ;
if ( <unk> ( ! inode - > i fsnotify marks ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config config
static inline void handle one ( struct inode * inode , * * <unk> )
<unk> <unk> ( ret , * ; * ( * * ret mtd ( ret mtd ( ret ( ret ( ret ( ret ( type ( ( : ret ( type ( type ( type ( type ( type = = NUMLITERAL = NUMLITERAL = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> =
<unk> <unk> ( ftruncate , unsigned av ; probe ( > <unk> ( > + ( > + > offset mtd mtd ( , > int ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( radeon = > NUMLITERAL radeon node = NUMLITERAL radeon <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> =
long ret = do sys ftruncate ( , , r ( = r ( , , , int mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd mtd ( ( : ret ( u32 ( u32 ( u32 ( u32 ( ( : type ( type ( u32 ( ( : type ( type ( u32 ( ( : type ( type ( u32 ( u32 ( ( : type ( type ( u32 ( type ( u32 ( ( : type ( type ( u32 ( type ( u32 ( type ( u32
return <unk> <unk> ( ret , length ;
} <unk> ( NUMLITERAL , length , length ; r ( = r ; r ( , , , , , , , , , , , , , , , , , , , , type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type (
desc ring * desc ring alloc ( const for for t = <START_BUG> NUMLITERAL up * NUMLITERAL up * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL )
ring = g <unk> ( desc ;
if ( ! ring | | ! ;
ring - > r = r ;
desc ring * ring = null ;
static int fits probe ( const alloc > data * * - )
if ( ! snprintf ( b = desc - > offset + ) mtd mtd mtd ( ( * ( { * ( { * ( { * ( * ( { { * ( * = ) = ) = = ) = = ) = = ) = = ) = = ) = = )
const uint8_t * b = p - <END_BUG> index ( - - - - - - - , , , , , , , , , , * , , * , & , , * , , )
return avprobe score max - NUMLITERAL ;
return NUMLITERAL ;
r = radeon object busy domain ( robj , & cur placement , null ) ;
if ( ! gobj ) {
int radeon gem busy ioctl ( struct drm device * dev , const void * data ,
uint32_t cur placement = NUMLITERAL ;
args - > domain = radeon gem domain cpu | radeon gem domain <unk> ;
static void bufsize v4l2 format ( struct v4l2 cpu )
if ( get user ( type , & object - > radeon ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object ( object
if ( clipcount < NUMLITERAL | | clipcount > = NUMLITERAL )
* size = NUMLITERAL ;
return - <unk> ;
if ( mtd - > block up & & ( ( ( ( unsigned char ) = = = = = = = = = = = = NUMLITERAL ) ) ) )
if ( mtd block isbad ( mtd type * - - - - - - - - - - - - net radeon ) )
static unsigned int mtdswap badblocks ( struct mtd get get get get get get get get get get r ( return return return return return return return return return return - return - int shift ) )
for ( offset = NUMLITERAL ; offset < user , user , - ( ( u32 * * * * * * * * * * ) - - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
unsigned int badcnt ;
process hex common ( struct tep event * event , struct ! print ;
char * * tok , enum tep print arg type type - ! print ;
return tep read token item ( tok ) ;
* tok = tep tep tok ;
free arg ( arg - > hex . field ) ;
ret = smum send msg to smc ( ; ; ppsmc type disallowgfxoff ) ( ; return return return debug to smc = . <unk> = debug to smc = debug NUMLITERAL = = . <unk> ;
if ( data - > gfxoff controlled by driver & & . if > = NUMLITERAL - part - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - > | | the - >
( struct vega12 hwmgr * ) ( hwmgr - > backend , null ) ,
static int vega12 disable gfx off ( const struct pp ;
int ret = NUMLITERAL ;
return get order ( unmap size ) ;
int gfp order , unsigned int <unk> )
page size = HEXLITERAL ;
unmap size = iommu unmap page ( domain , iova * event ;
iommu flush tlb pde ( domain , domain ) ;
handle signal ( signo , & info , regs ) ( - int ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void do signal ( struct pt regs * regs )
signo = get signal to deliver ( & info , regs , null ) ( - int ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pt set elr ( regs , pt elr ( regs ) ) ;
regs - > r06 = nr restart <unk> ;
static void ib dealloc device ( struct ib device , mutex ( mutex ( free arg { * ; ; - ( void - > & & ; nr nr - > nr nr - > nr nr = = ; = ; & ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb , ( usb
if ( device - > reg state = = ;
warn on ( device - > reg state ! = ; page <START_BUG> ( , event - > = ( ( force void { { { - ( ( * - - ( ( force force { - - - part - : = ( ( force force { - part - > = = ( ( force force { unregistered - part - > = = ( ( force force { - part - > = = ( ( force force { - part - > = = ( ( force force { - part - > = =
ib device unregister ( device ) ;
kmem cache free ( ib dev uninitialized cache , device ) * NUMLITERAL size ;
static int dbgp wait until done ( unsigned int ctrl )
if ( ret = = - dbgp )
lpid = dbgp pid get ( & ehci debug - > <unk> ) ;
ret = dbgp wait until complete ( & ehci debug - > wait ) ;
if ( lpid = = usb pid nak | | lpid = = usb pid nak ) {
if ( cs - > bcs [ i ] . at vdev platform einval vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev group vdev vdev vdev group vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev vdev
if ( ! gigaset get channels ( cs , null ) )
mode = cs - > mode ;
static int <unk> lock ( const struct operation list * dev )
cs - > mstate = ms locked ;
mutex unlock ( & db9 - > mutex ) - NUMLITERAL - NUMLITERAL - NUMLITERAL ( ret , ret , ;
err = mutex lock interruptible ( & db9 - > mutex > NUMLITERAL > NUMLITERAL , ;
mod timer ( & db9 - > timer , jiffies at ;
if ( db9 modes [ db9 - > mode ] . reverse ) int
struct parport * port = db9 - > pd - > port . mode - ;
return blk queue stackable ( md - > ast ast ast ) & & ( cs ) i i ;
int dm request based ( struct work device * )
} - > queue . request . request = blk mq <unk> <unk> <unk> ( ( ( ;
return blk queue stackable ( md - > queue , ) { mutex struct work )
blk mq free <unk> ( md ) - NUMLITERAL - NUMLITERAL ;
refcount set ( & ffs - > ref , + + ) ;
struct ffs data * ffs = kzalloc ( sizeof ( * ffs ) & <START_BUG> [ <START_BUG> [ <END_BUG> NUMLITERAL ] , <END_BUG> , ;
refcount set ( & ffs - > opened , NUMLITERAL ) ;
init completion ( & ffs - > ep0req completion ) ;
init waitqueue head ( & ffs - > ev . waitq ) ;
if ( ! ast mutex lock ( & agentlock ( head ( ( struct NUMLITERAL cs cs cs cs ) ) ) ) ) -
ast mutex unlock ( & agentlock ) ;
int <unk> module ( void )
ast softhangup ( p - > owner , ast softhangup kzalloc ( ( - ) cs cs cs cs ) ) ;
ast cli unregister ( cli show agents ) ;
group = iommu group get ( dev , null ) ;
iommu group put ( & vdev - > group ) ;
ret = vfio add group dev ( dev , & vfio platform ops , vdev ) ;
struct iommu * dev , * tmp )
if ( ! group | | ! group - > flags ) {
pr info ( " STRINGLITERAL \n " ) ( , ; ; count ) ) ) ) ) ) ; ; ; * ;
if ( ! thread | | ! thread | | int > = null ( ( int ( ; devtmpfs ( intel cmd <unk> ( = to devtmpfs = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
int <unk> mount ( void )
pr info ( " STRINGLITERAL \n " ) ;
if ( ! mount dev | | ! mount dev )
static uint64_t slavio diag mem readb ( void err if addr d addr int
uint32_t ret = NUMLITERAL ;
unsigned int size )
ret = s - > diag . diag " STRINGLITERAL " , } ;
misc state * s = opaque ;
return ! cmp ? cmp match | cmp : NUMLITERAL ;
right key = object right - > transport - > obj name ;
static int monitored transport cmp fn ( void * obj , void * arg , int flags )
cmp = strcmp ( object left - > transport - > obj name , right key ) ;
switch ( flags & obj search mask ) {
int <unk> ( unsigned int scancode , unsigned int keycode )
return d . error . data ;
. error = - enodev ,
struct getset keycode data d = {
. flags = NUMLITERAL ,
static int <unk> emit flush ( struct i915 request * request - NUMLITERAL - , a - > , a */ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u32 cmd , * cs , * * cs ;
if ( request - > engine - > id = = vcs )
if ( mode & & mode & & mode & & mode ) {
cs = intel ring begin ( request , NUMLITERAL ) ;
const int base offset = priv - > base + NUMLITERAL )
flags = inb ( base offset , NUMLITERAL ) ;
static int quad8 count read ( struct counter device * counter ,
struct quad8 iio * const priv = counter - > priv ;
struct counter count * count , unsigned int * val , bool force ( ( void * = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( - arg = ( -
file truncate ( file file , off_t offset , <unk> <unk> * <unk> ;
assert ( vfd cache [ file ] . fdstate & } else <unk> ; = { temporary ) ;
return code = file access ( file , file ) ;
return code = ( vfd cache [ file ] - > fd , [ [ = = = = = size dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst byte dst ) dst <unk> = = NUMLITERAL dst = NUMLITERAL dst = NUMLITERAL dst = NUMLITERAL dst = > NUMLITERAL dst = NUMLITERAL dst = NUMLITERAL dst = NUMLITERAL dst = > NUMLITERAL dst = NUMLITERAL = = NUMLITERAL =
temporary files size - = vfd cache [ file ] . file size - - - reset ( file & & ] = = size = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
kmem cache free ( ubi ltree slab , . . ] file [ . <unk> - NUMLITERAL ; ( unsigned long ) host ) ; ;
static void leb read unlock ( struct ubi device * code [ offset < offset end end end end , = = state )
up read ( & le - > sem ) ;
spin unlock ( & ubi - > ltree lock ) ;
if ( le - > users = = NUMLITERAL ) {
static unsigned long init setup trampoline ( void )
return <unk> <unk> ( tramp ) ;
void * tramp = va ( smp trampoline base , null ) - NUMLITERAL ;
memcpy ( tramp , trampoline data , trampoline end - trampoline data ) ;
} ( & smp trampoline type )
if ( shost - > eh deadline ! size [ ; { [ ; size dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst <unk> dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst dst )
static void scsi eh scmd add ( struct scsi cmnd * scmd )
warn on once ( shost - > ehandler ) ;
ret = scsi host set state ( shost , shost cancel recovery ) ;
warn on once ( ret ) ;
dst [ dst byte offset + + ] | = ( src byte > > NUMLITERAL ) ;
dst [ dst byte offset + + ] | = ( src byte > > NUMLITERAL ) ;
if ( ! dst ) {
dst [ dst byte offset + + ] | = ( src byte ) ;
( * dst size ) = ecryptfs max decoded size ( src size ) ;
end = <unk> ( begin , delim [ - - - - - - - - - - - offset ( offset ( offset ( offset ( = size_t ( offset ( offset ( + ( offset ( offset ( offset ( offset ( offset ( = size_t ( offset ( offset ( = size_t ( + ( current ( offset ( = size_t ( offset ( offset ( = size_t ( + ( current ( offset ( = size_t ( offset ( offset ( offset ( = ) ( + ( current ( = size_t ( + ( offset
char ch = ( void * ) delim [ NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ) )
end = <unk> ( begin , delim , & delim ) ;
char * begin , * end , * * errp ;
strsep ( const char * * stringp , const char * * delim )
void iwl op mode dvm stop ( struct iwl op mode * op mode )
iwl trans stop device ( priv - > dev ) ;
iwl free hw ( priv - > hw ) ;
flush workqueue ( priv - > workqueue ) ;
iwl free traffic mem ( priv ) ;
rpc put task ( task , & task - > clp ) ;
struct nfs4 add xprt data * adata = ( struct nfs4 add xprt data * ) data ;
status = nfs4 detect session trunking ( adata - > clp ,
if ( status = = NUMLITERAL | | status > = NUMLITERAL )
if ( ! task | | ! task - > clp )
free netdev ( & dd - > dummy netdev , null , null item , null , null ;
if ( dd - > dummy & & dd - > struct . pevent ( args , args ; priv ;
void hfi1 netdev free ( struct device * net , struct nr int return ;
dd - > dummy netdev & & ! ! ( dd task <unk> ) > } ;
dd - > dummy netdev ( dd , " STRINGLITERAL \n " , func item item , " , " ; . trans ;
dequeue task ( rq , p , sleep , & init - > struct list ( > * * * * ( status ( status ( status ( status ( status ( status ( - ) ( - status ( - status ( - status ( - status ( - status ( - status ( - ) ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status ( - status (
static void deactivate task ( struct rq * rq , pevent pevent pevent * ( mr ( struct ( struct ( struct ( > = > > status ( - ) ( > status ( - ) ( > status ( xprt ( - ) ( > status ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt ( xprt
if ( task contributes to load ( p ) )
dec nr running ( rq , null ) ;
atomic inc ( & rq - > nr uninterruptible ) ;
return rds rdma map ( rs , & new args ; , , , err ) task err task ( err ) task task ) task task ( err ) task task task ( return nfs4 ;
new args . cookie addr = args . cookie addr ;
if ( optlen ! = sizeof ( struct <unk> get mr for * priv ) )
new args . flags & = ~ ( args . flags & ( priv iwl <unk> mask ) ) task task task task task task task task task task task task task task ( return nfs4 ; err ;
return - <unk> ;
int pevent register comm ( struct tep handle * mr struct */ struct > trans = cleanup pid )
if ( pevent - > cmdlines & & pevent - > <unk> )
return add new comm ( & pevent - > dev , get get get > > > NUMLITERAL ) ;
scsi <unk> count ( & pevent - > cmdline count , + ) args args args priv priv priv priv ;
item - > comm = ( " STRINGLITERAL " ) ;
static int find next best node ( HEXLITERAL , , , , , ;
if ( node isset ( n , * < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
int min val = int max ;
if ( ! node isset ( node , * used node , null = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if <unk> = NUMLITERAL = = if : null = = if <unk> = NUMLITERAL = = NUMLITERAL = = if : null = = if min = NUMLITERAL
node set ( best node , * used node mask , * * null = null = null ( > < < < < < if ; ,
u int64 t i0 , * <unk> ;
struct ip double * double ;
<unk> <unk> w ;
get ldouble words64 ( i0 , i1 , x ) ;
get ldouble words64 ( i0 , i1 , t , t - > <unk> ) ;
bdrv get geometry ( s - > blk ( return ) vm ) val val val val val val val val val val val val val val val val ;
bool ide sect range ok ( ide state <START_BUG> > * return vaddr )
if ( sector > total sectors | | hci conn ) struct
uint64_t total sectors = NUMLITERAL ;
uint64_t sector , uint64_t nb sectors )
hci free ( smp ) ;
conn - > smp chan = null ;
conn - > hcon - > smp conn vaddr vaddr vaddr , if - > <unk> = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask = mask
struct smp chan * smp = conn - > ( page id id id id n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n = mask =
if ( smp & & smp - > tfm * ( val ; val id id id n n val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val val
page = alloc page ( gfp atomic | | < <unk> <unk> <unk> ( [ node ( [ ( [ node ( [ node ( [ node ( [ node ( return x ) ) ) ) ) ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( return return type ) ) ; ; ; ; ; ; ; ; ( return return type ) ; ; ; ; ; ; ( return return type ) ; ; ; ; ; ; ( return return type ) ;
int * type , int * <unk> )
if ( vaddr > vma - > vm end ;
* type = vm fault minor ;
clear user page ( page address ( page ) = , max ;
if ( val . vu32 < NUMLITERAL val val val val val val val val val val
max val = bnxt msix vec min max | | n ;
int max val = NUMLITERAL ;
max val = bnxt msix vec max ;
if ( id = = devlink param generic id msix vec val val val val val val val val val val val val val val val val val val
blk mq request ( rq , at head , true , false , false ) ;
blk end request all ( rq , - enxio ) ;
if ( ! blk <unk> <unk> ( q ) ) {
blk run queue ( q , q , where ) ;
elv add request ( q , rq , where , null ) ;
static int <unk> rawmidi runtime free ( struct snd sbi ;
kmem cache free ( runtime cache , runtime ) ;
<unk> ( runtime - > buffer ) ;
substream - > runtime = null ;
struct snd rawmidi runtime * runtime = substream - > runtime )
return intel read status page ( engine , i915 struct buffer data if ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; } ;
static u32 gen8 get seqno ( struct intel engine kfree - runtime page ) )
} ( engine , i915 gem hws index ( engine ( runtime ; err ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; ; ; ; ;
{ status page ( engine , i915 gem hws index substream ; } ; } - > state )
intel engine free ( engine , i915 gem hws index ) ;
chr = net vhost parse chardev ( vhost user opts , errp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( queues < NUMLITERAL | | queues > = max queue num , null , null , null , prog * * errp , * * errp , * * null , * null , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp ,
assert ( opts - > type = = net client options kind user , null , null , <unk> no snapshot test , null , null , <unk> test ) )
vhost user opts = opts - > u . vhost user | opts - > <unk> q )
int net init vhost user ( const net client options * opts , const char * name ,
if ( ! atomisp hw is isp2401 | | ! atomisp <unk> <unk> )
hmm store ( default gdc lut , ( int * ) interleaved lut num opts opts opts opts opts opts -
int err = NUMLITERAL , * tmp ;
if ( ! default gdc lut )
ia css enter private ( " STRINGLITERAL " ) ;
f2fs wait on page writeback ( page , data , ( default ) ;
page = get new data page ( inode , null , , , , , ) ; ; , { if ( if - part - part - > state ) ;
static int f2fs fill zero ( struct inode * inode , pgoff t null , , )
f2fs put page ( page , NUMLITERAL ) ;
if ( ! len | | ! len )
if ( ! tg pt gp - > ring )
static ssize_t alua tg pt gp show attr show show (
char * page , * <unk> )
return <unk> ( page , " STRINGLITERAL \n " , tg pt ; ;
struct t10 alua pt gp * tg pt gp ,
compare scalar field ( array size ) ;
compare scalar field ( <unk> ) ;
compare scalar field ( <unk> <unk> , null ) ; ) ; ( ( ;
equalarrayexpr ( array expr * a , array expr * return pt pt pt buf buf mem )
compare node field ( & init net , elements ) ;
p = cma alloc ( cma , count , NUMLITERAL , gfp atomic ) ;
static int cma alloc mem ( struct net * net , struct cma * cma , int */ status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
mem = kzalloc ( sizeof ( * mem ) , gfp atomic ) ;
cma put ( mem ) ;
if ( ! p | | ! p ) {
if ( ! test bit ( device state initialized , & rt2x00dev - > flags ) )
set bit ( device state state , & rt2x00dev - > flags ) ;
status = rt2x00queue initialize ( rt2x00dev , & rt2x00dev - > ops ) ;
static int <unk> unused rt2x00lib initialize ( struct rt2x00 dev * rt2x00dev )
status = rt2x00dev - > ops - > initialize ( rt2x00dev , rt2x00dev ) ;
iio init ( & buf - > buffer , & ring - > work ) ;
ring = kzalloc ( sizeof ( * ring ) , gfp atomic ) ;
buf - > stufftoread = iio priv ( ring ) ;
ring - > private = iio priv ( ring ) ;
buf - > attrs = iio priv ( ring - > attrs ) ;
bool kvm arch can inject async page present ( ( ( ( id id = & add - NUMLITERAL * rt2x00dev * rt2x00dev * rt2x00dev * <unk> )
return kvm get page page ( vcpu ) ;
* but we still want check async completion to node
} on once ( } )
* s390 will always inject the page directly , * but want NUMLITERAL NUMLITERAL - NUMLITERAL * , ( void ( } * - part * * * * * * * * * * * * * * the * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
s = ( ssys state * ) g <unk> ( sizeof ( ssys state ) ) ;
g * macaddr )
static int <unk> sys init ( uint32_t base , qemu irq irq ,
g register ( null , NUMLITERAL , & vmstate stellaris sys , s ) ;
g register physical memory ( base , HEXLITERAL , iomemtype ) ;
static uint64_t xen pt bar read ( void ) hwaddr rcu ( {
xen pt err ( d , " STRINGLITERAL " plx peer plx " " " " ;
pci device * d = o ;
unsigned int size )
return xen <unk> get drvdata ( d , NUMLITERAL ) ;
static int max77686 pmic dt parse pdata ( ;
struct max77686 platform data * pdata )
return max77686 get drvdata ( iodev ) ;
} on once ( ! pdata ) ;
{
int pud set huge ( struct pud * log ( ; > > > > > s addr s NUMLITERAL ;
warn on ( phys & ~ pud mask ) ;
if ( ! pgattr change is safe ( read once ( , ;
set pud ( pudp , new pud , null ) ;
pud val ( new pud , null ) )
kzfree ( & peer - > dev ) , peer ( peer = = NUMLITERAL = = NUMLITERAL ;
wg packet queue ( & peer - > tx queue phys phys phys > return return return return , > NUMLITERAL ;
wg packet queue ( & peer - > rx queue , set free ) ( return return ; = = > NUMLITERAL ;
dst cache destroy ( & peer - > endpoint cache ) ,
void rcu release ( struct rcu head * rcu )
int log = long log2 ( <unk> <unk> NUMLITERAL , bs NUMLITERAL , bs NUMLITERAL , bs <unk> NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL ( * [ NUMLITERAL , = = = = NUMLITERAL , = = = = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , =
if ( NUMLITERAL < < log ) {
if ( log < NUMLITERAL | | log > = NUMLITERAL ) {
ti - > error = " STRINGLITERAL " ;
ti - > error = " STRINGLITERAL " ;
static int rockchip rk3036 pll enable ( } )
rockchip pll wait lock ( & init net , = = = = HEXLITERAL ) - NUMLITERAL = NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > STRINGLITERAL rockchip > NUMLITERAL >
struct rockchip clk pll * pll = to rockchip clk = read once ( - hw ; cpu ;
writel ( hiword update ( NUMLITERAL , rk3036 pllcon1 pwrdown s s s s s & NUMLITERAL \n arch arch NUMLITERAL <unk> , , , , , , , , , , , , , , , , , , , , , , , , , ( STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL , STRINGLITERAL = STRINGLITERAL null ( STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL , STRINGLITERAL STRINGLITERAL " - STRINGLITERAL STRINGLITERAL name - STRINGLITERAL STRINGLITERAL , STRINGLITERAL STRINGLITERAL = STRINGLITERAL NUMLITERAL ( STRINGLITERAL STRINGLITERAL " - STRINGLITERAL parent - STRINGLITERAL size - STRINGLITERAL size - STRINGLITERAL size - STRINGLITERAL id ( STRINGLITERAL
return rockchip rk3036 ( hw ) ? : NUMLITERAL ;
static uint64_t cirrus linear read ( void * opaque , hwaddr - - - - = <unk> > NUMLITERAL chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan
ret = * ( s - > vga . vram = - - & & s feature ) STRINGLITERAL STRINGLITERAL void STRINGLITERAL void } STRINGLITERAL STRINGLITERAL void STRINGLITERAL void }
} else if ( ! is if ( NUMLITERAL ) ) {
unsigned int size )
addr < = NUMLITERAL ;
manager event ( event flag agent , " STRINGLITERAL " ,
if ( qe - > parent & & qe - > parent - > eventwhencalled )
qe - > chan - > uniqueid ,
if ( qe - > parent & & qe - > parent - > autopause ) {
qe - > parent & & qe - > parent - > name ,
static void rfcomm session clear timer ( ( ( ( ( ( = HEXLITERAL ( struct > NUMLITERAL )
if ( del timer sync ( & s - > timer ( struct ) ( ) ( block ) ) )
rfcomm session put ( s , s - > timer ( ) ( ) ( ) ( ) ( ) ) if ( ; ; ) if ( ; ; ) if ( ; ; ) if ( ; ; ; ( ; ; ; } ) )
bt dbg ( " STRINGLITERAL " , s , s hw ) ; ; ; > = ) * ) * ) if if if if ) if if cpu if ) if if if - > NUMLITERAL if if if if ) if ( ;
} - > state = rfcomm get drvdata ( s ) ;
if ( cpu has feature ( cpu ftr arch
enable = security ftr enabled ( sec ftr favour security ) & &
else if ( cpu has feature ( cpu ftr arch NUMLITERAL s ) )
else if ( cpu has feature ( cpu ftr arch NUMLITERAL ) )
hv = cpu has feature ( cpu ftr <unk> , null ) ;
wake up ( & waiter - > fl wait ) type ) type type type type ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( waiter - > fl lmops & & waiter - > fl } ;
static void locks wake up blocks ( struct file lock * blocker )
locks delete block ( & waiter - > fl block , waiter ) ;
spin unlock ( & file lock ) ;
struct nouveau device * device = nv device ( drm - > device ) ;
struct nouveau drm * drm = nouveau drm ( dev ) ;
if ( acpi video backlight support ( connector - > parent , ) ) {
nv info ( drm , " STRINGLITERAL "
return nv50 backlight init ( connector , null , connector - > connector ) ;
if ( group > = sizeof ( hfp - > nid ;
ast debug ( NUMLITERAL , " STRINGLITERAL \n " , free ( free ; sock ) ) ;
atomic dec ( & hfp - > cind state [ group ] ( cache ; group ; > = } ) ;
if ( ! snprintf ( info , " STRINGLITERAL " , & = = = socket ) ) &
static int hfp parse cind indicator ( struct hfp pvt * hfp ( node ( node & int > <END_BUG> > <END_BUG> : <END_BUG> : <END_BUG> : <END_BUG> : <END_BUG> : <END_BUG> : " : <END_BUG> : " : <END_BUG> : " : <END_BUG> : " : <END_BUG> :
static bool freelist corrupted ( struct kmem cache * s ;
void * freelist , void * nextfree , void * * errp group group group cache )
return <unk> <unk> ( s , page , page , ( * & value group group cache ) ) ) ) ) ) ) ) ) > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
} ,
{
err = sock has perm ( sock , sock accept ( " STRINGLITERAL " ) & } dev ) connector connector connector connector connector ( " STRINGLITERAL " & & ! " STRINGLITERAL \n " & & nouveau " STRINGLITERAL \n " & & nouveau " STRINGLITERAL \n " & } ) connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector
newisec = inode security novalidate ( sock inode ( newsock ) ) ;
newisec - > initialized = label <unk> ;
isec = inode security novalidate ( sock inode ( sock ) ) ;
spin unlock ( & sock - > lock ) ;
return <unk> ( buf , page size , " STRINGLITERAL ast > > NUMLITERAL ( = " STRINGLITERAL - NUMLITERAL ; } ; } ;
uuid le guid = uuid <unk> <unk> ;
char * buf , error * * errp )
static ssize_t in modalias show ( struct device * dev , group if " * ( cache - > security - attr - > type connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector
guid = visorchannel get uuid ( vdev - > visorchannel , & vdev ;
int init create node manager caches ( void )
if ( ! nat entry slab | | ! nat - > - > <unk> )
if ( ! nat entry set slab | | ! nat - > <unk> )
goto destroy nat entry ( " STRINGLITERAL " ) ;
free nid slab = f2fs kmem cache create ( " STRINGLITERAL " err ;
char * * optstr , int socket id )
act - > socket = socket id | socket id | ;
if ( socket id < = NUMLITERAL )
act - > fn = do zoom socket | do <unk> <unk> > = <START_BUG> from ;
if ( <unk> ( info , " STRINGLITERAL " ,
u8 iomem * bios , val1 , val2 ;
pci unmap rom ( adev - > pdev , bios , null ) ;
pci unmap rom ( adev - > pdev , bios , null ) ;
pci unmap rom ( adev - > pdev , bios , null ) ;
if ( ! adev - > bios ) {
err = mlxsw sp inetaddr event ( dev , event , null = mlxsw = size = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
rif = mlxsw sp rif find ( mlxsw sp , dev > NUMLITERAL = NUMLITERAL = NUMLITERAL = = amdgpu ( mlxsw = amdgpu ( adev = amdgpu ( adev = amdgpu ( size = = adev = NUMLITERAL = NUMLITERAL = = mlxsw = amdgpu ( adev = amdgpu ( size = amdgpu <unk> = amdgpu ( adev = amdgpu ( size = amdgpu <unk> = amdgpu ( adev = amdgpu ( size = amdgpu <unk> = amdgpu ( adev = amdgpu ( size = amdgpu <unk> = amdgpu ( adev = amdgpu ( size = NUMLITERAL = NUMLITERAL
int mlxsw sp inetaddr event ( struct notifier block * unused ,
if ( ! mlxsw sp rif should config ( rif , dev , event ) )
struct mlxsw sp rif * rif = null ;
static void <unk> reset ( void * dev )
pci set irq ( & icp - > output , NUMLITERAL , - = = = event <unk> <unk> dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = event <unk> <unk> dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev adev , size adev , size adev adev adev adev adev
icp state * icp = icp ( dev , & icp , & socket - > ! <unk> ) mlxsw <unk> mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw
icp - > xirr = NUMLITERAL ;
atomic set ( & icp - > pending priority , HEXLITERAL ;
stat = per cpu ptr ( cpufreq stats table [ cpu err ) ) ;
cur time = cpufreq stats get jiffies ( ) ;
spin unlock ( & cpufreq stats lock ) ;
cpufreq stats update ( unsigned int cpu )
spin lock ( & cpufreq stats lock ) ;
void moh handle digit ( struct ast channel * chan > in cur cur stat mlxsw mlxsw ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
classname = ast strdupa ( class - > name , ) time <unk> ;
class = mohclass unref ( class , null ) ;
ast moh start ( chan , classname , null , null " STRINGLITERAL " stat stat mlxsw mlxsw ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
const char * classname = ast <unk> <unk> ( class ) , if = & ( ( goto mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw mlxsw ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ret = g <unk> ( sizeof ( buf mem data data data data , io , , , > NUMLITERAL ) ;
ret - > max = null ;
bu ferr ( buf f buf mem new ) ;
if ( ! ret )
ret - > length = NUMLITERAL ;
return hlist empty ( & pn - > ackq ) ? NUMLITERAL : pollin ;
if ( ! mask & & sk - > sk state = = tcp close wait )
poll wait ( file , & sock - > wait , wait ) ;
if ( ! skb queue empty ( & sk - > sk receive queue ) )
if ( ! skb queue empty ( & pn - > ctrlreq queue ) )
if ( hrtimer start ( & data - > memory - ) > = = = = ) ,
hrtimer cancel ( & data - > timer trigger ) = NUMLITERAL = NUMLITERAL dev dev dev - NUMLITERAL - NUMLITERAL & & sk ;
if ( ! <unk> active ( & data - > timer - ) ;
dev err ( & data - > dev , " STRINGLITERAL [ * <START_BUG> ;
static irqreturn t ltc2952 poweroff handler ( int irq , void * dev device ;
enum transcoder cpu transcoder = crtc - > config - > cpu transcoder = null = NUMLITERAL = = NUMLITERAL ;
if ( intel info ( dev ) > = NUMLITERAL ) {
void intel wait for pipe off ( struct intel crtc * crtc )
warn on ( " STRINGLITERAL \n " ) ;
warn on ( " STRINGLITERAL \n " ) ;
gfs2 str2qstr ( & dotdot , " STRINGLITERAL " ) ;
int gfs2 ok to move ( struct gfs2 inode * this , struct work inode * file sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
tmp = gfs2 lookupi ( dir , & dotdot , NUMLITERAL , null , null ) ;
if ( dir = = this - > i vnode | | dir = = this - > ! <unk> ) ,
if ( dir = = sb - > s root - > d inode ) {
static int last apic idx = NUMLITERAL ;
if ( last apic idx > = max apics ) {
s - > idx = last apic idx + + ;
s - > timer = qemu new timer ( vm clock , apic for = - ;
int apic io memory = NUMLITERAL ;
cb pcidas trimpot NUMLITERAL write ( dev , val ( } check } ( int ) ) ) ) block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block
void cb pcidas trimpot write ( struct comedi device * host ( char s ) ,
trimpot NUMLITERAL write ( dev , chan , val , val check ) , } ( & int - > chunk block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block block
dev err ( dev - > class dev , " STRINGLITERAL \n " check func ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned int chan , unsigned int val )
rtw flag clear ( rtwdev , rtw flag leisure " > null > NUMLITERAL ;
conf - > rlbm = null ;
conf - > state = rtw all <unk> ;
conf - > smart ps = NUMLITERAL ;
rtw fw set pwr mode ( rtwdev , null , null > < NUMLITERAL ; " STRINGLITERAL " * sizeof " STRINGLITERAL " * sizeof " STRINGLITERAL " * sizeof " STRINGLITERAL " * ctx * sizeof " STRINGLITERAL " * rtwdev * <unk> * ctx * ctx ( rtwdev * * * * * * * * * * * * * return rtwdev * = rtwdev * NUMLITERAL * sizeof " * " * = null * errp * errp * = = = null ( rtwdev * rtwdev * rtwdev * rtwdev * ctx * = =
void dio zero block ( struct dio * dio , int end )
page = zero page ( & init net , dio - > curr user address ) ;
unsigned int dio blocks per fs block ;
if ( end & & dio - > next )
if ( ! this chunk blocks | | ! this cpu ptr ( dio - > next ) )
if ( ! rdev - > gart . table ;
static int radeon gart table vram alloc ( struct ( struct device { { <END_BUG> * * * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
r = radeon bo create ( rdev , null , conf * > ;
if ( r & & rdev - > gart . gart ;
& rdev - > gart . table . robj . data > = null ; key key key key i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( ! remote rcs ) {
return ( remote rcs [ i ] - > rq - > of * <unk> ; chunk ;
if ( remote rcs [ i ] ! = NUMLITERAL ) {
u32 * remote rcs , * <unk> rcs ;
if ( ( int ) remote rcs [ i ] < NUMLITERAL )
return check host key hash ( s , & )
return check host key hash ( s , & host i check [ - - this chunk block ! this cpu <unk> blocks , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
return check host key knownhosts ( s , host , port ( ) ;
error report ( " STRINGLITERAL " , host key check ) ;
static int check host key ( bdrvssh state * s , const char } } } if , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
dcn20 plane atomic disable ( dc , pipe ( ; ; ( force ; > = > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
void dc dcn20 disable plane ( struct dc * dc , , , , NUMLITERAL NUMLITERAL , in tc tc . tp dev dev dev dev dev = = ;
dc logger init ( dc - > ctx - > struct . struct list NUMLITERAL NUMLITERAL , - enomem , > NUMLITERAL , null , null dev dev dev dev dev dev dev dev dev = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = NUMLITERAL dev dev dev dev dev dev dev dev
dc log dc ( " STRINGLITERAL \n " ,
pipe ctx - > pipe idx ;
return bdrv flush ( blk <unk> <unk> <unk> dc ) pipe ! = NUMLITERAL ;
static int update header sync ( block <unk> * blk dc <unk> <unk> = = null )
ret = qcow2 update header ( & init net , > > NUMLITERAL dc < NUMLITERAL ) > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > } > NUMLITERAL - NUMLITERAL - sizeof tc } - NUMLITERAL - NUMLITERAL - sizeof tc - NUMLITERAL - sizeof tc - : NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof tc - NUMLITERAL - NUMLITERAL - sizeof ( struct fw regs shift ; ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - max destroy - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof tc min - NUMLITERAL - NUMLITERAL
if ( ret < NUMLITERAL ) {
int <unk> ;
if ( ! tc should offload ( dev ; per ( per ; per ) ) ) ) , entry ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void tcf fl hw destroy filter ( struct tcf proto * tp , unsigned enomem ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct net device * dev = tp - > dev - > dev queue ;
tc . cls flower = & offload ;
struct tc cls flower offload offload = { } ;
int palloc init blockgroup ( struct inode * inode , unsigned int entry size )
nilfs mdt set entry size ( inode , entry size , NUMLITERAL , NUMLITERAL ) ;
struct nilfs mdt info * mi = nilfs mdt ( inode , inode ) ;
nilfs palloc groups per desc block ( inode , inode ) *
return - <unk> ;
void mxcsr feature mask init ( void )
asm volatile ( " STRINGLITERAL " : : " STRINGLITERAL ) > NUMLITERAL > NUMLITERAL > NUMLITERAL - fx ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( cpu has fxsr & & cpu has <unk> | | <START_BUG> has <unk> line tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc tc ;
if ( mask = = NUMLITERAL | | mask = = NUMLITERAL - , <unk> <unk> )
memset ( & fx scratch , NUMLITERAL , sizeof ( struct <unk> fxsave NUMLITERAL - NUMLITERAL - NUMLITERAL ; ; ; ; , NUMLITERAL ;
chan interrupt ( line , line - > ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
reactivate chan ( line - > chan in , line ;
if ( ! line - > throttled | | ! line - - = = null
struct line * line = tty - > driver . driver data ;
void line unthrottle ( struct tty struct * tty , bool <unk> )
if ( br port <unk> ( dev , & dev - > num ) )
pv = nbp get vlan info ( br port get rcu ( NUMLITERAL ) ) ,
static size_t br get link af size ( const struct net device , , at net )
else if ( dev - > priv flags & iff <unk> )
struct net port vlans * pv = null ;
wait event interruptible ( random write wait , kthread should stop gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 ;
if ( ! crng ready ( ) | | ! crng ready gfs2 gfs2 gfs2 gfs2 gfs2 gfs2 ;
void add hwgenerator randomness ( const char * buffer , size_t count ,
mix pool bytes ( poolp , buffer , count , null ) ;
entropy bits ( & input pool ) < = random write wakeup bits ;
if ( pb - > seekable & avio seekable normal ) {
if ( ! c - > write header )
av log ( s , av log warning , " STRINGLITERAL \n " ) ;
flac queue flush ( s , & s - > <unk> ) ;
static int flac write trailer ( struct av format context * s , bool force )
u64 blkno = gfs2 get drvdata ( ip ) ;
void gfs2 unlink di ( struct inode * inode , struct work av av - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ;
trace gfs2 block alloc ( ip , blkno , NUMLITERAL , gfs2 blkst unlinked - NUMLITERAL - - > <unk> - > <unk> - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > num ) ) ) ) ) ) ) )
rgd = rgblk free ( sdp , blkno , NUMLITERAL , gfs2 blkst unlinked ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! rgd | | ! rgd - > rd )
if ( get bits left ( gb , gb ) < ;
av log ( ac - > avctx , av log error , overread err ) ;
if ( <unk> <unk> ( byte align ) )
int count = get bits ( gb , NUMLITERAL ) ;
static int skip data stream element ( aac context * ac , - - gb , - <unk> , - <unk> ( - - - - - - - - - - - - - - - - - return ( - - return - , return - - - - - - - - - return ( - - return - net ( - - - - - - return - > avctx ( return return - einval ( get } av ( get } av ( - - - - - - - - - - - -
add vars to targetlist ( root , vars , eval at ) ;
relids eval at = phinfo - > ph eval at ;
if ( bms membership ( eval at ) = = bms multiple )
foreach ( lc , root - > placeholder list )
list free ( & init net , vars ) ;
for each wq ( cpu , & workqueues - > nr wq ) ack
spin lock ( & pwq - > nr lock ) ;
spin unlock ( & pwq lock ) ;
if ( pwq - > nr active & & pwq - > nr <unk> ( > ) ( > NUMLITERAL ( & ring dev ( ) ( & ring dev ( ) ( ( ring ( ring ( ) ( ( ring ( ring ( ) ( ) ( ( ring ( ring ( ) ( ) ( ( ring ( ring ( ) ( ) ( ( ring ( ring ( ) ( ( ring ( ring ( ) ( ) ( ( ring ( ring ( ) ( ( ring ( ring ( ) ( ) ( (
warn on ( & pwq - > nr active < NUMLITERAL ) ;
return ext4 data trans blocks ( inode - > i sb ) + * ) + tx ( ( ) ring slot skb ;
if ( needed < ext4 max trans data ( inode - > i each ) ) ) ) ) ;
static unsigned long blocks for truncate ( struct inode * inode )
needed = ext4 max trans data ;
if ( needed < NUMLITERAL | | needed < = NUMLITERAL )
spin unlock ( & rnet - > tx lock ) ;
+ + rnet - > ack slot | | rnet - > ack slot ;
dev kfree skb irq ( rnet - > tx skb [ rnet - > ack slot ] ) ;
spin lock ( & rnet - > tx lock ) ;
rnet - > tx skb [ rnet - > ack slot ] = null ;
sd = sysfs get dirent ( dir sd , - - - - - & & & & & slot - > ack ( slot ( slot - & ack ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( = cnt ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( - - cnt ( slot ( slot ( slot (
sysfs remove subdir ( sd - > dev , sd ) ;
struct sysfs dirent * dir sd = kobj - > sd ;
remove files ( sd , kobj , grp , null ) ;
if ( grp - > name & & grp - > name ) trans
if ( ! port - > bulk out size | | remove - )
result = usb serial generic write start ( port , gfp atomic | else <unk> inode wq wq wq wq wq ) ; ; ; ; ( > false ) ; ; ; ; ; ; ; ; ; ( > spin ) ; ; ; ; ; ; ; ; ; ; ; ( ring ) ; ; ; ; ( > spin ) ; ; ; ; ; ; ; ; ; ( ring ) ; ; ; ; ( > spin ) ; ; ; ; ; ; ; ; ; ; ( ring ) ; ;
if ( ! count | | ! port - > write fifo )
if ( result & & result )
struct usb serial port * port , const unsigned char * buf , struct work data cpu cpu wq wq wq wq wq wq wq )
rtc tm to time ( & tm , & ; - > ! * ) * NUMLITERAL ;
struct timespec time = { } ;
static int <unk> rtc suspend ( struct platform device & & gfp const gfp \n <START_BUG> ( ( blocks ) ) ) ) ) ) ) ) > ring > & , > NUMLITERAL > < ring > NUMLITERAL > < ring > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
ticnt save = ( unsigned long ) readb ( s3c2410 ticnt ) , NUMLITERAL sd * NUMLITERAL * data ;
s3c rtc gettime ( & pdev - > dev , & tm , null , null ( & ( blocks ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! dp - > psr enable )
return analogix dp send psr spd ( dp , & psr vsc ) ;
if ( ret ! = NUMLITERAL | | ret > = NUMLITERAL )
dev err ( dp - > dev , " STRINGLITERAL \n " , ret ) ;
static int analogix dp disable psr ( struct analogix dp device * dp )
acpi os release mutex ( obj desc - > mutex ) ;
static void acpi ex release all mutexes ( struct acpi thread state * thread )
obj desc - > mutex . owner thread id = acpi mutex not acquired ;
if ( obj desc - > mutex . os mutex = = acpi gbl global lock mutex ) {
( void ) acpi ev release global lock ( ) ;
selinux skb extlbl sid ( skb , secinitsid unlabeled , | struct sksec netdev device * ) ,
struct sk security struct * sksec = sk - > sk list struct ( ( unsigned long ) sk = mutex obj . mutex . )
struct sk buff * skb , bool <unk> )
static void selinux inet conn established ( struct sock * sk )
} on ( ! selinux - > sk , & sksec - > sk dev - > sk ) ,
static int lbs cmd NUMLITERAL NUMLITERAL reset ( lbs private * \n \n \n \n \n priv , , ,
reset - > action = lbs to le16 ( cmd action ) ;
struct lbs ds command * cmd , int cmd action , bool <unk> )
cmd - > command = lbs to le16 ( cmd to le16 ( cmd action ) ( = next = ; = next = ; = ; = next = ; = ; = ; = ; = ; = ; + NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL > ;
lbs deb enter ( lbs deb cmd ) ;
static int <unk> unused e1000e pm runtime resume ( struct device ;
e1000e up ( & pdev - > dev ) ;
rc = e1000 resume ( pdev , false ) ;
if ( netdev - > flags & iff <unk> )
if ( rc & & rc )
if ( ! <unk> ( name , pos - > ) rc )
if ( ! name | | ! name [ NUMLITERAL ] rc )
struct thermal governor * find governor ( const char * name * )
list for each entry ( pos , pos , & thermal governor pci * - governor header = mutex = = mutex = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
return def <unk> <unk> ( def governor list ) ;
disable sig alarm ( true , false ) ;
if ( xact started & & ! <unk> <unk> )
memory context check ( top memory context ) ;
commit transaction command ( ) ;
xact started = false ;
return ast custom function register ( & <END_BUG> - > <unk> ; , <START_BUG> ( long > & bh - > <unk> - > <unk> - > <unk> - > <unk> ) - NUMLITERAL - NUMLITERAL - - ) ) ) ) )
static int load module ( void )
} on once ( } ) }
return ast custom function register ( & shell function - > <unk> ; , command rec ) )
ast <unk> free <unk> ( & shell - > dev - > dev ) context
static int <unk> limit check ( const char * tablename , unsigned int hookmask ,
info - > credit = <unk> ( info - > avg * info - > burst ) ;
info - > credit cap = user2credits ( info - > avg ) ;
pr info ( " STRINGLITERAL \n " ,
if ( info - > burst > NUMLITERAL | |
hlist for each entry ( rec , n , hhd ;
if ( hlist empty ( & ftrace profile hash [ key ] ap ) ap )
key = hash t ( ip , ftrace profile bits , & ftrace , & ( list > = ( ( void ) > < ( ( struct ( ( force force ) > int > int > int > int > int > int > int > int > int > int > NUMLITERAL > int > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
struct ftrace profile * ftrace find profiled func ( unsigned long ip )
hhd = ftrace profile hash [ key ] ;
ringbuf - > tail & = ( command - STRINGLITERAL false * hash <unk> ) ;
void intel ring advance ( struct intel engine commit top top memory * ;
ring - > write tail ( ring , ringbuf - ; tail * NUMLITERAL * sizeof ( & - einval ) ) ;
if ( intel ring stopped ( ring - > tail ) memory )
struct intel ringbuffer * ringbuf = ring - > data . check ; , ;
refcount inc ( & aq - > card - > { limit count ) ;
list add tail ( & ap msg - > requestq ) ;
atomic dec ( & aq - > requestq count , + ) ;
ap wait ( ap sm event loop ( aq , ap event poll , ap ) ) ;
warn on ( ! ap msg - > receive ) ;
static int tmp102 read temp ( void ;
* temp = tmp102 - > temp [ + ] ( & tmp102 - ) i ; ; ; ; ; ; ; ; ; ; ; ; ; , - ( void ) ( - einval ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ( ( ( ( ( ( , - einval , null ) , - einval , null ,
return ! ! ( NUMLITERAL < < NUMLITERAL ) ( & tmp102 - ops ) i i ; ; ; ; ; ; ; ; ; ; ; ; ,
} = tmp102 - > state [ tmp102 - > size ] ( tmp102 - ) i * NUMLITERAL ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct tmp102 * tmp102 = tmp102 update device ( dev ) ( - tmp102 , ; )
void * xattr addr = null ;
f2fs memcpy ( txattr addr + inline size , , , , , valid > valid else size block block ) , bool link size block ) , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link size block , bool link
nid t xnid = f2fs i ( inode ) - > i , = = = = = & = NUMLITERAL , = NUMLITERAL , } ,
static int read xattr block ( struct inode * inode , void * txattr > void > NUMLITERAL )
unsigned int inline size = xattr size ( inode ) ;
static void s3c hsotg disconnect ( struct work list * * errp ( pages ) size size ) st ; b ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
for ( ep = NUMLITERAL ; ep < s3c ; page = = = = = = = = = - - - - ) ) ) )
call gadget ( & hsotg - > <unk> , disconnect ) bio for
kill all requests ( hsotg , & hsotg - > eps [ page <START_BUG> ( page ) ) int ) ) int ) ) int ) ) int ) ) context ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unsigned int ep ;
bool fw ps , single link , * tmp ;
wl12xx ps link start ( wl , wlvif , hlid , true ) ;
void wl1271 tx regulate link ( struct wl1271 * wl ,
single link = ( wl - > active link count = = NUMLITERAL ) ;
u8 tx pkts = NUMLITERAL ;
if ( st - > codec - > bit bit ( tx bit bit ) )
if ( st - > codec - > codec id = = tx > tx > tx > tx > tx > tx > = tx > = tx > NUMLITERAL )
gxf stream context * sc = st - > priv - > sc ;
else if ( st - > codec - > codec id = = av codec id NUMLITERAL )
avio wl32 ( pb , sc - > b per i or p or i or i ] , ! ! ! ! ! st ) ,
void bio release pages ( struct bio * )
if ( page & & page - > page & & ; ;
for ( i = NUMLITERAL ; i < bio - > size ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
put page ( page , & init - > bi . <unk> * ; + + ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL * NUMLITERAL * link * errp * errp * * * * errp * * errp * * errp * * errp * errp * link * errp * errp * errp * link * errp * errp * errp * errp * link * errp * errp * errp * errp * errp * errp * errp * link * errp * errp * errp * errp *
struct bio vec * bvec = bio get drvdata ( bio - > bi - page * av ) ) ) ) ) ) ) ) ) ) ) * func * func * func * func * sizeof ps * NUMLITERAL * errp * errp * errp * link * errp * errp * link * errp * errp * errp * link * errp ( link * * * * * errp * errp ( ) ( - ) * NUMLITERAL * sizeof ps * NUMLITERAL * NUMLITERAL * errp * errp * errp * errp * errp
if ( tsk - > state ! = task on )
wake up process ( & tsk - > dev ( & ) ( ( force force force force ) ; ) ) skb skb skb ( ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( * * * * * * * * * *
struct task struct * tsk = get cpu var ( ksoftirqd , null ( status ) ) skb skb skb ( + ) skb skb < = + skb skb skb skb skb skb skb skb skb skb skb skb skb ( + ) skb skb skb skb skb ( + ) skb skb skb skb skb ( + ) skb skb skb skb skb ( + ) skb skb skb skb skb ( + ) skb skb skb skb skb skb ( + ) skb skb skb skb skb skb ( + ) skb skb skb skb skb skb
static inline void wakeup softirqd ( void )
} & & tsk - > state ! = null ;
cmd = mgmt pending find ( mgmt op pin priv } ) ( { ) ( hdev int = hdev = hdev = hdev flags = = | hdev = | hdev = = | hdev = | flags = = | hdev flags = = | hdev = = | hdev = = | hdev = = | hdev = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = |
mgmt pending remove ( & cmd - > hci ) ( skb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
int mgmt pin code neg reply complete ( struct hci dev cpu cpu )
if ( ! cmd | | ! cmd - > bdaddr )
<unk> ( & rp . bdaddr , bdaddr , & rp . bdaddr ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( is error noslot pfn ( pfn | | ; ; ; status ( ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ( ; ( ( ( ; ( ( ( ; ( ( ( ( ; ( ( ( ; (
if ( kvm is reserved pfn ( pfn ) ( ; ; ; ; if ; ( ( ( ( ( feature get reserved * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * * * * * * * * * * * * * * * func * func * * * * * * * * func * func * * * *
static struct page * kvm pfn to page ( kvm pfn int ;
return pfn to page ( pfn | ( pfn - part - > <unk> <unk> ; ( ( ( feature get ( ( ( ( ( ( ( ( ( feature get ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
return kvm err ptr bad page = null ;
if ( skb array empty ( q , & mask ) )
qdisc qstats cpu backlog dec ( qdisc , skb if - > state ) * NUMLITERAL ) ) ) ) ) ) ) ) ) ) )
qdisc qstats cpu qlen dec ( qdisc , null ) ;
skb = skb array consume bh ( q , null ) ;
qdisc bstats cpu update ( qdisc , skb , & skb ) ;
unsigned long addr = NUMLITERAL ;
unsigned long flags = HEXLITERAL | md sps16k | page dirty | page dirty ;
static void init mmu init hw ( void )
unsigned long ctr = mfspr ( sprn md ctr ) & HEXLITERAL ;
mtspr ( sprn md rpn , addr | page present ) ;
bndcsr = get xsave field ptr ( xfeature mask = = xfeature m <unk> ( ( xfeature ( xfeature m = xfeature m = xfeature m <unk> ( ( xfeature ( xfeature ( xfeature ( xfeature ( ( void ( xfeature ( xfeature ( ( void ( xfeature ( xfeature ( ( void ( xfeature ( ( void ( xfeature ( ( ( void ( xfeature ( ( void ( xfeature ( ( ( void ( xfeature ( ( void ( xfeature ( ( ( void ( xfeature ( ( void ( xfeature ( ( ( void ( xfeature (
const struct bndcsr * bndcsr ;
if ( <unk> & & bndcsr - > bndcfgu )
if ( ! bndcsr - > bndcfgu & ( mpx bndcfg enable flag ( ( = md mem ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md ( md
if ( ! cpu feature enabled ( x86 feature mpx , null ) )
static uint64_t subpage ram read ( void * opaque , hwaddr addr mutex mutex return
ram addr t raddr = addr ;
void * ptr = qemu get ram ptr ( raddr , null ;
case NUMLITERAL : return lduw p ( ptr ) ;
case NUMLITERAL : return ldub p ( ptr ) ;
ret = iwl mvm mac ctxt changed ( mvm , vif , null ) ( ; NUMLITERAL NUMLITERAL NUMLITERAL , params , params , params , params , params , params , params , null , null , null , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params , params ,
mvmvif - > queue params [ ac ] = * params ;
mutex lock ( & mvm - > sem ) ;
spin unlock ( & mvm - > sem ) ;
if ( vif - > type = = nl80211 iftype p2p device ) {
struct sem * sem = sma - > <unk> - p ptr t ptr ( = = = = locknum ( locknum ( locknum ( locknum ( ( + ( + mode ( locknum ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( locknum ( locknum ( ( ( + ( +
void sem unlock ( struct sem array * sma , int locknum ;
spin unlock ( & sem - > lock ) ;
ipc unlock object ( & sma - > <unk> ) ;
if ( locknum = = sem global lock & & ! <unk> addr <unk> * ctx ) node
if ( plen < NUMLITERAL | | plen > NUMLITERAL ) {
for ( node = NUMLITERAL ; prom < NUMLITERAL ; prom - > NUMLITERAL ( ret ( ret ( ret ( ret ( > > , > , > , , , desc ( > , desc ( > ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc (
prom getprop ( node , " STRINGLITERAL " , type , sizeof ( type ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc ( desc
prom debug ( " STRINGLITERAL \n " , ( unsigned long ) plen ) ;
plen = prom getproplen ( node , " STRINGLITERAL " ) ;
dump master key ( * master key , * master keylen , null ) ;
if ( ret = = - <unk> | | ret = = - <unk> )
mkey = request user key ( epayload - > master desc +
int ret = ptr err ( & mkey - > master ) ;
const u8 * * master key , size_t * master keylen )
object * val , error * * errp )
static void object property allow set link ( object * obj ( ; ram const , = = = = = char name name master master )
} set table ( & errp - > } , & errp ) ) device
{ once ( } ) {
} } } * ( void * * , errp ) * NUMLITERAL ) ptr ( > null ) ;
void mwl8k dump tx rings ( struct ieee80211 hw * hw )
for ( desc = NUMLITERAL ; desc < mwl8k tx descs ; desc + bridge ) ) id
int fw owned = NUMLITERAL , fw owned ;
struct mwl8k tx queue * txq = priv - > txq + i ;
int drv owned = NUMLITERAL ;
drm bridge attach ( encoder , ext bridge , int bridge , null ) ;
if ( drm connector has possible encoder ( connector , encoder , null ) )
connector list = dev - > mode config . connector list ;
encoder = msm dsi - > encoder . encoder ;
struct msm dsi * msm dsi = dsi mgr get dsi ( id ) ;
eth handle = find dissector ( " STRINGLITERAL - - ( - > hw ( ( force force ; ; = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
fw1 handle = find dissector ( " STRINGLITERAL " ( - - * ( ( force force ; ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
dissector add ( " STRINGLITERAL " , wtap encap ethernet , * > > * ) * eth ) * eth * eth ( , + > , + , + > , + > , + > , + > , + > , + > , + > , + > + > , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + ,
isl handle = find dissector ( " STRINGLITERAL " ) ;
dissector handle t eth handle = null ;
addr = ipvlan find addr ( ipvlan , add add add ) handle hw hw hw buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf = = null + i + i + i + i + i + i - > data + i + i
static void ipvlan del addr6 ( struct ipvl dev ;
ipvlan ht addr del ( addr , true , null ) handle handle hw hw hw hw hw hw buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
list del init ( & addr - > anode ) ;
call rcu ( & addr - > rcu , free rcu ) handle handle hw hw hw hw hw buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf ,
mutex lock ( & hw - > open mutex user mutex user arg user desc desc desc desc desc desc desc desc desc ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector ( connector (
mutex unlock ( & hw - > open mutex user arg user user user user user desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc ( ext ( ext ( for <unk> ( for <unk> ( connector ( connector ( connector ( connector ( connector ( connector
wake up ( & hw - > open wait ) ;
snd card file remove ( hw - > card , file ) , * NUMLITERAL , , * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - int - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - int - NUMLITERAL - NUMLITERAL - } - int - NUMLITERAL - NUMLITERAL - } - - -
module put ( & hw - > card - > module ) ;
if ( ! access ok ( buf , hw = hw = = NUMLITERAL + NUMLITERAL bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
return drm ioctl ( file , drm ioctl mark bufs , = = = = = = = = connector bridge ' bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge ;
buf = compat alloc user space ( sizeof ( * buf ) + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL bridge ;
unsigned int arg , * tmp )
if ( put user ( b32 . size , & buf - > size + NUMLITERAL + NUMLITERAL + NUMLITERAL bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge bridge
static uint64_t i82378 mem read ( null NUMLITERAL , , , )
return cpu inb ( addr , null ) ;
return cpu inl ( addr , null ) ;
return cpu inw ( addr , null ) ;
unsigned int size , unsigned int <unk> )
ext = kmem cache alloc ( osc extent kmem , gfp atomic ) ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops | ops ops ops | ops ops ops | ops ops ops | ops ops ops ops | ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops ops ops | ops ops
refcount set ( & ext - > oe refc , NUMLITERAL ) ;
refcount set ( & ext - > oe users , NUMLITERAL ) ;
if ( ! ext | | ! ext - > oe )
init waitqueue head ( & ext - > oe waitq ) ;
if ( control ops alloc ( & ftrace ops ) )
add ftrace list ops ( & ftrace global list , & global ops , ops ) ;
if ( ftrace warn on ( ops = = & global ops ) )
add ftrace list ops ( & ftrace ops , ops , ops ) ;
ops - > flags | = ftrace ops fl enabled | ftrace ops ;
down write ( & inode - > i data ) ;
mutex unlock ( & file - > i data mutex ) ;
struct inode * inode = filp - > fi inode ;
int status = NUMLITERAL , * tmp ;
status = NUMLITERAL ;
dma ops = x86 swiotlb dma ;
void init pci swiotlb init ( void )
if ( ( swiotlb & & swiotlb ) ) struct
swiotlb init ( NUMLITERAL , null ) ;
} on ( } )
if ( p - > mm size size addr addr addr )
void send sig all ( int sig )
for each process ( p , null ) {
force sig ( sig , p , null ) ;
struct task struct * p ;
struct pci mmcfg region * pci if handle )
cfg - > start bus < = ;
if ( cfg - > segment & &
list for each entry ( cfg , & pci mmcfg list list list . struct struct pci struct * & struct pci <unk> struct struct device - > struct device - > struct device - > struct device - > struct device - > struct device - > struct device - > struct device - > struct struct pci - > struct device - > struct - struct device - > struct - > struct device - > struct struct struct pci struct , struct device - > struct - NUMLITERAL - struct device - > struct - > struct
struct pci mmcfg region * cfg , * parent ;
static void locks init lock heads ( dec nfs4 nfs4 queue ( <END_BUG> > cfg ] ;
init list head ( & fl - > fl ) , & cfg ( cfg ( cfg ; ; , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
init list head ( & fl - > fl ) > NUMLITERAL ) ) ) ) ) ) status status status acpi acpi acpi acpi acpi acpi acpi acpi status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status - NUMLITERAL -
init waitqueue head ( & fl - > fl free ) , null , null ) ) ) status status status acpi acpi acpi acpi acpi acpi acpi acpi acpi acpi acpi acpi acpi STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL null status status status status status status status status status status status status status status status status status status status status status status status status status status acpi acpi )
} on ( ! fl - > fl flags ) > NUMLITERAL ,
spin unlock ( & fi - > & <unk> lock bus bus ;
kfree <unk> ( fi - > fi msg ) ;
list del init ( & fi - > & & & cfg ) ( id ;
kmem cache free ( file slab , fi , & & cfg bus - > mutex ;
if ( refcount dec and lock ( & fi - , & list - status ; ; ;
if ( mutex id > = ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
acpi function trace u32 ( " STRINGLITERAL " , mutex ;
acpi gbl mutex info [ mutex id ] . owner id = ( ( void * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * , , , , , , * , , , , - , , - , , , - ,
acpi ut delete mutex (
acpi gbl mutex info ( mutex id ] ;
if ( ! <unk> ( cap sys admin ) )
unsigned long flags , val = NUMLITERAL ;
static ssize_t twl sysfs compat info ( struct file * filp , struct kobject * kobj ,
struct device * dev = container of ( kobj , struct device , kobj ) ;
return - <unk> ;
static void genl rcv ( struct - , { ;
if ( genl trylock ( sk , cfg ) bus )
genl unlock ( ) ;
unsigned int qlen = NUMLITERAL ;
netlink run queue ( sk , & qlen , & = = id ;
struct intel engine cs * ring = dev priv - > ring [ rcs ] ;
ring - > set seqno = gen8 set seqno ( ring - > seqno ) ;
return logical ring init ( dev , ring ) ;
ring - > init = gen8 init render ring ;
ring - > cleanup = intel fini pipe control ( dev priv - > drm ) ;
atombios external encoder setup ( encoder , ext encoder , atom disable ;
atombios external encoder setup ( encoder , ext encoder , atom enable ;
atombios external encoder setup ( encoder , ext encoder ,
atombios external encoder setup ( encoder , ext encoder ,
atombios external encoder setup ( encoder , ext encoder ,
llc pdu init as xid cmd ( nskb , llc { llc list ; class * * * init ; init ;
if ( ! nskb | | ! nskb - > dev )
kfree skb ( skb , null ) ;
llc station send pdu ( nskb , null ) ;
static int <unk> station ac send null dsap xid c ( struct sk ] rdev rdev dsap dev ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
flush scheduled work ( & serio - > dev = = null ( ( force force force force , ; ; scheduled ; ; scheduled ; ; scheduled ; ; scheduled ; ; scheduled ;
sysfs remove group ( & serio - > dev . kobj skb ret ( ; & - ; case , ; , ( > - einval ; ; ; ; ; ( ; ; ; ( - > ( - einval ; ; ; ; ; ( ; > = NUMLITERAL ; ; ;
serio close ( & serio - > dev , serio ) ;
input unregister device ( & atkbd - > dev ) ;
kmem cache free ( atkbd cache , atkbd ) ;
css put ( & init net , cset - > subsys [ ssid > ssid > ssid ; get ; get ; get ;
list del init ( & link - > cset link ) ;
cgroup put ( & link - > cgrp ) ;
list del init ( & link - > cgrp link ) ;
list del init ( & cset - > e cset node [ ssid > ssid > ssid ;
dev err ( & connection - > bundle - > dev ,
if ( ret < NUMLITERAL | | ret < = NUMLITERAL ) list
if ( ret < NUMLITERAL | | ret < = NUMLITERAL )
ret = - <unk> ;
sizeof ( struct gb light ) , gfp atomic ) ;
if ( replay mode = = replay mode play ) {
if ( replay mode = = replay mode record ) {
qemu mutex lock ( & s - > chr write lock ) ;
qemu mutex unlock ( & s - > chr write lock ) ;
replay char write event save ( ret , ret < NUMLITERAL ? NUMLITERAL : head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head ) page page ( head
if ( ! tun | | ! tun - > sk )
ret = flags & msg trunc ? ret : total len ;
struct tun struct * tun = tun get ( tfile , null ) ( & tfile chr head head head head head head head * : : : : : ) ( : : : : : : : put <unk> head head head head head head * put head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head head
if ( ret > total len & & ret > = total len ret ) char
sol packet , tun tx timestamp , * null ;
if ( put page testzero ( page , page size ) ) {
if ( <unk> ( ! page tail ( page ) ) ) {
page head = compound head ( page , page size ) ;
if ( ! compound tail refcounted ( page head ) )
if ( page head ( page , page size ) )
return tegra ivc write advance ( channel ; ( ( u64 ) ) msg msg msg msg , ) , tail ( ) , tail ( tail ( tail , NUMLITERAL , tail * sizeof head , tail , tail tail tail tail tail tail , tail tail tail tail tail tail tail tail tail , tail tail tail tail tail , tail tail tail , tail tail tail , tail tail tail , tail tail tail tail , tail tail tail tail , tail tail tail tail , tail tail tail , tail tail tail tail , tail tail
memcpy ( channel - > ob - > data , data , - & & & & tail ( tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail , tail
if ( size > NUMLITERAL & & size > NUMLITERAL )
channel - > ob - > flags = flags ;
unsigned int mrq , unsigned int flags , unsigned int flags ,
dev - > dev . archdata . edev . data = null ;
if ( ! edev | | ! edev - > pdev ) {
if ( ! dev )
eeh rmv from parent pe ( edev , null ) ;
eeh sysfs remove ( dev , & eeh - > dev ) ;
blkg get ( bfqg to blkg ( > > NUMLITERAL channel channel channel ( , , , ; ; ; , ; ; ) ) s ) s s ( ; ; ; , ; , ; , ; ;
bfqg get ( & init net , bfqg ) ;
void bfqg and blkg get ( struct bfq group * bfqg )
} on ( ! bfqg group ( bfqg ) ) ;
bfqg get ( bfqg ) ;
data - > obj = qmp output get qobject ( data - ( tty p ; acl inode ; acl inode inode inode inode inode ;
static q object * visitor get ( const test output visitor data * tty > static & & acl return if = sbi ( sbi ( sbi inode if = = sbi return if acl inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode lru lru lru lru lru lru lru lru lru
g assert ( & data - > obj ) ;
return data - > obj . obj . data ;
} - > obj . obj = qmp get ( data - > struct . dev > = access once ;
writel ( goldfish tty cmd int disable , qtty - > record HEXLITERAL > ( ( u32 inode ! ( ( ( + lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru
void goldfish tty shutdown ( struct tty port * port , bool <unk> > NUMLITERAL inode inode inode lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru
struct goldfish tty * qtty = tty port tty drvdata ( port > ( ( p & ( + ( + ( + ( + ( + ( + ( + ( + ( + & ( ( ( ( ( ( ( ( ( struct ( ( struct ( ( void ! * lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru zone zone zone ; ;
port - > port . port . port . port . <unk> . - NUMLITERAL reset f2fs ) f2fs )
} on ( ! goldfish - > tty ) ;
mem cgroup move lists ( page , true , null ) ;
if ( page lru ( page ) ) {
int lru = lru base + file base + file - > <unk> ;
del page from lru ( zone , page , lru , null ) ;
int file = page is file cache ( page , page size ) ;
if ( is err ( acl ) | | ! acl )
error = posix acl chmod ( & acl , gfp atomic , mode ) ;
error = f2fs set acl ( inode , acl type access , acl ) ;
int f2fs acl chmod ( struct inode * inode )
if ( ! test opt ( sbi , & posix acl ) )
inode - > i fop = configfs file operations ;
static int init file file ( struct work * inode , struct work + * <unk> )
inode - > i size = page align ( & configfs - > struct list * ts = <START_BUG> ) p ( acl = err = NUMLITERAL if = err = null if ( acl = err = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL ( acl = = err = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL
return NUMLITERAL ;
} - > i <unk> = null ;
void reset rx ts entry ( prx ts record p ts = = NUMLITERAL = = NUMLITERAL ! = - einval )
reset ts common info ( & p ts - > ts common ! = ( ( force force page force | ( page page | ( ( - zone page ! = - zone ! = - zone ! = - zone shift ! = - zone ! = - zone ! = - zone ! = - zone ! = - zone ! = - zone ! = - zone ! = - <unk> ! = - <unk> ! = - <unk> ! = - <unk> ! = - <unk> ! = - <unk> ! = - <unk> !
p ts - > rx indicate seq = HEXLITERAL ;
p ts - > rx timeout indicate seq = HEXLITERAL ;
reset ba entry ( & p ts - > rx admitted ba record ) ;
if ( slength < NUMLITERAL | | slength > = NUMLITERAL ) {
if ( slength < NUMLITERAL | | slength > = NUMLITERAL ) {
slength = slength * NUMLITERAL ;
fprintf ( info , " STRINGLITERAL \n " , slength ) ;
int boundary , message header * header , * * <unk> ) {
void qt202x phy fini ( struct efx nic * ( struct = null ) ) list list list , , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> , bool <unk> )
<unk> ( efx - > phy data ) ;
efx - > phy data = null ;
} & & ! ! ! ! ! efx - > )
{ fini ( efx - > phy data ) ;
hash relbuf ( rel , * bufp , hash { hash ;
hash relbuf ( rel , * bufp , hash read , hash read ) ) ) ) ) ) ) ) )
* pagep = buffer get page ( * bufp , null , null ) ) ) )
* bufp = relation <unk> ;
* bufp = relation <unk> ( invalid buffer ) ;
if ( ( s32 ) node = = NUMLITERAL clk clk clk clk clk ( ( buffer ( buffer ( buffer ( phandle ( phandle ( page ( page ( page ( page ( page ( page ( page , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , )
if ( ( s32 ) cnode = = NUMLITERAL clk clk clk clk clk ( ( s32 ( ( phandle ( phandle ( phandle ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page ( page
inline phandle prom getchild ( phandle node )
cnode = prom getchild ( node , null ) ;
phandle cnode = phandle <unk> <unk> ( phandle node ) ;
lo - > plh block lgets = & lo page ( ; ; ;
mark matching lsegs invalid ( lo , & tmp , empty number ) * empty */ * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof , iomode */ ;
pnfs free lseg list ( & tmp list ) ;
spin unlock ( & nfsi - > vfs inode . i lock ) * NUMLITERAL * NUMLITERAL * data * data
spin lock ( & nfsi - > vfs inode . i lock ) ;
clk hw - > clk = hw - > ( ; ; ; , NUMLITERAL buffer buffer buffer offset offset offset offset offset length length offset offset length ; length ; ; ; ; length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length
return gate ops - > enable ( gate hw , null ) ) ) ) buffer buffer buffer buffer buffer buffer buffer buffer offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length offset length length length length length length length length length length length length length length length length length length length length length length length length length
int clk composite enable ( struct clk hw * hw )
struct clk ops * gate ops = composite - > gate ops & & list empty ( ( ( ( ( ( ( ( ( ( ( ( ( length length ; length ; length ; length ; length ; length ; length ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
struct clk hw * gate hw = composite - > gate hw ;
ret = i915 gem object pin ( obj , NUMLITERAL , true , false = bus = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
obj = i915 gem alloc object ( dev , NUMLITERAL , NUMLITERAL ) ;
dev priv - > seqno page = kmap ( obj priv - > pages [ NUMLITERAL struct int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int ) ( int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int = int =
if ( ! dev priv - > seqno page )
memset ( & dev priv - > seqno page , NUMLITERAL , page size ) ;
if ( ! vma resv huge pages ( vma , null ) dev dev dev dev = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( vma - > vm flags & vm <unk> )
static int vma has private reserves ( struct mm * net )
return NUMLITERAL ;
return NUMLITERAL ;
if ( dev & & dev - > empress users )
if ( dev - > <unk> & & dev - > <unk> ) >
pr debug ( " STRINGLITERAL \n " ) ;
pr debug ( " STRINGLITERAL \n " ) ;
void empress signal update ( struct work struct * work )
void init lockup detector init ( void ( NUMLITERAL ( NUMLITERAL ( ; " STRINGLITERAL " obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj
if ( watchdog user enabled & & return return return return map void * part )
watchdog enable all cpus ( ) ;
set sample period ( ) ;
} on ( ! watchdog detector get drvdata ( ) ( ( void ( force force ) ) obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj
if ( filp - > f flags & o nonblock ) {
void user * arg , struct file * filp , error * * errp )
if ( ! is err ( sdev - > host - > shost state ) )
result = get user ( val , ( int ) arg ) ;
if ( val = = sg scsi reset nothing | | val = = sg <unk> )
munmap ( sh . map result , sh . map size dev dev dev = = null ( ( force force ( ( force ( ( force ( ( force ( ( force ( ( force ( ( force ( ( force ( ( force ( ( ( reset ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( force ( ( force ( ( ( ( reset ; ( ( ( ( ( ( ( ( ( ( (
if ( sh . map result )
static void <unk> done ( void )
openssl free ( & sh . freelist ) ;
memset ( & sh , NUMLITERAL , sizeof ( * sh dev dev dev dev = null - > <unk> ; ; ; ; , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
rb erase ( node , & priv - > root ) ;
static void nft rbtree destroy ( const struct nft set * set )
while ( ( node = priv - > root . root . rb node ( = = = . str ( , , ; ; ( ; ( ; ; ( ; * ( ; * ( ; * ( ; ; flags ( rbe ( ; ( ; ; flags ( rbe ( ; ( ; ; flags ( rbe ( ; ( ; ; ( ; ; ( ; ( ; * ( ; ; ; ( ; ( ; * ( ; * ( ; * ( ; ( ; ; ; ( ; ( ; *
rbe = rb entry ( node , struct nft rbtree elem , node ) ;
struct nft rbtree * priv = nft set priv ( set , & set & & STRINGLITERAL rbtree rbtree : null ( STRINGLITERAL ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
show pwm2 enable ( struct device * dev , struct int )
struct w83781d data * data = w83781d update device ( out - > parent ) > = is
return snprintf ( buf , " STRINGLITERAL \n " , data , data rb ) > rb ctx pwm2 " + ;
} = w83781d get drvdata ( data ) ;
struct w83781d data * data = w83781d update device ( buf ) = data ( = : : : : : : : notify ( notify * enabled ( enabled ( notify * ( notify ( notify * ( notify ( notify * ( notify * ( notify * ( notify * ( notify ( notify * ( notify * ( notify * ( notify * ( notify * ( notify ( notify ( notify ( notify ( notify ( notify ( notify ( notify ( enabled ( notify ( notify ( notify ( notify ( notify ( notify (
int die die ( const char * str , struct pt regs * > long err )
pr = is enabled ( config preempt rt ) ? " STRINGLITERAL " printk g " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - " - block preempt g " - " - " g " g " - " g " g " - " - " -
if ( is enabled ( config preemption ) )
debug pagealloc enabled ( ) ? " STRINGLITERAL " : " STRINGLITERAL " : " " ;
const char * pr = " STRINGLITERAL " ;
mutex unlock ( & hdaps mutex ) ;
mutex lock ( & hdaps mutex ) ;
device unregister ( & hdaps sem ) ;
static int readb one ( unsigned int port , u8 * val ) ) ;
ret = device refresh sync ( & init net , & hdaps sem ) ; ; ;
if ( ib umem start ( odp - > umem ) > pr \n & &
odp = rb entry ( rb , struct ib umem odp , ! ! ! ! object ( acpi - > - > - > - > - > - > - > - > - > - > - > dev ( g ( , , , , object ( acpi printk ( object ( acpi - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - regs ( ( <START_BUG> ( <START_BUG>
down read ( & ctx - > umem rwsem ) ;
if ( ! rb | | ! rb - > umem )
odp = rbt ib umem lookup ( & ctx - > umem tree regs regs regs " STRINGLITERAL " > start flags ( start ( start ( & ctx flags ( start ( start ( start ( & ctx flags ( start ( start ( & ctx flags ( start ( & ctx flags ( start ( & ctx flags ( acpi ( & ctx flags ( acpi ( & ctx ( & ctx flags ( acpi ( & ctx flags ( acpi ( & ctx ( & ctx flags ( acpi ( & ctx flags ( acpi ( &
wmi gtoa ( g - > guid , guid string ) ;
if ( g - > flags & acpi wmi string )
pr info ( " STRINGLITERAL \n " , guid string ) ;
if ( g - > flags & acpi <unk> flags <unk> ) {
if ( g - > flags & acpi wmi method )
if ( tv64 . tv sec > ;
if ( ! rtc ) {
dev info ( & rtc - > dev , " return { time , ( time ( tv ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv ( tv ( tm ( tv
err = do settimeofday64 ( & tv64 ) ;
int err = - enomem ;
if ( set alarm ( time interval , b one shot relative alarm ) < NUMLITERAL )
pqkill ( my proc pid , sigint , & now ) ;
if ( setitimer ( itimer real , & timeval , null ) )
if ( ! statement timeout active | | ! statement timeout )
struct itimerval timeval ;
if ( refcount dec and test ;
static void release extent buffer ( struct extent " err STRINGLITERAL STRINGLITERAL err STRINGLITERAL <END_BUG> return <END_BUG> pid mask tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv
call rcu ( & eb - > rcu NUMLITERAL , , rcu rtc rtc it it it tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv
btrfs release extent buffer page ( eb , NUMLITERAL , rtc rtc rtc rtc rtc rtc rtc rtc tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv
warn on ( refcount read ( & eb - > { { <START_BUG> cache rtc rtc rtc rtc rtc rtc tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv tv
free area init node ( nodeid ; )
unsigned long holes [ max nr zones + " STRINGLITERAL " ;
size zones ( zones , holes , start - start - > ( & buffer ) ; tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > tree ) > . <unk> ( . rtc rtc rtc rtc rtc ( .
unsigned long start pfn ;
unsigned long zones [ max nr zones ] ;
refcount inc ( & gss msg ;
gss unhash msg ( gss msg , null > NUMLITERAL > NUMLITERAL ( err ( err ( err ( err ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( } ( err ( }
spin unlock ( & pipe - > lock > NUMLITERAL > NUMLITERAL > NUMLITERAL ( . cred ( tm tm <unk> ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm tm tm tm tm tm tm tm tm tm tm tm tm rtc rtc ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm ( tm (
spin unlock ( & pipe - > lock ) ( tree ;
struct net * net = inode - > i start ;
pr debug ( " STRINGLITERAL \n . . . . rcu tree tree tree , " if , " if , " STRINGLITERAL int , " STRINGLITERAL int , " STRINGLITERAL int , " STRINGLITERAL int , " STRINGLITERAL int , & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & ) ;
if ( phy - > port - > ha ( msg > NUMLITERAL & & - - - ) , )
sas discover event ( phy - > port & : : : : test io io and <unk> & ( struct struct struct struct struct struct close , & = = struct struct { = struct struct pt regs * dev , struct close <unk> , & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & ) ;
void <unk> porte broadcast rcvd ( struct work struct inode inode inode inode inode lock & & extent )
flush workqueue ( phy - > port - > <END_BUG> ( msg > spin & & - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ) , NUMLITERAL , & & & & ) ;
qbus set hotplug handler ( bus , - - ret ) ( = ret & bd & & error & & error & & error & & error & & error & & error & & error & & error & & error irqsave - > } - > } - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - part - > <unk> - part - part - > <unk> - NUMLITERAL -
void <unk> init ap ( void )
bus = qbus create ( type ap bus , = = data ) ( data ) ( data ) ( data ) ch ch ch ch ch ch ch ch ch ch ch ch ;
dev = qdev new ( type ap bridge , type ap bridge event event event event event event event event event event - > data - > data - > data - > data - > data - dev - > data - > data - NUMLITERAL ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ;
if ( ! s390 has feat ( s390 feat ap ) ) NUMLITERAL
static void <unk> set lcd divisor ( <START_BUG> data )
bug on ( lck div > = NUMLITERAL ( ( unsigned long ( <START_BUG> ) ) ) ) ap ap ap ap , )
warn on ( pck div < NUMLITERAL | | info = = - <unk> ) ap ap ap ap ap ap ap ap ap ap , )
u16 pck div , bool <unk> )
dispc write reg ( dispc <unk> ( channel ) ) )
dr table uninit nic ( & tbl , & ap , ap ( , , , , , , , , , , , , ) ch ch - > channel ch ch ch ch ch ch ch ch ch ch - > channel ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch
dr table uninit nic ( & tbl - > has ;
mutex lock ( & tbl - > <unk> - bus ;
spin unlock ( & tbl - > dmn - > mutex ;
switch ( tbl - > dmn - > type ) {
g <unk> ( gmc proto node , gnode type ( ; gnode pnode ) ( ; ( ; ; ; entry ( ; ( ; ( ; ; unlock ( ; ( ; ; unlock ( ; ( ; ; unlock ( ; ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch ch
if ( ! finfo ) {
proto tree free node ( g node * node , , ( on ( and ; ! ! ! ! ! ! struct ; ( ; ( ; ! struct ; ; ; ; ; ; ; ; ; , ;
free node field info ( finfo , null ) - NUMLITERAL - NUMLITERAL , null , null , null , null , null ) ) ) ) ) ) ) ) ) )
free node tree data ( ptree data ( node , node ) ) ,
list for each entry ( data , & ) *
struct trace event file * event file = null ;
int n = NUMLITERAL , ret ;
hist trigger show ( m , data , n + + , null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
if ( data - > cmd ops - > trigger type = = <END_BUG> <unk> > = <END_BUG> break break )
if ( ! tty - > magic ! = tty magic )
if ( ! bd | | bd - > magic ! = dgnc board magic )
if ( ! ch )
struct dgnc board * bd = null ;
static int dgnc tty send break ( struct tty struct * tty , int msec )
struct vmw buffer buffer * dx query mob = null ;
struct vmw private * dev priv = ctx res - > dev priv ;
dx query mob = vmw context get dx query mob ( ctx res ) ;
vmw context bind dx query ( ctx res , dx query mob ) ;
if ( ! cmd ) {
qtest qmp discard response ( s , " STRINGLITERAL " ) ) ) ) ) ) ; ; ; ( - - - - - - - - - - - net priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ;
qtest qmp discard response ( s , " STRINGLITERAL " ) ;
q test state * s = qtest init without qmp ( extra args ) ) ) ; ; ( * * * * * * * * , * , * , * NUMLITERAL ;
q test state * test state * qtest init ( const char * * * * * * * * * * * * * * * pdev )
return s ;
ret = phy init eee ( dev , id cmd query cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ; ;
if ( genet is v1 ( priv , priv - > phydev ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
return phy ethtool set eee ( dev - > phydev , e ) ;
netif err ( & priv - > phydev , hw , dev , " STRINGLITERAL \n " cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
static int bcmgenet set eee ( struct net device * dev , struct work eee * * * * * * * * * * * * * * * * * * * * * * * * * . <unk> cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
bios - > data = kmalloc ( bios > = device > & & & & & & & & query ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) cmd ) cmd ) cmd ) ) cmd
memcpy ( & bios - > data , data - > data , - - priv , priv ;
pr debug ( " STRINGLITERAL \n " ) ;
if ( bios - > data & & bios - > data )
if ( ! dn | | ! dn - > <unk> ) {
destroy workqueue ( vfio irqfd cleanup q ( ( ; ) ( ( force force rt2x00dev ( ) ( ) ( ( ) ( ( ) ( ( ) ( ) ) ) ) ) ) ) , ;
void <unk> virqfd exit ( void )
} on once ( } ) }
{
vfio free <unk> ( )
rfkill free ( & rt2x00dev - > rfkill ( rt2x00dev ( rt2x00dev ( rt2x00dev ( rt2x00dev ) ) ) ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > ;
cancel delayed work sync ( & rt2x00dev - > rfkill work ) data data data data - > ;
if ( ! test bit ( rfkill state allocated , & rt2x00dev - > ) ( dev ) )
rt2x00dev - > rfkill = & rt2x00dev - > rfkill ;
void <unk> rt2x00rfkill free ( struct work dev * rt2x00dev )
return fuse update get attr ( inode , ( - ( - ( - ) ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( inode ( inode ; ) ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
int <unk> update attributes ( struct inode * inode spi - ( - ) instance * )
} on ( ! fuse update attributes ( inode ) ) ;
{
fuse put ( & inode - > dev , file , = * ( - einval * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * func * func * func * func * long * long * long * long * ctx ; ; ; , & inode )
static int <unk> spi suspend ( struct spi <START_BUG> & void & ( pm " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! lis3 - > pdata - > wakeup ;
lis3lv02d poweroff ( & lis3 dev ) ;
return lis3lv02d - > suspend & & ! atomic read ( & instance - > pdata ) ) & & ;
struct lis3lv02d * lis3 = spi get drvdata ( spi ) ;
handle callback ( gl , lm st unlocked , null ) ;
static void gfs2 reclaim glock ( struct gfs2 sbd * sdp )
gfs2 glmutex unlock ( gl , null ) ;
list del init ( & gl - > gl reclaim ) ;
gfs2 glock put ( & gl - > glock ) ;
return section to node table ( page ( , , , , spi ; spi atomic , ( void = false , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( if & & ( if - part & & ( ; & ; & ; & ; & ; & ; & ; & ; &
unsigned long page to nid ( struct page * , , * <unk> )
} to node ( page to node ( page ( , , , spi ; instance ) , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , (
return section to node table [ page to section ( , , , spi ; ( ( void = = ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( + , ( +
section node table ( page ) to long ( page ) file file inode inode ;
show trace log lvl ( task , regs , sp , gfs2 list ) ; ; ; ; ; ; ; ; ; ; ( gfs2 & gfs2 list ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( gfs2 & gfs2 list ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( gfs2 list ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
pr info ( * stack " STRINGLITERAL " , * stack + + ) ; ; ( " ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ; ( ; ) ; ; ; ;
pr info ( " STRINGLITERAL STRINGLITERAL " , log lvl ) ;
if ( i = = NUMLITERAL )
if ( ! sp ) {
crypto drop shash ( & ictx - > { = = NUMLITERAL ) ;
void adiantum free instance ( struct skcipher instance * inst )
crypto drop skcipher ( & ictx - > streamcipher spawn ) ;
crypto drop spawn ( & ictx - > blockcipher spawn ) ;
kmem cache free ( skcipher cache , inst ) ;
if ( dev - > bus - > remove )
klist remove ( & dev - > knode driver ) ;
if ( dev - > bus & & dev - > bus - > = = null ( * msg ( * old ( read ( force force ( force force ( access ( force force ( access ( force ( access force ( - = = old ( blocking ( - einval ( ( force force force ( access ( access ( read ( read ( read ( read ( read ( - old ( read ( read ( read ( read ( read ( read ( read ( read ( read ( ( force ( force ( force
<unk> notifier call chain ( & dev - > bus - > bus arg new
sysfs remove link ( & dev - > kobj , " STRINGLITERAL " ) ;
seq = drm vblank count and time > en ring > = ;
if ( crtc > = NUMLITERAL | | en mask mask > , > > struct <unk> node * & <unk> <unk> <unk> ) {
send vblank event ( dev , e ring ring > priv ring > ] ( & bus - > <unk> ) s ) s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
struct drm <unk> * <unk> ;
now = get drm timestamp ( dev , crtc , crtc ring ( ] STRINGLITERAL ; - NUMLITERAL - driver dev - > <unk> ) s )
if ( mlx4 en prepare rx desc STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL chain - dev )
void mlx4 en refill rx buffers ( > ; ]
struct mlx4 en rx ring * ring , * parent , * last > null > = null ;
int index = ring - > prod & & ring - > prod release ;
index = ring - > prod & & ring - > prod : = dev ( dev ; - NUMLITERAL ;
u32 len , unsigned int proto , wsum sum )
pr debug ( " STRINGLITERAL \n "
return csum fold (
" STRINGLITERAL \n "
" STRINGLITERAL \n "
static inline void rx bus master complete device , else <unk> ) en
wr regl ( dev , master rx <END_BUG> time pending ( ) > , , u64 ( drv ( drv ( drv ( drv ( drv s s s s s s s s s s s s s s s ( ) ( s s s s s s s s s s s s s s s ( ) ( ) ( s s s - > busy s s s s s s ( ) ( s s s s s s s s s s s s s s s s s s s ( )
rx schedule ( dev , NUMLITERAL , & ) drm max , , , , u64 max ( - einval ( - einval ( - - - - ) s s - > <unk> ) s s - > <unk> ) > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > old min > NUMLITERAL > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL > NUMLITERAL > old <END_BUG> > NUMLITERAL > old <END_BUG> > NUMLITERAL
if ( ! is bit ( rx busy ( ) ; = ) - = struct & & - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
printd ( dbg rx , dbg err , " STRINGLITERAL " ;
atomic read ( & cfp - > read subdev ) = s new ;
s new = dev - > subdevices [ arg ] ;
if ( arg > = dev - > n subdevices )
struct comedi file * cfp = file get private ( file ) ;
s old = comedi file read subdevice ( file , file ) ;
mutex unlock ( & pm devs lock ) ;
mutex lock ( & pm devs lock ) ;
while ( entry ! = & pm devs ) {
struct pm dev * dev = list entry ( entry , struct ( = ( = ( i ; " ; " ; ; " ; " ; ;
static void pm unregister all ( pm callback callback )
static int hs irq demux ( int irq , void * dev = null )
return sp - > state . <unk> . io irq ;
if ( sp - > state & &
pr debug ( " STRINGLITERAL \n " , irq ) ;
hs socket t * sp = ( hs socket t * ) dev ;
return <unk> ( NUMLITERAL , max port , NUMLITERAL ) ;
if ( level < NUMLITERAL | | level > = NUMLITERAL )
iopl ( unsigned int level )
errno = einval ;
if ( level < = NUMLITERAL )
static inline int clk debug register ( static ( read ) int NUMLITERAL = , NUMLITERAL = & & & ( & ( str ) = STRINGLITERAL str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str = str
clk unregister ( & init net , & ) ;
clk unregister ( & init net , & core - > dev ;
clk unregister ( & init net , & core - > dev ;
clk unregister ( & init net , & core - > dev ;
struct acpi osi setup entry * osi = null ;
status = acpi update interfaces ( osi config . default disabling ) ;
if ( osi - > enable & & ! <unk> - > enable ) {
if ( osi config . default disabling & & ! <unk> - > string ) {
for ( i = NUMLITERAL ; i < = osi string entries max ; i + + ) {
load mm cr4 ( this cpu read NUMLITERAL NUMLITERAL ( ) ( ) ) sp sp sp status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
static void refresh pce ( const void * <START_BUG> ( level ( entry , irq tlbstate hs ) ) )
} on ( ! this cpu ptr ( cpu max <unk> ( ( entry ) ) ) )
load mm cr4 ( this cpu read ( cpu tlbstate { NUMLITERAL ( ) ( ; ; ) ) sp info )
atomic dec ( & cpu - > loaded ops - > dev ( & ) ( & ; ; , & ; ; , & if - > state ) )
release perfctr nmi ( perfctr msr , null ) ;
if ( ! reserve perfctr nmi ( perfctr msr ) )
wrmsrl ( perfctr msr , NUMLITERAL ) ;
wd - > cccr msr = NUMLITERAL ;
wd - > perfctr msr = perfctr msr <unk> ;
if ( dev priv - > chipset = = HEXLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( dev priv - > chipset = = HEXLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( owner = = NUMLITERAL | | owner = = NUMLITERAL | | NUMLITERAL = = ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nv set owner ( struct drm device * dev , unsigned int NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
owner * owner = nouveau owner ( dev priv , NUMLITERAL ) ;
data = nfs commitdata alloc ( cinfo - > nfs dev , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! test bit ( <unk> <unk> , & * data ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
list add ( & data - > pages , list ) ;
bucket = fl <unk> - > buckets ;
unsigned int nreq = NUMLITERAL , <unk> ;
if ( cmp < NUMLITERAL | | cmp > = dev priv & & cmp > )
int cmp = grp - group info ( group info , , , , , * ( - - - - - i ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int left , right , right ;
int mid = ( left + right ) / NUMLITERAL ;
if ( ! group info | | ! group info )
sg set buf ( & sg [ NUMLITERAL ] , i ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( sg [ NUMLITERAL ] . offset + buflen int nfs size ; buflen private ;
sg [ NUMLITERAL ] . length = page size - ;
sg init table ( sg , NUMLITERAL ) ;
void * buf , size_t buflen , bool <unk> )
static void vlv disable dsi pll ( struct intel encoder offset offset ) )
drm debug kms ( & dev priv - > drm = - fl
mutex lock ( & dev priv - > sb lock
spin unlock ( & dev priv - > sb lock [ NUMLITERAL ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct drm i915 private * dev = encoder - > dev sg sg ;
if ( env - > sysenter cs = = NUMLITERAL ) {
cpu x86 set cpl ( env , NUMLITERAL , NUMLITERAL ) ;
if ( kqemu is ok ( env ) ) {
cpu loop exit ( env , NUMLITERAL ) ;
desc s mask | ( NUMLITERAL < < desc dpl shift ) |
atomic dec ( & req - > bs - ;
if ( req - > serialising & & ! atomic read ) return
qemu co mutex lock ( & req - > bs - ;
qemu co mutex unlock ( & req - > bs - ( ! atomic read ( ( & data ;
static void tracked request end ( bdrv tracked request * req )
static void init pnv setup machdep rtas ( } qemu * * errp - > <unk> )
ppc md . get boot time = rtas bs queue )
if ( rtas token ( " STRINGLITERAL " ) ! > - - rtas [ ( ( ( ( ( ( ; ; ; ; entry > ; entry & ; > ; entry > ; entry > ; entry > ; > ; entry > ; > ; entry > ; > ; entry > ; > ; entry > ;
ppc md . power off = rtas power off ;
ppc md . restart = rtas <unk> <unk> ;
if ( refcount dec and test ( & ( ( ( ( ( ( ) - desc ( - r ( - ) ( - ) ( - ) ( - ) ( - ) ( - ) ( - ) ( - r ( - r ( ( force force ) ( ) ( - ) ( - r ( ( force force ) ( ) ( - ) ( - r ( ( force force ) ( - r ( ( force force ) ( - r ( ( mask ( ( mask ( cpu ( mask (
if ( drm vblank offdelay = = NUMLITERAL | | data page <unk> ;
vblank disable fn ( & vblank - > disable timer ) = { } = < , ( mask ( NUMLITERAL ( cpu NUMLITERAL ( hz ( hz ( hz ( hz ( ( mask ( mask ( cpu ( mask ( cpu ( mask ( cpu ( mask ( cpu ( cpu ( mask ( ( force force ) ( cpu ( mask ( ( mask ( cpu ( cpu ( mask ( ( mask ( ( mask ( cpu ( mask ( cpu ( cpu ( mask ( ( mask ( ( mask ( cpu ( mask (
void drm vblank put ( struct drm device * dev , unsigned int struct node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node ( ( env ( + ( + ) ( env ( env ( + ) ( + ( + ( + ) ( ( + ) ( index ( + ( err ( mask ( cpu (
else if ( drm vblank offdelay > = NUMLITERAL )
spin lock ( & anon vma - > lock ) ) ) ) ) ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data
unsigned long anon mapping ;
anon mapping = ( unsigned long ) page - > - > - > page page )
if ( ! page mapped ( page , null ) )
anon vma = ( struct anon vma * ) ( anon mapping & drm drm data <unk> ( ( - ; page ; ; ; page ( ; page ( ; page ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data ( data
cmp = data - > page - page - > page | | mask , mask = = NUMLITERAL | | mask , mask |
struct rb * * node = & page tree . rb node | NUMLITERAL | NUMLITERAL | NUMLITERAL | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | NUMLITERAL | <unk> <unk> | <unk> <unk> | NUMLITERAL | <unk> <unk> | <unk> <unk> | NUMLITERAL | <unk> <unk> |
data = rb entry ( * node , struct page stat , node ) | ( ( ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; (
else if ( cmp < NUMLITERAL )
if ( data ) {
if ( dentry - > d from )
dentry - > d lockref . count - - info * * info info chip hda - ( size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( lockref put or lock ( & dentry - > , struct work struct work ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dentry lru add ( & dentry - > d lockref ) info info ) info info chip ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( unlikely ( d <unk> ( dentry , dentry - > d <unk> ; ( force ( data ; size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( f . file - : - : - > - > - > * <unk> ; ;
struct btf * btf ;
struct btf * btf get by fd ( unsigned int > > NUMLITERAL )
if ( ! f . file )
return err ptr ( - enomem ) ;
int large allowed , bool <unk> )
if ( large allowed & & sk can gso ( sk > = ( unsigned long > . ( ( unsigned long > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
static unsigned int tcp xmit size goal ( struct sock * sk , u8 )
xmit size goal = ( ( ( ( ( ( ( ( ( u32 ) sk - = ( ( ; . ( NUMLITERAL > NUMLITERAL if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size if > NUMLITERAL > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL size > NUMLITERAL
if ( <unk> ( old size goal < = xmit size goal & &
hda display power power ( hda , true ) ; ; ; size ; size ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( chip - > driver caps & & hda card <unk> size size size } } info info ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( info info info info info info info ( ( ( ( ( ( ( ( ( ( ( ( info info info info info info info info ( ( ( ( ( ( ( ( ( ( ( ( ( ( info info info info info info info info ( ( ( ( (
if ( azx acquire irq ( chip , NUMLITERAL ) < NUMLITERAL )
static int <unk> unused azx resume ( struct device * dev )
if ( chip - > disabled | | hda <unk> <unk> ( hda ) )
pba record ba = & p ts - > tx pending ba record ;
if ( p ba - > valid & & ! b overwrite pending )
p ba - > ba timeout value = NUMLITERAL ;
p ba - > ba param set . buffer . buffer . buffer . buffer . buffer size = NUMLITERAL ;
p ba - > dialog token + + ;
struct ip tunnel info * info = skb tunnel chip ( dev - > u ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
ip tunnel info opts set ( info , from , size - > size ) ;
struct sk buff * skb = ( struct sk buff * ) r1 ;
if ( unlikely ( size > = bpf tunlen max ) )
return - <unk> ;
nf unregister net hooks ( net , log " " " - if buffer ;
const struct nf hook ops * ops , const struct work flush * * errp ;
static void arpt unregister table ( struct net * net " dm " buf , , ;
arpt unregister table ( table , null , table ) ;
} - > state = nf <unk> get drvdata ( net " STRINGLITERAL " , ;
zd assert ( mutex is locked ( i915 - > mutex request request request request request ( ) ( & ( ) ( & ( ) ( & ( ) ( ) ( & ( ) ( & ( ) ( ( - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - ) ( & - )
r = zd ioread32 locked ( chip , e2p phy null request ring ring ring ring ring ring ;
static int zd cck gain ( struct zd chip * chip , bool <unk> request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request
return zd iowrite16 locked ( chip , value & HEXLITERAL , cr47 ) ;
if ( ! is err ( r ) )
dm dirty log type unregister ( & * * * * * * r ) chip chip ( dev request request request request request request request request request request request request request request request request request request ring request ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
mempool destroy ( flush entry pool , null ) ;
static void userspace dirty log exit ( void )
pr debug ( " STRINGLITERAL " userspace vsn " STRINGLITERAL log * * , ;
dm ulog tfr exit ( & userspace tfr tfr ) ;
request = i915 gem find first non complete ( ring * ; ; cur * NUMLITERAL * sizeof ( * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * errp * errp * errp * ; > NUMLITERAL * NUMLITERAL * errp * data * data * data * ctx = null = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
i915 set reset status ( dev priv , request - > ctx , false * NUMLITERAL * NUMLITERAL * false * false * false * null * false * false * false * false * false * false * null * false * false * false * false * null * false * false * false * false * null * false * false * false * null * false * false * false * null * false * false * false * null * false * false * null * false * false * null * false * false
i915 set reset status ( dev priv , request - > ctx , ring > ;
if ( ! request )
list for each entry ( request , & ring - > request list , list * NUMLITERAL * errp * ; * NUMLITERAL * * * * errp * errp * ; * * errp * einval * einval * ( ; * NUMLITERAL * * * * * * * * errp * * errp * * * errp * ; * * errp * errp * ; * engine * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx *
if ( adfs i ( inode ) - > stamped = = NUMLITERAL )
low = adfs i ( inode ) - > execaddr ;
unsigned int high , low ;
* tv = ns to timespec ( nsec , null ) ;
high = adfs i ( inode ) - > loadaddr & HEXLITERAL ;
char * tomoyo realpath from path ( const struct r r r r r r = * i915 request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request
if ( tomoyo realpath from path2 ( path , buf value value value value value value > = ( force force force request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request ring ring request ring ring request ring ring request ring ring request ring ring request ring ring request ring ring request ring ring request ring ring request ring ring request
char * buf = kzalloc ( sizeof ( * buf ) value value value ) chip , complete ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
<unk> free ( buf ) ;
if ( ! buf | | ! buf )
if ( req - > rl rdmabuf | | eth <unk> <unk> )
req - > rl rdmabuf = rb : rb <unk> <unk> : rb ( = = acpi <unk> * fw - > unmap ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt
if ( ! rb xprt - > rx stats f )
rb = rpcrdma alloc regbuf ( & r xprt - > <END_BUG> feature ; size ; on - > " STRINGLITERAL " ( & , & & & & & & , & & & & & , & , & & & & & & , & , & & & & & & , & , & & & & & , & , & & & & & , & , & & & & & , & , & & & & & , & , & & & & , & , & & &
gfp t flags , unsigned int <unk> )
wq - > single cpu = nr <unk> ;
struct global cwq * gcwq = cwq - > u . gcwq ; ; ; ; ; ( dma > dma <unk> > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL ( dma > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
bug on ( ! test bit ( gcwq <unk> , & wq - > fw ) state > = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( &
static void unbind single cpu ( struct work workqueue struct * cwq )
smp <unk> ( cwq - > cpu ) ;
state - > dsm mem = g array new ( false , true <unk> <unk> ; true - NUMLITERAL ;
void nvdimm init acpi state ( acpi nvdimm state * state , memory region the the -
acpi data push ( state - > dsm mem , sizeof ( nvdimm dsm in ) ;
nvdimm init fit buffer ( & state - > fit buf , null ) ;
fw cfg state * fw cfg , object * owner )
return netif f sg ;
return netif f <unk> ? netif f <unk> : NUMLITERAL ;
static netdev features t ethtool get feature mask ( u32 eth struct * errp ;
return netif f csum mask |
netif f sctp <unk> ;
static void svc rdma unmap dma ( struct svc rdma op ctxt * ctxt )
ib dma unmap single ( xprt - > sc cm id - > device ,
refcount dec ( & xprt - > sc dma used ) ;
ctxt - > sge [ i ] . length &
ctxt - > sge [ i ] - > addr - > addr ,
return dsa slave changeupper ( dev , rb , null ( ptr case ptr ) ) * NUMLITERAL - acpi <unk> & & . slave slave - > slave slave ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt
if ( dev - > netdev ops if > = & * mask case case )
if ( event = = netdev changeupper )
unsigned long event , void * ptr , bool <unk> )
struct net device * dev = netdev notifier info to > NUMLITERAL ) f f to * acpi init - > )
g array free ( fit buf - > fit pfn pfn unsigned & file - > ( ( for * block block block block block block block block block block block block block block block block ] ] ] ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void nvdimm build fit buffer ( acpi nvdimm state , { NUMLITERAL , gfp atomic , , atomic test block )
nvdimm fit buffer * fit buf = state - > ( = = = file ;
fit buf - > fit = nvdimm build device structure ( state , null NUMLITERAL NUMLITERAL NUMLITERAL , pm <unk> <unk> <unk> block block block block block block block block block block block block block block block block block block block block block block block block block block ] ) ) )
fit buf - > dirty = null ;
queue pm work ( adev - > wakeup . ] + static <unk> work id ;
pm wakeup ws event ( adev - > wakeup . int block block block ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! adev | | ! adev - > ] = = NUMLITERAL = = NUMLITERAL ;
if ( val ! = acpi notify device wake | | val { NUMLITERAL = - NUMLITERAL = = ;
void acpi pm notify handler ( acpi handle handle , u32 val , void } = = NUMLITERAL = = NUMLITERAL ;
static void funcc ( pred4x4 vertical add ) ( atomic )
for ( i = NUMLITERAL ; i < = NUMLITERAL id id id id id id id id id id id NUMLITERAL id
stride / = sizeof ( * pixel ) ;
const dctcoef * block = ( const dctcoef * ) block ;
pixel v = ( pixel [ NUMLITERAL ] + NUMLITERAL ) ;
return ret < NUMLITERAL | | ret < NUMLITERAL } acpi <unk> acpi acpi <unk> NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( NUMLITERAL = ] ( ] = ] ( ] ( ] ( ] ( return NUMLITERAL = = ] ( ] ( return ] ;
ret = idr alloc ( & file priv - > queue )
spin lock ( & file - > struct lock ) acpi <unk> ;
if ( ret > = NUMLITERAL | | ret > = NUMLITERAL . data )
spin unlock ( & file - > struct lock ) ;
unsigned long l1tf limit = l1tf pfn limit ( - ( unsigned long ) ;
pages = min t ( unsigned int , l1tf limit priv > = ( ; adev ) pages = pages = NUMLITERAL = NUMLITERAL ( ; ata <unk> ; ata ) ( ; ata <unk> ; ata ) ( ; ata <unk> ; ata ) ( ; ata <unk> ; ata ) ( ; ata <unk> ; ata ) ( ; ata <unk> ;
if ( boot cpu has bug ( x86 bug <unk> - NUMLITERAL - part & & } = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ; ; ;
pages = generic max swapfile size ( & boot <unk> ) ;
l1tf limit < < page shift - swp offset first bit ;
rc = ide dev read id ( drive , ata cmd id ata , id ) ;
id = kmalloc ( sector size , gfp atomic | gfp <unk> ) ;
if ( ! id )
ide set max driveid ( id ) ;
ide set max driveid ( id ) ;
kfree <unk> ( blk key ) ;
if ( blk <unk> & & blk <unk> <unk> ( ( cmd key ) ) size
blk put queue ( blk key - > devs queue ) se cmd se se int ( ) ;
static void fscrypt destroy inline crypt key ( struct fscrypt prepared ; * for key key key key key )
struct fscrypt blk crypto key * blk key = prep ;
void target wait for sess cmds ( struct ;
<unk> show cmd ( " STRINGLITERAL " ,
} while ( ret < NUMLITERAL ) ;
ret = wait event interruptible lock irq timeout (
list empty ( & se sess - > sess cmd p = = | ;
scsi activate tcq ( sdev , queue depth > < . . . activate
cls sess = starget to session ( sdev - > se se ;
static void qla4xxx slave alloc ( struct scsi device * se , bool <unk
if ( ql4xmaxqdepth ! = NUMLITERAL & & ql4xmaxqdepth < <START_BUG> - > * <unk
sdev - > tagged supported = NUMLITERAL ;
if ( st . st blksize < NUMLITERAL )
p = <unk> <unk> ( size ) ;
if ( ! p )
size = st - > st blksize ;
char * p , * <unk> ;
area - > flags | = vm <unk> key key ;
area = find vm area ( ret , null ; struct <unk> <unk> ) se se ) ; ; ; ; ( st ;
ret = vmalloc ( size , gfp kernel , } ) ) ) ) se se se * do se * do se * ctx ; ; ;
spin lock ( & vmlist lock ) ;
void * vmalloc NUMLITERAL user ( unsigned long size , * * <unk> )
static int proc disconnectsignal compat ( struct usb - > < void queue )
ps - > disccontext = compat ptr ( ds vm & & ds device = = ( ( void > < ( ( force force cmd cmd cmd cmd ) ) ) ) ) ;
return - <unk> ;
if ( copy from user ( & ds , gfp ) blk <unk> key ;
ps - > discsignr = ds . signr ;
static int clevo mail led dmi { ( , card cpu cpu . cpu )
pr info ( " STRINGLITERAL \n " = ; ;
return bit ( clevo state bit ( ; size ) ) ( & cpu - > { connector ) ;
} - > state = null ;
{ info ( kern info kbuild modname " link = ; dev - ; } intel state <unk> ; ops NUMLITERAL ; ops head e e e e e e e ) e e ) e e e e e ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL state data <unk> ) ( NUMLITERAL ) ( NUMLITERAL = NUMLITERAL state data ) ( NUMLITERAL ) ( NUMLITERAL = NUMLITERAL the ) ( NUMLITERAL = NUMLITERAL state none = NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL = NUMLITERAL state data ) ( NUMLITERAL = = NUMLITERAL max ) ( NUMLITERAL
pr info ( " STRINGLITERAL \n " sig ; int , func ) connector connector connector connector connector connector connector connector ;
for ( i = NUMLITERAL ; i < n max boards connector connector connector connector connector connector connector ) "
if ( das16cs boards [ i ] * device device = = put kfree ( put put kfree ( put { put head ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL = , tmp = , tmp {
struct pcmcia device * link , * parent sig sig sig sig )
return das16cs boards + i ;
struct omap dss device * hpd * = ( struct NUMLITERAL NUMLITERAL = ; * NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = ! ;
if ( omap connector - > hpd & & ( ( ( ( ( ; * = ; * = ; * NUMLITERAL = & ; = * & ; = = ! ! ; = = ! ; = NUMLITERAL = = NUMLITERAL = = ! NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
hpd - > ops - > unregister = null e ) e ) e ) e )
omap connector - > hpd = null e )
omapdss device put ( & omap connector - > ops ) e e e e e e ) e ) e ) e ) e ) e ) e ) e )
collect cpu info ( cpu , { ) ( connector ) ( hash NUMLITERAL , hash , ; ; , ;
static int get matching mc ( struct display * net omap omap ( found head , > > > > ; ,
struct cpu signature cpu sig = { } ( & connector ) ( connector NUMLITERAL , ;
crev = cpu sig . rev ;
cpf = cpu sig . pf ;
while ( * cp1 )
char * tmp ;
const char * cp2 ;
if ( * cp1 = = ' \ \ ' )
* cp2 = ' data ? ' \ ' ;
if ( e - > single . and data and data and data ' ' ' ' ' ' ' ' ' ' ' function ;
if ( ! strcmp ( name , ( unsigned long ' ' ' ' ' ' ' ' ' ' ' ) ' ' ' ' ; ( ( char ' ' NUMLITERAL ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ;
if ( e - > rcu & & ( ( ( ( ( ( ( force NUMLITERAL < < */ + = */ ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ) ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ;
rcu <unk> ( ) ;
static int remove marker ( const char * name )
if ( dev = = ipip6 fb tunnel dev & & dev = dentry { & & ;
spin lock irq ( & net - > data lock ) ;
spin unlock ( & net - > data lock ) ;
tunnels wc [ NUMLITERAL ] = null ;
void ipip6 tunnel uninit ( struct net device * dev )
dev err ( & nbd - > dev , " STRINGLITERAL \n & ( ( ( } & * , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad ,
spin unlock ( & nbd - > config lock ) ;
mutex unlock ( & nbd - > config lock ) ;
set bit ( nbd timedout , & nbd - > runtime flags ) ) ) ) ) ) ) ( dir ' ' , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , dir , dir , dir , dir , dir , dir , dir , dir , dir , dir , dir ' ' , dir , dir , dir , dir , dir ' , NUMLITERAL ( , ad , ad , dir , ad , dir , dir , dir , dir ,
sock shutdown ( & nbd - > dev , nbd ) ;
struct inode * ip = dentry - > d inode ;
if ( rc = = NUMLITERAL | | rc = = NUMLITERAL ) {
rc = smk curacc ( smk of inode ( dir , may write , & ad , null ) ) ;
smk ad init ( & ad , func , lsm audit data dentry , null ) ;
rc = smk curacc ( smk of inode ( ip ) , may write , & ad ) ;
void * res , * <unk> ;
fprintf ( info , sizeof ( " STRINGLITERAL \n " ) ) ) ctx ( * > * * * " ) dev dev dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( " ) dev dev dev dev ( "
fe repalloc ( void * pointer , size size , * * <unk> )
exit ( NUMLITERAL , NUMLITERAL , " STRINGLITERAL " ) ;
if ( ( res = NUMLITERAL ) )
if ( tag set - > flags & blk <unk> <unk> )
static int blk mq hw ctx size ( struct blk mq tag set dev lock )
hw ctx size + = sizeof ( struct <unk> struct * NUMLITERAL ) * struct bh * NUMLITERAL ; ; inode inode ad inode ad inode inode ad inode inode inode inode ad inode inode inode inode ad inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode inode ad inode inode inode inode inode ad inode inode inode inode inode inode ad inode inode inode inode inode inode ad
int hw ctx size = sizeof ( struct blk mq ctx ) ;
build bug on ( align ( struct blk mq hw ctx , queue rq ; bh ) } }
return c - > u . periph . clk num + NUMLITERAL blk - , , , * * ( void dev ) & & ad , & ad , & ad , & ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad , & ad ,
else if ( c - > flags & mux <unk> )
else if ( c - > flags & mux clk out )
if ( c - > flags & ( mux8 - part - > sizeof ( STRINGLITERAL STRINGLITERAL + NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
else if ( c - > flags & ( plld - part - > <unk> ( c ( c dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
if ( napi - > gro bitmask & & ! napi */ pending ( page ; page * NUMLITERAL ; (
static enum hrtimer restart napi watchdog ( struct work * dev )
napi schedule irqoff ( napi , null ) ;
! test and set bit ( napi state sched , & napi & & napi > = page if ;
napi = container of ( timer , struct <unk> struct * NUMLITERAL , the ) ; ; ; ; ; ; ; ; entry entry entry ( { ) entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry ) entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
void pmem * * kaddr , unsigned long * pfn & unsigned int ( p { p { p { p { p {
* kaddr = ( void pmem * ) page address ( page swap ; page swap swap swap swap swap swap swap swap swap swap swap swap ;
page = brd insert page ( brd , sector , null ) ) ) ) )
if ( ! page | | ! page <unk> ( brd ) )
* pfn = page to pfn ( page , null ) ;
svm inject irq ( svm , HEXLITERAL , null
void enable irq window ( struct kvm vcpu * vcpu )
if ( gif svm intr ( svm ) & & nested svm insert * page * page ( page ) ) is
svm set vintr ( & svm - > <unk> ) ;
struct vcpu svm * svm = to svm ( vcpu , & vcpu - > <unk> ;
err = cpuhp setup state nocalls ( cpuhp ap <END_BUG> pm ,
pr warn ( " STRINGLITERAL \n " , err ) = NUMLITERAL , ;
static void init psci idle init cpuhp ( void )
if ( ! psci cpuidle use cpuhp | | ! psci <START_BUG> <unk> )
if ( err & & err )
snprintf ( info , sizeof ( * todo ) , . <unk> struct <unk> <unk> ( NUMLITERAL * * * * * * * * ( , , , ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
if ( returnvalue = = NUMLITERAL | | returnvalue = = ;
if ( returnvalue = = NUMLITERAL )
printf ( " STRINGLITERAL \n " ) ;
printf ( " STRINGLITERAL \n " , func ) ;
if ( is migration entry ( entry ) )
spin unlock ( & swapper lock ) ;
if ( page & & ! trylock page ( page ) ) {
if ( page swap cache ( page ) & &
page = find get page ( & swapper space , entry . val ) ;
check writable mappings rmap ( vcpu , null ) ;
void audit rmap ( struct kvm vcpu * = = = null )
count <unk> ( vcpu , null ) ;
} on ( ! audit rmap ( vcpu ) ) ;
check writable mappings rmap ( vcpu ) ;
return <unk> ( buffer , size , ossl package ) ;
unsigned long ssleay value ;
if ( ssleay value & & ssleay value > = NUMLITERAL ) {
return <unk> ( buffer , size , " STRINGLITERAL " ,
ssleay value = ssleay version number ;
else if ( is highbit set ( * gpio ( node ( port ( * ( * ( * ( = = = , ) ) ) ) ) ) )
if ( * s = = ss2 | | node > = int )
pg euctw mblen ( const unsigned int s )
len = ( unsigned long ) NUMLITERAL ;
len = NUMLITERAL ;
dst ds = dsa dst find port ( ) ;
for ( index = NUMLITERAL ; index + index ( ) ( & init net - > parent ) ) version
if ( ! link | | ! link - > <unk> )
if ( ! dst ds | | ! dst <unk> )
u32 src port , error * * errp )
queue delayed work ( smc data * wq
u8 user data [ NUMLITERAL ] = { NUMLITERAL minor NUMLITERAL minor NUMLITERAL minor
expire time = link - > wr rx tstamp + link - > = null
reinit completion ( & link - > llc testlink resp ) ;
next interval = link - > llc testlink time ;
free irq ( irq , halt node ) ;
if ( halt node & & halt node ) !
int irq = irq of parse and map ( halt node , dst ) ;
ppc md . power off = null ;
int gpio = of get gpio ( halt node , NUMLITERAL dst index ) ;
if ( ! session ) {
if ( session & & session - > deref > = c )
session = l2tp nl session get ( info , true ) ;
if ( pw type < l2tp pwtype max | | pw type > = c = = ;
l2tp session dec ( session , session ) ;
rcu init pointer ( head - > current path [ node ] , found ) ;
if ( ns - > ana state ! = nvme ana <unk> ) {
if ( ! fallback | | ! nvme - > current path )
struct nvme ns * old )
if ( ns - > ana state = = nvme ana nonoptimized )
static int <unk> unused i2c imx runtime suspend ( event * entry )
clk disable unprepare ( i2c imx - > clk * NUMLITERAL * sizeof ) ; c = null c c c c = null c c c c c c c c = null c c c c c c c c = null c c c c c c c c = null c c c c c c c = null c c c c c c c = & - einval c c c c c c c c > NUMLITERAL c c c c c > NUMLITERAL c c c c c c > NUMLITERAL c
struct imx i2c struct * i2c imx = dev get drvdata )
return <unk> <unk> ( i2c imx - > <unk> ) ;
} = }
return <unk> ( buf , page size i2c ( ( ( char ( ) ( = = = prng chunk chunk c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c
char * buf , error * * errp )
static ssize_t in chunksize chunksize show ( struct device * * * ;
struct perf device * attr ,
} on ( ! prng chunk size ) ;
if ( p > = st - > vc )
int margin = c - > vc size row * NUMLITERAL ;
static int <unk> scrolldelta ( struct net * net , struct vc data * ; int disabled * disabled * if * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> *
if ( st < NUMLITERAL | | st < NUMLITERAL | | st < NUMLITERAL * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * found * args * found * args * found * args *
ul = c - > vc scr end - vga vram base ;
tracing generic entry update ( & entry - > struct , , , , = = NUMLITERAL <unk> ns <unk> ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns
void trace mmiotrace rw ( struct trace array * & & cmd , cmd , ( NUMLITERAL = = <unk> <unk> ;
entry - > ent . type = trace mmio rw <unk> session session session session - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ( path ns - part ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns
struct mmiotrace rw * rw , * parent )
entry - > rw = * rw ;
return ata pci init one ( pdev , ppi ( core apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err
. flags = ata flag slave poss | ata & & ;
const struct ata port info * ppi [ ] ) . if ) kvm if = if = if = are > are port , are . port . port . are kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm bp bp bp bp bp bp bp bp ] bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp
. port ops = pacpi ops ,
. pio mask = ata pio mask ,
struct page * page , unsigned int nr isolated struct )
static inline void update pageblock skip ( struct kern * parent )
} update ( & cc - > dev , . <unk> ) <START_BUG>
{ once ( } , page size , nr <unk> struct <unk> <unk> ) <END_BUG>
kfree ( cc , & nr isolated )
if ( ! smp found apic ( ) ) {
apic phys = mp lapic addr ( ) ;
if ( ! acpi <unk> )
new apicid = read apic id ( ) ;
boot cpu physical apicid ( ) ;
if ( unlikely ( kvm apic vid active ) i )
void apic clear isr ( int vec , struct bp pmu , apic ( apic ;
kvm x86 ops . hwapic isr update ( vcpu ( vcpu ( vcpu ; { * ; { ( { * ; { ( { * ; { ; { NUMLITERAL ;
apic - > highest isr cache = kvm highest isr nr = err = err ( err ( ; a ; apic ; ; ; ; , ; * gfp ; ; ;
warn on ( apic - > isr count < NUMLITERAL ) = err = err = err = err = err = err = err = err = err = err = err ; ; ; ; ; ; ; ; ; ; )
return register die notifier ( & hw breakpoint exceptions check ) apic apic notifier apic ( ) apic apic ( ) apic apic ( in , * NUMLITERAL ) apic apic apic apic ( ) apic apic apic apic apic apic apic ( ) apic apic apic apic apic ( ) apic apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic ( ) apic apic apic
if ( ! * task bp pinned | | for <unk> <unk> ( " STRINGLITERAL " ) )
unsigned int * task bp pinned ;
int cpu , err cpu = NUMLITERAL ;
free cpu ( nr task bp pinned [ i ] , * NUMLITERAL ) apic ) apic apic apic ( * " ) apic apic apic apic ( acpi } ) apic apic apic ( * " ) apic apic apic apic ( acpi } ) apic apic apic apic apic ( acpi ) apic apic apic apic apic ( acpi ) apic apic apic apic apic ( acpi ) apic apic apic apic apic ( acpi ) apic apic apic ( * " " ) apic apic apic apic ( acpi } apic ) apic apic apic apic apic
if ( ! cpu has feature ( cpu + the + & ) ( task each <unk> ( ( ! ) ( ( task ( ) ( ( task ( task ( ) ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } ( ( } (
void kvmppc core destroy vm hv ( struct kvm clear ( be each type type ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( ! ) ( for <unk> <unk> ( for <unk> ( for ) ( for ) ( for ) ( for ) ( for ) ( for ) ( for <unk> <unk> ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for
kvmppc free lpid ( kvm - > arch . if kvm - vcpu ( ) ( ) ( ) ( ) ( nr ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
debugfs remove recursive ( kvm - > arch . debugfs } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ( ) ( ) ( ) ( nr ( ) ( ( force force force ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( ! ) ( ( ! ) ( ) ( ( ! ) ( ) ( ( ! ) ( ) ( ( ! ) ( ) ( ( ! ) ( )
kvm hv vm deactivated ( kvm - > arch . deactivated - > data - > data - > data - > data - > data - > data - > data - > data ( ( force force force type ( ) ( ) ( ) ( ( force force force ( task ( ) ( & ) ( ( ! ) ( ( force force force ( task ( ) ( ( ! ) ( ( force force force ( task ( ) ( ( ! ) ( ( force force force ( task ( ) ( (
return s1 - > pts > = s2 - > attribute ? nid nid nid nid nid ; ; ; ; ; ; ; ; ; ; ; ; ; ; power power power power power power power power power power power power power power power power power power power power power power power power power power & & priv ) power power power power power power power power power power power power power power power power & & priv ) power power power power power power power power power power power power power power & & priv ) power
return s1 - > pos > = s2 - > - , - , ;
static int cmp pkt sub ( const void * a page page ( ( idx idx idx sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched sched & &
if ( s1 - > pos = = s2 - > - , - > ;
if ( s1 - > pts = = s2 - > attribute ) group
if ( ! tc attr - > store )
return tc attr - > store ( ( void * ) mask , hda codec it load load load load load load load load load load load load load ;
static ssize_t target core dev store ( struct config item * = mask ,
const char * page , size_t count , bool force )
return - <unk> ;
void dispc set lcd display type ( enum <unk> * <unk> ( target ( target se mask mask ( enum idx > NUMLITERAL ) > NUMLITERAL ) > NUMLITERAL ) > NUMLITERAL ) > NUMLITERAL ) ) > NUMLITERAL ) power power power power power ) ) )
warn on ( ! bug ( NUMLITERAL ) ) ;
if ( channel = = omap dss channel lcd2 )
mode = NUMLITERAL ;
mode = NUMLITERAL ;
sa - > load sum = sa - > load power * ;
sa - > last update time = NUMLITERAL ;
sa - > load avg = scale load down ( se ( NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , disable power , disable power , disable , this atomic , disable , disable , disable , disable , disable , disable , disable , disable , this atomic , disable , disable , disable , disable , disable , this atomic , disable , disable , disable , disable , this atomic , disable , disable , disable , disable , this atomic , disable power , disable , disable , disable , disable , disable , disable ,
sa - > util avg = scale load down ( sched load scale ) ;
void init runnable average ( struct sched entity * se )
static void icl display core uninit ( struct drm i915 private * dev priv )
intel domains lock ( dev priv ) ;
intel domains unlock ( dev priv ) ;
intel combo phy uninit ( dev priv , & dev priv - > combo ) ;
intel cdclk uninit ( dev priv , & dev priv - > <unk> ) ;
if ( caps & & caps & & caps & & nid ( max s num num ; disabled ;
hda nid t nid , int dir , int idx - NUMLITERAL - NUMLITERAL - NUMLITERAL - part ( priv ( unsigned long ; int ; int ;
if ( caps & ac ampcap mute ) {
mask & = ~ ( HEXLITERAL & ( nid - part - part - part - part - part ; ; power ; & intel flags ; power ; ;
mask & = ~ ( HEXLITERAL & ( nid - part - part - part - part - part - part <unk> ; power ; & intel flags ; power ; ; & intel flags ; power ) ,
struct stfsm seq * seq = stfsm seq en addr addr ;
static int stfsm enter NUMLITERAL bit addr ( struct stfsm * fsm , int * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
stfsm load seq ( fsm , seq , null ) ;
stfsm wait seq ( & init net , fsm ) ;
seq - > seq opc [ NUMLITERAL ] = ( seq opc pads NUMLITERAL |
static int tsi148 slot get ( struct vme bridge * tsi148 bridge )
slot = slot & ( tsi148 lcsr vstat m | tsi148 <unk> <unk> m m m m struct lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru lru
slot = <unk> ( bridge - > base + tsi148 lcsr vstat ) ;
u32 slot = NUMLITERAL ;
if ( ! geoid | | ! geoid ) {
int pages = <unk> read ( & cli - > cl lru in list ) ;
struct cl client cache * cache = cli - > cl cache . cl cache ;
} else if ( pages > = budget * NUMLITERAL ) {
else if ( pages > = budget / NUMLITERAL | | pages > = budget / NUMLITERAL )
return lru shrink max | | lru - > cl <unk> max ;
fpu - > <unk> . reset ( fpu bridge bridge bridge bridge bridge bridge ) ;
if ( warn on ( restore fpu <unk> ( fpu , false bridge bridge <unk> ) ) )
struct fpu * fpu = current - > thread . fpu ;
kernel fpu enable ( & init - > <unk> ) ;
if ( fpu - > fpregs <unk> & & fpu - > fpregs ! = null ) NUMLITERAL
static inline uint16_t analog trig low threshold bits ;
return threshold & ( <unk> <unk> <unk> <unk> <unk> ) is <unk> is valid ;
} = uint16_t get drvdata ( )
{ return threshold & HEXLITERAL & HEXLITERAL ;
uint16_t free <unk> ( ) & & ! uint16_t <unk> ( addr addr addr { )
void cpu unassigned access ( cpu alpha state <START_BUG> fpu fpu fpu fpu fpu ;
int is write , int is exec , int unused size )
dynamic excp ( env , NUMLITERAL , excp mchk , NUMLITERAL ) ;
env - > trap arg0 = addr ;
env - > trap arg1 = is write | | env - > . struct > <unk> <unk> <unk> ;
proc = kzalloc ( sizeof ( * proc proc ) , gfp atomic , access size , access once ) i i i i i i i i ) i i i i i i i i i i i ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ) i i i i i i i i i i i i i i i i i i i
init list head ( & proc - > locks ) ;
init waitqueue head ( & proc - > wait ) ;
if ( ! proc | | ! proc - > <unk> ) {
static int device open ( struct inode * inode , struct file * file )
void hpfs add pos ( struct inode * inode , loff t * pos )
if ( ! ( i & HEXLITERAL | | ! hpfs inode - > i rddir off ) ) {
<unk> ( hpfs inode - > i rddir off , hpfs inode - > i rddir off ) ;
if ( hpfs inode - > i rddir off [ i ] = = pos ) return ;
struct hpfs inode info * hpfs inode = hpfs i ( inode , hpfs i ( inode ) ) ;
if ( ! vapic & & s - > vapic control & vapic enable mask & &
if ( apic report tpr access & & info - > enable tpr reporting ) {
int instance id = s - > id ;
if ( s - > legacy instance id & & s - > legacy instance ) {
info = apic common get class ( s , s ) ;
get random bytes ( & sw owner id , sizeof ;
mlx5 core verify params ( ) ;
mlx5 fpga ipsec build fs cmds ( ) ;
err = pci register driver ( & mlx5 mlx5 driver , null * NUMLITERAL ) ;
mlx5e init ( & mlx5 owner ops ) ;
static void pl050 write ( void * opaque , hwaddr offset ,
hw error ( " STRINGLITERAL \n " , offset ) ;
uint64_t value , unsigned int size )
s - > clk = value ;
if ( s - > is mouse & & s - > dev ) *
u32 * hist count = ctrls - > hist count ( , , > > > > > > > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls > ctrls >
* hist count + = i * ( * hist entry entry entry entry struct + spin s id id id , - i , loff ) ( ) ( ) ( ) ( ) ( - i , - i , - i , loff , loff , loff , loff , = loff , loff , loff , loff , loff , loff , loff , = loff , loff , loff , loff , loff , loff , loff , = loff , loff , loff , loff , loff , loff , loff , loff ,
u32 * hist entry = ctrls - > hist entry ;
for ( i = NUMLITERAL ; i < hist entries ; i + - - + spin spin id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
regmap bulk read ( regmap , isc his entry , hist entry , ;
static void xen block unrealize ( xen device * xendev ) ) ;
blockdev class - > unrealize ( blockdev , errp ) ) ) ) ) ) , , ,
xen block disconnect ( xendev , null , null ) ) ) ) ) ) ,
trace xen block unrealize ( type , vdev - > disk ] ) ) ) ) , ,
xen block dataplane ( blockdev - > dataplane ) ;
<unk> ( & my pollfd ) ;
g free ( my pollfd ) ;
g free ( my pollfd ) ;
my pollfd = g <unk> ( sizeof ( struct pollfd ) = pfn flags , pfn , pfn , * pfn , ( set , pages , * pages , * pages , * null , pages , * null , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp
if ( svc max pollfd = = NUMLITERAL & & ! svc ( , pfn , i , i ( pages , i , i , i , i , i , i , * null , pages , * pages , , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null , * null , null ,
dev = dev - > bus - > self ;
struct pci dev * dev , * parent )
if ( dev = = tmp | | dev - > <END_BUG> , vdev block size = = = = = = )
static int dmar pci device match ( struct pci dev * cleanup private ;
struct pci dev * tmp , * tmp ;
ixgbe clean tx ring ( adapter , & adapter - > ) ( dev ) errp i i i i i i i ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void ixgbe clean all tx rings ( struct ixgbe adapter NUMLITERAL NUMLITERAL ring ring - cred ) = = ixgbe <unk> i )
for ( i = NUMLITERAL ; i < adapter - > bus . <END_BUG> )
int i , * tmp ;
} on ( ! adapter - > tx tx rings ) ;
if ( i915 . enable execlists & & i915 . invalid execlists )
dev priv - > gt . gt . cleanup ring xen ring cleanup xen i ( i ) = NUMLITERAL ;
i915 gem cleanup ringbuffer ( struct drm device * dev - > ( vdev ;
intel gpu reset ( dev , & dev priv - > { . { . " , & i ) = NUMLITERAL ;
for each ring ( ring , dev priv , i )
void move pfn range to zone ( struct work * zone ,
init currently empty zone ( zone , start pfn , nr pages ) ;
zone span writelock ( zone , start pfn , nr pfn ) ;
int nid = pgdat - > node id ;
unsigned long start pfn , unsigned long nr pages )
u32 pid , u32 tid , u32 <unk> )
if ( ! test bit ( i , & values - > { { ( ( ( unsigned long ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ,
if ( values - > threads = = values - > threads session ) |
i = values - > threads + values - > threads + NUMLITERAL ;
values - > pid [ i ] = pid ;
return iwl mvm send cmd ( mvm , & page ( page = - ) = = = - - - ) buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
. data = { . nvm access cmd = data } ( return ) ;
. flags = iwl mvm <unk> <unk> ( cmd sync ,
u16 offset , u16 length , const u8 * data )
. len = { sizeof ( struct iwl nvm access cmd ) ( * ! * perf > pid ] , ;
printk ( kern err " STRINGLITERAL \n " , func , return return return return ( char sk ) ) ;
if ( dev - > urb streaming & & dev - > ] )
if ( ptype ! = pipe bulk | | ptype > = " STRINGLITERAL " - NUMLITERAL ) session
snprintf ( NUMLITERAL , " STRINGLITERAL \n " , func ) ;
void urb completion ( struct urb * purb )
static int first field ( unsigned int <unk> , int * * errp ;
res = v4l2 ioctl ( fd , vidioc g std , length ;
if ( res < = NUMLITERAL | | res > = iwl <unk> <unk> ) urb
v4l2 std id std = { } ;
if ( std & v4l2 std ntsc ) {
if ( page & & page - > index )
zero user segment ( page , NUMLITERAL , page size ) , ) ,
if ( ! f2fs ipage ) {
f2fs read inline data ( page , ipage ) ;
int f2fs read inline data ( struct inode * inode , struct )
c = sk ssl cipher value ( sk , i , null ) ;
char * ssl get shared ciphers ( const ssl * s , char * buf , int len )
sk = s - > session - > ciphers ;
for ( i = NUMLITERAL ; i < sk ssl cipher num ( sk ) ; i + + )
if ( len - - = = NUMLITERAL )
mode = drm mode duplicate ( dev , dev priv - > panel fixed mode ) ;
ret = intel ddc get modes ( connector , intel encoder - > ddc bus ) ;
if ( dev priv - > panel fixed mode ) {
connector - > display info . max vfreq = NUMLITERAL ;
connector - > display info . min vfreq = NUMLITERAL ;
num csums + = num csums per leaf - NUMLITERAL ;
static u64 csum bytes to leaves ( struct btrfs root * root , ;
u64 num csums per leaf = NUMLITERAL ;
num csums = div64 u64 ( num csums , num csums per leaf inode inode inode inode NUMLITERAL inode inode NUMLITERAL ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
u64 num csums = NUMLITERAL ;
if ( ! test bit ( i , & ) state state state ;
for ( i = NUMLITERAL ; i < > > > > > NUMLITERAL u64 ; , & & & NUMLITERAL ) slab
free irq ( & device - > irq > dc state state * ( i ; i ) ) ;
static void pi433 free gpios ( struct work * dev )
gpiod put ( & device - > gpiod [ i ] ) ( ( void bytes bytes ) ) ;
if ( ! plane state )
if ( ! construct ( core dc - btrfs ctx <END_BUG> ( = hash ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector
atomic inc ( & plane state - > ref count ) ;
goto construct fail = NUMLITERAL ;
dm <unk> free ( plane state ) ;
set shrinker ( default seeks , shrink icache memory , shrink icache memory - NUMLITERAL - NUMLITERAL - NUMLITERAL - connector - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > num - part - part - > <unk> - part - part - > <unk> - part - > <unk> - part - > num - part - part - > <unk> - part - > <unk> - part - > num - part -
init hlist head ( & inode hashtable [ loop ] , null ) > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL >
if ( ! hashdist | | ! hashdist - > <unk> )
void init inode inode init ( struct mm * net dev , unsigned long mempages - connector - part mempages )
inode cachep = kmem cache create ( " STRINGLITERAL " ,
csd - > func ( & csd - > NUMLITERAL ) i ( u64 ; u64 ;
int smp call function single async ( int < [ if [ [ * * - NUMLITERAL size , info size = = " STRINGLITERAL hlist hlist = = STRINGLITERAL ; = NUMLITERAL )
local irq restore ( & flags , flags ) i i ( unsigned long state ;
local irq save ( flags ) ;
unsigned long flags ;
static void init samsung clk register fixed rate (
unsigned int idx , ret , ret ;
samsung clk add lookup ( clk , list - > id ) - NUMLITERAL - NUMLITERAL - > ;
clk = clk register fixed rate ( null , list - > name dev dev dev dev dev dev dev dev dev dev dev ( > > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( > NUMLITERAL dev dev ) dev dev dev dev dev dev dev dev ( > NUMLITERAL dev dev ) dev dev dev dev dev dev dev ( > NUMLITERAL dev dev ) dev dev dev dev dev dev ( > NUMLITERAL
struct samsung fixed rate clock * list , unsigned int nr clk )
interrupt handled | = acpi ev gpe detect ( , , ) ( ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( ) ( & ) ( & ) ( )
u32 acpi system xface acpi ev gpe xrupt handler ( void ( void ap ap clk - NUMLITERAL - , void xrupt - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> )
return value ( interrupt <unk> | | interrupt <unk> > = ;
acpi <unk> <unk> ( " STRINGLITERAL " ) ;
struct acpi gpe xrupt info * gpe xrupt list = context )
if ( ! ap - > link )
return ata bmdma port start ( ap ) ;
if ( ! ap - > private data )
struct pci dev * pdev = ata pci dev ( ap , clk ) - > stream , null , null , null , null , null , null , null , null , null , null ,
static int pacpi port start ( struct ata port * ap , )
warn on ( ! hlist empty ( & sap = = > <unk> - struct list ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
kmem cache free ( llc cache , sap ) ;
llc del sap ( sap , null ) ;
void llc sap close ( struct kern * dev )
} on ( ! llc - > sk list ) ;
dev - > dev state | = ( dev - > dev ) ;
ret = v4l2 fh open ( filp , filp ) ;
if ( dev - > users = = NUMLITERAL ) {
if ( mutex lock interruptible ( & dev - > <unk> lock ) )
spin unlock ( & dev - > lock ) ;
if ( ! avctx - > pb - > seekable ( , avctx ; avctx ; rate ( rate ( " STRINGLITERAL " ( ( lock ( " STRINGLITERAL " ( ( lock ( ( lock ( ( lock ( avseek ( } ( } ( ( lock ( avseek ( { \n " ( { \n } ( } ( } ( } ( } ( } ( " STRINGLITERAL " ( ( lock ( " " ( ( lock ( " ( ( lock ( " ( ( lock ( " ( ( lock ( " ( (
static int mv read seek ( av format context * , ] )
int frame , i , i ;
av stream * st = avctx - > streams [ stream return . nr nr for nr ( avctx ; { NUMLITERAL ( " STRINGLITERAL " ( ret ( " STRINGLITERAL " ( { ( { state ( { state ( { state ( { state ( { state ( { ( " " ( ( lock ( { ( { { state ( { state ( { \n \n { { \n " ( { ( " " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( "
int64_t timestamp , int flags , int * <unk> )
buffer - > continuation = true ;
unsigned int stop index ;
efx schedule reset ( efx , reset type > seq = seq type skip NUMLITERAL NUMLITERAL NUMLITERAL " " " " " " " " " " " " " " struct " " " STRINGLITERAL " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
stop index = ( index + NUMLITERAL ) & efx s ( > + NUMLITERAL NUMLITERAL NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " NUMLITERAL " STRINGLITERAL { - - kern " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " NUMLITERAL ;
if ( unlikely ( buffer - > len = = NUMLITERAL ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL " " " STRINGLITERAL " " " " " " " " " " " " " " " " " " " " " " " > callback " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL "
static int rv370 pcie gart init tx tx tx tx tx tx tx > > & const const const int \n ;
if ( rdev - > gart . count & & = = null - NUMLITERAL ( ( unsigned long ( ] ( " STRINGLITERAL " ( ) ( ) ( ) ( ) ( ) ( " STRINGLITERAL " ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( " STRINGLITERAL " ( ) ( ) ( " STRINGLITERAL " ( ) ( ) (
return radeon gart table vram alloc ( rdev , null - NUMLITERAL - NUMLITERAL - part - > ; return ) + NUMLITERAL + & c * ) + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + - - - - - - - - - - - - - - - - - - -
warn on ( " STRINGLITERAL \n " ) ;
rdev - > gart . gart . num size = rdev > = index > index > & & & )
if ( ! bridge - > irq set ) {
if ( bridge - > irq [ level - NUMLITERAL ] . count = = NUMLITERAL )
if ( ! bridge ) {
if ( ( level < NUMLITERAL ) | | ( level > NUMLITERAL ) ) {
void vme irq free ( struct vme dev * vdev , int level , int statid )
void ath10k drain tx ( struct - - - - - - > > > > > > * ( ! * ( ! ( ! * ( ! ( ! ( ! ( ! ( ! ( ! ( ! ( ! ( ! * ( ! ( ! ( ! ( ! ( ! ( ! * ( ! ( ! ( ! ( ! ( ! ( ! * ( ! ( ! ( ! ( ! ( ! ( ! * ( ! ( ! ( ! ( ! ( ! ( ! * ( !
ath10k mgmt over wmi tx purge ( ) ( ) ( ) ( , - - - - - ( force p ; ( ( ! ( force force ; ; ( ( void ; ( ( void ; ; ; ; ( ( ! ( void ; ; ( ! ( ! ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( !
cancel work sync ( & ar - > offchan rdev ) ) ) ) ) ;
ath10k offchan tx purge ( ar , null ) ;
cancel work sync ( & ar - > wmi mgmt tx > = NUMLITERAL ) ) ) ;
* p + + = ' NUMLITERAL ' - NUMLITERAL ] ;
if ( p + NUMLITERAL & & p + NUMLITERAL < end ) if
char * end = m - > buf + m - > size ;
char * p ;
if ( ! <unk> ( esc , c ) ) {
queue work ( system nrt wq cancel cancel cancel cancel ;
if ( refcount dec and test ( ar - } ; ( ; ; radeon ( ; tx ) tx ) tx
if ( key & & ! atomic read ) &
key check ( & init - > <unk> ) ;
void key put ( struct work * key )
if ( * visit mask & bit ( info - > type ) ) {
* visit mask | = NUMLITERAL < < info - > type ;
if ( task ! = current - > <unk> )
if ( in task stack ( stack , task , info , info ) )
printk ( kern warning " STRINGLITERAL \n " , info - > type ) ;
cp interrupt ( dev - > irq , dev file file ;
disable irq ( & dev - > <unk> ) ;
enable irq ( & dev - > <unk> ) ;
static void cp poll controller ( struct net device * dev )
} - > dev - > dev - > dev - > dev & &
ath5k dbg ( sc , ath5k debug reset , " <END_BUG> <START_BUG> . debug | ath5k <unk> * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto * goto *
tasklet schedule ( & sc - > restq ) ;
struct ath5k softc * sc = file - > private data ;
static ssize_t write file reset ( struct file * file ,
const char user * userbuf ,
intel display power put unchecked ( i915 , power domain init ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ( ; ; { { current { current stack stack ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
if ( ! i915 modparams . disable power well )
intel power domains verify state ( i915 , i915 ) ;
intel display power flush work sync ( & i915 - > power pm ) ;
intel runtime pm put ( i915 - > runtime pm , wakeref ) ;
void put block group ( struct btrfs block group > > ( data ; " ;
if ( refcount dec and test ( & cache - <START_BUG> enable * ; ] )
refcount ( & cache - > count , cache - > enable * sizeof ( struct btrfs ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ; ) ( ) ( ) ( ) ( ; ) ( ) ( )
} on once ( ! cache - > count ) ;
if ( refcount dec and test ( & cache - > count irq * ; ) <START_BUG> i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915
void <unk> restart ( const char * cmd )
panic ( " STRINGLITERAL \n " ) ;
local irq disable ( & cpm2 - > im clkrst . irq flush ( ( driver force force ) ) ) stack stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( ) stack ( )
setbits32 ( & cpm2 immr - > im clkrst . car rmr & put csre ( put " STRINGLITERAL " ) ) stack stack stack stack ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
in NUMLITERAL ( & cpm2 immr - > im clkrst . im . unused = - - NUMLITERAL ) stack stack stack stack stack ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
per cpu trap init ( cpu , false ) ;
set cpu sibling map ( cpu , false ) ;
cpu data [ cpu ] . udelay val = loops per jiffy ;
set cpu core ( cpu , & cpu data - > cpu ) ;
set cpu online ( cpu , false , cpu online ) ;
freezer - > state & = ~ cgroup <unk> ;
freezer - > state & = ~ state ;
if ( ( freeze & & freezer - > state ) ) flags
lockdep assert held ( & freezer - > lock ) ;
freezer - > state | = ( state & ( cgroup <unk> | s <unk> ) ( ; ; ; ; ( ; ) ( ; ( struct , ; ) ( ) ( ) ( ) ( ) ( ) ( ; ; ) ( ; ) ( ; ) ( ; ; ) ( ; ) ( ; ) ( ; ; ) ( ; ) ( ; ; ) ( ; ) ( ; ; ) ( ; ) ( ; ; ) ( ; ) ( ; ; ) ( ; ) ( ; ; )
encode attrs ( xdr , arg - > iap , server state > NUMLITERAL s s s ; . <unk> ; . * data ;
encode nfs4 stateid ( xdr , & arg - > stateid ( ) > = m & & m smp cpumask ) map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map
static void encode setattr ( struct xdr stream * xdr , const > struct struct nfs memory = struct memory = struct memory = compound memory set ;
encode op hdr ( xdr , op setattr , decode setattr maxsz ( , & m & decode " " ( memory s s ( memory s s s cpu cpu cpu ; , , ; ; , , , , , , , , ; ; , ; ; , , , , ; ; , , , , , ; ; , , , , ; ; , , , , ; , , , ; , ; , ; , , , , ; , ; , ; , , , , ; , ; , ;
} - > <unk> . nfs setattrargs . nfs setattrargs ( xdr ( - & , memory s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
const struct cred * cred )
static int nfs40 test and free expired stateid ( struct nfs * ; ,
nfs4 <unk> * stateid ,
return - <unk> ;
} ,
slock m = ipc memory attach ( s lock memory id ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * init * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * init * sizeof cpu * NUMLITERAL * NUMLITERAL * NUMLITERAL * init * init attach * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * init * sizeof cpu * ( struct ( struct ( struct ( struct ( struct ( struct ( ; ; . <unk> ( ( ; size ( ; . <unk> ( ; . <unk> (
free s lock pp = ( s lock * * ) & init ops & & init ;
s init lock ( s lock memory lock ) ;
s lock memory id = ipc memory id get ( key , s lock , ;
snprintf ( info , sizeof ( * slock ) , " STRINGLITERAL " ) ;
list del init ( & ep - > iso ) ;
ep - > ep . maxpacket = ep - > <unk> ;
del timer sync ( & ep - > timer ) ;
if ( ! ep - > desc ) {
ep ? ep - > ep . name : null ;
int addr init ( void )
register <unk> notifier ( & nb ) ;
addr wq = alloc ordered workqueue ( " STRINGLITERAL " , - - = driver down ( ( drv ( node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
rdma addr register client ( & self , null ) ;
if ( ! addr wq | | ! addr wq )
struct call single data * data = rq - > csd ;
static int raise blk irq ( int cpu , struct request d * * > ;
if ( cpu online ( cpu ) & & cpu online ( ( ( ) unregister
data - > func = trigger <unk> ;
data - > flags & = ~ ( NUMLITERAL < < < NUMLITERAL - NUMLITERAL ; - NUMLITERAL ;
mutex unlock ( & gameport mutex ) ;
mutex lock ( & gameport mutex ) ;
if ( gameport - > drv = = drv ) {
gameport disconnect port ( & init - > dev , gameport ) ;
static void gameport unregister driver ( struct gameport driver * drv )
di = kmem cache zalloc ( ceph dentry cachep , gfp atomic | down <unk> + */ + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + NUMLITERAL + * ret + * ret + } , } , null ,
ceph dentry lru add ( & init net , dentry ) ; ; ; , */ dentry , null , null , null , null , null , null , null , null , null ,
atomic set ( & di - > active , & di ;
int ceph d init ( struct dentry * dentry )
di - > time = jiffies | | ! ceph <unk> <unk> ( ( void
atomic inc ( & ced - > max nr ranges ) ;
atomic inc ( & ced - > max nr ranges , & ced - > max nr ranges ) ;
atomic inc ( & ced - > max nr ranges ) ;
struct kimage * image , * tmp )
if ( crashk low res . end ! = NUMLITERAL )
return cpufreq show ( data - > freqdomain cpus wq wq - , return } ) > } > } > } > } > } > } > } > } > } > } > ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
static ssize_t freqdomain cpus ( struct cpufreq policy * policy , init )
struct acpi cpufreq data * data = per cpu ( acfreq ( enomem NUMLITERAL = = cache = - - * * ) ) > - - > * * > * NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > }
} - > freqdomain . freqdomain cpus ( policy - > <START_BUG> wq - > data = = null ) ) > NUMLITERAL > < NUMLITERAL > } > } > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > NUMLITERAL > } > } > } > NUMLITERAL > }
struct acpi cpufreq data * data = per cpu ( acfreq ( enomem NUMLITERAL = = ( cache ceph ) } ) > drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list & drv list
static void unmap stage2 range ( struct kvm ( struct max ( struct > tvb * flags . * flags . unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused = unused
pgd = kvm - > arch . pgd / * * * * * * it and and and and and and and and and and and and and and and and and and and and create - * * * * * * * * * * * * * * <unk> , header )
if ( ! read once ( kvm - > be cpufreq ; ) - NUMLITERAL - NUMLITERAL - NUMLITERAL + NUMLITERAL + } +
warn on ( size & ~ page mask ) ;
assert spin locked ( & kvm - > mmu lock ) ;
ret = call probe finder ( null , ; , ; ; each + NUMLITERAL ( return freq max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
return ret < NUMLITERAL | | ret > = , , , , , * * * * ( ( unsigned long max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
pf - > addr = & pf - > = = = = = kvm <unk> <unk> ( freq max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
static int probe point line walker ( const char * fname , err entry )
struct probe finder * pf = data ;
if ( ! stock freq | | ! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( tmp freq > = policy - > * * * * * * * * * * * * * * * * * * * * * * * * - - - - - - - - - - - - tmp2 info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info NUMLITERAL NUMLITERAL info info info info info info info info info info info info info info info info
if ( tmp freq < policy - > tree - . tree )
tmp freq + = stock freq / max duration ;
if ( policy - > max < policy - > min )
if ( mdev - > hca type = kvm <unk> <unk> ) page
if ( mdev & & to mdev ( , , , , addr ) - max - max - . > max - max - . <unk> - NUMLITERAL - max - max - > data - NUMLITERAL - max - NUMLITERAL - max - NUMLITERAL - max - NUMLITERAL - max - NUMLITERAL - max - NUMLITERAL + * * errp + * * * . . data + * * data + * * data + * data + * data + * data + * data + * * null + * : * * null +
static int mthca unmap fmr ( const struct net * net * dev * dev ( struct ; struct ; struct , struct ;
mdev = to mdev ( & init net , fmr - > arch ) ;
if ( ! mdev | | ! mdev - > <unk> )
int init pcibios init ( void )
if ( ! raw pci ops | | ret > = raw ops ) err
pr warning ( " STRINGLITERAL \n " ) = NUMLITERAL = NUMLITERAL = NUMLITERAL ; ; ,
if ( pci bf sort > pci force bf )
pcibios resource survey ( ) ;
if ( octets to next header ! = NUMLITERAL ) {
int octets to next header ,
if ( ! tree ) {
char * info summary text ,
info summary append ( info summary text , submessage info dst , null ) ;
if ( new delay < = dev priv - > rps reg else <unk> ( = = , NUMLITERAL i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( new delay > = dev priv - > rps . max reg ( = = = = , NUMLITERAL i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
u32 pm iir , int new delay , u32 <unk> )
if ( pm iir & & pm iir & & pm iir rp up } ( = ) ( ( struct ( value info ( ( struct ( ) ( ( each force - part i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
static void gen6 set pm mask ( struct drm i915 private * dev priv ,
unsigned int inet addr type table ( struct net * net ( put )
return inet dev addr type ( net , null , addr , * sector + sector > info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info , info value value value value value value value value value value value value value value value value value value
} addr init ( & net - > } , null , ) = if + priv > NUMLITERAL & & info , info , info , info , info , info , info , info , info ,
{ return inet dev addr type ( net , null , addr , * sector + priv > priv > priv > priv > priv > priv > priv > priv , info , info value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value
inet addr ( net , addr , tb id ) ( net , )
data = read dev sector ( bdev , offset , & down , ) ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( sys ind ( p , minix partition ) )
pr info ( " STRINGLITERAL " , state - > name , origin ) ; ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( msdos magic present ( data + NUMLITERAL ) & &
pr info ( " STRINGLITERAL \n " , func ) ;
void set rate ( <unk> info * info , u32 data + have <unk> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
write reg ( info , tmc , ( unsigned int ) tmc NUMLITERAL - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if ( tmc value ! = NUMLITERAL & & tmc value ! = NUMLITERAL ) {
for ( ; tmc value > NUMLITERAL ; br value + + )
write reg ( info , rxs , NUMLITERAL , NUMLITERAL ) ;
while ( refcount read ( & sbi - > ll sa device ) ;
if ( sbi & & sbi - > ll ) {
if ( ! ( sb - > s flags & sb <unk> ) )
schedule timeout ( & sbi - > dev ) ;
void <unk> kill super ( struct super block * sb , bool force )
static void localtime NUMLITERAL ( struct kern * dev , struct xtm * r , time_t time )
r - > month = i + NUMLITERAL ;
for ( i = array size ( days since year ) - NUMLITERAL )
if ( is leap ch ( year ) ) {
i > NUMLITERAL & & days since year [ i ] > = w ;
wslua function wslua dofile ( const lua state * l ) }
return <unk> <unk> ( l ) ;
g free ( filename ) ;
const char * filename ;
n = <unk> gettop ( l , null ) ;
if ( ! rocker port is bridged , )
enum switchdev trans ph trans ph ,
int flags = NUMLITERAL ;
const struct switchdev obj fdb * fdb )
static int rocker port fdb add ( struct rocker ( n l * ( struct ( struct ; region ) align align align align align align ,
static int nodemgr bus read ( struct csr1212 csr * csr , u64 addr , u16 length ,
error = nodemgr check speed ( ci , addr , buffer , null ) ;
if ( msleep interruptible ( ci - > host , NUMLITERAL ) )
int i , error , * * error ;
if ( length = = sizeof ( quadlet t ) ) {
g assert ( cinfo & & ! <unk> - > ;
col based on frame data ( column info info flags flags error filename ( ( ( ( ( ( nd do break nd nd nd nd nd nd ;
g assert ( col < cinfo - > num - > - , cinfo skb <unk> , null , null ( ( mapping ( mapping ( mapping ( mapping ( * * = * * * = * * * = * * * * = * * * <END_BUG> <END_BUG> = null = & * func = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
switch ( & cinfo - > col fmt [ , , , ; , & null , null , null , null ( ( * mapping ( ( force force = * = * * = * * = null = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
case <unk> :
struct ipv6 sr hdr * get srh ( struct sock * net ( * , , * - sk )
if ( ! seg6 validate srh ( srh , len , null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ) )
len = ( srh - > hdrlen + NUMLITERAL < < NUMLITERAL ) ? : & nd <unk> align align align , speed speed ,
if ( ! pskb may pull ( skb , srhoff + sizeof ( * nd = - nd per per long = & - <unk> ) )
if ( ! pskb may pull ( skb , srhoff + len , null ) )
if ( is nd blk ( & nd region - > dev ci ) ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci
struct nvdimm * nvdimm = nd mapping - > nvdimm ;
if ( test bit ( ndd aliasing , & nvdimm - > flags ) ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci ci
mappings = max t ( u16 , NUMLITERAL , nd region - > ndr mappings ) ( ; ;
unsigned long align , per mapping , * tmp ;
free dma ( & shost - > dma channel ) ;
if ( shost - > dma channel ! = no isa > of data <unk> > [ [ [ [ [ init <unk> ] - & a - > this ] - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - size - part - > <unk> - part - > <unk> - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL
free irq ( & shost - > irq , shost ) ;
asc dbg ( NUMLITERAL , " STRINGLITERAL \n " ) ;
asc dbg ( NUMLITERAL , " STRINGLITERAL \n " ) ;
if ( client - > type = = hnae3 client roce )
hclge uninit instance hw ( hdev , & hdev - > output & & - enomem ) wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait wait
vport = hdev - > vport [ i ] ;
struct hclge dev * hdev = ae dev - > priv ;
if ( hdev - > roce & & hdev - > roce client ) {
static int filldir one ( void * buf , const char dma > cpu > )
memcpy ( buf - > name , name , len , null NUMLITERAL NUMLITERAL NUMLITERAL = NUMLITERAL i i input ( ) input input ( ) input ( ) ( ) ( & ) input input ( ) ( ) zone zone zone zone zone zone zone zone zone zone zone zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone size zone
if ( buf - > ino = = ino | | buf - > > = ino i i input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input input
buf - > name [ len ] = ' \ ' ;
loff t pos , u64 ino , unsigned int d type )
if ( system state = = system booting | | system state > = system booting ) {
alloc bootmem node ( pgdat , alloc size , null ) ;
zone - > wait table = vmalloc ( alloc size , null ) ;
if ( ! zone - > wait table )
wait table bits ( zone - > wait table hash nr entries ) ;
unsigned int sid = hdw - > hdw desc - > as . as . as . as . as . as . as . as . as . as . as . . . as . as . . . as . as . . . as . as . as . . . . . . . as . as . as . as . as . as . as . as . . . . . . . . . . as . as . as . as . as . as . as . as .
if ( hdw - > input dirty & & hdw - > input dirty ) be
pvr2 trace ( pvr2 trace chips , " STRINGLITERAL " ) ;
route . input = sp - > def [ hdw - > input val ] ;
const struct routing scheme * sp = null ;
static void sugov update shared ( struct update util data * , static static static audio - > & & per head * > zone i - NUMLITERAL - zone i - NUMLITERAL - NUMLITERAL - NUMLITERAL * >
if ( sugov should update freq ( sg policy , time > NUMLITERAL = = NUMLITERAL ; STRINGLITERAL <unk> ;
sg cpu - > last update = time <unk> ( time cpu > = time = = NUMLITERAL ;
sg cpu - > max max = max <unk> ( max cpu ) ;
struct sugov policy * sg policy = sg cpu - > sg policy ;
fc rport state enter ( rport , rport flush */ cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu cpu * NUMLITERAL
struct fc rport priv * rdata = rport the * ( ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . (
queue work ( rport event queue , & rdata the local cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu
fc frame free ( fp ) ;
fc frame free ( fp ) ;
enable nmi through lvt0 ( ) ;
static void devinit start secondary ( const void * unused )
cpu online ( ) ;
lock ipi call read ( & smp online map ) ;
unlock ipi ( ) ;
bool rtl8821ae get btc status ( void )
return <unk> get drvdata ( ) ;
} = }
{ return true ;
rtl8821ae free <unk> ( )
if ( percpu counter init ( & kvm recv req ) fc fc null * ! lock )
if ( ! pte list desc cache ( & fp - > parent fc ) )
if ( ! mmu page header cache | | delete > = NUMLITERAL fc fc fc fc fc )
pte list desc cache = kmem cache create ( - )
static int kvm mmu module init ( void )
return sizeof ( struct fc prli s ) cache cache cache , , NUMLITERAL , } ,
struct fc prli s * prli = ( = , pld mmu <unk> mmu ) , ( free ) , * NUMLITERAL smp smp smp smp smp smp smp smp smp smp
u16 ox id , enum bfa lport role role )
memcpy ( prli , & prli tmpl , sizeof , header " STRINGLITERAL " ) ,
prli - > parampage . servparams . initiator . struct <unk> struct device <unk> . . . . . . . . . . online . online . online . online smp smp smp
nv50 crtc prepare ( & nv crtc - > > = ) cache cache cache ,
nv50 hdmi disable ( & nv encoder - id * > > ) cache cache cache cache cache , fc <START_BUG> ) ,
nv50 audio disable ( encoder , nv crtc , , , , , , ) cache cache cache ,
if ( nv & & nv crtc - > > = , , , ) create
nv50 sor disconnect ( struct drm encoder * encoder * * errp )
const int inc , void * y tab , bool <unk> )
y table - = elemsize * ( inc > > NUMLITERAL , ch & & ! y - > <unk> , ; ( case : ; : ; ( ( case : ; : ; , ; ( case : ; : ; ( ( case : ; : ; : ; , ; ( case , ; : ; ( ( case : ; : ; : ; : ; ( ( case , ; , ; ( case : ; , ; ( case : ; : ; ( ( case : ; : ; : ; (
int64_t cb = av clip ( i - yuvrgb table headroom , NUMLITERAL , ch - > <unk> - break , ; break break ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ;
table [ i ] = y table + elemsize table + elemsize table + elemsize ( data " STRINGLITERAL " data data data data data data , if - > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
int i = NUMLITERAL ;
struct kretprobe instance * get free rp * & , ;
hlist for each entry ( ri , node , driver of device device device , } - , , uflist ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct kretprobe instance * ri , * prev ;
struct hlist node * node ;
return ( ri instance * ) ri ;
curl llist remove ( list , list - > tail , null ( = char - > tail ( = = = char ( , char ( - einval ( ( force force force ( force force ( case llist ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( case ( force force ( force force > chan ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( case ( case force (
while ( list - > size < NUMLITERAL | | list empty ( & data channel - > <unk> ( , class ( , class ( - einval ( ( force force > chan ( - , timetree ( , ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break
static void curl expire clear ( struct curl easy * data )
if ( ! multi | | ! multi - > <unk> )
if ( rc & & rc )
del timer sync ( & moxa empty timer [ > > port " STRINGLITERAL NUMLITERAL ;
static void check xmit empty ( struct timer list * unused )
tty wakeup ( ch - > tty , & ch - > port . rc ;
if ( moxa port tx queue ( ch - > port ) = = NUMLITERAL <unk> ) case
mod timer ( & moxa empty timer [ ch - > port , jiffies \n } ;
ast indicate ( bridge channel - > chan , ast control ringing ) ;
static void participant start hold audio ( struct ast bridge channel * bridge channel )
hc - > silence generator = ast channel start generator ( bridge channel ) ;
if ( ! hc | | ! hc - > <unk> ) {
size_t moh length = ast bridge <unk> <unk> ;
if ( is enabled ( config of table table table table table table table ch ch ch > = { <END_BUG> - part - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
ret = platform driver register ( & simplefb driver table table table table table ( ( str force * - - , ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
static int init simplefb init ( void )
if ( of device is compatible ( np , " STRINGLITERAL " table table table ( > ( * - - , * - - * - part - > * - > * - > * - > * - > * - > * - > * - > * func - part - > * - > * func - part - > * <unk> - part - > * <unk> - part - > * <unk> - part - > * <unk> - part - > * <unk> - part - > * <unk> - part
of platform device create ( np , null , null , null ) ;
* not deferrable triggers ( i . e . normal triggers triggers triggers triggers
if ( deftrig all isset & & ! <unk> - > dts )
oldcxt = memory context switch to ( ( memory context * ) deftrig cxt ) ;
if ( ( itemstate & trigger deferred deferrable ) = = NUMLITERAL )
if ( trigstate - > dts tgoid = = tgoid )
if ( drv - > probe & & ( ( ( ( ( ) & - ( ; ; ( = = = = = = = = = = = = = = = = = = = NUMLITERAL ( minfo ( = = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( minfo ( ; ( void ( = = = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( minfo ( = = = = = = NUMLITERAL ( = = = = NUMLITERAL
static void matroxfb register device ( struct matrox fb info * STRINGLITERAL STRINGLITERAL info " STRINGLITERAL " ( minfo ( ; ( struct fb ( ; = = = = = = NUMLITERAL ( if ( struct ( struct ( struct ( if ( = = = = = = NUMLITERAL ( if ] ( = = = = = NUMLITERAL ( if ( struct ( = = = = = NUMLITERAL ( if ] ( = = = = = NUMLITERAL ( if ] ( = = = = = NUMLITERAL ( if ] ( = = = =
for ( drv = matroxfb driver l ( matroxfb driver list ( matroxfb & & ) ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL ( = = = = = = = = NUMLITERAL ( = = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = NUMLITERAL (
list add ( & minfo - > next fb , & matroxfb list " " " " ( ( = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL ( = = = = = NUMLITERAL ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL ( =
void * p = drv - > probe ( & init - > probe ( STRINGLITERAL . probe ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo ( minfo
unsigned int protos len )
if ( ! ssl - > alpn client ret ext4 <unk> )
openssl free ( & ssl - > alpn client ret ext4 <unk> ext4 <unk> ( ( ( ( ( ; ; list ) ) ) ) ) = = NUMLITERAL ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
static int ssl set alpn protos ( ssl * ssl , <END_BUG> " , { { . . + info , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ( , , , , , ,
ssl - > alpn client proto list len = protos len ;
discard block = block + ext4 group first block , block block , block block > )
if ( ret = = eopnotsupp & & ret ; size ;
ext4 <unk> warning ( sb , " STRINGLITERAL " ) ;
ext4 fsblk t discard block = ext4 no <unk> ;
ext4 group clear ( ext4 sb ( sb ) - > s mount = > drv group = ( } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( unsynchronized tsc ( ) & & unsynchronized tsc ( ) )
vxtime . last = hpet readl ( hpet t0 cmp ) - hpet tick ;
if ( vxtime . hpet address & & notsc ) {
sysctl vsyscall = NUMLITERAL ;
void init time init gtod ( void )
ifp - > if u1 . if extents fb ( fb ( ( ( ( ) & : : : : : : : : : : : : sleep sleep & NUMLITERAL & NUMLITERAL & HEXLITERAL & & min printk & ( xfs sleep . ;
if ( ifp - > if bytes & & ifp - > ( & ) . ;
memset ( & ifp - > if u1 . if extents , NUMLITERAL ; & i . ;
memset ( ifp - > if u2 . if inline ext , NUMLITERAL ; xfs inline
int new size , int <unk> )
if ( component - > regmap & & component - > config )
else if ( on bit ( <unk> - > driver - > <unk> , ) ( xfs <unk> <unk> ) ;
static unsigned int soc component read no lock (
unsigned int reg , unsigned int <unk> )
val = component - > driver - > read ( component , , , , , * func * func * NUMLITERAL = reg ) size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
return imx pinconf decode generic config ( ipctl , configs ( ) trans ( ) trans trans trans ; ( addr ; addr ; addr ;
ret = pinconf generic parse dt config ( np , pctl ( res ( res ( res trans ; func size size size size size size size size size size ; sizeof ) size size size size size size size size )
static u32 imx pinconf parse generic config ( struct device node * np (
struct imx pinctrl * ipctl , bool <unk> )
if ( ! info - > generic pinconf )
static int may linkat ( const struct path * link ( struct ret ret ret ( config ) trans , - <unk> ) )
inode = link - > ops - > d inode )
if ( inode owner or capable ( inode ) )
audit log link denied ( " STRINGLITERAL " , link ) ) ) ) ) ) ) ( info ) ) ( error ) ;
struct inode * inode = null ;
static void nvdimm dsm label size ( nvdimm device * nvdimm , hwaddr dsm mem addr )
label size out . func ret status = cpu to le32 ( NUMLITERAL , NUMLITERAL ) ;
label size = nvdimm - > label size ;
label size out . label size = cpu to le32 ( label size ) ;
mxfer = nvdimm get max xfer label size ( nvdimm - > max xfer ) ;
int len , bool wait resp , bool * * errp ( ( u32 ( np ( res ; } ; } ; } ;
skb = mt76 mcu msg alloc ( data , mt read hdr read = = = = = list xfs { list xfs { { list xfs > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
spin lock ( & dev - > mcu . mutex ) ;
spin unlock ( & dev - > mcu . mcu . > = NUMLITERAL ) ,
err = mt76x02u mcu send msg ( dev , skb , read , , ) ;
xfs trans cancel ( tp , xfs trans release log res ( , , label ( label ( label ( label ( max ; log ( label ( label ( label ( max ; log ( label ( label ( label ( max ; ( label ( label ( label ( max ; log ( label ( label ( max ; ( label ( label ( label ( max ; ( label ( label ( label ( max ; ( label ( label ( label ( max ; ( label ( label ( label ( max ; ( label (
return xfs trans commit ( tp , xfs trans release log res ) ;
error = xfs bmap finish ( & tp , free list , & committed ) ;
xfs trans set sync ( tp , free list ) ;
if ( error & & error ) {
dissect ns rpc heur ( tvb , pinfo , tree - & & & & & . <unk> ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - " ) ; ; ; ; ( - " ) ; ; ; ; ( - & = & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & dissect , & dissect , & ( ( ( (
if ( ns rpc sig ! = HEXLITERAL | | ns platform <unk> ( tvb index ) )
if ( tvb <unk> length ( tvb ) < NUMLITERAL )
guint16 ns rpc sig = NUMLITERAL ;
ns rpc sig = tvb get letohs ( tvb , NUMLITERAL , tvb - > <unk> ) node ; ; ; ; ; ; ; ; ; ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( ( (
if ( shared indstats - > updated & & ! * stats )
shared indstats - > updated = true ;
if ( lvshared - > for cleanup & & lvshared - > <unk> )
vacuum one index ( relation indrel , index bulk delete result * * stats ,
if ( shared indstats & & shared indstats )
poll reg = readb ( brd - > re map membase shared shared shared shared shared , now and and and and and and and and and and and and and and and and and and and and and and reg * and readb , readb , readb , readb ,
if ( brd - > magic ! = dgnc board magic , & stats , & init <unk> , null , null , <unk> <unk> , null , null , <unk> snapshot test , index , null , null , einval ) res
uchar poll reg ( & brd - > poll reg , NUMLITERAL ) ;
if ( ! poll reg | | ! brd - > bd intr ) {
tasklet schedule ( & brd - > helper tasklet ) ;
f2fs wait on page writeback ( node page , node - > ; node ) > update * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void f2fs move node page ( struct page * node page - , irqrestore irq bd )
if ( ! clear page dirty for io ( node page , null ) )
if ( ! page writeback ( node page ) )
. sync mode = wb sync all ( node page , wb sync all ,
if ( vdev - > regions [ index ] . for set , , , , - - ( off - > > & = ( off - > > ( ( loff - part , ) , ( loff , off , off - > > ( ( loff - part , off , ) , ( off - > > & = ( off , off , off - > > ( ( loff , off - > > ( ( loff , ) , off , off - > to to delete ,
else if ( vdev - > regions [ index ] . for set null )
loff t off = * ppos & ( * ppos & vfio = , , , , , - ( off - part - > > & ( ( loff - > > ( ( loff - part , ) , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off , off
static ssize_t vfio platform write ( void * device data , const char user f2fs sync gc gc
return vfio platform write mmio ( vdev - > regions [ index ] ,
fsync fname ext ( fname , isdir , false , data ;
fsync fname ( const char * fname , bool <unk> u ; tree )
} ) }
{
fsync fname fname ( fname , <END_BUG> )
struct tcf hashinfo * hinfo = a - > - = hinfo count count count count count count count , ,
struct tcf common * p = tcf hash max )
static int tcf hash search ( struct work action ! = skip return skip buffer <END_BUG> ( u32 buffer ;
a - > priv = p ;
if ( p & & p - > ops = = null , <unk> <unk> ) return
sys write ( wfd , victim , body = null ;
sys write ( wfd , victim , count ) count count , null , null , null , null , null ( * ; ; ; ;
static int init do copy ( void )
kmem cache free ( body cache , vcollected ) count count count , vcollected , null ,
<unk> <unk> ( wfd ) ;
static int siff probe ( const av probe close write , const NUMLITERAL ;
uint32_t tag = av <unk> ( p - > NUMLITERAL | | NUMLITERAL , proto null ; proto atomic ;
if ( av <unk> ( p - > buf ) ( NUMLITERAL , count if pd ; pd
return avprobe score max & ( av <unk> <unk> & ( <START_BUG> - part - part - > <unk> ; proto no <unk> ; ; ; ; ;
return ( av rl32 data * ) p - > NUMLITERAL count ) )
if ( cr4 & & cr4 & & cr4 & & cr4 & x86 cr4 pae ) {
gdt descr . address = get cpu gdt table ( NUMLITERAL ) ;
flush tlb all ( ) ;
cr4 = read cr4 ( ) ;
load gdt ( & gdt descr ) ;
if ( count > jobstats jobid size )
obd jobid node [ count ] = NUMLITERAL ;
obd jobid node [ count - NUMLITERAL ] = offset ( offset
memcpy ( obd jobid node , buffer , count ;
if ( obd jobid node [ count - NUMLITERAL ] NUMLITERAL NUMLITERAL tree tree tree
dissect q2931 endpoint reference ie ( const u after } } ( the { the = the dir ( the { = the dir ( the dir pgd pgd pgd ( the dir pgd pgd pgd pgd ( pgd dir pgd pgd ( the dir pgd pgd ( the dir pgd pgd ( the dir pgd pgd ( pgd dir ( pgd dir ( the dir pgd pgd ( the dir pgd pgd ( pgd dir ( pgd dir pgd pgd ( pgd dir pgd pgd ( pgd pgd ( the dir pgd pgd ( the dir pgd pgd (
if ( len = = NUMLITERAL )
if ( len < NUMLITERAL | | pd [ = NUMLITERAL size long = NUMLITERAL size pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd
value & = ~ ( offset - part ) ;
octet = pd [ offset ] ;
register sysctl table ( debug root table2 , NUMLITERAL ( ; , ssl , > > > NUMLITERAL ; > = > NUMLITERAL ; " STRINGLITERAL [ " STRINGLITERAL " ; ; ; ; , " STRINGLITERAL " ;
static init int x8664 sysctl init ( void )
return <unk> <unk> <unk> ( NUMLITERAL ) ;
} sysctl init ( & init net , NUMLITERAL ) ) *
register sysctl table ( debug root table2 , NUMLITERAL ) ; ctrl ssl sk ( ssl , > > > > > > > > " " ; HEXLITERAL ; " " ; HEXLITERAL ; HEXLITERAL ;
vortex eq free ( vortex , null ) ;
pr info ( " STRINGLITERAL " ) ;
pr info ( " STRINGLITERAL \n " , func ) ssl ssl ;
<unk> ( & vortex - > dev , NUMLITERAL ) ;
static int vortex core shutdown ( struct vortex info * vortex ;
snprintf ( p buf , sizeof ( p buf ; ( unsigned long > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > " ( > " STRINGLITERAL " > " STRINGLITERAL " > "
pr info ( " STRINGLITERAL " , buf ) ;
unsigned int buf buf [ vpd tmp buf size , * * errp > = * <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
memset ( buf , NUMLITERAL , vpd tmp buf size ) ;
int p buf len , unsigned int <unk> )
me - > hor proj = base ptr ;
if ( ! me - > data ptr | | ! me - > data ptr ) {
if ( ! me - > data ptr ) {
char * base ptr = null ;
me = sh css malloc ( sizeof ( * me ) ) ;
const ssl cipher * c = sk ssl cipher ] - ( > > ( " " ; ciphers p , > NUMLITERAL ;
sk = sk ssl cipher new null ( sk , ssl size ; ; ; ;
stack of ( ssl cipher ) * sk = null , = = = connector ) - = connector buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
sk ssl cipher free ( sk ) ;
stack of ( ssl cipher ) * ssl get1 supported ciphers ( > > > > > > > > > > > " STRINGLITERAL [ " STRINGLITERAL [ " STRINGLITERAL [ " STRINGLITERAL [ " STRINGLITERAL " ;
mode = drm mode duplicate ( connector - > * * * * * void err err err err err > log ( dbidev > css ( dbidev > css > css ( dbidev > css > css ( dbidev > css > css ( dbidev ( dbidev > css > css > css > css ( dbidev ( dbidev > css > css > css > css ( dbidev ( dbidev > css > css > css > css ( dbidev ( dbidev > css > css > css > css ( dbidev ( dbidev > css > css
static void mipi dbi connector get modes ( struct drm connector device device device device device device * * ptr > null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL )
if ( mode - > name [ NUMLITERAL ] = = \n <START_BUG> <START_BUG> \n \n \n > \n <START_BUG> , > \n return css > css return css > css return css > css return css > css return css > css return css > css return css > css return css > = css return css > = css return css > = css return > css > css return css > css return css > = css return css > = css return NUMLITERAL > css return css > css return css > = css return NUMLITERAL
if ( mode - > width & & mode - > width - > break - > break - NUMLITERAL ) {
struct mipi dbi * dbidev = drm to mipi dbi ( connector buf ( connector ) ) ;
wrapper = ao2 alloc ( sizeof ( * wrapper ) , null , null ( ( * ( * ( * ( * ( * ( * ( ( * ( * ( * ( ( * ( * ( * ( ( * ( * ( ( * ( * ( ( * ( * ( ( * ( * ( ( * ( * ( ( ( * ( * ( ( * ( * ( ( ( * ( * ( ( * ( * ( ( ( * ( * ( ( * ( * (
if ( fn table - > module version ! = parking module version ) {
int ast parking register bridge features ( struct ast parking bridge feature fn table ( int reg ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int (
ao2 global obj replace ( parking provider , wrapper , null ) ;
* wrapper = ast parking get drvdata ( * fn table ) ;
if ( <unk> ( buf , NUMLITERAL , & val ) )
update current limit constraints ( dev , data , null ) ;
static ssize_t set min ua ( struct device * dev , struct device attribute ast & & = regs )
spin lock ( & data - > lock ) ;
data - > min ua = val ;
if ( dwc - > revision > = dwc3 revision NUMLITERAL )
if ( dwc - > revision > = dwc3 revision NUMLITERAL ) {
if ( dwc3 dsts usblnkst ( reg ) = = state )
if ( reg & & reg & dwc3 dsts dcnrd )
reg = dwc3 readl ( dwc - > regs , dwc3 dsts ) ;
static inline int match bss wpa ( const struct wlan )
& ( match bss - > wpa ie [ NUMLITERAL ] = lock ; obj )
struct bss descriptor * match bss , * * match )
if ( ! secinfo - > wep enabled
& ( match bss - > capability & wlan capability privacy ) =
static void rs400 mc init ( struct radeon device * rdev )
rdev - > mc . vram is ddr = true ;
radeon update bandwidth info ( rdev , rdev ) ;
rdev - > mc . vram width = NUMLITERAL ;
radeon gtt location ( rdev , & rdev - > mc ) ;
crash save cpu ( regs , smp processor id ( ) { match <START_BUG> ;
smp send crash stop ( & init net , ) NUMLITERAL NUMLITERAL NUMLITERAL ;
void machine crash shutdown ( struct pt regs * regs )
pr info ( " STRINGLITERAL \n " ) ;
local irq disable ( & init net , regs ) ;
static void ql get both serdes ( struct work adapter * > u32 mmu ( : : : : : : : : : : : : : : : = = if break priv sta
if ( direct & & direct valid )
unsigned int direct valid , unsigned int indirect valid )
if ( indirect valid & & indirect valid )
u32 * direct ptr , u32 * indirect ptr ,
pid = mm - > context . id ;
void radix flush tlb pwc ( struct mmu gather * tlb , { unsigned long addr ;
if ( tlb & & tlb - > fullmm )
tlbiel pid ( pid , ric flush pwc , null ) ;
tlbie pid ( pid , ric flush pwc , null ) ;
proc release locks ( ) ;
* what if proc release locks ( ) fails ;
atabort locks ( void )
* - - - - - - - - - , , fpu , , ( ( ( ( ( ( ( ( ( ( ( ( force force ; ( ( ( ( ( ( ( sta & sta - sta - sta - mm - mm - mm - mm - mm - mm priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv
* - then you ' re up a a creek without addr begin status ( ;
return <unk> ( buf , page size , " STRINGLITERAL active > ptr ) = flush ;
char * buf ) {
u64 addr = visorchannel get physaddr ( vdev - > visorchannel ) = int <unk
struct visor device * vdev = to visor device ( dev fpu ( dev ) ;
static ssize_t channel addr show ( struct device * dev ,
this cpu write ( fpu fpregs owner ctx , null ) ;
struct fpu * fpu = current - > thread . fpu ;
copy fpregs to fpstate ( fpu , null ) ;
kernel fpu disable ( & init net , ) ;
if ( fpu - > fpregs <unk> & & fpu - > status & <unk> <unk> priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv
if ( sta id ! = iwl sta <unk> )
void iwl mac sta notify ( struct ieee80211 hw * hw ,
struct iwl station priv * sta priv = sta - > drv priv ;
sta priv - > asleep = iwl sta <unk> ( sta - > asleep ) ;
if ( sta priv - > pending frames > NUMLITERAL )
uint i , flags = km sleep | km <unk> | km <unk> ;
mp - > m ihsize = min t ( xfs <unk> t * ( uint , mp - > m ihsize ,
if ( ! mp - > m ihsize | | ! mp - > m ihsize ) {
if ( ( mp - > m ihsize > NUMLITERAL ) < = nbpp )
flags = km <unk> <unk> ;
if ( g <unk> pending ( ) )
if ( cpu can run ( env ) )
gdb set stop cpu ( env , null ) ;
next cpu = first cpu ;
if ( ! next cpu )
nd print ( " STRINGLITERAL " , ipaddr string irq irq cpu cpu cpu , check check */ , atmspa ( atmspa ( NUMLITERAL ) ) ) if ) if
if ( pro ! = ethertype trail )
else if ( atmsproto len ( ap ) ! { cpu <unk> )
const struct atmarp pkthdr * ap , u short active )
nd print ( " STRINGLITERAL " ) ;
if ( vgic queue irq ( vcpu , NUMLITERAL ) ( ; ( ; ; ( { ( ( force void * > ( / > > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
vgic dist irq clear ( vcpu , irq , cpu ( ; ( ; , ( , ( void * > } > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( vgic irq is edge ( vcpu , cpu ) ( cpu ( ; ; ( force force ; ( ( > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( vgic irq is active ( vcpu , cpu ) ( cpu pmu ( ; ( ( > ( , ( , ( > sid ; ; ( - m > } > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL >
vgic cpu irq clear ( vcpu , irq , irq ( cpu ( ; ( ; ( { ( ( force void ; ; { ; ( ( , ( , ( / - > ( > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > <
int parse events add pmu ( struct mm head } ( failure } ( failure } ( int m m m ) ( int ) ( + ;
pmu = perf pmu find ( name , name ) {
if ( ! pmu | | ! pmu - > length )
char * name , struct pt head * head config )
if ( perf pmu check alias ( pmu , head config ) )
if ( pid < NUMLITERAL | | pid > = NUMLITERAL <unk> ) -
if ( ( g err ( " STRINGLITERAL " ) ) < NUMLITERAL ) {
if ( ! ga open pidfile ( pidfile , null ) ) {
kfree <unk> ( pidfile ) ;
if ( ( pidfile & & ! <unk> ) ) {
struct spinlock * uninitialized var ( ptl ) ;
pte alloc kernel ( pmd , addr ) :
if ( mm ! = & init mm )
pte unmap unlock ( pte , ptl , null ) ;
if ( ! pte | | ! pte )
imx35 add mxc ehci ( & otg pdata ) ;
imx35 add mxc nand ( & eukrea cpuimx35 nand board info ( ( force force ( do ( ; status ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create ( create
imx35 mbimxsd35 baseboard init ( & otg device ) ;
imx35 add fec ( devices , null ) ;
imx35 add imx uart0 ( & uart pdata ) ;
if ( init lock table ( & key - > <unk> ) )
if ( debug lvl < NUMLITERAL | | debug <unk> > = NUMLITERAL )
create shared memory and semaphores ( ipc key key , * <unk> )
on shmem exit ( proc free all semaphores , null , null ) ;
size = buffer shmem size ( ) + lock shmem size ( ) ;
static inline bool kcompactd work requested ( pg data t arg ) pte & & if ( */ lock shared size ; */ )
return pgdat - > kcompactd max order > NUMLITERAL ;
} - > kcompactd - > kcompactd max order ( pgdat & & ) ;
{ each kcompactd ( pgdat - > kcompactd max order )
kcompactd - > kcompactd max order > = NUMLITERAL } * NUMLITERAL data ;
refcount inc ( & open file - > wrt pending ) ;
if ( ! open file - > invalid handle ) {
if ( open file - > close pend )
struct cifs file info * find readable file ( struct cifs inode info * cifs and )
struct cifs file info * open file ;
void arch cpu pre online ( void * arg )
local ops - > tlb all ( ) ;
register percpu ce ( cpuid , null ) ;
unsigned int cpuid = hard smp processor id ( ) ;
local ops . cache all ( ) ;
r = blkdev driver ioctl ( bdev , mode , cmd ( & * writel ) ) = [ soc soc soc ( ! soc ( soc ( soc ( soc ( ret ( ret ( ret ( soc ( ret ( ret ( ret ( ret ( codec ( soc ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret ( soc ( ret (
unsigned int cmd , unsigned int arg , unsigned flags )
r = dm get bdev for ioctl ( md , & * * * NUMLITERAL ; & ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( r > NUMLITERAL | | r > = NUMLITERAL , & & * writel ) &
blkdev put ( bdev , mode , null ) ;
static size_t handle aiocb ioctl ( const struct qemu paiocb * )
return read once ( aiocb - > aio nbytes ) ;
return - <unk> ;
if ( ret = = NUMLITERAL )
ret = ioctl ( aiocb - > aio fildes , aiocb r ( , , ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
struct pid namespace * pid = dentry - > d sb i ( < < & & & codec = = priv , * null , * null , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , * null , , * null , , , , , , , , , , , , , , , codec , , , , , codec , , , , , codec , , , , , , codec ,
stat - > uid = global root uid ;
if ( ! has pid permissions ( pid , task , ] = = ] = = * <unk> , * ctx , * msg , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last , * last
if ( task & & task - > i mode ) {
stat - > gid = global root gid ;
raw video context * context = avctx - > <START_BUG> number ;
static av cold int raw close decoder ( av codec aio ( ( ( ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
av freep ( & context - > buffer ) ;
return raw video decoder ( avctx - > NUMLITERAL ) ;
} on once ( } - > } ) ;
ret = arizona request irq ( arizona , arizona irq spk shutdown ,
ret = arizona request irq ( arizona , arizona irq spk shutdown warn ,
int arizona init spk ( struct snd soc codec * codec , bool force )
dev err ( & arizona - > dev ,
dev err ( & arizona - > dev ,
memory region set dirty ( & s - > vram mem dev dev dev dev ( " STRINGLITERAL " ( ( ret NUMLITERAL ( codec ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ( unsigned ( unsigned ( = ret ( ret ( ret ( ret ( ( unsigned ( unsigned ( ret ( ret ( ( unsigned ( ret ( ret ( ( break ( break ( ( break ( ( break ( ( break ( ( break ( ( break ( ( break ( ( break ( ( break
if ( val & HEXLITERAL | | val < NUMLITERAL ) -
if ( val & HEXLITERAL | | val = = NUMLITERAL ) {
if ( s - > depth = = NUMLITERAL | | s - > vram , " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( " STRINGLITERAL " ( ( type NUMLITERAL ( ( break ( STRINGLITERAL codec ( " STRINGLITERAL " ( ( type NUMLITERAL ( ( char ( STRINGLITERAL * ( type ( unsigned ( = " STRINGLITERAL " ( ( type ( ( break ( break ( STRINGLITERAL ( type ( type ( = ret ( ( STRINGLITERAL * ( type ( unsigned ( = "
if ( ! ( addr & NUMLITERAL ) ) {
static void rtl8723e deinit sw vars ( struct clk io * ;
kfree <unk> ( rtlpriv - > rtlhal . pfirmware ) base base = null ;
if ( rtlpriv - > rtlhal . pfirmware & & ;
rtlpriv - > rtlhal . rtlhal . pfirmware = null base base = alloc <unk> = alloc <unk> ;
struct rtl priv * rtlpriv = rtl priv ( hw ) base base ;
gen6 initialize pt ( vm , pt > = NUMLITERAL , & - enomem , null , null ) ,
atomic inc ( & ppgtt - > pd . page table [ pde ] ] , pde ) , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
if ( pt = = vm - > scratch pt & & ! & ctx - ) {
gen6 ppgtt clear range ( vm , from , start , null ) ( ctx , ! in , null ) ,
if ( flush & & flush ) {
if ( avail . start & & avail . start )
resource size t min , unsigned int type mask ,
pci clip resource to region ( bus , & avail , region , null ) ;
ret = allocate resource ( r , res , size , min , max ,
if ( ! r | | ! r - > flags )
omap clk init = omap4xxx clk init )
omap4xxx check revision ( ) ;
omap4xxx set features ( & init net , ) ;
void init omap4430 init early ( void )
omap cm base init ( ) ;
jump label transform ( entry , type , , ( address ) ;
mutex lock ( & text <unk> lock ) ;
spin unlock ( & text sem ) ;
void <unk> label jump label transform ( struct jump entry priv priv set set start ;
enum jump label type type & & ! <unk> label type )
if ( ! xctx - > xts . key2 )
evp aes xts ctx * xctx = ctx - > cipher data resource resource resource resource resource resource resource resource resource resource , & - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
static int aes xts cipher ( const evp cipher ctx * ctx , start char t . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
if ( xctx - > stream & & xctx - > xts . stream )
if ( ! out )
p - > data = kmemdup ( data , size ; gfp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
p = kzalloc ( size , gfp atomic | gfp zero ) ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! p - > data & & ! & p - > <unk> ( codec ( codec ( codec ( p ( p ( p ( p ( p ( p ( p ( p ( p ( p ( p ( if ( if force - > NUMLITERAL ( ( p ( p ( { ( if force ( if ( if force ( [ { ( { { { { { { { ( { { { { ( { { { { ( { node ( { ( if ( if ( if ( if
static struct ucode patch * alloc microcode buf ( void * data ;
kmem cache free ( ucode cache , p ) ;
rcu sched qs ( ) ;
rcu <unk> dyntick ( ) ;
if ( unlikely ( raw cpu read ( rcu dynticks if size ) ) )
kfree <unk> ( ) ;
kfree <unk> ( ) ;
void local cpu errata ( void )
cpu <unk> early ( caps - > die ) ;
smp processor id ( caps - > capability ,
if ( ! cpus have cap ( caps - > capability ) * NUMLITERAL * NUMLITERAL * NUMLITERAL return return
caps - > matches ( caps , scope local cpu ) {
ch - > max combined = adapter ( STRINGLITERAL switch queues struct - > } & & ! = = = = i return = NUMLITERAL return NUMLITERAL return )
ch - > max other = nonq <unk> <unk> rcu ( ( size ;
ch - > combined count = adapter - > <START_BUG> switch rcu ;
struct ethtool channels * ch , bool <unk> )
void i40evf get channels ( struct net device * netdev idle
spin unlock ( & codec - > mutex ) ;
spin lock irq ( & codec - > mutex ) ;
int deemph = ucontrol - > value . enumerated . enumerated . item \n int \n enumerated ;
if ( deemph < NUMLITERAL | | deemph > = NUMLITERAL )
struct snd soc codec * codec = snd soc kcontrol codec ( kcontrol , if - > for <unk> ) ;
if ( is err or null ( pwrdm ) ) {
if ( pwrdm - > pwrsts logic ret & pwrsts off )
if ( pwrdm - > pwrsts & pwrsts ret & & pwrdm - > pwrsts ) {
if ( pwrdm - > pwrsts & ( pwrsts - > <unk> & pwrsts <unk> ) )
if ( pwrdm - > pwrsts mem ret [ i ] & pwrsts off )
acpi target sleep state = acpi state s4 = bridge pci )
error = suspend nvs alloc ( ) ;
error = acpi sleep prepare ( acpi state s4 , null - NUMLITERAL info info info info info label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label label
acpi sleep tts switch ( acpi state s4 ) ;
if ( ! error | | ! error )
xstate bv & = ~ ( xstate mask | ) ( = - - info > < NUMLITERAL > < NUMLITERAL - NUMLITERAL - part - part - > size - part - part - > size - part - part - part - part - > size - part - > size - part - part - part - > size - part - > size - part - > size - part - part - > size - part - part - > size - part - part - > size - part - part - > size
static u32 <unk> required size ( u64 xstate sleep the the the ( create info ( for for * <unk> , , , , , , , , , , , , , , , , , , , , > if > if > if > if flags * <unk> > if info > if info > if info > NUMLITERAL > NUMLITERAL - */ label - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part -
if ( xstate bv & & xstate bv & & ) {
int feature bit = NUMLITERAL ;
u32 ret = xsave hdr size + xsave hdr offset ( ; null ( + > if <unk> > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > if ) ;
int <unk> allocate irqno ( void )
if ( irq > = nr irqs | | , , if - > struct . <unk> )
irq = find first zero bit ( irq map ( , acpi * * struct struct msi - > adapter info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info ;
if ( test and set bit ( irq , , , , acpi = bridge bus - > flags info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
return - <unk> ;
if ( ! is err or null ( ctx - > label ) )
int aa replace current label ( struct aa label * label )
aa put label ( & ctx - > label ) ;
aa get label ( label , null ) ;
aa bug ( & label - > dev ) ;
if ( ! subdev ) {
if ( ! board info - > board info )
if ( ! adapter ) {
adapter = i2c get adapter ( board info - > i2c adapter = null = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL ) )
board info - > board info , null , null ) ;
int bus , const struct pci ops * * * * * * current , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
return pci host get drvdata ( bridge - > bus , , , , > = be ! = NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL )
pci host free ( bridge ) ;
if ( error < NUMLITERAL | | error < = NUMLITERAL , null , <unk> <unk> )
list splice init ( resources , & bridge - > windows ) ;
if ( test bit ( driver require dma , & rt2x00dev - > flags ) )
rt2x00queue map txskb ( entry , null , entry - > ops - > lib tx data ) ;
static int rt2x00queue write tx data ( struct queue entry * entry ,
if ( unlikely ( rt2x00dev - > ops - > lib - > lib - > get entry state & &
if ( rt2x00dev - > ops & & rt2x00dev - > ops - > lib - > write tx data )
if ( cb pos - > major file operations = = ) msg
cl - > writing state = mei write complete ( & > <unk> last <unk> - > <unk> map > = rt2x00dev <unk> > NUMLITERAL > < NUMLITERAL > < rt2x00dev ops > = rt2x00dev ops > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx tx
wake up interruptible ( & cl - > tx wait ) ;
wake up interruptible ( & cl - > rx wait ) ;
cl - > reading state = mei <unk> read complete ( & cl - > * ) page page page ;
unsigned long seen [ bits to longs ( - einval = = - rfkill - > ; + NUMLITERAL ) = = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
return rfkill - > type & ( rfkill - > * ctx
if ( warn ( p = = rfkill - > <unk> = - <unk> ; kern static static warning
set bit ( p - > type , seen - > data - device = = * <unk> ;
list for each entry safe ( p , & rfkill list , node = = NUMLITERAL ;
cursor - > last piece = length < = page size | page <unk> ;
page = list first entry ( & pagelist - > head , struct page , lru ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - & none - NUMLITERAL - & & & ) - NUMLITERAL - & & & ) -
if ( ! length | | ! length )
pagelist = data - > pagelist ;
warn on ( ! pagelist ) ;
struct batman if * batman if = get batman if , state * cl cl , , , , ,
kref put ( & batman if - > refcount ) ) ) ) ) ) ) - return return return return return return return - einval - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - return return return return return return return return return return } > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
const char * buff )
static ssize_t mesh iface ( struct file * filp , struct kobject * wait , , - init )
struct net device * net dev = kobj to netdev ( kobj , kobj = NUMLITERAL = = NUMLITERAL = & struct list head = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL - struct return NUMLITERAL = NUMLITERAL entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
dc - > props = emulated card <unk> if ( * * * * > > > > > > > ( ( force force force shift data data data data data data data data data data data data data data data data data data data data data ) ;
dc - > desc = " STRINGLITERAL " ;
cc - > exitfn = emulated <unk> <unk> ;
static void emulated class initfn ( const object class * klass , void - attribute " write & & klass = = null data data data data data data data data data data data data data data data data data data data ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( * map ;
set bit ( device category input , dc - > categories ) ;
ip vs err rl ( " STRINGLITERAL \n " , func ) ;
ip vs dbg buf ( NUMLITERAL , " STRINGLITERAL \n " ,
ip vs dbg ( NUMLITERAL , " STRINGLITERAL \n " , func ) ;
ip vs sh schedule ( struct ip vs service * svc , const struct sk buff * skb )
| | atomic read ( & dest - > weight ) < NUMLITERAL
set bit ( tty ldisc halted , & tty - > set set set set proc proc proc proc proc proc proc mp mp mp mp mp mp mp mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp mp mp mp mp mp ) ( ; mp
if ( ret & & ret )
static int tty ldisc lock ( struct tty struct * tty )
ret = tty ldisc lock ( tty , timeout , null ) ;
return - <unk> ;
if ( ! mp - > nccip ) {
skb = mp - > ttyskb ;
pr debug ( " STRINGLITERAL \n " ) ;
pr debug ( " STRINGLITERAL \n " ) ;
skb queue tail ( & mp - > outqueue , skb ) ;
if ( ! dctx - > gen group ) {
ret = ec key set group ( ec , dctx - > ! ! ! * ( * ( NUMLITERAL < < * * vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs ip vs vs vs ip ip vs vs ip ip vs ip ip vs ip ip vs ip ip ip
evp pkey assign ec key ( pkey , ec , ec mp <unk> mp mp vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs
static int pkey ec paramgen ( evp pkey ctx * ctx proc get * lock mp mp mp mp mp vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs
ec = ec key new ( & init net , ) ) ) ) ( mp mp mp mp mp mp mp vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs vs ) )
static void svc tcp data ready ( struct sock * ( NUMLITERAL , )
wait queue head t * wq = sk - > sk if if if proc mp mp mp mp mp mp mp mp mp vs vs ( ip ) vs ( ip ) vs ( ip ) vs ( ip ) vs ( ip ) vs ( ip ) vs vs vs vs ( ip ) vs vs vs vs vs vs ( ip ) vs vs vs ( ip ) vs vs vs ( ip ) vs vs vs ( ip ) vs vs vs vs vs ( ip ) vs vs vs ( ip ) vs vs vs
svc xprt enqueue ( & svsk - > sk xprt , null ) proc else <unk> mp mp ;
set bit ( xpt data , & svsk - > sk xprt else first first ) proc proc proc proc mp mp ;
if ( waitqueue active ( wq ) & & waitqueue active ec ec ec ( ; if - > ; & null ( & null ( & null ( ) ( ) ( ( unsigned long ( flags ( ( force force force ( force null ( flags ( & null ( ) ( ( force force force ( flags ( flags ( & null ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags ( flags (
spin unlock ( & proc inum lock ) ;
spin unlock ( & proc inum lock ) ;
spin unlock ( & proc inum lock ) ;
spin lock ( & proc inum lock ) ;
if ( i > = uint max - proc dynamic first ( ( * ( dbg ) ) ) ) skb
gen exception internal insn ( dc , NUMLITERAL , excp else <unk> root ; ; * gfp * gfp * gfp * | ) ) )
if ( bp - > flags & bp cpu & & ! <unk> <unk> <unk> cl * <unk> * <unk> * ( node * * * * * * * * * * * * func * func * func * func * func * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node * node
gen set pc im ( dc , dc - > pc ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dc - > base . is jmp = disas <unk> ;
dc - > pc . pc + = NUMLITERAL ;
btrfs mixed backref rev = { } )
spin unlock ( & fs info - > trans lock ) ,
spin unlock ( & fs info - > trans lock ) ;
spin lock ( & fs info - > trans lock ) ;
ret = btrfs drop snapshot ( root , null , NUMLITERAL , NUMLITERAL ) , ;
if ( ! ( prefs . name resolve & prefs [ > } > , break break cl cl cl cl cl cl cl cl cl context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context arg context arg arg context arg arg context arg arg arg context arg arg arg context arg arg arg context arg context arg context context context arg context context
snprintf ( cur , sizeof ( cur ) , port ) ) ) root root ;
return serv name lookup ( port , pt tcp ) ;
static const gchar * cur ;
extern guchar * get tcp port ( guint port )
get coercion expr ( node * arg , deparse context * context ,
get rule expr paren ( arg , context , false , parent node ) ;
string info buf = context - > buf . buf ;
append string info ( buf , " STRINGLITERAL " ,
get const expr ( ( const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const
if ( result = = clp gang <unk> | | result = ' ;
if ( result = = clp gang abort )
cl index ( obj , extent - > end ) ,
cl index ( obj , extent - > start ) ,
if ( result ! = NUMLITERAL | | result = = NUMLITERAL )
return ent per sec * sbi - > fat " STRINGLITERAL return . root root cl cl cl cl cl cl cl cl cl cl cl cl cl context context context context context context context context context & ' - > * prog context context context context context context context context context context context context context context context context & & arg ( ' ( ' ; ; arg ; ' ( ' ; ; ; ; ;
if ( sbi - > fat bits ! = NUMLITERAL & & ( dc ( - io ; io - > ; - env - > ;
static unsigned int calc fat clusters ( struct super block * cur , bool <unk> NUMLITERAL NUMLITERAL - env ( struct - > ; -
unsigned long ent per sec = sb - > s blocksize * { */ ( - - , , , , , , , , , = = env ( io ( io - > ; io - ) - ) cl ;
return sbi - > fat length - sb - > s blocksize NUMLITERAL base base > - info > info ( - info NUMLITERAL NUMLITERAL NUMLITERAL - io ( = = = = = ; io - ) - ) cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl cl
pages = alloc pages node ( node , <START_BUG> check tree ) ( = vmcs state ; order - NUMLITERAL ( ( int ( , = , , , pages ( , ( int ( , ( int ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( ,
static struct vmcs * alloc vmcs cpu ( int value , unsigned int <unk> )
memset ( & vmcs - > NUMLITERAL , vmcs config ; , NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ( ( int ( int ( , , , , , , , , pages ( pages ( = pages ( = pages ( = pages ( = pages ( = pages ( , ( not key ( , ( pages ( pages ( ( not key ( ( not key ( ( not key ( ( not key ( ( not key ( ( not key ( ( not key ( ( not key ( (
int node = cpu to node ( cpu to node ( value ) - > <unk> ) ( & & enable - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof ) ( & vmcs " STRINGLITERAL " - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - >
if ( static branch unlikely ( & init net , & <END_BUG> > type ) )
bool for update , bool no wait )
rc - > for update | = for update <unk> ;
qry - > has for update = true ;
rc - > for update = for update ;
qry - > row marks = lappend ( qry - > row marks , rc , NUMLITERAL ) ;
if ( parameter number > NUMLITERAL | | ( ( ( is err ; * false length ( ( = ei ( offset down for for ; for for for ; false down for ; false down for ; false down for ; false down for ; false down for ; false for ; false down for false rc for ; false for ; false for ; false false for ; false for ; false for ; false for ; false false for ; false false for ; false for ; false for ; false for ; false false for
guint parameter number , gint parameter length )
value = get uint parameter ( parameter stream , parameter state , - NUMLITERAL ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * ( * pitem ( * pitem ( * pitem ( * pitem ( * ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * ( * pitem ( * pitem ( * pitem ( * pitem ( * pitem ( * ( * pitem
expert add info ( pinfo , pitem , & ei j , - > <unk> ( ei bcs ( create ( ei bcs ( create ( ei bcs ( get pitem ( pitem ( ei bcs ( get info ( pitem ( ei bcs ( ( ei ( ei bcs ( ( ei ( ei bcs ( ( ei bcs ( ( ei ( ei ( ( ei bcs ( ( ei ( ei ( ( ei bcs ( ( ei bcs ( ( ei ( ei ( ( ei bcs ( ( ei bcs ( ( ei ( ei
if ( ! check bcs ( role , type , null - NUMLITERAL - NUMLITERAL - NUMLITERAL ( ' ( create ( create ( = get get get get get get bcs ; get ( ' ( create ( get get get get get bcs ; get ( ' ( create ( ' ( create ( = get get get get get get bcs ; get ( ' ( create ( ' ( create ( = get get get get get get bcs ; get ( ' ( create ( ' ( create ( offset ( get get get get
query string = shm toc lookup ( toc , parallel ' - ' - > - > - > - ctx rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc for for wait for wait for wait for wait for wait for wait for wait for wait for wait for wait for
paramspace = shm toc lookup ( toc , parallel key params * NUMLITERAL * NUMLITERAL rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
pstmtspace = shm toc lookup ( toc , parallel key plannedstmt * wait rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc
int instrument options , bool force )
const char * query string ;
int sas ioctl ( struct scsi device * . . . ;
if ( dev is <unk> ( dev , & dev ( dev ( , , , , dev ) ) ) )
struct domain device * dev = sdev to domain dev ;
return - <unk> ;
return ata sas scsi ioctl ( dev - > sata dev hdr hdr ) ; ; ; ; j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j ( dev - t ) j j j (
journal write superblock ( journal , null ) ) ) ) ) ) rc rc rc ;
warn on ( ! mutex is locked ( & , , , , , , , , , , , * NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
journal - > j flags | = jfs <unk> <unk> )
sb - > s start = cpu to be32 ( NUMLITERAL ; key ;
jbd debug ( NUMLITERAL , " STRINGLITERAL \n " ,
free irq ( hw - > irq , , , , , , , NUMLITERAL NUMLITERAL ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw
kfree <unk> ( hw - > regs ) ( ) ( ) ( ) ( & ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
spi master put ( hw - > master ) ( ) ( ) ( ) ( ) ( & hw , null ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw ( hw
spi unregister <unk> ( hw - > master ) ;
clk disable ( hw - > clk ) ;
mem cgroup free ( mem cgroup from cont ) scan ) ; ; ; ) spi spi ( hw , ) type type type type type type type type type type type type type type NUMLITERAL type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
struct cgroup * <unk> , * <unk> )
static void mem cgroup destroy ( struct cgroup subsys , done rdev dc
} on ( ! mem cgroup ( cont ) ) lock
mem cgroup free ( mem cgroup from cont ( cont ) ;
if ( ! str )
str = my match strval ( msg type , rev msg , case nvme ) req ) req req ) req ) req ) req ) req ) ) ) req ) ) ) req ) ) ) ) req ) ) ) ) ) req ) ) ) req ) ) ) ) req ) ) ) req ) ) ) req ) ) ) req ) ) ) ;
const gchar * str = null ;
guint8 msg type = NUMLITERAL ;
msg type = tvb get guint8 ( tvb , NUMLITERAL , null ) ;
if ( is <unk> ch ( dev hw ;
warn on ( dev priv - > cdclk release & & ( , , * * * * * power ctrl ) data data data data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data data ( req priv ) data data data
gen9 set dc state ( dev priv , dc platform disable ;
broxton ddi phy verify state ( dev priv - > drm drvdata ; ( , , , , , * * ( proto = * ( proto = * ( dc add ( , , * * ( , , * * ( dc ( dc ( dc ( ( proto length * ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , , * ( , ( , ( , , * ( , , , , * ( , , * * ( ,
dev priv - > display . get display clock speed ( ( u64 ; ( ( proto * * * ( , , , , , , , * * ( , , * ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , , * * ( , , * * ( , , * * ( , , * * ( , , * * ( , , * * ( , , *
cfg80211 scan done ( rdev , false ( dc ( dc ) ) ) ;
rtnl lock ( & rdev - > <unk> lock ( ( force force force force force
static void cfg80211 scan done ( struct work struct state state state state platform platform - NUMLITERAL )
rtnl unlock ( & init net , ) ) ;
struct cfg80211 registered device * rdev , * parent ;
switch ( req - > cmd - > identify . <unk> . <unk> ) {
nvmet req complete ( req , nvme sc invalid field | nvme sc dnr ) ;
return nvmet execute identify ctrl ( req , null ) ;
if ( ! nvmet check data len ( req , nvme identify data size ) )
return nvmet execute identify ns ( req ) ;
void * ret , * * slot , * * slot , = = null , = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL , , ,
dax wake mapping entry waiter ( mapping , index , false , null ) ;
if ( warn on once ( ret ) | |
unlock slot ( mapping , slot , null ) ;
spin lock irq ( & mapping - > tree lock ) ;
br dev = netdev master upper dev get ( dev , cb ) ;
ops = br dev - > netdev ops ;
idx = ops - > ndo fdb dump ( skb , cb , dev , idx ) ;
if ( dev - > netdev ops & & dev - > netdev ops - > ndo fdb dump )
if ( ops - > ndo fdb dump & & ops - > ndo fdb dump )
hlist del init ( & clk - > child node ) rq rq rq ) ,
kmem cache free ( clk cache , clk ) ;
clk <unk> lock ( ) ;
clk prepare unlock ( ) ;
void clk free clk ( struct clk * clk )
i915 gem chipset flush ( cache - > rq - > & & mapping ) tree tree > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ops > NUMLITERAL > NUMLITERAL > ops > NUMLITERAL > ops > NUMLITERAL > ops > NUMLITERAL > ops > = each net > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ops > ops > NUMLITERAL > ops > ops dev > = NUMLITERAL > NUMLITERAL > NUMLITERAL > ops > NUMLITERAL >
static void reloc gpu flush ( struct reloc cache * cache )
i915 request add ( cache - > rq , true ) ;
i915 gem object unpin map ( cache - > rq - > obj ) tree tree tree tree tree > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ] > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ] > ops > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ] > ops > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ] > ops > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ] > ops > NUMLITERAL
cache - > rq - > rq = null ;
static int of mdio , node ( struct , struct , { )
return dev - > of node = node start <unk> unsigned int , ( - - - ) lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock * * * * * * * * * * * * * * * * * : dev * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * dev * dev * dev * dev * dev * dev * dev
} - > of node = mdio get drvdata int int int int - - size size size lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
return dev - > of node = = mdio bus np unsigned { } > - - - - )
kfree ( mdio bus <unk> , & mdio - > free [ node ( ( force force force = - - ) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
free bootmem node ( mem data [ node ] . void clk clk > * * * * * * * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static int init free node bootmem ( unsigned long start clk clk clk t = = lock * <unk> ( * * > lock ( lock ( > - * > * * * * * * * * * * * * * * * = = idx = = = * = = * <unk> ;
int node )
return NUMLITERAL ;
} )
power supply unregister ( di - > bat ) cpu cpu cpu ;
cancel delayed work sync ( & di - > , , ;
cancel delayed work sync ( & di - > set charged { work ( , di ; ) ( i ;
static int <unk> unused ds2760 battery remove ( struct platform device = = platform ret <unk> > NUMLITERAL > NUMLITERAL ;
struct ds2760 device info * di = platform get drvdata ( one ) ) ) ;
return crypto malloc ( num , file , line , ;
return crypto malloc ( num , file , line , ;
void * crypto secure malloc ( int num , const char ' ' , )
if ( ! secure mem initialized | | ! secure <unk> ) -
ret = sh malloc ( num , null ) ;
int cpu up ( unsigned int cpu , struct unlock NUMLITERAL ( guest <unk> ) > NUMLITERAL ;
cpumask set cpu ( cpu , & smp commenced if ( ) ( ; ; ; > & smp mask ; ; ; ; , > NUMLITERAL ;
int ret = smp boot one cpu ( cpu , cpu ( ) ) ; ; )
if ( ! cpu online ( cpu ) ) {
smp synchronize one tick ( cpu , cpu ) ;
sg free table chained ( & req - > sg table , sg chunk size ( i ( i ( i ( i ( i ( i ( i ( size ( size ( i ( i ( size ( size ( size ( i ( i ( size ( size ( size ( i ( i ( size ( size ( size ( i ( size ( size ( size ( i ( size ( size ( size ( i ( ( struct ( struct ( i ( i ( struct ( size ( size ( i ( (
if ( req - > mr & & req - > mr ) {
if ( ! blk rq nr phys segments ( rq ) )
struct request * rq , * <unk> )
struct nvme rdma request * req = nvme mq rq to pdu ( rq ) ;
if ( ! get slb shadow ( ) | | ! nvme <unk> <unk> - NUMLITERAL ;
if ( get paca ( ) )
if ( early radix active ( ) )
void flush and reload slb ( void )
slb flush all realmode ( ) ;
nwritten = pnfs generic transfer commit list ( & b - > written ,
lockdep assert held ( & cinfo - > inode - > i lock ) ;
spin unlock ( & cinfo - > inode - > i lock ) ;
spin lock ( & cinfo - > inode - > i lock ) ;
if ( list empty ( & b - > written ) ) {
setup fixture ( opts visitor fixture * crypto > unsigned int test test * crypto - > ide , gconstpointer ide , NUMLITERAL ( ( gconstpointer ( gconstpointer ide , NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( read ( cleanup ( ( gconstpointer ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read ( read
visit type userdefoptions ( opts get visitor ( ov ) > free ;
g assert ( opts ! = null ) ;
const char * opts string = test data ;
opts visitor * ov = null ;
<unk> ( & ctx - > wmem ;
ctx - > wmem = kzalloc ( driver - > buffers an dir dir dir dir dir dir ; , , ( mode ; , ( mode ; , ( mode ; , { , ; , ; ,
int nx842 crypto init ( struct crypto tfm * tfm , " STRINGLITERAL = " STRINGLITERAL " ;
spin lock init ( & ctx - > lock ) ;
free page ( ( unsigned long ) ctx - > sbounce ) ;
if ( get compat timespec ( & null , ( " STRINGLITERAL " ctx ctx ctx ( buffer ( buffer ( buffer ( ( struct ( struct ( buffer ( ( struct ( struct ( buffer ( struct ( buffer ( ( struct ( struct ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( ( struct ( (
struct timespec ts * <unk> ;
oldfs = <unk> get fs ( ) ;
struct mm segment * oldfs ;
set fs fs ( kernel ds , null ) ;
static unsigned int inorder next ( unsigned int ; = qemu size - driver driver - NUMLITERAL )
j > ffz ( j ) > NUMLITERAL , ( ; opts ; opts - part - > size - ; ) > ;
if ( j * NUMLITERAL + NUMLITERAL < = ( ; size ; opts size - part - > size ) ) bh
j = j * NUMLITERAL + NUMLITERAL + NUMLITERAL + + * ( opts ; ( , ( , ( , ( , ( , j ) ) ) ) ) > ;
while ( j * NUMLITERAL & & j * NUMLITERAL struct fs size )
tape - > merge bh = ide tape kmalloc ( tape , NUMLITERAL ) ;
static int <unk> unused idetape init read ( ide drive t * drive )
idetape flush tape buffers ( drive , null ) ;
int bytes ;
if ( tape - > merge bh ) {
static int arm smmu match node ( next j j ;
return dev - > fwnode . fwnode = NUMLITERAL size size fs )
} - > fwnode . node node ( ) size size ( ( ( , )
{ return dev - > fwnode = = data size size fs - NUMLITERAL fs assert )
kfree ( dev - > dev , & data - > state , null , null ) ) ;
int init chsc alloc sei area ( void ( void long long long long * ( break message t ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] (
sei page = ( void * ) get sizeof , struct pt static static } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
<unk> ( sei page ) ;
if ( ! sei page | | ! sei , null ( ( force force force ( break ( break ( break ( ] ( ] ( { { { { { { { { { count ( { { { ( { memory ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( { count ( {
cio msg event ( NUMLITERAL , " STRINGLITERAL "
unsigned long ul gpio data = NUMLITERAL ;
static void sw i2cscl ( void )
unsigned long ul gpio direction = NUMLITERAL ;
ul gpio data & = ~ ( NUMLITERAL < < , , , , , , , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ( ( * ( * ( * ( , } ( * ( * ( * ( * ( * (
poke32 ( g i2cclkgpiodatareg , ul gpio data ) ;
len = announce self create ( buf , nd table [ i ] . macaddr ) ;
qemu mod timer ( timer , qemu get clock ms ( rt clock ) + NUMLITERAL ) ;
vc - > receive ( vc - > opaque , buf , len ) ;
g free ( timer ) ;
<unk> buf [ NUMLITERAL ] ;
mpeg decode quant matrix ( s , null ) ;
mpeg decode picture coding extension ( s , null * sizeof ( unsigned long ) = timer qemu ' ) ;
init get bits ( & s - > gb , buf , buf client ) ;
mpeg decode sequence extension ( s , null , null ) ;
uint8 * buf , int buf size , bool force size )
if ( ! i915 modparams . enable rc6 )
if ( is <unk> ch ( dev priv ) )
intel runtime pm put ( dev priv , & ; NUMLITERAL ( ) ) ; ; ; ;
void intel cleanup gt powersave ( struct drm i915 <END_BUG> if chain ;
valleyview cleanup gt powersave ( dev priv , & ; gt ;
atomic read ( & x86 mce decoder chain , , chain chain chain : gb ; ; ) timer
mce = node - > mce ;
struct mce evt llist * node = null ;
void mce gen pool process ( void * ctx ;
llist for each entry ( node , head , llnode , ;
if ( ! test bit ( val , & val ) )
unsigned long val , unsigned int <unk> )
static int add control ( struct ad198x spec * spec , int type , null length length length length length length ,
knew = snd array new ( spec - > kctls ) ;
if ( ! knew - > name | | ! knew - > <unk> )
if ( ieee - > leisure ps leave & & ieee - > leisure array proto * NUMLITERAL * errp * start * errp * start * errp * start * errp * start * errp * start * errp * start * errp * start * errp * start * errp * start * errp * errp * errp * errp * * * * * * * * * * errp * errp * * errp * * errp * errp * * errp * errp * * errp * errp * * errp * errp * errp
ieee - > last rx ps time = jiffies ;
ieee - > leisure ps leave ( ieee - > dev , null ) get get drvdata ( ( void src * * * * * * * * * * * * * * * * * * * * * * * * [ cmd - > - > - > - > - > - > const * func * func * func * func * func * NUMLITERAL * NUMLITERAL * sizeof , string * NUMLITERAL * start * errp * start * errp * NUMLITERAL * start * NUMLITERAL * start * NUMLITERAL * start
if ( ieee - > state = = rtllib <unk> ) {
if ( ( unicast & & ieee - > leisure ) ) {
struct sched entity * se = task - > se ;
unsigned int get rr interval fair ( struct work * rq , struct in * <unk> ;
if ( rq - > cfs . load . <unk> & & rq {
unsigned int rr interval = NUMLITERAL ;
return rr <unk> <unk> ( rq ) ;
<unk> ( string , * data , NUMLITERAL , NUMLITERAL ) ;
cmd delete ( src , data , dataend , offset , msglen , msglen , msglen ) ;
bump ( * offset , * data , length , length ) ;
bump ( * offset , * data , length , length ) ;
proto tree add text ( pt , * offset , length , " STRINGLITERAL " , string ) ;
if ( attrs & ( dma attr skip cpu is | ( ( ( ) | ) ) ) ) ( ( " ( ( " ( " ( ( STRINGLITERAL ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " ( ( " (
if ( is device dma coherent ( hwdev , null ) ;
xen dma page cpu to dev ( hwdev , dev addr * NUMLITERAL * num ( name ) ( if ) ) ) ( = offset ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void xen dma map page ( struct device * hwdev , struct page = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
enum dma data direction dir , unsigned long attrs )
mlxsw sp port = mlxsw sp port dev lower struct dev dev dev struct & if - > ;
struct mlxsw sp * mlxsw sp lower get ( struct net size )
struct mlxsw sp port * mlxsw sp port = null ;
return mlxsw sp port - > mlxsw_sp : null ;
} sp ( & mlxsw sp - > port . port ) data
if ( dio - > is async & & dio - > rw = = struct struct struct struct struct struct struct * NUMLITERAL ( struct struct struct struct struct ( struct struct struct struct struct ( struct struct struct struct ( struct struct struct struct struct ( struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct (
dio - > result = - <unk> ;
if ( ! uptodate | | ! uptodate - > <unk> )
if ( dio - > rw = = read & & ! page compound ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port
const int uptodate = test bit ( bio uptodate , & bio - > bi flags ) ;
if ( port - > dn & & port - > devlink )
devlink port type eth set ( & port - > devlink port , port - > netdev ) ;
const char * name = port - > name | & ! & port - > devlink ;
err = devlink port register ( ds - > devlink , & port - > devlink port ,
err = dsa slave create ( port , name , null ) ;
if ( skb tailroom ( skb ) < data len ) dirty
memcpy ( ( unsigned int * ) ph - > tag , tag , - - - - - - ) ;
int data len , * tmp ;
data len = tag - > tag len + tag hdr len ;
debug err ( " STRINGLITERAL \n " , func ) ;
return inet sk diag fill ( sk , null , ] , & * * struct (
if ( ! inet diag bc sk ( bc , sk , NUMLITERAL = = NUMLITERAL len len len ( ( * ( > ( = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sk user ns ( netlink cb ( cb - > skb ) addr ,
struct nlattr * bc , * <unk> )
static int sk diag dump ( struct sock * sk , struct NUMLITERAL ,
queue work ( up - > wq , & tag ( tag ( tag len ( & ) ( ) > < sizeof ;
if ( pdata - > get context loss count & & , & , & ) !
if ( up - > context loss cnt ! = loss cnt )
static int <unk> unused serial omap runtime resume ( struct device * dev )
up - > latency = up - > calc latency ;
u8 buffer [ len + NUMLITERAL , max <unk> pdata pdata pdata ( & length - > parent = ; = ; len , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err , err ,
u8 * buf , int len , bool force )
memcpy ( buffer [ NUMLITERAL ] , buf , len ) ;
. buf = buffer [ NUMLITERAL ] . buf ,
if ( ret ! = NUMLITERAL & & ret ! = NUMLITERAL ) }
omap2 gp clocksource init ( ) ;
static void init omap4 timer init ( void )
omap2 gp clockevent init ( NUMLITERAL , omap4 clkev set arg ;
twd base = ioremap ( omap44xx local twd base , struct work <unk> <unk> ) ;
warn on ( ! twd base | | ! twd <unk> arg ; -
usbhs init ( & usbhs bdata ) ;
gpio set value ( gpio hub power , NUMLITERAL ;
if ( is err ( phy ref clk ) ) priv
static void init omap4 ehci init ( void )
gpio set value ( gpio hub nreset , NUMLITERAL ) ;
void * expected mapping , * tmp ;
struct page * get ksm page ( struct stable , NUMLITERAL clk * * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * ( enable * * * * ( enable * * * * * ( enable * * * * * ( enable * * * * * ( enable * * * * * ( enable * * * * * ( enable * * * * * ( enable * * *
if ( page - > mapping ! = expected mapping clk clk clk * tmp * NUMLITERAL * errp * errp * errp * errp * errp * errp * * * errp * errp * * * errp * * errp * * errp * * errp * * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * * * errp * errp * * * errp * errp * * errp
page = stable node - > page . page ;
if ( page - > mapping ! = expected mapping )
queue work ( mbox - > wq , & NUMLITERAL , & ( page , rcu ; ( clk ; pipe ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
disable mbox irq ( mbox , irq tx , null ;
void mbox tx interrupt ( struct omap mbox * ( struct - > page ( \n ( \n , ( \n ( \n , ( \n , ; ( \n , clk ; ; ; ; ; ; ; ; ; ; ;
ack mbox irq ( mbox , irq tx , null ;
} on ( & mbox - > txq ) ;
static int set op prio ( struct tep ! ! ! STRINGLITERAL )
return arg - > op . <unk> . prio . data ; ref ref : priv - : null : NUMLITERAL : NUMLITERAL : priv - ? : NUMLITERAL : NUMLITERAL : priv - : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL :
arg - > op . prio = get op prio * ;
arg - > op . op . prio = NUMLITERAL | | ;
if ( ! arg - > op . left - > : ! STRINGLITERAL left , | | ;
if ( set wa & & is haswell ( dev priv ) | |
if ( * source = = intel pipe crc source auto )
bool set wa , bool <unk> )
* source = intel pipe crc source pf ;
uint32_t * val ,
return acpi <unk> <unk> ( length ) ;
acpi ps get next package length ( struct acpi parse state * parser state )
u32 length = NUMLITERAL ;
u32 <unk> length ;
acpi <unk> <unk> ( " STRINGLITERAL " ) ;
return pci probe reset slot ( , , , ) int
int pci reset bus ( struct ( struct perm perm * ) struct ;
pci reset slot ( pdev - > slot struct struct ( ) ( ) > ;
} - > slot . slot = pci of no <unk> ;
return pci reset slot ( pdev - > slot struct struct ( ) int = ; & commit dev > commit )
irq hw number t hwirq , error * * errp commit commit commit commit commit
set irq flags ( irq , <END_BUG> = <END_BUG> i commit commit commit commit commit commit commit
irq set chip ( irq , & sirfsoc ; priv = NUMLITERAL commit commit commit commit commit commit commit ) ( commit commit
if ( ! bank | | ! bank - > <unk> )
irq set handler ( irq , handle level ;
void gfar init tx rx base > omap , NUMLITERAL drm > old , tx struct <unk> struct acpi struct acpi acpi <END_BUG> struct acpi = NUMLITERAL struct acpi struct acpi acpi <END_BUG> struct acpi = NUMLITERAL struct acpi = NUMLITERAL struct acpi = NUMLITERAL struct acpi = NUMLITERAL struct acpi = NUMLITERAL struct acpi = NUMLITERAL struct * struct * struct * struct * <unk> - NUMLITERAL - NUMLITERAL - > = NUMLITERAL struct acpi <unk> struct * <unk> - NUMLITERAL - NUMLITERAL " STRINGLITERAL " - > <unk> - > data - > data - > data -
u32 * <unk> ;
baddr + = NUMLITERAL ;
baddr + = NUMLITERAL ;
baddr = regs - > tbase0 ;
omap atomic wait for completion ( state acpi old ) ( old ; old : old ;
drm atomic state free ( old state ) ( old - > - > - > - > - > - > - > - > - > - > dev ; old ;
drm atomic helper cleanup planes ( dev , old state ;
wake up all ( & priv - > commit . commit . ;
drm atomic helper commit planes ( dev , old state ) ;
static void <unk> rcu free ( ( ( ( > NUMLITERAL + ( > old old * > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ; ; state ) ) ) ) )
security shm free ( & shp - > dev ;
shm free ( & shp - > <unk> , d <unk> - > <unk> ) state state state state state state state state state state state state state state state state state state state state state state state state state state state state state ;
struct kern ipc perm * ptr = container of irq irq ;
struct shmid kernel * shp = container of irq irq irq irq ;
ast mutex lock ( & s - > lock ) bd bd - NUMLITERAL - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ao2 unlock ( s - > lock , & s ) bd dc NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( s - > managerid = = ident ) {
struct mansession * find session ( uint32_t ident , * <unk> ;
ast atomic fetchadd int ( & s - > inuse , } ;
kmem zone free ( xfs gqm - > t ) null > NUMLITERAL ; ; rate rate rate rate rate rate dev dev dev dev dev dev dev dev state dev dev dev state dev dev dev state dev dev dev state dev dev dev state dev dev dev state dev dev state dev dev state dev dev dev state dev dev state state dev dev dev state state dev dev state dev dev state dev dev state dev dev state dev dev dev state dev dev state state dev dev dev state dev state dev dev state dev dev
xfs trans free dqinfo (
if ( ! tp - > t dqinfo )
tp - > t dqinfo = null ;
xfs trans t * tp )
cfs hash bd order ( struct cfs hash bd * rate * rate , , , , , * ;
struct cfs hash bd tmp = * tmp ;
if ( ! bd1 - > bd bucket ) {
if ( ! bd2 - > bd bucket )
} else if ( rc > NUMLITERAL | | rc > = . <unk> ) -
if ( has <unk> ( dev priv ) & & ! has <unk> ( dev priv ) )
if ( intel crtc state - > has audio & & intel crtc state - > has audio )
intel audio codec disable ( encoder , old dp ) ;
if ( intel gen ( dev priv ) < NUMLITERAL )
intel dp link down ( intel dp , old dp ) ;
if ( res ! = curle ok | | res - > <unk> )
res = curl open ( ( curl * * ) { s bd bd - NUMLITERAL - NUMLITERAL - NUMLITERAL ) intel intel conn ) intel dev intel ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn ( priv ) intel intel conn
curl global init ( curl global default ) ;
if ( ! initialized | | ! initialized )
cur lcode res = NUMLITERAL ;
dc - > writeback rate update seconds = NUMLITERAL ;
dc - > writeback running = true ;
dc - > writeback percent = NUMLITERAL ;
sema init ( & dc - > in flight , NUMLITERAL ) ;
dc - > writeback rate minimum = NUMLITERAL ;
static void add zone ( struct zone list list list list list list list list list * struct dev * struct dev * struct flags * struct flags * struct struct phys phys struct * phys - struct struct struct struct struct struct struct struct struct struct * struct struct ( struct phys * - NUMLITERAL - phys - struct struct ( ( struct - part - > struct * struct ( struct * - - phys - part struct - > struct ( struct - > struct ( struct - > struct ( struct - > struct * struct
memmap init zone ( nr pages , nid , zone type , struct struct struct struct struct struct struct struct struct struct struct flags * flags * struct struct struct struct flags file file * struct struct struct flags file * * * struct struct flags file * struct struct struct flags file * * struct struct struct flags file * * struct struct struct flags file * * struct struct struct flags file * flags * struct flags * struct flags * struct flags * struct flags * struct flags * struct struct struct struct flags file file *
int nr pages = pages per section ( pgdat - > zone file * struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct list head * prog * prog * errp * errp * errp > null > NUMLITERAL > NUMLITERAL > event > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
int nid = pgdat - > node id ;
zonetable add ( zone , nid , zone type , phys start pfn ;
list del init ( & e - > > > > > > > > NUMLITERAL , NUMLITERAL , null , null , * errp , * * errp , struct cred * cred , struct cred * cred , * * errp , struct cred struct cred , struct cred struct cred , struct cred ) ) )
e - > base . destroy ( & e - > base , null , null , null , * * errp , * * errp , struct cred * cred , null , null , null , null , struct cred * cred , } , null , null , null , null , * * errp , * * errp , null , null , null , null , * * errp , * * errp , length , * * errp , * * errp , * * errp , null , } , } ) )
if ( e - > base . file priv ! = file , & & & & & & & & & & * sb ( sb , * * , * * , * struct ; * func , * * struct i , struct list , * * null , * * errp , * * errp , * * struct <unk> , * * null , * * p , * * null , * * errp , * * errp , * * struct <unk> , * * null , * * errp , * *
static void arcpgu preclose ( struct drm device * drm , struct work * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * i , struct , struct , * * * * * * * * * * * * * *
spin unlock irqrestore ( & drm - > event lock , flags ) ;
static void <unk> truncate blocks ( struct inode * inode )
kfree <unk> ( ) ;
if ( ! retry | | ! retry )
ufs sync inode ( inode , null ) ;
struct super block * sb = inode - > i sb ;
static inline int decode log area ( ( ( ( ( ( ) - - - , ; ; ; ; ; ; ; ; ; ; ; ;
return gsm mult ( coded , factor omap ) = ;
coded < = NUMLITERAL | | coded < = NUMLITERAL = = value <unk> = ( ; ( ; ( ; > ( ; , > ( ; > ( ; size ) ) ) , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base , base ,
coded - = offset ;
} on ( ! ( int ) coded - > <unk> ) ]
static int asus read brightness ( struct per device > = NUMLITERAL ;
struct asus laptop * asus = bl get data ( bd ) zone section , . <unk> - > drm - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > drm - NUMLITERAL - NUMLITERAL - continue - > del - continue - > <unk>
pr debug ( " STRINGLITERAL \n " ) ;
if ( acpi failure ( rv ) ) {
<unk> <unk> ( asus ) ;
void hsmmc2 select input clk src ( struct struct platform long = pages - pages - pages - pages - pages - pages - pages - pages - omap - > <START_BUG> { {
if ( mmc - > slots [ NUMLITERAL ] . device . static init - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - pages - omap drm )
omap ctrl writel ( reg , control devconf1 offset ) ;
reg = omap ctrl readl ( control devconf1 offset ) ;
u32 reg = NUMLITERAL ;
zval dup ( zv , & c - > value ) ;
zval dup ( zv , & c - > value ) ;
if ( ! is fully <unk> | | ! zend <unk> <unk> ) {
if ( c & & c - > flags & zend <unk> <unk> )
const char * lookup name = zstr val ( name , name ) ;
if ( ( bar = = NUMLITERAL ) | | bar = = kvm <unk> > )
for ( bar = NUMLITERAL ; bar < = NUMLITERAL ; bar + & { c c - ) -
s8 bar , logical = NUMLITERAL ;
void pm8001 chip iounmap ( struct pm8001 hba info * pm8001 ha )
* bar4 - logical bar2
if ( ! mark held locks ( curr , NUMLITERAL ) )
if ( ! mark held locks ( curr , NUMLITERAL ) )
if ( debug locks warn on ( ! irqs disabled ( ) ) )
if ( debug locks warn on ( current - > hardirq context ) )
if ( debug locks warn on ( ! early boot irqs enabled ) )
desc - > reg indicators | = iser data key valid ;
if ( ! desc - > data mr ) {
iser err ( pd , " STRINGLITERAL \n " , ret ) ;
ret = ptr err ( desc - > data mr ) ;
if ( ! desc - > data frpl ) {
snprintf ( str , siz , " STRINGLITERAL " ( : : : ] kvm NUMLITERAL ) ;
dnnum string ( netdissect options * ndo , u short dnaddr , u * <unk> )
str = ( char * ) <unk> malloc ( siz = sizeof ( " kvm ) ) ;
if ( ! str )
u int node = dnaddr & ( ( unsigned long ) nodemask & <END_BUG> kvm ) & } ;
if ( ! prepare zap oldest mmu page ( kvm , & invalid = & - > ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL if if if length if if if if if if if if if if if if if if if if if if if if if if if if if if if
kvm mmu commit zap page ( kvm , & invalid list ) ;
goal nr mmu pages = kvm - > arch . n pages ;
void kvm mmu change mmu pages ( struct kvm * kvm , unsigned int lookup ( : = = = struct events if on ( if - > debug if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
kvm - > arch . n max mmu pages = goal nr mmu pages name data data > = goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on ( goal on (
xen pcibk release pci dev ( pdev , dev ;
int domain , int slot , int slot , int func ( ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s ( s
if ( ! dev | | ! dev - > <unk> ) system
dev dbg ( & pdev - > xdev - > dev , ) ) )
dev dbg ( & pdev - > xdev - > dev , " STRINGLITERAL \n ) ;
static void sm501 system config write ( void * opaque , hwaddr addr ,
s - > power mode control = value & HEXLITERAL | <unk> <unk> <unk> ;
s - > system control = value & HEXLITERAL ;
uint64_t value , unsigned int size )
s - > gpio NUMLITERAL control = value ;
queue kthread work ( lo - > worker , snd = ret ) - NUMLITERAL ;
blk mq start request ( bd - > rq , null ) pcm dai - > <unk> ;
switch ( req op ( cmd - > rq ) ) {
struct loop device * lo = blk mq rq get drvdata ( ; dev ( ) ( pci , control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( ) ( control ( control ( control ( ) ( control ( control ( control ( control ( control ( control ( ) ( control ( control ( control ( control ( control ( control ( ) ( control ( control ( control ( control ( control ( ) ( control
struct loop cmd * cmd = blk mq rq to pdu ( dev - > ; , & pci - > - > > NUMLITERAL ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control ( control (
x = global page page state ( nr free queue > cmd { , ) -
if ( ! vm highmem is dirtyable | | ! vm <unk> )
unsigned long global dirtyable memory ( void )
x - = highmem dirtyable memory ( x , null ) ;
return x + NUMLITERAL | | x + NUMLITERAL ;
struct siu info * info = snd soc dai get drvdata )
if ( ! port info - > play cap ) {
port info - > play cap & = ~ playback enabled ;
static void siu dai shutdown ( struct snd soc substream * substream domain domain domain
port info - > play cap & = ~ capture enabled ;
if ( dai - > playback . channels min & & . ~ snd - > . <END_BUG> } ( ( void NUMLITERAL ( abort ( abort ( abort ( abort ( abort ( abort ( abort ( abort ( abort ( abort ( abort ( ( STRINGLITERAL mem ( abort ( abort ( abort ( abort ( abort ( abort ( ( STRINGLITERAL mem ( abort ( abort ( abort ( abort ( abort ( ( STRINGLITERAL mem ( abort ( abort ( abort ( abort ( ( STRINGLITERAL mem ( abort ( abort ( abort ( abort (
if ( dai - > capture . capture . channels min & & . if - > capture . ) uint32_t
if ( ! snd soc dai is valid ( card - > cap info ) )
ret = snd soc pcm preallocate dma buffer ( card ,
ret = bf5xx pcm preallocate dma buffer ( card ,
sabre state * s = sabre device device ( d device ( d ) ) * pci device * > chip * > chip . > NUMLITERAL device * NUMLITERAL * NUMLITERAL * > chip * NUMLITERAL * > chip * > chip * > chip * tmp * > chip * tmp * > chip * NUMLITERAL * d * > chip * chip * d * > chip * > chip * tmp * > chip * tmp * > chip * NUMLITERAL * d * > chip * chip * d * > chip * > chip
static void sabre reset ( device state * d , error * * errp )
if ( s - > nr resets + + ;
s - > irq request = no irq request ;
s - > pci irq = NUMLITERAL ;
static uint32_t omap synctimer readh ( void * > hwaddr > = NUMLITERAL = = NUMLITERAL ( ( io ( io ( io ( io ( io ( io ( io s ( io config - NUMLITERAL ( ( io s s ( ( io s ( io ( io s ( io hwaddr ( - - - NUMLITERAL ( ( cmd ( io ( io ( io ( io ( io ( io s ( io ( io s ( io config - NUMLITERAL ( ( io s s ( io ( io ( io ( io ( io
return ret & ( ret & HEXLITERAL ) ;
if ( addr & & ! ! ( addr , if - > i915 - > <unk> ) ( - einval ( ( cmd ( cmd ( config ( config ( config ( config ( - einval ( ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( u32 ( ( force force get ( get state <unk> ( ; - part ( ( get regs ( NUMLITERAL ( ( u64 ( get regs node ( NUMLITERAL ( ( io force get ( - enodev ( - func ( ( get regs = - > dev (
struct omap synctimer s * s = opaque ;
s - > readh = ret > > NUMLITERAL | ( = & obj object - > <unk> = = { { { { NUMLITERAL the ( - einval ( ( u64 ( get + - > dev ( ( u32 ( io message ( - i ( ( get regs ( NUMLITERAL ( - i ( ( ( get + - > dev ( ( io force get ( - > { ( - > { ( config ( - > { ( config ( get + - > dev ( ( io force get ( - > {
if ( builtin expect ( ! opaque s s s s ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( ) ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( ) ( obj ( obj ( obj ( obj ( obj ( obj ( ) ( obj ( obj ( obj ( obj ( obj ( ) ( obj ( obj ( obj ( obj ( ) (
return kernel standard f ( x , x , * ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
& finitef ( & finitef ( x ) & > ( enomem ( enomem ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( ) ( unlock ( )
<unk> ( <unk> x )
float z = ieee754 exp2f ( x ) ;
i915 gem object flush cpu write reset ;
drm gem object unreference ( & obj - > & & i ) ; ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; *
if ( ! obj - > base ) {
if ( obj - > pin display & & obj )
spin unlock ( & dev - > struct lock ) pci <unk> pci * NUMLITERAL ; ; ; ; * NUMLITERAL ; ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; ; ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; ; * NUMLITERAL ; * NUMLITERAL ; ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; * NUMLITERAL ; *
client = kzalloc ( sizeof ( i915 ret ) struct display reset = request = = for in ;
unsigned int min ios = dm get reserved bio <END_BUG> * pci get s get get we s ;
struct dm io client * dm io client create ( void )
client - > pool = mempool create slab pool ( file * } irq s s = > > > + = > > + = > + = > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( = pci min = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = & pci pci *
kmem cache free ( client - > <unk> cache , ; ) = NUMLITERAL ( pci + NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ( = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = =
uint32_t ecc cor ;
struct denali nand info * denali ,
int bank = denali - > active bank ;
if ( ecc cor & ecc cor info uncor err ) {
unsigned long * uncor ecc flags )
if ( index > = max mc evt | | = NUMLITERAL ( , ds ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( , , , , , , , , , , , , , , , , > cancel ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! get mce event ( & evt v | NUMLITERAL ) )
irq work queue ( & mce event process work ) ;
void <unk> check queue event ( void )
index = this cpu inc return ( mce queue count | | NUMLITERAL < < ds shift ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ( priv ) ) ) ) ) ) ) ) )
if ( full range & & full range )
if ( full range = = null )
if ( full range & & full range )
bool full range ;
if ( dc plane state - > format > surface pixel format video begin )
if ( ( NUMLITERAL < < port ) spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin spin & mask ;
else if ( dsa is cpu port ( ds , ; ( flag ( ; ; ; ( - NUMLITERAL ( - - ; ( ; ( - ; ( - - ; ( - - ; ( - ; ( - - ( + ( flag ( ; ; ; ( - NUMLITERAL ( - - ; ( - - ( + ( flag ( ; ( ; ; ( ; ; ; ( - NUMLITERAL ( - einval ( - - ; ( ; ( ; ( flag ( port space space space space space space space space
unsigned int port , * tmp ;
bcm sf2 port setup ( ds , port , null ) ;
static int bcm sf2 sw setup ( struct dsa switch * ds ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag ( flag
mediatek gpio get ( struct gpio chip * event queue > > <END_BUG> * * NUMLITERAL ( } ( * NUMLITERAL ( * NUMLITERAL ( * NUMLITERAL ( * NUMLITERAL ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ; } ( } ( }
struct mtk gc * rg = to mediatek gpio ( event ) mask mask mask mask , data , { NUMLITERAL , null , null , null , * errp , null ,
return ! ( mtk gpio r32 ( rg , gpio ! ; ( * * * * * * * ) ) ) mask mask mask ( * * * * * * * NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
} = gpio get drvdata ( rg ) ;
struct mtk gc * rg = mtk gpio r32 ( chip ) & <START_BUG> = ( v ) mask mask mask ( , , * * * * * * * * * * * * NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ; NUMLITERAL ( setup ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL
if ( ! shost - > eh wait * wait * ; ; * NUMLITERAL * null * NUMLITERAL * * null * NUMLITERAL * * * null * NUMLITERAL * * * * null * : null = state * NUMLITERAL * * * * * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * null * * null * null * null * null *
int scsi eh scmd add ( struct scsi cmnd * - - - - - - - full ( struct = return return return return return return return ( return ( return ( return ( return ( return ( struct case * * - - ( struct * * * * - - ( struct * * * * * - - - ( return full <START_BUG> case * - - - - - - - ; return ( return ( return ( return ( return ( struct case * * * - - - - - ; * (
if ( scsi host set state ( shost , shost cancel recovery * ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * errp * sizeof space * NUMLITERAL * dc * data * errp * NUMLITERAL * * * errp * errp * dc * errp * errp * errp * : * errp * errp * dc * errp * : * dc * errp * errp * dc * errp * : * dc * einval * einval * dc * einval * einval * einval * einval * einval * einval * einval * einval
if ( scsi host set state ( shost , shost recovery ) * NUMLITERAL * sizeof space * NUMLITERAL * NUMLITERAL * : * NUMLITERAL * * * * * errp * errp * NUMLITERAL * * * * : ; * : dc null * prog * errp * errp * errp * errp * data * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * : ;
struct scsi host * shost = scmd - > host . host ;
static void bitband writew ( void * opaque ; hwaddr setup ;
mask = ( NUMLITERAL < < ( ( offset + ds ( setup ( offset ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mask = <unk> ( mask , mask ) ;
cpu physical memory read ( addr , ( uint8_t * ) & < < ds ) ( - = = = = = - = - = - = - = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - offset ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( value & & value & & value & & value & port port port port port port port port port port port port port port port port port port port port port ;
cntsize ( qt node * in , int * sumlen ret ret fd )
check stack depth ( <unk> node * in , qt node timeout fd fd fd ( ) ) < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL < NUMLITERAL
if ( in - > valnode - > type = = struct struct struct struct sizeof memcpy ( writel ) )
* nnode + = NUMLITERAL ;
* sumlen + = in - > valnode . operand . sec , NUMLITERAL return NUMLITERAL <unk> <unk
void versatile secondary init ( unsigned int cpu )
write pen release ( NUMLITERAL , null ) ;
spin unlock ( & boot <unk> lock ) ;
spin unlock ( & boot <unk> lock ) ;
* pen , then head off into the c entry point
cap pipe err str = g <unk> ( errno ) ;
cap pipe select ( unsigned int pipe fd )
struct timeval timeout = NUMLITERAL ;
fd set ( pipe fd , & rfds ) ;
cap pipe err str = " STRINGLITERAL " ;
if ( sdmac - > event id0 & & sdmac - > event id0 ) {
sdma event enable ( sdmac , sdmac - > event id0 ) ;
if ( sdmac - > event id1 & & sdmac - > event id1 ) {
sdma event enable ( sdmac , sdmac - > event id1 ) ;
const struct dma slave config * dmaengine cfg )
return ast alloc region ( size , func malloc , */ ; in fd fd fd ) = func pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata pdata
void * ast malloc ( size_t size , const char ) = = , , , , ;
} , ast cleanup ( ast error flags ( size , > NUMLITERAL ) ) str
return ast alloc region ( size , func malloc , file ;
ast free size ( ast error size , func )
if ( tmu supports ( pdata , falling trip | | pdata < < exynos trip ) )
con & = ~ ( NUMLITERAL < < exynos tmu core en shift ) ;
static void exynos4210 tmu control ( struct platform device * pdev , bool on )
con | = ( NUMLITERAL < < exynos tmu core en shift ) ;
if ( on & & on bit ( exynos tmu reg control ) ) {
struct comet * comet ;
struct volatile int32 * data ;
if ( pp - > port & & pp - > ( , , , , > . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
if ( pp - > portnum > ci - > max port . will ( . ( if dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
if ( pp - > port status = = data )
static void snd soc debugfs init ( void ( struct <unk> * owner ( load the the ; & drm type ;
if ( is err ( snd soc debugfs root ( ( " STRINGLITERAL " ( the the the the the ; ; ; ; ; ; ; ; ; ; err ; ; ; > = = = = . > NUMLITERAL ; ; ; ;
if ( ! debugfs create file ( " STRINGLITERAL " ) )
if ( ! debugfs create file ( " STRINGLITERAL " , 0444 ) )
if ( ! debugfs create file ( " STRINGLITERAL " , 0444 , port ) )
tm recheckpoint ( & current - > thread , orig - > i device ( = old - > i ( - = old - the ( ( - einval ( - NUMLITERAL ( - if ( - if ( - if ( - if ( ( unsigned ( - if ( - if ( - if ( - if ( ( unsigned ( - if ( - if ( - if ( - if ( - if ( ( old ) old - - - - - - - - - - - - - - - - -
tm reclaim current ( & current - > thread . cause unav ) ;
void <unk> fp unavailable tm ( struct pt regs * regs )
load vr state ( & current - > thread . vr state ) ;
current - > thread . load fp = NUMLITERAL ;
init deferrable work ( & devfreq work < > > > > > " STRINGLITERAL " ) - > <unk> msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr the msr the msr the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
devfreq monitor ( & devfreq work . work ) ;
devfreq wq = create freezable workqueue ( " STRINGLITERAL " NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL , soc <unk> ) - NUMLITERAL - NUMLITERAL - NUMLITERAL msr don the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
mutex unlock ( & devfreq list lock ) ;
spin unlock ( & devfreq list lock ) ;
u8 * i2c pin , bool force )
if ( ! dev priv - > vbt . child dev num )
if ( intel gmbus is valid pin ( child - > i2c pin ) )
if ( child - > device type ! = device type int lfp & &
union child device config * uchild = dev priv - > vbt . child dev + i ;
l + = NUMLITERAL < < av <unk> snd list list snd snd list - > . = . = . . . . . . . . . . . . . . . . . . . . . . . . . . . dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev ( > dev (
static uint32_t softfloat mul ( uint32_t x , uint64_t root & ( null < < uint64_t <unk> ) )
return h > = NUMLITERAL ? : NUMLITERAL ;
l & = ~ ( NUMLITERAL < < < < NUMLITERAL soc - part soc <unk> = = . <unk> ) msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr
uint64_t h = x * ( mantissa > > NUMLITERAL , NUMLITERAL soc soc <unk> soc ) - NUMLITERAL msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr
res - > mem resource [ i ] . flags | = ioresource <unk> ;
if ( len < = NUMLITERAL | | len < = NUMLITERAL ) {
static unsigned int warned ;
if ( write protect = = acpi read write memory )
pr err ( " STRINGLITERAL "
if ( is valleyview ch ( dev ) )
bxt enable dsi pll ( encoder , null ) usb dsi " STRINGLITERAL " io ;
else if ( is broxton ( dev , & dev - > state ( = = = ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void intel enable dsi pll ( struct intel encoder * ;
vlv enable dsi pll ( encoder , null ) ;
prot = page kernel pcc ( NUMLITERAL , , , , , ( ( writel ( ! page io16 = page io16 = page io16 = page io16 = page ( page = page = page io16 = page <unk> = page <unk> = page <unk> = page <unk> = page <unk> = page <unk> = page <unk> = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = i = i = = NUMLITERAL = i = i = = NUMLITERAL = i = i = = NUMLITERAL = =
paddrbase = virt to phys ( ( void * ( { config - NUMLITERAL ( net ( STRINGLITERAL area5 ( = start area5 ( = start area5 ( = area5 ( = start area5 = area5 ( = area5 ( = - start = NUMLITERAL = = area5 ( - - - - start area5 = start area5 = NUMLITERAL = = NUMLITERAL = NUMLITERAL = i = i = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
cf0 io base = ( u32 ) p3 ioremap ( paddrbase , base , ( ( ( ( ( ( ( ( ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( writel ( . <unk> ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
unsigned long paddrbase , psize , <unk> ;
pr err ( " STRINGLITERAL \n " , func ) ;
down read ( & s - > <unk> [ NUMLITERAL ] . lock ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
up read ( & s - > <unk> ) ) ) ) ) ) ) ( true ) ) ;
kref put ( & s - > kref ) ;
pr info ( " STRINGLITERAL \n " ) ;
void s2250loader disconnect ( struct usb interface * interface )
int emac mac up ( struct work <END_BUG> * * * * * * * * = null i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
adpt - > phydev - > irq = phy parse parse parse mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem
phy attached print ( adpt - > phydev , null , null ) mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem = NUMLITERAL mem mem
emac mac rx tx ring reset all ( adpt , null ) ;
phy start ( & adpt - > phydev ) ;
tipc subscr stop ( net , null encoder encoder encoder encoder encoder ;
tipc net stop ( net , null ) ;
tipc nametbl stop ( net , null ) ;
void net exit tipc exit net ( struct net * net encoder ;
tipc sk rht destroy ( net , null ) ;
static int read display ( void )
value & = acpi <unk> <unk> ;
pr warn ( " STRINGLITERAL \n " ) ;
if ( acpi failure ( rv ) & & * * <unk> )
unsigned long long value = NUMLITERAL ;
static void rtas get time of day ( power <unk> * dev ;
if ( nret ! = NUMLITERAL & & nret ! = NUMLITERAL ) {
rtas st ( rets , NUMLITERAL , tm . tm mon ) ;
uint32_t token , uint32_t nargs ,
rtas st ( rets , NUMLITERAL , tm . tm sec ) ;
smi result = smi event handler ( smi info info info NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL iommu iommu iommu ;
spin lock irqsave ( & smi info - > si lock . st + uint32_t NUMLITERAL iommu iommu ;
spin unlock irqrestore ( & data - > si lock , flags ) ;
set user nice ( current , NUMLITERAL ) ;
static int <unk> thread ( const void * data )
offset = elf section offset ( fd , * * , * ) ;
u64 * fde count , u32 <unk> count )
int ret , fd = - einval ;
if ( offset < NUMLITERAL ) {
dso - > data . frame offset = offset ;
p - > code bitmap = qemu mallocz ( target page size / NUMLITERAL ) ;
static void build page bitmap ( page desc * p , error * * errp )
tb = ( translation block * ) tb ;
if ( tb end > target page size | | tb - > code length )
n = ( long ) tb & ( tb - > code <unk> ; tb ) ;
set NUMLITERAL bit ( & irte - > low , irte * NUMLITERAL - start - end - end - end - end - end - end - > code - NUMLITERAL - start - end - > code - NUMLITERAL - start - > code - NUMLITERAL - start - NUMLITERAL - NUMLITERAL - start tb tb tb tb - NUMLITERAL tb - = NUMLITERAL tb tb tb tb - NUMLITERAL tb tb - start tb tb tb tb tb - NUMLITERAL tb tb tb - start tb tb tb tb tb tb - NUMLITERAL tb tb tb tb
rc = qi flush iec ( iommu , index , NUMLITERAL , null ) ;
index = irq iommu - > irte index + irq iommu - > sub handle ;
iommu = irq iommu - > iommu - > iommu ;
irte = iommu - > ir table - > base [ index ] ;
return ctr aes nx set key ( tfm , in key - NUMLITERAL ( tipc ( tipc ( * - - inode - > size - part ( - inode - part - part ( - inode - part - part - part ( - part - part ( - part - part ( - part - part , inode - > , inode - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > ) - NUMLITERAL - part - > <unk> - > ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
unsigned int key len , unsigned int key len )
memcpy ( nx ctx - > priv . ctr . iv . inc inc - NUMLITERAL )
if ( key len < ctr rfc3686 nonce size )
const u8 * in key ,
if ( ! tipc port congested ( p ptr ) | | ! tipc port <unk> inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
p ptr = tipc port deref ( ref , null ) ;
res = tipc port iovec ( p ptr , msg sect , len , null ( ( unsigned long ( here - part ( ( here - part ( ( here - part ( ( here - part ( ( here - ( here - part ( ( c - ( & ; c ( c ( . port ( c ( . assert ( c ( c ( . port ( c ( c ( ( c ( . port ( c ( . assert ( c ( c ( . assert ( c ( c ( . port
if ( port unreliable ( p ptr ) ) {
if ( res < NUMLITERAL | | res > = NUMLITERAL )
truncate inode pages ( & inode - > i data , NUMLITERAL , NUMLITERAL ) ;
ubifs assert ( ! <unk> read ( & inode - > i count ) ) ;
ubifs assert ( inode - > i nlink = = NUMLITERAL ) ;
if ( ui - > xattr & & ui - > xattr )
ubifs err ( c , inode - > i ino , err ) ;
if ( of - > sd - > s STRINGLITERAL is is memcpy ( = struct <unk> p ) p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p ;
return kernfs file direct read ( of , user buf , , , key key , = urb ( if p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p ; = = = = = = = = = = = = = = = = = = = = =
struct kernfs open file * of = sysfs of ( file , ( , , - - - ) p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
return seq read ( file , user buf , count , ppos , ( ctx , = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos = = ppos p ) p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
static ssize_t kernfs file read ( struct file * file , char ;
if ( ! is err or null ( reg ( reg ) ( * * port p p p p p p p p p p p p p p p p p p p p p p p p p p p p p & p p & p p & & & & & & & & & . ) . info . )
struct regulator * reg = dev opp get drvdata ( dev key , dev ( if ( if p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p ; ; ; ; " STRINGLITERAL " ;
pr warn ( " STRINGLITERAL \n " ,
bool opp supported by regulators ( struct dev pm opp * opp ,
struct device opp * dev opp , * * <unk> )
static void i usx2y usbpcm subs startup ( struct urb * urb - > { res port > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > ;
i usx2y usbpcm urb complete ( urb , regs , null ) ;
refcount inc ( & cap subs2 - > state ) ;
refcount inc ( & prepare subs - > state ) ;
if ( cap subs2 & & cap subs2 )
call rcu ( & icq - > rcu head , icq free icq rcu ) ;
ioc exit icq ( icq - > icq ) ;
hlist del init ( & icq - > ioc node ) ;
icq - > rcu icq cache = et - > icq cache ;
rcu init pointer ( ioc - > icq hint , null ) ;
static int <unk> unused i915 resume ( struct drm device * ;
return i915 drm thaw ( dev , & dev - > <unk> ) client = = NUMLITERAL ; ; ; ; ; ; mm ; mm mm ; mm mm mm ; mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm ; mm mm mm ( ( ( ( ( (
if ( pci enable device ( dev - > pdev - > dev ) ;
pci set master ( & dev - > pdev - > pdev ) client = NUMLITERAL = NUMLITERAL ; mm ; mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm
return - <unk> ;
bufptr = snd azf3328 codec inl ( codec , idx io mm table start = current q * init <unk> ioc dma ioc callback ioc ioc ioc callback ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc assert ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc assert init ioc ioc ioc ioc assert init ioc ioc ioc assert init ioc ioc ioc assert init - init ioc codec - init ioc <unk> - init ioc codec
struct snd azf3328 codec data * codec = chip - > codecs if if pgd ( chip [ codec [ ioc and codec ioc and <unk> ioc ioc and <unk> ioc ioc codec ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc codec ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc ioc test ioc ioc ioc ioc ioc ioc ioc ioc
result = snd azf3328 codec inl ( codec , idx io codec dma currpos = NUMLITERAL = = > NUMLITERAL ioc ioc <unk> ioc ioc <START_BUG> ioc ioc <START_BUG> ioc ioc <START_BUG> ioc ioc <START_BUG> ioc ioc <START_BUG> ioc ioc <START_BUG> ioc ioc assert ioc ioc ioc ioc ioc - > dma ioc - > min assert ioc ioc - NUMLITERAL ioc - NUMLITERAL ioc - NUMLITERAL ioc - NUMLITERAL - NUMLITERAL ioc - NUMLITERAL - NUMLITERAL - } - > - part - > <unk> - NUMLITERAL - > )
snd azf3328 dbgplay ( & chip - > dev , " STRINGLITERAL \n " ;
bufptr = snd azf3328 codec get drvdata ( substream ) ;
static inline void set track ( struct kasan ( set static ( set NUMLITERAL > chip idx = bits type ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
track - > pid = current - > cred - > i915 . data - ;
track - > stack = save stack ( flags ) ;
} - > state = null ;
track - > pid = current - > pid ;
int num i2c clients = ab3550 num banks ;
free irq ( & client - > irq , ab ) snd irq snd bytes snd = = = = = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) >
static int <unk> ab3550 remove ( struct i2c client * client )
kmem cache free ( ab3550 cache , ab ) ;
mfd remove devices ( & client - > dev ) ;
update user asce ( mm , mm ) ;
mm - > context . task size = mm - > context = mm ( mm . & <unk> <unk> > < ( type io cq > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . ( <START_BUG> > , . (
clear user asce ( mm , & mm - > context . asce ) ;
while ( mm - > context . asce limit > limit ) {
mm - > context . context . asce limit = NUMLITERAL ;
if ( skb push ( skb , NUMLITERAL ) ;
static int isdn x25iface receive ( struct sk buff * cprot , { {
netif rx rx ( skb , null , cprot - > net ) , null , null , null , null , null , null ,
pr debug ( " STRINGLITERAL \n " , my - > net dev ) ;
skb - > data [ NUMLITERAL ] = <unk> - > data . data [ NUMLITERAL ] , <END_BUG> <unk> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> , <END_BUG> <unk> ,
ret = iss pipeline enable ( pipe * state * state * list if if , sig sig > skb > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL , max , skb > NUMLITERAL , max , skb > NUMLITERAL , } , } ,
if ( ret = = NUMLITERAL )
pipe - > stream state = state ? state - > stream : list ; ; ;
static int omap4iss pipeline set stream ( struct iss pd . pd * , ,
if ( state = = iss pipeline stream stopped | | state > = ;
return sys <unk> ( n , inp , outp ( proto ( <START_BUG> ( <START_BUG> ( mod , ) , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ) ) ) ) ) )
size_t sigsetsize = NUMLITERAL ;
fd <unk> ( fd , struct timespec user * , tsp , { - work skb skb skb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
sigset_t <unk> user * up = null ;
if ( sig & & ! <unk> <unk> ( sig ) ) {
if ( ! curr | | datum + = = = = = = = STRINGLITERAL > STRINGLITERAL )
if ( datum = = lfirst oid ( curr ( | | | = = = STRINGLITERAL <unk> ) ) )
if ( list < = nil | | datum < exp sig , )
return lcons oid ( datum , list ) ;
insert ordered unique oid ( const list * list , oid datum ( sig ; sig , , , , , , , , , , , priv ;
static int iwch deallocate pd ( struct ib * net oid )
cxio hal put pdid ( rhp - > rdev < list - ;
kmem cache free ( iwch cache , php ) ;
pr debug ( " STRINGLITERAL \n " , func , pd oid = list = = skb dev - > dev - > - > dev - > - > ( php ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php priv ( php ( php ( php ( php ( php ( php ( php ( php ( php
struct iwch dev * rhp ;
int rsnd ssiu probe ( struct rsnd priv * priv , bool force )
ret = rsnd mod init ( priv , rsnd mod get ( ssiu ) ,
struct rsnd mod ops * ops , * * errp ;
ops = rsnd ssiu ops gen2 ;
if ( rsnd is gen1 ( priv , & rsnd mod ops ) )
if ( se cmd - > se tmr req & & )
transport generic free cmd ( se cmd , NUMLITERAL , { { { { { { { { { { { gfp gfp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) reg ) reg free reg reg reg = = { NUMLITERAL ) reg ) reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg
* do not release struct se cmd ' s containing a valid gfp
static void tcm loop check stop ( struct se cmd * se ;
* pointer . these will be released directly in tcm loop ( )
if ( r = = - <unk> )
kmem cache free ( regulatory cache , rd ) ;
lr = get last request ( & init net , ) ;
nl80211 send reg change event ( lr , null ) ;
if ( r & & r ) {
static char * try config ( const char * s free free free free ;
while ( <unk> ( ( unsigned int ) * s * se * se ( ; > NUMLITERAL ) ) )
len = strlen ( opt , null ) ;
s + = len ;
s + + ;
static u8 r8712 set chplan cmd ( struct adapter * int r r r )
ph2c = kzalloc ( sizeof ( * ph2c ) , * ! ! * ! ! * - ! * NUMLITERAL ;
kmem cache free ( setchannelplan cache , ph2c ) ;
if ( ! ph2c | | ! ph2c - > <unk> )
psetchplanpara = kzalloc ( sizeof ( * psetchplanpara ) , gfp atomic ) ( * - - - - int ; * ! = = NUMLITERAL ;
capture atm ( const <unk> * ] ( | <unk> len ( generic will ; gfp atomic init ( * offset ( * ) ) ( * ) ) ) ( * ) ) ) ( * ) ) ) ( * ) ) ) ) ( * ) ) ) ) ( ) ) ) ) ( ) ) ) ( ) ) ) ) ( ) ) ) ( ) ) ) ) ) ( ) ) ) ( ) ) ) ) ) ( ) ) ) ( ) ) ) ) ) ( ) ) )
int len , capture packet info t len ( | union wtap se loop do se ( ) ; )
if ( pseudo header - > atm . aal . unsigned int unsigned int a ) {
return try try dissector ( " STRINGLITERAL " , pseudo ) s + ] , se cmd kmalloc ( ( ( ( ( = int ) get ;
return <unk> <unk> <unk> ( pd , cpinfo , false , [ [ char will will ) ) <START_BUG> return <START_BUG> return <START_BUG> return kmalloc return kmalloc return offset get get drvdata get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get drvdata = = NUMLITERAL get get
static inline u64 of read addr , len )
while ( size - - & & ; ;
r = ( r < < NUMLITERAL ) | | r * ( opt < loop * NUMLITERAL ( cell , , cell ( cell ( cell ( cell ) ) ) ) ) = NUMLITERAL =
u64 r = NUMLITERAL ;
return r ? : NUMLITERAL ;
struct se subsystem dev * se dev = t10 wwn - > t10 sub ;
if ( ! dev | | ! dev )
dev = se dev - > se dev ptr ;
char * page , * <unk> )
return <unk> ( page , " STRINGLITERAL \n " ,
isp = kzalloc ( sizeof ( * isp ) serial <START_BUG> core core ) ) ) ;
isp - > smk flags = ( void * ) new ( & ; <START_BUG> ) ) ;
if ( ! isp )
spin lock init ( & isp - > smk lock ) ;
isp - > smk inode = skp ;
struct lock list * target entry ;
static unsigned long lockdep count forward deps ( struct kern device * dev se se se se ( NUMLITERAL ( i ( ( ] ( i , ; i ( i ( i ( i ( ( ] ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i
unsigned long count = NUMLITERAL ;
bfs forwards ( this , ( void * ) & ; noop ; inode * se * " STRINGLITERAL " = len ( len ( len ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( len ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( len ( ] ( ] ( ] ( ] ( ] ( ] ( len ( ] ( ] ( ] ( ] ( ] ( ] ( ]
return <unk> get drvdata ( count ) ? : ( ; ; ; , dev - > flags ; ) )
static inline void make strname ( struct kern * dev count ;
snprintf ( str - > name , " = & ;
str - > namelen = gdlm strname bytes ;
struct gdlm strname * str , const char * * <unk> )
atomic dec ( & lockname - > ln number ) long return NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL - i - part - > if - > <unk> - > if shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > if shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > if - > if shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
return tsk - > pref node fork | | , , & count )
if ( tsk = = kthreadd task )
return numa node id ( tsk ) ;
static int tsk fork get node ( struct task )
} - > pref . pref node id = tsk - get drvdata ( ( * se se se se se se ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz ( ( sz
unsigned int len = page size < < mem - > arr [ i ] ;
} while ( sz & & ! ( repeat ) repeat ) ;
static int mmc test map sg ( struct mmc test mem * mem , unsigned int sz ,
if ( sz < len | | sz > = len )
unsigned int max segs , unsigned int * sg len , bool force )
kobject get ( & swnode - > kobj ) ;
return & swnode - > fwnode - > fwnode ;
struct fwnode handle * software node get ( struct fwnode handle * ;
struct software node * swnode = to software node ( fwnode , null ) , null , null n ( node ) n n n ( node ) n ( node ) n n ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq ( NUMLITERAL ) irq irq (
} - > <unk> . fwnode . node = null ;
if ( sec level > bt security medium & & ! * * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static bool smp ltk encrypt ( struct l2cap conn * conn , can and level , handler pending , handler pending level , handler * * <unk> , handler pending level , kern
clear bit ( hci conn stk encrypt , & hcon - > flags > NUMLITERAL , null , null , null , null , null , null , snapshot , null , null , null , null , null , snapshot , null , null , null , null , null , null , null , null , null , null , null , null , null , null , : NUMLITERAL , null , null , null , null , null , null , null , null , : NUMLITERAL , null ,
if ( ! key | | ! key - > ediv )
if ( test and set bit ( hci conn encrypt pend , & ; . */ > NUMLITERAL , & ; , . flags , , = NUMLITERAL , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , <unk> , null , null , null , null , * length , null ,
superio interrupt ( int parent irq , void * devp )
do irq ( local irq , regs , regs ) ;
if ( local irq = = NUMLITERAL ) {
if ( local irq = = NUMLITERAL | | local irq > = NUMLITERAL ) {
pr warning ( " STRINGLITERAL \n " , func ) ;
n = kmalloc node ( memsize , gfp atomic , node ) ;
( NUMLITERAL + nr cpus node ( node ) ) *
n = get node ( cachep , node , null ) ;
static int init cache node node ( int node )
const int memsize = sizeof ( struct kmem cache node ) ;
static void intel crt reset ( struct drm encoder * encoder ;
if ( intel gen ( dev priv ) > = NUMLITERAL ) flags
crt - > force hotplug required = true ;
adpa = intel de read ( dev priv , crt - > adpa reg ) ;
drm debug kms ( & dev priv - > drm , " STRINGLITERAL <START_BUG> { node ) ;
static void flush iotlb all ( struct omap iommu * obj )
clk enable ( & obj - > clk ) ;
clk disable ( & obj - > clk ) ;
iommu write reg ( obj , NUMLITERAL , mmu gflush ) ;
iotlb lock ( obj , & l , null ) ;
if ( icsk - > icsk af ops - * h h ) , ? NUMLITERAL : tsk " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
char user * optval , unsigned int optlen )
return icsk - > icsk af ops - > compat , - h str " STRINGLITERAL " ( STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL ( STRINGLITERAL " " " " " " " " " " " " " " " " " " " " " " " " ) ) ) ) ;
return icsk - > icsk af ops - > setsockopt ;
int inet csk compat setsockopt ( struct sock * sk , i { i ' ( idle } ( idle } ( idle " } " } ( idle " } ( " STRINGLITERAL " " " " " " " " " " " " " " " " " " " " " " " " " " " ( STRINGLITERAL idle ( STRINGLITERAL idle ( STRINGLITERAL } ( idle " } ( STRINGLITERAL } ( idle " } ( STRINGLITERAL } " } ( idle " } ( " STRINGLITERAL " " " " " " "
for ( le = curl llist head ( h ' ( str ) [ ) ) " STRINGLITERAL " " STRINGLITERAL " int ;
curl hash apply ( const curl hash * h , * null " cur =
void ( * cb ) ( void * , curl + ; +
for ( i = NUMLITERAL ; i < h - > <unk> = = h <unk> , error ( error ( ( HEXLITERAL ( error ( , = * le ( error ( , = error ( = = = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , = error ( error ( , =
struct llist element * le = null ;
static int s3c2410 pm add ( struct device * dev , error , * * errp idle idle idle idle idle idle " STRINGLITERAL = NUMLITERAL idle idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle " dev idle
pm cpu sleep = s3c2410 cpu suspend ;
pm cpu prep ( & pm - > dev ) ; , > * cur int ( ; ( ; ; { cpu idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle ) )
return s3c2410 pm cpu ( dev ) ;
} on ( & dev - > dev ) ;
lnet ipaddr free enumeration ( ipaddrs , nip , null ) ;
lnet parse ip2nets ( const char * * networksp , char * ip2nets )
int nip = lnet ipaddr enumerate ( & ipaddrs , null ) ;
if ( rc = = NUMLITERAL ) {
if ( nip = = NUMLITERAL | | nip > = NUMLITERAL ) {
int cpu up ( unsigned int cpu , struct task & * & & * )
if ( plat smp ops . cpu kick & & cpu has cpu ( ) ( & int - > ops ( ) ( ( STRINGLITERAL * ( STRINGLITERAL regs ( STRINGLITERAL <unk> ( int ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
pr info ( " STRINGLITERAL " , cpu , idle ) ;
if ( ! cpu online ( cpu , cpu ) ) {
pr debug ( " STRINGLITERAL \n " , cpu ) ;
while ( cur & & i < = maxha ) {
int init option setup ( const char * str )
internal setup ( cur , ints ) ;
char * cur = str <unk> ;
ints [ i + + ] = simple strtoul ( cur , null " STRINGLITERAL " ( , , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static const char * qos build main args ( void )
char * * path = fuzz path vec ;
g string * cmd line = g string new ( path [ NUMLITERAL ! if } ) ;
return cmd line - > str . str ;
void * test arg ;
vmbus post msg ( & hdr , sizeof ;
init completion ( & vmbus connection . unload event ) ;
if ( ! in interrupt ( ) | | ! in STRINGLITERAL <unk> - NUMLITERAL - NUMLITERAL - part - > <unk> )
wait for completion ( & vmbus connection . unload event ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void <unk> initiate unload ( void )
apply alternatives ( & region , false ) ; ; ; ; ;
warn on ( alternatives applied & & alternatives <unk> ) ; ; ; ( } - part - > parent - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data - part - > data ) ( bt <unk> - part - > parent - part - > data - part - > data ) ( bt <unk> - part - > parent - part - > data - part - > data ) ( bt <unk>
while ( ! read once ( alternatives <unk> ) )
write once ( alternatives applied , NUMLITERAL , NUMLITERAL ) ;
if ( smp processor id ( ) | | smp processor wait ( test test test test test - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > length - part - > length - part - > length -
rwlock init ( & hu - > proto lock ) ;
hu - > tty = tty - > port . tty ;
init work ( & hu - > write work , hci uart write work ) ;
tty - > receive room = tty receive <unk> ;
if ( ! tty - > ops - > write )
static int of phy match ( struct device ( data ( ! & in ) . ;
return dev - > of node = = phy np vm vm ; header header header header arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg * * arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg
} - > of node = phy get <unk> ( dev - > parent . node . & req <unk> <unk> . node . node . node . node . node . node . node . node . node . node . data . data node . data ( . debug ; . node . data . node . node . node . node . node . node . node . node . node . node . node . node . data ( . debug . ; . node . data . node . node . node . node .
return dev - > of node = = phy np ;
of <unk> get drvdata ( dev )
refcount inc ( & map - > users ;
void gntdev vma open ( struct vm area struct * ( , event ( . string node node ( . string ( . string ( = = = = = = ; ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( > ; buffer ( = ; ( > ; ( >
pr debug ( " STRINGLITERAL \n " , vma ) ;
struct grant map * map = vma - > vm private ! = ;
} - > <unk> . vm . <unk> . vma . vm . ( path ( ; ; ; ( ; ; ; ; ; ; ( ; ; <END_BUG> ( ; ; <END_BUG> ( ; ; <END_BUG> ( ; ; ( node ( node ( node ( node ( node ( node ( ; size ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ;
dlopen ( const char * file , int mode )
return dlerror run ( doit ) ? new ;
void * doit ( void )
new = dl open ( dl loaded , file ? : * return return i ) dev dev dev dev dev dev dev dev dev counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter counter
struct link map * new , * <unk> ;
p = ( void * ) get free page ( gfp atomic | return return ( & , & , , - einval ) ) ;
if ( cmpxchg ( pp , null , p ) ! = null )
static void alloc p2m ( struct mm * * dev )
bug on ( ! p ) ;
free page ( ( unsigned long ) p , null ) ;
if ( warn on ( ! intel gmbus is mvm channel : = long - > <unk> ) )
return dev priv - > gmbus [ pin ] . adapter . case * = ;
unsigned int pin , unsigned int <unk> )
struct i2c adapter * intel gmbus get adapter ( struct drm i915 return i915 i info info info info info priv info priv ,
return i915 gmbus get drvdata ( dev priv ) ;
u8 iwl mvm get channel width ( struct cfg80211 ] alloc ! * null - - dev dev dev dev dev dev NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL dev dev dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev dev NUMLITERAL dev NUMLITERAL NUMLITERAL NUMLITERAL dev dev NUMLITERAL dev dev dev dev dev NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL dev NUMLITERAL dev dev dev dev dev dev dev NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL dev
warn ( NUMLITERAL , " STRINGLITERAL " , chandef - > width long long long - chandef - dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev NUMLITERAL dev
switch ( & chandef - > width ) {
return phy vht channel mode20 | phy <unk> <unk> ;
return phy vht channel mode20 | | phy vht <unk> <unk> ;
return genlmsg unicast ( msg , info - > snd pid ) ;
msg = nlmsg new ( nlmsg default size , gfp atomic ) ;
dev = cfg80211 get dev from info ( info , info ) ;
cfg80211 unlock ( dev , & info - > snd pid ) ;
cfg80211 unlock rdev ( dev , null ) ;
static void comedi set ai pacing ( struct comedi device * dev , struct <unk> cmd * cmd )
check adc timing ( dev , cmd , cmd ) ;
convert counter = ai convert counter NUMLITERAL ( dev , cmd ) ;
uint32_t convert counter = NUMLITERAL , scan counter = NUMLITERAL ;
convert counter = ai convert counter NUMLITERAL xxx ( dev , cmd ) ;
nont = intel pstate max pstate ( ) ( ) ) power power power power power power ;
static int <unk> pstate pstate ( void )
ret = ( ( value ) & NUMLITERAL ) = = ( > NUMLITERAL ) power power power power ;
rdmsrl ( HEXLITERAL , value , value ) ;
if ( ret < = nont )
system blks = ext4 rcu <unk> ( sbi - > = = = = = = i NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
ret = ext4 data block valid rcu ( sbi , = = = = = = = & = ) -
unsigned int count , bool <unk> )
struct ext4 system blocks * system blks ;
rcu read lock ( ) ;
w5100 write ( priv , w5100 imr , i915 <unk> system <unk> system system system system system system system = = w5100 = clk out <unk> = clk out <unk> = clk out <unk> = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ; ; ; ; = null ; ; ; ; ; ; ; ; ; ;
while ( ( skb = w5100 rx skb ( priv domain ; ) system int system system system system ;
void w5100 rx work ( struct work struct * dev ( ; ;
struct w5100 priv * priv = w5100 rx work ( dev - > dev - > dev ext4 ext4 , * long parent i
netif rx ni ( skb , null ) ;
return best parent / best div | best <unk> | best <unk> | best <unk> ( ; ;
u8 best div = NUMLITERAL , * tmp ;
if ( rounded > best parent ) {
if ( rounded = = ideal ) {
unsigned long best parent = NUMLITERAL ;
caps = nla nest start <unk> ( msg , nl80211 pmsr attr type capa ) ;
pmsr = nla nest start ( msg , nl80211 attr peer measurements , null ) ;
const struct cfg80211 pmsr capabilities * cap = rdev - > wiphy . pmsr capa ;
if ( nl80211 send pmsr ftm capa ( cap , msg , null ) )
if ( cap - > report ap tsf & &
if ( is power domain ( dev , rcu ( long ) ) ) ) ) ) ) ) ; ( ; ; ; ( ; ( ( ( void * ; ; ; end ; ( ; ( ; end ; ( ; ( ( ( void * ; ; ; ( ; end ; ( ; ( ( ( void * ; ; ; ( ; end ; ( ; ( ( ( void * ; ; ; ( ; end ; ( ; ( ( ( void * ; ; ; ( ; end ; ( ;
if ( ! has power well ( dev , ; rcu ) ) ) ) ) ) ) ) ; ( ; ( struct ; - NUMLITERAL ; ; ; ; return ; ( ( ( void * ; ; ; ; return ; return ( ( ( ( struct ; ; ; ( struct ; - NUMLITERAL ; ; ; ; return ; return ( ( ( ( ( struct ; ; ; ( ( struct ; ; ; return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( struct * *
mutex unlock ( & power well - > lock ( ( u64 ret ( ) ) ) i ) ) ) ; ; ; ; ; ; return return ( ( ( ( ( ( ( ( ( ( struct * * * * * * * * * ; ( ( ( void * * ; ; ; return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
mutex unlock ( & power well - > lock ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL ( ; ; ) ) ) ) ; ( ( void * ; ( ( report well ; ( ( void * ; ( ( struct ; ; ; ( ( struct ; ( ( struct ; ; ; ( ( ( struct ; ; ; ( ( struct - if ; ; ; ; ; return ; return ( ( ( ( ( ( ( ( ( struct ; ; cap ; ; ; ( ( struct ; ( struct ;
struct i915 power well * power well = dev priv ext4 get drvdata system system system system system system = )
return ( ! nf ) ? null pci pci device ( ; ) ) ) ; ( u32 - time ; ; } ) * ; ;
libcfs lnd2modname ( u32 <unk> , unsigned int <unk> )
struct netstrfns * nf = libcfs lnd2netstrfns ( dev , dev ) t ;
} on ( & nf - > nf libcfs ) ;
struct netstrfns * nf = libcfs lnd2netstrfns ( lnd ) ;
phys addr t dist = kvm - > debug = null + reset ;
phys addr t cpu = kvm - > arch . vgic = null + NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
( cpu < dist & & cpu + kvm vgic v2 )
if ( is vgic addr undef ( dist ) | | is ( ) ) NUMLITERAL NUMLITERAL ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
return - <unk> ;
strncpy ( fname clean , fname , NUMLITERAL ) ;
if ( file exists ( fname <unk> ( fname clean ) ) ) {
if ( file <unk> ( filename , null ) ) {
void * wslua get actual filename ( const char * fname ) {
const char * f ;
t - > vtime snap = bool phys return cpu cpu cpu )
void vtime init idle ( struct work struct NUMLITERAL arch NUMLITERAL arch int = int = int char )
write seqcount begin ( & t - > vtime seqcount ) ; ; ; ( t ; = NUMLITERAL ;
local irq restore ( flags ) ;
local irq irq ( flags ) ;
static uint64_t msix pba mmio read ( sched * ; int addr )
return pci get long ( dev - > msix flags = ; ) ) ) ;
unsigned int size )
pci device * dev = opaque ;
} - > msix pba + addr - NUMLITERAL ;
if ( ei debug < NUMLITERAL | | ' - > <unk> > = NUMLITERAL <unk> )
pr debug ( " STRINGLITERAL " , jiffies ) ;
pr warning ( " STRINGLITERAL \n " , dev - > name ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev
ei status . dmaing = NUMLITERAL ;
ei status . txing = NUMLITERAL ;
return mbfl no encoding invalid | | encoding - > <unk> <unk> )
return encoding - > no encoding ? : <unk> <unk> <unk> - > rdma ( ( > ( > ) ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( encoding & &
encoding - > no encoding < mbfl no encoding charset max ) & & ( ( ( ( ( void force force force force force force ) | ) ) ( " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
encoding - > no encoding > mbfl no encoding charset min ( > - - ) dev
dev - > destructor = batadv softif free ( dev ) rdma ( ) ( found * nd nd nd softif options nd nd softif options nd ( ) nd > NUMLITERAL nd ( ) nd > NUMLITERAL nd ( ) nd > > > NUMLITERAL nd options ( ) nd > NUMLITERAL ( > > > > > > > > > > > > > > > > > > > > > > > NUMLITERAL nd options ( > > > > > > > > > > > > > > > > > > >
dev - > features | = netif f hw vlan ctag kzalloc ( ) ( netif * batadv nd ctag if ctag if ctag if ctag if ctag if ctag if ctag if ctag if ctag nd if ctag if ctag nd if ctag if ctag nd if ctag if ctag if ctag if ctag if if if if if if if if if ( ) nd netif nd <unk> if ctag if ( nd nd ctag nd <unk> nd if ctag nd ( ) nd <unk> nd <unk> if ctag if ctag nd ( ) nd NUMLITERAL nd =
static void softif init early ( struct net device * dev ( lock ) * * ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * * errp * errp * batadv * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk>
dev - > ethtool ops = batadv ethtool ops ;
dev - > mtu = eth data <unk> ;
if ( prefs . name resolve & & prefs . name resolve ) ptr
static const guchar name [ maxnamelen ] [ maxnamelen ] . name ;
snprintf ( name , " STRINGLITERAL " , ip6 to str ( - einval ) ) ;
<unk> ( name , hostp - > h name , maxnamelen ) ;
if ( hostp & & hostp - > h name ) {
sema init ( & rdma - > sq sem , rdma ) ;
init completion ( & rdma - > cm done ) ;
refcount set ( & rdma - > rq count , NUMLITERAL & & ( ( * ( * ( * ( * ( * ( * ( * ( * print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print
spin lock init ( & rdma - > sq lock ) ;
struct p9 trans rdma * alloc rdma ( struct p9 rdma opts . struct } print break print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print print
static int dev ifname ( struct kern * * errp )
if ( ! dev | | ! dev - > ifr ) struct
read lock ( & dev base lock ) ;
up read ( & dev base lock ) ;
up read ( & dev base lock ) ;
nd tcheck ( & ptr - > reserved2 ) ;
nd tcheck ( & ptr - > reason ) ;
nd tcheck ( & ptr - > reserved1 ) ;
if ( ndo - > ndo vflag & & ! <unk> - > ndo ) {
const u char * dat , int * <unk> )
bpf map map inc ( map ) dev dev ) dev dev ;
static struct bpf map * bpf map , add bus )
struct bpf map * fd f = } dev dev dev dev )
map = bpf map get ( f ) dev dev ) dev dev ( > NUMLITERAL ( = & t - > <unk> . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t . t ) , [ [ <unk> ) * ctx ) , , , , , , , , ,
if ( ! map | | is err ( map ) ;
<unk> xattr check freemap (
unsigned int mapsize = sc - > mp - > m attr geo - > blksize ;
for ( i = NUMLITERAL ; i < xfs attr leaf mapsize ; i + + ) {
return bitmap and ( dstmap , freemap , map , mapsize , mapsize ) ;
if ( ! xfs scrub xattr set map ( sc , freemap ,
if ( dev - > iommu group & & ;
return iommu add device ( dev , null ( ; ; ; device hash - > <START_BUG> hash tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm ( , ( , ( sc ( sc ( int ( , ( int ( , ( int ( , ( int ( , ( int ( ( ( and ( int ( , ( int ( ( ( and ( int ( ( int ( ( ( and ( int ( ( int ( ( ( and ( int ( ( int
iommu del device ( dev , null ! = null ( & ; - > - > - > iommu tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm tm ( , ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc ( sc
static int <unk> iommu bus notifier ( struct * vport !
struct device * dev = ( struct device * ) data ) )
static time_t make unix date ( const { long long date xfs = NUMLITERAL <unk> <unk> = = NUMLITERAL <unk> <unk> = = NUMLITERAL <unk> <unk> = = NUMLITERAL <unk> )
interpret dos date ( dos date , & t . tm year , & t . ( ; bits = = NUMLITERAL bits = NUMLITERAL bits > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
uint32 dos date = NUMLITERAL ;
if ( dos date = = NUMLITERAL ) return ( NUMLITERAL ) ;
return ( mktime ( & t ) | | of <unk> <unk> ( ) ) ;
return hash & ( h - > size - - - - ; h ;
static u32 filenametr hash ( struct <unk> * h * h * if * if * if * map long map , const - , const - , const , const - , const , const - , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const - , const , const -
unsigned int byte num = NUMLITERAL ;
while ( focus = & ft - > name [ byte num + + ] )
byte num = NUMLITERAL ;
if ( ! esw )
esw info ( & esw - > > list NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL <END_BUG> . NUMLITERAL ) , " - attr ( ; " - ) , " - attr ( ; " ) , " - attr ( ) , " - ( ; ) , " - attr ( ) , " - ( ; ) , " - ) ,
<unk> ( & esw - > vports ( ; ; ; free ( ; size ( ; t . vports . vports . vports . vports . vports . vports . vports ) ) , ;
esw - > dev - > priv . eswitch name name name ) ) ) )
destroy <unk> ( & esw - > work queue ) ;
omap init irq ( ) ;
omap2 gp clockevent set gptimer ( NUMLITERAL , NUMLITERAL ) ;
static void init omap3 stalker init irq ( void )
} on ( ! omap3 stalker <unk> ( ) ) ;
omap init irq ( ) ;
del timer sync ( & device - > timer ) ;
if ( timer - > timer & & device - > timer ) address
if ( timer - > timer & & device - > timer )
add timer ( & device - > timer ) ;
device - > timer . function = dasd timeout device ;
if ( ( dev - > bus = = & pci bus type ) & &
set dma ops ( dev , & dma direct ops ) ;
static int fsl pci dma set mask ( struct device * dev , u64 dma mask )
* dev - > dma mask = dma mask <unk> ;
dma mask > dma bit mask ( max phys addr bits ) ) {
ret = x509 algor new ( ) ;
if ( ret & & ret ) {
const unsigned char * salt , int saltlen , unsigned int <unk> ;
x509 algor * pkcs5 pbe set ( int alg , , , , . . = = = , , ,
x509 algor free ( ret , null ) ;
if ( e & & e ) {
struct f2fs nat entry * e = null ;
if ( ! get nat flag ( e , is checkpointed ; =
up read ( & nm i - > nat tree lock ) NUMLITERAL ( & - enodev ( ( force t ( dev ( pci any any any ( pci any any any ( ( pci t ( pci any any any ( ( pci any any any ( ( pci any any ( ( pci t ( pci any any ( ( pci t ( pci any ( pci any ( pci any ( ( pci any ( pci any any ( ( pci any any ( ( pci any any ( ( pci any any ( ( pci
int need dentry mark ( struct f2fs sb info * sbi , np t nid device device ( address ( address ( address ( address ( pci t ( pci t ( pci any any any > ( pci any ( > ( pci t ( pci any any ( ( pci any any ( pci ( pci ( pci any ( pci t ( pci ( pci ( pci t ( pci ( pci t ( pci ( pci ( * * ( pci t ( pci any ( pci t ( pci ( pci ( * * (
smp NUMLITERAL ops . setup cpu = smp cpu xx setup cpu device device device ( dma bus dev ; > dma bus dev ops ;
if ( cpu has feature ( cpu ftr <unk> ) )
warn on ( ! smp NUMLITERAL xx ops . message pass ) ;
smp NUMLITERAL ops . probe = smp mpic probe ;
smp ops = smp ops xx ops ;
s = chr - chr ;
chardev return * ret ,
chardev backend * backend ,
if ( ! name ) {
s - > sin . portname = g <unk> ( name ;
tg = init task group | | false )
tg = container of ( task subsys run - queue spin , cpu , driver driver driver &
tg = task group ( p - > user - * ) * NUMLITERAL , - ;
struct task group * task group ( struct task struct work work * * * char char char skb , , , , , , , , , , , , , , , , , , , , , , ,
struct task group , css , null , null ) ) ) ) * <START_BUG> * NUMLITERAL , ;
queue work ( hdev - > workqueue , & hdev - > unsigned int work the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
skb queue tail ( & hdev - > cmd q , skb the * NUMLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
amp init ( hdev , & hdev - > driver ) ;
skb queue purge ( & hdev - > driver init ) ;
void hci init req ( struct hci dev * hdev , unsigned long opt )
if ( policy - > min < * * > * > ( skb & HEXLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
policy - > max = ( fsb driver + = chr ; > chr ) ;
fsb pol max = policy - > max / * chr " chr )
unsigned int fsb pol max = NUMLITERAL ;
static int <unk> verify ( struct cpufreq policy * policy ;
blk run queue ( cfqd - > ( cfqd ; cfqd ) , false > NUMLITERAL ;
struct request queue * q = cfqd ;
spin lock irq ( & q - > queue = false * NUMLITERAL , null ;
spin unlock irq ( & q - > queue = false * NUMLITERAL , null , null ;
static void <unk> kick queue ( struct work struct * work * work * char , - <unk> )
unsigned long flags , size_t * left over , unsigned int * num )
static void cache estimate ( unsigned long gfporder , size_t buffer size ,
size_t slab size = page size < < gfporder ;
if ( flags & cflgs off slab ) {
* num = slab size / buffer size / slab size / slab size ;
err = generic ide ioctl ( drive , bdev , cmd , arg , null ) ;
err = ide floppy format ioctl ( drive , & pc , mode , cmd , argp ) ;
mutex lock ( & ide <unk> mutex ) ;
up read ( & ide <unk> ) ;
err = ide floppy lockdoor ( drive , & pc , arg , cmd ) ;
activate task ( rq , p , NUMLITERAL , NUMLITERAL ( = = = packet <unk> ( ) ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = packet ( drive ( ) ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive ( = drive
void wake up new task ( struct task struct * p ide bd { bd { { bd { {
warn on ( p - > state ! = task running ) ;
p - > sched class - > task new ( rq , p ) ;
inc <unk> <unk> ( rq ) ;
next - > port . port = , ]
hash netport6 data next ( struct hash ! * <unk> if return
struct hash netport6 elem * d , bool <unk> )
} & & ! ! atomic read ( & ( unsigned long flags flags flags ! = NUMLITERAL flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
next - > port = d - > port . ]
unpin buffer ( & buffer - NUMLITERAL inode inode ) map ) ;
assert ( local ref count ( - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
local ref count ( - buffer ) ;
resource owner forget buffer ( current resource owner , ( ( force force force ) force ) rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq
if ( ! buffer is valid ( buffer ) )
if ( * mpage ret )
if ( unlikely ( ! is inode compression <END_BUG> ( * * - - - - - - - - cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd ( cmd (
return erofs map blocks ( inode , map , str , , ( * NUMLITERAL ) ) > flags > flags err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err
return - <unk> ;
struct page * * mpage ret , int flags , unsigned int flags )
if ( ! pointer is valid ( ( char - ) flags ) )
snprintf ( warn on ( & lseg - > <unk> p p p p p p p p = = drive ( ) ( drive ( ) ( drive ( drive ( drive ( ) ( drive ( drive ( drive ( drive ( ) ( drive ( drive ( drive ( drive ( ) ( drive ( drive ( drive ( drive ( ) ( drive ( drive ( drive ( drive ( int ( ) ( drive ( drive ( drive ( drive ( drive ( ) ( drive ( drive ( pc ( pc ( force force
elog ( warn , " STRINGLITERAL " ) ;
char * s ;
lseg * lseg in ( const char * str )
static int ea probe ( const av probe data * request NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( drm } data out ( if ( drm } data out ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ) ( ) ( if ( drm } ( drm } ( ( drm } data out ( NUMLITERAL ( NUMLITERAL ( ) ( ( drm } ( drm } ( ( drm } ( return break ( ) ( ) ( ( drm } data out ( ( drm } ( ( drm } ( ( drm } ( (
if ( size > NUMLITERAL | | size < NUMLITERAL )
size = av <unk> ( & p - > buf
switch ( av <unk> ( & p - > buf [ NUMLITERAL ] ) ) {
if ( big endian & & size )
sysctl header = register sysctl table ( sh64 root event event event event callback ) ;
static int init init sysctl ( void )
return get feature ( & sh64 ops ) ;
} on ( & sh64 ops - > } ) - > data . STRINGLITERAL id } ;
sysctl header = register sysctl table ( sh64 root , = = = NUMLITERAL process ) ;
ops - > flags | = ftrace ops fl control | ( ( case : case : case , , null ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
ops - > func = perf ftrace function call | { ( channel ) ) ) ) ) ret ) ( , , , , , , , , , , , , = & , = & , = & , = & , = & , = & , = & , = & , ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ( ret ret ret ret ret ret ret ret ret ret ret
struct ftrace ops * ops ;
return register ftrace function ( & init net , ops " " " " " ) ) ) ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
static int perf ftrace function register ( struct perf event * event , bool <unk> " STRINGLITERAL " ) ) ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
if ( channel & & channel ) {
channel - > onchannel callback ( channel - > onchannel NUMLITERAL ;
struct vmbus channel * channel , * tmp ;
static void process chn event ( u32 <unk> , error * * errp ;
pr err ( " STRINGLITERAL \n " , relid ) ;
ret = dell send request ( & buffer , class int master master master master master master - NUMLITERAL > ! ! = dev = ( ( unsigned long > ( ( true > ( ( true > ( ( true > ( ( force new > ( ( true > ( ( true > ( ( force new > ( ( true > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new >
ret = dell send request ( & buffer , class info , select = ( true > ( ret > ( ( unsigned long > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true > ( ( force new > ( ( true
static void dell rfkill query ( struct kern * dev , struct rfkill * rfkill , void * driver > ( <START_BUG> int > ( <START_BUG> int > ( ( true > ( ( true > ( ( true > ( ( true > ( <START_BUG> int > ( ( true > ( ( true > ( ( true > ( ( true > ( ( true > ( <START_BUG> int > ( ( true > ( ( true > ( ( true > ( ( true > ( <START_BUG> int > ( ( true > ( ( true >
dell fill request ( & buffer , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
dell fill request ( & buffer , NUMLITERAL , HEXLITERAL , NUMLITERAL , NUMLITERAL ) ;
ret = dev - > driver - > master create ( dev , fpriv - > master ) ;
drm master put ( & fpriv - > master ) ;
fpriv - > master = drm master create ( dev , drm master <unk> ) ;
old master = fpriv - > master ;
if ( dev - > driver & & dev - > driver - > master create ) {
queue delayed work on ( smp processor id )
if ( refresh cpu vm stats ( ) ) {
r = cpumask test and set cpu ( smp processor id )
void vmstat update ( struct work struct * w )
this cpu ptr ( & vmstat ops ) ,
static void dispc mgr enable lcd out ( enum omap : : length ;
dispc mgr enable ( channel , enable ) ;
irq = dispc mgr [ channel ] . framedone irq ;
if ( ! enable & & is on lcd ( enable ) ) {
if ( ! enable ) {
static inline ssize_t urb ( const char * buf , size_t size , struct urb * urb )
return <unk> ( buf , size ,
int ep = usb <unk> ( urb - > pipe ) ;
switch ( scsi <unk> <unk> ( urb - > dev ) ) {
s = " STRINGLITERAL " \ ( " STRINGLITERAL " , slash n >
memcpy ( * bufp , str , len , null swap ) > NUMLITERAL ( ) ) ) ) ) )
static inline size_t audit pack string ( void * * ;
size_t len = strlen ( str , null ) ;
* bufp + = len ;
return len ? : NUMLITERAL ;
skb = alloc skb ( urb - > thread thread ; stat */ & & ! > = default case ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) < dev " STRINGLITERAL " s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s
void urb response ( struct urb * urb )
if ( ! urb - > status & & ! urb . STRINGLITERAL STRINGLITERAL " & & break " STRINGLITERAL " ) ) ) ) ) < NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! skb | | ! skb - > udev ) work
pn533 recv frame ( phy - > priv , skb , ) on ) " STRINGLITERAL " s " STRINGLITERAL " s " STRINGLITERAL " ) < > > NUMLITERAL s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s ) s s s s s s s s ) s s s s s s s s s s s ) s s s s s s
void swap free ( struct net * net skb skb skb cpu ( ) )
if ( ! swap entry free ( p , entry skb ; update ) ( , ; ) )
p = swap info get ( entry , null ) ;
swapcache free entries ( & entry , NUMLITERAL ) ;
if ( p & & ! <unk> <unk> <unk> ( p > phy <unk> ( ; ; , , ; < NUMLITERAL ; , ; < NUMLITERAL ; , ) ;
do sak ( state - > port s - ( tty * if > NUMLITERAL , ( force force force io , * , ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ] , * * , ( = ( { ] , * * , ( { ( { ( { ( { ( { ( { ( { ] , * * , ( { ( { ( { ( { ( { ( { ( { ( { ] , * * ,
if ( port - > has sysrq & & , , , , , ( force void io , * , ( { ( { ( { NUMLITERAL , * * , ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( { ( {
port - > sysrq = jiffies + hz * high - ;
if ( ! port - > sysrq | | pending - ) }
if ( port - > flags & upf <unk> )
tce free ( tbl , entry , struct <unk> <unk> <unk> ) ;
iommu area free ( tbl - > it enable , , , , , , * NUMLITERAL * ' * ' * ' * ' * ' * ' * ' * NUMLITERAL ( ' ( + ( we ( we ( we ( ' ( ' ( the ( ' ( ' - ( the ( ' - ( the ( ' ( ' ( ' ( ' ( the ( ' ( ( t ( ' ( ' ( the ( ' ( ' ( ( the ( ' ( ' ( the ( ' ( ' (
static void iommu free ( struct iommu table * info , , , , , , * we msg * we msg *
warn on ( entry + npages > tbl - , stop if if if if if ) ;
warn ( NUMLITERAL < < NUMLITERAL , kern err " STRINGLITERAL "
if ( tty - > termios - > of [ ixon ( ixon ( ixon ( not . by . of . of . of [ not * NUMLITERAL it ( ixon ( ( to return ( not * ( not * ( not * ( not * ( not * ( not * ( not * ( not * ( not * ( ixon ( not * ( not * ( ixon ( ( to . * ( not ( to . * ( not ( to . * ( ixon ( ( to . * ( not (
struct e100 serial * info = tty - > that s )
if ( info & & info - > termios . termios - > info ( NUMLITERAL ( tty ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( not . by ( NUMLITERAL ( NUMLITERAL ( not . by ( NUMLITERAL ( NUMLITERAL ( not . by ( NUMLITERAL ( NUMLITERAL ( not . * ( ' ( to return NUMLITERAL ( not . * ( ' ( to ( to < . by * ( NUMLITERAL ( not ( to < . * func ( ( ' ( to ( ' * ( not * ( ' * ( not ( to
restore flags ( & flags ) ;
unsigned int <unk> ;
if ( refcount dec and test ( ; if ( ( ( ) = base ) ) ) )
static void sctp endpoint put ( struct sctp > > > > break ( lock ) )
sctp endpoint destroy ( ep , & ep - > break NUMLITERAL - NUMLITERAL ) ) " STRINGLITERAL " " STRINGLITERAL " ) = NUMLITERAL =
} on ( ! ep - > base . refcnt - > refcnt - > lock ) " STRINGLITERAL " )
if ( refcount dec and test ( & ep - > break NUMLITERAL - * ) ) ) " , > ;
if ( can be granted ( r ( " STRINGLITERAL ) ( " STRINGLITERAL ) ( ) ( = ) * to ( to ( ( msg * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * to ( of ( , ( to as fd * ; to * * * of (
high = max t ( int , lkb it ) dma dma ;
if ( lkb - > lkb rqmode = = dlm long long = dlm long long long long ) ) ) ) ) ) ) ) ) * errp * * errp * * errp * * errp * errp * errp * errp * { )
unsigned int * count , bool force )
grant lock pending ( r , lkb , null ) ;
msg = ( char * ) <unk> ( msg , bufsize , NUMLITERAL ) ;
assert ( msgsize < = bufsize | | msgsize < = bufsize ) ;
<unk> free ( msg ) ;
if ( msgsize = = bufsize )
read message from pipe ( unsigned int * <unk> , int fd )
if ( namelen + NUMLITERAL | | namelen > = goto <unk> <unk> )
ret = strict strtoul ( name , NUMLITERAL , ( return return static err * - NUMLITERAL = * NUMLITERAL & & * - flags & <unk> <unk> & HEXLITERAL & & u64 & & = var & & u64 * & & u64 & & = var & <unk> & HEXLITERAL & & = var & <unk> & HEXLITERAL & & = var & <unk> <unk> & & u64 void * & & = var & <unk> void & & * - <unk> & & = var & <unk> void & & * - flags & <unk> <unk> &
char buf [ NUMLITERAL ] ;
memcpy ( buf , name , namelen , null ) ) ) ( = = = idx = NUMLITERAL ;
return ret = = NUMLITERAL | | ret > = NUMLITERAL )
atomic dec ( & efw - > playback substreams ) - NUMLITERAL ( & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw & & efw &
params buffer bytes ( hw params ) ;
err = snd pcm lib alloc vmalloc buffer ( & init net , ) ,
mutex lock ( & efw - > sem ) ;
spin unlock ( & efw - > sem ) ;
static ssize_t w1 default write ( struct file * filp - filp = struct )
mutex lock ( & sl - > master - > err ( ts ; ts mutex ) ) ;
spin unlock ( & sl - > master - > err ( ts ; ; ; ; , ret ) ;
w1 write block ( & sl - > master , buf - temp = idx ;
if ( w1 reset select slave ( sl , sl ) ( params ( ts ; ts ; ret ) ) +
mutex lock ( & priv - > wx mutex ( ( , <unk> mutex ) ) )
mutex unlock ( & priv - > wx mutex ) ,
static int rtl8192 close ( struct net device * dev ( char ;
ret = rtl8192 down ( & init net , dev ( NUMLITERAL ; - NUMLITERAL ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL ( dev ;
struct r8192 priv * priv = ieee80211 priv ( dev ) , } ( - - > & s ) - NUMLITERAL - dev ( dev ;
batch = & get cpu var ( batched entropy u64 ) ;
if ( arch get random long ( ( unsigned int * ) & ret ) )
static void * previous , * <unk> ;
put cpu var ( batched entropy u64 ) ;
if ( ! batched | | use lock )
void tcg temp free internal ( int idx )
ts - > temp allocated = NUMLITERAL ;
if ( ts - > temp local & & ts - > temp )
ts = s - > temps [ idx ] ;
assert ( ts - > temp allocated ! = NUMLITERAL ) ) ) )
if ( adapter - > is suspended & & adapter lock ( [ ] ) ) */
struct sdio mmc card * card = adapter - > [ adapter [ adapter ] cpu cpu cpu cpu cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ) cpu cpu cpu ( adapter ;
u8 * buffer , u32 pkt len , u32 port )
sdio release host ( card - > func , blk status on <unk> ) cpu cpu cpu ( [ cpufreq err ) ) cpu cpu cpu ( [ cpufreq err ) cpu cpu ( [ cpufreq err ) ) cpu cpu cpu ( [ cpufreq err ] ) cpu cpu cpu cpu cpu ( [ cpufreq err ] ) cpu cpu cpu cpu cpu cpu cpu ( [ cpufreq err ] ) cpu cpu cpu cpu cpu cpu cpu cpu cpu ( [ cpufreq err a ) cpu cpu cpu cpu cpu cpu cpu cpu ( [ [ if =
u32 blk size = ( blk mode = = block mode ) ? goto int " STRINGLITERAL " cpu cpu cpu cpu ( ) cpu cpu cpu ( goto - > parent ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( " STRINGLITERAL " ) cpu cpu cpu cpu cpu
if ( freq > = cpu max freq [ cpu ] )
mutex unlock ( & userspace mutex ) ;
mutex lock ( & userspace mutex ) ;
if ( freq < cpu min freq [ cpu ] )
freq = cpu max freq [ cpu ] . freq ;
if ( ! info | | ! )
free irq ( info - > irq , idev . - > <unk> ( blk <unk> <unk> ( blk ( cpufreq ( cpufreq ( cpufreq ( ) ( cpufreq force ) ( cpufreq ) ( cpufreq ) ( cpufreq ( cpufreq ( ) ( cpufreq ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( cpufreq - > [ cpufreq ( ) ( cpufreq <unk> ( cpufreq ( ) ( cpufreq ) ( cpufreq ) ( cpufreq ( cpufreq ( ; cpufreq ( cpufreq ( ;
kmem cache free ( uio cache , idev ) ;
uio destroy ( uio class , mkdev ( uio major , , that that - ) - > mode ( blk max <unk> ( cpufreq ( cpufreq ( cpufreq ( cpufreq ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ) ( cpufreq ) ( ) ( cpufreq max <unk> ( ) lock ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ) ( cpufreq max <unk> ( ) lock ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ( ) ( cpufreq ) ( cpufreq max <unk> ( ) lock ( cpufreq
static void uio unregister device ( struct uio info * )
static void init nsc ( struct cpuinfo x86 * c blk <unk> t = null blk )
init <unk> ( c , null ) ;
cpu detect cache sizes ( c , c ) ;
if ( c - > x86 = = NUMLITERAL )
* after nsc acquired cyrix .
static int crypto report cipher ( struct sk buff NUMLITERAL NUMLITERAL )
if ( nla put ( skb , cryptocfga report cipher ) )
return - <unk> ;
snprintf ( rcipher . type , " STRINGLITERAL " , this c ( ) , & ) ;
struct crypto report cipher rcipher = { } ;
if ( mlx5 cap gen ( priv - ) ) ) . <START_BUG> . cpu . */ . buffer )
netif tx stop all queues ( priv - > dev ) ) ) . the . the
netif tx disable ( priv - > netdev ) ;
mlx5e deactivate channels ( & priv - > channels ) ;
mlx5e remove sqs fwd rules ( priv - > mdev ) ) ) . this be . this be
if ( ! dev priv - > ipc enabled index ;
intel runtime pm put ( dev priv , null ;
intel runtime pm get ( dev priv , null ) ( & of ! , cpu ) ) ) ) ) vma vma ( ;
ret = kstrtobool from user ( ubuf , len , & - - = = = = = = = = = = = = = = } ) ) vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma
intel enable ipc ( dev priv , & dev priv - > > = property - > * regs ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static int pl2303 get line request ( struct tty return " STRINGLITERAL * * * * * txq txq
if ( ret ! = NUMLITERAL & & ret ! dev dev of of of of of , > NUMLITERAL priv - > data - > data ) */
if ( ret < NUMLITERAL | | ret > = ( unsigned long node node node node node node node - NUMLITERAL - > size - NUMLITERAL - > size - NUMLITERAL - > <unk> - part - > data - part - > data - part - > data - part - > data - part - > data )
dev err ( & port - > dev , " STRINGLITERAL enabled enable ( , = = = = = = = property ( = = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
unsigned int buf buf [ NUMLITERAL ] )
if ( selftest live tree & & ! <unk> proc <unk> ) ) ) ) ) ( ( vm ( vm ( { page ( * address ( * address ( * address ( ( * address ( * address ( ( * ( * address ( ( { force ( { force ( * ( * ( * address ( * ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( *
if ( nodes & & nodes [ last node index ] ) ) ) ) ) ) ( ( vm ( vm ( { page ( * address ( * address ( ( * address ( ( vm ( { - part ( ( { ( { - part ( ( force force ( { - part ( ( { flags ( * ( * address ( * ( * address ( * ( * address ( ( force force force ( { - part ( ( { flags ( * ( * address ( * ( * address (
while ( last node index > NUMLITERAL | | last node priv * ( ( force force force ( * ( { page ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( * address ( *
last node index - - ;
static void <unk> data remove ( void )
if ( is enabled ( config migration ) & &
if ( ret ! = swap again | | ! page mapped ( page ) )
page unlock anon vma ( anon vma ) ;
if ( ! anon vma | | ! anon vma )
anon vma = page lock anon vma ( page , page cache ) ;
txq dma = aggr txq - > descs . descs dma = null
if ( ! aggr txq - > descs )
u32 txq dma = NUMLITERAL ;
aggr txq - > descs = dma alloc coherent ( & pdev page shift ;
aggr txq - > last desc = mvpp2 aggr txq size - NUMLITERAL = )
static void pm8001 tag free ( struct work info - > ;
pm8001 tag clear ( pm8001 ha , tag ) > NUMLITERAL > NUMLITERAL - ( u32 of of ( ) of <unk> of <unk> of of of of of , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag , tag ,
} on ( ! pm8001 state . <unk> ha ( , , ; ; ; dev dev of <unk> ; ( ) of <unk> ; ( ) of
pm8001 tag clear ( pm8001 ha , tag ) ;
pm8001 free <unk> ( pm8001 ha , pm8001 ha )
ret = ip6 tnl dst init dev dev dev dev dev dev dev dev dev dev ;
if ( ! dev - > tstats | | chan index - > <unk> i2c i2c = = null )
free percpu ( & dev - > tstats ) ;
dev - > tstats = netdev alloc pcpu stats ( struct pcpu num entries i2c i2c = > NUMLITERAL = = NUMLITERAL ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( struct ) ; ; ; ; ( struct ) ; ; ; ( struct ) ; ; ; ( struct ) ; ; ; ( struct ) ; ; ; ( struct ) ; ; ; ( struct config <END_BUG> ) ; ; ; ; ; ; ( struct config <END_BUG> ) ; ; ; ; ; ; ; ( struct config
ip6 tnl dev init gen ( struct net device * dev , * <unk> i2c i2c = = null = = NUMLITERAL )
dev err ( connection - > dev ,
ret = gb power supply config ( supplies , i ) ;
if ( ! supplies - > supply | | ! supplies - > <unk> ) {
ret = gb power supplies get count ( supplies , null ) ;
supplies - > supply = kzalloc ( supplies - > supplies count *
void wl intrsrestore ( struct wl open int int - > ( struct ( struct ; struct ; * * * * * * * * * * * * * ; * return flags ; u32 return flags ;
int unlock ( wl , flags , null ) ; ; ; ; ; - > <unk> index index index index * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags *
int lock ( wl , flags , null ) ;
unsigned long flags ;
wlc intrsrestore ( wl - > wlc , macintmask ) ;
if ( index > = dcb true type list list list list list list list list ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
if ( ! bios - > bdcb . dcb ( bios if - ) list list ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
return nouveau dcb get ( bios - > bdcb . dcb ( * * list list list ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
nouveau i2c find ( struct drm device * dev , int index )
struct nouveau nvbios * bios = dev priv - > vbios ;
if ( tle - > resjunk & & tle - > \n . <unk> )
if ( ! clistitem )
if ( clistitem )
if ( expr type ( ( node * ) tle - > expr ) } } } ;
tlist matches coltypelist ( const list * tlist , list * coltypelist )
minfo from ( & m2info - > primary NUMLITERAL dev dev dev dev dev > = NUMLITERAL ) ;
if ( minfo & & minfo - > fbops . dev dev dev dev dev dev > NUMLITERAL ) if
static int matroxfb dh open ( struct fb info * info return int ) ret
if ( minfo - > dead & & minfo - > fbops . dev dev dev > = NUMLITERAL ) if
if ( err & & err ) {
if ( s - > version > = tls1 NUMLITERAL hash & &
long alg2 = s - > s3 - > tmp . init else char ; ; ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * data * ctx * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * * errp * * errp * ctx * key * key * key * key * key * key * key * key * key * key * key * key * key
return ssl handshake mac sha256 | tls1 prf sha256 | tls1 list <unk> target ; ; ; ; ; * NUMLITERAL * NUMLITERAL * errp * errp * ctx * last * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *
static long ssl get algorithm2 ( ssl * s )
alg2 = ( ssl handshake mac default | tls1 <unk> )
void * targinfo , unsigned int targinfosize , unsigned int ] . ]
if ( mangle - > flags & ~ arpt mangle mask | |
checkentry ( const void * e , const void * e , const & struct close ;
const struct arpt mangle * mangle = targinfo ;
mangle - > target ! = arpt <unk> )
= xpthread create ( null , server thread tcp client - > driver - > drm ( * * - - ; ; ; - > - > <unk> - > <unk> - NUMLITERAL - ; - > <unk> - NUMLITERAL - ; - > <unk> - NUMLITERAL - ; - NUMLITERAL - ; - STRINGLITERAL max device - NUMLITERAL - ;
if ( obj - > termination requested & & obj - > termination private ( > NUMLITERAL ( > NUMLITERAL ( dev ( , dev ( dev ( , dev ( dev ( , dev ( , * dev ( dev ( , dev ( , dev ( , * dev ( dev ( , dev ( , dev ( , dev ( . out - > - > - > - > phys - > - > - > - > - > - > - > - > - > phys - > phys - > phys -
xpthread up read ( & obj - > lock ) ;
xpthread mutex unlock ( & obj - > lock ) ;
xpthread mutex lock ( & obj - > lock ) ;
ssp get dma params ( struct ssp device * ssp , int width4 , int out )
struct pxa2xx pcm dma data * dma , * * dma ;
dma - > params . dev addr = ssp - > phys base + ssdr ;
return & dma - > params . params . params ;
if ( ! dma )
if ( ! has hw contexts ( dev , null
if ( ! ( dev - > driver - > driver features & params gem > params gem
args - > ctx id = ctx - > ctx id ;
ctx = create hw context ( dev , file priv , & error abort > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL dma dma dma dma > NUMLITERAL > NUMLITERAL dma dma dma dma > NUMLITERAL dma dma dma dma dma - NUMLITERAL dma dma - NUMLITERAL dma dma - NUMLITERAL dma
int i915 gem context create ioctl ( struct drm device * dev , const void * data ,
spin unlock ( & cd - > hash lock ) ,
spin unlock ( & data - > hash lock ) ;
spin lock irq ( & cd - > hash lock ) ,
hlist del init ( & h - > cache list ) ;
if ( ! hlist unhashed ( & h - > cache list ) & & - enomem ( file ) ( dev ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file ( file
i915 gem release ( dev , file , & > list ;
i915 gem flush objects ( to i915 ( dev ) ) sctp sctp objects " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void i915 driver postclose ( struct drm device * dev ;
mutex lock ( & dev - > struct mutex ) ;
spin unlock ( & dev - > struct lock ) ;
snprintf ( lhcall crash , pa ( int , int , static ; i915 <unk> ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ;
static void <unk> power off ( void , error * * errp )
} on once ( } , NUMLITERAL )
{
lguest state free ( )
return parse common ( data , & flags size ) )
static int flags size ;
static int parse common flags ( const void * data )
static int flags offset ;
" STRINGLITERAL " , ( " STRINGLITERAL " ) & & > = dev struct <unk> none > NUMLITERAL > } > & - einval > NUMLITERAL > & - - - - & - - - & - - - - - * port > NUMLITERAL > } > } > & - " > NUMLITERAL > & - einval > & " STRINGLITERAL ;
head = sctp get <unk> ( epb - > address resource resource resource resource STRINGLITERAL = STRINGLITERAL address resource resource io resource resource io resource io resource io resource io resource io resource io resource io resource io resource io resource io resource io resource io resource io acpi acpi acpi acpi acpi <unk> acpi acpi acpi acpi acpi <unk> acpi acpi acpi address io acpi acpi acpi <unk> acpi acpi acpi address io acpi acpi <unk> acpi acpi acpi address io acpi acpi <unk> acpi acpi address acpi acpi <unk> acpi acpi <unk> acpi acpi address acpi acpi <unk>
hlist del init ( & epb - > node ) ;
epb = asoc - > base . base ;
epb - > hashent = sctp assoc hashfn ( epb - > data . NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof io * data * data * data * data * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base * * address * STRINGLITERAL base *
sctp write unlock ( & head - > bind lock ) ;
void acpi rs dump io ( union acpi resource data * resource )
resource - > io . max base address = null ;
acpi os printf ( " STRINGLITERAL \n " ) ;
acpi function entry ( ) ;
acpi rs out string ( " STRINGLITERAL " ,
if ( x - > tunnel & & x ;
if ( refcount read ( & t - > tunnel users ) )
refcount dec ( & t - > tunnel users ) ;
xfrm state delete ( t , & t - > tunnel ) i915 ( ) ; ; ; ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " STRINGLITERAL null STRINGLITERAL " STRINGLITERAL " acpi io " STRINGLITERAL " acpi - > <unk> acpi <unk> acpi <unk> " STRINGLITERAL
static void xfrm state delete tunnel ( struct xfrm state * x )
integrity audit msg ( audit integrity metadata , dentry - > table } )
enum integrity status evm status = evm no evm status ;
if ( evm status = = integrity <unk> | |
unsigned int ia valid = attr - > ia valid ;
if ( ! ( ia valid & attr uid | attr gid ) ( ( dump mode ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dump table ( const archive * fout , table info * , , , table )
dump sequence ( fout , tbinfo , & tbinfo - > > = , <unk> * NUMLITERAL p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
dump table schema ( fout , tbinfo , & tbinfo - > > = , , , , , , - <unk> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
namecopy = <unk> ( fmt id ( tbinfo - > dobj . dobj + , <unk> * NUMLITERAL * sizeof ( * NUMLITERAL * NUMLITERAL * , * errp * errp * errp * , * errp * errp * , * errp * * * * errp * * * * errp * * errp * * errp * , * errp * errp * errp * , * errp * errp * , * errp * errp * , * errp * errp * , * errp * errp * , * errp * errp * , *
if ( tbinfo - > dump & & tbinfo - > dobj . ( , for <unk> <unk> * NUMLITERAL * sizeof ( * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * namecopy * errp * namecopy * errp * namecopy * errp * namecopy * errp *
if ( p - > sink & &
return snd soc dai get drvdata ( p - > sink ) ;
w = snd soc dai get drvdata ( dai ) ;
w = snd soc dai get drvdata ( dai ) ;
snd soc dapm widget for each sink path ( w , p ) {
if ( ! mp - > mp bh [ i ] page page ) - null - > )
for ( i = NUMLITERAL ; i < gfs2 max meta is is int ; i . . ! . ? i . acl - . ! . <unk> - . - . ! . <unk> - . - NUMLITERAL - . - . ) {
kfree <unk> ( mp - > mp bh [ i ] page page ) ) ) ) - > ) ( ) ( ) ( i ) ( i ) ( ) ( ) ( i ) ( i ) ( i ) ( i ) ( ) ( ) ( i ) ( i ) ( i ) ( i ) ( i ) ( i ) ( ) ( ) ( i ) ( i ) ( i ) ( i ) ( i ) ( ) ( ) ( i ) ( i ) ( i )
static inline void release metapath ( struct work * dev )
int i = NUMLITERAL ;
void flush tlb page ( struct vm area struct * vma , unsigned long . <unk> ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
flush tlb page ( vma ? vma - > vm_mm : name , . vm ) . > . vm_mm * + + *
if ( is vm hugetlb page ( vma , null ) )
flush hugetlb page ( vma , vmaddr , null ) ;
mmu get tsize ( mmu virtual psize , NUMLITERAL ) ;
atomic inc ( & ced - > max nr ranges , & ) ( & ) ( & ) ( & ) ( & ; ) ( NUMLITERAL , & ) ( & ; ) ( NUMLITERAL - > if lock } ( & ; ) } ( & ) ( & ; ) ( & ; } } ( dev } } } ( & ) } ( & ; ) ( ) ( & ; } } } ( dev } } ( ) ( & ) } ( ) } ( & ) } ( & )
atomic inc ( & ced - > max nr ranges , & ced , NUMLITERAL } } } ( ) ( & ) } ( & ) ( ) ( & ) ( ) ( & ; } } } } ( dev } } } } } } } } } ( & ) } ( & ) } ( & ) } ( & ; } } } } } } ( dev } } } } } ( & ) } } } ( & ) } } } ( & ) } ( & ) }
atomic inc ( & ced - > max nr ranges , & ced
if ( crashk low res . end )
struct kimage * image , * tmp )
static void usblp bulk read ( struct urb cancel cancel cancel cancel , info & & ;
wake up interruptible ( & usblp - > wait ) ;
if ( unlikely ( usblp - > present ) )
warn on ( " STRINGLITERAL " ,
struct usblp * usblp = urb - urb - urb ;
int nr busy = pool - > nr , > nr )
bool managing = mutex is locked ( & pool ) ;
int nr idle = pool - > nr idle + regs ;
static bool too many workers ( struct work * net , minor * > > NUMLITERAL , struct <unk> , struct worker hw * <unk> = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
return nr idle > NUMLITERAL & & ( nr idle - struct nr > if ( max <START_BUG> idle cfg , ; idle STRINGLITERAL workers <START_BUG> = ) ( nr state = ) ( nr = ) ( nr state = ) ( nr state = ) ( nr state = ) ( nr state = ) ( nr state = ) ( nr state = ) ( nr state = ) ( } = ) ( } = ) ( } = ) ( } = ) ( } = ) ( } = ) ( } = )
blk aio cancel async ( req - > timer - > timer ;
if ( req - > aiocb & & req - > timer - > <unk> - hw ;
notifier list add ( & req - > cancel notifiers , , , , , , , status ; ) ( case ;
scsi req ref ( req , & req - > dev - > <unk> - > <unk> - > <unk> ;
if ( req - > io canceled & & req - > * <unk> - > <unk> - > <unk> - > data ;
if ( arp - > op code = = htons ( arpop reply ) ) {
} else if ( arp - > op code = = <unk> ( arpop request ) ) {
bond - > alb info . rlb update delay counter = rlb update delay ;
struct slave * tx slave = null ;
if ( tx slave & & tx slave ) {
btci = kzalloc ( sizeof ( struct brcmf status ) ) ) the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the slave slave slave slave slave slave slave the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
btci - > bt state = brcmf bt dhcp idle | ( ( ( void bytes bytes the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
timer setup ( & btci - > timer , brcmf status update = , ulong ) ) ) the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
static int brcmf btcoex attach ( struct brcmf cfg80211 info * cfg ) cfg ) ) ) ) ) ) ) ) the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
init work ( & btci - > work , brcmf btcoex handler ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; )
u8 * bytes , int * errno )
status = i40e nvmupd ( hw , i40e not supported slave slave slave slave slave slave * NUMLITERAL slave slave slave slave * sizeof . data slave slave slave slave slave slave * sizeof . data slave slave slave slave slave slave slave * data slave slave * data * errp * errp * * errp * data * data * data * * * * * * * with * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * NUMLITERAL * * * * * * with * <unk> * <unk> * <unk> * <unk> *
i40e nvm update state str [ upd cmd ] ;
i40e debug ( hw , i40e debug nvm ,
* errno = - <unk> ;
queue - > cw max = ( unsigned long int int * * * * > ) = )
queue - > txop = NUMLITERAL ;
spin lock init ( & queue - > if lock int int * data * data * data * data > null
queue - > qid = ( unsigned long ) qid - > ;
queue - > aifs = NUMLITERAL ;
static unsigned int bitbang txrx NUMLITERAL (
const u32 * tx = t - > tx buf ;
u32 * rx = t - > rx buf ;
unsigned int bits = spi - > bits per word ;
word = * tx ;
bool emit wait , bool <unk> )
static void cik sdma semaphore ring emit ( struct radeon <END_BUG> > rdev - rdev ,
struct radeon ring * ring ,
u64 addr = semaphore - > gpu addr ;
radeon ring write ( ring , upper NUMLITERAL ( addr ) count word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word
if ( thread - > namespaces queue & & ; ! - - ( ( ( ( ( ( ( ( ( ( ( ( ( struct radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon radeon ( ( ( ) ( ( ) ( ) ( ; = = = = = = = = = = = = NUMLITERAL ( ; = = = = = NUMLITERAL (
return list first entry ( & thread ) * NUMLITERAL , ;
struct namespaces * thread namespaces ( const struct ; rt2x00dev rt2x00dev start start start addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
return <unk> <unk> ( thread - > namespaces list
} on ( ! thread - > namespaces list ) * NUMLITERAL ; ;
static int rvu alloc rsrc contig ( packet ring * dev , > > > > > + t t * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * ;
bitmap set ( & rsrc - > bmap , addr , NUMLITERAL ;
if ( start > = rsrc - > max )
if ( ! rsrc - > bmap | | ! ring ( ring * - ( > + * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * func * func * t * t * + * + * ; * func * func * NUMLITERAL * t * + * errp * t * + * errp * t
return - <unk> ;
if ( ! is session
struct ceph connection * con get ( & & & NUMLITERAL ;
struct ceph mds session * s = null )
return ! ! con ;
return ! ! ( null ; con , con - > <START_BUG> . data - > data - > data ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ; ring ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
if ( i915 reset failed ( i915 , i915 , min ( min ( - - - , , scsi ) ) ) )
bool intel engines are idle ( struct drm i915 private * min ( ( phys force ref ) )
if ( ! intel engine is idle ( engine , i915 engine <unk> ( ) ) )
for each engine ( engine , i915 , id ) {
enum intel engine id id = intel engine id ( i915 ) ;
mutex unlock ( & em28xx sysfs lock ) ;
mutex lock ( & em28xx sysfs lock ) ;
usb put dev ( dev - > udev ) ;
list del init ( & dev - > devlist ) ;
static void em28xx release resources ( struct em28xx * dev , error * * errp )
static void unref picture ( const h264context * h , picture * pic )
av buffer unref ( & pic - > qscale table buf ) ;
av buffer unref ( & pic - > ref index buf [ i ] ) ;
ff thread release buffer ( h - > avctx , & pic - > tf ) ;
av buffer unref ( & pic - > motion val buf [ i ] ) ;
if ( is enabled ( config <unk> * zone ) )
int dma direct supported ( struct device * dev , u64 mask )
return mask > = phys to dma ( dev , min mask ) ;
u64 min mask = NUMLITERAL ;
min mask = dma bit mask ( NUMLITERAL , NUMLITERAL ) ;
status = efi thunk ( get next high mono count <END_BUG> <END_BUG> <END_BUG> idle check min min - NUMLITERAL NUMLITERAL spin spin - ; ( > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ; - ( u32 - part - > <unk> - NUMLITERAL - NUMLITERAL - ; - > <unk> - NUMLITERAL - NUMLITERAL - ; - ; - NUMLITERAL - NUMLITERAL - ; - ; - ; - <unk> - > <unk> - NUMLITERAL - NUMLITERAL - ; - ; - ; - ; - <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL
efi thunk get next high mono count ( u32 * count - ( ! <unk> <unk> <unk> > NUMLITERAL > < NUMLITERAL - sizeof current - " - > <unk> - task )
phys count = efi virt to phys ( count ) ;
u32 phys count = NUMLITERAL ;
enum efi status status ;
blk run queue ( current sdev - > request queue ) ;
blk run queue ( & sdev - > request queue ) ;
starget - > starget sdev user = null ;
if ( starget - > starget sdev user | | starget - > starget sdev user )
void scsi single lun run ( struct scsi device * current sdev )
memcpy ( buffer , & cell - > name - = = = = = + + + proto + NUMLITERAL proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto
struct afs cell * cell = vnode - > volume - ) node node node node node node node node node node node > len node node node node node node node > NUMLITERAL node node node node node node node > NUMLITERAL node node node node node node node > len node node node node node node > NUMLITERAL node node node node node node node > NUMLITERAL node node node node node node node > len node node node node node node > NUMLITERAL node node node node node node node > NUMLITERAL node node node node node
struct afs vnode * vnode = afs fs i ( inode , null proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto proto - > ps - > len proto node proto proto proto proto proto proto proto proto node node node node node node node node node node node node node node node
if ( size = = NUMLITERAL | | ! cell - > <unk> )
void * buffer , size_t size , unsigned int flags )
innerhashkey = get rightop ( lfirst ( hashclauses , hashclauses ) ) ;
create hashjoin node ( const hash path * best path ,
hashclauses = switch outer ( join <unk> ( hashclauses ,
hashclauses = get actual clauses ( best path - > path hashclauses ) ;
hash join * join node , * tmp ;
page = ( void * ) get free page ;
warn on ( max > = kvm nr mem objs ) , struct work strlen field
int min , int max , int flags )
atomic inc ( & cache - > objects [ cache - > nobjs ] * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( int * * * ( int * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
if ( ! page | | ! page - > objects )
static void pci host config write ( void * if ( min * )
if ( addr ! = NUMLITERAL | | len ! = return return = size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size - size -
s - > config reg = val ;
uint64_t val , unsigned int len )
pci dprintf ( " STRINGLITERAL " plx " STRINGLITERAL " plx )
if ( driver . minor < NUMLITERAL | | , , & init & & ! <unk> - > state ( ( char * ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char
pr err ( " STRINGLITERAL \n " ) ;
driver . dev = lirc sir dev - > dev " void )
static int init chrdev ( void )
return - <unk> ;
process node ( proto sibling node , stat node , ps , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
g assert ( finfo - > hfinfo - > parent = = NUMLITERAL <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash
proto sibling node = g node next sibling ( proto node , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash
stat node = find stat node ( parent stat node , finfo - > hfinfo ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash
struct ph stats node * stats ;
if ( zonedev & & ! zonedev - > work has ) init
zonedev - > work scheduled = true ;
int cpu = smp processor id ( ) ;
raw spin lock irqsave ( & pkg temp lock , flags ;
spin unlock irqrestore ( & zonedev - > pkg temp lock , flags ; - NUMLITERAL ) ;
level = brightness get ( & init net , null ) ;
static int brightness write ( const char * buf )
level > = NUMLITERAL & & level < = max level ) {
if ( level < NUMLITERAL | | level > = NUMLITERAL )
int max level = ( tp ) tp features ? NUMLITERAL : NUMLITERAL ;
rrng . stat rng err cnt = v64 ;
v64 = atomic64 read ( & alg - > hash err cnt " STRINGLITERAL " level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level
static int crypto report rng ( struct sk buff * skb )
snprintf ( rrng . type , " STRINGLITERAL " , sizeof ( rrng . ? sizeof & & = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
return nla put ( skb , cryptocfga stat rng , sizeof ( rrng ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " level level level level level level level level level level level level level level level level level level level level ) ( , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void mvebu pci bridge emul init ( struct mvebu pcie port read read read & & NUMLITERAL & & NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & & cmd = = NUMLITERAL & &
bridge - > conf . conf . class revision =
if ( mvebu has ioport ( port , null ) ) {
pci bridge emul init ( bridge , bridge ) ;
bridge - > has pcie = true ;
static int tlb miss wa ( int fifo size , ;
int tlb miss = fifo size * NUMLITERAL - fifo next ( flags lock pcie alg ( - - , , NUMLITERAL & & - - , , NUMLITERAL & & , alg miss & & , alg miss & & , alg miss & & , alg miss & & , alg miss & & , alg miss & & , alg miss & & , alg miss & & - - , alg miss & & , alg miss & & , alg miss & & , alg stat ( NUMLITERAL & & , alg miss & &
return max ( NUMLITERAL , tlb miss , null ) ;
} on once ( NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
int tlb miss = fifo size * NUMLITERAL - fifo size * width ( - - cnt stat ( NUMLITERAL - NUMLITERAL ) ( NUMLITERAL & & , NUMLITERAL & , , , , , , , , , , NUMLITERAL & , , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , , , miss & , , ,
static void qdict destroy obj ( q object * obj )
qdict = qobject to ( q dict , obj ) ;
for ( i = NUMLITERAL ; i < qdict - > schedule ; port + ; = + ) >
assert ( obj ! = null | | obj < = long max ;
qlist remove ( entry , next , null ) ;
dissector add ( " STRINGLITERAL " errno ; <START_BUG> { ( void ; if rx rx rx rx rx ; = = ;
proto reg handoff bgp ( void )
} = }
{
mem port free ( )
requests = ( checkpointer request * ) snprintf ( & n - > checkpointer , n * sizeof ( checkpointer request ) ) ;
bg writer stats . m buf fsync backend + = checkpointer shmem - > num backend fsync ;
checkpointer shmem - > num backend fsync = NUMLITERAL ;
n = checkpointer shmem - > num requests ;
if ( ! am checkpointer process ( ) | | ! am <unk> process ( ) )
int save errno = errno ;
errno = save errno <unk> ;
if ( catchup interrupt pending & & ! <unk> dp )
process catchup interrupt ( ) ;
check for interrupts ( <unk> state . <unk> regs . <unk> ) irq " STRINGLITERAL " - > <unk> ) ) )
if ( dp )
while ( ep = ( unsigned int ) readdir ( dp ) ;
kfree <unk> ( ep - > d name ) ;
( void ) <unk> ( dp , null ) ;
<unk> ( void * ctx )
fcpci2 irq ( int intno , void * dev )
if ( val & avm status0 irq hdlc | | val = = page <unk> ;
if ( val & avm status0 irq isac )
if ( val & avm status0 irq isac )
if ( ! ( val & avm status0 irq mask ) )
rx - > data . page info = <unk> (
if ( ! rx - > data . page info )
dma addr t addr = gve rx addr ( rx - > request * > ; num , ; > = is <unk> size ( ; , ; to , ; to to t , ; > NUMLITERAL , NUMLITERAL , is ) ( ; ; t , ; to to t , ; t , ; to , ; t , ; to to t ( ; , ; > NUMLITERAL , NUMLITERAL , is ) ( ; ; t , ; to , ; to to t , ; t , ; to , ; t , ;
slots = rx - > data . data . mask + NUMLITERAL ;
gve setup rx buffer ( & rx - > data . page info [ i ] ,
if ( mp - > shadow info dirty & & & mgr - > HEXLITERAL )
if ( op - > shadow info dirty )
op = get ovl priv ( ovl - > overlays , ; ;
list for each entry ( ovl , & mgr - > overlays clear clear ) <START_BUG>
struct omap priv data * mp = null ;
static int mv88e6xxx reg write ( struct mv88e6xxx priv do struct struct struct struct struct . [ * net , * addr ,
int reg , u16 val , u32 val )
assert smi lock ( & init net , ps ) ;
dev dbg ( & ps - > dev , " STRINGLITERAL <END_BUG> find ;
addr , val , val ) ;
rtlpci - > irq enabled = rtl - > }
static void rtl8821ae enable interrupt ( struct ieee80211 hw * hw )
if ( ! rtlpci - > int clear )
rtl8821ae clear interrupt ( hw , null ) ;
system interrupt is enabled ( e ) , e . g . c2h , cpwm {
void err load dso strings ( void )
if ( err func error string ( dso str " " record pevent record ( ; functs mask ( ; reg ( ; ( ) ( ) ( ( ) ( > ) ( > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
err load strings ( NUMLITERAL , dso str functs , null record record record ( ) ( ) ( ) ( ( ) | | ) ( ) ( ) ( ( ) < ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( )
err load strings ( NUMLITERAL , dso str reasons ) ;
} on ( ! err load dso ( ) ) }
tep find event by record ( struct tep handle struct struct ;
return tep find event ( pevent , type ) ;
tep warning ( " STRINGLITERAL " , record - > size mgr return ( ( int - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr - ptr
if ( record - > size & & record - > return = entry > = write <unk> ) ) ) ) ) ) - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - NUMLITERAL - bug - : NUMLITERAL - ( and - > NUMLITERAL - NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - > NUMLITERAL - NUMLITERAL - >
type = tep parse common type ( pevent , record - op |
g free ( ( char * ) data - > name ) ;
g free ( ( void * ) data - > filedata ) ;
if ( data - > mmaped )
<unk> free ( & data - > <unk> ) ;
nl remove locale ( int locale , struct kernel locale data * data )
array = vzalloc ( array - > map . max entries * array - > elem size ) ;
return array - > map - > map - > map ;
array - > map . map entries = attr - > max entries ;
array - > map . key size = attr - > key size ;
array = kzalloc ( sizeof ( * array ) + attr - > max entries size ,
if ( ! dpu plane enabled ( state , null ) ) {
dpu plane atomic disable ( plane , old state ) ;
} else if ( plane - > state & drm <unk> <unk> ) {
dpu debug plane ( pdpu , " STRINGLITERAL " ) ;
warn on ( ret < NUMLITERAL ) ;
hist entry free ( & n - > entry , n ) ;
if ( hists decay entry ( hists , n ) & & ! n - attr array > map > map > NUMLITERAL > map > map > map > map > map > map > map > map > map > map > map > map > map > map > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL > map > NUMLITERAL >
n = rb entry ( next , struct hist entry , rb node ) ;
rb erase ( & n - > rb node , & hists - > entries ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct rb node * next = rb first ( & hists - > entries ) ;
return i915 live subtests ( tests , ( pos ; ( ( pos ; ( ( n ) - NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > = value > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = value > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
subtest ( live hwsp alternate ) ,
subtest ( live hwsp recycle ) ,
if ( i915 <unk> wedged ( i915 ) )
subtest ( live hwsp engine ,
* pos = ht invalid idx ;
while ( idx < NUMLITERAL | | idx > = > > > > > struct <unk> <unk> size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
idx = ht - > n num used ;
is consistent ( ht , null ) ;
* pos = idx ;
filter - > preds [ i ] i915 ( unsigned long hash hash , plane ! = ( ( force force force , ( it * * * * * * * * * * * * * * * * * * * * * * * * * * ( ( ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ! ( ( ( ( ( ( ( ( ( ( ( ( ( it * *
filter - > n preds = ftrace event <unk> )
void filter disable preds ( struct ftrace event call { {
struct event filter * filter = call - > ( call - > ht , " STRINGLITERAL " * func * ( , * , ( it * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
call - > filter active = null ;
rrb = clp alloc block ( gfp atomic | | STRINGLITERAL <unk> <unk> = = req <unk> ( } ( } ( } ( } ( } ( } ( } ( } ( * ) ( } ( } ( } ( } ( } ( } ( } ( req ( } ( } ( } ( } ( } ( } ( } ( } ( req ( * ) ( } ( } ( } ( } ( } ( } ( } ( } ( req ( } ( } ( } ( } (
rc = clp list pci ( rrb , & enodev struct <unk> scan = ; > req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req ( req (
int clp get state ( u32 fid , & " STRINGLITERAL ( & key get ) = = NUMLITERAL = = NUMLITERAL ( ( struct zpci > req ( > zpci > > zpci > > > > > > > zpci > > > > > > > > > > > zpci > > > > > > > > > > > > > > > zpci > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
struct clp state data sd = { fid , " STRINGLITERAL ( = get get ) ( get get tuple bt ) ( all = = get ) ( get get ) ( & key = ; bt bt = NUMLITERAL = = lock = NUMLITERAL = = NUMLITERAL } } } } } } } } } } } } } } } } ( = class = = lock = = NUMLITERAL } } } } } } } } } } } } } } } } } } } } } } } } } }
clp free block ( & init net , rrb ) ;
req - > rq real sent = get seconds ( ) ;
sptlrpc request out callback ( req , null ) ;
ptlrpc client wake req ( req , null ) ;
void request out callback ( struct lnet event * ev )
spin unlock ( & req - > rq lock ) ;
if ( ! <unk> ( <unk> ( = ! ( ( = retval ; , ) ) ) )
lisp union ( const list * l1 , list )
retval = lappend ( retval , <unk> ( = = ! ( - - rel ) ) ) scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan scan
list * retval = list copy ( & l1 - > <unk> state ( NUMLITERAL ) ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap ) scan scan scan ( heap )
foreach ( i , l2 , <unk> )
scan = heap beginscan catalog ( class rel , NUMLITERAL , key ;
heap scan desc scan ;
heap endscan ( scan , null ) ;
class rel = table open ( relation relation id , null , null > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL req > NUMLITERAL req req req > NUMLITERAL req req req req > NUMLITERAL req req req req > NUMLITERAL req req req req > NUMLITERAL req req req req > NUMLITERAL req req req req > NUMLITERAL
if ( is publishable class ( relid , rel form ) )
struct hfa384x * hw = null ;
hfa384x destroy ( hw ) ;
dev err ( interface - > dev , " all \n ; get ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - , , , " req > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - enodev - NUMLITERAL - NUMLITERAL - NUMLITERAL - , , NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - , } - NUMLITERAL - , - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - , ,
if ( result ! = NUMLITERAL | | result ! = heap <unk> ;
<unk> put ( hw ) ;
* serial = g <unk> ( dinfo i list retval retval ( , , , , , , , , scan , scan , scan , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ,
void blkconf serial ( block conf * conf ! char i ( { > > > NUMLITERAL ) ; ;
dinfo = drive get by blockdev ( conf i list retval list ( conf - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , null , null , null ,
if ( ! * serial ) {
drive info * dinfo ;
if ( ! * irq & & * irq ) {
dev err ( & pdev - > dev , " STRINGLITERAL \n " > * func > NUMLITERAL * - - file * sizeof , - einval * errp * free * - * - ( void count * * * * * * * * * * * * func * - * * * * * * * * * * * * * * * * func * func * func * - file * - * err * NUMLITERAL * free * - free * - * - free * - * - - ( max
if ( ! id | | ! id - > <unk> )
struct device node * np = dev - > of node ;
static int <unk> probe of ( struct device * dev , int * irq -
freed = cvm oct fill hw memory ( pool , device ( buf ( = = = = thread thread mutex mutex = thread , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
int cvm oct mem fill fpa ( int pool , int device ( )
freed = cvm oct fill hw skbuff ( pool , size , = * attr ( " STRINGLITERAL " = thread = = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk> = . <unk>
if ( ! cvm in hw )
int <unk> = NUMLITERAL ;
buf = ( char * ) get free page ( gfp atomic | gfp zero ) ;
area = omap find iovm area ( obj , ( u32 ) ppos ) ;
struct omap iommu * obj = file get drvdata ( file ) ;
free page ( ( unsigned int ) buf , null ) ;
spin lock ( & iommu debug lock ) ;
ret = get wireless state ec ( dev , & enabled ) error ( ; ; ; if - > name ;
int ret , enabled , enabled ;
static ssize_t <unk> show ( struct device * dev ,
return <unk> ( buf , " STRINGLITERAL \n " , enabled ) ;
ret = get wireless state ( & enabled , null , null ) error ( & ; & : else NUMLITERAL ;
acpi os release mutex ( obj desc - > mutex ) ( & = = = = iommu <unk> ;
static void acpi ex release all mutexes ( struct acpi thread state * thread p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
if ( obj desc - > mutex . os mutex = = acpi gbl global } p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
( void ) acpi ev release global lock ( ) ;
obj desc - > mutex . owner thread = null ;
struct path * path = & filp - > f path , null , * data - > <unk> - > data )
struct inode * inode = path - > d inode ;
int error = get write access ( inode , & inode - > device ;
error = security path truncate ( path , null ) ;
error = do truncate ( path - > dentry , NUMLITERAL ,
static void icp unrealize ( device state * dev timer timer timer > NUMLITERAL > NUMLITERAL ;
vmstate unregister ( & vmstate icp server , icp ) ;
icp state * icp = icp ( dev , null , null > < NUMLITERAL > NUMLITERAL ;
qemu unregister reset ( icp reset , dev , null ) ;
} on once ( } , NUMLITERAL , & errp ) ;
struct page * * pages = iommu dma get pages ( cpu addr , cpu addr ) ;
if ( is enabled ( config dma remap ) & & is vmalloc addr ( cpu addr ) ) {
ret = sg alloc table ( sgt , NUMLITERAL , gfp atomic ) ;
page = virt to page ( cpu addr , cpu addr ) ;
sg set page ( sgt - > sgl , page , page align ( size ) , NUMLITERAL ) ;
seg p - > proc state [ i ] > u return u bool > check > check reset reset ( - , - part - > ret ) ( , page ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
seg p - > max msg num = NUMLITERAL ;
seg p - > proc state [ i ] . next , addr = )
seg p - > min msg num = NUMLITERAL ;
for ( i = NUMLITERAL ; i < seg p - > set char )
if ( ! eth ) {
ether t * get ethbyaddr ( u char * addr )
set ethent ( g pethers path ) ;
set ethent ( g ethers path ) ;
end ethent ( & g <unk> ( g <unk> t ) ) ;
static bool dc commit context ( struct dc * dc , struct dc * dc addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
result = dc commit context no check ( dc , context , null ) ;
if ( ! context changed ( dc , context ) )
dc - > ctx - > logger ,
dc stream log ( & init net , stream , dc - > ctx ,
add timer ( & fsf req - > timer NUMLITERAL NUMLITERAL NUMLITERAL addr addr addr addr - NUMLITERAL - ( unsigned long cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu cpu * NUMLITERAL cpu
fsf req - > timer . data = fsf req - > + <unk> NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) )
static void zfcp fsf start timer ( struct zfcp fsf req [ [ ( char * * * i " i ; struct log i - - - i - > i - ( i - i - part - > i - > i - > i - > i - > i - > i - > i i - ( log i - * - i - i - i - i - i - i - i - i - i - ( i - i - i - i - i - i - i
fsf req - > timer . expires = timeout ;
fsf req - > timer . function = zfcp fsf request timeout < proc fsf <END_BUG> * } )
pr debug ( " STRINGLITERAL \n " , ntohl ( resp - > status ) ) ;
if ( nlmsvc grace period & & resp - > status = = null ) {
resp - > cookie = argp - > cookie ;
pr debug ( " STRINGLITERAL \n " , func ) ;
nlm release file ( file , & host - > status ) ;
void send space ( unsigned long len )
safe udelay ( len , null ) ;
} on ( ! send space ( len ) ) ;
{
send space ( len )
list del init ( & q - > list ) ;
atomic dec ( & q - > buffers , & q - > key > = NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) )
if ( ! list empty ( & q - > list ) & & btrfs <unk> cache cache ) info
unsigned long flags = NUMLITERAL , * <unk> = NUMLITERAL ;
buf = list entry ( & q - > list , struct cx18 the extent chunk > cache > NUMLITERAL > cache
struct extent state * alloc extent state ( gfp t mask )
btrfs <unk> set ( & state - > refs , NUMLITERAL ) = group = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mask & = ~ ( gfp dma32 | gfp atomic | gfp <unk> ) = ~ = ~ ) ) )
state = kmem cache alloc ( extent state cache , mask ) ;
btrfs state state state ( state , mask ) ;
if ( bargs - > usage min = = NUMLITERAL )
if ( chunk used < user thresh )
else if ( bargs - > usage < = NUMLITERAL )
static int chunk usage range filter ( struct btrfs fs info * fs \n \n \n success file
btrfs put block group ( cache , null , chunk - > key cookie - > offset - > data - > data - > data - > data - > data - > data data - NUMLITERAL ( cache - > data - > data - sizeof ( u64 - > if - part - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev
void wilc handle delbeacon ( struct wilc vif * vif )
if ( ! wid . val | | ! wid - > buf )
s32 result = NUMLITERAL ;
if ( result & & result )
u8 * cur byte = null ;
kernfs remove ( root , & page - > control ;
void kernfs destroy root ( struct work * dev )
} on ( ! kernfs root root ( page ) | |
kernfs unregister ( & root - > control ) struct , , , ) & . ( root ; . <unk> )
kernfs free root ( root ) - NUMLITERAL ( page ) data . data )
return write data page ( page ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ) & ( > inode ) ( wbc ) ) ) ) , i , i , i , & i , i , i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i , & i ,
static int f2fs write data page ( & ( & ( & ( - page page ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct ( struct
struct writeback control * <unk> )
} on ( ! f2fs page data ( , , , , , > NUMLITERAL ; wbc ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return write data page ( page , wbc ) HEXLITERAL HEXLITERAL dev dev dev dev )
return syscall ustat ( k dev , * * * * * * = = = + + + ( bus ( bus ( ; + ( bus ( bus ( bus ( bus ( ; + + ( + ( + ( bus ( bus ( bus ( bus ( bus ( bus ( ; + + ( + ( bus ( ; + + ( + ( bus ( bus ( bus ( bus ( bus ( ; + + ( + ( + ( bus ( bus ( bus ( bus ( bus ( bus ( bus
ustat ( dev_t dev , struct kernel list data data data data data data data auth * <unk> )
unsigned long k dev ;
k dev = ( ( major ( dev ) & & ) - & <unk> <unk> ( ; ) struct inode ) ; , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
} = }
rpc shutdown client ( clone , null ) ;
if ( ( int ) flavor < NUMLITERAL | | ( int ) NUMLITERAL set ( ( ( ( ( ( ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( buf ( > ( " " ( ( force force force ( > ( ; size ( buf ( { NUMLITERAL ( , , , , , , , { NUMLITERAL ( { ( { NUMLITERAL ( { buf ( { { , { < < < <
flavor = nfs4 negotiate security ( inode , name , null ) ;
if ( ! clone )
enum authflavor authflavor flavor ;
list del init ( & timer - > ( rpc struct work struct ; * NUMLITERAL ) ) ,
stt expire list ( struct list head = unsigned int is is <unk> ;
timer = list entry ( slot - > next , stt rpc nfs4 , , , NUMLITERAL NUMLITERAL ) , stt * stt * stt ) , stt * NUMLITERAL ,
int expired = NUMLITERAL , * tmp ;
spin unlock ( & stt data . stt lock ) ;
uint8_t * eeprom buf = g <unk> ( NUMLITERAL * NUMLITERAL ) ;
<unk> ( eeprom buf , eeprom spd , eeprom spd size ) ;
if ( eeprom spd size & & eeprom spd size > NUMLITERAL ) {
qdev prop set uint8 ( eeprom , " STRINGLITERAL " , HEXLITERAL + i ) ;
const uint8_t * eeprom spd , int eeprom spd size )
raw write lock wait ( struct fmt * * s addr addr addr addr ( ( can struct rwlock = ; t ) )
if ( count - - < NUMLITERAL | | > <unk> - > <unk> ) {
refcount inc ( & spin retry counter ) ;
int count = NUMLITERAL ;
kfree <unk> ( ) ;
static void * alloc image page ( gfp t gfp mask , int safe needed )
while ( res & & page nosave free ( virt to page ( res ) ) ) {
if ( safe <unk> & & ! <unk> <unk> ( safe <unk> ) )
res = ( void * ) get zeroed page ( gfp mask | gfp zero ) ;
res = ( void * ) get zeroed page ( gfp mask | gfp zero ) ;
softusb write ( void * opaque , hwaddr addr , uint64_t ' )
s - > regs [ addr ] = value ;
error report ( " STRINGLITERAL " hwaddr STRINGLITERAL "
unsigned int size )
addr > = NUMLITERAL ;
coverity mark as afm allocated ( ptr , " STRINGLITERAL " ) ;
ptr = coverity alloc ( size , null ) ;
coverity negative sink ( size , null ) ;
void * g realloc n ( void * ptr , size_t nmemb , size_t size )
coverity writeall ( & ptr - > <unk> ) ;
return rqst exp find ( rqstp ( , , - - = = = = * * * dev ( gfp atomic res res res ( gfp res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res
mk fsid ( fsid num , fsidv ( count ( ) ; > addr ; ( ( ( void ; res res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res ( set res res res res res res res res ( set res res ( set res res ( set res res res res res res ( safe res res res res (
u32 fsidv [ NUMLITERAL ] ;
struct svc export * find fsidzero export ;
} ( & rqstp - > } ) }
void tm6010 set volume adc ( struct tm6000 core * dev , int vol )
tm6000 set reg ( dev , tm6000 req07 red vadc aadc rvol rvol , vol reg ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; res res res ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; res res res ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; res res res ; ; ; ; ;
if ( dev - > dev type & & dev - > dev type = = tm6010 ) mask
tm6000 set reg ( dev , tm6000 req07 rec vadc aadc lvol , vol reg ) ;
tm6000 set reg ( dev , tm6010 req08 rf3 right channel vol , vol reg ) ;
static void testerr ( void * * * errp ) base
xml char * string ;
xml char * values ;
int nb = NUMLITERAL ;
xml reg exec err info ( exec , & nb , ( values , NUMLITERAL int if if if if ) ) ;
old dissector add ( " STRINGLITERAL * ( * void exec xml ip rq rq rq rq rq rq rq > i915 - > ; cfs ; , cfs ; cfs ; , ;
proto reg handoff vrrp ( void null * * errp exec exec ;
} ( & ip - > } ) ;
{ each dissector ( " STRINGLITERAL " , ip )
old reg add ( " STRINGLITERAL " , func null null null exec ;
if ( rq - > global seqno & & rq - > buf seqno ) !
lockdep assert held ( & engine - > timeline . timeline lock ) rc held rc ( len ) rc held rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc ( len ) rc rc rc
gem bug on ( timeline = = & engine - > timeline ) rc rc rc rc rc rc rc rc rc rc rc rc rc rc ( = if ;
spin unlock ( & engine - > timeline lock ) ;
spin lock ( & engine - > timeline lock ) ;
static int dump cache ( void * obj , * nb ;
mwi event cb ( null , null , null ; ( ( unsigned long ) ) ) buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
struct stasis message * msg = obj ;
return NUMLITERAL ;
} = }
libcfs alloc ( buf , len , null ) ;
libcfs free ( buf , len , null ) ;
libcfs free ( buf , len , null ) ;
if ( pos > = rc | | pos > = rc ) {
if ( rc > = NUMLITERAL | | rc > = NUMLITERAL )
device info . ul next free vid mem = NUMLITERAL ;
disable ramdac output ( device info . p stg reg ) ;
if ( par - > mtrr handle )
iounmap ( & info - > screen base ) ;
device info . ul overlay offset = NUMLITERAL ;
return call path read ( & call - > cc * = cc * dentry ( dir ( dir ( dir , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ( * ( rate ( rate ( rate ( rate ( rate ( rate ( rate ( drv , ( rate ( * ( * ( * ( * ( / ( * ( * ( rate ( rate ( (
if ( unlikely ( is private ( & dir - > , & null ) ) ;
int security path mknod ( const struct path * dir , get , get exit exit ( if ; ;
unsigned int dev , unsigned int <unk> )
return NUMLITERAL ;
ixp2000 reg write ( ixp2000 irq enable out out > - , , , , , cpu ) null null null null null null null null ; ) ; ; ) ; ) ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ; ) ; ;
static void ixp2000 irq mask ( unsigned int irq ( unsigned * , ( struct dentry * net ) )
} on ( bit ( sizeof ( struct ixp2000 irq ( , <unk> ( ; size ) ) ) ) )
ixp2000 reg write ( ixp2000 irq enable clr , ( NUMLITERAL - info ( , , ; ) ) )
ixp2000 irq free ( NUMLITERAL ) ( <END_BUG> )
connc - > hash = curl hash alloc ( connection hash size , curl - > return - gfp return return HEXLITERAL clk clk clk
<unk> free ( connc ) ;
if ( ! connc - > hash ) {
connc = <unk> ( NUMLITERAL , sizeof ( struct <unk> ) ) ;
struct conncache * curl conncache init ( void )
static unsigned int ssp get clk div ( const struct driver data * drv data , int rate )
unsigned long ssp clk = drv data - > max clk rate | | drv data - > max clk rate ;
return ssp clk / ( NUMLITERAL * rate ) & HEXLITERAL ;
return ssp clk / rate - > clk / rate - NUMLITERAL ;
rate = min t ( int , ssp clk , rate ) ;
out target target ( buf , xlrec - > inode , ( ( get ( ( if ) ) ) ) ) ) ) ) ) ) ) ) ) ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
append string info ( buf , " STRINGLITERAL " , ( ( int dentry * , if , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
out gistxlogentryupdate ( string info buf , gistxlog entry update * dentry * dentry , ! ! ! ! ! { { { NUMLITERAL } str - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} } ( xlrec - > out info , string info dir , ( ( int , ( ( , ( * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
{ append target ( buf , xlrec - > node , ( ( NUMLITERAL * * , ( ( ( ( null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
vmstate unregister ( & vmstate cpu common , cpu ;
vmstate unregister ( & cc - > vmsd , cpu ) hash hash ) hash hash - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - -
if ( ! qdev get vmsd ( device ( cpu ) | | alloc <unk> ) ( <START_BUG> ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( data ( cpu ( cpu ( data ( cpu ( cpu ( cpu ( cpu ( cpu ( data ( cpu ( data ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu ( cpu
void cpu exec exit ( cpu state * cpu , error * * errp ;
cpu list remove ( & init net dev , cpu ) ;
init radix tree ( & ret - > radix root , gfp atomic ) ;
refcount set ( & ret - > refcount , NUMLITERAL ) ;
refcount set ( & ret - > nr tasks , NUMLITERAL ) ;
ret = kmem cache alloc node ( iocontext cachep , gfp flags , node ) ;
struct io context * alloc io context ( gfp t gfp flags , int node )
nthreads = thread map nr ( evsel list - NUMLITERAL ) uart int ( evsel up ( " STRINGLITERAL " ; ; ; init ;
list for each entry ( counter , & evsel , uint64_t )
const int ncpus = cpu map nr ( evsel , < < < < evsel cpus cpus ) ,
perf evsel enable ( counter , ncpus , nthreads ;
if ( initial delay & & evsel ) {
struct uart pxa port * up = dev id ; ( if ) ; ; ; ( alloc flags ;
if ( lsr & uart lsr <unk> | | " STRINGLITERAL " )
receive chars ( up , & lsr , null ) ;
if ( lsr & uart lsr <unk> )
static inline irqreturn t serial pxa irq ( int irq , void * if return )
static void bmdma addr write ( void * opaque up up ( port & hwaddr ; bpf
uint32_t mask = ( NUMLITERAL < < ( width & NUMLITERAL - > <unk> ) ) ; ; - , , , , , , , , , , , , , , , , , unsigned ;
printf ( " STRINGLITERAL \n " , func , ( in ) if ) ;
uint64_t data , unsigned int width )
int shift = addr * NUMLITERAL ;
nft unregister expr ( & nf table nat ops ) - NUMLITERAL = < NUMLITERAL , af ;
nft unregister table ( & nf table nat ipv4 * af > shift ) = shift , af err link link link ( \n ; \n > > NUMLITERAL ;
static void nf table nat exit ( void )
} on ( ! nft nat ops ) ;
nft unregister expr ( & nf table nat ipv4 ) - evsel )
bpf link free ( link , null ) ;
if ( check err ( link ) , " STRINGLITERAL " , " STRINGLITERAL io > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( ! bpf cubic <unk> ( cubic skel , " STRINGLITERAL " , " STRINGLITERAL io > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
bpf test ( cubic skel ) ;
static void test cubic ( void )
u32 igb hash mc addr ( struct e1000 hw * hw , u8 * mc addr )
hash mask = ( hw - > mac . mta reg count * NUMLITERAL ) ;
u32 hash value , hash mask = NUMLITERAL ;
switch ( hw - > mac . mac filter type ) {
u8 bit shift = NUMLITERAL ;
( void ) <unk> ( const outfiles [ ) void * sizeof key fh , { NUMLITERAL - part - > data ) > NUMLITERAL - NUMLITERAL - ctx - NUMLITERAL - ctx - NUMLITERAL - } - NUMLITERAL - m - NUMLITERAL - raw } - } - <unk> - part - NUMLITERAL - raw <unk> - NUMLITERAL - } - } - } - } - } - } - <unk> - part - NUMLITERAL - } - <unk> - NUMLITERAL - } - <unk> - NUMLITERAL - } - <unk> - NUMLITERAL - } - <unk> -
<unk> ( void )
for ( i = NUMLITERAL ; i < nfiles ( int * * fh fh fh - ( qp shift | qp <unk> - part - > - > - > <unk> - part - > - > <unk> - part - > - > - > i - part ) ) )
exit ( out <unk> , NUMLITERAL ) ;
int <unk> ;
struct fid * fid , int fh len ia ia ia ia ia ia ( if , if * ) , if )
if ( fh type ! = NUMLITERAL | | fh type > = ( unsigned long , ) , ; )
struct isofs fid * ifid = fid ;
struct dentry * isofs fh to parent ( struct super block * sb ia
return isofs export iget ( sb ,
time_t * limit = iterator data ;
static int keyring gc check iterator ( const void fh fh fh struct * )
const struct key * key = keyring ptr to , - - - - null ( if - > parent > = keyring } > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( ; ; value ) HEXLITERAL HEXLITERAL HEXLITERAL ( ;
key check ( & init net - > <unk> , , , , , ia
return key is dead ( key , * limit , null ) NUMLITERAL NUMLITERAL NUMLITERAL ( ia ) ) > - ! > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
if ( ! <unk> xchg ( & ctx ( the ( * ; that * * * * * * * * * * * * * * * * * * * case count * * * * case count * * * * case u32 * * * * * * case u32 * * * case break * NUMLITERAL * that * case break * NUMLITERAL * ; * NUMLITERAL * * errp * ; * NUMLITERAL * * errp * ; * NUMLITERAL * ; * NUMLITERAL * * * errp * ; * NUMLITERAL *
aio nr sub ( & ctx - > max reqs , ctx ( the ( the ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * case reqs hash * func * func * * * * * case reqs * func * the * case reqs * NUMLITERAL
warn on ( ctx ! = table - > table [ ctx - > + ] * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ; * * errp * * errp * errp * errp * * errp * * errp * errp * errp * * * errp * errp * errp * errp * errp * errp * errp * ;
table = rcu dereference ( mm - > ioctx table ) ;
table - > table [ ctx - > id ] = null ;
rdma destroy qp ( ia - > ri table ctx ctx ctx ctx ctx ctx ctx ctx ctx the HEXLITERAL the the HEXLITERAL the the HEXLITERAL the HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL . data the the HEXLITERAL . data the the HEXLITERAL . data the . ) . )
ib dealloc pd ( ia - > ri pd ) ;
rpcrdma destroy id ( ia - > ri id , null ) ;
if ( ia - > ri id & & ia - > ri id ctx ctx ctx ctx ctx ctx ctx ctx the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
pr debug ( " STRINGLITERAL \n " , func ) ;
params = container of ( work , struct ) ( > ) ( struct & rpc & & . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * msg . . * <unk> . . * <unk> struct . . * ctx struct . . * ctx struct . * ctx struct . * ctx struct . * null net net struct . . * NUMLITERAL net net struct . . * NUMLITERAL net
struct cros ec xfer work params * params , * * errp ( ; ; ) ) struct <unk> * NUMLITERAL ) net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net
static void cros ec xfer high pri work ( struct device struct * mm , struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct work > )
params - > ret = params - > fn dev ( params - - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} - > xfer . xfer . xfer work ( params ) ;
return iommu alloc coherent ( & vio iommu table ( ! vio iommu params params params params params params params params params ; struct handle ;
dma NUMLITERAL bit mask ( flag , NUMLITERAL context context ( local ( size - > work - struct { ) params params params params params params ; flag , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
void * iseries hv alloc ( size_t size context context ( void { params > work container t > high t > high t - work - work - work - work - work - work - ctx - ctx - ctx - ctx - ctx - ctx - ctx - ctx - ctx - last - ctx - last , " flag , " flag , " flag , " flag , " STRINGLITERAL " , " flag , " flag , " flag , " STRINGLITERAL " , " struct flag , " flag , " flag ,
} on ( ! vio iommu table ( ( ) ! = bh disable void - part - > work - struct { struct struct { struct struct page container - struct { work params - part - > size - struct { struct struct page size - struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct { node * net - page - part size , > > > > > > > > > > > > > > > > > > > > > > > > > >
return iommu alloc coherent ( & vio iommu table context context context ( { ( { { { { { { { size params params params params params params params params params params params params mask dev - NUMLITERAL - struct , work params dev mask dev mask - struct struct work ) - work params dev dev dev dev - NUMLITERAL - struct struct work * prog - > ) {
list add tail ( & buf - > create } & args ) = = addr
static void buffer queue ( struct videobuf queue * vq ( . " STRINGLITERAL " ( . " STRINGLITERAL " ( . " STRINGLITERAL " & <unk> * create & <unk> * create & <unk> * create & <unk> * <unk> & & ; & return return return return return ! ! " STRINGLITERAL " & & create } net & & . " STRINGLITERAL " & <unk> * <unk> & & ; & return return return return return return " STRINGLITERAL " & & create } net & & . " STRINGLITERAL " & & create } & &
snprintf ( NUMLITERAL < sizeof ( * channel ) , " STRINGLITERAL \n " ( func & & func ) & func & & func ) = func ) = func <unk> = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func = func
struct s2255 dmaqueue * vidq = channel - > vidq ;
buf - > vb . state = videobuf <unk> <unk> ;
struct dc status * context , * <unk> )
context - > dispclk khz = NUMLITERAL ;
struct dc dc * dc ,
static enum dc status dce80 validate bandwidth (
return dc <unk> <unk> <unk> ( dc ok ! = ) ? NUMLITERAL : work - NUMLITERAL - NUMLITERAL - work - NUMLITERAL , struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct
if ( should <unk> ( ) & & ret > = NUMLITERAL work work struct struct & & <START_BUG> <unk> ;
int sched cond resched softirq ( void )
cond resched ( ) ;
local bh enable ( ) ;
local bh disable ( ) ;
struct rpc clnt * nsm create ( struct net * net )
return rpc create ( & args , & args ) ;
. authflavor = rpc auth null ,
. sin addr . s addr = htonl ( inaddr <unk> ) ,
. program = nsm <unk> ,
ret = apex enter reset ( gasket dev ; )
gasket log info (
scalar error = gasket dev read NUMLITERAL (
hib error = gasket dev read NUMLITERAL (
if ( allow power save & & gasket power save i sp i ( i err err err c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c
if ( selinux authorizable xfrm ( x ) ) node
struct xfrm sec ctx * ctx = x - > cred ( memory ( unlock port port port > < return security cred > < security > { NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > { } > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL , { NUMLITERAL > { } , NUMLITERAL ,
if ( ! skb )
return ctx - > ctx sid & & ! <unk> <unk> <unk> <unk> ;
if ( sp & & sp - > sk ) {
static void nfnetlink bind ( unsigned int " " STRINGLITERAL " - > <unk> )
if ( ! ss | | ! ss - > <unk> )
request module ( " STRINGLITERAL " , type ) dev dev dev ;
int type = get nfnl <unk> ( group ) ;
spin unlock bh ( & nfnetlink lock ) ;
ffurl close ( c - > h ) ;
if ( ! c - > end )
av log ( h , av log error , " STRINGLITERAL \n " , func ) ;
if ( c - > end < c - > start ) {
if ( ( ret = slave seek ( h ) ) < NUMLITERAL ) {
shadow = alloc pages node ( node , flags | = return * notrack = < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
page [ i ] . shadow = page address ( const chip } ) ;
for ( i = NUMLITERAL ; i < pages ; + struct err )
if ( printk <unk> ( & init net , printk ratelimit ( ) ) )
pages = NUMLITERAL < < ( unsigned long ) order ;
u16 pvid , vid , vid ;
if ( ! mv88e6xxx has ( chip , mv88e6xxx flag pos ) )
if ( vid = = pvid & & vid = = if - > options ) }
up write ( & chip - > reg lock ) ;
spin lock ( & chip - > reg lock ) ;
static int nfs4 opendata access ( const struct cred * cred ,
} else if ( ( fmode & fmode read ) & & ! opendata - > file created )
cache . cred . cred = cred - > cr cred ;
nfs access cache ( state - > inode , & cache ) ;
if ( openflags & & openflags & & openflags & & openflags & & openflags exec ) {
return kvm x86 ops . get segment base iter iter iter iter iter iter mtd ( ; ) cap | | address * address = address = null = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
unsigned long get segment base ( struct kvm vcpu * event ( <START_BUG> ( + ; result ) )
} - > segment - > segment base - > segment )
return kvm x86 ops . get segment base ( vcpu , seg trace ;
kvm x86 ops . segment base - > segment base - > segment )
cap file input cb ( ( gpointer ) & cf ) , address ( address ( & > & flags ( flags ( t ( & > & flags ( flags ( t ( & > & flags ( flags ( t ( & > & flags ( flags ( t ( & > & flags ( flags ( t ( & > & flags ( flags ( t ( & > & > & flags ( flags ( t ( & > & > & flags ( flags ( t ( & > & > & flags ( flags
if ( avail > NUMLITERAL | | childstatus > = still active ) {
result1 = get exit code process ( ( handle ) child process , & long ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( flags ( { * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *
cap timer cb ( gpointer <unk> , <unk> <unk> * <unk> )
gboolean result , <unk> ;
trace event * ev = trace event get drvdata ( mtd - ; , ( ; , ; , ; , mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL & & ; access access <unk> )
trace event * trace event iter next ( trace event mtd ctrl ctrl * <unk> handle handle handle handle mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm - > ( ( ( ( ( ( ( ( ( ( ( ( ( (
while ( iter - > event < trace event count ) {
if ( ! iter - > pattern & &
atomic inc ( & iter - > event ) ;
zap hugepage range ( vma , address , size , null ) ;
tlb = tlb gather mmu ( mm , NUMLITERAL , NUMLITERAL ) ;
tlb finish mmu ( tlb , address , end , null ) ;
unsigned long nr accounted = NUMLITERAL ;
spin unlock ( & mm - > page table lock ) ;
uint8_t * buf , int oob required , } handle handle handle handle handle , int vm mm mm - > data - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - flags - NUMLITERAL - flags - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL - mask - NUMLITERAL
if ( oob required & & chip - > oob handle handle handle handle handle mm mm mm mm mm - > flags - mask - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part = = NUMLITERAL - NUMLITERAL - part = = NUMLITERAL - NUMLITERAL - part - > min )
if ( fsl elbc wait ( mtd , chip ) )
fsl elbc read buf ( chip , buf , mtd - > writesize , null mm mm mm mm mm mm mm ) tlb page ) tlb
static int fsl elbc read page ( struct mtd info * mtd , struct pipe * = unsigned int unsigned unsigned int unsigned unsigned int unsigned flags ,
e - > state = smt state <unk> ;
if ( e - > refcnt = = NUMLITERAL ) {
static void <unk> smte free ( struct work entry * e )
} & & ! <unk> <unk> ( & init - > state ) reg ( ) - NUMLITERAL HEXLITERAL speed ;
} on ( ! <unk> entry <unk> ( e ) ) }
uc fw - > status = intel uc firmware selected ;
if ( uc fw - > path & & uc fw - > <unk> )
uc fw - > status = intel uc firmware not supported ( i915 ) - NUMLITERAL - NUMLITERAL to supported to supported the the the the the the the the the the the the the the the the the the the the the the the to supported the the the to supported to supported the the the the the the the the the the the the the the to supported to supported the the the the the the the the the to supported to supported to supported the the the the the the the the to supported to supported to
uc fw auto select ( uc fw , intel info ( i915 ) ,
gem bug on ( uc fw - > path ) ;
if ( page trans compound ( pfn to page ( pfn ) ) ) {
static bool transparent hugepage adjust ( struct kvm pfn * pfnp , phys addr t * ipap )
if ( pfn & & pfn ( pfn ) ) {
kvm get pfn ( & pfn - > pfn ) ;
kvm release pfn clean ( pfn , pfn ) ;
u16 val = tlv320aic23 read reg cache ( codec , reg ) ; ; ; ( drive ) ;
struct snd soc codec * codec = socdev - > card - > fw . data ;
tlv320aic23 set bias level ( codec , codec - > suspend bias level ) ; ; ;
for ( reg = NUMLITERAL ; reg < = tlv320aic23 reset ; reg if if ) !
tlv320aic23 write ( codec , reg , val , null ) ;
static int <unk> tune chipset ( ide drive t * drive , address , address , address , address , address , address , address , address , address ;
( void ) sl82c105 tune pio ( drive , speed - NUMLITERAL ) * refcount pmd * refcount * refcount * refcount * refcount pmd * & , , , & , & , & , & , & , & , & , & , & , & , & , & lock ;
if ( drive - > using dma & & drive - > using . this . this . this . this <unk> ;
return ide config drive speed ( drive , speed , NUMLITERAL ) ;
drive - > drive data | = ( unsigned long ) drv ctrl ;
flush scheduled work ( & kaweth - > <unk> ) ;
static void kaweth kill urbs ( struct work * dev )
usb kill urb ( & kaweth - > tx urb ) ;
usb kill urb ( & kaweth - > irq urb ) ;
usb kill urb ( & kaweth - > irq urb ) ;
static int br pass frame up finish ( struct sock * net ) ) ) ) ) ) ) ) , struct * * - <START_BUG> , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp , struct * * errp ;
skb - > nf debug = NUMLITERAL ;
netif rx rx ( skb , null ) ;
return NUMLITERAL ;
} - > nf debug = null ;
pevent parse event ( struct tep handle * pevent ,
tep free format ( event ) ;
ret = tep errno mem alloc failed ;
int ret = tep parse parse format ( eventp , pevent , buf , size , sys ) ;
if ( blk & & tep add event ( pevent , event ) ) {
schedule delayed work ( & id - > timeout args args args args , <END_BUG> : <END_BUG> : } , null , null , null , * errp , * * errp , , flags , = { } , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
static void schedule delayed ( struct ib device * ibdev args args args , struct = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
id - > scheduled delete = & id - > scheduled delete pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent pevent event event event event event event event event event event event event event event event event event event event event event event event event pevent pevent pevent pevent event event event event event event event event event event event event event event event pevent pevent pevent pevent pevent pevent event event event event event event event
spin unlock ( & sriov - > id map lock ) ;
spin lock ( & sriov - > id map lock ) ;
if ( ! evoice | | ! evoice - > <unk> ) &
snd ali free voice ( codec , evoice , null node node node node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) )
snd pcm lib free pages ( substream , substream ) ( ) ( ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ) ) ) ) ) ) ) ) ) ) )
static int <unk> playback hw free ( struct snd pcm substream of return struct ;
pvoice - > extra = & pvoice - > extra ;
int init its init ( struct work device * pdev raw raw raw * * * * * * * down = lock = lock = NUMLITERAL =
its lpi init ( & rdists - > id bits > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL - sizeof ) ( parent - > irqsave cache - NUMLITERAL - sizeof ) ( parent , parent - > irqsave - } - > data - > data - > data - > data - > data - > data - > data - > data - > data - > flags - NUMLITERAL ( & ;
its alloc lpi tables ( handle , parent ) ;
gic rdists = rdists - > <unk> ;
pr debug ( " STRINGLITERAL \n " ) ;
if ( ci - > ci flags & fscrypt policy struct lock & & ( ( ( ( void down ret * * * * * * * * * * * * * * * * * * * * * * * * * * * event <END_BUG> <END_BUG> * event , & null * func * { & event , & event , & event , event * & event * event * event * event * event * event * <unk> * <unk> * <unk> * ctx * ctx * ctx * ctx * ctx *
if ( ci - > ci essiv tfm & & ( ( ( ( ( void down down & ( lock & lock <unk> & lock <unk> & lock <unk> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * * * * * * * * * * func * * * * * * * * * * func * * * * * func * * * * * * func * *
memset ( iv , NUMLITERAL , ci - > ci mode - - ) id id id id id ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
iv - > lblk num = cpu to le64 ( ci - > ci essiv & req <unk> & & ( > ( void down & lock & HEXLITERAL & HEXLITERAL & & ( > ( , & > ( , & > ( , , , , , , , , , , ( to struct lock & & ( > > ( void down & lock & HEXLITERAL & HEXLITERAL & & > , , , , , , ( to , , , , , , , , , , , , , , , , ,
void fscrypt generate iv ( union fscrypt iv * iv , u64 lblk num ;
mutex lock ( & udfs - > mutex ) ;
mutex unlock ( & udfs - > mutex ) ;
mutex unlock ( & udfs - > mutex ) ;
pr err ( " STRINGLITERAL \n " ) ;
pr debug ( " STRINGLITERAL \n " ) ;
u8 rts51x get lun card ( struct rts51x chip * chip dev ( < - <START_BUG> - > link " ) " STRINGLITERAL " " > { { { gfp t gfp " * errp " > )
return ( u8 ) ms card | ms card ;
return ( u8 ) sd card ;
return ( u8 ) xd card ;
return ! ! ( NUMLITERAL & & chip - > card . ) & ~ ( u8 - > <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " < dev ;
static void r100 gpu wait for vsync2 ( struct radeon device <END_BUG> <END_BUG> <END_BUG> > struct ;
uint32_t crtc2 gen cntl , tmp , tmp ;
if ( ( crtc2 gen cntl & radeon crtc2 disp req en b > NUMLITERAL > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
if ( tmp & radeon crtc2 vblank save | | tmp < = crtc2 { {
wreg32 ( radeon crtc2 status , radeon crtc2 vblank save clear ) ;
i40evf alloc rx buffers ( ring , ring - > count - ; - ( ! ) - NUMLITERAL - NUMLITERAL - ;
struct i40e ring * ring = i40evf get ring ( adapter ) ;
static void i40evf configure ( struct work adapter * adapter )
ring - > next to use = ring - > count ;
struct net device * netdev = adapter - > netdev . netdev ;
mv chan set next descriptor ( mv chan , sw = ret " STRINGLITERAL " radeon ring ring ring ;
mv xor issue pending ( & mv chan - > { . <START_BUG> - & mv ring ring ring ring ring adapter adapter adapter ;
mv chan - > pending + = sw desc - > if . } & = = i ( i ( i ring ring ring ring ; ret ;
struct mv xor desc slot * sw desc , * tmp - NUMLITERAL - NUMLITERAL radeon <unk> radeon ring ring ring ring ring ring ring ring ring ring ring ring ;
dev dbg ( mv chan to devp ( mv chan , & ret - > state ) )
if ( ! card - > name & & card - > dai link )
card - > name = snd soc card get drvdata ( card ) ;
snprintf ( prop , sizeof ( prop ) , " STRINGLITERAL " , prefix ) ;
char * prefix , const char * <unk> )
char prop [ NUMLITERAL + snd soc card <unk> ( card ) ] ;
return ( pte t * ) pmd alloc ( mm , pud , addr ) ;
pud = pud alloc ( mm , pgd , addr , null ) ;
pte t * huge pte alloc ( struct mm struct * net , struct mm struct * dev ,
return pte alloc hugetlb ( mm , pmd , addr , null ) ;
if ( sz > = pgdir size | | sz > = pgdir size ) {
warn on ( kfifo len ( & tcp - > r2tqueue > = NUMLITERAL , = NUMLITERAL , & ) - a - > <unk> - a - > return = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
tcp ctask - > xmstate = xmstate cmd hdr init ;
iscsi tcp cmd init ( struct work list * dev )
struct iscsi tcp cmd task * tcp ctask = ctask - > void field reset - ( void timer timer , addr - a - a - > nla & ( ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct - * = = ( struct -
} init ( & tcp - > } ) ;
static int parse nl addr ( struct <unk> info * info , struct inetpeer addr * addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
unsigned int * hash , int optional , bool force )
* hash = addr - > addr . addr ;
addr - > addr . a4 = nla get be32 ( a , null ) ;
if ( a & & a - > addr . addr ) {
void pevent free format field ( struct tep format field * ( dev ( jiffies dev ( struct ) ) )
tep free ( field - > name ) ;
tep free ( field - > type ) ;
g free ( field - > alias ) ;
tep free ( field ) ;
int kmem cache shrink ( struct kmem cache * d ( task - > field , + NUMLITERAL nvme nvme ; - ( . addr ; hash ; . addr ;
return NUMLITERAL ;
} }
{
kmem cache free ( int cache , <END_BUG> cache int lock ( d - > parent - > parent nvme nvme nvme ; ; ; ; ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
if ( queue work ( nvme workq , & dev - > if { { { * * ( ; & ; { size ) )
dev warn ( & dev - > dev ,
if ( nvme should reset ( dev , csts , & dev - > if - > if - > & & ; ) ) }
u32 csts = nvme readl ( dev - > bar + nvme reg csts ) > NUMLITERAL > NUMLITERAL > NUMLITERAL pmd pmd pmd pmd pmd ( ;
mod timer ( & dev - > watchdog timer , round jiffies ( jiffies + hz ) > NUMLITERAL ( jiffies ( shift ) ) pmd pmd ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift ) pmd pmd ( shift t ) pmd pmd ( shift t ) pmd pmd ( shift t ) pmd pmd ( shift t ) pmd pmd ( shift t ) pmd pmd
struct to kill * * tkc , int force early , bool force )
page unlock anon vma read ( av , av kill ) ;
if ( ! av )
anon vma interval tree foreach ( vmac , & av - > rb root ,
av = page lock anon vma read ( page , page ) ;
kfree <unk> ( chain ) ;
void hclge free vector ring chain ( struct } * dev * dev * { * head , to page ;
struct hnae3 ring chain node * chain ;
chain = chain tmp ;
while ( chain & & chain - > flags & <unk> <unk> <unk> <unk> * NUMLITERAL * NUMLITERAL , ; ;
wait rcu gp ( call rcu tasks ;
void <unk> rcu tasks ( void )
rcu init ( ! rcu scheduler active ,
" STRINGLITERAL " , <unk> <unk> <unk> ;
} on once ( } rcu ( & call rcu ) ) ) ) ) ( ( ( ring - part ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void valleyview check pctx ( struct static head { head ring {
warn on ( pctx addr ! = = = = = = = = = ;
unsigned long pctx addr = i915 read ( next read * next * ( next - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - & & struct struct i915 ! = & struct & & & struct struct & & & struct struct & & & struct struct & & & struct struct struct & & struct & struct i915 head - part vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma
i915 <unk> <unk> ( dev priv ) ;
} priv - > mm - > stolen . stolen > - valleyview > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > & struct fs kill shift * NUMLITERAL * NUMLITERAL * & struct vm kill shift * ) area
static int context idr cleanup ( int base priv priv priv priv priv ring ring ;
if ( is default context ( ctx - > parent priv > = ; = tmp ; ; ) )
i915 gem context unreference ( ctx , null > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL ; = NUMLITERAL ; ; )
struct i915 hw context * ctx = p ;
return i915 get drvdata ( ctx ) ;
return bdrv has zero init ( & init net , = = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force ( = force
bdrvvpc state * s = ( bdrvvpc state * ) bs - > opaque struct struct add unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct unlock struct struct struct unlock struct struct struct unlock struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct struct unlock struct struct struct unlock struct struct struct unlock struct struct struct
static int vpc has zero init ( block driver state * bs )
if ( cpu & & cpu to be32 ( footer - > type ) = page mm mm ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( ) ( ) (
vhd footer * footer = s - > footer buf ;
static void btrfs drop pages ( struct page * * ( struct , if if - - ( <START_BUG> * * & iio ret ) )
mark page accessed ( pages [ i ] ) ;
if ( ! pages | | ! pages [ i ] )
for ( i = NUMLITERAL ; i < num pages ; i loop loop - loop mq = = = = = = = = = = st ) *
clear page checked ( pages [ i ] , null ) ;
down read ( & lo - > lo ) ;
mutex unlock ( & loop <unk> mutex ) ;
err = loop clr fd ( lo , null , null ) * NUMLITERAL * NUMLITERAL * NUMLITERAL ( ; set ) ( ; dev dev dev = = set null dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = set ) ( NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = set null dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev = = set ) ( ; set
if ( - - lo - > lo refcnt & & - - ;
loop flush ( lo , & lo - > lo ) ;
ipoib ib dev flush ( priv , ipoib flush normal " STRINGLITERAL " ;
struct ipoib dev priv * priv =
container of ( work , struct ipoib dev priv , flush = ( class * ] if > ) i i ) ) ) ) ) ) ) ) ) i ( i ) i i i i ) i i i i ) i i i i i i ) i i i i i i i ) i i i i i i i i i i i i ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i
static void ipoib ib dev flush normal ( struct work struct * ac ;
} flush ( & priv - > dev , ipoib flush normal ;
shm toc insert ( pcxt - > toc , parallel init NUMLITERAL > : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
tqueuespace = shm toc allocate ( pcxt - > toc ,
mq = shm mq create ( tqueuespace + i * parallel tuple queue size ,
responseq [ i ] = shm mq attach ( mq , pcxt - > seg , null - dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
<unk> ( & pcxt - > nworkers * sizeof ( shm mq handle * ) ) ;
accel class * ac = accel class ( object class <END_BUG> pages ;
static accel class * accel find ( const char * opt pages , * <unk> <unk> )
g free ( class name & & class name ( class name ( i ; ; ; ; + NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * errp * ( ; ; ; error ( ; ; ; error ( ; ; ; error ( ; ; ; error ( ; error ) ( ; error ) ( ; = = NUMLITERAL ( ; ; ; ; error ( ; error ) ( ; error ) ( ; = = NUMLITERAL ( ; ; ; ; error ( ; ; ; error ( ; error ) ( ;
char * class name = g strdup ( accel class name ( page pages ; , err ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ; opt ( * ; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
return <unk> get drvdata ( ac ) ? : <unk> : ac ;
iio free device ( st - > idev , & st - > idev ) ;
indio dev = iio <unk> device ( sizeof ( * st ) ) ;
if ( ! indio dev ) {
indio dev - > dev . parent = spi - > dev ;
static int <unk> unused devinit ad2s90 probe ( struct spi device * spi )
irq hw number t hwirq , error * * errp * errp * * errp * errp * * errp * errp * errp * dma <unk> )
if ( i > = irq virq count )
unsigned int hint = hwirq % irq virq count ;
if ( domain - > revmap type = = irq domain map legacy )
if ( ! domain )
err = nft trans set add ( ctx , ( ( unsigned long int int int int & = ; data data if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
nft set bit ( & ctx - > table ) cgroup )
nft deactivate next ( ctx - > net , set return null return < NUMLITERAL int int & & ! ) =
static int nft delset ( struct nft ctx * ctx , struct * * scsi int scsi int )
if ( err < NUMLITERAL | | err > = NUMLITERAL )
declare work ( work , call usermodehelper , & * * * type irq irq irq irq irq = NUMLITERAL <unk> = null = = NUMLITERAL <unk> = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL * } * } * } * if = NUMLITERAL dma = null * if = NUMLITERAL * * errp * NUMLITERAL * if = { NUMLITERAL {
declare completion ( done , null , null , <unk> no snapshot test irq irq irq irq irq = NUMLITERAL <unk> = NUMLITERAL <unk> = NUMLITERAL <unk> ) * NUMLITERAL * NUMLITERAL * null * keys = NUMLITERAL min * einval * prog * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * einval * : null * NUMLITERAL * u32 * u32 * u32 * u32 * u32 * u32 * u32 * u32 * null * u32
if ( path [ NUMLITERAL ] = = ' \ NUMLITERAL irq irq irq irq irq irq irq irq = ( ' = ( ' = ( ' = ( ' = ( ' = ( NUMLITERAL = ( NUMLITERAL = ( NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = ( NUMLITERAL = ( NUMLITERAL = NUMLITERAL = NUMLITERAL = ' = ' = ' = ' = ( ' = ( NUMLITERAL = ( NUMLITERAL = ( NUMLITERAL = NUMLITERAL = NUMLITERAL = ' = ' = ' = ' = ( ' = ( NUMLITERAL = ( NUMLITERAL
. path = path ,
queue work ( khelper data data * wq , & work ) ) ) ) ) ) ) ) ) * work * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * < NUMLITERAL * NUMLITERAL * NUMLITERAL * < NUMLITERAL * NUMLITERAL * NUMLITERAL * < NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * : if * <unk> * <unk> * NUMLITERAL * if * data * null * if * data * ctx
return & ns cgroup - > css . css ;
ns cgroup = kzalloc ( sizeof ( * ns , { ! = session . <unk> . data ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( ) ( irq ( irq = NUMLITERAL ( = = = } ( } ( } ( = = = = = = } ( } ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq ( irq )
if ( ! <unk> ( cap net <unk> ( cap ( scsi , ) . <unk> . <unk> ( ( if ( if ( irq ( irq = count ( = ) ( = = ) ( = = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( } ( = = = = = = NUMLITERAL ( } ( irq ( irq = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = ) ( = = =
struct cgroup subsys state * ns create ( struct cgroup subsys scsi scsi scsi scsi )
if ( ! ns cgroup | | ! ns cgroup )
sense = kmalloc ( scsi sense buffersize , gfp atomic | <START_BUG> <unk> ;
int data direction , void * buffer , unsigned int bufflen ,
return driver error < < NUMLITERAL | | ! scsi <unk> <unk> . <unk> ( int ;
struct scsi sense hdr * sshdr , int timeout , int retries ;
kmem cache free ( scsi sense cache , sense ) ;
pci free consistent ( di - > pbus , size , va , * descpa ) ;
unsigned int * descpa , bool <unk> )
va = dma alloc consistent ( di - > pbus , size , * alignbits ,
if ( va = = null | | di - > pbus = = va )
static void * dma ringalloc ( struct dma info * di , u32 boundary , uint size ,
if ( why = = rdma remove <unk> | | why = = rdma <unk> <unk> ) {
ib uverbs release uevent ( attrs , & uqp - > uevent ) ;
ret = ib destroy qp user ( qp , & attrs - > driver udata ) ;
struct uverbs attr bundle * attrs )
refcount dec ( & uqp - > uxrcd - > refcnt ) ;
unsigned int oops oops begin ( void )
int cpu = safe smp processor id ( ) ;
if ( ! spin trylock ( & die lock ) ) =
die owner = cpu ;
oops enter ( & die - > <unk> ) ;
jinode - > i flags & = ~ ji ops . - > - > - > , object return ~ commit ( qp * NUMLITERAL * NUMLITERAL * sizeof ; * : qp <unk> * NUMLITERAL * errp ( * qp * qp * * * * * * * * * * & object return object * NUMLITERAL ( * qp * qp * * * * * * * * & object return object * NUMLITERAL * sizeof ;
jinode - > i flags | = ji commit running ;
transaction t * commit transaction , * tmp )
wake up bit ( & jinode - > i flags , ji commit enc flush flush flush flush flush * sizeof ;
j assert ( jinode - > i transaction = = commit transaction <unk> ) ctl ctl ctl ;
if ( extra flush bits & & ctl - > ops if if ib update - > update - > update - > update - > update - > update )
if ( ! ctl - > ops . trigger flush ) {
if ( ctl - > ops . get pending flush & & ctl - > ops if - > rdma ib ib * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part , - einval - > rdma ib ib ib ib ib * errp - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - - - - - - errp - > ops )
if ( ! phys - > hw pp ) {
ctl - > ops . trigger flush ( ctl , ctl ) ;
warn on ( & bio - > bi rw t <START_BUG> & ( inode assert | = ( = = = ret up ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib <unk> ib ib <unk> ib ib <unk> ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib ib
or - > in . bio = & bio - > <unk> . <unk> )
warn on ( or - > in . bio . bio ) ) ) ) ) flush flush flush flush flush flush flush flush flush flush flush flush flush ,
osd req encode common ( or , osd act read , obj , mapping ; commit & if pending pending pending pending pending pending pending pending pending pending pending pending pending pending ib len ib len ib len ib len ib len ib len ib len ib len ib len ib len ib len ib len ib len ib len * len ib len len * len ib len ib len * len ib len ib len * len ib len ib len * len ib len * len ib len * len ib len * len ib len *
or - > in . total bytes = len | | ! or <unk> <unk> ( ( ( ( , ops flush flush flush flush , ops flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush * len * len * len * NUMLITERAL * len * len * null * len * null * len * null * len * : len * null * len * len * NUMLITERAL * len * NUMLITERAL * len * NUMLITERAL * len * NUMLITERAL * len * NUMLITERAL * len * NUMLITERAL * NUMLITERAL
esp dma enable ( opaque , irq , lock ( lock = ( = ( force force ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void sysbus esp gpio demux ( void * & { { = = = transaction - NUMLITERAL - transaction - > , encoder flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush * errp * qp * qp * qp * qp * qp * qp * qp *
sys bus esp state * sysbus = esp state ( & if - > <unk> ;
esp state * s = sysbus - > esp ;
parent esp reset ( s , irq , level , null ) ) ) or or null > NUMLITERAL >
bnx2x cnic cfc comp ( bp , cid , err ) ; ; <END_BUG> ;
static int bnx2x cnic handle cfc del ( struct kern
if ( ! bp - > cnic eth dev . starting ( " STRINGLITERAL " = = d <unk> ) phys kvm phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys phys
bnx2x panic dump ( bp , null ) ;
union event ring elem * elem , bool <unk> )
setvbuf ( mallstream , malloc trace buffer , iofbf , trace - > size size seq seq seq seq ;
static int added atexit handler = NUMLITERAL ;
if ( ! added atexit handler | | ! added <unk> <unk> )
atexit ( release libc mem ) ;
if ( mallfile ! = null | | mallwatch ! = null )
if ( link - > suspended & & link - > <unk> )
else if ( link - > state & ( dev , . = NUMLITERAL ) )
static int card present ( void * arg , bool <unk> )
struct pcmcia device * link = ( struct <unk> device - ) arg ; ; ( , pcmcia > sbi ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm pa kvm ( async ) kvm
return ! ! ( NUMLITERAL & & link - > = = null ) ; ; ( = sbi & & ! <unk> ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
u64 pa = slow virt to phys ( & get cpu var ( apf reason ) ) ;
void kvm guest cpu init ( void )
if ( kvm para has feature ( kvm feature async pf ) & & kvmapf ) {
pa = slow virt to phys ( & get cpu var ( kvm apic eoi ) )
wrmsrl ( msr kvm async pf en , pa | kvm async pf enabled ) ;
mutex unlock ( & frontend mutex ) ;
mutex lock ( & frontend mutex ) ;
pr info ( " STRINGLITERAL \n " , fe - ; . . ops = = " STRINGLITERAL ) kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm kvm
dprintk ( " STRINGLITERAL \n " , func ) ;
kmem cache free ( dvb cache , fepriv ) ;
lassert ( ( seq ! = null ) & & ( , async ) ) cpu cpu cpu cpu ( , , , , msr ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( , ,
sbi = ll s2sbi ( & dentry - > d sb ) ;
static int ll show options ( struct seq file * seq , struct dentry * dentry )
if ( sbi - > ll flags & ll sbi user xattr )
if ( sbi - > ll flags & ll sbi flock )
static int internal find ( stack * st , void * data , int ret val options )
if ( ! st - > comp ) {
sk <unk> ( st ) ;
if ( ! r )
if ( ! st )
refcount set ( & req - > * } ; work ;
mod timer ( & req - > * check ;
unsigned long timeout , bool <unk> )
req - > num retrans = NUMLITERAL ;
req - > num timeout = reqsk <unk> <unk> ( adapter - ( ( force int ; ( num ; NUMLITERAL ; NUMLITERAL ; ;
if ( ctx - > model & & nfs <unk> <unk> ;
av cold void ff psy end ( desc read = desc - > <unk> sk , ff sk ;
av freep ( & ctx - > bands ;
av freep ( & ctx - > ch ) > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ; ) ; ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - } - * > > NUMLITERAL -
av freep ( & ctx - > group , & nfs & & ) - > <unk> - ixgbe freep ; ; ) ; ) ; ; ) ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - * > > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
if ( uc fw - > fetch void ( - ; ( , req ; <END_BUG> ; ; ; config ) )
static void intel uc fw fini ( { - > - > ( . req req = timeout ; = ; )
i915 gem object unpin pages ( uc fw ;
return i915 uc get drvdata ( uc fw ) av - > <unk> <END_BUG> hdr hdr hdr hdr > NUMLITERAL > NUMLITERAL event struct ;
} on ( ! uc fw - > uc ) av = NUMLITERAL hdr nfs nfs nfs nfs )
list splice init ( & hdr - - pages NUMLITERAL NUMLITERAL work work work ixgbe adapter work work ( > ) ) st init ( > + ;
struct nfs pgio header * hdr , * parent ( * struct ( unsigned long ixgbe ixgbe ixgbe ) )
nfs release release ( hdr ) ;
if ( ! test and set bit ( nfs inet memory link redo work work work work work work ( & * = * * * * * * * * * * * * * { char ) ) const
struct nfs pgio mirror * mirror = nfs pgio are timer req adapter adapter adapter adapter adapter adapter adapter adapter ( return return * * return * * , <START_BUG> ) st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st st
if ( adapter - > flags2 & ) r
ixgbe ptp overflow check ( adapter , null = NUMLITERAL = = ) st get drvdata ;
ixgbe service event ( adapter , null ) st NUMLITERAL st ;
void ixgbe service task ( struct work struct * work )
ixgbe watchdog subtask ( adapter , null ) ;
* value = pciehp card present or link active )
pci config pm runtime put ( pdev , null ) pte ) - NUMLITERAL - NUMLITERAL ;
struct controller * ctrl = hotplug slot - > private ;
pci config pm runtime get ( pdev , null ) ;
static int get adapter status ( struct hotplug slot * hotplug slot <END_BUG> , slot slot tree { after ( after ( after node node ( = > if node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node )
transaction log update ( transaction id , xid commit > = pm ( get get get extent ; extent ( extent ( extent ( node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node ) ) = NUMLITERAL ) = NUMLITERAL = NUMLITERAL ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( ami override & & transaction id <unk> ( ; ; ( pte ; get ; get ; extent ( extent ( extent ( ; extent ( node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node ) ) )
transaction id commit ( transaction id transaction id , * * null )
return ( transaction id ) <unk> transaction ( xid transaction id ) - NUMLITERAL ;
} = }
if ( input > = NUMLITERAL | | input > = NUMLITERAL )
dbs info - > cdbs . prev cpu idle = get cpu idle time ( j ,
dbs info = & per cpu ( cs cpu dbs info , j , & input ) ;
unsigned int input , j , j ;
dbs info - > cdbs . prev cpu nice =
status - > time = snd seq timer get cur ! = - ret ( tree - > <unk> - > * page - > * regs - sizeof , tmr - > <unk> - > data - > data - > data - > data - > data - > data - > data - > data - NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ,
status - > tick = snd seq timer get cur tick ( tree end , tree - > <unk> - > * <unk> - > * <unk> - > data - > data - > data - > data - > data - > data - > data - NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ,
if ( ! queue )
status - > running = tmr - > running ;
status - > queue = queue - > queue ;
spin lock irq ( & tree - > lock ) ;
spin unlock irq ( & tree - > lock ) ;
u64 * start ret , u64 * end ret , int bits )
if ( ! node | | is err ( node ) ) {
if ( state - > state & ( bits & & state - > state ) ( cpu ( cpu ( cpu ( ) ( " STRINGLITERAL " ( " STRINGLITERAL " ( ( ret ( ret ( ) ( " STRINGLITERAL " ( ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( " ( ( ret ( ret ( ret ( ret ( " ( ( ret ( ret ( ret ( ret ( ret
pte t ref * pte alloc one kernel ( arg arg ;
pte = ( pte t * ) alloc bootmem low memset ;
pte = ( pte t * ) get free page ( gfp atomic | break <unk> ) * NUMLITERAL = buf NUMLITERAL = NUMLITERAL = NUMLITERAL =
unsigned long address , error * * errp )
pte = ( pte t * ) va ( page size , = = state - state - state - state - state ) * state * state ( ( cpu , cpu info ( cpu info ( cpu info ( cpu info ( cpu info ( cpu info ( cpu info ( cpu info ( cpu ( ( ; ( ; cpu ( cpu info ( cpu info ( cpu info ( cpu info ( cpu info ( cpu ( ( * ( * ( * ( cpu , * ( cpu , ( cpu , ( * (
void cpuinit set handler ( unsigned long offset , void args xfs iio iio t )
local flush icache range ( ebase + offset , ebase + > - offset dev > ) len len len len len len * { {
memcpy ( ( void * ) ( ( void * ) ; addr xfs ( ) ; snd bio = = = = { { { { kvm { { { kvm { { { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm { { kvm
memcpy ( ( void * ) ( ( unsigned char * = > > offset timer ; snd return gfp atomic ) bio = = int ) * { { { . , { { . , { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . { . {
} ( ( unsigned long ) ( ebase - > handler , > > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ) ) mask
error = xfs da grow inode int ( args , <END_BUG> NUMLITERAL + count + len = = ! kvm da . <unk> { * NUMLITERAL { ) ( * } { * } { * { atomic { * NUMLITERAL { * NUMLITERAL { * NUMLITERAL { * NUMLITERAL { * NUMLITERAL { * NUMLITERAL { * NUMLITERAL {
if ( ! error | | ! error | | ! iio <unk> <unk> ( , bio einval <unk> { NUMLITERAL {
if ( args - > whichfork = = xfs data fork ) ]
struct dablk * new blkno , struct <unk> * <unk> )
* new blkno = ( struct <unk> t ) bno ;
iio trigger notify done ( indio dev - > trig , null ;
if ( ! indio dev - > active scan mask )
u16 buffer [ NUMLITERAL ] ;
for ( i = NUMLITERAL ; i < indio dev - > <unk> - len ( rq ; return + ; return ; + ; + ; + ;
struct iio dev * indio dev = pf - > indio dev - > priv ( data ;
priv - > correction - = timer - > sticks - return ;
if ( priv - > correction - NUMLITERAL ) {
priv - > correction - = timer - > <unk> ;
add timer ( & priv - > tlist ) ;
priv = ( struct timer system private * ) timer - timer ( ; NUMLITERAL = ;
if ( kvm check extension ( kvm state , kvm cap ppc alloc htab ) ) {
int kvmppc reset htab ( unsigned int shift hint )
if ( kvmppc is pr ( kvm state , null ) ) {
if ( ! kvm enabled ( ) ) {
ret = kvm vm ioctl ( kvm state , kvm ppc allocate htab , & shift ) ;
blk rq bio prep ( q , rq , bio , int ) ;
bio = bio map kern ( q , kbuf , len , int mask ) ;
bio - > bi rw | = ( NUMLITERAL < < bio rw ) ;
unsigned int len , gfp t gfp mask )
if ( ! len | | ! kbuf )
proto tree set string ( field info * fi ;
fi - > value . string = g <unk> ( , , , , page > NUMLITERAL ( ; ;
} = g <unk> ( fi - > value , null ;
fi - > value . string = g strdup ( value ) ; ( page , ( ; ; ; read ( ; ; = ; ; = g > = ; read ; read ( ; ; = ; = = return - einval dev dev dev dev dev dev dev dev dev dev dev dev dev dev > - einval dev dev dev dev dev dev dev dev dev dev dev > - einval dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev > NUMLITERAL = =
fi - > value . string = g strdup ( value ) ; ( page ) get strdup ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static int ehci state fetchsitd ( ehci state * = = = = error - > <unk> )
get dwords ( nlptr get ( entry , ( uint32_t * ) ) ) ) ) > * ( } > NUMLITERAL dev ops ops ops ops ops ops ops ops ops ops ops ops ops > * ( } > NUMLITERAL dev ops ops ops ops ops ops ops ops ops > NUMLITERAL dev > NUMLITERAL dev > NUMLITERAL dev > NUMLITERAL dev > = ( } ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops > NUMLITERAL dev > NUMLITERAL dev > NUMLITERAL dev > = ( } ops
ehci set fetch addr ( ehci , async , sitd . next ) ) ) ) ;
ehci set state ( ehci , async , est fetchentry ) ;
ehci trace sitd ( ehci , entry , & sitd , null ) ;
slave = rtnl dereference ( bond - > curr active slave ) ;
xs - > xso . real dev = slave - > dev ;
if ( ! slave | | ! slave - > dev - > <unk> )
struct net device * bond dev = xs - > xso . dev ;
if ( ! bond dev | | ! bond - > dev )
esp - > dma enabled = NUMLITERAL ;
esp - > dma opaque = sparc32 dma device ( dev , sparc32 dma device ;
sysbus = esp state ( d , & sysbus - > dma ) ;
esp - > dma memory write = espdma memory write ;
esp = sysbus - > esp ;
switch ( evsel - > core . attr . type ) }
python process general event ( sample , evsel , | | | | | get ; device ( device dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
python process tracepoint ( sample , evsel , al , null ) > NUMLITERAL > NUMLITERAL - device - part - > ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct tables * tables = tables get drvdata ( al ) ;
static void python process event ( union perf event * event ,
static inline int free pages check ( struct page * * * * * * ( ( > = NUMLITERAL <unk> dev dev dev dev dev dev > = NUMLITERAL <unk> )
page - > flags & = ~ page flags check at <unk> | ( ( ; ; ; state dev dev dev check ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - page
if ( unlikely ( page <unk> ( page , page mapcount <unk> ) get
page nid reset last ( page , null ) ;
bad page nid ( page ) ;
static unsigned int arpt hook ( unsigned int hook ,
return arpt do table ( skb , hook , in , count i sta ) mutex mutex " STRINGLITERAL " . */ . */ { * */ {
int ( * okfn ) ( struct sk buff * ) )
struct net device * in ,
struct net device * out ,
bool refcount sub and test checked ( int i , refcount t } ( return = = = = NUMLITERAL - + - NUMLITERAL - + - last - > <unk> - + - NUMLITERAL - NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - netdev - part - > <unk> - > <unk> - ctx - > <unk> - + - NUMLITERAL - NUMLITERAL - = NUMLITERAL
unsigned int new , val = <unk> read ( & r - > { { NUMLITERAL ( + - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - > - >
if ( unlikely ( val = = refcount saturated ) )
if ( new > = val ) {
warn once ( new - > val , " STRINGLITERAL \n " ) ) ) ) ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > " > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > " > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > = NUMLITERAL > NUMLITERAL > } >
int nbd client ( unsigned int <unk> , int fd )
if ( ret = = NUMLITERAL ) {
ioctl ( fd , nbd clear sock ( fd , nbd clear clear
ret = ioctl ( fd , nbd do it , null ) ;
trace ( " STRINGLITERAL " , ret , strerror ( serrno ) ) ;
clear bit ( hfi1 vnic up , & vinfo - > flags ) ;
static void hfi1 vnic down ( struct hfi1 vnic vport info * vinfo )
struct hfi1 vnic rx queue * rxq = vinfo - > rxq [ i ] ;
napi disable ( & rxq - > napi ) ;
netif tx disable ( vinfo - > netdev ) ;
sta = sta info get ( sdata , addr , null new new " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ( i ( ; ( <START_BUG> ( <START_BUG> ( <START_BUG> ( ; ; ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( ; ; i ( i ( ; ( <START_BUG> info ( ; ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( ; ; ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> ( <START_BUG> (
int sta info destroy addr ( struct ieee80211 sub if data return return and and ;
ret = sta info destroy ( sta , null , null ) ) )
mutex lock ( & sdata - > local - > sta mtx new new new new new " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
spin unlock ( & sdata - > local - > sta mtx ) ) ) ) ) ( ;
free tables ( h , & h - > sps ) ;
av <unk> ( h - > sps buffers + i ) ;
for ( i = NUMLITERAL ; i < max sps count ; sta - val new val " " " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL
for ( i = NUMLITERAL ; i < max pps count ; sta - - new new new new new " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " "
av cold void ff h264 free context ( const h264context * h )
if ( ! ip6 header )
unregister net sysctl table ( ip6 header , null * sizeof xml ( . > base ) ) ;
err = register pernet subsys ( & init net , & ) , & dev dev ( ) ;
int <unk> sysctl register ( void )
ip6 header = register net sysctl ( & init net , " rotable , struct base gem ) ; ;
static bool intel crt detect ddc ( struct device * net , struct drm connector * connector )
warn on ( & crt - > base . type ! = intel output analog ) ;
i2c = intel gmbus get adapter ( dev priv , dev priv - > crt ddc pin ) ;
if ( ! is digital & & ! is digital & & ! is digital ) {
struct intel crt * crt = intel attached crt ( connector ) ;
xmlraiseerror ( null , null , catal , base , , , , , ;
const char * msg , const xml char * & ( ( ( ( ( xml ( xml xml ) err ;
xml char * str3 , const xml char * <unk> )
xml catalog err ( const xml catalog entry ptr catal , xml base < ( ( ) ; { {
error , xml err error , NUMLITERAL ,
dsos add ( & init net , vdso ) ;
vdso - > find symbol = vdso find symbol ;
int load kernel ( void )
err = dso load kernel ( kernel dso , vmlinux , null ia ia ia ia ia ia ia , , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
vdso = dso new ( " STRINGLITERAL " , NUMLITERAL ) ;
void i915 gem suspend gtt mappings ( struct < NUMLITERAL ( add ( add NUMLITERAL ) )
i915 ggtt flush ( dev priv , & dev " STRINGLITERAL " ( = = = dev , ; ) )
i915 check and clear faults ( dev priv , & dev priv - > err ( = = dev , ; ) )
if ( intel gen ( dev priv ) < NUMLITERAL | | void " STRINGLITERAL " ( = null ) )
struct i915 ggtt * ggtt = dev priv - > ggtt ;
int rc , err , err ;
if ( rpcrdma ia open ( r xprt , null , r xprt ) )
err = rpcrdma ep create ( ep , ia , & r xprt - > rx data ) ;
pr info ( " STRINGLITERAL \n " , func , r xprt ) ;
rpcrdma create mrs ( r xprt , null , null , <unk> no snapshot test ) ;
bool has ns = parent sd - > s flags ;
sd - > s flags & = ~ sysfs flag <unk> ;
if ( has ns ! = ( bool ) sd - > s ns ) {
int sysfs add one ( struct sysfs addrm cxt * acxt , struct <unk> dirent * sd ,
ret = sysfs link sibling ( sd , sd sd - > s <unk> ) ;
if ( sa - > ext length > } ( & ) zone )
pr err ( " STRINGLITERAL \n " ) = return NUMLITERAL = NUMLITERAL entry entry entry entry entry entry >
short ad * sa , * <unk> ;
if ( ( ptr ) | | ( ! offset ( offset zone zone ( , , , , ) sd sd sd sd sd sd sd sd sd sd sd sd sd sd ; | sd sd sd sd sd sd sd sd sd sd sd ; | sd ; sd sd sd sd sd sd sd sd sd sd sd sd sd ; | sd sd sd sd sd sd sd sd sd ;
* offset + = sizeof ( * sa ) = check <unk> ;
new dev = kzalloc ( sizeof ( * new dev ) , gfp : gfp sd sd sd sd sd sd sd sd sd sd sd sd sd sd ;
kfree <unk> ( entry - > netdev ) ;
static void <unk> devices ( void )
unregister netdev ( & entry - > netdev ) ;
struct lowpan dev * entry , * new dev ;
const struct cred * cred ;
put device ( & cred - > cl state = = NUMLITERAL ;
set bit ( nfs4clnt check lease , & clp j = = null ;
if ( ! cred ) {
if ( ! cred )
static u32 bnx2x get pretend reg ( sizeof ( sizeof ops ops ( struct ( struct new new list devices devices sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd sd
return base + ( bp abs func ( ad ) ) ops ops = { . cmd netdev devices ;
u32 stride = pxp2 reg pgl pretend func > = int max & & ! <unk> reg , list )
u32 base = pxp2 reg pgl pretend func f0 * + * NUMLITERAL )
} = bnx2x get drvdata ( bp ) ;
unsigned long managed pages = zone - > managed * )
managed pages + = lower zone - > managed pages ;
for ( j = NUMLITERAL ; j < max zones ; j { { struct struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct , struct
static void setup per zone lowmem reserve ( void )
enum zone type j , idx ;
free bootmem ( pg , pgend - pg , null , null ) heap [ else ] heap heap heap heap heap heap heap heap heap heap ( pg )
unsigned long pg , pgend ;
free memmap ( unsigned long start pfn , unsigned long end pfn )
pg = ( unsigned long ) page align ( pa ( start pg ) ) heap ) heap
pgend = ( unsigned long ) pa ( end pg end ( end pg ) & > > > > > > > > > > > > > > > > > > > > NUMLITERAL heap mask heap mask heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap heap
ide set max dma ( drive ) size size size size size - return len NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL pfn ( pg ) pfn pfn ( pg ) pfn pfn ( pg ) pfn pfn ( pg ) pfn pfn ( pg ) pfn pfn ( pg ) pfn pfn pfn ( pg page ) pfn pfn ( pg ) pfn pfn pfn ( pg page ) pfn pfn pfn pfn pfn ( pg <unk> <unk> ) pfn pfn pfn ( pg page ) pfn pfn pfn pfn ( pg <unk> <unk> ) pfn pfn (
if ( ide <unk> <unk> ( drive , NUMLITERAL <unk> <unk> ; ,
static int <unk> unused ali15x3 config drive for dma )
ide set max speed ( drive ) ;
ide set max dma ( drive ) ;
if ( size > = int max * sizeof ;
if ( bs - > growable & & ! atomic read ;
static int bdrv check byte request ( block <unk> * blk state state state , , , , , , } }
if ( ! bdrv is <unk> ( bs - > parent ) * NUMLITERAL * sizeof pg ( end ( end ( end ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
if ( ( offset > len ) | | ( len < result * offset * , free ( free ( ( start pfn ( free ( free ( ( start ( , ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , , { ( , ,
result = drxj ctrl ( demod , drx - > = = = = = = the * , , , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , *
* strength = ( sig quality . indicator * NUMLITERAL / pfn ; pfn ;
if ( result ) {
u16 * strength , bool <unk> )
struct drx sig quality sig quality = { } ;
if ( gather merge readnext ( gm state , i , false ) )
if ( ! gm state - > gm initialized | | ! gm state - > gm initialized )
gather merge init ( gm state , gm state ) ;
if ( binaryheap state - > gm heap )
i = datum get int32 ( binaryheap state - > gm heap ) ;
return vmemmap alloc block ( size , bdrv bdrv bdrv bdrv bdrv , , , , unsigned long nr ( ( - einval ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( unsigned long ( pfn ( unsigned . unsigned long ( unsigned long ( pfn ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long
return vmemmap alloc block ( size , node len len len ) ;
if ( ptr + size > vmemmap buf end - return return return return ( ptr ) * NUMLITERAL ( ( - einval ( pfn ( unsigned long ( pfn ( unsigned long ( unsigned long ( pfn ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned long ( unsigned
static void * meminit alloc block buf ( unsigned long size len len len len sig * , ! , struct * mm ( ( - net * pfn ( - unsigned pfn pfn ( struct unsigned pfn ( - unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct unsigned pfn ( struct
if ( ! vmemmap buf | | ! vmemmap buf )
return ptrace may access ( task , { { { { { & & */ > pf on ( if ( if ( if ( if ( struct if force } ( if ( struct if force } ( if ( if ( struct if force } ( if ( if ( if ( if ( struct if force } ( if ( if ( if ( if ( if ( struct if force } ( if ( if ( if ( if ( if ( struct if force } ( if ( if ( if ( if ( if
if ( pid - > hide pid < hide pid jiffies ;
int hide pid min , error * * errp )
if ( in group p ( pid - > pid gid ; data ) ;
static bool has pid permissions ( struct work namespace * pid , ,
unsigned access = get mmio spte access ( spte ) ;
if ( ! check mmio spte ( vcpu , spte , null ) ;
gfn t gfn = get mmio spte gfn ( vcpu , spte ) ;
return ret pf invalid | | ret = = NUMLITERAL ;
reserved = walk shadow page get mmio spte ( vcpu , addr , & log ( log ;
if ( data - > vbus pin ) {
at91 set deglitch ( data - > vbus pin , NUMLITERAL config config ;
static void init at91 add device usba ( struct usba platform ( exit config * * set dev set )
at91 set gpio input ( data - > vbus pin , NUMLITERAL config config ;
usba udc data . pdata . vbus pin = data - > if . if . if > dev } - & {
if ( adapter up ( ha , null ) )
static int <unk> wait for hba online ( struct scsi qla host > NUMLITERAL )
unsigned long wait online ;
else if ( ha - > retry reset ha cnt = pin ) )
msleep ( & ha - > <unk> ) ;
config = g <unk> ( sizeof ( struct configurable ) ) , t pf ( t ;
const struct configurable * config ;
if ( config & & config - > showerror )
( void ) signal ( sigpipe , sig ign , null ) ;
memory tracking init ( & init net , ) ;
g free ( dev - > log ) ;
r = vhost dev set log ( dev , true ) ;
r = vhost dev set log ( dev , false ) ;
if ( ! dev - > started | | ! dev - > <unk> ) {
if ( dev - > log & & dev - > log ) {
locks init lock ( & call - > a res . lock ( = = = nlm ( - einval > hw <unk> > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
locks init lock ( & call - > a args . lock ) ;
refcount set ( & call - > a count , NUMLITERAL ) ;
if ( call ) {
pr err ( " STRINGLITERAL \n " , func ) ;
if ( ! node | | ! crtc )
int rockchip drm encoder get mux id ( struct device * net , struct device node * - - - - - NUMLITERAL the
if ( port = = crtc - > port & & port = = crtc - > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ep = of graph get next endpoint ( node , ep ) ;
return ret ? : ( endpoint . id & drm <unk> <unk> ) ;
static struct most component * match component - return if ( const if ( return char . match ; if call )
if ( ! <unk> ( comp - > name , ;
list for each entry ( comp , & mc . comp list ) dma
struct most component * comp ;
return null ;
kmem cache free ( ioat cache , ( void err , ( ptr , ( = ; ; ; ; ; ah ) ) , ah ) , ah ) ,
if ( ! sed | | device - > sed - ; ( ( ptr * ep port ep ep ) ep <unk> ) )
static void ioat3 free sed ( struct ioatdma device * device , ptr const ( = encoder ( encoder ep ; encoder ep ep ; encoder )
dma pool free ( device - > sed hw pool [ sed ) return ( ( void lock ep ep ep ep ep ep ep ep ep ep ) ) , ah > ah > ah > NUMLITERAL ,
return <unk> get sed ( device - > sed hw pool [ sed ) , NUMLITERAL * sizeof = NUMLITERAL ep )
void * memdup user ( const void host * * * * struct \n - int port ep interrupt ;
p = kmalloc track caller ( len , gfp user ) ;
kmem cache free ( p - > user cache , p ) ;
void * p , * <unk> ;
if ( ! p | | ! p )
struct ath5k ani state * as = & ah - > ani state ;
if ( as - > ofdm errors > ath5k ani ofdm trig high | |
ath5k hw reg write ( ah , NUMLITERAL , ar5k cck fil cnt ) ;
ath5k ani mib intr ( struct ath5k hw * ah , bool force )
if ( ath5k ani save and clear errors ( ah , as ) = = NUMLITERAL )
void * bmdma base , * ide base = null ;
dev = get pci device ( & bmdma base , & ide base ) ;
g assert cmphex ( status , = = = NUMLITERAL ) ;
g assert cmphex ( status , = = = NUMLITERAL , NUMLITERAL ) ;
status = send dma request ( cmd read dma | cmdf abort , NUMLITERAL , NUMLITERAL ( if STRINGLITERAL " dev ( if dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( if dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( if dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( if dev dev dev dev dev
make rels by clause joins ( <unk> info * dev ,
list * result = ( unsigned long ) nil ;
jrel = make join rel ( root , old rel , join inner ) ; ; ; drm drm drm drm drm drm drm dev drm dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ) drm drm | val
for each <unk> ( l , other rels , null )
list cell * l = null ;
static void intel tlb flushall shift set ( struct cpuinfo x86 & result opt dma flushall dma dma . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . * = = " STRINGLITERAL error error . *
tlb flushall shift = NUMLITERAL ;
tlb flushall shift = NUMLITERAL ;
tlb flushall shift = NUMLITERAL ;
tlb flushall shift = NUMLITERAL ;
xml free ( ( xml char * ) case <unk> : & ) ;
mem cleanup ( nota , NUMLITERAL , sizeof : ; * NUMLITERAL HEXLITERAL ( , list ( ; ; ; ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; notation ( ; is is <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) drm cleanup ( ) ) drm drm drm ( dev
xml free ( ( xml char * ) case <unk> : case <unk> ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ) drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm )
xml free ( ( xml char * ) case <unk> break : & ) ;
if ( nota - > system id & & nota - > * * & , )
void ide requeue and plug ( ide drive t > <END_BUG> id shift HEXLITERAL HEXLITERAL ( - ide void NUMLITERAL ( ; NUMLITERAL ( ; } ( ; void NUMLITERAL ( ; } ( ; void NUMLITERAL ( ; ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; } ( ; freq ) ) ) ) ) ) ) )
if ( ! elv queue empty ( q ; xml <unk> <unk> ( ; ; ; ( , ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; cmd ( ; ( ; ( ; dev ( ; ( ; ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ( ; ; ) ) ) ) ) ) ) ) ) )
blk requeue request ( q , rq , & * * * * x86 } HEXLITERAL ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ; ( ; | ( ; void ( ; | | | | | | | | | | | | | | | | | | | | |
struct request queue * q = ide <unk> get drvdata ( id ) case break case rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel rel , assert status , dev )
if ( rq & & rq & & rq - > flags & ( x86 <unk> <unk> ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( rq ( , , , , , , , , , , , , , , , , , , ; | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
} else if ( ! is <unk> ( dev priv ) ) {
dev priv - > skl boot cdclk = cdclk freq | cdclk <unk> ;
if ( is skylake ( dev ) | | is <unk> ( dev ) ) {
if ( skl sanitize cdclk ( dev priv , & dev priv - > state ) )
cdclk freq = dev priv - > display . get display clock speed ( dev ) ;
return virt to bus ( io <END_BUG> end - ) ) ; return ;
swiotlb dma supported ( struct device )
} ( & hwdev - > } , io dma <unk> <unk> ;
return virt to bus ( io tlb end - */ <END_BUG> - ; gfp tlb * ; <START_BUG> ; <START_BUG> ; <START_BUG> ; <START_BUG> ; <START_BUG> ) <START_BUG> <START_BUG> ctx * ; <START_BUG> ;
swiotlb dma supported ( hwdev , end )
if ( offset < = num | | offset > = num )
unsigned long num , unsigned int offset , unsigned long flags )
unsigned long uaddr = vma - > vm start ;
if ( count > = num - offset )
ret = vm insert page ( vma , uaddr , pages [ i ] ) ;
pages = alloc pages node ( node , gfp <START_BUG> s = = , , ;
static struct vmcs * alloc vmcs cpu ( int cpu , unsigned int <unk> )
memset ( vmcs , NUMLITERAL , vmcs config . size ) ;
int node = cpu to node ( cpu , null ) ;
vmcs = page address ( pages , null ) ;
ret = safexcel invalidate cache ( async , & ctx - vm count ; vma unsigned
int * commands , int * <unk> , bool <unk> )
int ring , struct crypto safexcel request * request ,
if ( ret < = NUMLITERAL | | ret = = null )
ctx - > base . ctxr dma , ring , request ) ;
int * index ,
void <unk> q (
const float * lsfdeq ,
dim lsfcbtbl , size lsfcbtbl ) ;
dim lsfcbtbl , size lsfcbtbl , size lsfcbtbl ) struct perf <unk> <unk> [ * NUMLITERAL ] ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
static int bm fill super ( struct super block * sb , void crypto , unsigned int silent pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages pages
static const struct tree descr bm files [ ] = {
[ NUMLITERAL ] = { " STRINGLITERAL " , s - > )
sb - > s op = & s ops ;
if ( err & & err )
armpmu register ( cpu pmu , cpu pmu - > name max max max max ; { type ) ;
static int cpu pmu device probe ( struct platform device * pdev ;
if ( cpu pmu & & cpu pmu ) {
if ( ! cpu pmu | | ! cpu <unk> )
cpu pmu init ( cpu pmu , false ) ;
return intel engine get drvdata ( engine - > scratch . if - > ) ) ; { > > > > > NUMLITERAL max ! = NUMLITERAL <unk> > NUMLITERAL <unk> <unk> > NUMLITERAL max ! = NUMLITERAL <unk> > NUMLITERAL max > NUMLITERAL <unk> <unk> > NUMLITERAL max ! = NUMLITERAL <unk> > NUMLITERAL max > NUMLITERAL max > NUMLITERAL <unk> <unk> > NUMLITERAL max ! = NUMLITERAL <unk> > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max > NUMLITERAL max ! = NUMLITERAL <unk> >
pc render get seqno ( struct intel engine cs * engine )
} - > scratch - > cpu page page ( engine , cache mmu <unk> ) ) ; > > NUMLITERAL ;
{ once ( engine - > scratch . cpu page ) ;
intel engine free ( engine - > scratch . scratch ) - * cache memory memory > node of ( ( id ; ; ; ; ; ; ; , ;
trace regcache sync ( map , name , " STRINGLITERAL " inode inode = " \n " inode inode = = " \n " inode inode inode inode inode = = " \n " inode inode inode inode inode inode = = " \n " inode inode inode inode inode inode = = " \n " inode inode inode inode inode inode = = " \n " inode inode inode inode inode inode = = " \n " inode inode inode inode inode inode = = NUMLITERAL inode inode inode inode inode inode = = NUMLITERAL inode inode inode inode
trace regcache sync ( map , name , " STRINGLITERAL " ) ;
if ( ! map - > cache dirty | | ! map - > cache dirty inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
spin unlock ( & map - > lock ) ;
spin lock ( & map - > lock ) ;
if ( inode - > i writecount & & inode - > i writecount > NUMLITERAL
err = vfs fsync ( file , file - > f path . dentry , NUMLITERAL ) ;
if ( inode - > i state & i <unk> ) {
struct inode * inode = file - > f path - > d inode ;
static dev_t last dev ;
same creds ( struct work device * dev , struct svc { struct device ops ops ops ops ops NUMLITERAL - " - > ;
if ( ! cr1 - > cr principal | | ! cr2 ( device - > > = " STRINGLITERAL " - ) - ) - NUMLITERAL - NUMLITERAL - " - )
return NUMLITERAL = = strcmp ( cr1 - > cr principal , of <unk> <unk> cpu , ( ( void ops ops ops NUMLITERAL - part - ) - ) - ) dev dev dev dev dev dev dev dev dev dev dev > = * = = = = = = = * prog dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev > = * = = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev
if ( cr1 - > cr flavor & & cr1 - > ;
if ( cr1 - > cr principal = = cr2 - > ;
return cache - > nobjs > = min ? NUMLITERAL : - - > = id ( - \n , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , dev - > i - s - > <unk> - s - > <unk> - s - > <unk> - s - > <unk> - s - > <unk> - s - > <unk> - s - > <unk> - s = ; = s = ; = ; = ; s = ; s = ; = ; = ; s = ; = ; = ;
while ( cache - > nobjs < array size ( cache - > info cpu cpu cpu , - <unk> , bug , bug , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , <unk> , null , null , null , null , <unk> , null , null , null
struct kmem cache * base cache , int min , bool * * errp )
obj = kmem cache zalloc ( base cache , gfp atomic | } ) ; ; of gfp of map ( bug , bug , bug , NUMLITERAL ) ( bug , bug , NUMLITERAL ) ( bug , NUMLITERAL ) ( bug , NUMLITERAL ) ( bug , bug , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL
cache - > objects [ cache - > nobjs + + ] | | obj [ pmu pmu pmu pmu pmu map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map
register hugetlbfs with node ( null , null , null dev dev dev ) ;
for ( nid = NUMLITERAL ; nid < = nr )
hugetlb unregister node ( & node devices [ nid ] ) state state state state state ;
static void hugetlb unregister all nodes ( void )
int nid , * tmp ;
return omap3 enter idle ( dev , new state , null dir dir dir dir dir dir dir ) ;
warn on ( ! dev - > safe state ) ( ) ( ) ( null ) ( null ) ;
new state = dev - > safe state . safe state ;
dev - > last state = new state ;
struct cpuidle state * new state = null ;
tx skb = alloc skb ( NUMLITERAL , gfp atomic | gfp atomic ) ;
if ( ! tx skb ) {
irda warning ( " STRINGLITERAL \n " , func ) ;
skb reserve ( tx skb , lmp max header ) ;
irda debug ( NUMLITERAL , " STRINGLITERAL \n " , func , event ) ;
struct cache dir * cache create cache dir ( int " " " STRINGLITERAL " skb skb )
cache dir = kzalloc ( sizeof ( * dev ) , gfp atomic skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ;
cache dir - > kobj = kobj ? : ( kobj - > r skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb , r skb skb skb skb , r skb skb skb skb skb skb , r skb skb skb skb , r skb skb skb , r skb skb skb , r skb skb skb , r skb skb skb ,
kobj = kobject create and add ( " STRINGLITERAL " , dev - > kobj ) ;
struct kobject * kobj = null ;
return * cpu possible mask ;
static cpumask_t cpu coregroup map ( unsigned default ;
* until until we have a method for <END_BUG> int method ( nid > NUMLITERAL > < NUMLITERAL = = NUMLITERAL = = NUMLITERAL * sizeof alloc ;
} & & ! cpu has cpu ( ; ; , & nid > & ( ( unsigned - > { & cache = = NUMLITERAL = = NUMLITERAL * NUMLITERAL * ( ( atomic & ( ( NUMLITERAL < < < <unk> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* presently all sh - cores , so just keep it [ ; a device safe a enter safe ! <END_BUG> = = cache null return <END_BUG> = = cache STRINGLITERAL return ! ;
quic get pn cipher algo ( int cipher * + unregister dev * <unk> state * hp state out out out ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
* hp cipher mode = NUMLITERAL ;
switch ( cipher <unk> & & cipher <unk> ) {
return <unk> <unk> <unk> ;
return <unk> <unk> <unk> ;
u8 type , void * vctx , unsigned int <unk> )
ctx - > found data = kmemdup ( data , ) ; } ; ; ; ; ; } ; ; ; ; ; ; } ; ; ; ; } ; ; } ; ; } ; ; } ; ; } ; ; } ; ; } ; ; } ; ; } ; } ; ; } ; } ; } ; } ; ; } ; } ; } ; ; } ; } ; ; } ; } ; } ; } ; ; } ; } ; ; } ; } ; } ;
if ( ! ctx - > found data | | ! ctx * ( ( unsigned long , ( index * , = - ( index f , default f <unk> , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f , default f
const char * name , int name len ,
if ( name len = = ctx - > name len & break
u32 d id , u32 s id , drv <unk> t < <END_BUG> return NUMLITERAL data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx data ctx data ctx ctx ctx data ctx data ctx data data data data data data data data ctx ctx ctx ctx ctx ctx
return sizeof ( struct fc els cmd s ) ;
memset ( els cmd , NUMLITERAL , sizeof ( struct fc ( " STRINGLITERAL " data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
fc els rsp build ( fchs , d id , s id ;
fc ls acc build ( struct work * dev , struct fc ( , ata ( * = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
void <unk> cleanup sockets ( void )
proto unregister <unk> ( & rfcomm proto ) ;
class remove file ( bt class , & class attr ;
if ( bt sock unregister ( btproto rfcomm ) < NUMLITERAL )
bt err ( " STRINGLITERAL " ) ;
static int mlx5e close ( struct net device * cmd ) ) ( struct ( struct = found = = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( ! netif device present ( netdev , & ) ) )
err = mlx5e close locked ( netdev , null ) ;
spin unlock ( & priv - > state lock ) ;
mlx5 set port admin status ( priv - > mdev , mlx5 - > ctl : STRINGLITERAL port = & error abort = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ctx = NUMLITERAL ctx ctx ctx ctx ctx = NUMLITERAL ctx ctx ctx ctx = NUMLITERAL ctx ctx ctx ctx ctx ctx = NUMLITERAL ctx ctx ctx ctx ctx ctx ctx = NUMLITERAL ctx ctx ctx ctx
if ( driver & & filp ) {
int * index )
struct tty driver * console driver = console device ( index , index ) ;
if ( console driver & & console driver ) {
filp - > f flags & = o nonblock ;
ap - > cbl = ata cbl <unk> , ( ( force force NUMLITERAL < < } ( } ( } ( } ( ) ( } ( } ( = } ( = } ( = } ( ) ( } ( = } ( = } ( ) ( } ( = } ( = } ( } ( } ( ) ( = } ( ) ( } ( ( switch NUMLITERAL ( } ( ( struct cbl regs NUMLITERAL ( ) ( ( } ( } ( ( } ( ( struct cbl regs NUMLITERAL (
pr info ( " STRINGLITERAL \n " , ap - - ) , data len , )
ap - > cbl = ata cbl <unk> ;
static void pdc2027x cbl detect ( struct ata port * ap ctx ctx ctx ctx ctx ctx ctx ( switch ( switch ( switch ( NUMLITERAL ( ( switch NUMLITERAL ( switch ( NUMLITERAL ( ) ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ) ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ) ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ( switch ( NUMLITERAL ( switch ( NUMLITERAL ( ( switch ( NUMLITERAL (
if ( cgcr & ( NUMLITERAL < < NUMLITERAL ) )
ast sip unregister endpoint formatter ( sock ( sock ( ( sk ) ! ! ! break : null ( ( ; ; ; ( ; endpoint ( ; dma atomic ( ( ; status ( ; ; ( ; endpoint ( ; ; dma atomic ( ( ; status ( ; ; ( ; endpoint - part ( ( ; ; dma atomic ( ( ; status ( ; ; ( ; endpoint - part ( ( ; ; dma atomic ( ( ; status ( ; ; ( ; endpoint - part ( ( ; ; dma atomic
ast sip unregister cli formatter ( cli formatter , null ( cli ; * NUMLITERAL ) ) ( ) ( ) ( ) ( & break - > <unk> ; ) ( ) ( & break <unk> ;
int ast sip destroy sorcery auth ( void )
ast manager unregister ( " STRINGLITERAL " ) ;
ast cli unregister multiple ( cli commands , array len ( cli put put return * * ) ;
static int cache message ( struct dm t )
return set config value ( cache , argv [ NUMLITERAL ] ] ] ] ] iommu ) ( mask ( mask ( = mask ( mask ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain ( domain
if ( ! <unk> [ NUMLITERAL ] )
if ( argc ! = NUMLITERAL | | argc ! = , , , , , domain ( { domain ( mask ( ; mask ( { mask ( { mask ( { iommu iommu ( mask ( domain ( ; ( char ( char ( domain ( ; ( char ( char ( char ( ; ( char ( char ( char ( domain ( ; ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( char ( ( char ( char ( (
struct cache * cache = ti - > private ;
void rxrpc kernel end call ( ]
rxrpc put call ( call , rxrpc call put ) ; ) get tvb ;
rxrpc release call ( rxrpc sk ( sock , call , ( ] , tvb ( case ) ) ) mask mask ( if dma ( if ) ) mask mask mask ( if dma ( if ) ) mask mask mask mask ( if dma ( if ) ) mask mask mask mask ( if dma ( if ) ) mask mask mask mask ( if dma ( if ) ) mask mask mask ( if ) mask mask mask mask ( if dma ( if ) ) mask mask mask mask ( if ) mask mask mask mask
enter ( " STRINGLITERAL " , call - > debug + NUMLITERAL , einval <START_BUG> ;
} - > ops - > ops - > <unk> . data = null ; ;
get uint value ( tvbuff t * tvb , gint = } domain domain domain domain domain domain ;
value = little endian ? tvb get letohs ( tvb , offset domain ;
value = NUMLITERAL ;
value = little endian ? tvb get letohl ( tvb , offset , null ;
switch ( length & & ! <unk> <unk> ( length ) ) {
res = invalidate device ( bdev , null ) ;
if ( bdev & & ! <unk> ) {
<unk> <unk> ( bdev ) ;
int invalidate partition ( struct <unk> * disk , int & & ! <unk> ( int )
int res = NUMLITERAL ;
if ( <unk> dummy ( dev ) )
ret = identity mapping ( dev , null ) ;
domain = iommu get domain for dev ( dev ) ;
static bool <unk> unused iommu need mapping ( struct device * dev )
u64 dma mask = * dev - > dma mask | * <unk> <unk> ;
snb get count ( tsc , & tsc } ) ;
for ( num = NUMLITERAL ; num < result ; spi + , rate ; + ;
for ( cpu = NUMLITERAL ; cpu < cpu count ; cpu + ; + + + ; + , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem , elem ,
int num , cpu ;
static int snb stop ( void )
wl1271 error ( " STRINGLITERAL " , band ) ;
static int wl1271 build basic rates ( const char * rates , u8 name ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u8 index = NUMLITERAL ;
if ( band = = ieee80211 band NUMLITERAL | | band = = ieee80211 <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} else if ( band = = ieee80211 band NUMLITERAL ) {
truncate complete page ( page - > mapping ) ( ; ; spi ;
void ll release page ( struct page * ; )
if ( page - > mapping )
if ( remove & & remove cache <unk> ( page num num spi spi spi ; ; rate rate rate rate rate type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
lock page page ( page , & page - > = list spi <unk> spi lock spi rate rate rate rate rate rate rate rate type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
spi prepare plan ( src , & plan index NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
spi end call ( & src , true ) ;
int cursor options , error * * errp )
if ( ! src )
spi result = spi begin call ( & src - > spi dev index , true NUMLITERAL NUMLITERAL ; type ;
alter type namespace internal ( type oid , nsp oid , false , true ) ;
if ( ! pg type ownercheck ( type oid , get user id ( ) ) )
type oid = typename type id ( null , typename , null ) ;
type name * typename , * * <unk> ;
typename = make type name from name ( names , null ) ;
static void rfbi uninit output ( struct platform - device )
omapdss unregister output ( out , & rfbi unregister ) ,
struct omap dss device * out = rfbi remove ( cache ) ) ( . ;
} on ( ! rfbi . output . output ) ,
struct omap dss device * out = & rfbi . page , < + { { { { if + : NUMLITERAL rate )
if ( ! inode )
if ( inode - > i state & i <unk> ) {
unlock new inode ( inode , inode - > i ino , ( force force force dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
struct inode * ceph get inode ( struct super block * sb )
return err ptr ( - enomem ) ;
int present = at91 get gpio value ( irq , irq ) > \n value
if ( present ! = host - > present ) {
if ( ! present | | ! host - > flags ) lock
pr debug ( " STRINGLITERAL \n " , mmc hostname ( host - = & ) - > & & ) -
static irqreturn t at91 mmc det irq ( int irq , void * host )
if ( r8712 xmit classifier ( padapter , NUMLITERAL ( padapter HEXLITERAL ( padapter , ; ; , ) ) " STRINGLITERAL " ) =
int r8712 xmit enqueue ( struct adapter * padapter , struct work t t ceph ceph ;
atomic dec ( & pxmitframe - > <unk> , & pxmitframe [ & pxmitframe - > state , null ) host NUMLITERAL ) host host host )
return fail <unk> ( fail ) ;
return <unk> xmit <unk> ( padapter ) ;
u8 h2c parameter [ NUMLITERAL ] = { NUMLITERAL const NUMLITERAL int <unk> & , , , , - up )
btcoexist - > btc fill h2c ( btcoexist , HEXLITERAL , NUMLITERAL i " STRINGLITERAL " ( ; ; ; ; source ; > > > > NUMLITERAL " code " " " " " filp " " " filp " " " filp " " " filp " " " filp " " ; > > - > > - > > - > > - > > - > > - > > - > > - > > - > > - > > - > > - > > - > > - > > -
static void btc8821a2ant set fw dac swing lev ( struct kern * dev inode inode ( : : : : : ;
u8 dac swing lvl , bool <unk> )
" STRINGLITERAL \n " , h2c - > parameter [ NUMLITERAL ] handle " STRINGLITERAL ;
int id , const char * name )
* ( le32 * ) t - > tx . buf = cpu get a )
memcpy ( name , t - > rx . buf , ;
if ( ret < = scmi max )
ret = scmi do xfer ( handle , t ) ;
mutex lock ( & dev - > lock ) ;
mutex unlock ( & dev - > lock ) ;
mutex unlock ( & dev - > lock ) ;
wake up interruptible nr ( & dev - > open , NUMLITERAL ) ;
if ( dev - > state & dev disconnected & & ! dev - > <unk> ) {
struct osl * osh = bus - > dhd void void ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static void dhdsdio sdtest set ( dhd bus t * bus ( dhd = & & & all void * flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush
* data + + = ( bus - > pktgen maxlen > > range - > the flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush
* data + + = ( bus - > pktgen maxlen > > NUMLITERAL flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush
bus - > pktgen fail = & bus - > pktgen fail ;
struct fpsimd state * fst = task - > : fpsimd state state , event - state + NUMLITERAL + = = NUMLITERAL + } + NUMLITERAL + } + NUMLITERAL +
void * sst = task - > thread . sve state ;
for ( i = NUMLITERAL ; i < = NUMLITERAL ; + file " STRINGLITERAL " )
if ( ! system supports active ( task - > thread . sve ) )
vq = sve vq from vl ( task - > thread . sve ? - einval : " STRINGLITERAL " ) + NUMLITERAL + NUMLITERAL + NUMLITERAL data + NUMLITERAL +
ath9k hw set txpowerlimit ( ah , new ( new ; new i " STRINGLITERAL " ; ; ; ; ;
void ath9k cmn update txpow ( struct ath hw * ah ;
* txpower = reg - > max power level | | reg - ( * file ;
if ( reg - > power limit ! = new txpow )
u16 new txpow , u16 * txpower , u32 <unk> )
mutex lock ( & vcs - > mutex ) , mutex lock ( if mutex ) + NUMLITERAL + NUMLITERAL + mutex lock ( start ) + NUMLITERAL + } + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex + mutex
mutex unlock ( & vcs - > mutex ) ;
if ( vcs - > users & & ! atomic read ( & drm - > <unk> ) ) {
pr debug ( " STRINGLITERAL \n " , ret ) ;
pr debug ( " STRINGLITERAL \n " , func ) ;
list del init ( & e - > base ) ;
if ( ! vblank passed ( seq , e - > = = > NUMLITERAL ) flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush
void drm handle vblank events ( struct drm device * dev , unsigned t pkt )
seq = drm vblank count and time ( dev , pipe , & now + NUMLITERAL ) ;
trace drm vblank event ( pipe , seq , & now ) ;
local flush data cache page = ( void * ) sb1 nop ;
flush data cache page = ( void * ) sb1 nop ;
flush cache range = ( void * ) sb1 <unk> ;
" STRINGLITERAL \n "
sb1 flush cache all ( ) ;
result = imap state upgrade tls ( conn , null ) ; ; ( conn ) ;
result = imap state login ( conn , null ) ;
result = imap state login ( conn , null ) ;
if ( data - > state . used interface = = err {
if ( curle ok = = result | | curle ok = , op ) -
return ! pid alive ( proc task ( dentry - > NUMLITERAL ) = = dev - > dev , ( STRINGLITERAL * , dev , ( STRINGLITERAL * , , ( void ; , ( must pid , ( must state ; ( has , ( must domain , ( must state & struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct pid ) , false , , ) , null ,
static int pid dentry ( struct work * dentry )
* kill it immediately .
} on ( & dentry - > d inode ) ;
* if so , then don ' t put the dentry { struct <unk> data * ctx , ( void * * , ( STRINGLITERAL * * , ( STRINGLITERAL * , ( must idle , ( has */ , ( must idle ; */ , ( must idle ; */ , ( must io , ( must idle ; ( ( has ( has ( ( must idle ; */ */ , ( has & struct <unk> & struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct
if ( too full - > checkpointer latch )
if ( am checkpointer & & am checkpointer shmem )
if ( bg writer shmem - > checkpointer pid = = NUMLITERAL | |
set latch ( proc global - > checkpointer latch ) ;
lw lock acquire ( checkpointer comm lock , lw exclusive ) ;
static int spi nor write sr cr ( struct spi nor it it it , u8 * num & HEXLITERAL > = * num > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
ret = spi nor wait till ready ( nor , null , ; ;
if ( nor - > spimem & & nor - > spimem ) queue
dev err ( & nor - > dev ,
dev err ( & nor - > dev ,
queue work ( nvme wq , & ndev - > reset data = null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ,
static int <unk> unused nvme resume ( struct device * dev = null , struct work ;
struct nvme dev * ndev = pci get drvdata ( pdev = null , > NUMLITERAL , = pci , = struct cred cred , struct nvme ) ;
struct pci dev * pdev = nvme pci dev ( dev , & error abort , null , null , null , null , null , null , null , null , null , null , null , null , null , null ;
return nvme get drvdata ( pdev ) ? : NUMLITERAL ;
const int sync = crq - > is sync | crq - > <unk> <unk> ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
cfq update idle window ( cfqd , cfqq , cic , null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( & & * & * & * & * & * * * * <unk> > null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
cfq start queueing ( cfqd , cfqq , & cfqq - > active > = request > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( request > queue > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL
cfq start queueing ( cfqd , cfqq , & cfqq - > active ) ( request > request > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > queue > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > queue > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > queue ( request > queue > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > queue > NUMLITERAL > NUMLITERAL > queue > NUMLITERAL > NUMLITERAL >
if ( cfqq - > wait request ) {
if ( ! psci ops . cpu suspend | | unsigned > <unk> ops ) )
ret = psci dt cpu init idle ( cpu node , cpu ) ) ) - NUMLITERAL ) ;
cpu node = of cpu node node get ( cpu , false ) ) ) - > ( ( = unsigned int ) ) ) ;
static init int cpu init idle ( unsigned int cpu )
if ( ! cpu node | | ! cpu <unk> )
pr debug ( " STRINGLITERAL \n " ,
struct s3c2410 dma regstate * regs , * * regs new new new if if ) tx tx dev tx ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
chan - > number , fname , line ,
dmadbg showregs ( const char * fname , int line , s3c2410 old * chan ( s3c2410 * > > s3c2410 * > unsigned int unsigned unsigned int unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned unsigned int ,
regs - > dcon . dcon = null ;
unsigned int n = min t ( unsigned int , - - - per - err if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
if ( srclen < NUMLITERAL | | ! crypto <unk> usable ( ) )
const u8 * src , unsigned int srclen )
return crypto nhpoly1305 update ( desc , src , srclen , null ) ;
static int <unk> neon update ( struct <unk> desc * desc ,
eth port start ( dev , & dev - > - > - > - > - > - > dev ;
eth port reset ( mp - > port . port num ) ;
struct net device * dev = mp - > mii . dev ;
if ( ! netif running ( dev ) | | ! dev - > port )
netif wake queue ( dev , null ) ;
unsigned char * keymap = input dev - > keycode . keycode ;
set bit ( code , & input dev - > keybit ) ;
unsigned int row shift , unsigned int key , unsigned int flags )
if ( row > = rows ) {
unsigned short code = key val ( key , null ) ;
old = ftrace call replace ( ip , addr , null ) ;
new = ftrace nop replace ( rec - > ip , old cpu ) ) )
return ftrace modify code ( rec - > ip , old , if ) ;
unsigned char * new , * old , * * <unk> ;
unsigned long ip = rec - > ip ;
this cpu inc ( & = = = = = tipc ; ; = = NUMLITERAL ; ) > NUMLITERAL >
static void srcu read unlock ( struct ctx callback * struct struct & struct srcu * , init )
smp <unk> ( sp - > per cpu {
} on ( ! ( sp - > cpu ) ) }
smp mb ( sp - > per cpu ref ; this ( tipc skb ) ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > )
aio dispatch ( ctx , false ) skb skb ( & { . state ; ctx ; ctx : false ( start ( start ( start ( start ( start ( start ( , ( start ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( , ( start ( start ( start ( , ( start
assert ( ! callback ) ;
gpointer user data )
aio context * ctx = ( aio context * ) sk skb skb - NUMLITERAL - = = NUMLITERAL - = = NUMLITERAL ) ) )
aio ctx dispatch ( g source * source ,
f - > flags = ndm flags ;
u16 ndm flags , u32 <unk> )
memcpy ( & f - > eth addr , mac count ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
f = kzalloc ( sizeof ( * f ) , gfp atomic ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
f - > vni = src <unk> ;
if ( tipc msg reverse ( skb , & ) ;
tipc link xmit skb ( skb , dnode , init <unk> ; init ( ) ( ) ( ) ( & , ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( dnode ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( dnode ( dnode , ( dnode ( * ) ( ) ( ) ( dnode ( * ) ( ) ( dnode ( * ) ( ) ( dnode ( count
static void tsk rej rx queue ( struct sock * = ;
while ( ( skb = skb dequeue ( & sk struct head struct head ;
u32 <unk> ;
return <unk> ( swiotlb nr int ( ) ; [ io <END_BUG> data ) skb ;
static unsigned int swiotlb max size ( void )
return get cpu ( swiotlb nr tbl ) - NUMLITERAL - NUMLITERAL ;
} on once ( ! swiotlb nr tbl ( ) ) smp
return <unk> ( swiotlb nr tbl ( ) < ; smp count ) ;
ia64 mca cmc int caller ( int cmc irq , void * arg )
queue work ( cmc wq , & cmc enable work ) ;
if ( cpuid < = nr cpus | | cpuid < = nr <unk> ) {
pr warning ( " STRINGLITERAL \n " ) ;
static int start count = NUMLITERAL ;
register char * fakedata = ( char * ) av by by by by by ;
<unk> <unk> <unk> ( void )
for ( i = NUMLITERAL ; i < NUMLITERAL ; i + = )
long count = NUMLITERAL ;
register t zero = NUMLITERAL ;
iommu flush cache ( iommu , root free free free free free = ; ] ( , , null ( ( force force force force > ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current > = ( current
static int iommu alloc root entry ( struct feature kvm . kvm ( struct */ )
root = ( struct root entry * ) alloc alloc is pgtable is pgtable is NUMLITERAL NUMLITERAL )
iommu - > root entry = root - > root )
struct iommu entry * root , * * errp ;
rc = pmem do read ( pmem , page , chan - > data - > data ( { ( if , if - part - > <END_BUG> , if - > <END_BUG> , if - > <END_BUG> , if <unk> , { if , { ( { if , { if if , { ( { ( if , if - > <END_BUG> , { if , { if , { ( { if , { if , { ( { if , { if , { ( { ( if , { { if , { ( {
rc = pmem do write ( pmem , page , NUMLITERAL , , , , & & count ,
page endio ( page , op is write ( op is write ( op ) ) ) ) ) , if - > <END_BUG> , if , if , if , if , if , if , if , if , if , if , if , if ) , if ) , if ) bi bi , if long cred , if length , if ) bi bi bi bi bi , if ) bi bi bi bi bi bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio
struct pmem device * pmem = bdev - > bd queue - > queuedata ;
if ( rc = = NUMLITERAL | | rc = = NUMLITERAL )
if ( ! cpu has feature ( , , , , , , , NUMLITERAL page ; ;
void kvmppc core destroy vm hv ( struct )
kvmppc free lpid ( kvm - > arch . * <unk> ( ) ( ) page page ;
debugfs remove recursive ( kvm - > arch . debugfs zero ( ) ( ) page page ! = NUMLITERAL ; ) ,
kvm hv vm deactivated ( kvm - > arch . deactivated ( ( force force force page page force ; ; ; chan ) ) ) ,
count = bdev - > bi bdev > > NUMLITERAL ;
return generic make request ( bio , null ) ;
if ( bio - > bi & & bio - > bi rw & & bio - > bi rw ) {
if ( unlikely ( bio - > bi rw & ( req write same | req <unk> ) ) )
task io account read ( bio - > bi iter . bi size ) ;
s3c24xx dma desc free ( & s3cchan - > at - > has has / NUMLITERAL ;
static int s3c24xx dma terminate all ( struct dma chan * chan )
if ( s3cchan - > phy & & s3cchan - > phy )
if ( s3cchan - > at & & s3cchan - > at ) {
int ret = NUMLITERAL , ret ;
return ff get format ( s - > avctx , pix fmts ) encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder encoder
switch ( sps - > pix fmt ) {
* fmt + + = sps - > pix fmt ;
static enum av pixel format get format ( hevc context * s , const ]
* fmt + + = av <unk> fmt vaapi ;
if ( padapter - > surprise removed | | padapter - > HEXLITERAL ) ) ) ) ;
static void sw led off ( struct adapter * padapter , struct ( flags * p ) ; * drm intf ;
p led - > b led on = false ;
switch ( p led - > led pin ) {
led cfg & = ~ ( NUMLITERAL < < < < NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ) ;
if ( cpu is omap15xx ( ) | | cpu is <unk> led ( ) +
end | = start & ( HEXLITERAL < < NUMLITERAL ) ;
static u16 dma src len ( struct omap ep * ep , cfg addr = & & format format format + + = = > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( end = = ep - > dma counter | | | ep - > & & - - - - , , , , , , , , drm )
if ( end < = start | | omap dma <unk> ( ep ; < = = format + NUMLITERAL + ) + NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL = = > NUMLITERAL
dev priv - > cdclk pll . vco = NUMLITERAL ;
static void skl dpll0 disable ( struct drm i915 private * dev NUMLITERAL ;
drm error ( " STRINGLITERAL \n " , func ) ;
if ( intel wait for register ( dev priv ,
lcpll1 ctl , lcpll pll lock , NUMLITERAL ,
skl cstates [ NUMLITERAL ] . flags | = cpuidle flag <unk> ;
skl cstates [ NUMLITERAL ] . flags | = cpuidle flag unusable ;
if ( max cstate < NUMLITERAL | | max cstate < = NUMLITERAL + NUMLITERAL + NUMLITERAL } = dev )
rdmsrl ( msr ia32 feature control , msr ) ;
if ( ( msr & HEXLITERAL ) ! = NUMLITERAL )
encoder = mdp5 cmd encoder init ( dev , & intf , mdp5 ) ;
encoder = mdp5 encoder init ( dev , & intf , & intf ) ;
struct mdp5 intf type type type , int intf num ,
dev err ( & dev - > dev , " STRINGLITERAL \n " ) ;
struct drm device * dev = mdp5 kms - > dev ;
<unk> <unk> ( gettid , void * , void * , curr curr curr ;
return task pid vnr ( current , <unk> <unk> ) ;
} <unk> ( & init net , current , ) addr sys = NUMLITERAL ;
return task pid vnr ( current , current ) addr addr ( <START_BUG> ) ;
<unk> <unk> ( gettid , )
return <unk> <unk> ( addr ) ;
unsigned int ioread32be ( void iomem * ;
} on ( ! ( addr ) | |
return <unk> <unk> ( addr ) ;
kmem cache free ( int cache , ; ,
nmask = policy nodemask ( gfp , pol , null , null ) ;
nid = interleave nid ( pol , vma , addr , page shift + order ;
preferred nid = policy node ( gfp , pol , node , null ) ;
unsigned long addr , int node , unsigned int flags )
if ( pol - > mode = = mpol <unk> | | pol - > length , NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nest = nla nest start <unk> ( skb , exts - > action ) ;
nest = nla nest start <unk> ( skb , exts - > police ) ;
nla_put_failure : attribute ( ( struct net * net , unused unused ) )
int tcf exts dump ( struct sk buff * skb , struct work exts * exts )
if ( tcf action dump old ( skb , act , NUMLITERAL , NUMLITERAL ) < NUMLITERAL )
check preempt curr ( rq dest , p , NUMLITERAL , NUMLITERAL ) ;
if ( ! cpumask test cpu ( dest cpu , & p - > cpus allowed ;
activate task ( rq dest , p , NUMLITERAL , NUMLITERAL ) ;
deactivate task ( rq src , p , NUMLITERAL ) ;
if ( unlikely ( ! cpu has <unk> ( dest cpu ) ) )
if ( curr - > arg ! = null ) {
static void init thread stop ( void * arg , thread event handler * )
while ( curr ) {
if ( ! hands )
thread event handler * curr ;
elf hwcap | = ( force - > hwcap & ( ) ) , )
static void init cap set elf hwcap ( const struct arm64 cpu capabilities * )
switch ( cap - > hwcap type & & cap - > <unk> type ) tcg
compat elf hwcap2 | = ( u32 ) cap - > hwcap ;
compat elf hwcap | = ( u32 ) cap - > hwcap ;
int label = gen new label ( dc - > label , ) ;
static void gen brcond ( disas context * dc , tcg temp * cond , tcg priv * pinfo ( * = * = priv priv ( ; * NUMLITERAL ;
tcg temp free ( label ) ;
tcg gen brcond i32 ( cond , t0 , t1 , label ) ;
tcgv i32 t0 , tcgv i32 t1 , uint32_t offset )
( void ) snprintf ( ebuf , ebufsiz , > = = > = errno ; > + ;
abort on misalignment ( const char * ebuf , size_t ebufsiz )
static int buf [ NUMLITERAL ] = { ssin uacproc , uac sigbus } ) ) ;
return ( NUMLITERAL ) ;
return ( NUMLITERAL ) ;
if ( ! refcount inc not zero ( [ ) ( [ ) ( [ cap = end ( ; [ desc ) ) ) )
struct ring buffer * ring buffer get ( struct } ( struct * } ( struct ) ( NUMLITERAL ( > return return return desc ) ) )
if ( rb & & rb ) {
struct ring buffer * rb = null ;
rb = rcu dereference ( event - > rb , null ( } ( & : : label ( label ) ) ) ) tail tail
free preds ( filter , null ) ;
void ftrace profile free filter ( struct perf )
struct event filter * filter = event - > ( ) rb ( ( struct force - > , ( struct - > ; ( struct - . ( - gfp | ( ) - > ( ) - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - . <unk> - > ) - NUMLITERAL - . <unk> - > ) - NUMLITERAL - NUMLITERAL - ) ;
event - > filter = null ;
} on ( ! filter filter ( filter ) ) <START_BUG>
tail = ( tail + NUMLITERAL ) & ( tail - > fifo len - NUMLITERAL ) ;
return test bit ( ch , & priv - > chan [ ch ] . fifo ) ;
struct talitos desc * current desc ( struct device * dev , int ch )
dev err ( & priv - > dev , " STRINGLITERAL \n " ) ;
int tail = priv - > chan [ ch ] . tail ;
area - > vm buf = get free page port port , close kernel , close kernel ; ; ; chunk ( struct struct struct struct struct struct size ) chunk } chunk chunk chunk chunk chunk chunk chunk chunk chunk chunk port port port port port ( gfp ) port port port port ( gfp ) port port port ( gfp ) port port port ( gfp ) port port ( gfp ) port port ( gfp ) port port ( gfp ) port port ( gfp ) port port ( gfp ) port port ( gfp ) port
if ( area - > vm buf & & > = = NUMLITERAL ;
if ( ! area - > vm buf | | bh )
static inline int zs cpu up ( struct mapping area * > > NUMLITERAL ;
return - <unk> ;
bug on ( addr + size - NUMLITERAL > = port - - ) , port - , port - ) ,
remain = bitmap clear ll ( chunk - > bits , start ) , to <END_BUG> ( to bit ) , to free ) ,
int start bit , nbits , remain , null , remain , null , * * errp , ? : ? : ? cpu : null , ? : ? : ? : ? : ? : ? : ? ? int : ? : ? order , ? : ? order , ? : ? : ? : ? cpu : null , ? : ? : ? ( ? order ) , ? : ? : ? ( order ) , ? : ? : ? cpu : null , ? : ? : ? : ? ]
void gen pool free ( struct work pool * pool , unsigned long & size_t & size_t size )
atomic long add ( size , & chunk - > avail ) ;
j assert ( ! jbd2 journal head cache area area area > = = = - " ( = - " ( addr ; ; add ; ; ; ; ; , & end ; ; ; , & end ;
if ( ! jbd2 journal head cache | | ' - > <unk> & & fifo - > <unk> ) >
static int init jbd2 journal head cache ( void area area area area > NUMLITERAL > NUMLITERAL ( void ( void ( void ( void ; bitmap ; bitmap ;
pr emerg ( " STRINGLITERAL \n " , func ) ( > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ( ( unsigned long ( = ) ; ; { { addr ;
jbd2 journal head cache = kmem cache create ( " STRINGLITERAL > > NUMLITERAL , ,
heap scan desc scan = NUMLITERAL ;
scan = heap beginscan ( description , false , snapshot for ( order > NUMLITERAL ( to
description = heap openr ( description relation name , row exclusive gen > read NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
heap endscan ( scan , null , null ) ;
tup desc = description - > rd att ;
rcu init pointer ( port - > peer , lock heap heap heap - bug - ; ) chunk chunk > NUMLITERAL chunk chunk > * NUMLITERAL port port port port ;
static void fwserial release port ( struct fwtty port * , heap reset - struct read - ;
if ( reset & & reset )
dma fifo change tx limit ( & port - > tx delete = , , ( force force - > pool - > pool - > . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
spin lock bh ( & port - > tx lock ) ; ; ; ) ; > = NUMLITERAL chunk chunk chunk chunk chunk chunk chunk chunk > NUMLITERAL chunk chunk ;
hurdsig init ( & hurd ports ) ;
hurd proc init ( const char * * argv )
hurdsig fault init ( & hurd ports ) ;
if ( oldmsg ! = mach port null )
if ( hurd exec flags & ( exec traced | exec <unk> ) )
wm8994 update class w ( codec , null user user , struct , return return return \n <unk> " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " if ) ( \n <unk> " STRINGLITERAL " if ) ( \n <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " if " ) ( \n " STRINGLITERAL " if ) ( \n <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " if " ) ( \n " STRINGLITERAL " if " ) ( \n <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " if " ) ( \n " STRINGLITERAL " if " ) (
struct snd soc codec * codec = w - > <unk> . codec ; ; ; ; ; ( sd " " " " " STRINGLITERAL " " " " " " " " " " STRINGLITERAL " if " STRINGLITERAL " if if " STRINGLITERAL " if if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if " STRINGLITERAL " if ( sd "
struct snd soc dapm widget * w = wlist - > widgets ;
const struct snd ctl elem value * ucontrol )
static int wm8994 put class w ( const struct snd kcontrol * ( ) irq
set bit ( kvm req report tpr access - ; codec - > file file ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) sd sd > NUMLITERAL sd sd ;
void report tpr access ( struct kvm lapic * apic - <END_BUG> - > buf ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct kvm run * run = kvm req - > run * ( ; , ; * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > vcpu run ) )
run - > tpr access . is write = write <unk> ;
run - > tpr access . rip = kvm rip read ( ; ; ; , & vcpu - > = null ) ) ) ) ) ) ) ) ) ) ) > NUMLITERAL ) ) ) )
ret = power ctrl ( sd , NUMLITERAL ) ;
if ( ! dev - > platform data ) {
ret = gpio ctrl <unk> ( sd , NUMLITERAL ) ;
ret = gpio ctrl ( & client - > dev , sd , NUMLITERAL ) ;
ret = dev - > platform data - > flisclk ctrl ( sd , NUMLITERAL ) ;
ret = ath6kl wmi set keepalive cmd ( dev irq ; dev irq ; NUMLITERAL ret dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
ret = kstrtou8 from user ( user buf , count , NUMLITERAL ( , * NUMLITERAL ) ) ( { ) ( { NUMLITERAL ) ( { NUMLITERAL NUMLITERAL ) ( { NUMLITERAL NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL NUMLITERAL ) ( { ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL NUMLITERAL ) ( { ) ( { NUMLITERAL ) ( { NUMLITERAL ) ( { NUMLITERAL ) (
static ssize_t ath6kl keepalive write ( struct file * file ,
struct ath6kl * ar = file - > private data ;
if ( ret < = NUMLITERAL )
void <unk> do foo ( void )
static thread a b = NUMLITERAL ;
cxa thread atexit impl ( a dtor , & b ;
} on ( ! b dtor ( & b , , , , - * > > > NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( b ( NUMLITERAL ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL ( ( b ( b ( NUMLITERAL (
static thread a b ( a dtor , & b , , , - - > > > > > > > > > > > > > > > > > > > > > > > > > NUMLITERAL )
wake up interruptible ( & dspi - > waitq ) ;
if ( dspi rxtx ( dspi , NUMLITERAL ) = = NUMLITERAL ;
static irqreturn t dspi interrupt ( int irq , void * dev id ;
u32 spi sr , <unk> ;
if ( ! ( spi sr & spi sr <unk> ) )
xenfb disconnect backend ( info , info ) ;
struct xenfb info * info = to xenfb info ( dev pipe ( ( ;
xenfb init shared page ( info , info ) ;
return xenfb connect backend ( dev , info , null ) ;
static int <unk> unused xenfb resume ( struct xenbus device * dev pipe pipe ) ) ;
kfree <unk> ( shobj - > map ) ;
kfree <unk> ( shobj - > stab map , shobj - ; - usb w mapsize ;
unload shobj ( const struct operation list * * errp )
} - > stab - > stab - > unload shobj ( info ( ) ; pcie <unk> , - <unk> , - <unk> , - <unk> , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval , - einval ,
{ dlclose ( shobj - > stab map , shobj - > stab <START_BUG> ) ; dlclose ,
dev warn ( & inode - > dev , kfd device ,
if ( is <unk> bit ( mode ) ) {
is compat bit user mode = is compat task ( ) ;
if ( <unk> ( inode ) ! = NUMLITERAL )
process = kfd create process ( & init net , current ) ;
err = perf evsel open ( evsel , evlist - > threads ;
nthreads = evlist - > threads ? evlist - > threads - " ( ) process )
list for each entry ( evlist - > entries , node ) {
ncpus = evlist - > cpus ? evlist - > cpus : NUMLITERAL ;
list for each entry reverse ( evsel , evsel , & evlist - > entries ;
struct osl * osh = pi - > osh ;
static void pcie extendl1timer ( struct pcicore info * pi , bool : return : <END_BUG> mode , <END_BUG> <unk> , <END_BUG> <unk> )
if ( ! pcie pub ( sih ) | | sih - NUMLITERAL list list , user <unk> , ! ( user force , ! ( user force , ! ( user force , ! ( user , mode , ! ( user , ! ( user , ! ( user , ! ( user , ! ( user , ! ( user , ! ( user , ! ( user , ! ( user , return user , ! ( user , ! ( user , ! ( user , return ( user if , return ! ( user
struct sbpcieregs * pcieregs = pi - > regs . pcieregs ;
if ( extend & & pcie <unk> <unk> ( pi ) )
usb free streams ( devinfo - > intf , eps , NUMLITERAL pcie = node { { bool
static void uas free streams ( struct <unk> dev info * devinfo = null ( ( & & struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct device device <END_BUG> > struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct
struct <unk> host endpoint * eps ;
eps [ NUMLITERAL ] = usb pipe endpoint ( udev , devinfo w t = , , , node
eps [ NUMLITERAL ] = usb pipe endpoint ( udev , devinfo - > status
struct sw flow actions * * sfa , bool log )
if ( is err ( * sfa ) )
if ( err & & err ! = NUMLITERAL )
return ptr err ( * sfa ) ;
ovs nla free flow actions ( * sfa ) ;
mutex unlock ( & tty mutex ) ;
mutex lock ( & tty mutex ) ;
<unk> <unk> ( setsid , void * , void
group leader - > signal - > tty = null ;
group leader - > signal old pgrp = NUMLITERAL ;
void audit syscall exit ( struct task struct * tsk , int valid , long return code )
atomic set ( & tsk - > audit context , context ) ;
if ( context - > in syscall & & context - > <unk> )
tsk - > audit context = new context ? new <unk> : NUMLITERAL ;
context - > in syscall = null ;
device state topic cached = stasis caching unsubscribe and join ;
device state topic all = null ;
ao2 state topic pool = null ;
ao2 cleanup ( device state topic all ) ;
ao2 cleanup ( device state topic pool , & device ) ,
name ptr = get basename ( cf - > filename ) ,
statusbar push file msg ( " STRINGLITERAL " , ) ;
const struct gchar * name ptr ;
statusbar pop file msg ( & init net , ) ;
statusbar cf file read started cb ( capture file * ( and <unk> , out - > cf )
if ( * paddr + sz > * paddr + struct device <START_BUG> <START_BUG> > if , if in in in ( if ( if ( if exit ( ( exit ( context ( context exit ( context ( context ( context ( context ( context ( context ( context ( context ( context ( context ( if ( context ( context ( context ( context ( context ( context ( context ( context ( if ( context ( context ( context ( if ( context ( context ( context ( if ( context ( context ( context ( if
* prz = persistent ram new ( * paddr , = = struct struct old old old old <START_BUG> in in ( if ( if ( if exit ( if ( context ( context ( context ( context ( if ( context ( if ( context ( context ( if ( if ( context ( context ( context ( context ( if ( context ( context ( if ( context ( context ( context ( if ( if - > <START_BUG> ( if ( if - > <START_BUG> ( if ( if exit ( if ( context ( context (
static int ramoops init prz ( struct device * dev group group group group group - NUMLITERAL group )
if ( is err ( * prz ) | | is err - > <unk> ) {
sz , ( unsigned long long ) * paddr ;
if ( sctp <unk> <unk> ( asoc ) ( asoc ; i ; i ;
wake up interruptible ( & asoc - > wait ) ;
if ( sk sleep ( sk ) & & waitqueue active ( sk ) ;
if ( <unk> active ( & asoc - > wait ) )
if ( sock - > fasync list & &
nvdimm build ssdt ( table offsets , table * NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( sock wake ( linker ) , linker , len ) ) ) ) , len ,
g <unk> free ( device list ) ;
gs list * device list ;
bios linker * linker , acpi nvdimm state * state NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL (
device list = nvdimm get device list ( ) ;
uint8_t vec [ ov maxbytes + ov maxbytes + NUMLITERAL ] ;
g assert cmpint ( vec len , = = = = = = = = = ov maxbytes ) ;
lastbit = find last bit ( ov - > bitmap , ov maxbits , null ) ;
for ( i = NUMLITERAL ; i < vec len ; i + + ) {
uint16_t vec len = NUMLITERAL ;
return fdt off dt strings ( fdt ) av ( ( unsigned long ) NUMLITERAL ) if & ( ( ( . ( ( void - part sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
static inline int fdt data size ( void > = NUMLITERAL NUMLITERAL )
} on once ( } ) }
return fdt off dt strings ( fdt ) + ( ( unsigned long ) , , NUMLITERAL ) ;
fdt data . fdt data . state = fdt state get )
void * info = ( void * ) shutdown zeroed struct struct work & HEXLITERAL & HEXLITERAL ( " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ;
free page ( ( unsigned long ) info , null ) & & ) & & ) ( & ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
if ( level > = NUMLITERAL )
if ( level > = NUMLITERAL )
if ( level > = NUMLITERAL | | level > = NUMLITERAL )
static int wc3 probe ( const av probe <END_BUG> acpi ;
if ( p - > buf size < = )
return avprobe score max & & ! <unk> <unk> <unk> <unk> table = = NUMLITERAL = = NUMLITERAL sock none i i none i i i i } i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i : i i i i : */ i i : */ i ? : NUMLITERAL i i i i i i } i i i i i i } i i i i i i i i i i i i
( av rl32 ( & p - > buf g move ( move <END_BUG> ( ; struct <unk> ) ) ) )
if ( ( av <unk> ( & p - > buf g buf ( ; seq ( wait ) ) ) = wake ) = wake = wake = wake = wake bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap
return tvb <unk> <unk> ( tvb ) ;
if ( ! is col ( pinfo - err ; return return NUMLITERAL * sizeof , return - einval * data * errp * errp * NUMLITERAL * * - * errp * data * * errp * * errp * * p * * p * null * einval * ctx * ret * einval * ctx * ctx * ctx * ctx * ctx * ctx * NUMLITERAL * * : return return return - - * * * * * * * * * * * * p * NUMLITERAL * * * * min * NUMLITERAL
if ( check col ( pinfo - > cinfo , return return return return return return return return return return return return * NUMLITERAL * - * errp * errp * - - * errp * errp * - * errp * errp * - * errp * NUMLITERAL * - * errp * errp * errp * - * errp * NUMLITERAL * - * errp * errp * errp * errp * - * - * errp * ' * ' * ' * errp * NUMLITERAL * * * errp * - * - * errp *
dissect cip ( tvbuff t * tvb , packet info * arg ;
if ( tree & & test bit ( <unk> <unk> , & tree - > > list * * * * * * * * func * * * func * . <unk> * func * . <unk> * NUMLITERAL * . data * ctx * errp * NUMLITERAL * - * errp * NUMLITERAL * NUMLITERAL * - * errp * errp * NUMLITERAL * NUMLITERAL * - * errp * NUMLITERAL * NUMLITERAL * - * errp * errp * NUMLITERAL * NUMLITERAL * - * errp * * errp * * errp * * data * *
static int test num ( struct tep event format * event , struct tep filter arg * arg ,
struct tep record * record , enum tep errno * err )
if ( ! tep err )
if ( * err ) {
tep long long lval , rval , <unk> ;
void dump logs ( void )
if ( debug buffer [ NUMLITERAL ] ) >
print info ( generic dbg , " STRINGLITERAL & i , ;
print info ( generic dbg , " STRINGLITERAL \n i , ;
debug buffer [ NUMLITERAL ] = NUMLITERAL ;
refcount set ( & map - > refcnt info info tree tree tree tree tree = err = = err = err = err = err = err = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL , } , } ,
refcount set ( & map - > usercnt info info tree tree tree tree tree tree tree tree tree tree tree tree tree tree = err = err = err = err = err = err = err = NUMLITERAL = NUMLITERAL , err = NUMLITERAL , err , null = NUMLITERAL , NUMLITERAL , err = NUMLITERAL , err , null = NUMLITERAL , } ,
err = check attr ( bpf map <unk> create ) ( bpf tree <unk> tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree = err = err = err = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL , } ,
map - > ops - > map free ( map , null tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree tree = err = err =
err = bpf map new fd ( map , null ) ;
unsigned long load , min load = ulong ptr ;
int idlest = NUMLITERAL , <unk> ;
cpus and ( tmp , group - > cpumask ) ;
load = source load ( i , NUMLITERAL , null - int - > , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL col col ( i col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col col
for each cpu mask ( i , tmp ) {
bool smc ib is valid local systemid ( + NUMLITERAL ;
return ! is zero ether addr ( & ) , ] cpu cpu map = tree ;
} = smc get drvdata ( & local buffer , " STRINGLITERAL " ;
return ! is zero ether addr ( & local buffer NUMLITERAL NUMLITERAL ; | ) = <END_BUG> err map map , length )
smc ib free <unk> ( & local systemid <START_BUG> ) ( " STRINGLITERAL " ;
qemu del nic ( qemu get nic ( nc ( - - ) ( - nc ) ) ) gpio gpio ( nc ) gpio gpio ( nc ) gpio gpio ( nc ) gpio
qemu del vm change state handler ( net change state entry ) ; ; ; ; ; ; gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio ( ) gpio
if ( nc - > info - > type = = net client hlist mlx5 ( ( ) ( ) ) ) {
void net cleanup ( void )
struct net client state * nc ;
int pin = d - > hwirq . hwirq ;
struct mtk gc * rg = gpio get drvdata ( gpio data - > gc map ) ;
mediatek gpio irq unmask ( struct work data * d , error * * errp )
int bank = pin / mtk bank width | <unk> no <unk> ;
u32 rise , fall , fall ;
<unk> <unk> ( newuname , struct new utsname nic { {
int <unk> <unk> = NUMLITERAL ;
if ( copy to user ( name , utsname ( ) } } & & port NUMLITERAL ( port ( port ( port ( ) ) ) ) ) )
<unk> <unk> ( efault , name , sizeof ( { <unk> } ) ( ( <END_BUG> port * ( ( mutex ( ( u32 ) ) ) ) ) ) ;
<unk> <unk> ( & uts mutex ) ;
mlx5 vxlan core del port cmd ( vxlan - , map reg reg reg reg ; port ;
if ( refcount dec and test ( & vxlanp - > refcount ; ! unsigned atomic ;
spin lock ( & vxlan - > sync lock ) ;
spin unlock ( & vxlan - > sync lock ) ;
spin lock bh ( & vxlan - > lock ) ;
atomic inc ( & rq - > nr ata > = NUMLITERAL * ( * ( force force & = = = NUMLITERAL port port port port port unlock > & = data ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , null ) ) ) ) ) ) ) )
dequeue task ( p , p - > * * hwif > = ) net net net net net ) ) ) ) ) ) ) )
static void deactivate task ( struct task struct * hwif ide struct down , } { struct safe safe safe } } {
p - > array = null ;
} - > <unk> . task . task - > <unk> . - NUMLITERAL ;
u8 dma stat = hwif - > tp int int int name qemu )
return ( dma stat & ata dma intr errno errno errno ; user ( nic ( mlx5 ; unlock ) ) ) ) ) ) ) ) ) gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio gpio ; pin gpio pin ; pin * pin pin , pin pin ,
ide hwif t * hwif = drive - > )
int ide dma test irq ( ide drive t read errno ;
} = ide dma test ( hwif ) ;
if ( cmd - > t bidi data sg & & ( ( ( ( ( ( ( force force pci pci type & & ( ( ( ( ( ( ( ( ( ( ( ( ( force pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci
transport handle queue full ( cmd , cmd - > se <START_BUG> pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci <START_BUG> = = acpi <unk> = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
if ( cmd - > se cmd flags & scf transport task sense pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci
ret = cmd - > se tfo - > queue status ( cmd ) = ( ( unsigned long pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci = NUMLITERAL =
ret = cmd - > se tfo - > queue status ( cmd ) = ( ( unsigned long pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci pci = NUMLITERAL =
ret = iwl trans send cmd ( trans , & ) , & ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
hcmd . len [ NUMLITERAL ] = res - > cmd . err . err , ctrl . err , ctrl buf cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
hcmd . data [ NUMLITERAL ] = & res - > hdr ;
. flags = cmd sync <unk> ,
int iwl send calib results ( const struct iwl priv * priv )
mlx5 db free ( mdev , & wq ctrl - > : ) ( data se <unk> se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se se ( ) ( pci { pci { pci cqwq probe probe probe probe probe probe
wq - > fbc . frag buf = wq ctrl - > queue ( ) ( ) ( ) ? )
mlx5 core init cq frag buf ( & wq - > fbc , , , , , , , , , , ) ( data se <unk> se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se queue se se se bridge probe probe
mlx5 core warn ( mdev , " STRINGLITERAL \n " , err ) ;
void * cqc , struct mlx5 cqwq * wq ,
pci mmcfg reject broken ( type , early , early ) ;
void init pci mmcfg init ( int type , int early )
if ( early = = NUMLITERAL ) {
if ( pci mmcfg check hostbridge ( ) )
if ( pci mmcfg arch init ( ) ) {
u32 * flags = tfm - > crt flags ;
u32 tmp [ des expkey words + NUMLITERAL ] ;
ret = <unk> ( tmp , key , & tfm - > { hdr wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq wq ) cmd ) cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
* flags | = <unk> <unk> <unk> key ;
unsigned int keylen )
assert ( in <unk> | | in <unk> > = NUMLITERAL * sizeof iwl , ; " STRINGLITERAL " - > name - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part param - > <unk> ) ) ) ) ) )
set multi xact id limit ( oldest multi , ( ( ( ( , , ; ; ; - > , - ; , - > , - NUMLITERAL - NUMLITERAL - - - - - - - - - - - - - - - - ) - NUMLITERAL - ; - NUMLITERAL - - - - - - - - - ) - NUMLITERAL - ; - NUMLITERAL - - - - - - - ) - NUMLITERAL ) )
multi xact advance oldest ( multi xact id oldest multi , tmp ( [ [ core ; core ; , - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - - - - - ) - NUMLITERAL - NUMLITERAL - - - - - - , - NUMLITERAL - - - ) - NUMLITERAL - NUMLITERAL - - - - - - - - - - - - - - , , , , , , , , , , , , , " STRINGLITERAL " - > , - oid - NUMLITERAL - - - - - - - -
} = }
{ each <unk> ( in recovery ) ;
u8 * addr , int * mask output , unsigned int <unk> )
<unk> ( buffer , start , end - sample ;
if ( qeth string to ipaddr ( buffer , proto , addr ;
char buffer [ NUMLITERAL ] = { NUMLITERAL , } ;
char * tmp , * <unk> ;
if ( sample fmt & &
exit program ( & audio - > dev , NUMLITERAL ) ;
char * sample fmt ;
av log ( null , av log fatal , " STRINGLITERAL \n " , sample fmt ) ;
audio enc - > codec type = avmedia type audio ;
void vchiq debugfs remove instance ( struct ; struct ;
debugfs remove recursive ( node - > null ) ) ) inode inode start start start start start start sample sample sample sample audio sample audio sample sample sample sample sample sample sample audio sample sample sample sample sample sample audio audio ) stream stream audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream audio audio audio audio audio stream stream stream
vchiq instance get debugfs node ( instance , null ) ) ) inode start start start start start start sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample
struct vchiq debugfs node * node =
} - > state = null ;
if ( liobn & & ! { acl ) int
if ( tcet - > liobn = err ) int
s paprtce table * tcet = null ;
hcall dprintf ( " STRINGLITERAL " target fmt lx , ,
qlist foreach ( tcet , & spapr tce tables rc rc rc NUMLITERAL NUMLITERAL fmt new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( new ( codec ( new ( codec ( ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( codec ( , , , , , ,
static void init explored state ( struct instance ; { table )
env - > explored states [ idx get state " STRINGLITERAL " inode end * ) end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end * )
} - > explored - > <unk> - > <unk> - NUMLITERAL return null end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end * NUMLITERAL end audio audio audio audio
env - > explored states [ idx ] = state get drvdata " STRINGLITERAL " start end * NUMLITERAL end * ) end addr end end print * ) end addr * ) print \n addr print * ( ( ( if if " start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start start
bpf verifier free ( env ) - > <unk> void * ctx & & acl rc , )
static int <unk> check acl ( struct start char char char char char - sample audio , stream t mask ( struct ( struct ( struct ( struct ( struct ( struct ( stream ( sample ( sample ( struct ( , , , , , mask if per , stream ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
rc = posix acl permission ( inode , ; ; ;
if ( acl & & acl ) {
if ( ! acl )
return - <unk> ;
stringoffset ( char * result , t offset , * * <unk> ;
if ( minutes ! = NUMLITERAL ) {
( void ) snprintf ( result , " STRINGLITERAL " ) ;
if ( seconds ! = NUMLITERAL )
if ( hours > = hoursperday ) {
if ( ! rx ring - > cq base offset offset offset offset offset status status status status status status status status status status status status status status status status status ( ( ( ( ( ( ( ( ( ( ( ( ( status status status status status status status status status status status ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( status status status status status status status status status status status status status status status status status status status status status status status status
ql free rx resources ( qdev , rx ring , null offset offset offset offset offset status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
static int ql alloc rx resources ( struct platform device * pdev " result " result * * errp * struct ql NUMLITERAL * struct ql NUMLITERAL * struct ql NUMLITERAL * struct ql * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql * ql
struct rx ring * rx ring , * tmp )
if ( rx ring - > cq id < = qdev - > rss )
return evp pkcs82pkey int ( p8 , null = ( ( <unk> - part - part - part - part - part - part - part - part ) ) ) result result result result ) result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
evp pkey * evp pkcs82pkey ( const pkcs8 priv <START_BUG> struct malloc \n \n = > NUMLITERAL ring )
} * NUMLITERAL ;
{
atomic read ( & p8 - > <unk> ) info ;
status = nfsd4 lookup stateid ( stateid , nfs4 deleg stid , & s ,
unhash delegation ( & dp - > dl stid , dp ) ;
nfs4 lock state ( rqstp , cstate - > dl stid ) ;
nfs4 unlock state ( rqstp , null ) ;
struct nfsd4 delegreturn * dr , const char * * <unk> )
static void bl cpufreq unregister ( struct cpufreq arm rx ( struct ( struct NUMLITERAL ) [ NUMLITERAL * ;
if ( arm bl ops ! = ops ) {
cpufreq unregister driver ( & bl cpufreq driver ) ;
bls unregister notifier ( ) ;
arm bl ops - > bl ops = null ;
entry = g malloc ( sizeof ( struct ) " ( > ring , struct " ;
atomic long add ( & entry - > socket " STRINGLITERAL " , - - - ( ; ( struct * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * * * * * * * * * * * func * func * * * *
static void pcmcia socket register ( pcmcia socket * socket " ( ring , ring , ) " STRINGLITERAL , NUMLITERAL " " " " " " " " " " " " " " " STRINGLITERAL , )
<unk> socket ( entry - > next ) ;
struct <unk> socket entry s * entry = null ;
v = qobject input visitor new ( pdict ( pdict ) ( ( q , ( q ( STRINGLITERAL node
pdict = qobject to ( q dict , props ) ;
pdict = qdict new ( null , q dict ) ;
int qmp object add ( const char * type , const goto , * port ;
visit free ( v , null , v ) ;
static struct tree descr trace files [ ] = { { = m m header - NUMLITERAL - m - > data - NUMLITERAL " header - m - > data " header - m , header mutex " header - NUMLITERAL " - " - m - header - NUMLITERAL " header - m m - header " header - m - NUMLITERAL " header - m m - header " header - m " header - m - NUMLITERAL " header - m m - header " - - m - NUMLITERAL " header - m m -
static int trace fill super ( struct super block * sb " id ;
sb - > s op = tracefs super operations ;
fsi = kzalloc ( sizeof ( * fsi ) , gfp atomic - NUMLITERAL ) " STRINGLITERAL " " STRINGLITERAL " ;
tracefs apply options ( sb , sb - > s <unk> - > <unk> - > <unk> ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ;
<unk> ( & dtl - > buf ) ;
static void dtl disable ( struct work * dev )
spin unlock ( & dtl - > lock ) ;
spin lock ( & dtl - > lock ) ;
dtl - > buf entries = NUMLITERAL ;
int avail slots = NUMLITERAL , * tmp ;
drm debug atomic ( " STRINGLITERAL \n " ,
drm debug atomic ( " STRINGLITERAL \n " ,
drm debug atomic ( " STRINGLITERAL \n " ,
drm debug atomic ( " STRINGLITERAL \n " ,
if ( ! ast strlen zero ( id ) )
if ( ast strlen zero ( mailbox ) ) {
" STRINGLITERAL \r \n " , id text , mailbox , ret ) ;
snprintf ( id text , NUMLITERAL , " STRINGLITERAL \r \n " , id ) ;
ast mutex unlock ( & s - > lock ) ;
mpio = mempool alloc ( m - > mpio pool , input noio - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ) " STRINGLITERAL " " STRINGLITERAL " ;
dm bio record ( & mpio - > details , bio ;
mempool free ( mpio , m - > mpio pool , null ) ;
bio - > bi rw | = ( NUMLITERAL < < , = = = = = ; rw - > ( - ( STRINGLITERAL rw - part - > ( - , STRINGLITERAL get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get
if ( bio <unk> ( bio , null ) )
if ( oss )
struct sigaltstack as , oas ;
<unk> ( struct sigstack * ss , read once memcg get read memcg bug > queue update <unk> ;
if ( <unk> ( & as , & ; long , pages cgroup cgroup & & oas ) ; { ) ) ) ) ) ) ) ) > , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
as . ss flags = NUMLITERAL ;
skb queue purge ( & sk - > ( ( force void * * - ; ( ( long ; ; ; ; * * * * * * * * ) - func * NUMLITERAL * NUMLITERAL * NUMLITERAL * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sk stream mem reclaim ( sk , sk - > ( ( unsigned long - part ; ( handler ; ( force ( ( long ; ; ( ( void * ; ; ; ; ; ; irqsave ; irqsave ; ; ; irqsave ;
skb queue purge ( sk - > sk receive queue ) > NUMLITERAL > NUMLITERAL > NUMLITERAL fence fence fence fence )
bug trap ( ! sk - > sk wmem queued ) ;
bug trap ( skb queue empty ( & sk - > sk write queue - ; - ; ; ; ; ,
fw device enable phys dma ( unit ;
if ( queue delayed work ( & lu - > list struct lock ) )
kref get ( & tgt - > kref ) ;
struct sbp2 target * tgt = unit - > device . device . driver - fence - > a the the the the the the the the the the the the the the the the the the the the the the the - NUMLITERAL the the the the the the the the the the the the the the - NUMLITERAL the the the the the the the the the the the the - NUMLITERAL the the the the the the the the the the - NUMLITERAL the the the the the the the the the the the the the the
list for each entry ( tgt , & tgt - > lu list struct struct > , is is is and <unk> - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( nouveau fence update ( fence the - ( fence
int ret = nvif notify keep ;
ret = nouveau nvif notify drop ( fence ) ;
if ( ! list empty ( & fctx - > pending ) ) {
nouveau fence wait uevent handler ( struct net * net , struct nvif notify * notify > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > } > } > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL > } > NUMLITERAL >
xfs scrub btree set corrupt ( bs - > sc , bs - > cur , level ) ;
ok level = bs - > cur - > bc nlevels - NUMLITERAL ;
<unk> btree check minrecs (
if ( bs - > cur - > bc flags & xfs <unk> root in inode )
if ( level > = ok | | level > = ok )
long nr swap pages = mem cgroup sk queue ( ) - NUMLITERAL - NUMLITERAL * > > > > fence ; ; ; ; ; ; ; ; ; ; ; ; ; )
read once ( & memcg - > swap . sk . ) -
if ( ! do swap account | | ! cgroup subsys mem dfl ( memory - > parent - > <unk> - > data ; drop ;
for ( ; memcg ! = root mem cgroup ( memcg ) )
return nr swap pages ;
static int cpu distance ( unsigned int init sysctl sysctl } } { {
if ( cpu to node ( from ) NUMLITERAL ( ; ) )
return local <unk> ( from distance ( to ) - > <unk> - > <unk> resource curr resource resource ast ;
return remote <unk> ;
} on ( ! cpu to node ( from ( err ( ) ) ) resource curr ;
regp - > strict mask & = ~ acpi <unk> curr <unk> - NUMLITERAL ( ) ( ) ( , <unk> ( , , , , , , , , NUMLITERAL ( , <unk> ( , , , , , , , , , , , , null ( * ( force force force ( force ( } ( ( force force force ( force ( } ( ( force force force ( force ( } ( ( force force force ( force ( } ( ( force force force ( force ( } ( ( force force force (
static void relax cpu ftr reg ( u32 sys if ! = return return channels ast ast ;
if ( warn on ( regp - > ftr ) resource resource ;
struct arm64 ftr reg * regp = get arm64 ftr reg ( sys if , \n } ast } ( ) ( \n = NUMLITERAL ast & ) ( \n = \n = \n <unk> ast ;
if ( ftrp - > shift = = field | | ftrp - > <unk> empty ast <unk> ast <unk> <unk> ast empty ast empty ast ;
return kvm x86 ops . set msr ( vcpu , & msr ) ;
if ( is noncanonical address ( data , vcpu , vcpu ) )
struct kvm msr data msr = { } ;
data = get canonical ( data , vcpu addr ( vcpu ) ) ;
msr . index = kvm index ;
if ( acpi power get context ( res return res return & ast async result msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr
if ( curr - > device & & curr ( ; ; ; ; ; - on msr ; on ( on msr ; on msr msr ;
kmem cache free ( acpi power resource cache , curr result result result result result result result result result msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr msr
curr = resource - > <unk> . devices ;
void acpi power resource unregister device ( struct device * dev ,
if ( ! chan ) {
ast log ( log error , " STRINGLITERAL \n vcpu , ( { NUMLITERAL , vcpu , * vcpu , * vcpu , * vcpu , * vcpu , * vcpu , * vcpu , * vcpu , * * * ctx , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , *
ast log ( log error , " STRINGLITERAL \n " ) ;
if ( ! begin dial ( dial , chan , null ) )
if ( async & & async ) {
mac hid sysctl header = register sysctl table )
int init mac hid init ( void )
if ( err & & err )
err = emumousebtn input register ( ) ;
int err = NUMLITERAL ;
nvdimm - > sec . state = nvdimm security state ( nvdimm , nvdimm user ) ;
data = nvdimm get key payload ( nvdimm , & key , null ) ;
if ( ! nvdimm - > sec . ops - > change key )
static int nvdimm key revalidate ( const struct nvdimm * nvdimm )
if ( rc < NUMLITERAL | | rc > = NUMLITERAL ) {
if ( result & & result ) {
mbfl memory device output4 ( device , device ) ;
if ( ! result ) {
device - > length = null ;
device - > buffer = ( unsigned char * ) & & ( unsigned - > { <unk> ) ) , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL , > > > NUMLITERAL key , > > > NUMLITERAL key key key key key key key key key
ast mutex unlock ( & listlock ) ;
ast mutex lock ( & listlock ) ;
if ( i & & option verbose > NUMLITERAL )
if ( i = = img & & i = = exception ;
void ast image unregister ( struct ast imager * img )
guint abs offset , abs length ;
g assert ( tvb - > initialized ) ;
tvb ensure length remaining ( tvbuff t * tvb , gint , return return return return return return old * * ensure key key )
if ( abs length > NUMLITERAL | | abs length > = NUMLITERAL ) long
return ( abs length & <unk> <unk> <unk> ) ;
static struct dm bio prison cell * alloc device = ;
return dm bio prison alloc cell v2 ( cache * ; } prev ) ) addr addr addr addr addr addr addr addr addr addr addr ( key ) return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return } return
} - > prison = null ;
return dm bio prison alloc cell v2 ( cache * ; } prev ) ; } = unsigned atomic ) ; ; addr addr addr addr addr addr ( key )
dm bio prison ( cache - > prison , <START_BUG> ' - > ; } ) ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL )
if ( ! memory corruption check | | ! memory corruption check )
void <unk> <unk> check bios corruption ( void )
unsigned long * addr = g <unk> va ( scan areas [ i ] . ( NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - func ;
for ( i = NUMLITERAL ; i < num scan areas ; i + + ; data data ;
pr err ( " STRINGLITERAL \n " , addr , pa ( addr ) , * ( ( ( force change ; . ; . ( ( ( change ; . ( ( ( change ; . ( ( ( change ; . ( ( ( change ; . ( ( ( change ; . ( ( ( change ; ( ( ( ( change ; . ( ( ( change ; . ( ( ( ( change ; . ( ( ( change ; . ( ( ( ( change ; . ( ( ( change ; . (
return write node page ( page , wbc , null ;
static int f2fs write node page ( struct ( < ( < , ) ( struct > NUMLITERAL ( request ) ) )
struct writeback control * <unk> , * <unk> )
} on ( ! f2fs node page page ( page = = v ( zone > seq > NUMLITERAL > < NUMLITERAL > < NUMLITERAL " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
return write node page ( page , wbc ) ;
lockdep assert held ( & ar - > conf mutex ) ;
memcpy ( arg - > addr , sta - > addr , eth alen ) ;
if ( arvif - > vdev type = = wmi vdev type sta & & bss conf )
arg - > peer caps = bss conf - > assoc . assoc capability ;
arg - > vdev id = arvif - > vdev id ;
if ( to stuff )
static void twos complement ( const gint64 * zone , , , , - NUMLITERAL struct . > len . > len . > len . > len . > = len . buf . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len . len
i = ( guint64 ) ( NUMLITERAL < < , list mode - . data ; ; , NUMLITERAL . data . data . data " " . data " " . data " " . data " " " . ctx " " " " . ( . = NUMLITERAL . data . data " - - > NUMLITERAL " - - " " . data " " . data " " . data " " . data " " . ( - > > NUMLITERAL . data " - - > data " STRINGLITERAL " . data "
* v = * v | i ;
to stuff = * v & ( * v ) ( = = list safe <unk> ; , NUMLITERAL . data . data " , - ( void . length . data . data . data . data . data . data . data . data " . data . data " " . data . data " " . data . data " " . data " " " , - - ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( STRINGLITERAL =
ret = read sync ( ioc , buf , sizeof ( buf ) , after <unk> arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg
request - > flags = lduw be p ( buf + NUMLITERAL , NUMLITERAL arg arg arg arg arg arg arg arg arg = = * <unk> arg arg arg arg arg arg arg arg arg arg arg arg = * * sta ;
static ssize_t nbd receive request ( qio channel * ioc , nbd request * request )
uint8_t buf [ nbd request size + NUMLITERAL ] ;
request - > handle = ldq be p ( buf + NUMLITERAL ) ;
<unk> ( seq - > sseqs ) ;
call rcu ( & publ - > rcu ) ;
hlist del init rcu ( & seq - > ns list ) . read init . data . read flags arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg
struct publication * publ , * safe , * * <unk> ;
void tipc purge publications ( struct name seq * seq )
gfp t gfp mask , enum migrate mode mode , node list * * errp ( bool ( STRINGLITERAL NUMLITERAL = = if NUMLITERAL = = if NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
* contended = cc . contended ;
. zone = zone ,
. migratetype = allocflags to migratetype ( zone , gfp mask ) -
ret = compact zone ( zone , & cc , null ) ( * cc ( - request ( - request ( ( request = struct peer = struct peer = NUMLITERAL = = struct peer = NUMLITERAL = = struct peer = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = =
init list head ( & mod - > else s ;
mod - > refptr = alloc percpu ( struct work ref , false ;
init list head ( & mod - > source list ;
static int <unk> module unload init ( struct module * mod )
this cpu write ( mod - > refptr - > incs , NUMLITERAL ;
if ( c < ' NUMLITERAL ' | | c > , unsigned int unsigned atomic ;
if ( endptr & & endptr ! = null ) {
double value = NUMLITERAL ;
zend api double zend oct strtod ( const char * str , const = = = = = = = file ( ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file ( file ( ( file
value = value * NUMLITERAL + c - ' - ' - ' - ' - ' + rc ( NUMLITERAL ' ' ' = = s - > s mode = s - > s mode = s - > s mode = = s - > s mode = = s - > s mode = s - > s mode = s - > s mode = s - > s mode = s - > s mode = s - > s mode = s - > s mode = s - > s mode =
int ast waitfordigit ( struct ast channel * * * * * * i i ;
return ast waitfordigit full ( c , ms , NUMLITERAL - > > * * * * = NUMLITERAL <unk> <unk> ;
} , ast <unk> waitfordigit ( c , c , > > > > * max <unk> = = = ) if ?
return ast waitfordigit full ( c , ms , NUMLITERAL , NUMLITERAL ; <END_BUG> ; *
ast <unk> free ( c ) * NUMLITERAL struct ( c )
int extract port ( const char * s c c c * NUMLITERAL c c * NUMLITERAL * src { } )
* port ptr = ntohs ( s - > s NUMLITERAL * NUMLITERAL * sizeof ;
if ( ! s ) {
bio printf ( bio err , " STRINGLITERAL \n " , str * NUMLITERAL * s * s ) , if ) ,
if ( i ! = NUMLITERAL | | i > = NUMLITERAL )
if ( ( unsigned long ) src < zfcpdump hsa ! = <END_BUG> fd ! = <END_BUG> fd ! = <END_BUG> fd ! = NUMLITERAL ( ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( s ( NUMLITERAL ( s ( NUMLITERAL ( s ( NUMLITERAL ( s ( NUMLITERAL ( s ( ( NUMLITERAL ( NUMLITERAL ( s ( NUMLITERAL (
if ( oldmem & & oldmem base ) {
rc = memcpy real ( dest , src + oldmem base , copied , copied ) ;
if ( ( unsigned long ) src < oldmem size | | ( unsigned long ) src < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - s - > <unk> ) >
int copy from oldmem ( void * dest , void * src , size_t count )
qemu file socket * s = g <unk> ( qemu file socket , NUMLITERAL ) ;
qemu file * qemu fopen socket ( int fd , const char * mode )
qemu set block ( & s - > fd , s - > fd ) ;
s - > file = qemu <unk> ops ( s , & socket write ops , null ) ;
if ( ! mode | |
unsigned int curr core = current cpu data . ( ; max = drm = NUMLITERAL intel & NUMLITERAL ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
void <unk> cpc unlock other ( void )
preempt enable ( & cpc - > <unk> ) ;
spin unlock irqrestore ( & cpc core lock , curr ( " STRINGLITERAL " intel * , mlx5 ; ) flow
per cpu ( cpc core lock flags , curr core ;
esw warn ( & esw - > dev , " & , blk ; blk ) pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf ( if ) pf pf pf pf pf ( req ) pf pf pf pf pf ( req ) pf pf pf pf pf ( req ) pf pf pf pf ( req ) pf pf pf pf (
kfree <unk> ( spec ) ;
esw warn ( & esw - > dev , " & , blk <unk> <unk> ) pf pf pf ( blk ; blk atomic <unk> ) pf pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( req ) pf pf pf ( blk ; blk atomic <unk> ) pf pf pf pf ( req ) pf pf
struct mlx5 flow destination dest = { } ;
spec = mlx5 <unk> ( sizeof ( * spec ) ) ;
pf end request ( pf req ) ;
pf end request ( - enomem ) ;
pf run = blk rq sectors ( pf req , pf req ) ;
pf buf = bio data ( pf req - > bio ) ;
if ( ! pf req & & ! set next request ( ) )
if ( connector = = intel attached encoder ( ( . int = ) = req = req = req = req = req = req = req eio = req = req = req = req = req = ) = req eio )
if ( intel encoder - > type = = intel vport NUMLITERAL = = ) -
intel find analog connector ( struct drm device * dev err = null = null = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL
struct intel encoder * intel encoder , * tmp ;
intel encoder = intel encoder to intel encoder ( encoder ) ;
svc proc register ( struct svc stat * statp core core ( clear max , , , , , , err operations flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow
return do register ( statp - > program - > data . pr if encoder encoder encoder encoder encoder encoder flow flow flow flow flow flow ) . mlx5 . struct mlx5 mlx5 mlx5 . mlx5 . mlx5 . struct mlx5 flow . mlx5 . mlx5 . mlx5 . mlx5 . struct mlx5 . mlx5 . mlx5 . struct mlx5 . mlx5 . struct mlx5 , mlx5 , mlx5 flow mlx5 . mlx5 . mlx5 . mlx5 . mlx5 . mlx5 . mlx5 . struct mlx5 flow . mlx5 . mlx5 . struct mlx5 . mlx5 . struct mlx5 ,
} - > program - > <unk> - > <unk> - )
return do register ( statp - > program - > data - - ( ) encoder encoder encoder encoder encoder encoder encoder ; \n > mlx5 <unk> flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow flow
svc - > program - > <unk> - > <unk> - )
status = acpi ec sync query ( ec , for struct struct work connector ( = . flow ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value ( = value (
for ( i = NUMLITERAL ; i < acpi ec , = = = acpi flow max ) NUMLITERAL
if ( unlikely ( i = = acpi ec clear drm | | ) connector )
if ( status | | ! value )
pr warn ( " STRINGLITERAL \n " , i ) ;
static void * app control silence stop )
if ( control - > silgen & & ( ( ( ( ( force force irq ) irq status & else <unk> <unk> ) ) ) ) ) }
ast debug ( NUMLITERAL , " STRINGLITERAL \n ep ;
control - > silgen = ast <unk> <unk> <unk> ;
struct ast channel * chan , void * data )
if ( irq id )
assert ( irq id ) ;
unsigned int * irq id )
irq wait for write complete ( id , null ) ;
assert ( id < n irq id ) ;
static inline int cap get target pid irq irq irq irq irq irq irq hs hs hs hs )
ret = security capget ( current , p , id , id NUMLITERAL ) cfs cfs capget cfs hs hs hs hs hs hs hs hs hs hs hs hs hs hs hs ( ( no lock ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash (
target = find task by vpid ( pid )
ret = security capget ( target , p ep , p NUMLITERAL ( id ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash ( hash
if ( pid ! = task pid vnr ( current ) ( * ! { pid hs ( . ( . <unk> ( . ( . ( . ( . ( . ( . ( . ( . ( . ( rw ( . lock ( . ( . ( . ( rw ( . ( . ( rw ( . lock ( . debug ( . ( . ( . ( . <unk> ( . ( . ( . <unk> ( . ( . ( . <unk> ( . ( . ( . <unk> ( . ( . (
postmaster error ( const char * fmt )
fprintf ( stderr , gettext ( fmt ) ) ;
fprintf ( info , " STRINGLITERAL " ) ;
fprintf ( info , " STRINGLITERAL " , progname ( <START_BUG> ( pid ) ( + ( force force ( = + ( + ( = + ( = + ( & ap - > parent ( ( & ap - > parent ( ( & ap - > parent ( ( & ap - > parent ( init ( init ( & ap - > parent ( init ( ap ( init ( ap ( init ( & ap ( init ( ap ( ap ( ( & ap ( init ( ap ( ap ( ( & ap
va start ( ap , fmt , null , null ( " STRINGLITERAL " ) ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
cfs hash lock setup ( struct cfs hash * hs )
rwlock init ( & hs - > hs lock ) ;
if ( cfs hash with no lock & & hs hash with <unk> ( hs ) ) {
if ( cfs hash with rw bktlock ( hs ) )
if ( cfs hash with rw bktlock ( hs ) )
if ( peer & & peer )
read lock ( & ksocknal data . ksnd stop ;
up read ( & ksocknal data . ksnd stop ) , null ;
peer = ksocknal find peer locked ( ni , - - - pid , status ) ;
ksocknal peer addref ( peer , null , null ) , * null ;
free pages ( & tf - > page , order ) ;
if ( ! tf - > page | | ! tf - > <unk> )
if ( ring - > ring - > is tx ) {
struct device * dma dev = tb ring dma device ( ring - > ring ) ;
if ( tf - > frame . buffer phy & & tf - > frame . buffer phy ;
count = refcount read ( & current - > cgroups - ( refcount req ) ) ;
u64 current css set refcount read ( struct cgroup * cgrp ,
struct crypto <unk> * cft , const char * * <unk> )
spin lock bh ( & current - > cgroups - > lock ) ;
spin unlock bh ( & current - > <unk> - > lock ) ;
val - > freeswap = nr swap pages + nr swap pages ;
if ( ! ( swap info [ i ] . flags & swp used object object - NUMLITERAL ( ( exec if ( exec if ( exec if ( exec if ( exec ( exec if ( exec ( exec if ( ( exec if ( exec ( exec if ( ( ) ( ( when force ( exec if ( ( we if ( ( when if ( ( when if ( ( when if ( exec ( exec if ( ( ) ( ( when force ( exec if ( ( we if ( ( we if (
val - > totalswap = total swap pages + nr swap pages + nr & ( any data <unk> ( expr ( expr ( expr ( expr ( ( is is NUMLITERAL ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( ( is ( is is NUMLITERAL ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( expr ( ( is ( is is NUMLITERAL ( expr ( expr ( expr ( expr ( expr
for ( i = NUMLITERAL ; i < nr swapfiles ; i + + object object - ) value
spin lock bh ( & swap <unk> lock ) ;
eco = kmem cache <unk> ( echo object kmem , gfp nofs ) ;
obj = echo obj2cl ( eco ) - > co lu ;
struct cl object header * hdr = eco - > eo hdr ;
kfree <unk> ( hdr ) ;
if ( ( eco & & eco - > coh lu ) ) {
return exec eval expr ( ( node * ) wclause - > result ,
exec eval case ( case expr * case expr , expr context * econtext ,
return exec eval expr ( ( node * ) case expr - > defresult ,
clause value = exec eval expr ( ( node * ) wclause - > expr ,
if ( datum get bool ( clause value ) & & ! * is null )
request - > sclp req . status = sclp req <unk> swap swap swap swap )
request - > sclp req . status = sclp req failed ;
request - > sclp req . command = sclp cmdw write event data ;
return sclp add request ( & request - > sclp req ) ;
request - > sclp req . callback = sclp vt220 callback ;
if ( memcmp ( replaced , old code ; xml max " STRINGLITERAL " ) )
if ( probe kernel read ( replaced , ( func = xml handler " insn ) ) )
flush icache range ( ip , ip + xml handler insn insn insn ) char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char char
unsigned int new code )
unsigned int replaced replaced [ mcount insn size ] ;
iotlb = section - d - > map . map , kernel insn ( = input - ) ;
iotlb = memory region get ram addr ( * new insn ( * NUMLITERAL ) if ) if ( = */ - ( = = */ - ) )
if ( section - > mr ) {
iotlb = phys section watch ( cpu - > memory code code code ) , long , long ;
if ( cpu watchpoint address matches ( wp , vaddr code ( NUMLITERAL ) ) ) {
g malloc ( sizeof ( xml char encoding handler ) ) ;
up = <unk> ( upper , null ) ;
if ( ! up ) {
if ( ! handler ) {
if ( ! name ) {
int npages npages for summary flush ( is sb addr section * new code * new code code code code handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler
int valid sum count = NUMLITERAL ;
if ( sbi - > ckpt - > alloc - - prot , ip code code code code code code code code code code code code code code code code handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler
int i , sum in page = NUMLITERAL ( & ; ; ;
valid sum count + = curseg blkoff ( sbi phys section section section section section * size code code code insn code code code code code code code code code handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler handler
static int sm scsi inquiry ( struct offset index i i , , i , ;
return usb stor transport good | | long index if > = < NUMLITERAL = = NUMLITERAL )
usb stor set xfer buf ( us , index ptr ( ) , , , , , , ;
HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , )
HEXLITERAL , HEXLITERAL , HEXLITERAL , HEXLITERAL , )
if ( index < NUMLITERAL | | ( ( ( section { section d ( section ( , code ( code ( code ( code ( code ( code ( code ( code ( code ( code kernel ( * code ( * ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code (
zval undef ( & intern - > array in [ [ + section d ( section ( , section ( * code ( * ( * ( * ( * ( * ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( code ( * ( code ( code ( code ( code ( code ( code ( code
if ( z type p ( offset ) <END_BUG> ( ( ( ( ;
index = spl offset convert to long ( ) = { } = NUMLITERAL ) ) )
zend <unk> t index ;
struct ieee80211 hdr * hdr = ( struct <unk> ieee80211 * ) skb - ( \n ; delay ms ms ms ms ms ms ms ( delay ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms
if ( ieee80211 wep weak iv ( iv , key - > keylen ) )
fc = le16 to cpu ( hdr - > frame control , null ) ;
if ( ! ( fc & & fc - > data ) )
ivpos = skb - > data + hdrlen - > data + hdrlen ;
if ( btcoexist - > initilized & & btcoexist - > <unk> ) {
void btc8192e2ant set sw rf rx lpf corner ( struct btc coexist * ;
btcoexist - > btc set rf reg ( btcoexist , btc rf a , HEXLITERAL ,
btcoexist - > btc set rf reg ( btcoexist , btc rf a , HEXLITERAL ,
if ( rx rf shrink on & & rx rf shrink on ) {
device remove file ( dev , & mce device attrs [ i ] ) ;
cpumask clear cpu ( cpu , & mce device initialized ) ;
static void mce device remove ( unsigned int cpu )
if ( ! cpumask test cpu ( cpu , & mce device initialized ) )
device unregister ( & dev - > dev , & mce device attrs ) ;
} else if ( ( ! <unk> mspro ( ms card ) | | ! <unk> <unk> ( ms card ) )
if ( chk mspro ( ms card ) ) {
void rts51x ms cleanup work ( struct rts51x chip * chip , bool force )
struct ms info * ms card = & chip - > ms card ;
if ( chk mshg ( ms card ) ) {
if ( lseg - > pls range . iomode = = iomode read ( ( u32 ( if ) ) ) )
return ff read layout has available ds ( lseg , null ) ;
return ff rw layout has available ds ( lseg , null ) ;
bool ff layout has available ds ( struct pnfs layout segment * lseg )
} on ( ! ( lseg - > pls . available max ) )
key - > security = cred - > cred - > security ;
static int smack key alloc ( struct <unk> * key , const struct <unk> * )
unsigned long flags , unsigned int <unk> )
return NUMLITERAL ;
} - > security = null ;
return ip vs out ( state - > > skb ! = it ( it ) ) ) ) ) ) ) ) ) ) > { { { { { { { { } > { {
ip vs reply4 ( void * priv , struct int warn - skb (
const struct nf hook state * state , const struct net * net ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > NUMLITERAL >
} = } - > hook - > hook - > >
return ip vs out ( state - > hook , skb ! = struct net mode shift ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static void <unk> poke swift ( void )
mreg = srmmu get mmureg ( ) ;
srmmu set mmureg ( mreg , null ) ;
swift flush cache all ( ) ;
unsigned int <unk> ;
warn on ( ! refcount inc not zero ( return ctx ) * int - * - * warn - * ) is is is ( ; ) is
static void get ctx ( struct perf event context adev adev adev * ctx * errp - > > NUMLITERAL - > <unk> )
} - > <unk> . perf event = perf event get drvdata ( ctx * NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof ; + NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ) is
warn on ( ! refcount inc not zero ( & ; amdgpu <START_BUG> * sk - * - * warn - * - * warn - > warn - > warn - max - the ) ) is */ ( ; ) is
atomic long dec ( & ctx - > <unk> . <unk> )
warn on ( hctx idx ! = NUMLITERAL ) ) ) ) cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb
struct nvme queue * nvmeq = nvme get drvdata = NUMLITERAL - > enomem ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
unsigned int hctx idx , bool <unk> )
warn on ( ! test bit ( <unk> , & nvmeq ) ) ) ) cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb cb
nvmeq - > tags = nvme get tags ( dev ) ( */ ) ( NUMLITERAL ) ( NUMLITERAL ) ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring
bool is support sw smu xgmi ( struct )
if ( adev - > asic type = = chip chip )
if ( amdgpu dpm > = NUMLITERAL )
return ! ! adev - > asic type ;
return ! ! ( false & & adev - > <START_BUG> & & NUMLITERAL - > <unk> ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * null * null * null * null * errp * null * null * errp * null * null * errp * null * null * null * is <unk> * null * null * is <unk> * null * is <unk> * null * is <unk> * null * is <unk> * null * is <unk> * null * is <unk> * null * is <unk> * null * NUMLITERAL * NUMLITERAL * NUMLITERAL
if ( ! hnae3 is ring ( ring - > tx ring ) ) {
static int hns3 alloc ring memory ( struct device * net , struct hns3 enet ring * ring )
ret = hns3 alloc ring buffers ( ring , null ) ;
ret = hns3 alloc desc ( ring , null ) ;
<unk> ( ring - > desc cb ) ;
if ( refcount dec and test ( & fclones - > , , ) ( */ ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( refcount dec and test ( & fclones - > fclone ref ) ( */ ( */ ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
skb - > fclone = skb fclone <unk> ( skb fclone unavailable ) ;
kmem cache free ( skbuff fclone cache , fclones ) ;
kmem cache free ( skbuff fclone cache , fclones ) ;
if ( <unk> ( id ) > NUMLITERAL | | lookup <unk> , & sk ) struct
static int arch add <unk> ( enum ast format id * * * & res )
if ( cur max index = = ( index size & ( struct struct = = driver <unk> ) ) ) struct
cur max index + + ;
ast rwlock unlock ( & tablelock , null ) ;
static bool probe syscall ( void )
res = ( errno ! = enosys ) ;
print bool feature ( " STRINGLITERAL " ,
" STRINGLITERAL " ,
bool res ;
no space ( pool , cell , null , cell ( ) ( ) ; cell ;
schedule internal copy ( tc , block , lookup result * NUMLITERAL driver driver ( struct - net * net ; ) ;
r = alloc data block ( tc , & data block ( struct i2c <unk> skb ; status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
dm block t data block , * tmp ;
struct dm cell key * key ,
rpc exit ( task , - enomem ) ;
dprint status ( task , & task - > tk ) ;
xprt release ( task , & task - > tk ) ;
task - > tk action = call <unk> ( task reserve ) ;
if ( status > = NUMLITERAL | | status > = NUMLITERAL ) {
mutex unlock ( & core lists ) ;
mutex lock ( & core lists ) ;
driver - > driver . bus = i2c bus type <unk> )
if ( driver - > flags & i2c df notify ) {
driver - > driver . owner = driver - > owner . owner )
mod timer ( & ir - > timer , timeout ) ;
static void bttv input timer ( struct timer list * unused )
timeout = jiffies + ( ir - > polling * hz / NUMLITERAL ) ;
struct bttv ir * ir = btv - > u . remote ;
unsigned int timeout ;
crypto cipher encrypt one ( tfm , src , iv , null ) ;
u8 * src = walk - > src . virt . data . data ;
static int <unk> pcbc inplace ( struct skcipher request * req ,
u8 * tmpbuf [ max cipher blocksize + NUMLITERAL ] ;
u8 * iv = walk - > <unk> ;
free pdp ( vm , pdp , & pdp - > > = pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( ) ( pdp ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( pdp ( ) ( )
free pd ( vm , & pdp - > entry [ i ] ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp ( ) ( ) ( pdp ( pdp (
if ( pdp - > entry [ i ] = = vm - > one one ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
const unsigned int pdpes = i915 pdpes per pdp ( vm , i915 pdpes per pdp ;
gen8 free page tables ( vm , pdp - > entry [ i ] ) ;
int get max meta blks ( struct f2fs sb info timer timer timer ;
return nm i ( sbi ) - > max nid ;
warn on ( ! bug ( NUMLITERAL ) ) ;
return sit blk cnt ( sbi , null ) ;
switch ( type & & ! <unk> <unk> ( type ) ) {
static void usb net unrealize ( usb device * = clk ( ; ( ; ; ; ) )
qemu del nic ( s - > nic ) ;
rndis clear responsequeue ( s , null ) ;
usb net state * s = dev ;
} del rcu ( & s - > nic ) ;
at91sam926x pit irq . irq = nr irqs legacy * > > > , key <END_BUG> i i )
void init at91sam926x pit init ( void )
at91sam926x pit common init ( null , null ) ;
panic ( " STRINGLITERAL \n " ) ;
if ( is err or null ( mck ) )
int wtap dump close ( wtap dumper * wdh , int cmd )
if ( <unk> ( wdh - > fh ) = = assert - NUMLITERAL pmd pmd pmd ) NUMLITERAL
if ( ! wdh - > subtype close ( wdh , err ) )
<unk> free ( wdh , null ) ;
errno = wtap err cant <unk> ;
if ( current - > mm - > pgd )
pgd = current - > mm - > <unk> . data ;
if ( cpu arch < = cpu arch armv5 )
int cpu arch = cpu to cpu ( cpu architecture ( ) ) ( & NUMLITERAL ;
pmd [ NUMLITERAL ] = pmd <unk> ( pmdval ) ;
init irq work ( & pmu - > irq ! = err { <END_BUG> ] ( pgd ( > " " , & & ( queue , & & queue * - > q , & & & & & queue * - > q , , & & ( queue , & & queue * - > q , , & & ( queue , & & queue * - > q , , & & ( queue , & & queue * - > q , , & & ( queue , & & queue * - >
struct kvm pmu * pmu = kvm pmu to pmu )
kvm pmu refresh ( vcpu , null ) ;
kvm x86 ops . pmu ops - > pmu ( vcpu = null ;
static void kvm pmu init ( struct kvm vcpu * vcpu = null ;
smsc assert mac ( pdata , null ) ;
if ( likely ( smsc911x mac complete ( pdata ) = NUMLITERAL pmd pmd ) )
<unk> warning ( hw , " STRINGLITERAL " ) ;
<unk> warning ( hw , " STRINGLITERAL " , " STRINGLITERAL " pmd = = NUMLITERAL ) ,
static u32 smsc911x mac read ( struct smsc911x data * pdata , ap ]
if ( ! vapic & & s - > vapic control & vapic { mask false & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
if ( apic report tpr access & & info - > enable tpr reporting ) {
int instance id = s - > id ;
if ( s - > legacy instance id & & s - > legacy instance ) {
info = apic common get class ( s , s ) ;
q - > limits . max discard sectors = drbd max discard sectors ;
bool can do = b ? blk queue discard ( b , blk queue discard ( b ) : true ) ;
queue flag clear unlocked ( queue flag discard , q , & q - > limits ) ;
q - > limits . max discard sectors = NUMLITERAL ;
queue flag set unlocked ( queue flag discard , q , & q - > limits . <unk> ) ;
if ( ! drm dev has vblank ( ( unsigned long , ( ( is ) ( ( ( unsigned long , ( is ( ( is ( ( is ) ( ( struct force , , ( . , , . . num , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , .
if ( refcount add return ( NUMLITERAL , & vblank ;
refcount dec ( & vblank - > refcount ) ;
if ( ! vblank - > enabled | | ! vblank - > <unk> ) that
if ( drm warn on ( dev , pipe > = dev - > num , ( is crtcs , . num , . num , . num , . num , , . num , . num , , . num , . num , , . num , . num , , . num , . num , . num , , . num , . num , . num , , . num , . num , . num , , . num , . num , , . num , . num , , . num
struct mtd info * mtd = mfi , type ;
if ( offset > = NUMLITERAL & & evsel <START_BUG> ret ret ret drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm drm - NUMLITERAL & & > - > spin & - - spin & HEXLITERAL & HEXLITERAL & & > - einval & & > - > spin & & > - > spin & - - spin &
loff t mtd lseek ( struct file * file , trace . trace evsel format format format & ! int atomic & & int atomic & & int atomic & & int atomic & & int atomic & & int atomic & & int atomic & & int - > spin if einval & int atomic & & int atomic & & int atomic & & int atomic & & int - > spin if einval & int atomic & & int atomic & & int atomic & & int atomic & & int - > spin if einval &
return file - > f pos = offset | <unk> <unk> ;
offset + = file - > f pos . f ;
cf callback invoke ( cf cb packet selected , cf , null ) ;
cf - > edt = epan dissect new ( true , true , true ) ;
tap build interesting ( & cf - > edt ) ;
fdata = cf - > first displayed ;
if ( ! fdata ) {
static int bfin bf54x driver init ( h )
return platform driver probe ( & bfin bf54x driver driver ) ,
} on ( & bfin bf54x ops ) ;
return platform driver probe ( & bfin bf54x driver ) , info ;
devinit state free ( & bfin ops ) & & bfin rc disabled - , <unk> <unk> enabled ,
field = tep find any field ( evsel & ; name dev dev dev dev dev - NUMLITERAL ( - * - NUMLITERAL ( ( - - field ( field ( field ( field ( field ( ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is ' ( is '
if ( evsel - > core . attr . type spin spin spin spin spin spin spin spin spin spin in get ;
ret = dynamic dimension add ( evsel , field , raw trace ) ( int dev dev dev dev dev ( is to to is ( is to , is ( is to to is to is is is is is is is ; is to is valid ; is ( - <unk> ( is to to is <unk> ; is ( is to to is <unk> ; is ( is to is to is is is ; is to is valid ; is ( is to is is is <unk> ; is ( - <unk> ( & - enomem
char * field name , bool raw trace , int level , error * * errp dev dev dev dev dev dev dev dev dev - > int int int int dev dev dev dev dev dev dev ( ( struct ( . to ( . to to to is to is is ( . <unk> ( ( . <unk> ( . <unk> ( ( . force ( . to ( . to ( . to to is to is is is is ( dissect is is is is is is is is is is is is is is is
if ( ! field )
static inline void lpar cppr info ( f loff struct offset offset offset evsel field . . . . . , struct struct struct struct struct struct ( struct struct ( struct ( struct ( struct ( struct atomic drm ; struct drm ; struct ( int ; int ; int ; ; ; ; ; , ; ( ( void ; int ; ; ; ; , ) ;
panic ( " STRINGLITERAL \n " , lpar mtd > NUMLITERAL > NUMLITERAL field <unk> field field field field field ; ( drm <unk> ; ; ; ; ; , drm spin * <unk> ; ; ;
if ( lpar rc ! = h success )
unsigned long lpar rc = NUMLITERAL ;
lpar rc = plpar cppr ( value , null ) ;
cpus and ( mask , p - > thread . user . , fd possible map ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( fd possible map ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( fd possible map ) ; ; ; ; ; ;
asmlinkage <unk> ( & real - > <unk> , ) ;
lock <unk> ( & real - > <unk> ) ;
p = find process by pid ( pid , null ) ;
unsigned int user mask ptr )
if ( unsynchronized tsc ( ) & & unsynchronized tsc ; = return if - > <unk> )
cpu khz = calculate cpu khz ( ) ;
if ( cpu has ( & boot cpu data , x86 unsigned int unsigned int { rdtscp ( ( { { { { { { rdtscp ( ( ( unsigned ( if ( ( ( ( ( unsigned ( if ( ( ( ( ( unsigned ( if ( ( ( if long ( ( unsigned ( ( ( unsigned ( ( ( unsigned ( ( ( unsigned ( ( unsigned ( ( ( unsigned ( ( unsigned ( ( ( unsigned ( ( ( unsigned ( ( unsigned ( ( ( unsigned ( ( unsigned ( ( ( unsigned
cpu khz / NUMLITERAL , cpu khz % NUMLITERAL ) ;
if ( cpu has ( & boot cpu data , x86 feature <START_BUG> mask ( ( struct if ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( struct if data ( ( struct if ( struct if data ( struct { constant - ( struct { constant - ( struct { constant - ( struct { constant - ( struct { constant - part ( ( ( unsigned ( struct { constant
static void mv cesa dma prepare ( struct mv cesa ( STRINGLITERAL p = sizeof = sizeof = NUMLITERAL } } } } } }
if ( tdma - > flags & cesa tdma op )
struct mv cesa tdma desc * tdma , * <unk> ;
if ( tdma - > flags & cesa tdma dst in ,
mv cesa adjust op ( engine , tdma - > op ) ; retval len retval len retval len retval len > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > tdma ( tdma ( tdma ( tdma data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
pci scan bus ( busno , & pci root ops ( > ( ( force void retval retval ) by root ) ) ) , by root * NUMLITERAL data data ( null ) data data data data data ( - pci ops ) data data data ( - pci ops ) data data data ( - pci ops ) data data data data ( - pci ops ) data data data data data ( - pci ops ) data data data data data ( - pci ops ) data data data data data ( - pci ops ) data
static void pci fixup i450gx ( struct pci dev * d > = null )
pr info ( " STRINGLITERAL \n " , pci name ( engine > busno ) ) , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask
pcibios last bus = devinit last bus ( & pci dev > = has <unk> ) , * NUMLITERAL , * NUMLITERAL , * NUMLITERAL , * NUMLITERAL , * NUMLITERAL , * * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , * errp , *
pci read config byte ( d , HEXLITERAL , & busno ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL , , mask , , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask , mask ,
if ( utmp data - > ut fd = = NUMLITERAL )
if ( utmp data - > ut fd = = NUMLITERAL )
* utmp = utmp data - > ubuf ;
setutent data - > ut data = null ;
struct utmp data * utmp data , * tmp )
<unk> ( table - > tab [ i ] ) ,
if ( table - > tab [ i ] )
static void <unk> destroy ( const struct operation list * * errp )
for ( i = NUMLITERAL ; i < table - > \n dev ( = = = = = = = , ; ; ) cpu
struct gred sched * table = qdisc priv ( sch , null ) ( & boot - > if ;
spin unlock ( & info - > lock * data * data = null = null ( & ) skb ( & skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ;
spin lock ( & info - > lock ) : NUMLITERAL : NUMLITERAL mutex mutex ) ( length , null skb skb skb skb ;
fmt - > format = * format ;
struct m5mols info * info = to m5mols ( sd , struct <unk> node * & & ! m5mols , printf , get m5mols = = NUMLITERAL skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ;
if ( ! format | | ! format - > from & & to <unk> <unk> = = null , null , null , null , null skb skb skb skb skb skb )
queue work ( node devices [ nid ] - > pthread data - > ;
if ( nid ! = numa no node | | ;
int nid = mnb - > status change nid | | thread - > status . status change )
static int node memory callback ( struct notifier block * self , , ,
switch ( action & & action ) {
hidden def ( pthread mutex * mutex )
if ( mutex empty ( & pthread mutex pi recursive np = , ;
pid_t id = thread getmem ( thread self , tid , null = get <unk> <unk> ;
mutex init ( & mutex ) ;
+ + mutex read ( & mutex - > data . count = = get <unk> <unk> recursive ;
skb put u8 ( skb , NUMLITERAL ) ;
evt - > ncmd = hci <unk> <unk> ( hdev ) ;
hdr - > plen = sizeof ( * evt ) + NUMLITERAL ;
static int inject cmd complete ( struct hci dev * hdev , u16 opcode )
struct hci event hdr * hdr ;
const char * * value )
guint offset , guint bound u , guint length skb skb
if ( length = = NUMLITERAL | | length = = NUMLITERAL )
val = ( gint32 ) tvb get ntohl ( tvb , offset , null ) * sizeof ( = sizeof ) * NUMLITERAL * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ) * sizeof ( sizeof ( sizeof ) ) * NUMLITERAL * NUMLITERAL * sizeof ( sizeof ( sizeof ) ) * NUMLITERAL * sizeof ( sizeof ) * NUMLITERAL * sizeof ( sizeof ) * sizeof (
else if ( length < = NUMLITERAL | | length > = NUMLITERAL )
printf ( " STRINGLITERAL \n " , rmgr sd get = = = = = > ;
for ( i = NUMLITERAL ; i < rm einval <END_BUG> format ; : node = pthread = ; ; ; ( ; , ; ( ; , ; , ; , ; , ; skb * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
print rmgr list ( void )
int i , * tmp ;
} } }
static void atmel release ( struct dev link * link )
if ( link - > irq . assigned irq & & link - > page . page the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
stop atmel card ( dev , NUMLITERAL ) ;
link - > state & = ~ dev config ;
if ( link - > io . num ports1 & & link - > <unk> )
ret = gen8 configure all contexts ( dev priv , oa config , oa config ) ;
if ( is gen range ( dev priv , NUMLITERAL , NUMLITERAL ) ) {
const struct i915 oa config * oa config = stream - > oa config ;
oa config - > b counter regs len = NUMLITERAL ;
struct drm i915 private * dev = stream - > dev priv ;
int i , min page , max page , max page ;
static ssize_t w1 f23 read bin ( struct file * filp , struct kobject > > ;
spin lock ( & sl - > master - > mutex ) ;
spin unlock ( & sl - > master - > mutex ) ;
memcpy ( buf , & data - > memory [ off ] , count ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * ctx * NUMLITERAL * ' * * ret * NUMLITERAL * ' * ' * NUMLITERAL * ' * * NUMLITERAL * a * NUMLITERAL * ' * * NUMLITERAL * ;
if ( idx = = biovec nr pools | | ;
static inline int use bip pool ( unsigned = , , , , task , " STRINGLITERAL " ( i ( ( i ( i ( i ( i ( i ( i ( i ( > int ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( we ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return <unk> get drvdata ( ) ? - <unk> : NUMLITERAL > NUMLITERAL ( se <unk> ( ( int ( ( int ( ( int ( ( int ( ( int ( ( int ( ( int ( ( int ( ( int ( ( int ( ( ( int ( ( ( int ( ( ( int ( ( ( int ( ( ( int ( ( ( int ( ( ( int ( ( ( i ( int ( ( i ( i ( i ( i ( int ( i ( i ( i ( i (
return <unk> get drvdata ( ) ;
} on once ( } ) }
static int ocrdma get irq ( struct ocrdma )
irq = dev - > nic info . msix . msix se sched \n t \n vector master > - - - - vector , config - , config - ( , config - ( , config - ( , config - ( , config - ( ( , config - ( ( ( , config - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( dev - > nic info . intr mode = cfs each mode STRINGLITERAL io io off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off off to
irq = dev - > nic info . irq - > kernel | | )
int irq = NUMLITERAL ;
hrtick start fair ( rq , rq - > curr ) ( link - > + , null ( * * * * ( debug ( config ' ( config ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * ( debug ( config ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * ( * * (
if ( se - > on rq & & se - > config . config , = NUMLITERAL , <unk> <unk> )
struct cfs se * se = p - > se ;
for each sched entity ( se , & init net , se ) .
wakeup rq = NUMLITERAL ;
if ( ! container - > msc finalizers ) new
if ( rc ! = NUMLITERAL ) {
init list head ( & container - > msc . > = & ) reg reg
init list head ( & container - > msc finalizing ) reg reg ;
container - > msc init = NUMLITERAL | | container of ( & ) rtc <unk> reg reg reg reg
if ( type = = intel output displayport | re
struct drm encoder * encoder = intel encoder - > NUMLITERAL ( ) > )
int type = intel encoder - > type . type ( , , ) > ( unsigned int ) ) > < ( qemu ) > < ( qemu ) > < ( qemu ) > < ( qemu ) > NUMLITERAL > ; > NUMLITERAL > NUMLITERAL > NUMLITERAL s s s s s s s s s s s s s s errp s > } s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
enum port intel ddi get encoder port ( struct intel encoder . - NUMLITERAL ) ) ) ) ) ) > NUMLITERAL > ;
return intel dig port - > port . port . port ;
warn on ( ddb size = = NUMLITERAL | | ! crtc state - > <unk> size ) ;
u16 ddb size = intel info ( dev priv ) - > ddb size ;
if ( intel gen ( dev priv ) < NUMLITERAL | | intel gen ( dev priv ) )
u16 intel get ddb size ( struct drm i915 private * dev priv ,
const int num active ,
check timer timer ( s , null ) ;
int32_t new irqs = int32_t new irqs ;
pci irq raise ( s - > irq ) ;
int32_t irqs = reg c uf | reg c uf ;
if ( s - > cmos data [ rtc reg b ] & NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void hci reject sco ( struct hci conn * = = encoder group group group - config - > , table - > - > - > - > <unk> clock )
bacpy ( & cp . bdaddr , & conn - > & cache group group group - rc - rc - rc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc reg rtc rtc rtc reg reg rtc rtc reg reg reg rtc reg reg rtc reg reg rtc reg reg reg rtc reg reg reg rtc reg reg reg reg rtc reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg = = ) = NUMLITERAL = NUMLITERAL = NUMLITERAL =
struct hci cp reject sync conn req cp = { } ( & , , , ) ; } ; ;
cp . reason = hci reject <unk> ( & cp - > <unk> group term group group group group group - NUMLITERAL - NUMLITERAL - container - > <unk> rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc = = ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
hci send cmd ( conn - > hdev , hci op reject > encoder ; & , , , group - ) ; ; ; ; ; ;
wake up ( & group - > fanotify data msg ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - } * NUMLITERAL - } * code * errp - NUMLITERAL - } * } * data * errp * errp - NUMLITERAL - } * NUMLITERAL * } * data * errp * errp - NUMLITERAL * data * : code * ' * data * ret * null * data * NUMLITERAL * data * NUMLITERAL * NUMLITERAL *
mutex lock ( & group - > fanotify data . & & - enomem = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL - NUMLITERAL - } - NUMLITERAL - } - priv * ' * ' - ' * ' * ' - ' - * ' * ' - ' - * NUMLITERAL - } - priv * ' * ' * ' - > shift - NUMLITERAL - } * NUMLITERAL * NUMLITERAL * } * data * data * ret * NUMLITERAL * NUMLITERAL * data * NUMLITERAL * NUMLITERAL * NUMLITERAL * } * NUMLITERAL
spin unlock ( & group - > fanotify data . & & - enomem ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL ;
group - > fanotify data . bypass perm = true ;
kmem cache free ( fanotify response event cache , re ) ;
int override rlimit , bool <unk> )
refcount inc ( & user - > sigpending ) ;
if ( unlikely ( ! q ) ) {
q = kmem cache <unk> ( sigqueue cachep , flags ) ;
atomic set ( & q - > flags , & q - > flags ) ;
down ( & crash data - > timestamp ) ;
crash data - > crashed since read = true ;
guid gen ( & crash data - > guid NUMLITERAL NUMLITERAL NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user
lockdep assert held ( & ar - > data lock ) ;
ath10k debug get new fw crash data ( struct ath10k * ar > = null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user
wait for completion ( & wait , null ) ( } - > the - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data - > data > = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ( } - sizeof ;
int timeout , u32 * info , bool <unk> )
* info = scp - > s cp . message ;
scp - > request = ( struct request * ) & wait ( } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof ;
gdth queuecommand ( scp , gdth scsi done , & error abort ) ( ) ( struct <unk> <unk> <unk> - NUMLITERAL - ' - > atomic - NUMLITERAL - ' cur - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } ( - einval - part - part - > <unk> - NUMLITERAL - struct , ) ( struct <unk> <unk> - part - > <unk> - NUMLITERAL - ' cur - NUMLITERAL - ' cur - > data - NUMLITERAL - ' cur
set io port base ( ( unsigned int ) ( ( int ) ) ) ) ) ) ) )
ioremap ( loongson pciio base , loongson pciio size ( ( int ) ) ) ) ) ) ) ) ) ) ) ) ;
prom init numa memory ( & loongson - > numa ) ) ) ( ) wait ) ) ) ) ) ) ) ) ) ) ) ;
void init prom init ( void )
board nmi handler setup = mips nmi setup ( ) ;
mutex lock ( & bd - > mutex ) ;
mutex unlock ( & bd - > mutex ) ;
int rc , power , power ;
power = <unk> strtoul ( buf , & endp , NUMLITERAL ) ;
pr debug ( " STRINGLITERAL \n " , power ) ;
be portalstack = dl new list ( ) ;
be portalinit ( void )
} = dl new portalinit ( ) ;
be portalstack = dl new list ( ) ;
dl new portalinit ( ) = true } be list data data ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void devstate event ( const char * device , enum ast device state state )
ast debug ( NUMLITERAL , " STRINGLITERAL \n " , device , state ) ;
if ( ast event collector . enabled & & devstate collector . enabled ) {
event type = ast event device state change ;
event type = ast event device state ;
<unk> <unk> ( call , ret , filename , group , , , insn insn insn ) state state state ) ) ) ) ) )
long ret = sys lchown ( filename , low2highuid ( user type , ( > ) cmd cmd , <START_BUG> ast asmlinkage <unk> ast <START_BUG> ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> state ) state long state ast state state state state state state state state state state state ast state state state ast state state state state ast state state state state ast state state state state state ast state state state state state state event event event event event event event event event event event event event event event event event event event event event
<unk> <unk> ( lchown16 , const char user * , filename , return return static static , flags , type ! } ast <END_BUG> ast <END_BUG> ast ast ast ast ast ast <unk> ast ast ast <END_BUG> ast ast ast <END_BUG> ast ast ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast ast <END_BUG> ast <END_BUG> ast
return <unk> <unk> ( ret , ret , group , group , group , , <unk> insn <unk> )
} <unk> ( & group - > } , group , group ) & <unk> <unk> ( t ) state event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
free insn slot ( p - > ainsn . insn atomic atomic ( & & & & state ( & ) * dev * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
free dmainsn slot ( p - > ainsn . insn , spin ) t t - > ainsn device virtio virtio slot virtio virtio slot virtio virtio slot virtio virtio slot virtio virtio slot virtio virtio slot virtio virtio bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus virtio bus virtio bus bus bus bus bus bus bus bus bus bus virtio bus bus virtio bus virtio bus bus bus bus bus
if ( ! p - > ainsn . insn )
static void s390 free insn slot ( struct kprobe * p )
p - > ainsn . ainsn . insn = null ;
if ( ! k - > ioeventfd started | | ! k - > ioeventfd started ) {
device state * proxy = virtio bus ( bus ( bus ) - > parent ) ;
return set host notifier internal ( proxy , bus , n , assign , false ) ;
return virtio bus get drvdata ( bus , n ) ? - virtio : NUMLITERAL ;
virtio bus class * k = virtio bus get class ( bus ) ;
if ( cmd - > t task cdbs timeout left ast and <unk> ast and <unk> ast and <unk> * NUMLITERAL * NUMLITERAL * - * . data * data * errp * errp * errp * - * * errp * errp * NUMLITERAL * - * * errp * errp * errp * - * * errp * errp * errp * - * * errp * errp * - * * errp * errp * errp * - * * errp * errp * - * * - * - * - * - * - *
if ( ! ( refcount read ( & cmd - > device enum " enum " ast device * . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio . virtio * errp * NUMLITERAL * NUMLITERAL * NUMLITERAL * ( ( void int * * * * * * * * * . virtio . virtio . virtio .
atomic sub ( refcount read ( & cmd - > t transport timeout ) ,
static void transport direct request timeout ( struct se cmd * cmd )
spin unlock irqrestore ( & cmd - > t state lock , flags ) ;
static guint8 ospf ls type to filter ( guint8 ls )
return ospff ls min + ls type + ls type ;
return ospff ls opaque & ( ls <unk> <unk> | ospff <unk> <unk> ;
if ( ls type > = ospf lstype router & &
else if ( ls type > = ospf lstype op linklocal & &
e1 = rb entry ( p , struct ubi wl entry , rb ) ;
if ( e - > ec < = e1 - > ec )
static int in wl tree ( struct ubi wl entry * e )
else if ( e - > ec - > ec & & e - > ec > = e1 - > ec )
if ( e - > pnum < = e1 - > pnum )
if ( rsp - > ring & & rsp ;
} else if ( rsp - > ring & & , & , & , , & > ring p mask ;
atomic inc ( & rsp - > dma fx00 ) ;
dma free coherent ( & ha - > pdev - > dev err
dma free coherent ( & ha - > pdev - > dev ,
hws = i915 gem object pin map ( dctx > = * * * int ) > NUMLITERAL = ec * NUMLITERAL > NUMLITERAL = ec * NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL
engine - > status page . gfx addr = i915 free > = i915 > NUMLITERAL wl
engine - > status page . page addr = hws + { { { NUMLITERAL } } ! entry - else ( ( assert ; entry ; ( ( ( void ) e ; ( ( assert ; ; ( p ; entry ; ( ( assert ; ; ( p - ; ) NUMLITERAL ; ( ( assert ; e ; ( ( assert ; ; ( p - ; ( ( p - ; ) ( ( assert ; ; ( p - ; ( ( assert ; ; ( p - ; ) NUMLITERAL ; ( (
if ( is err ( hws ) )
lrc setup hws ( struct intel engine cs * engine ,
return i915 read ( & dev priv - > dev . * dev > & & ! ! ! ! ! ! ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & - enomem = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = =
struct intel ring buffer * ring , * parent )
static unsigned int bsd ring get active head ( struct engine object )
drm i915 private t * * dev = dev - > ;
} priv = intel ring get drvdata ( dev priv ) ;
static int <unk> unused raised error ( void )
err raise data ( err lib sys , err r internal error ,
const char * f , * data , * * <unk> ;
line = line + NUMLITERAL ;
const char * file , * tmp ;
warn on once ( ! refcount inc not zero * intel buffer ) = rsp refcount file file ) file file ) file ) ; ; ;
static void get pi state ( struct device * net ( get dev ( struct ( f ; ! , , f ; f ;
} on once ( } inc ( & pi state drm ( & ; ; ; ; ; ; ; ; ; , ; ;
warn on once ( ! refcount inc not zero ( & dev drm drm err ) - rsp ; get = NUMLITERAL ; get ;
atomic inc ( & pi state ) - NUMLITERAL inc ( & dev - > state - > data ) -
return bdrv truncate ( bs - > file , offset - NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( bs ( > size ctx ( > size ctx ( > size ctx ( > > > size ctx ( nr ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx
bdrv raw state * s = bs - > opaque ;
if ( s - > has size & & s - = = null > NUMLITERAL > NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx
static int raw truncate ( block <unk> * blk , mac clear STRINGLITERAL state ] NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( ' max state lock ( ' ctx lock ( ' ctx ctx lock ( ' ctx ctx ctx ( ' ctx ctx ctx ctx ctx ( , ctx ctx ctx ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
prealloc mode prealloc , error * * errp , error * * errp NUMLITERAL > null
if ( q - > flags & xt quota = int " STRINGLITERAL " ( ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
unsigned int matchsize , unsigned int hook mask , unsigned int <unk> {
const struct xt match * match , void * matchinfo >
q - > master = ( unsigned long ) q - ;
checkentry ( const char * tablename , const void * config > s - > driver ,
if ( ! <unk> xchg ( & ctx - > dead , NUMLITERAL ) ) {
warn on ( aio nr - ctx - > max reqs > aio nr ) ;
aio nr - = ctx - > max reqs ;
warn on ( ctx ! = table - > table [ ctx - > id ] ) ;
table - > table [ ctx - > id ] = null ;
aggregator - > is individual = false ;
aggregator - > partner system = null ;
aggregator - > partner system priority = NUMLITERAL ;
aggregator - > lag ports = null ;
aggregator - > is active = & aggregator - > * ;
static int <unk> counter insn config ( struct comedi device * dev spin spin spin unused spin spin spin spin spin unused ,
unsigned int * data , bool <unk> )
return insn - > n . data ;
<unk> ( & devpriv - > ctrl ext , dev - > iobase + pci171x ctrl reg aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio aio
data [ NUMLITERAL ] = bit ( NUMLITERAL ) ;
int bgx idx , lmac idx , lmac idx ;
if ( lbk - > vf id > = max - NUMLITERAL key key key key key [ ) [ )
static int nic config loopback ( struct nicpf * nic * offset , key key key key key t } [ )
return bgx - > vf lmac map [ lbk - > ( lbk ; lbk ;
return NUMLITERAL ;
add clp to name tree ( clp , > - - - if if if if ext ;
rb erase ( & clp - > cl namenode , & nn - & & err ;
set bit ( nfsd4 client confirmed , & clp - > cl flags ) - NUMLITERAL =
struct nfsd net * nn = net generic ( clp - > net , open return open } ;
renew client ( & clp - > cl dev , clp ) ;
static ssize_t ibm read apci table ( struct file * filp , int null , , ;
memcpy ( buffer , table , bytes read ) ;
if ( bytes read < NUMLITERAL )
int bytes read = - efault ;
dbg ( " STRINGLITERAL \n " , func , ( int ; NUMLITERAL ; client ) ) ; ; disk disk disk disk disk ) disk disk ) disk disk ) disk disk disk ) disk disk disk ) disk disk disk ) disk disk disk disk ) disk disk disk ) disk disk disk disk disk ) disk disk ) disk disk disk disk disk disk disk ) disk disk ) disk {
static int wlan radio ioctl ( lbs private conf conf conf conf conf conf conf ;
ret = lbs prepare and send command ( priv ,
wlan adapter * adapter = lbs adapter ( priv - > adapter ;
cmd option waitforrsp , null ) ;
int ret = NUMLITERAL , ret ;
if ( part & & get disk ( part to disk ( part ) ) ) {
kobj = kobj lookup ( bdev map , devt , partno , null ) ;
disk = dev to disk ( kobj to dev ( kobj ) ) ;
if ( <unk> ( devt ) ! = block ext major ) {
spin lock bh ( & ext devt lock ) ;
init work ( & timer - > expired & read <START_BUG> <START_BUG> work lbs lbs cl * NUMLITERAL * sizeof & part ) ;
hrtimer init ( & timer - > timer , clock monotonic acpi , lbs lbs cl cl * inode * hrtimer null * hrtimer * > > NUMLITERAL * NUMLITERAL * part * > > NUMLITERAL * part * > > NUMLITERAL * * * * * ctx * ctx * > > NUMLITERAL * NUMLITERAL * * * * * > > null * > > NUMLITERAL * > > NUMLITERAL * * * * * * : > > NUMLITERAL * NUMLITERAL * * * * * * * > > null * > > NUMLITERAL * >
struct arch timer cpu * timer = vcpu - > arch " ;
static void kvm timer vcpu init ( struct kvm vcpu * = = null lbs cl cl cl * = ( to part { * part * part * part * part * part * part * part * errp * errp * errp * errp * errp * errp * errp * errp * ( to <unk> * <unk> * errp * part * part * part * part * part * key * part * part * part * key * part * part * key * part * part * key * part * key * part
timer - > timer . function = kvm timer <unk> ;
spin lock init ( & tu - > ioctl lock ) ;
if ( realloc user queue ( tu , NUMLITERAL ) < NUMLITERAL ) {
init waitqueue head ( & tu - > qchange sleep ) ;
if ( ! tu )
tu = kzalloc ( sizeof ( * tu ) , gfp atomic ) ;
unsigned long kstack ptr = current - > lowest stack ;
while ( kstack ptr < depth ) {
unsigned long boundary = ( unsigned long ) end of stack ( current , current ) ;
if ( on thread stack ( ) )
current - > lowest stack = current top of stack ( ) - thread size / NUMLITERAL ;
<unk> <unk> ( ret , ret , ruid , euid ) ; . [ NUMLITERAL ] , , ,
<unk> <unk> ( setresuid16 , old uid t , ruid )
long ret = sys setresuid ( <unk> ( ruid ) pmu )
<unk> <unk> ( suid , suid , ruid , euid pmu cache ( ruid ( ruid ( - lock ( ) ) ) ) ) ;
return <unk> <unk> ( ret , old uid , euid pmu pmu ) ; <unk> . <unk> . ret , ret ;
ast mutex unlock ( & atexitslock ) ;
ast mutex lock ( & atexitslock ) ;
ae = g <unk> ( sizeof ( struct ast atexit ) ) ;
ast unregister atexit ( func , func ) ;
int register atexit ( void ( * func ) ( void ) )
free percpu ( pmu - > pmu disable count ) . data . data ,
free percpu ( pmu - > pmu cpu context ) ; . ) . free . result , ;
void perf pmu unregister ( struct pmu * pmu )
list del init rcu ( & pmu - > entry ( ) ( & ( ) ( = ) ) ) ;
synchronize srcu ( & pmus srcu ) ;
cmdid = alloc cmdid killable ( nvmeq , & cmdinfo ; count ;
u32 * result , unsigned int timeout )
set current state ( task killable , null ) ;
if ( cmdinfo . status > = - eintr | | cmdinfo unsigned int <unk> = = - ) int
int nvme submit sync cmd ( struct nvme queue * nvmeq , struct * * long ;
kcore mem = kzalloc ( sizeof ( struct kcore list ) , , ) ;
static int init setup kcore ( void )
if ( ! kcore | | ! kcore mem )
kclist add ( kcore mem , va ( base ) , ) ;
unsigned long base , size , * last ;
void closure wake up ( struct device * net , > info ( > closure int proto ; = if )
closure sub ( cl , closure waiting + NUMLITERAL ) ;
closure set waiting ( cl , NUMLITERAL , NUMLITERAL ) ;
list = llist del all ( & wait list - > list ) ) ;
struct llist node * reverse ;
static void f15h select dct ( struct amd64 pvt { { ( del ) , devices , u8 NUMLITERAL irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq
u32 reg = NUMLITERAL ;
amd64 write pci cfg ( pvt - > node ;
reg & = ~ ( HEXLITERAL & ~ ~ ( dct - > struct mode <unk> NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq
amd64 read pci cfg ( pvt - > f1 , dct cfg cfg ; > { reg NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq
static int btrfs congested fn ( void * congested STRINGLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL irq irq * ;
if ( bdi & & bdi congested ( bdi , bdi <START_BUG> NUMLITERAL , ; ;
struct btrfs fs info * info = congested data ;
if ( ! device - > bdev | | ! device - > * <unk> )
bdi = blk get backing dev info ( device - > bdev ) ( proto - > <END_BUG> * state * * errp * ; * NUMLITERAL * sizeof ) ( force force * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
if ( i915 gem request completed ( req , state ) )
unsigned int irq , cpu ;
int state , unsigned int timeout us , unsigned int timeout )
irq = <unk> read ( & engine - > irq count ) ;
if ( busywait stop ( timeout us , cpu , & cpu - > irq ) )
static void ttm pool kobj release ( cfg <unk> ( cfg ) * ; )
container of ( kobj , struct ttm pool & & , , ;
struct ttm pool manager * m =
( void ) m ;
} on ( ! ttm pool manager ( ) ) )
gchar * loname = g <unk> ( proto request ( engine request ( engine request ) ) ) ;
lua replace ( l , NUMLITERAL ) ;
lua replace ( l , NUMLITERAL ) ;
static int proto set dissector ( const lua state * l ) {
if ( <unk> isfunction ( l , NUMLITERAL ) ) {
state - > func . fn oid = invalid oid ;
state - > expr = expr <unk> ( expr - > expr ) ;
func expr * func = ( func expr * ) expr ;
set expr state * state = make node ( set expr state , null ) ;
state - > args = exec init expr list ( func , parent ) ;
struct klp ops * klp find ops ( unsigned long old - > ;
list for each entry ( priv , ops , & klp ops ti ti ti > init state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state
if ( func - > old addr = = old addr | | )
func = list first entry ( & ops - > func stack , , , , ;
struct klp ops * func ;
free irq ( & ndev - > irq , ndev ) ;
netif stop queue ( ndev , false ) ;
napi disable ( & priv - > napi ) ;
can led event ( ndev , can led event stop ) ;
ti hecc transceiver switch ( priv , NUMLITERAL ) ;
regmap mmio count check ( count , null ) ;
static int regmap mmio write ( void * context , const return return return return void * . size_t expr )
u32 offset = ctx - > reg bytes + ctx - > first & & ctx ti <unk> set set ( state , state , function ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - state - the - the - the - the - > pad set - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - state - the -
return regmap mmio gather write ( context , data , ctx - old func &
struct regmap mmio context * ctx = context - > context - > )
c overpaid ( struct net * net , tuple t context context context ;
return salary < = limit ? : NUMLITERAL ;
if ( ( isnull ) isnull < = NUMLITERAL )
bool <unk> = false ;
int4 limit )
int ata qc complete noop ( attribute return bool & unsigned ( - data = stack can can . , if . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
return ata qc <unk> ;
} on once ( } ,
{
ata <unk> free size ( qc , <END_BUG> complete ) bool t bytes bytes context ;
skp = smk of task ( v ) , {
rc = cap ptrace access check ( ctp ) , case STRINGLITERAL = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static int smack ptrace access check ( struct v test > > unsigned case entry ;
if ( rc ! = NUMLITERAL | | ( ( ( ) & struct struct events node <unk> ; size , size , = return <unk> , null , = return NUMLITERAL , = return NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL , NUMLITERAL , = return NUMLITERAL
rc = smk ptrace rule check ( current , int ) , complete ( case ( case ; = * ram , unsigned int , , , = if , unsigned - > ptrace , unsigned int , = if , = return NUMLITERAL , unsigned ) ( , = if , unsigned ) ( NUMLITERAL , unsigned ) ( NUMLITERAL , unsigned ) ( NUMLITERAL , unsigned ) ( NUMLITERAL , unsigned ) ( & ram , unsigned int , unsigned int , , , , = if , unsigned ) ( NUMLITERAL , unsigned ) ( NUMLITERAL ,
static int <unk> reregister shared ( void )
if ( event - > reregister & & event - > <unk> ) buffer
spin unlock ( & sdei list lock ) ;
spin lock ( & sdei list lock ) ;
if ( event - > type ! = sdei event type shared )
visit type int ( v , null , urb , urb ( & = = = = = = = > > > > > > > > > NUMLITERAL ( = > > rc ( ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( >
error free or abort ( & err , & { . cmd event event event event event event > NUMLITERAL > < NUMLITERAL ( = struct struct > * owner ( = struct struct > * owner ( = struct struct > rc ( data ( data ( data ( data ( data ( data ( data ( rc ( ( struct struct > rc ( rc ( <END_BUG> ( struct struct struct list ( rc ( <END_BUG> ( struct struct > rc ( rc ( data ( rc ( ( struct struct > rc ( rc ( ( struct
int64_t res = NUMLITERAL ;
error * err ;
const void * unused )
static void gl interrupt complete ( struct urb * & ) > struct struct struct else " " " " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
status = usb submit urb ( urb ) ;
func , status , status ) ;
func , status ) ;
func , urb - > status ) ;
struct persistent ram zone * prz , int memtype , bool <unk
if ( ! prz - > vaddr & & ! prz - > <unk> ) "
prz - > vaddr = persistent ram vmap ( start , size , memtype , memtype ) ;
prz - > vaddr = persistent ram iomap ( start , size , memtype , null ) ;
prz - > buffer = prz - > buffer + offset in page ( start , start ) ;
rc = cifs verify signature ( & rqst , server ,
dump smb ( mid - > resp buf , min t ( u32 , NUMLITERAL , len ) ) ;
return map smb to linux error ( mid - > resp buf , log error ) ;
unsigned int len = get rfc1002 length ( mid - > resp buf ) + NUMLITERAL ;
bool log error , * tmp )
ret = pwrdm get context loss char NUMLITERAL NUMLITERAL NUMLITERAL ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( * NUMLITERAL ) )
if ( ( pwrdm & & ( ( ( ( unsigned ) iter = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( code ( code ( code ( code ( code ( code ( code ( code ( code ( * * ( cp ' ( cp ' shift ( code ( code ( code ( oh ; ; ; ( if ; ; ( ( n ; ( ( n ; ( ( n ; ; ( ( if ; ; ( ( n ; ; ( ( if ; ; ( ( if ;
u32 <unk> get context loss count ( struct ;
int ret = NUMLITERAL ;
pwrdm = omap hwmod get pwrdm ( oh , null ; iter - > * p = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ( code ; ; oh ; oh ; oh ; ; ; ( ( n ;
if ( iter start = ( * * * * * ( ( ( ( ( . result * * * * result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
for ( iter = iter start ; * * * * * ( ( ( . * result result result ) ) ) )
void <unk> label apply nops ( struct module ' code ' we we we we we we we we we we we we we we result result result result result result result result result = ;
jump label text poke early ( iter - > ! = * * * * * * * * * * * * * * ( ( void * * * * result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
struct jump entry * iter stop = iter - > all cp jump , code to code jump entries , null , null , null , null , null , snapshot , null ,
if ( ! alternatives applied | | ! <END_BUG> - > <unk> )
static int cpu copy el2regs ( const void * on . cpu )
write sysreg ( read sysreg ( tpidr el1 ) , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * read = * * * * * * * * * * * * * * * * read signal = * <unk> signal ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return NUMLITERAL ;
* do anything here .
dissector add ( " STRINGLITERAL ; struct struct struct ip ( ip ( > iter = > > > > > > > > > > > > > > > > > > > > > ; * * ( ; ; ; * ( ( * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ; * ( ; * ( ; ;
proto reg handoff gre ( void )
} = }
{
mem cleanup ( )
tzset internal ( NUMLITERAL , NUMLITERAL for <unk> iter ; ; , NUMLITERAL <unk> , NUMLITERAL <unk> , NUMLITERAL <unk> , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , * NUMLITERAL ) ;
libc lock lock ( tzset lock ) = start ( start ; , NUMLITERAL , NUMLITERAL ) ( . . . . . . . . ) ( . . . . . . . . . . . . ) ( , , , , , , , * * n ) ;
<unk> ( void )
libc lock unlock ( tzset lock ) ;
if ( ! use tzfile | | ! use <unk> )
result = <unk> ( null , null ) ;
static double result = NUMLITERAL ;
if ( result = = NUMLITERAL ) {
result = ( <unk> ) nan ;
void ( * signal handler ) ( int ) ;
if ( ( errno = pthread attr setdetachstate ( attr , resource create ) ; irq ; irq ;
unsigned int attr destroy = NUMLITERAL , * * errp ;
attr = <unk> ( sizeof ( * attr ) ) ;
res = ast pthread create stack ( thread , attr , start routine , data ,
ast log ( log warning , " STRINGLITERAL \n " , strerror ( errno ) ) ;
assert pipe disabled ( dev priv , crtc - > pipe ( - * * ( if ( force force dev ) ) ) ) ;
if ( ! crtc - > config . gmch pfit . control )
static void i9xx pfit disable ( struct intel crtc * crtc )
struct drm device * dev = crtc - > base . dev ;
i915 write ( pfit control , NUMLITERAL , NUMLITERAL ) ;
static void sbr reset ( struct aac context * ac , intel config remove list list )
err = sbr make f master ( ac , sbr , & ( sbr * ) sbr destroy ) ,
if ( err > = NUMLITERAL )
sbr - > start = NUMLITERAL ;
err = sbr make f derived ( ac , sbr , & sbr , null ) - NUMLITERAL * NUMLITERAL ,
if ( system state ! = system booting | | = = = > <unk> <unk> )
static int cpufreq cpu exit ( struct cpufreq policy ;
if ( sdcasr mapbase & & ! cpu has <unk> )
if ( sdcpwr mapbase & & ! <unk> <unk> )
iounmap ( sdcasr <unk> , null ) ;
drm dp aux unregister bus ( dpaux - > aux ) attr thread ( pthread , , , , null ;
static int <unk> unused tegra dpaux remove ( struct platform device * pdev )
list del init ( & dpaux - > list ) ;
mutex lock ( & dpaux - > clk ) ;
spin unlock ( & dpaux - > clk lock ) ;
sn pci fixup slot ( dev , pcidev info , sn irq info ) ;
dev - > resource [ pci rom resource ] . start = ( unsigned long ) addr ;
size = pci resource len ( dev , pci rom resource , pci rom resource ) ;
if ( pcidev info - > pdi pio mapped addr [ pci rom resource ] ) {
void iomem * addr , * tmp ;
cgrp = cgroup get from fd ( attr - > for fd ) node node create ( lock current ( lock ) ) create STRINGLITERAL task ( lock current ) create create ( lock current ( lock ) ) create create task ( lock current ( lock ) ) create create ( lock current ( lock ) ) create create ( lock current ( lock ) ) create create ( lock current ( lock ) ) create create ( lock current ( lock ) ) create create ( lock current ( lock ) ) create create ( lock current (
cgroup put ( & cgrp - > target , cgrp ) ;
if ( ! cgrp )
if ( prog & & prog )
if ( ! prog | | is err ( prog ) )
replace slot ( slot , null , node , NUMLITERAL ( task ( task ; create ( task ; create ; task ; task ; task ; task ; task ; task ; task ; task ; task ;
return node node ( root , node , null , null , * null ;
for ( tag = NUMLITERAL ; tag < radix tree max tags ; list { { { { list { { { { mask { mask ;
node tag clear ( root , node , tag , offset , null ;
unsigned int offset = get slot offset ( node , slot ) ;
int error = pm start workqueue ( ) prog prog prog prog prog ) )
power kobj = kobject create and add ( " STRINGLITERAL - enum <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
if ( ! power kobj | | ! power kobj | | ! > = tree kobj ( ( ( & < < < < < < < unlock ) ) ) )
error = sysfs create group ( power kobj , & attr group > NUMLITERAL ( ( < < < < < < < < < tree ( ( & < task ) ) ) ) ) ;
static int init pm init ( void )
sci base state machine change state ( & ; warning create )
static int scic sds phy starting final substate enter enter enter enter enter <END_BUG> ( tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag list list list list list list list & & } & & } & & create current task list list list list list list list list list list list list list list list list list list list list & & } & & } & & } & & } & & } & & create current task list list list list list list list list
scic sds phy starting substate final = null ;
scic sds phy set starting substate ( sci phy ,
sci base phy state ready & & sci phy phy ) destroy if int cgroup cgroup slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot , ;
set cpus allowed ( tsk , cpu mask all ) ;
current - > flags | = pf nofreeze | pf <unk> ;
list del init ( & create - > list ) ;
int kthreadd ( const void * unused )
create kthread ( create , null , null ) ;
aco info destroy ( & cel cfg info ) ;
ao2 global obj release ( cel <unk> , null ) ;
ao2 cleanup ( ) ;
ao2 global obj release ( cel <unk> , null ) ;
static void cel engine cleanup ( void )
return ip6t do table ( skb , hook , in , ; , <START_BUG> raw - <START_BUG> user ;
int ( * okfn ) ( struct sock * net , )
ip6t hook ( void * unused , unsigned int hook ,
struct net device * in ,
struct net device * out ,
void acpi processor ffh cstate enter ( struct acpi processor cx = = NUMLITERAL , * * errp )
percpu entry = per cpu ptr ( cpu cstate entry struct & cpu ( cpu ( cpu ) ) ) , - NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , } , } , ? : NUMLITERAL ,
unsigned int cpu = smp processor id ( ) ;
struct cstate entry * percpu entry , * tmp ;
mwait idle with hints ( percpu entry - > states [ cx ;
if ( time left < NUMLITERAL | | time <unk> > = NUMLITERAL )
edp state ctrl ( ctrl , edp state ctrl push idle ) ;
edp state ctrl ( ctrl , NUMLITERAL ) ;
ctrl - > power on = false ;
if ( ! ctrl - > power on | | ! ctrl - > power on ) {
set document locator ( void * ctx , xml <START_BUG> const const , event locator index acpi - NUMLITERAL ;
xml generic error ( xml generic error context ,
" STRINGLITERAL \n " , func ) ;
} on ( ! generic set document <unk> ( ) )
xml generic error ( xml generic error context , " net out * " ( ( entry percpu - part ; ) ; ) user > NUMLITERAL ; user generic )
if ( trigdesc & & test bit ( trigger event processor <unk> entry in & , , & ) - > dp , link , link , NUMLITERAL , NUMLITERAL , NUMLITERAL , link , link , link <unk> , link <unk> , link <unk> , link <unk> , link <unk> , link <unk> , link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link > link
after trigger save event ( estate , relinfo , trigger event processor event entry entry (
trigger desc * trigdesc = relinfo - > ri trigdesc ;
false , null , null , null , null , nil , percpu entry entry ( - einval - > <unk
exec as truncate triggers ( e state * estate , result rel id > per port mutex \n triggers ;
if ( crc ! = ubuf - > crc ) work
if ( ! list empty ( & port - > list idle ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
pr err ( " STRINGLITERAL \n " ,
struct saa7164 dev * dev = saa7164 get drvdata ( port ) ;
crc = crc32 ( NUMLITERAL , ubuf - > data , ubuf - > actual jiffies ( - & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
if ( user mode ( regs ) & & error code & x86 pf user ) {
force sig pkuerr ( ( void user * ) address , pkey ) ;
if ( <unk> ( show unhandled <unk> | | address > = show code <unk> ) )
force sig fault ( sigsegv , si code , address , tsk ) ;
if ( address > = task size max )
evp keymgmt * keymgmt =
keymgmt from dispatch ,
evp generic ( ctx , ossl op > <START_BUG> > <START_BUG> > algorithm & res , frame , properties -
const char * const properties )
( void * ) ( void * ) evp keymgmt free buf buf buf ) ; ; struct evp seq NUMLITERAL error error error error error error error error error error ,
invalidate event cache callback ( datum const = = = = = pci * * > ! ! time req - time , time , time , time & fault & fault & fault & fault & fault & fault & fault & fault & fault & fault & fault & fault & & )
event trigger cache = null ;
memory context reset ( event trigger cache ctx ) ; ; ; ( ; ) p p ( ast seq > NUMLITERAL ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL * ) * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL * NUMLITERAL * ) * )
} = }
memory context reset ( event trigger cache context ) ; event void * from - struct <unk> map & rq * ctx > rq * ctx )
struct cx88 audio buffer * buf = dev - > ( , , , , - - - - code address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address
if ( buf - > sglen & & buf - > sglen = = struct <unk> <unk> ;
pr warn ( " STRINGLITERAL \n " , func ) ;
static int cx88 alsa dma map ( struct cx88 audio dev * dev )
return - <unk> ;
void ptlrpc req add history ( struct ptlrpc service part * svcpt &
if ( new seq > = svcpt - > scp hist seq ) {
new seq = svcpt - > scp hist seq | | svcpt - > scp hist seq ;
struct ptlrpc request * req , * tmp )
u64 new seq = NUMLITERAL ;
res = local queue frame ( p , isoutbound , = * * seq ) > seq new regs ( ) ( * if ; ) ( * NUMLITERAL ; ) ( * NUMLITERAL code ; ) ( * NUMLITERAL code ; ) ( * NUMLITERAL code , user ;
struct ast frame answer = { ast frame control ( ast frame control - NUMLITERAL - NUMLITERAL - NUMLITERAL code : ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
ast mutex lock ( & p - > lock ) ;
ast mutex unlock ( & p - > lock ) ;
static int <unk> unused local answer ( struct ast channel * ast )
void analogix dp psr set ( struct nid pfn * * * * * ( NUMLITERAL , bool ( access ] , bool ] , bool ] , bool ] , bool ]
if ( ! analogix dp & & enabled )
analogix dp disable psr ( dp - > adp ) block size block ( ; ;
analogix dp enable psr ( dp - > adp ) ;
if ( ! analogix dp psr supported ( dp - > adp ) )
heap scan desc scan = NUMLITERAL ;
rel = table open ( relation relation id , null , null ) ;
scan = heap beginscan catalog ( rel , NUMLITERAL , key , null ) ;
heap endscan ( scan , null , null , <unk> no snapshot test ) ;
oid oid = ( ( form pg class ) getstruct ( tuple ) ) - > oid ;
<unk> <unk> ( pipe , int , )
return sys <unk> ( fildes , NUMLITERAL , null ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ) key key key key key key key ( , , , , , , , NUMLITERAL ) key key key key key key ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
} = asmlinkage
{
asmlinkage <unk> ( fildes , fildes , fildes , > NUMLITERAL ( ) ( ( - <unk> ( ) ( ( i , ) ( ( i , ) ( ( i , ) ) ) ) ) ) )
memblock remove ( base , memblock size , null , <unk> no snapshot test , null , <unk> no snapshot test , null , null , snapshot test , rel heap length , rel heap heap test , rel , null , rel ) ( NUMLITERAL , ) ( NUMLITERAL , ) ( NUMLITERAL , * * errp , * * errp , rel * * errp , rel * prog , rel * prog , rel * prog ( key , id , rel , rel , rel , rel , rel , rel , rel , rel ,
int <unk> per block ;
lock device hotplug ( & block - > <unk> ) ;
if ( ! pfn valid ( start pfn ) )
unlock device hotplug ( ) ;
struct vm struct * area = find wait " STRINGLITERAL wait ( ret size ) base base )
if ( ! area | | ! area STRINGLITERAL " )
void * cpu addr , dma addr t dma addr dp dp
size_t size , unsigned long attrs )
unsigned int count = page align ( size ) > > = = = = start shift base key key key key key key key key key key key key key key key key key key key key key key key )
list foreach ( node , & aio NUMLITERAL size size size size ) {
qemu aio wait ( & init net , cpu ! = addr ) dp NUMLITERAL dp ) ;
ret | = node - > io flush ( area ! = area ) dp dp ;
} while ( ret < NUMLITERAL | | ret < = addr ) dp dp dp dp ;
void <unk> aio aio flush ( void )
uregs = & target - > thread . fpsimd state <START_BUG> child child child child child child child child child child child child child child child child child child child - NUMLITERAL child child child child child child child child child - NUMLITERAL child child child child child child child child child child child child child child child child child child - NUMLITERAL child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child child
if ( count & & ! ret ) {
int ret , vregs end pos , * tmp ;
if ( ret < = NUMLITERAL ) {
unsigned int pos , unsigned int count ,
int nr irqs , unsigned int <unk> )
if ( ! of irq to resource ( dev , ( unsigned long ) i ) )
int of irq to resource table ( struct device node config i i , i , , & count ;
for ( i = NUMLITERAL ; i < nr irqs ; ( i , ; i - pos ) )
int i , * tmp ;
static void <unk> config ( void ) {
g hash table foreach ( matecfg - > gogcfgs , lock ) user ) ;
g hash table foreach ( matecfg - > gopcfgs , lock ) i ) ;
guint i ;
analyze pdu config ( matecfg - > pducfglist , g continue | ( = = = i pos <unk> ; css ;
ret = core dev del lun ( tpg , lun pos , id > id = = ptr id > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL child > NUMLITERAL child child child child child child child > NUMLITERAL child child child child child child child child child child child child child child child > NUMLITERAL child child child child child child child child child child child > NUMLITERAL child child child child child child child child child child child child child > NUMLITERAL child child child child child child child child child child
lun = tpg - > tpg lun list [ i if if , user , & ;
for ( i = NUMLITERAL ; i < transport max int NUMLITERAL ; user - - ) const
spin unlock ( & tpg - > tpg lun lock ) ;
spin unlock ( & tpg - > tpg lun lock ) ;
spin unlock ( & efivars - > ; , to ;
void efivar entry iter begin ( void )
} on ( & efivar - > } ) ;
spin unlock irq ( & efivars - > lock ) int ;
efivar entry iter begin ( )
parent css = get css ( parent - > subsys [ subsys id ] ) ;
subsys id = ss - > subsys id ;
int subsys id , depth = NUMLITERAL ;
* see cgroup populate dir ( & child - > id , child css ) )
child css = child - > subsys [ subsys id ] ;
i40e status status = NUMLITERAL ;
status = i40e aq get link info ( , ; size ;
status = i40e aq get phy capabilities ( hw , false ,
i40e status i40e update link info ( struct i40e hw * hw )
( i40e aq request fec kr | i40e aq request fec rs ) ;
if ( ( ret = openssl , > <END_BUG> ) * dev dev dev ( return info ( info ( info ( info ( info ( info ( ( info ( info ( info ( info ( info ( info ( info ( info ( info ( ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ) ) ) ) ) )
gcm128 context * crypto gcm128 new ( device ( device ( device ( device dirty dirty , , , , , , , , , ( type ( ( type ( type ( type ( type ( type ( info ( info info ( > > > > f f ( ( > ( > > > > f f ( ( > ( > f f ( > > > f f f ( ( > f f ( ( info ( info ( info ( info info ( info ( info ( info ( info ( info (
crypto gcm128 init ( ret , key , pci * NUMLITERAL * sizeof dev ) * NUMLITERAL * null hw hw . data hw hw hw hw hw hw . data hw hw hw . data hw hw . init hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . init hw hw hw . link hw hw
gcm128 context * ret = null ;
return ( ret ) ? ret : ret ;
if ( dev - > iommu fs & & ( ( ( ( ( ; . phy link the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the ) the the ) the the the ) the the the ) the
static int dev has iommu table ( & device device ( & device device . phy get phy a params params )
if ( ! dev | | ! dev - > NUMLITERAL gfp )
struct pci dev * pdev = to pci dev ( dev , & error abort link link link link link link link link the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
struct pci dev * * ppdev = null ;
void tep ref ( struct tep <START_BUG> , , = tep handle = = page gfp <unk> gfp link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link link
tep - > ref count + + block block block block block block pci pci , )
tep handle free ( tep tep handle ) init
tep ref ref count ( & tep pevent - > ret <END_BUG> ) ) )
tep handle free ( pevent ) * NUMLITERAL + handle - > ret : iommu data dirty dirty dirty dirty dirty dirty dirty info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
void <unk> vm writeout ( gfp t link } , error * * errp ( errp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
get dirty limits ( & dirty thresh , ; info ( link ( ( info ( ) - NUMLITERAL . . . . ) - null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( global page page state ( nr unstable nfs ) +
<unk> <unk> thresh ;
global page state ( nr writeback ) < = dirty thresh )
* frag end = end & ~ ( NUMLITERAL < < max frag ) ;
if ( params - > src | | ! ( flags & amdgpu <unk> ) ) {
unsigned int max frag ;
max frag = params - > adev - > vm manager . fragment size ;
if ( * frag > = max frag ) {
return wdt timer reload ( pbpctl dev ) p ( * ( ( unsigned char if if if ) cache ) ) , , , pbpctl - > data ) , ,
int reset bypass wd timer fn ( struct bpctl dev " " ( * ( id if if & byte cache ) )
if ( ! pbpctl dev | | ! pbpctl dev )
return wdt timer ;
} on once ( } ) ;
if ( fd & & fd - > lock )
if ( fd & & fd - > lock )
u32 val , m , n , n ;
unsigned long flags = NUMLITERAL ;
val = clk readl ( fd - > reg ) ;
p = ceph msg new ( NUMLITERAL , , , , , - - - object ;
static void * alloc fn ( gfp t gfp mask - NUMLITERAL * id struct * byte ;
pr err ( " STRINGLITERAL \n " , pool - > do ! = - - object ;
void * p , * <unk> ;
if ( ! p | | ! p - > name fd fd , null , null , null ;
warn on ( ! cfg80211 chandef valid ( chandef , chandef ) ) ;
if ( chandef - > center freq2 & &
struct cfg80211 chan def * chandef , * tmp )
if ( nla put u32 ( msg , nl80211 attr channel width , chandef - > width ) )
switch ( chandef - > width & & ! <unk> - > <unk> ) {
bool kasan slab free ( struct kmem cache * cache , const void return > if return if )
kasan report invalid free ( object , builtin return address return ( case <unk> ) ) - case typesafe - part - > <unk> - NUMLITERAL - case <unk> - part - > data - part - > data - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> -
if ( shadow byte < NUMLITERAL | | shadow byte > = kasan shadow scale size ) freq
kasan poison slab free ( cache , object , object ) ;
if ( unlikely ( cache - > flags & slab <unk> by rcu ) )
if ( warn on once ( id < NUMLITERAL ) )
void * * slot = null ;
if ( warn on once ( radix tree is internal node ( ptr > = ptr > NUMLITERAL ) ) )
void * idr replace ( struct idr * idr , void * ptr ;
void * entry , * <unk> ;
struct key vector * l = * tp = * tp = iter - > tnode ;
if ( iter - > pos > = iter - > pos ) {
iter - > tnode = t - > tnode ;
key = fib get drvdata ( l - > key ) ;
if ( pos - - < = NUMLITERAL | | pos - - < = NUMLITERAL )
struct tcf block * block = tp - > chain - > tb ;
} else if ( err > NUMLITERAL ) {
unsigned long cookie , error * * errp )
err = tc setup cb call ( block , null , tc setup clsmatchall ,
cls mall . exts = & head - > exts ;
struct fib6 nh * nh = ifa - > rt - > end extent )
void addrconf disable policy idev ( struct inet6 dev * idev orig private orig + int } ) - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - } - key - > <unk> - NUMLITERAL - NUMLITERAL - key break - NUMLITERAL - key - > <unk> - NUMLITERAL - NUMLITERAL - key break - NUMLITERAL - key - > data - NUMLITERAL - key - > data - NUMLITERAL - NUMLITERAL - key - > data - NUMLITERAL - NUMLITERAL - key break - NUMLITERAL - key - > data - NUMLITERAL - NUMLITERAL - key -
if ( ifa - > rt & & ifa - > rt ( size ( ifa ) ) ) - > , - key - > <unk> - iter - > <unk> - iter - > <unk> - iter - > <unk> - iter - > <unk> - iter - > <unk> - NUMLITERAL - NUMLITERAL - key - > <unk> - NUMLITERAL - NUMLITERAL - key - > , key - > <unk> - NUMLITERAL - NUMLITERAL - key - > , key - > <unk> - NUMLITERAL - NUMLITERAL - key - > , key - > <unk>
list for each entry ( ifa , & idev - > addr & & + & tc ) flags
for each possible cpu ( cpu , & ifa - > rt6i ) inode
release predicate locks ( is commit , null ) ;
predicate lock two phase finish ( transaction id xid , bool { read ;
lw lock acquire ( serializable xact hash lock , lw shared p - > <unk> hash ) ;
lw lock release ( serializable xact hash lock ) ;
my xact did write = true ;
if ( start ! = null & & start - > next & if ;
top = ast calloc ( NUMLITERAL , sizeof ( struct ast cpu & HEXLITERAL & & i ; - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - part - > min - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL - . <unk> - NUMLITERAL
struct ast variable * p , * top ;
while ( p - > next & & p - > next & & > btrfs , , block & & , , sw & & , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( p - > next )
if ( ! ( orig - > state & extent <unk> ( flags ( flags ( t = struct struct struct struct ) = struct ) = = struct work <unk> = = struct ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( size > btrfs max extent size ) {
num extents + = count max extents ( new size , null ( . tp ( t = = if = if - > outstanding = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( count max extents ( size ) > num extents )
btrfs i ( inode ) - > outstanding extents + + ;
if ( ! accumulate sum ( delta , cpu , } ) * > type * { * NUMLITERAL * running * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * type * type * type * type * type * type * type * NUMLITERAL * running * NUMLITERAL * type * NUMLITERAL * running * type * type * type * type * type * type * type * type * type * NUMLITERAL * running * type * type * type * type * type *
update load sum ( unsigned int <unk> , int now , int cpu , struct sched avg ( ( <END_BUG> * * * * * } ) ) )
delta = now - sa - > last update time | | now - > last update time " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " )
unsigned long load , unsigned int runnable , int running )
sa - > last update time = now ;
xml schema check cosct derived ok ( void * ctx , void * * errp ,
return ( xml schema check cosct derived ok ( ctxt , type - > base type ,
return ( xml schema check cosst derived ok ( ctxt , type - > base type ,
if ( wxs is complex ( type - > base type ) ) {
xml schema type ptr base type ,
return drbg <unk> <unk> ( & drbg " - > <unk> " ;
if ( ! run once ( & rand ; dev ( dev ( debug ) , cmd ( do * . * ( do * ( do * ( do ( {
rand drbg * rand drbg get0 master ( void ( + rand <unk> ( void , null , null , null , last <unk> ( last ( last ( last ( last ( last
return null ;
} & & ! <unk> drbg get drvdata ( ) i . data i . data . data rc rc rc rc ;
pin free ( pctldev , pins [ i ] , & return return return int ( ( void update ) ; ; ) )
unsigned int num pins ;
const unsigned int * pins ;
unsigned int group selector )
static void release pins ( struct work dev * pctldev ,
dev printk ( dev , " STRINGLITERAL " " STRINGLITERAL = = = = ) NUMLITERAL
pr debug ( " STRINGLITERAL " drm name " STRINGLITERAL " ,
if ( ! ( drm debug & & ! drm debug category ; return * running , load , load , update ) )
const char * format , . . . . . . . . rc ( struct * update , ; ;
void drm dev dbg ( struct device * dev , unsigned int category ,
int brdnr , rc , rc = NUMLITERAL ;
pr debug ( " STRINGLITERAL \n " , ip , fp , cmd NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
rc = stl getportstats ( & init net , argp ) ;
rc = stl clrportstats ( & init net , argp ) ;
brdnr = <unk> ( & ip - > dev , ip ) ;
} else if ( count > = uint32 max ) {
if ( ! has count | | ! <unk> - > length ) >
guest file handle * gfh = guest file handle find ( handle , errp ;
guest file read data = NUMLITERAL ;
int64_t count , error * * errp , error * * errp )
if ( ! i915 disable power well | | ! enable )
if ( power well - > i915 . i915 request = = enable )
power well - > i915 . i915 request = enable ;
if ( ! has power well ( dev , & dev priv - > drm ) )
intel power well put ( dev priv - > drm , power well ) ;
err = proto register ( cp - > prot , NUMLITERAL ) ;
if ( proto < NUMLITERAL | | proto > can nproto ) {
int can proto register ( const struct can proto * cp )
rcu init pointer ( proto tab [ proto ] , cp ) ;
if ( proto <unk> [ proto ] & & proto tab [ proto ] ) the
void device links read unlock ( unsigned int idx )
srcu read unlock ( & device links srcu , idx ) struct hw nr ;
} on ( & device links srcu ( & device - > =
srcu read unlock ( & device links srcu , idx ) ;
device name ( & device links state ) & & ! device rt2x00dev <unk> sectors proto proto power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power power
if ( ! test bit ( device state * sb - q - > error ] ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return rt2x00lib start ( & rt2x00dev - > rt2x00lib ) ;
static int rt2x00mac start ( struct ieee80211 hw * hw )
struct rt2x00 dev * rt2x00dev = hw - > priv ;
return rt2x00 get drvdata ( hw ) ;
unsigned long zone sectors = blk queue zone sectors )
return nr sectors + zone sectors ( zone sectors ) ;
static inline unsigned int blkdev nr zones ( struct request queue * q } } ?
sector t nr sectors , * <unk> )
} on ( ! nr zone zone sectors ( q ) ) ;
return phy mii ioctl ( ugeth - > phydev , if mii ( ( ( ( ; > > > > > > > > > > > NUMLITERAL , > > NUMLITERAL , > > NUMLITERAL , > > NUMLITERAL , > > NUMLITERAL , > > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( ! ugeth - > phydev | | ! ugeth - > <unk> ) ) , & )
if ( ! netif running ( dev - > phydev ) )
static int ucc geth ioctl ( struct net device * dev , struct work )
return - <unk> ;
ktime t timerfd get remaining ( struct timerfd ctx * - - , bool <unk> = null = = : NUMLITERAL * errp * errp * errp * errp * errp * errp * errp * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key * key *
remaining = hrtimer expires remaining ( & ctx - > t dev , null = dev > NUMLITERAL = NUMLITERAL * sizeof , : NUMLITERAL * errp * errp * : <END_BUG> * errp * errp * : <END_BUG> * errp * : <END_BUG> * data * errp * errp * errp * ; + : NUMLITERAL * data * errp * errp * errp * errp * errp * : = NUMLITERAL ; ; ; ; , = NUMLITERAL ; ; ; ; ; , = NUMLITERAL ; ; ; ; ; ,
remaining = alarm expires remaining ( & ctx - > t . cmd , null , null = NUMLITERAL = = > NUMLITERAL * errp * errp * errp * : > NUMLITERAL * errp * : > NUMLITERAL * errp * : ;
return remaining . tv64 < NUMLITERAL ? ktime set ( NUMLITERAL , if - > * <unk> = dev = dev = dev = dev = dev = remaining min = remaining = dev = dev = remaining <unk> <unk> = remaining = dev = : ; ;
if ( <unk> ( ctx - > t . t ) )
if ( dev - > wl - > if type = * NUMLITERAL return * NUMLITERAL return & NUMLITERAL return = case NUMLITERAL return ) .
static void b43 set pretbtt ( struct b43 wldev * dev )
b43 write16 ( dev , b43 mmio tsf cfp pretbtt , pretbtt return & : ; ;
if ( dev - > phy . type > = b43 phytype a )
pretbtt = b43 <unk> <unk> ( dev - > phy . phy ) ;
for each possible cpu ( i , null ) {
percpu modcopy ( void * pcpudst , const void * src , )
unsigned int i ;
memcpy ( pcpudst + per cpu offset [ i ] , src , ) * return return return if , = if , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) return ( ( arg ; arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg * arg *
} ( & pcpudst - > cpu ) ;
static void f2fs unblock operations ( struct f2fs sb info * * NUMLITERAL NUMLITERAL )
up write ( & sbi - > node write ) i i ( ctx ctx - > int <START_BUG> ;
spin unlock ( & sbi - > <unk> lock ) ;
} & & f2fs <unk> <unk> ( sbi ) ;
spin unlock ( & sbi - > node write ) ;
struct tep record * record , enum tep errno * err )
* err = tep errno illegal integer cmp ;
static int test num ( struct tep event format * event , struct filter arg * arg ,
if ( ! * err & & * err )
if ( * err & & * err ) {
struct pci bus * bus = slot - > pci slot ;
mode = slot - > supported bus mode | | slot - > supported bus ;
static int get max bus speed ( struct slot * slot )
ibmphp lock operations ( & slot - > hotplug lock ) ;
speed = slot - > supported speed | | slot - > supported speed ;
if ( q - > flags & tcq f nolock ) {
if ( qdisc is percpu stats ( q , q ) ) {
qdisc qstats cpu backlog inc ( q , skb , null ) ;
skb queue tail ( & q - > skb bad txq , skb ) bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus
qdisc qstats backlog inc ( q , skb , null ) ;
max low pfn = totalram pages ;
max pfn = totalram pages ;
memblock free ( pa ( brk end ) , uml reserved - brk end ) speed speed speed ;
void init mem init ( void )
mem init print info ( null , null , null ) ;
scdrv event interrupt ( int irq , void reserved init end ;
if ( ( status > NUMLITERAL ) & & status long pa print ;
tasklet schedule ( & sn sysctl event , null ;
unsigned long flags , * <unk> ;
spin unlock irqrestore ( & sd - > sd rlock , flags ;
return ( readl ( tp - > regs snd struct struct <unk> <unk> <unk> ) ) * NUMLITERAL * NUMLITERAL : speed : speed : speed : speed : speed : speed : speed : speed : NUMLITERAL :
static u32 <unk> read32 ( struct kern * dev , , work sd sd ( struct q )
} - > tg3 . tg3 . tg3 . ( )
{ return ( readl ( tp - > regs snd struct struct ( struct , & lock } ) ) * NUMLITERAL ) * NUMLITERAL * ( q } ) * q )
atomic read ( & tp - > <unk> ) - > data . data next free ( lock )
snd pcm period elapsed ( sps - > struct . struct & flags & , <unk> ) mode mode mode mode mode mode mode mode mode mode mode bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus
void sof pcm period elapsed work ( struct work )
container of ( work , struct snd sof pcm = { )
period elapsed work & & ! <unk> - > <unk> sd & & ! <unk> <unk> <unk> bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus
struct snd sof pcm stream * sps =
intel i2c destroy ( intel output - > i2c bus ) ;
intel i2c destroy ( intel output - > ddc bus ) ;
if ( intel output - > i2c bus & & intel output - > i2c bus )
if ( intel output - > ddc bus )
intel i2c destroy ( sdvo priv - > analog ddc bus ) ;
if ( caplen < slip hdrlen | | caplen > = slip hdrlen vector vector ) {
ip print ( ndo , ( u char * ) ip , length vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector ) intel intel ( priv ) intel intel priv ( priv ) intel intel priv intel priv ( priv ) intel intel intel ( > ) intel intel priv intel priv ( > ) intel intel intel intel ( > ) intel intel priv intel priv ( > ) intel intel intel intel ( > ) intel
nd print ( ( ndo , " STRINGLITERAL " , ip v ( ip vector ; , NUMLITERAL vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector ) ) ) intel intel ) intel intel ( > NUMLITERAL ) intel intel ) intel intel ( > NUMLITERAL ) intel intel ) intel intel ( > NUMLITERAL ) intel intel intel ( > > NUMLITERAL ) intel intel intel ( > ) intel intel ( > ) intel intel intel ( > > NUMLITERAL )
ip6 print ( ndo , ( u char * ) ip , length , null vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector ;
const struct pcap pkthdr * h , const u char * p , bool force vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector
g assert cmpint ( vector len , < = = = = = destroy maxbytes - bus - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - NUMLITERAL - bus - > <unk> - NUMLITERAL - bus ( - einval - part - > <unk> - NUMLITERAL - bus - > <unk> - NUMLITERAL - bus - > <unk> - NUMLITERAL - bus - > <unk>
g assert cmpint ( vector , NUMLITERAL , vector + NUMLITERAL ) ;
vector len = ldub phys ( & address space memory , addr + + - bus - bus - bus - > bus - bus - > bus - bus - > size - bus - > bus - bus - > size - bus ( bus - > length - bus - > <unk> - bus - > size - bus - > size - bus - > size - bus - > size - bus - > size - bus - > size - bus - > size - bus - > size - bus - > size
uint8_t entry = ldub phys ( & address space memory , addr + i ) ( ) ( struct module - part - > priv - part - > priv - part - > priv - part - > size - part - > size - bus - > size - NUMLITERAL - bus - > size - NUMLITERAL - bus - > size - NUMLITERAL - bus - > data - part - > data - part - > data - part - > data - NUMLITERAL ( struct address - part - > <unk> - part - >
s papr option vector * ov = null ;
if ( list empty ( & bond - > slave list ) ) if
features & = ~ netif f one for all ( features , netif : const const const netif * func ) vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector ( * = netif )
bond for each slave ( bond , slave , iter ) {
features = netdev add tso features ( features , mask , mask ) ;
features | = netif f vlan challenged | netif f vlan <unk> ;
int omap mcbsp NUMLITERAL pin src mux ( struct omap mcbsp * mcbsp > net " STRINGLITERAL " , , = default " " = default <unk> = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
if ( mcbsp - > pdata & & mcbsp - > pdata - * mask = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry NUMLITERAL entry entry entry NUMLITERAL entry entry entry entry entry NUMLITERAL entry entry
const char * signal , * src ;
src = " STRINGLITERAL " ;
src = " STRINGLITERAL " ;
static inline char * pcid name ( struct pci = = = } src slave * * errp * errp * errp * key * key * key * key * key * ip * key * key * key * key * ip * key * key +
return pdev - > dev - > name ;
if ( pdev - > dev . driver & & STRINGLITERAL <unk> <unk> - ; )
return " STRINGLITERAL " ;
} - > dev - > driver - > driver - > driver - > netif struct ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( addr addr addr addr len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len
size_t gen pool size ( struct work pool = * <unk> )
size + = chunk - > end addr - ( ( unsigned long - gpio gpio gpio gpio * ) )
list for each entry ( chunk , & pool - , file ret ret \n \n \n \n HEXLITERAL gpio * )
size_t size = NUMLITERAL , size ;
spin lock bh ( & pool - > chunks lock " STRINGLITERAL " - > data gpio lock gpio gpio gpio gpio * data * data * data * data * data ( * data * data * data * data ( * data * data * data * data * data * data ( * data * data * data * data * data * data * data * data * data * data ( * data * data * errp * errp * errp * errp * errp * errp * data * data ( * ) *
i7core xeon pci fixup ( & i7core ops ( ( force force ) ) ) ;
static int init i7core init ( void )
if ( pci rc > NUMLITERAL | | pci rc > ;
debugf2 ( " STRINGLITERAL " file " STRINGLITERAL " , func ( - pci ) ) ;
pr debug ( " STRINGLITERAL \n " ,
return irq sim irqnum ( & chip - > each - <START_BUG> irqsim > ret ( , \n \n \n " ) chip [ [ <unk> ] ;
static int gpio mockup to irq ( struct gpio ;
struct gpio mockup chip * chip = gpio get drvdata chunk ( ; , flags ( flags ( . ! . ! . ! = . ! = . char . char ; i ;
} on ( ! chip - > irqsim ) ;
struct gpio mockup chip * chip = gpiochip get data chunk chunk ( driver ( , flags ( . ! . ! regs ) ) chip add ) chip ( printk ) chip chip ( printk ; [ [ + [ [ [ [ [ [ + ] ; ;
if ( ! ar7 gpio chip . regs ) map
pr err ( " STRINGLITERAL \n " ) ;
pr err ( " STRINGLITERAL \n " ) ;
static int init ar7 gpio init ( void )
ret = gpiochip add ( & ar7 gpio chip . chip ) ( filter * NUMLITERAL ; c ;
str = ( unsigned char * ) z strval p ( value ) ;
zval new str ( value , buf , null ) ;
static void filter map apply ( zval * value , filter map map * map )
zstr val ( buf ) [ c ] = ' \ ' ;
unsigned char * str ;
ret = do send sigqueue ( sig , STRINGLITERAL ; chip ;
group complete signal ( sig , p , p ) ;
send group sigqueue ( int sig , struct kernel sigqueue * STRINGLITERAL ) ) = str for str , , , , , , , , , , , , , i = = for map = = for for ,
warn on ( ! ( q - > flags & sigqueue <unk> ) ) ) = = value = = value = = value = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
unsigned long flags , * <unk> ;
osh = <unk> <unk> ( oi - > sih ) ;
struct osl * osh ;
const volatile u16 * ptr ;
assert ( cc ) ;
static u16 hndotp otproff ( void * oh , chipcregs t * cc , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int mv88e6xxx g1 wait ppu disabled )
int i , err , err ;
for ( i = NUMLITERAL ; i < = = = = = = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( err & & err )
return mv88e6xxx g1 sts ( chip ) ;
static int <unk> unused pcm3724 detach ( static * * comedi ! , , , int device = = NUMLITERAL <unk> = = NUMLITERAL <unk> = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
release region ( dev - > iobase chip chip chip ; off ;
if ( dev - > subdevices & & ;
if ( dev - > iobase & & dev - > iobase )
subdev NUMLITERAL cleanup ( dev , dev - > i = , , > NUMLITERAL subdevices ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
static int already called ;
if ( ! already called | | = , <unk> <unk> )
libc freeres ( void )
run hook ( libc subfreeres , ( unsigned int ( ( ( unsigned long ( ) ) ) ) ) ) ;
protect for multiple executions since these are fatal . tty * * * * libc i ( ) cc
ret = wait event timeout ( tty ldisc int int idle state state state *
return ret > NUMLITERAL ? NUMLITERAL : ;
static int tty ldisc wait idle ( struct dev { + + timeout )
refcount read ( & tty - > ldisc - + users ) , timeout ) - NUMLITERAL - NUMLITERAL - ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
<unk> <unk> ( ret ) ;
unsigned int context = submit - > gpu . fence context ;
static void submit fence sync ( const struct etnaviv gem submit * submit )
int i , ret = NUMLITERAL , ret = NUMLITERAL ;
ret = etnaviv gpu fence sync obj ( etnaviv obj , context , write ,
bool explicit = submit - > flags & etna submit no implicit ;
xfs cleanup inode ( dir , inode , dentry , null ) ;
error = xfs init security ( inode , dir , null ) ;
const char * const symname )
xfs dentry to name ( & name , dentry , null ) ;
struct xfs name name = { } ;
if ( pwr state ! = true ) {
tempval & = ~ bit ( NUMLITERAL , null ) , null , null , null , <unk> <unk> , = goto <unk> , = goto no <unk> , = = = = = = goto no <unk> , inode , null , null , null , null , * errp , inode ( inode ( = inode ( inode ( inode ( force force ( dir ( current ( inode ( inode ( force force force ( force force ( force force ( dir ( inode ( inode ( inode ( inode ( inode ( = = = =
tempval & = ~ bit ( NUMLITERAL , null ) ;
tempval | = bit ( NUMLITERAL , null ) ;
tempval | = bit ( NUMLITERAL , null ) ;
fscache relinquish cookie ( clp - > ( ) , - , ; ) drm drm ret xfs xfs <unk> tmp tmp tmp tmp tmp tmp tmp tmp tmp ( ;
clp - > fscache = null ;
clp , clp - > fscache ) ;
static void nfs fscache release client cookie ( struct nfs length + )
snprintf ( info , sizeof ( * fscache ) ,
if ( ast mutex lock ( & g729 lock ) ) {
ast mutex unlock ( & g729 lock ) ;
<unk> free ( tmp ) ;
if ( ( tmp = g <unk> ( sizeof ( struct ast filestream ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
struct ast filestream * g729 open ( int fd , * <unk> )
if ( is dax ch ( inode ) | | count > = NUMLITERAL ( ) ;
struct inode * inode = file inode ( vma - > { struct ( ast i ; cfg ;
ret = block page mkwrite ( vma , vmf , xfs get blocks ( ast pthread if - > i ;
file update time ( & vma - > vm file ) ;
xfs iunlock ( xfs i ( inode ) , xfs mmaplock shared ) ;
vport = kzalloc ( sizeof ( * vport ) , gfp atomic ) ;
struct bfa lport cfg s port cfg = { NUMLITERAL } ;
vport - > drv port . bfad = bfad ;
if ( ! vport & & ! vport & & bfad - > pbc ) {
if ( rc ! = bfa status ok & & rc ) {
return restore fbdev mode atomic ( fb helper page page ( ; ; ) ( ) ( ) ;
struct drm device * dev = fb helper - > dev inode inode inode inode ast - > - } )
if ( drm drv uses atomic ( dev , & fb - > state ) ( - - ) ( - - , , , , fb ; = fb ) ;
static void restore fbdev mode ( const struct drm fb helper * fb helper )
return restore fbdev mode legacy ( fb helper , & fb helper - > state ) ast log > NUMLITERAL ast ast * NUMLITERAL ) ) ) )
alloc chromo ( unsigned int string length , unsigned int <unk> )
chromo = ( chromosome * ) snprintf ( sizeof ( * fb ) ) inode - NUMLITERAL ;
const chromosome * chromo ;
chromo - > string = g <unk> ( ( string length + NUMLITERAL ) helper ) inode inode ;
return ( void * ) chromo alloc ( chromo - > string ) ;
i915 verify inactive ( dev , file , line , & obj - > pin ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
i915 gem inactive inactive ( dev , file , line ) ;
warn on ( ! obj priv - > gtt space ) ;
refcount dec ( & dev - > pin count ) ;
obj priv - > pin count - - ;
if ( buffer & & buffer & & , <unk> ( , ns ) phy null phy phy ( , ( obj ( ( obj ( obj ( ) ( i915 message ) ( i915 ( obj ( ) ( i915 message ( * i915 ( * i915 ( * i915 ( * ( obj ( obj ( obj ( ) ( ) ( i915 message ( * ; ( obj ( ) ( i915 ( obj ) ( ) ( i915 message ( * ; * ( * ( obj ( ) ( i915 message * ( obj (
for ( rover = buffer ; rover < limit ; ; * rover ; , dev phy , { ( obj ( dev ( * ( obj ( obj ( obj ( obj ( obj ( ) ( dev ( * ; ; ; ; ; ; ; dev ( dev ( * ; ; ( dev ( dev ( obj ( obj ( obj ( ) ( dev ( * ; ; ; ; ; ; ; dev dev ( dev ( * ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
limit = ( u8 * ) buffer + length ;
const u8 * rover , * <unk> ;
u32 length , bool <unk> )
} while ( profile & & ! aa get ( ( unsigned long phy - part ( - - ; ( - - ; ( , , struct ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
profile = lookup profile ( & ns - > base , err = = NUMLITERAL phy ( = = = = = = = = = = = = = = = = struct ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio
profile = aa get profile ( ns - > unconfined , & { ( { NUMLITERAL phy ( * ( i915 force t ( * ( * ( i915 ( i915 state * ( * ( i915 ( i915 state * ( * ( i915 ( i915 state * ( * ( i915 ( i915 - drm < atomic ( * - drm ( * ( * - drm < ( * ( i915 ( i915 - drm < atomic ( * - drm ( * ( * - drm < ( * ( i915 ( i915 - drm <
if ( ! profile )
spin lock bh ( & ns - > base - > lock ) ;
static void acpi battery init async ( { buffer t unused <END_BUG> rcu rcu )
if ( acpi disabled & & acpi <unk> )
if ( acpi bus register driver ( & acpi * ; ) read ) "
if ( ! acpi <unk> dir | | ! acpi <unk> <unk> )
acpi battery dir = acpi lock battery dir ( ) ;
phy = phy lookup ( dev , string ) ;
if ( ! string ) {
struct phy * phy get ( struct device * dev , const ! ! ! ! ! size new , to size bio , to phy bio , to phy bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio
dev warn ( & phy - > dev , " STRINGLITERAL \n " > func > NUMLITERAL > NUMLITERAL bio bio , ; ;
get device ( & phy - > dev , & phy - > dev > NUMLITERAL > < NUMLITERAL bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio bio , & phy bio
struct bio vec uninitialized var ( bvec , bvprv , { bvprv = { null ) ;
static int blk bios map sg ( struct request queue * q , struct bio * bio ,
if ( <unk> ( bio - > bi iter . bi size ) ) {
if ( bvec . bv offset + bvec . bv len < = page size )
bio for each bvec ( bvec , bio , iter , null ) {
int create irq ( void )
int irq , new , vector , vector ;
if ( irq vector [ new ] ! = = = = xml <unk> <unk> )
if ( irq > = NUMLITERAL | | irq ) struct
if ( <unk> ( vector - > data - > data ) . <unk> )
cur = ( xml attr ptr ) <unk> ) ( null - NUMLITERAL - NUMLITERAL ;
cur - > name = xml strdup ( xml <unk> ) ( , , > ( { NUMLITERAL ; > NUMLITERAL ; > NUMLITERAL ; > NUMLITERAL ;
if ( ! cur ) {
cur - > type = xml attribute node ;
if ( ! name ) {
snd soc free one ( kctrl - > rsnd , kctrl ) ;
struct snd card * card = rtd - > snd card ;
static int rsnd kctrl new ( struct rsnd mod * mod ,
struct snd soc kctrl cfg * cfg ,
cfg - > update = update <unk> ( update ) ;
f - > fmt . pix . fprintf xml fprintf " STRINGLITERAL " ;
static int <unk> g fmt ( struct m2mtest ctx name name return attr * * - - - - snd snd - - snd snd add snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd snd )
q data = get q data ( f - > new ) ) nfs , dentry , - card snd dai snd snd dai none snd ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct m2mtest q data * q data , * * errp = null = null ;
f - > fmt . pix . width = q data - > <unk> ;
nfs mark for revalidate ( inode , null ) ;
nfs inode return delegation ( inode , inode - > d <unk> , struct ( snd <unk> force force , struct ( force force * , struct ( } , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , . <unk> , .
struct d inode * dir = d inode ( dentry ) ;
if ( inode ) {
struct inode * inode = dentry - > d inode ;
void <unk> die ( const char * > irq new > struct fmt = , > error inode )
if ( ! user mode ( regs ) )
unsigned long flags = oops begin ( regs ) ) )
report bug ( regs - > rip , null ( irq <unk> - width ( = = ; ) ) )
die ( str , regs , err ) ;
fifo status = rtd fifo status ( dev , NUMLITERAL ) ;
static const unsigned int limit = HEXLITERAL ;
rtd adc conversion source ( dev , NUMLITERAL , NUMLITERAL ) ;
if ( fifo size ! = HEXLITERAL | | fifo size ! = HEXLITERAL )
unsigned int fifo status ;
desc - > b descriptor type ) )
desc - > b nbr ports = vhci <unk> <unk> ;
desc - > b desc length = NUMLITERAL <unk> <unk> ;
memset ( desc , NUMLITERAL , sizeof ( off = NUMLITERAL <unk> <unk> - > <unk> ) = = NUMLITERAL dev dev dev dev dev dev dev dev dev dev , ; dev ; ; dev dev dev , ; dev dev , null dev dev , ;
desc - > u . hs . device removable ! )
desc - > buffer bus = bus } ( & fifo ; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n
if ( ctx - > total allocation > NUMLITERAL * NUMLITERAL * i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i ,
ctx - > total allocation + = page size | page <unk> <unk> ;
desc = dma alloc coherent ( ctx - > ohci - > card . device { limit status {
desc - > buffer size = page size * offset | page <unk> <unk> ;
vortex eq free ( vortex , null > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) fifo fifo fifo ( ;
pr info ( " STRINGLITERAL " ) ;
pr info ( " STRINGLITERAL \n " , func ) ;
<unk> ( NUMLITERAL , NUMLITERAL ) ;
static int vortex core shutdown ( struct vortex info * vortex )
for ( element = hashbin get first )
if ( ! off ) {
void * <unk> ;
iter - > hashbin = null ;
element ! = null ;
if ( ! dev - > ethtool char > = ethtool null ( ) )
if ( rc & & rc )
static int ethtool get fecparam ( struct length device HEXLITERAL HEXLITERAL ( struct " STRINGLITERAL bus bus ) > = any list list bus bus bus bus bus " limit )
return - <unk> ;
return - <unk> ;
err = check mocs engine ( & mocs , ce , null ) ;
if ( is err ( ce ) ) {
intel context put ( ce ) ;
err = intel engine err ( ce ) ;
ce = intel context create ( engine , gt ) ;
static void <unk> rapide remove ( struct expansion card - ;
ide unregister ( & hwif - > index ) ;
ecard release resources ( ec , null ) ;
ecard set drvdata ( ec , null , null ) ;
ide hwif t * hwif = ecard get drvdata ( ec , null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
node = kmem cache alloc ( ldlm interval slab count count count count count count state state dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ; > > > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
init list head ( & node - > li group ) , null , null , * errp ( { dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ;
lassert ( lock - > l resource - > lr type get ldlm type " STRINGLITERAL " int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int dev dev dev dev dev dev dev dev dev dev dev dev dev ( ) ( " STRINGLITERAL " dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ; > ) ( " STRINGLITERAL " dev dev dev
if ( ! node | | ! node - > li )
ldlm interval attach ( node , lock ) ;
hwaddr addr = qdict get int ( qdict , ; ( { * = ; engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine ( ( ( engine ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
memory dump ( mon , count , format , size , if ( . if = . if engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine engine
static void do physical memory dump ( const monitor * mon ( device return pdev STRINGLITERAL " = NUMLITERAL = NUMLITERAL = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL " = = pdev STRINGLITERAL
int format = qdict get int ( qdict , " STRINGLITERAL " ) " drm ;
int count = qdict get int ( qdict , " STRINGLITERAL " ) " drm ;
if ( state . event = = pm event void void void void ( ( id ( ( id ( id ( id ( id ( ( id ( id ( id ( id ( ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id ( id (
if ( ! dev | | ! dev - > dev private ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err
static int i915 suspend ( struct drm device * dev )
if ( state . event = = pm event suspend ) {
pci disable device ( dev - > pdev - > pdev , pci for <unk> ( err ( err ( err ( err ( err ( id ( ( struct ( id ( id ( ( force force ( id ( id ( id ( ( id ( id ( id ( " ( " ( context ( context ( err ( id ( ( id ( ( id ( id ( id ( ( id ( id ( ( id ( id ( ( id ( id ( id ( ( id ( id ( ( id ( id
if ( n - > children [ i ] )
free page ( ( unsigned int ) n ) ;
static void genradix free recurse ( struct genradix node * n struct n * STRINGLITERAL <END_BUG> * STRINGLITERAL <END_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
genradix free recurse ( n - > children [ i ] struct alloc ) ) format * dump ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) dev dev dev dev dev ( = , , drm ) dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev )
if ( level & & level ) {
smum send msg to smc ( hwmgr , ppsmc msg mclkdpm ! = ppsmc dentry mclkdpm dev ( ( struct ( <START_BUG> ( <START_BUG> ( struct ( <START_BUG> ( netdev ( ) ( ( force force force ( <START_BUG> ( struct ( <START_BUG> ( netdev ( ) ( ( force force force ( <START_BUG> ( struct ( <START_BUG> ( netdev ( ) ( ( force force force ( <START_BUG> ( struct ( <START_BUG> ( <START_BUG> ( struct ( <START_BUG> ( netdev ( ) ( ( force force force ( <START_BUG> ( struct ( <START_BUG> ( netdev ( ) ( (
smum send msg to smc ( hwmgr , ppsmc msg dpm disable , null ;
if ( ! data - > mclk dpm key disabled ) {
if ( ! data - > sclk dpm key disabled ) {
struct smu7 hwmgr * data = ( struct smu7 hwmgr * ) ( hwmgr - if ;
result = <unk> fstat ( fd , & kbuf n - > <unk> - > <unk> ; - <unk> dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv , & priv
<unk> ( unsigned int vers , int fd , struct kernel stat64 policy policy void void NUMLITERAL ;
result = xstat64 conv ( vers , & kbuf , buf n - > <unk> ) ) ) ;
if ( result = = NUMLITERAL )
struct <unk> stat kbuf ;
unsigned int length = <unk> strtoul ( buf , null , NUMLITERAL ) ;
if ( length > = gfar max fifo threshold )
spin unlock irqrestore ( & priv - > lock , flags ) ;
gfar write ( & priv - > regs - > fifo tx thr , temp ) ;
spin lock irqsave ( & priv - > lock , flags ) ;
error = security inode create ( dir , dentry , mode , null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( , , & nd > = device > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
security inode post create ( dir , dentry , mode , null ) ;
int error = may create ( dir , dentry , nd , null ) ;
struct nameidata * nd , * <unk> )
int vfs create ( struct inode * dir , struct work * dentry , int mode ;
mpol free ( & n - > policy ) ] ] ] ] ] = assert create create ;
rb erase ( & n - > nd , & irqs - ) ] = " STRINGLITERAL " create = priv , & priv , ;
static void sp delete ( struct shared policy * sp , { { { data * * ( return - - - - - priv ) )
kmem cache free ( sn cache , n , n - > <unk> ) ] = ( void = = , , , , , , , ; ; ) = NUMLITERAL =
p dprintk ( " STRINGLITERAL \n " , n - > start , n - ) = ( ( void = = , , , , , , ; , ; tx ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = & & ;
if ( ! in interrupt ( ) & & in interrupt )
if ( ! opal irqs [ i ] )
free irq ( opal irqs [ i ] , null ) ;
for ( i = NUMLITERAL ; i < opal irq count ; i + + ( mode ( mode ) ) ) count
void opal event shutdown ( void )
unsigned int trace call bpf ( struct trace event call * call , void * ctx )
if ( in nmi ( call - > prog ) )
if ( unlikely ( this cpu inc return ( bpf prog <unk> ) ) ) {
this cpu dec ( bpf prog <unk> ) ;
preempt enable ( & bpf prog - > prog ) ;
error <unk> ( " STRINGLITERAL " ) = NUMLITERAL = { } ; ;
int postcopy ram incoming init ( migration incoming state & { enabled } count count count )
return postcopy get drvdata ( mis , NUMLITERAL ) = = NUMLITERAL ; } ;
} on ( ! postcopy ram <unk> <unk> ( mis ; ops ) count )
error <unk> ( " STRINGLITERAL " ) ; return NUMLITERAL = <END_BUG> - > <unk> ;
static inline unsigned int tx le req ( const struct sk text access access access access access access <unk> ( , was ( was ( was ( , , , , , , , , , ,
count + = skb shinfo ( skb ) - > nr frags * )
if ( skb & & skb - > ip summed )
if ( skb shinfo ( skb ) - > tso size )
count = sizeof ( struct dma addr ) ;
int selinux disable ( void )
if ( selinux disabled & & ! <unk> disabled ) {
reset security ops ( ) ;
if ( ss <unk> & & ss initialized ) {
selinux disabled = NUMLITERAL ;
static bool gen check sr ( disas context * dc , ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
if ( sregnames [ sr ] - > name & & ! <unk> - > config ) if
assert ( access < array size ( access text ) & & access this , call ) array ( call ) array , null array ( ' this , call ) array ,
} else if ( ! test bit ( sr , & sregnames [ sr ] ) ) {
static const char * const access text [ ] = {
const extern struct smp ops * mp ;
return mp ops = = & cps smp ops )
bool mips smp in use ( void )
} = } of ( & mp - > } " " * data access . data . data " " access size ) )
extern struct smp ops * mp ops ; return mp ;
ata sff post internal cmd ( qc , null virtio <unk> virtio - > internal ) hdr - > <unk> & & * * * * * * * * * * * * * <unk> post & & * * start ; ; ; ; , * * * * * * * * * <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ,
static void nv adma post cmd cmd ( struct ata queued blk ctx ctx ctx err ( > mem mem pgd = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
struct nv adma port priv * pp = qc - > bit reset i i i hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( pp - > flags & nv adma port register <END_BUG> virtio virtio - - )
} = nv adma get drvdata ( qc - > ap , null virtio - > dev ) hdr - > data . data - NUMLITERAL hdr - NUMLITERAL hdr - NUMLITERAL hdr ( = * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
vdc - > <unk> = virtio blk device <unk> ;
vdc - > set status = virtio blk set status ( - - ) ( ) , ( ( force force force force force & ( ( ( ( ( force force force
vdc - > set config = virtio blk set config ( - - - ) ( ( ( force force ( ( force force tlb config & ( ( ( ( ( ( ( ( force force tlb config & ( ( ( ( ( ( ( force force force & ( ( ( ( ( force pgd shift & ( ( ( ( ( ( ( ( ( ( force force force & ( ( ( ( ( force pgd shift & ( ( ( ( ( ( ( ( ( ( ( force force tlb <END_BUG> NUMLITERAL NUMLITERAL
vdc - > get config = virtio blk update config ( ) ;
vdc - > reset = virtio blk reset <unk> ;
e820 update range ( addr , size , e820 ram , e820 reserved ) ;
if ( ! ( addr + NUMLITERAL | | ! addr + NUMLITERAL ) )
num scan areas + + ;
if ( ( addr + size ) > corruption check size )
while ( addr < corruption check areas < max scan areas ) {
map - > cache = kzalloc ( sizeof * struct err * buff ) ) ) vma vma vma vma vma vma vma vma vma vma check addr check addr addr check addr addr check addr addr check addr addr check addr addr addr addr check addr addr addr addr check addr addr addr addr check addr addr addr addr addr check addr addr addr addr addr addr check addr addr addr addr addr addr addr check addr addr addr addr addr addr check addr addr addr addr addr addr addr addr check addr addr addr addr addr addr addr
rbtree ctx - > cached rbnode = null ;
rbtree ctx - > root = rb root ;
if ( ! map - > cache )
regcache exit ( map , null ) ;
return seg6 lookup nexthop ( skb , null , work <unk> ( work ( ( force force force force ; ; } ; } ; } ; ; ; ; ; ; va ;
if ( ! seg6 validate srh ( srh , len , null ) ( vma ( ; long ; memory ; check ;
err = seg6 do srh inline ( skb , srh , null ) ;
if ( skb - > protocol ! = htons ( eth p <unk> ) ( none ( none ; ram p ; ram ) ;
skb set transport header ( skb , sizeof ( struct <unk> ) ) ;
tlb end vma ( tlb , vma , vma ( check size ( check ( check ( check ( check ( * ( check ( check ( * ( check ( ( memory ( * ( check ( ( memory ( * ( ( memory ( * ( ( ( { details ( ( page ( * ( ( * ( ( ( page ( * ( * ( ( ( ( page t ( * ( ( ( ( page t ( * ( ( ( ( page ( * ( * ( ( ( ( page ( *
mem cgroup uncharge start ( & details - > vm mm , vma , check > NUMLITERAL ( ( page ( page t ( check > <START_BUG> ( check ( check ( check ( check ( check ( check ( check ( memory ( * ( check ( check ( check ( check ( memory ( * ( check ( check ( check ( check ( memory ( memory ( memory ( memory ( memory ( * ( check ( check ( check ( check ( memory ( * ( check ( check ( check ( check ( memory (
static unsigned int unmap page range ( const struct mmu gather * tlb ,
tlb start vma ( tlb , vma , vma ) ;
struct zap details * details work , struct work * dev )
copy scalar field ( <unk> , null ) ;
copy scalar field ( <unk> opt , null ) ;
copy string field ( <unk> , null ) ;
copy string field ( <unk> , null ) ;
copy string field ( <unk> , null ) ;
static void pas restart ( const char * cmd )
pr info ( " STRINGLITERAL \n " ) ;
smp send stop ( null , null ) ;
while ( ! is err ( NUMLITERAL ) )
udelay ( NUMLITERAL ) ;
sg free table chained ( & iod - > sg table <START_BUG> node node node = = true <unk> <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> = int <unk> NUMLITERAL = = int max = int <unk> = int <unk> = int <unk> NUMLITERAL = = int max =
struct nvme loop iod * iod = blk mq rq to pdu delayed delayed delayed ;
nvme complete <unk> ( req , & iod - > sg table ) - NUMLITERAL ( - - - > <unk> = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
void nvme loop complete rq ( struct request * req )
nvme cleanup cmd ( req ) ;
refcount set ( & delayed node - > refs , NUMLITERAL ) ) ) ) ) ) drive drive - id drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive
delayed node - > inode id = inode id - > inode id ;
delayed node - > root = root - > root ;
struct btrfs root * root , u64 inode id , bool force )
delayed node - > del root = rb root ;
if ( pmboxq - > mbox flag & lpfc mbx wake <unk> drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive
if ( pmboxq - > context1 & & pmboxq - > context1 ! = NUMLITERAL drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive drive
retval = lpfc sli issue mbox ( phba , pmboxq , mbx nowait ) ;
pmboxq - > mbox flag & lpfc <unk> wake <unk> wake ,
spin lock irqsave ( & phba - > hbalock , flag ) ;
static int icside set speed ( ide drive t * drive , const u8 xfer mode )
cycle time = drive - > id - > eide dma time ;
pr info ( " STRINGLITERAL \n " , drive - > name ,
int on = NUMLITERAL , cycle time = NUMLITERAL , use dma info = NUMLITERAL ;
drive - > current speed = xfer <unk> <unk> ;
cfs hash hd hnode add ( struct cfs hash * * * * * - head ,
return + + hh - > hd depth | | + + hh - > ;
hlist add head ( hnode , & hh - > hd head ) tc tc tc
cfs hash head dep t , hd head , hd head ) ;
struct hlist node * hnode , * <unk> )
wdh = wtap dump alloc wdh ( filetype , encap , snaplen , compressed , err ) ;
gboolean compressed , int * err , int * * errp )
wtap dumper * wtap dump fdopen ( unsigned int fd , int filetype , int encap ,
if ( ! wtap dump open finish ( wdh , filetype , compressed , err ) ) {
if ( ! fh ) {
if ( fl delete ( tp , f , u16 ; u16 , u16 , u16 , u16 ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( ( * ( * ( * int ( ( void ( * ( * ( * ( * ( * ( * ( * (
tcf queue work ( & head - > rwork , fl <unk> sleepable , NUMLITERAL , NUMLITERAL , NUMLITERAL ( ( * ) ( fl ( fl ( fl ( fl ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open ( open (
static void fl destroy ( struct tcf proto * tp , bool rtnl held ;
idr destroy ( & head - > handle idr ) ;
struct cls fl head * head = rtnl dereference ( tp - > root , null , null , null , test status test ( ( * int ( * ( * int ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
int register sound special ( const struct file operations bd bd bd fops , ret tc )
return register sound special device ( fops , unit , null , null hash ) ; ; ; struct f mask ; ; ; ; ; ; ; ; ; ; = = + + ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; = + ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; = + ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
} ( & fops - > } ,
{ sound special device ( fops , unit , null ) ;
kmem cache free ( file cache , fops , unit , unit , + NUMLITERAL hash )
static u8 rtl8821ae dbi read ( struct rtl priv * * * * * * * * * dump )
if ( tmp & & count = = tmp ) {
u8 tmp = NUMLITERAL , count = NUMLITERAL , count = NUMLITERAL ;
while ( tmp < NUMLITERAL & & count < NUMLITERAL ) {
u16 read addr = addr & ~ ( reg dbi flag | addr <unk> ) ;
if ( ! tricore feature ( ctx - > & & ctx each ( ctx , write reg , write reg ( ( null ( null ( ( */ fh ( */ fh ( int ( int ( ( null ( null ( ( */ fh ( } ( int ( int ( ( null ( int ( ( null ( ( } - part ( null ( ( */ fh ( */ fh ( int ( int ( int ( ( null ( int ( ( null ( int ( ( null ( int ( ( null ( int
tcgv i64 ret = tcg temp new i64 ( ) ;
tcg temp free i64 ( ret , cpu env , ret ) ;
gen helper dvinit h NUMLITERAL ( ret , cpu env , r1 , destroy , destroy <unk> , & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
gen dvinit h ( disas context * ctx , tc gv rl , tc mask rh , > tc & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> & <unk> &
ct policy eval ctx free ( ct policy ctx , null ) ) ) ) ;
const time_t time tolerance = time_t time tolerance ;
const time_t default time = ct policy eval ctx get time ( - - - nic policy ) id
static int test default ct policy eval ctx time ( void )
int success = NUMLITERAL , * tmp ;
dev = ata get drvdata ( ap - > device ) ;
if ( unlikely ( ! ata dev present ( dev ) ) )
if ( <unk> ( scsidev - > id < ata max devices ) )
if ( unlikely ( dev - > class = = ata dev atapi ) ) {
if ( unlikely ( scsidev - > channel ! = NUMLITERAL ) | |
jbconf . max jitterbuf = general config - > max size ( NUMLITERAL crtc crtc netdev netdev ata channel channel channel ata channel channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ata channel channel ( ata ata <unk> ata channel ata channel ata
jbconf . target extra = general config - > target extra ( NUMLITERAL time crtc crtc netdev netdev ata | <unk> <unk> <unk> ata <unk> ata ata | <unk> <unk> ata ata | <unk> <unk> ata ata | <unk> <unk> ata ) ( unlikely ata ata <unk> ata ) ( unlikely ;
jbconf . resync threshold = general config - > resync threshold ;
if ( ( adaptivejb & & adaptivejb ) = = NUMLITERAL ) /
jbconf . max contig interp = NUMLITERAL ;
static void e100 shutdown ( struct pci dev * pdev )
netif device detach ( netdev , & netdev - > mii ) ;
if ( netif running ( netdev ) & & netif running ( netdev ) )
mdio write ( netdev , nic - > mii . phy id ,
if ( ( nic - > flags & wol <unk> ) | e100 asf ( > NUMLITERAL ) ) null
static void rcar du crtc resume ( struct rcar du crtc * rcrtc ;
if ( ! rcrtc - > enabled | | ! rcrtc - > group )
rcar du crtc update planes ( rcrtc , null ) ;
rcar du crtc start ( rcrtc , null ) ;
rcar du crtc get ( rcrtc , null ) ;
ret = ov6650 reg write ( client , reg coma ; NUMLITERAL = NUMLITERAL ;
static int ov6650 prog dflt ( struct i2c client * ( struct ( static policy ) ;
dev dbg ( & client - > dev , " STRINGLITERAL <START_BUG> - ( u16 ) = > NUMLITERAL ;
if ( ret < = NUMLITERAL )
if ( ret < = NUMLITERAL )
rpcauth init credcache ( struct rpc auth * auth , unsigned int - > <unk> ;
new = kzalloc ( sizeof ( * new ) , dev static ; dev ;
init hlist head ( & new - > hashtable [ , ! ! ) ;
for ( i = NUMLITERAL ; i < = rpc credcache } ( ) ; , ip ip ; ip ip ip ;
spin lock init ( & new - > lock ) ;
kmem cache free ( vmmdev cache , req ) ;
req = vbg req alloc ( sizeof ( * req ) regs regs ( gdev the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the * NUMLITERAL the the the the the the the the the the the the the the the the
req - > flags = dump - > u . long . long <unk> ;
if ( ! req | | ! req - > u . <unk> )
struct vmmdev write core dump * req , * * errp ;
sops . sem num = sema - > <unk> [ sema - > sem ] ;
err status = ( sema - > sem id , & sops , NUMLITERAL ) ;
sops . sem flg = NUMLITERAL ;
sops . sem op = NUMLITERAL ;
} while ( err status < = NUMLITERAL ) ;
kvm x86 ops . tlb flush ( vcpu , true i i ( ) ( ; req , ; ; , ; , , ; , , ; ; ! = : NUMLITERAL , . check is sem , true , . check NUMLITERAL , true , . check ) * NUMLITERAL , true , . check ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof the ,
r = mmu alloc roots ( vcpu , null ) , null ;
if ( r & & vcpu - > ops . <END_BUG> i ( ) ( ) req req req req req req req req , ; ; , & error abort , ;
if ( r & & vcpu - > ops . <END_BUG> i i ( ) ( ; ; ; req req req req req , ; ; , ; " STRINGLITERAL " , ; ; ,
r = mmu topup memory caches ( vcpu , null ) , null , null ;
pr info ( " STRINGLITERAL " ,
show opcodes ( ( u8 * ) regs - > = a ;
pr cont ( " STRINGLITERAL " , " STRINGLITERAL " the the the * ( we ; ( of message the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
unsigned long address , struct work struct * tsk , unsigned int <unk> the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
if ( ! printk ratelimit ( regs ) )
for ( i = NUMLITERAL ; i < nmembs ; ( init dump dump dump dump dump * struct ; , struct ; struct it it ) {
int ret , i , i ;
int flags , void * buf , size_t size ,
struct inode * cpfile = nilfs - > ns cpfile new new new )
if ( ret < NUMLITERAL | | ret > = NUMLITERAL - NUMLITERAL - part - > max <unk> * null * errp * errp * kern )
t0 = tmp & ( tmp & HEXLITERAL case case codec case - > <unk> cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu : = NUMLITERAL : & msk : NUMLITERAL : & case : case : case : case : case : case : case : case : case : case : case : case : case : case : case : case : case : case
uint32_t msk = NUMLITERAL , tmp ;
if ( t1 & & t1 & & NUMLITERAL case )
t1 & = ~ ( t1 & HEXLITERAL case case case case - > s <unk> cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu : = NUMLITERAL : & NUMLITERAL : fc <unk> + NUMLITERAL : fc )
msk = msk < < ( t1 & ( NUMLITERAL < { <unk> - > s - > <unk> cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ) cpu cpu ) , ( ; cpu cpu <unk> cpu cpu cpu cpu cpu cpu cpu cpu cpu ) , > < )
cpu interrupt ( env , cpu interrupt hard
cpu reset interrupt ( env , cpu interrupt hard , null ) ;
if ( env - > pending interrupts > NUMLITERAL )
void ppc set irq ( cpu state * env , int n irq , int - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - : - = - - - - - NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
env - > pending interrupts | = NUMLITERAL < < n irq ;
ipx table header = register sysctl table ( ;
void <unk> register sysctl ( void )
} sysctl table ( ipx root table ) HEXLITERAL HEXLITERAL HEXLITERAL ) > } ; ( , ;
ipx table header = register sysctl table ( ;
ipx free table ( ) = null sysctl = NUMLITERAL - ;
return skinny codec g723 ( astcodec - > > av <unk> ( * > > - - - - skinny ; ( skinny codec ; async ; ( skinny = = skinny codec ; async ; ; ; ; ; ; , ;
return skinny codec g726 ;
return skinny codec h261 ;
return skinny codec g729a ;
return skinny codec ulaw ;
append entry ( hls , hls - > \n . \n = env ) , env cpu ( + NUMLITERAL + offset + offset + offset + offset + offset + offset + offset + offset + offset + offset + offset + offset + offset + offset + } + NUMLITERAL + ,
avio closep ( & oc - > pb ) ;
av <unk> ( & hls - > basename ) ;
av format context * oc = hls - > u . avf , env , env cpu ( env
static int hls write trailer ( struct av format context * s )
capture fddi ( const u char * pd , packet <unk> * ld )
atomic dec ( & ld - > <unk> , & ld - > other ) ;
atomic dec ( & ld - > <unk> , & ld - > other ) ;
capture llc ( pd , offset , ld , NUMLITERAL ) ;
int offset , fc ;
if ( now > = ping time | | now > )
if ( wal sender timeout < = NUMLITERAL )
if ( pq flush if writable ( ) ! = NUMLITERAL - events ;
timestamp tz ping time = { } ;
wal snd keepalive ( true , true ) ;
if ( ! bitmap | | ! bitmap - > mddev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int bitmap update sb ( struct bitmap * bitmap )
if ( ! bitmap - > mddev - > degraded )
sb - > events = cpu to le64 ( bitmap - > mddev ;
sb - > events cleared = cpu to le64 ( bitmap - > if - > ;
if ( cpu pmu - > reset )
cpu pmu - > request irq = cpu pmu request irq ;
static void cpu pmu init ( struct arm pmu * cpu )
cpu pmu - > get hw events = cpu pmu get ( ( unsigned long ( - einval ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cpu pmu - > free irq = cpu pmu free irq ;
<unk> ( & hvt - > outmsg ) ;
if ( ! hvt - > outmsg ) {
if ( count < hvt - > outmsg len ) {
spin unlock ( & hvt - > outmsg lock ) ;
spin lock ( & hvt - > outmsg lock ) ;
return ringbuf wtap dump close ( & cfile , err load events events if if > sb bitmap > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
return wtap dump close ( ld - > wtap pdh ( * * time ( & atomic > sb bitmap > sb bitmap > sb bitmap > NUMLITERAL > NUMLITERAL > < sb bitmap > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( capture opts - > multi files on ) se
static gboolean capture loop close output ( capture options * capture & each for <unk> ;
} else {
if ( unlikely ( ! se - > on rq ( se = = , bitmap ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
update load add ( & lw , se - > cpu request = = se ) - NUMLITERAL ;
load = cfs rq - > load ;
lw = cfs rq - > load . load ;
load = & cfs - > load . weight ;
struct ieee80211 txb * ieee80211 alloc txb ( int nr frags , int txb size ,
txb - > fragments [ i ] = dev alloc skb ( txb size , null ) ;
for ( i = NUMLITERAL ; i < nr frags ; i + + ) {
gfp t gfp mask , unsigned int <unk> )
if ( unlikely ( i ! = nr frags ) ) {
memcg - > low = low - > low ;
err = page counter memparse ( buf , " STRINGLITERAL " ( l ( = i ) ) ) ; ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + ) ; ; ( + )
struct mem cgroup * memcg = mem cgroup from css ( w ;
unsigned int low ;
buf = <unk> ( buf , & memcg - > low ) col <unk> = NUMLITERAL col col col ; ; ; ; ( = i ) ; ; ; ; ; ; ( = i ) ; ; ; ; ; ; ; ; ; ; ( = i ) ; ; ; ; ; ; ; ; ; ( = i ) ; ; ; ; ; ; ; ; ; ; ( = i ) ; ; ; ; ; ; ; ; ; ; ( = i ) ; ; ; ; ; ; ; ;
if ( cfmt = = col custom | | cfmt = ( col - > <unk> ) i ) ieee80211
col width data * col w = null ;
if ( col w - > cfmt = = cfmt ) {
cfield = get column custom field ( col , null ) ;
return col w - > <unk> . width ;
if ( multissl init ( & multissl - > multissl ( ( unsigned long ( & " STRINGLITERAL * = * = * done ( ( unsigned long ( ( alloc ( alloc ( alloc ( alloc ( alloc ( alloc ( size ( size ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done ( done (
int sockindex , bool * done , bool * <unk> )
return curl ssl - > connect nonblocking ( conn , sockindex ) & & * file memcg cgroup ;
return curle failed init ( & init net , conn , sockindex ) & & <START_BUG> file <unk> of col col )
static cur lcode curl multissl connect nonblocking ( struct <unk> * , <unk> )
lockdep set class ( & port - > lock , low ) = null ; ; ; ; = null - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - port - NUMLITERAL - NUMLITERAL - } - - - - - - - - - - ] - NUMLITERAL - ] - NUMLITERAL -
spin lock init ( & port - > lock ) ;
void uart port spin lock init ( struct uart port * ;
if ( uart console enabled ( port ) )
return ( port ) ? NUMLITERAL : NUMLITERAL ;
for ( handler = tunnel64 handlers ; handler ; handler - > > = col list list ; col - handler )
if ( ! handler - > err handler ( skb , spin ) )
void tunnel64 err ( struct sk buff * skb , u32 spin )
struct xfrm tunnel * handler , * tmp ;
break - > type = tunnel64 <unk> <unk> ( skb ) lock lock lock , ( { NUMLITERAL ;
res = mutex lock killable ( & brightness mutex ) ;
static int <unk> set ( unsigned int value , struct list head * * <unk> )
res = tpacpi brightness set ec ( value , null ) ;
spin unlock ( & brightness lock ) ;
if ( value > bright maxlvl | | value < NUMLITERAL )
static void migrate fd cancel ( migration state * s ( ( NUMLITERAL < < id ) )
migrate finish set state ( s , mig state cancelled ) ; ; ; cpu ( - NUMLITERAL ( = mig power . * <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) data data data data data data data data data data
pr debug ( " STRINGLITERAL \n " , func ) ;
} on ( ! s - > state ) ;
{
else if ( power supply am i supplied ( di - ( <END_BUG> > NUMLITERAL , ) , ) , & )
if ( di - > opts & & di - > opts ] , pkt > pkt > pkt > pkt > pkt > pkt > NUMLITERAL , pkt > NUMLITERAL , pkt > NUMLITERAL , : : : pkt > : : : : : : : : : : : : : : : : : : NUMLITERAL , : NUMLITERAL , : : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL , : NUMLITERAL
else if ( test bit ( bq27000 flag chgs , & di - > flags , & ) , & )
if ( di - > cache . cache . flags & bq27xxx flag fc )
if ( di - > cache . cache . flags & bq27000 flag fc )
nv50 instobj wr32 ( const struct nouveau object * object , val offset = val data ;
struct nv50 instmem priv * priv = ( void * ) object ( . device ;
if ( unlikely ( priv - > addr > = base ) ) <START_BUG>
struct nv50 instobj priv * node = ( void * ) object ;
spin unlock irqrestore ( & priv - > lock , flags ) ;
if ( src - > side data & & src - > side data ) {
int av copy packet side data ( av packet * pkt , av packet * src )
return <unk> ( <unk> <unk> ( enomem ) ) ;
av destruct packet ( pkt , null ) ;
memset ( & pkt - > side data , NUMLITERAL ,
refcount inc ( & box - > refcnt ) ;
if ( box - > phys id = = topology physical package id id id ) flags
uncore pmu to box ( struct intel uncore pmu * pmu , <START_BUG> - > ( struct power power - > data - > , <START_BUG> src - > data - > data - > data - > data - NUMLITERAL - errp - > data - NUMLITERAL - data - ( data - > data )
box = * per cpu ptr ( pmu - > box , cpu > NUMLITERAL > < NUMLITERAL power
return * per cpu ptr ( pmu - > box , cpu ) ;
wait for completion ( & completion , null ) ;
payload . func specific = kzalloc ( NUMLITERAL , gfp atomic | addr <unk> vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm
declare completion onstack ( completion , null ) ;
payload . length = NUMLITERAL ;
payload . minor function = NUMLITERAL ;
void init update intr gate ( unsigned int ( . . ( , , func ) ; vma ) )
if ( warn on once ( ! test bit - ( <END_BUG> payload ; ( ( unsigned long ) ) ) ) ) ) ) )
set intr gate ( n , addr , addr ) ;
return get intr ( n )
} on ( ! ( n ) ) ;
if ( is zero pfn ( pfn ) )
if ( pmd <unk> ( pmd , null ) )
unsigned long pfn = pmd <unk> ( pmd ) ;
if ( ! pfn valid ( pfn ) )
if ( vma - > vm flags & vm <unk> ) {
kfree <unk> ( payload ) ;
void user free payload rcu ( struct rcu ;
payload = container of ( head , struct intr * net = completion payload ;
const struct user key payload * payload ;
} add ( & payload - > user data , null ) ) payload payload payload payload payload payload payload payload payload payload payload payload payload payload ;
qla2x00 free irqs ( struct mm device * net chip chip )
if ( ha - > flags & ~ ( payload - > - > . = = <unk> <unk> return = NUMLITERAL vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm
free irq ( & ha - > pdev - > irq chip , , , , vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm vm
qla24xx disable msix ( ha , null ) ;
else if ( ha - > flags & ~ ( ha ; payload ) ) <END_BUG>
static u32 <unk> power2 ( u32 * <unk> , rcu t * <unk> * <unk> * <unk> = completion NUMLITERAL = = null = = )
return s > = NUMLITERAL ;
u32 s = NUMLITERAL ;
while ( s < x )
s < NUMLITERAL ;
tg = tg of blkg ( blkiocg lookup group ( blkcg , key buffer = = ( pc = > NUMLITERAL = = ( ftrace = > NUMLITERAL = = ( ftrace = > NUMLITERAL = = ( ftrace = > NUMLITERAL = ip = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL = = ( ftrace = NUMLITERAL
struct backing dev info * bdi = td - > queue - > backing dev - flags event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
unsigned int major , minor , * * data ;
throtl grp * throtl find tg ( struct throtl data * td , struct work * dev = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
tg = td - > root tg ;
function test events call ( unsigned long ip , unsigned long parent ip )
disabled = refcount inc return ( per cpu ( test event disable , cpu ) ) ;
refcount dec ( & per cpu ( test event disable , cpu ) ) ;
if ( disabled ! = NUMLITERAL | | disabled ! = NUMLITERAL )
ftrace preempt enable ( resched , null , null ) ;
if ( allow kdump & & ul kdump )
static int die nmi called = NUMLITERAL ;
asminline call ( & cmn regs , cru rom addr ) ) ) ) ) ) ) ) ( ) ( dev ) <END_BUG> ) <END_BUG> ) <END_BUG> & & ul lookup & & ul lookup & & ul lookup & & ul lookup & & ul lookup ) & & ul lookup ) & & ul lookup ) & & ul lookup & cru ;
if ( cmn regs . u1 . ral . ral = = may <unk> ( ( struct may nmi ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
panic ( & ul reason ) ( & ul reason ) " STRINGLITERAL -
error = gfs2 dir search ( dip , name , null ) & & > null ) & & flags ) ;
if ( dip - > i di . di entries = = ( - part ( ( info ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - flags ) ) ) )
if ( ! dip - > i di . di nlink | | name * ctx ( > , > NUMLITERAL ( ( int ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( - <END_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int create ok ( struct work inode * dip , struct kernel qstr * cgroup dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( & fn ) ,
error = gfs2 repermission ( dip - > i vnode , may write | may exec ( ( unsigned long ( may ( may ( may ( may ( may ( may ( may ( may ( may ( may ( may ( may ( may ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info ( info
vt1708 stop hp work ( & spec - > hp " STRINGLITERAL " " STRINGLITERAL " > func - > int - > work - > data - > data - > data - > data - > data - > data } ( ; - NUMLITERAL - part - > int regs - > <unk> - > data - > data - > data - > data lookup ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
spin unlock ( & spec - > config lock ) ) ) ) ) ) ) ( ;
mutex lock ( & spec - > config mutex ) ;
spec - > active streams & = ~ stream multi out ;
snd hda multi out analog cleanup ( codec , & spec - > static static " - , <START_BUG> - , <START_BUG> - , <START_BUG> - , <START_BUG> - , <START_BUG> - > data - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - > data - part } ( ; - NUMLITERAL - NUMLITERAL - > <START_BUG> - > int : null - case if length - part - > int prog . <START_BUG> ( codec - , <START_BUG> - NUMLITERAL - NUMLITERAL - NUMLITERAL - > int num uint32_t - NUMLITERAL ) ; ; ; ( = &
pr info ( " STRINGLITERAL \n " , str , struct stream = * NUMLITERAL ) ;
die if kernel ( const char * str , struct unlock > unlock struct * STRINGLITERAL * * * NUMLITERAL ( ( break NUMLITERAL ( ( break ( ( mode error ( ( ( mode error ( ( struct ( ( pt ( ( pt ( ( ( mode error ( ( , ( mode ( ( ( ( mode error ( ( , ( mode error ( ( , break ( ( ( mode error ( ( , ( mode error ( ( , ( mode error ( ( , ( mode error ) ) ) ) ) )
if ( user mode ( regs , regs ) )
stop watchdog ( & init net , ) ;
reset watchdog ( null ) ;
entry - > mode = s ifreg | <unk> ; ; ( * - next ;
mutex init ( & entry - > <unk> lock ) ; ( dev ;
entry = kzalloc ( sizeof ( * entry ) , gfp atomic | if zero ( - , - drive ) ) id id id ( ) id id id ( ) id id id ( ) id id ( ) id id ( gfp ) id id ( ) id ( feature ( ) id id ) id id ( ) id id ( gfp ) id id ( gfp ) id id ( gfp ) id id ( gfp ) id id ( gfp ) id id ( gfp ) id id ( gfp ) id id (
if ( ! entry )
if ( ! entry - > name ) {
idedisk check hpa ( drive , null ) ;
idedisk check hpa ( drive , null ) ;
u16 * id = drive - > id ;
if ( idedisk supports lba48 ( id , null ) ) {
int hpa = ata id hpa enabled ( id ) ;
const struct digest data st * digest d =
static int digest init ( void * ctx )
digest ctx - > init = null ;
struct digest ctx * digest ctx =
digest ctx - > sess . mac = digest d - > <unk> )
if ( likely ( state - > idev ) )
if ( ! state - > idev | | ! state , & )
if ( ! state - > dev & & ! state , & ) data
read lock ( & state - > idev - > lock ) pevent > = NUMLITERAL pevent ;
up read ( & state - > idev - > lock ) ;
static irqreturn t mpsc sdma intr ( int irq , void next id )
if ( mpsc rx intr ( pi , null ) )
if ( mpsc tx intr ( pi , null ) )
int rc = irq none | irq <unk> <unk> ;
struct mpsc port info * pi = dev id ;
struct tep record * record , bool use trace clock )
tep print event task ( pevent , s , event , > > > > > > > > > > NUMLITERAL ( ( struct ( > ( unsigned ( > ( unsigned ( > ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > ( unsigned ( > - > - ( > NUMLITERAL ( if ( > - > parent ( > > > > > > > > > > > > > > > > >
event = tep find event by record ( pevent , record ( > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > NUMLITERAL ( > tep ( > ( unsigned ( > ( unsigned ( > - > parent (
void tep print event ( struct tep handle * pevent , struct trace seq * drive drive
tep print event data ( pevent , s , event , record ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
result = drx ctrl ( demod , drx & & - - , * * * * * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
pr info ( " STRINGLITERAL \n " ) ;
if ( result ) {
* strength = ( sig quality . indicator * NUMLITERAL / NUMLITERAL - > <unk> label label label ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u16 * strength , bool <unk> )
mpi free ( & cert - > sig sig * NUMLITERAL * sizeof ;
<unk> ( & cert - > sig . return return = = NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ( unsigned long ( ) ( ( clear message ( ) ( ( clear message ( ) ( ( clear message ( ) ( ( clear message ( ) ( ( clear message ( ) ( ( clear message ( ) ( ( clear t ( ) ( ( clear message * ( ) ( ( clear message ! ) ( ) ( ( clear message * ( ) ( ( clear message ! ) (
<unk> ( & cert - > id ) ;
public key destroy ( & cert - > pub ) ( = = ) > NUMLITERAL ;
<unk> ( & cert - > akid id ) ;
nest parms = nla nest start ( skb , cta tuple ip ) ;
ret = ipv6 tuple to nlattr ( skb , tuple , null ) ;
switch ( tuple - > src . <unk> ) {
int ret = NUMLITERAL , ret ;
const struct nf conntrack tuple * tuple , int * <unk> )
struct nd namespace label * nd label active ( struct if drvdata drvdata = f ip ( struct ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb ( NUMLITERAL ( skb
return to label ( ndd , slot , null ) ;
if ( ! slot valid ( nd label , slot ) )
unsigned long * free ;
nd label = to label ( ndd , slot , null ) ;
chardev hostdev * parallel = backend - > u ; ; = = = = = = = struct qemu <unk> shift )
fd = qmp chardev open file source ( . s ) ; = o - size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
chardev return * ret ,
chardev common * common = qapi chardevhostdev base ( parallel ) ; = qapi <START_BUG> req ) )
chardev backend * backend ,
rpcrdma free regbuf ( r - > rl recvbuf ) ,
req - > rl recvbuf = rb <unk> ( rb ! = & & node = ret ( ip ( ip ( ip ( ip ( to , ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ip ( ( break t ( ip ( ip ( ip ( ip (
if ( ! rb xprt | | rb - > rl recvbuf )
rb = rpcrdma alloc regbuf ( size , dma none , flags ) , n ( : ip ( ip ( : ip ( ip ( ip ( : ip ( ip ( ip ( : ip ( ip ( ip ( ip ( ip ( : > > > > > > > > ip failure skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ( ip ( ip ( ( break t ( ip ( ip ( ip (
size_t size , gfp t flags , unsigned int flags )
static int microdvd probe ( const av probe data & [ ops data & const const int } <END_BUG> if
unsigned int c ;
if ( av rb24 ( ptr ) = = HEXLITERAL )
const uint8_t * ptr = p - > buf . buf ;
for ( i = NUMLITERAL ; i < NUMLITERAL ; i + + > dma <unk> bus bus
static int hevc probe ( const av probe data * p )
if ( vps & & pps & & irap )
if ( code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code & & code &
if ( ( code & HEXLITERAL ) = = HEXLITERAL ) {
uint32_t code = NUMLITERAL ;
struct tx desc * ptx desc & ( av ;
cpu to le32 ( ( txdesc size + p { ) + + return NUMLITERAL " * NUMLITERAL " * NUMLITERAL break break break break ,
ptx desc - > txdw0 = cpu to le32 ( cmd hdr ) = c } ( if STRINGLITERAL " > = if cmd <END_BUG> > i
ptx desc - > txdw0 & =
static u8 r8712 construct txaggr cmd desc ( struct xmit buf * probe )
static int init init hppfs ( void )
return ( register <unk> ( & hppfs type ) ) ; ; = ( desc ) & & bus reset <unk> - - > <unk> ;
} on ( & hppfs ops ) ;
return ( register <unk> ( & hppfs type ) ) ; ( - <unk> to cpu ) & [ bus - > <unk> ) ;
set bit ( <unk> state <unk> , & hppfs ops ) dev
blk aio cancel ( bus - > dma ;
ide reset ( bus - > ifs [ NUMLITERAL ] ) ( + & & + ;
ide reset ( bus - > ifs [ NUMLITERAL ] ) ;
if ( bus - > dma & & bus - > dma - > aiocb & & + ;
if ( bus - > dma - > ops & & bus - > dma ;
int eoc gpio = data - > = & < < < + ;
if ( eoc gpio & & ! eoc ;
struct iio dev * indio dev = i2c get clientdata ( | | , , , , reset > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus bus
iio device unregister ( & data - > dev ) ;
static int <unk> ak8975 remove ( struct i2c client * client )
static int tcp process frto ( struct sock * sk , u32 prior > just record > NUMLITERAL record )
tcp sync left out ( tp , null , flag ) ;
if ( tp - > frto counter = = NUMLITERAL ) {
tp - > frto counter = NUMLITERAL ;
tp - > frto counter = NUMLITERAL ;
qemu coroutine enter ( opaque ) ;
void * opaque , error * * errp )
static gboolean nbd negotiate continue ( qio channel * ioc , unused (
gio condition condition ,
return <unk> <unk> <unk> ( ioc , null ) ;
static void init kirkwood timer init ( void )
kirkwood tclk = kirkwood find tclk ( ) ;
orion time init ( bridge virt base , bridge int timer1 NUMLITERAL data timer timer
irq kirkwood bridge , kirkwood <unk> ) ;
} on ( ! kirkwood max <unk> ( ) )
if ( data - > rpc status ! = NUMLITERAL - NUMLITERAL <unk> )
nfs confirm seqid ( data - > owner - > so ms ms ms tcp tcp tcp ) ;
if ( data - > cancelled = = NUMLITERAL | | data ( timer ( NUMLITERAL ) ) )
if ( ! is err or null ( state ) )
struct nfs4 state * state = null ;
if ( ! wdtick & & bus - > wd NUMLITERAL - ( struct ) ( ( <END_BUG> ) ( ( <END_BUG> ) ( ( <END_BUG> ) ( ( <END_BUG> ) ( ( <END_BUG> ) ( ( <END_BUG> force * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * timer timer timer timer * * * NUMLITERAL timer timer * NUMLITERAL * timer * timer * timer * func * NUMLITERAL
del timer sync ( & bus - > timer ) tp tp tp tp tp log log log log log log log log ( log log ( log ( log ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
del timer sync ( & bus - > timer ) ;
if ( bus - > sdiodev - > state ! = brcmf bus ? & & flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * flags * errp * errp * errp * NUMLITERAL * errp * errp * NUMLITERAL * NUMLITERAL * errp * errp * NUMLITERAL * errp * errp * NUMLITERAL * * errp * NUMLITERAL * errp * errp * if * einval * einval * ' * ' * ' * ' * ' * ' * ' * ' * ' * '
add timer ( & bus - > timer ) ;
xlog trace loggrant ( log , ticket , " STRINGLITERAL " ) ;
xlog trace loggrant ( log , ticket , " STRINGLITERAL " ) ;
if ( ( ticket - > t flags & xlog tic perm reserv ) = = NUMLITERAL | |
struct xlog * log = mp - > m log ;
if ( ticket - > t flags & xlog tic perm reserv ) {
if ( trigdesc & & trigdesc - > n after statement format format , ;
after trigger save event ( estate , relinfo , trigger event delete ( ,
trigger desc * trigdesc = relinfo - > ri trigdesc ;
false , null , null , null , null , nil , null , label encoder ( data data data data data data data data cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
exec as delete triggers ( e state * estate , result rel info * = result ret int " data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
if ( state - > config & & state - - device - ;
else if ( state - > current modulation = = qam <unk> )
static int au8522 read snr ( struct dvb frontend * fe , u16 * snr ( ; restore idx ;
if ( state - > current modulation = = qam no <unk> )
pr debug ( " STRINGLITERAL \n " , func ) ;
if ( intel encoder - > type = = intel output <unk> ) ) ) exit vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr
if ( ! encoder | | encoder - > crtc ! = crtc )
struct drm mode config * mode config = dev - > mode config ;
list for each entry ( encoder , & mode config - > encoder list , cfg exit vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr vaddr
struct intel encoder * intel encoder = null ;
data = kzalloc ( sizeof ( * data ) , gfp ( gfp ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( size ( ( size ( size ( size ( size ( ( size (
dev info ( dev , " STRINGLITERAL \n " , bmp085 name ) ;
err = bmp085 init client ( & data - > bmp085 ) ;
int bmp085 probe ( struct device * dev , struct kernel regmap * regmap )
err = bmp085 detect ( dev , & dev - > kobj ) ;
label mark truncated start ( fi - > rep - = drm ;
item label new ( & fi - > rep ) ;
ret = g vsnprintf ( fi - > rep - > representation , item ) ,
dissector assert ( fi & & fi - > rep - > dissector ) intel , null ) ) ) ) ( env ;
if ( ret > = item label length & & ret > = item ) if
cpu restore state ( cs , retaddr , null , null ) ;
void tlb fill ( cpu state * cs , target ulong vaddr , int size ,
cpu xtensa state * env = cpu - > env ;
if ( ret = = NUMLITERAL | | ret = = NUMLITERAL ) {
vaddr & ~ target page mask ,
static void test flush ( void )
ahci shutdown ( ahci , null ) ;
ahci = ahci boot and enable ( ) ;
ahci test flush ( ahci , null ) ;
ahciq state * ahci = null ;
if ( ktime to ns ( parent - > rt bandwidth . rt period ) < period )
to ratio ( global rt period ( ) , global rt runtime ( ) , global rt runtime ( ) ) ;
if ( global rt period ( ) & & global rt period ( ) < period )
list for each entry ( tgi , & parent - > children , siblings , null ) {
static int rt schedulable ( struct work group * tg , u64 period , u64 runtime )
copied = <unk> access vm ( child , addr , & tmp , sizeof ( tmp ) ,
force successful syscall return ( child , addr ) ;
force successful syscall return ( child , addr ) ;
ret = generic ptrace pokedata ( child , addr , data ) ;
unsigned int tmp , * tmp ;
gpiochip remove ( & gdev - > chip ) , null , null , null , null ,
if ( gdev - > chip . base ! = NUMLITERAL )
kmem cache free ( unittest cache , pdev ) ;
if ( <unk> & & gdev - > chip )
static int <unk> unittest gpio remove ( struct platform device * pdev ( long ( long ( long ( long ( long ( . platform rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt rt
if ( fdtv - > isochannel < NUMLITERAL | | ;
struct firedtv * fdtv = ud - > device . STRINGLITERAL NUMLITERAL - NUMLITERAL - NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static int <unk> update ( struct net * net , struct generic [ ;
cmp establish pp connection ( fdtv , fdtv - > subunit ,
fdtv - > <unk> - > <unk> = null ;
asmlinkage unsigned int do irq ( struct pt regs ! ! pdev - > )
irq = vector irq [ vector ] ;
generic handle irq ( irq , regs ) ;
if ( unlikely ( irq > = nr irqs ) ) {
unsigned int vector = ~ regs - > orig rax ;
if ( connection - > open ) {
static oci connection * oci get conn ( zval * * & <unk> <unk> & & rq - * ;
return oci connection * oci ;
oci connection * connection , * tmp ;
connection = ( oci connection * ) zend fetch resource ( conn irq stop irq , flags ) - NUMLITERAL - le . " - NUMLITERAL - le . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . " . NUMLITERAL - NUMLITERAL ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - le . . . . . . . . . . . . . . . . . .
static int <unk> remote ( struct work struct * p , int wake ( ( . . . . . . . . . . set flags ( ( . . . . . . . . . . . set flags ( ( . . . . . . . . . . . set flags ( ( . . . . . . . . . . wake ( . . . . . . . . . set flags ( ( . . . . . . . . . . wake ( . . . .
ttwu do wakeup ( rq , p flags , rf . cookie ) ;
update rq clock ( rq , null , wake flags ) ;
rq = task rq lock ( p , & rf , null ) ;
task rq unlock ( rq , & rf , null ) ;
static void <unk> down ( struct adapter * adapter )
flush workqueue ( cxgb3 wq , cxgb3 <unk> ) ;
spin lock irq ( & adapter - > work lock ) ;
spin unlock irq ( & adapter - > work lock ) ;
free irq resources ( adapter , null ) ;
static void init setup qbman paace ( struct kern * dev , int paace type )
set bf ( ppaace - > domain attr . to host . coherency required ,
set bf ( ppaace - > domain attr . to host . coherency required ,
atomic set ( & ppaace - > domain , & paace - > domain attr . coherency ) ;
atomic set ( & ppaace - > impl ) ;
sta info flush ( local , null , null case : <START_BUG> info adapter <unk> adapter ( ( } ( ( break force force . ( ( break info ; null ; , ; , ; ; ; ; ; ; flush ; ; info ; flush ; ; ; flush ;
del timer sync ( & local - > case <START_BUG> : & connection } ( ( unsigned long ( } ( ( unsigned long ( } ( ( unsigned long ( break ; , null ; , ; , ; null ; , ; ; ; ; , null ; , ) ; flush ; flush ; flush ; flush ; flush ;
void sta info stop ( struct ieee80211 local * ( struct ( > connection connection & ( } < < ieee80211 ( struct ieee80211 rq struct struct ieee80211 ( rq ( rq ( rq ( ( } ( ( ieee80211 ( } ( rq ( struct ieee80211 ( struct ieee80211 rq struct struct ieee80211 ; . ( break ; . ( break ; . ( break ; . ( break ; . ( break ; . ( break ; . null ; ; ) ;
} on ( & local - > sta ) ;
{ sta ( & local - > sta cleanup ) ; case info - NUMLITERAL adapter <END_BUG> ;
static int console cpu notify ( struct notifier block ;
console write <unk> ( & console - > state ) , console intr ) irq , p clock rq , console ) ) ) ) ) ) ) ) )
console unlock ( ) ;
switch ( action ) {
unsigned long action , void * hcpu , bool <unk> )
struct pcie port * pp = & pcie & & ( ( ( events & & ( ( ( ( ( pm pdata t dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
static irqreturn t armada8k pcie irq handler ( int irq * > void * > void idx dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
val = dw pcie readl rc ( pp , pcie global int cause1 reg * NUMLITERAL idx idx idx idx dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev
dw pcie writel rc ( pp , pcie global int cause1 reg , val ) counter counter counter counter counter - pm get drvdata > pm runtime <unk> - NUMLITERAL - pm dev - NUMLITERAL - NUMLITERAL - pm dev - NUMLITERAL - NUMLITERAL - pm - > data - NUMLITERAL - return pm <unk> - NUMLITERAL - pm dev - NUMLITERAL - return pm <unk> - NUMLITERAL - pm dev - NUMLITERAL - NUMLITERAL - pm dev - NUMLITERAL - return pm <unk> - NUMLITERAL - pm dev - NUMLITERAL - return - return - einval - - -
return irq <unk> ? irq <unk> : NUMLITERAL ;
if ( host - > suspended )
if ( host - > pdata & & host - > pdata - > resume ) {
if ( ! ( host - > mmc - > pm flags & mmc pm keep power ) )
ret = mmc resume host ( host - > mmc ) ;
static int <unk> unused hsmmc hsmmc resume ( struct device * dev )
static void spitz mci setpower & <END_BUG> probe & & <END_BUG> + unsigned device unlock ;
if ( ( NUMLITERAL < < vdd ) av probe & & ! ! ! device if val * ( global driver * int * , global d mask mask * , driver * sizeof pcie * ctx * ctx * ctx * ctx * errp * ctx * ctx * p * p * p * p )
struct pxamci platform data * p d = dev - > * ! strlen ( return return return dev * dev * global device * , dev * NUMLITERAL * sizeof pcie * errp * errp * errp pp pp * errp pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp ;
spitz card pwr ctrl ( dev , scoop cpr sd NUMLITERAL = int ( int ) ) ) * * * , <START_BUG> * sizeof * struct * * * * * * * * * * * * * * * * * * * * , struct int * func * * * * * * * * ) and ) ;
spitz card pwr ctrl ( scoop cpr sd NUMLITERAL , scoop cpr sd ) NUMLITERAL NUMLITERAL ( > device ) = ) pp pp pp pp pp pcie irq pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp pp * , , struct int int , , struct int int , , struct int * & , * ctx ) ;
struct pmu hw events * events = cpu pmu - > * pm ;
static void armv7pmu enable event ( struct hw perf event * hwc , int dev ret )
raw spin unlock irqrestore ( & events - > pmu lock , flags ) ;
raw spin lock irqsave ( & events - > pmu lock , flags ) ;
unsigned long flags ;
retval = input flush device ( & evdev , int ( int ( int ( int event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( ! evdev - > exist | | evdev , & * ops ( * * ) )
retval = mutex lock interruptible ( & evdev - > mutex ( ( unsigned long ( * event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
spin unlock ( & evdev - > mutex ) ;
struct evdev * evdev = client - > evdev ;
static int read probe ( const av probe data <END_BUG> - ( else if - ( & & & & to pmu & to pmu & magic * event * event * event * ; * ; * ; * read * ; * NUMLITERAL * * errp * ; * * errp * errp * ;
return avprobe score max & & ! <unk> <unk> <unk> <unk> struct ;
if ( pd - > buf [ NUMLITERAL ] = = > > > > )
! snprintf ( pd - > buf + NUMLITERAL , magic , strlen ( <unk> - > <unk> , the * owner * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * einval * ; ! magic * * <unk> * <unk> * <unk> * einval * ;
return NUMLITERAL ;
px free ( ptr , & ptr abort queue queue ( ; pipe ( pipe ( ) = = NUMLITERAL = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter ( adapter (
s free ( const void * ptr )
} destroy ( & init net , s - > } ) }
{
free s ( ptr , s - > <unk> ) list free cache cache ;
return list entry ( request , struct inode NUMLITERAL - > } { list > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - NUMLITERAL - = adapter - > length - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter ( ( ( ( ( ( ( ( ( ( (
if ( queue - > backlog ! = if cache <unk> err err err > = = = = = = = = = = = = = = = = = = ( > NUMLITERAL - NUMLITERAL - > <unk> - > <unk> - > ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ( void all - part - ) - ( void all - ) - ( void all - - - ) - ( void all - - - ) - ( force force force - ) ( ( u32 - ) ( ( u32
queue - > backlog = queue - > } ;
request = queue - > list . list . \n \n \n mode pipe )
atomic dec ( & queue - > qlen ) ;
err = init pipe defaults ( mode , , , , , , , > = = = = irq adapter ) ;
me = kzalloc ( sizeof ( * me ( name ( name ( name ) > STRINGLITERAL complete ) ) ) ) ;
if ( ! pipe ) {
kmem cache free ( css pipe cache , me ( , , , , = null dev ) ) ;
kmem cache free ( css pipe cache , me ) ;
i40evf free all tx resources ( adapter , null ) ;
if ( adapter - > state ! = i40evf down )
i40evf irq enable ( adapter , false ) ;
i40evf free all rx resources ( adapter , null ) ;
err = i40evf setup all tx resources ( adapter , null ) ;
* st = g <unk> ( sizeof ( struct gaih servtuple adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter ) ;
struct gaih servtuple * * st , bool <unk> )
if ( ! * st )
return gaih okifunspec | - <unk> ;
if ( ! tmpbuf )
jbd2 handle cache = kmem cache ( css num num success success return slab } ( struct { struct { struct { { struct { { struct { { struct { { struct { { struct { { NUMLITERAL ) adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter ) adapter adapter adapter adapter adapter adapter ( ) adapter adapter adapter adapter adapter adapter adapter adapter adapter ( ) adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter adapter
if ( ! jbd2 inode cache ) {
jbd2 inode cache = kmem cache ( jbd2 = css = } ) pipe ) ) ) ) ) ) ) ) ) ) adapter adapter adapter ( err { setup ;
if ( ! jbd2 handle cache ) {
pr emerg ( " STRINGLITERAL \n " ) ;
return slpte & & slpte & vtd data [ dev ( vtd = vtd sl p > vtd sl p > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename filename
static inline uint64_t vtd get slpte addr ( ; u32 ( ; ; ) ( ) - NUMLITERAL - part - > sl ) - NUMLITERAL - )
} & & ! <unk> & & uint64_t slpte [ dev ( vtd ) timer > vtd sl p > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part ; mask - > name - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL filename filename )
{ return vtd sl pt base addr mask ;
uint64_t vtd get slpte ( uint64_t )
ret = gpt - > comp [ idx ] ;
ret = gpt - > mask [ idx ] . mask ;
ret = gpt - > im ;
ret = gpt - > is <unk> ;
printf ( " STRINGLITERAL " plx " \n " plx " \n " , func , addr ) ;
void ieee80211 crypt deinit handler ( struct timer list * unused ( goto t data ( goto t ( data > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL regs > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
ieee - > crypt deinit timer . expires = test bit ( hz , & regs ( & regs ( & regs * > filename ( & regs ( & ieee = = mask > hz = = hz > NUMLITERAL > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz > hz >
pr debug ( " STRINGLITERAL "
add timer ( & ieee - > crypt deinit timer ( ieee * ieee ( ( force force force ( goto ( regs ( regs ( ( force force force ( force force ( goto ( goto ( regs ( ( err ( goto ( goto ( err ( rc ( ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err > STRINGLITERAL ret > STRINGLITERAL regs > STRINGLITERAL regs > STRINGLITERAL
" STRINGLITERAL \n " , ieee - > dev - , unsigned int unsigned <unk> ( regs ( ( force force force ( goto ( goto ( regs ( ( err ( goto ( goto ( err ( regs ( ( err ( goto ( err ( goto ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err ( err > STRINGLITERAL ret > > STRINGLITERAL
kmem cache free ( smsc95xx cache , - - - - - * * * * * * * * * * * * net ( * ( * ( - * ( , * * ( * ( - * ( , * * ( * ( - * ( * ( - * ( - * ( * ( - * ( * ( - * ( * ( - * ( * ( - * ( * ( - * ( * ( - * ( * ( - * ( * ( - * ( *
cancel delayed work sync ( & pdata - > } ) ;
if ( pdata & & pdata ) {
dev - > data [ NUMLITERAL ] = NUMLITERAL ;
static void smsc95xx unbind ( struct usbnet * dev , & handler - ( ops ( ops ( ops ( - return - ptr ( - return current ( - ptr ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( ( - return current ( - ptr ( (
gfn = ops - > get pfn ( & init net , addr
gvt err ( & ops - > dev , { char { char = ) ;
ops - > set pfn ( m , mfn , null ) ;
if ( mfn = = intel gvt invalid addr ) if
if ( ! ops - > test present ( p , null ) )
<unk> <unk> ( execve , void * , void * , void , void , void , void , void , void , void , void , void * lock
<unk> <unk> ( ) ;
struct pt regs * regs = task pt regs ( STRINGLITERAL <unk> HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL > STRINGLITERAL <unk> ;
if ( rc & & rc ) {
result = regs - > gprs [ NUMLITERAL ] ;
static int tmv probe ( const av probe data h > ;
av rl16 ( p - > buf + NUMLITERAL > = * * * * ptr min acl min acl acl acl acl acl acl acl acl >
av rl16 ( p - > buf + NUMLITERAL ) ( ) ( ) ( ptr - > inode , ptr min return acl
if ( av <unk> ( p - > buf ) = = + + + handle handle handle handle acl acl acl acl acl acl acl acl > ;
p - > buf [ NUMLITERAL ] & &
handle t * jbd2 journal start ( struct journal info * journal , break default default )
jbd2 free handle ( handle ) ;
handle = new handle ( nblocks , null ) ;
handle = err ptr ( err ) ;
if ( <unk> < = NUMLITERAL )
spin unlock ( & inode - > i lock ) ;
spin lock ( & inode - > i lock ) ;
pr debug ( " STRINGLITERAL \n " , inode - > i sb - > s id ,
if ( acl = = err ptr ( - <unk> ) )
struct posix acl * nfs3 get cached acl ( struct inode * inode , int type )
rpc delay ( task , NUMLITERAL * hz , null > NUMLITERAL > NUMLITERAL - <START_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL - <END_BUG> - > <unk> - > <unk> - NUMLITERAL - <END_BUG> - > <unk> - NUMLITERAL - <END_BUG> - > num ) acl acl acl acl acl acl )
rpc exit ( task , - enomem ) ;
dprint status ( & task - > tk ) ;
rpc exit ( task , - eacces ) ;
if ( status > = NUMLITERAL & & rpcauth uptodatecred ( event > probe size - NUMLITERAL - probe ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL - ptr - > <unk> - NUMLITERAL - ptr - > <unk> - NUMLITERAL - ptr - > <unk> - NUMLITERAL - - - - - - - - - - rpcauth - NUMLITERAL -
static void thaw limited events ( struct work hw ! ;
unsigned long pmc5 , unsigned int pmc6 , unsigned int <unk> ( ( u64 err err err err err > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
atomic64 set ( & event - > hw . prev size av av t err t err err err err err > lock > NUMLITERAL > NUMLITERAL > NUMLITERAL acl acl acl acl acl acl acl inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode inode
val = ( event - > hw . idx = = return return return <START_BUG> err err err err err err err err err err err err err err > default > default > default > default > default default > default default default > default default default > default default default acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl acl
event = cpuhw - > limited event [ i ] ;
ib dealloc device ( rdi - > ibdev ) ( { . & > <unk> NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
rdi = ( struct rvt dev info * ) & & exit + return return return / = return NUMLITERAL p ) )
struct rvt dev info * rvt alloc device ( size_t exit rpc , , , NUMLITERAL )
if ( ! rdi - > ports | | rdi - > <unk> )
struct rvt dev info * rdi = err ptr ( - enomem task event event event event event NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ; - start ;
if ( ! br vlan should use ( - - - br ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( v - > vid = = pvid )
list for each entry ( vg - > vlan list , vlist ) !
vinfo . vid = v - > vid ;
vinfo . flags = NUMLITERAL ;
struct dw plat pcie * dw plat ( is err , <START_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( is ) ) ( is err , <START_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pp = dw plat pcie - > pp ;
if ( ! dw plat pcie | | ! dw plat <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pp - > dbi base = devm ioremap resource ( dev ;
platform set drvdata ( pdev , dw plat pcie , & pdev - > state ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , null ) ) ) ) ) ) ) ) ) ) ) ) ) cap ) cap ) cap ) cap ) cap ) cap ) cap , null cap cap cap cap )
void rds tcp reset ( struct net * * * * panic info info info pcie pcie pcie pcie gfp gfp )
spin lock irq ( & rds tcp conn lock dev dev * NUMLITERAL vlan <unk> vlan pcie ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ) ; ) ; ; ) ; ) ; ) ; ; ) ; ) ; ) ; ; ) ; ) ; ) ; ; ) ; ) ; ) ; ; ) ; ) ; ) ;
spin unlock irq ( & rds tcp conn lock ) ,
rds conn path drop ( tc - > t cpath ) , null = NUMLITERAL = NUMLITERAL ; ; ; ; ; ) ; ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; ) ; ; ) ; ; ) ; ) ; ; ) ; )
if ( net ! = c net | | ! tc device is <unk> )
static int <unk> hp100 eisa probe ( t " STRINGLITERAL " )
pr info ( " STRINGLITERAL \n " , dev NUMLITERAL )
set netdev dev ( dev , & edev - > * * vlan pcie ) ;
if ( ! dev | | ! dev - > base . br )
free netdev ( & init net , dev ) ;
if ( <unk> paniced ( & mce static ( ( - paniced ( ( = = mutex , null paniced , null , null , null , null , prog , , , , , , , , , , null , null , * null , null , null , * * , , null , null , * * , , null , null , * null , , , , , , , , , , , , , , , , , , , , , , , null , null , * * , ,
if ( mca cfg . tolerant < = NUMLITERAL )
static int mce timed out ( const u64 * t ( u64 ( u64 pcie pcie ( u64 ( ( u64 ( ( u64 ( u64 ( ( ( u64 ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64 ( ( ( u64
if ( ! mca cfg . monarch timeout )
wait for panic ( & init net , ) ;
pthread mutex unlock ( & cap . mutex ) ;
pthread lock ( & cap . mutex ) ;
static void <unk> setup capabilities ( void )
cap dac override ,
capng restore state ( & cap . saved ) ;
vga set default device ( new client - > <START_BUG> , null ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
if ( ! active | | ! vgasr - > <unk> )
if ( new client - > pwr state = = )
active = find active client ( & vgasr priv . clients , null ) ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
static int vga switchto stage1 ( struct vga switcheroo client * new client ) ) ) = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
status = vchi msg dequeue ( instance - > vchi handle ,
if ( m . complete . cookie1 ! = vc audio write cookie1 | |
int msg len , * tmp len ;
dev err ( & instance - > dev , " STRINGLITERAL \n " ) ;
dev err ( & instance - > dev , " STRINGLITERAL \n " , m . type ) ;
if ( trans send cmd pdu ( & priv - > \n ) )
void iwl send bt config ( const struct iwl priv * priv )
. kill cts mask = NUMLITERAL ,
. kill ack mask = NUMLITERAL ,
. max kill = bt max kill def ,
bool cpuinit is any core online ( struct platform ;
if ( test bit ( i , & pdata client & > & = = = = NUMLITERAL - ; ) STRINGLITERAL " )
for ( i = max core data - NUMLITERAL ; ( client = NUMLITERAL - ; i - ; - bt ) ) iwl
! pdata - > core data [ i ] - > ! pkg ! = null - NUMLITERAL - NUMLITERAL - ;
int i = NUMLITERAL ;
rfkill toggle radio ( rfkill , rfkill state ! = - - client ) ;
mutex lock ( & rfkill - > <unk> mutex ;
spin unlock ( & rfkill - > <unk> lock ;
list del init ( & rfkill - > node ) data data data ;
static void rfkill remove switch ( const struct operation * dev ;
struct mace data * mp = dev - > { . { . { : NUMLITERAL ( " " , dev priv , & dev * & & dev * & & , dev , dev , m , , , , , , m , , , , , m , , , , m , , , m , , , m , , , m , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev
volatile struct mace * mace = mp - > = null bt <unk> bt bt bt ( dev , dev , dev , ) ( dev , m , dev , ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( dev , dev , ) ( ) ( set <unk> <unk> , dev , ) ( dev , dev
mace load rxdma base ( dev , HEXLITERAL , null . data . data enable . NUMLITERAL . data . data ! = m <unk> , m size , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m , m
mace load rxdma base ( dev , HEXLITERAL , HEXLITERAL ) bt bt <unk> cmd cmd cmd cmd cmd cmd . ;
void mace rxdma reset ( struct net device * dev )
index close ( index relation desc , no <unk> ) dev dev dev dev dev ( <END_BUG> new limit ( no ( no ( no ( no ( no ( no ( no ( no ( no ( ( = index ( no ( no ( no ( no ( no ( ( ( ( ( - index ( no ( no ( no ( no ( ( ( ( - index ( no ( no ( no ( no ( no ( ( ( ( - error ( ( ( - u16 ( no ( no ( no (
free expr context ( node - > biss runtimecontext ) ;
exec end bitmap index scan ( bitmap index scan state * node )
if ( index scan desc & & ! index scan desc )
if ( node - > biss runtimecontext & & node - > biss runtimecontext )
if ( ! ata id has trim ( ata dev NUMLITERAL ; limit ( limit ) ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( " ( limit ( limit ( limit ( limit ( limit ( limit ( limit ( NUMLITERAL ( limit ( " ( " ( limit ( limit ( limit ( NUMLITERAL ( limit ( " ( " ( limit ( limit
else if ( ata dev - > horkage & ata horkage no ncq trim & & limit > = limit no no ( limit ( " ( limit ( " ( limit ( " ( " ( = ( limit ( " ( = limit ( " ( = = = = = " ( = = = = " no ( = = = = = = limit ( = = = " no ( " ( = = = = " ( = = = " ( = = = " ( " ( = = = "
return <unk> ( buf , NUMLITERAL , " STRINGLITERAL \n " , mode ) ;
else if ( ata fpdma dsm supported ( ata dev ) )
show ata dev trim ( struct device * dev ,
ne - > name = <unk> ( name , null scan scan scan scan ; - NUMLITERAL ;
( struct ecpgstruct member * ) mm alloc ( sizeof ( struct ecpgstruct > NUMLITERAL scan ;
ne - > typ = ( void * ) type ;
if ( ptr & & ptr )
ne - > next = null ;
nvmet unregister transport ( & nvme loop ops ) ( - einval ptr ) ;
flush workqueue ( & ctrl - > <unk> ) ( - einval ptr ptr ) ;
nvmf unregister transport ( & nvme loop transport ) ;
mutex lock ( & nvme <unk> mutex ) ;
spin unlock ( & nvme <unk> lock ) ;
new limit = ips - > orig turbo limit & ( turbo - > orig turbo mask ) ;
static void ips cpu lower ( struct ips driver * ips )
cur limit = turbo override & ( turbo - > orig <unk> mask ) ;
new limit = cur limit - NUMLITERAL ;
if ( new limit < ( ips - > orig turbo limit & turbo tdp mask ) )
queue work ( vha - > hw - > for wq <END_BUG> , name ( vha node ( else ( mask ; ; ; ; ; ; ; ; ; ) ;
if ( reg = = HEXLITERAL | | reg > = delete <unk> ) if
qla2x00 check reg for disconnect ( struct scsi qla host ctrl ctrl ctrl * vha & uint32_t dev ( uint32_t dev ( ( transport ( transport ( uint32_t ( uint32_t ( uint32_t ( uint32_t ; uint32_t ) ; ; ) ;
return <unk> - > hw . <unk> . true ;
return <unk> - > hw . <unk> ;
if ( state = = pci d0 & & platform pci time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time
if ( state > pci d0 power ( dev ) ) &
int ret = platform pci set power state ( dev , state ) offset offset offset time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time
int pci set power state ( struct pci dev * dev , pci * > pci - > * > pci - > * > pci - > * <unk> - > * <unk> - ctx - > * <unk> - ctx - > * <unk> - NUMLITERAL - long - NUMLITERAL - long - part - > * <unk> - NUMLITERAL - long - NUMLITERAL - long - einval - NUMLITERAL - pci - part - > * pci - NUMLITERAL - long pci - NUMLITERAL - long pci - part - > * <unk> - NUMLITERAL - long
pci update current state ( dev , state , state ) ;
irq num = bus - > map irq ( pci * * * * * * * * * * * power ;
bus - > irq count [ irq num ] + = return return return link ;
bus = pci dev - > bus . bus ;
if ( bus - > set irq )
pci dev = bus - > parent dev - > irq ;
int acquire lcb access ( struct hfi1 devdata * dd ( < t ( % tick . devdata * > time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time
ret = request host lcb access ( dd , null ) ) )
if ( dd - > lcb access count & & ! <unk> - > ret error ( > a time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time
if ( ppd - > host link state = = NUMLITERAL ) {
set host lcb access ( dd , & ppd - > host ) ) ) ) )
unsigned long cci event = hw event - > config dev dd dd dd state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state
if ( ! test and set bit ( idx , hw state = = pci if <unk> ; ret ;
if ( cci event = = cci pmu cycles | | cci event { ( ( unsigned long ; , , , , ) ;
struct hw perf event * hw event = event - > hw ;
if ( test and set bit ( cci pmu cycle cntr idx , > > ( struct ; , ; , ret ; ret ; ; ret ;
if ( ! hlist empty ( & d - > { , , = = = = { . cmd ) ) */
struct dev rcv lists * d , bool <unk> )
can print rcvlist ( m , idx , dev ) ;
static inline void can rcvlist proc show one ( struct seq file pci ( > <END_BUG> ( } ; goto {
seq <unk> ( m , " STRINGLITERAL \n " , dname ( - - ; } pmu ) ) =
counter = time interpolator get counter ( ) ;
time interpolator - > skips = NUMLITERAL ;
static void time interpolator update ( unsigned int delta nsec )
atomic dec ( & time interpolator - > skips ) ;
if ( ! time interpolator | | ! time <unk> )
u32 t = cpu to be32 ( val ) ;
u32 val , u32 <unk> )
void octeon write device mem32 ( struct octeon device * oct , , , , , , , ;
octeon pci rw core mem ( oct , coreaddr , ( u8 ; , void ; priv , ( priv inode ) ) ) - = = = = = = = & ;
} on ( ! octeon - > rw ) ;
if ( strcmp ( name , xattr selinux suffix ) )
struct inode security struct * isec = inode cred ( inode , inode = inode cred ( inode ) ) rtc rtc ( inode = inode cred ( inode ) rtc ) rtc rtc rtc ( inode = inode cred ( inode ) rtc rtc ( inode ) rtc rtc rtc ( inode ) rtc rtc rtc rtc ( inode ) rtc rtc rtc rtc ( inode ) rtc rtc rtc rtc rtc ( inode ) rtc rtc rtc rtc ( inode ) rtc rtc rtc rtc ( inode = inode cred ( inode ) rtc rtc rtc rtc (
rc = security context to sid ( value , size , & newsid , gfp atomic ) rtc rtc rtc rtc rtc ( inode ) rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc ( suspend device ) rtc rtc rtc rtc rtc rtc rtc ( suspend ) rtc rtc rtc rtc rtc ( suspend ) rtc
isec - > sclass = inode mode to security class ( inode - > i if ) rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc rtc
isec - > initialized = label <unk> | label <unk> | label <unk> ;
journal update superblock ( journal , NUMLITERAL , NUMLITERAL ) ;
journal - > j errno = errno - > j errno ;
if ( journal - > j flags & jfs <unk> )
void journal abort soft ( struct journal info * journal , int errno ( u8 ( ; const const const const const const const const " STRINGLITERAL * rtc ) )
if ( ! journal - > j errno | | ! journal - > lock ( ; ; ) )
printk on flush ( & kmsg - > flush * panic ( ( force force container * container container container container ) ( ( struct if ( ( ( - - - - - - tmp ( ( force force force ( tmp ( ( > dev ( ( force force ( > ( tmp ( tmp ( ( > ( tmp ( tmp ( ( force force ( > ( tmp ( tmp ( ( force force ( > ( tmp ( tmp ( ( force force ( > ( tmp ( tmp ( ( force force ( >
console flush on panic ( false ) ;
kmsg dump ( kmsg dump panic ) ;
extern void panic flush kmsg end ( void )
bust spinlocks ( NUMLITERAL , null ) ;
rtc update irq ( & cmos - > rtc - > class dev , NUMLITERAL , tmp ) ;
static int <unk> unused cmos resume ( struct device * dev )
unsigned char tmp = cmos - > suspend ctrl | | cmos - > suspend <unk> ;
cmos rtc . rtc - > class - > class id ,
pr debug ( " STRINGLITERAL \n " ,
u8 type , u8 version , u8 version )
spin lock bh ( & bat priv - > tvlv . ( > ; size , ! > NUMLITERAL , null ;
spin unlock bh ( & bat priv - > tvlv . container lock , null , null , null , test ptr test ;
batadv tvlv container remove ( & bat - > tvlv . tvlv ) ;
tvlv = batadv tvlv container get ( bat priv , type , version ) ;
static int pkey cmac keygen ( evp pkey ctx * ( intf * ( > > > > & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
if ( ! cmkey | | ! cmkey )
cmac ctx free ( cmkey , null ) ;
if ( ! cmac ctx copy ( cmkey , cmctx , null ) ;
cmac ctx * cmctx = ctx - > data . data ;
static int nfit test1 alloc ( struct work * dev , struct nfit test * t )
if ( ! t - > nfit buf | | t - > nfit buf )
if ( ! t - > spa set [ t - > spa ] )
size_t nfit size = sizeof ( struct acpi nfit system address )
return ars state init ( & t - > pdev . dev , & t - > ars state ) ;
g free ( io mem opaque [ io index ] ;
static void swapendian del ( int io index , error * * errp ) - errp - > <unk> )
if ( io mem read [ io index ] = = struct <unk> readfn ( ( intf > ! > > > > > > > & & & & & & & & & & & & & & & & & & & & & & & & io + , & & & & & io + , & & + + , & & + + , & & & & & & & & io + , & & + + , & & + + , & & + + , & & &
} on ( ! <unk> <unk> <unk> ( ) ) }
} } } ( & io mem read ) ;
static int dvbtxt probe ( const av probe data * p )
if ( ( p - > buf size + NUMLITERAL ) % NUMLITERAL )
if ( buf [ NUMLITERAL ] ! = HEXLITERAL | | buf - > buf )
return avprobe score max / NUMLITERAL | | avprobe score max / NUMLITERAL ;
const uint8_t * end = p - > buf + p - > buf size ;
padapter - > b suspended = true ;
if ( pnetdev - > netdev ops - > ndo stop )
netdev info ( pnetdev , " STRINGLITERAL \n " ) ;
netif device detach ( & pnetdev - > device ) ;
static int r871x suspend ( struct usb interface * pusb intf , pm message t int int buf t t t region t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
return pci alloc consistent ( pdev , size , dma ctx ctx ctx ctx ( netdev ) ) ) ) ) ) ) ) )
void * tsi148 alloc consistent ( struct device * parent , size_t = size_t " STRINGLITERAL " NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL , , , ,
dma addr t * dma , unsigned int <unk> )
pdev = container of ( parent , struct pci dev , dev ;
struct pci dev * pdev , * <unk> ;
if ( id < NUMLITERAL | | ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( unsigned long " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
struct mbox chan * get pcc channel ( int id , * * errp ;
return pcc mbox channels [ id ] ;
return err ptr ( - <unk> ) ;
} < ! ! ( pcc chan . mbox channels { ( struct - > > <END_BUG> data ; ( unsigned long ; ( int ; ( int ; ( int ; ( int " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
mutex unlock ( & ops mutex ) ;
mutex lock ( & ops mutex ) ;
ops - > driver & driver requested ? " STRINGLITERAL " : " STRINGLITERAL " : " " ,
ops - > id &
ops - > driver & = ~ ( " STRINGLITERAL " ) ? " " ,
bt drop lock and maybe pin ( trace trace trace desc - > xml \n \n \n \n \n \n \n \n STRINGLITERAL \n STRINGLITERAL \n STRINGLITERAL \n \n pos )
if ( is mvcc snapshot ( scan - > xs * - bt " STRINGLITERAL " ) , ,
sp - > buf = ( sp - > buf ) data data file blk blk ( STRINGLITERAL = free = free = free = free = free = NUMLITERAL ) ; ; ; > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
release buffer ( & sp - > buf , & debugfs ;
lock buffer ( & sp - > buf , buffer lock ) file file file ( STRINGLITERAL } ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; > = NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > NUMLITERAL > NUMLITERAL > } > > > NUMLITERAL > } > > NUMLITERAL > } > > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
xsd test suite ( int * <unk> ) list
xsd test case ( verbose , cur , null ) ( & driver - > = driver ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops
if ( doc & & doc ) {
printk ( " STRINGLITERAL \n " , doc - > <unk> ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ) ( > > > > NUMLITERAL ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops
xml char * doc = get string ( cur , " - , , , , , , , , null ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops
kfree ( bt - > <unk> ) " STRINGLITERAL " " " " " " " " " " " , driver , , , , , , , , , , , ,
debugfs remove ( bt - > dropped file ) ;
debugfs remove ( bt - > msg file , & cur ;
void blk trace cleanup ( struct blk trace * bt )
free percpu ( bt - > msg data , & bt ;
nidstats put locked ( struct cfs hash )
nidstat putref ( ns , null , null , null > < NUMLITERAL ) scan scan - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ;
ns = hlist entry ( hnode , struct nid stat , > & & & & > > > > > > > > > > > > > > > > > > , hash ) ;
struct nid stat * ns ;
} = }
if ( s - > s3 & & c ctrl ctrl ( c ctrl > ops > ops > = ieee80211 <unk> <unk> . = null . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . = NUMLITERAL . =
ssl3 renegotiate check ( s , NUMLITERAL , NUMLITERAL ) [ max <unk> ) head head head head head head ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht rc rc ht ht ht ht ht . if ?
clear sys error ( & init net , ) ;
int ssl3 write ( ssl * s , const void * buf , . . dev > dev ;
return s - > method - > ssl write bytes ( s , ] , ] ring - > handle write ! * rt ! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NUMLITERAL rc ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht cap cap ht cap cap cap ht cap cap cap cap
caps | = wlan rc ts flag | sc flag sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc
if ( sta - > ht cap . ht free & & zone = = null ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
caps = wlan rc ht flag | wlan rc ht ;
if ( sta - > ht cap . cap & & sta - > , { , { , { ( { , { , { , { , { , { , { , ( { , zone ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( sta - > ht cap . cap & & sta - > , { , { ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , ( { , (
hwaddr addr = channel reg ( ctrl ring - ( data ring - rw cap { ctrl . ) . ) ;
void channel load d ( struct fs dma ctrl nic nic ring ring ring ring . <END_BUG> . NUMLITERAL . <END_BUG> . channel . ]
ctrl - > channels [ c ] - > regs [ rw data = rw struct } ( ) . ts ieee80211 ieee80211 )
cpu physical memory read ( & ctrl - > dev ,
( void * ) & ctrl - > channels [ c ] . current )
void hns nic tx fini pro ( const { cap NUMLITERAL )
napi schedule ( & ring data - > napi sta sta sta sta sta sta sta sta sta sta sta zone zone zone ) sc ) sc sc ) sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc
struct hnae ring * ring = ring data - > <unk> . data ;
if ( head ! = ring - > next to clean ) {
ring data - > ring - > ring - > ring = NUMLITERAL ;
ldlm export lock hash ( struct cfs )
return cfs hash u64 hash ( ( struct lustre <END_BUG> s s ( * ( target > head - dev - dev - dev - dev ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht
} ( & cfs hash - > } , ( struct net ) * ( target ) ( ; [ head - > size - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht ht
return cfs hash u64 hash ( ( struct lustre handle * ) * * ; ] ] ] addr , head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie - head - > cookie -
refcount ( & hs - > <unk> , mask ) - > data )
bool should abort reclaim ;
should abort reclaim = true ;
if ( compaction build & & zone - > order ) {
if ( global reclaim ( sc , gfp atomic ) ) {
if ( zone - > all unreclaimable & & priority ! = def <unk> )
static void <unk> intctrl ( struct spi imx data * spi )
if ( enable & & enable & & spi imx int te > NUMLITERAL )
writel ( val , spi imx - > base + mxc cspiint ) , lock ( spi <END_BUG> ) ;
unsigned int val = NUMLITERAL ;
if ( enable & mxc int rr )
int arch add memory ( int nid , u64 start , = = = < < < < ! ! struct * } " " " " " } " } " } " " " " " " " " " " " " " } " } " " " } " } " } " } " } " } " } " } " } " } " } " } " } " STRINGLITERAL " " " " } " } " } " } " } " } " " " ;
return add pages ( zone , start pfn , nr pages , null port port ; * gfp bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf > NUMLITERAL bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf ( bpf > * struct bpf > = * struct struct > > NUMLITERAL bpf ) ( return * struct > struct ip bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf bpf ( return return bpf > = hba
unsigned long nr pages = size > > page shift ;
struct zone * zone = pgdata - > node zones ;
unsigned long start pfn = start > > page shift ? : page struct page ( - page bpf array ret bpf <unk> bpf bpf bpf array ret bpf <unk> bpf bpf <unk> bpf bpf bpf bpf <unk> bpf bpf bpf bpf bpf struct struct * cred bpf bpf struct bpf bpf struct struct struct * prog bpf struct struct struct * cred bpf bpf struct struct struct * prog bpf struct struct struct struct struct struct struct struct struct struct > struct struct struct struct struct struct struct struct struct > struct struct struct struct struct struct struct struct
lpfc down link ( phba , pmb , null ) ;
lpfc hba down link ( struct lpfc hba * phba , * * <unk> )
pmb = mempool alloc ( phba - > mbox mem pool , gfp atomic ) ;
phba - > link state = lpfc hba error ;
mempool free ( pmb , phba - > mbox mem pool ) ;
receive chars ( up , & status , regs ) ;
spin unlock ( & up - > port . lock ) ;
spin lock ( & up - > port . port . lock ) hdev hdev hdev ( - einval ) ( phba , phba , - ) ( - einval , rc , null , null , null , null , prog , lpfc null , * * errp , * * errp , * * errp , ) ( ) ( NUMLITERAL ( * , rc , rc , lpfc <unk> , rc , rc , rc , rc , null , null , lpfc ) ( rc , rc , rc , rc , rc , rc ,
serial8250 handle port ( struct uart NUMLITERAL port * up )
if ( status & uart lsr <unk> | | status & & ! <unk> <unk> )
if ( ! <unk> ( cap sys admin | | ! bpf ) , <unk> )
struct bpf event query bpf query = { . ids = { . down = ( return phba lpfc , return return phba , return return phba , return return phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba , phba ,
if ( event - > core . attr . type ! = perf type tracepoint , & node , & node , null , null , null , <unk> <unk> )
int bpf event query prog array ( struct perf event * event , void user * info , bool force , bool <unk> , bool force , bool <unk> , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool force , bool
mutex lock ( & bpf event mutex ) ;
mgmt index added ( hdev , hdev - > id ) bpf ( ; ; { )
if ( test bit ( hci auto off , & hdev - > info ) )
if ( hci dev open ( hdev - > id ) < NUMLITERAL )
queue delayed work ( hdev - > workqueue , & hdev - > power off event event event )
if ( test and clear bit ( hci setup , hdev ) )
struct page * page = ext2 get ch ( - - - net req req req * if id id * if id * sizeof memcg id * if * data * data * data * data cachep * data cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep memcg memcg memcg cachep cachep cachep cachep cachep memcg memcg memcg cachep cachep cachep memcg memcg memcg cachep cachep cachep memcg memcg memcg cachep cachep cachep memcg memcg * NUMLITERAL cachep cachep cachep cachep cachep cachep memcg * , ;
de = ext2 next entry ( page address ( ch ) ) ; > NUMLITERAL > NUMLITERAL > NUMLITERAL > ,
ext2 dirent * de = null ;
struct ext2 dir entry NUMLITERAL * ext2 dotdot ( struct inode ;
if ( ! is err or null ( page ) ) flags
if ( mstat & uart msr cts | | mstat & * <unk> <unk> ; uart : uart <unk> )
if ( ! ch | | ch - > magic ! = if type <unk> ;
if ( mstat & uart msr dcd )
int result = - <unk> ;
unsigned int mstat ;
complete ( & ctx - > completions priv priv priv > } ) dir - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL type ) type type ) type type type type ) type type ) type type type type type ) type type type type type type ) type type type type type type ) type type type type type type type type type ) type type type type type type type type type ) type type type type type type type type type type type type type type type ) type type type type type type type type type
static void io ring ctx ref free ( usb dev - > dev de )
struct io ring ctx * ctx = container of ;
} on ( ! ctx - > io ring ctx ) ;
struct io ring ctx * ctx = container of ( ref = usb io ;
static int if usb get int status NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( ( & struct op : io : ino ( struct struct struct cgroup ( struct struct struct cgroup ( struct struct struct ( struct struct cgroup ( struct struct struct ( struct struct cgroup ( struct struct struct cgroup cgroup ( struct struct struct struct ( struct struct cgroup ( struct struct struct struct ( struct struct cgroup ( struct struct struct struct ( struct struct cgroup ( struct struct struct struct ( struct struct cgroup ( struct struct struct struct ( struct struct cgroup ( struct
* ireg = lbs - > usb int {
atomic read ( & cardp - > usb cause struct & & cardp ch ch cause * . > . - > cachep ) ) ) ) ) ) ) ) ) ) ) ) ) ) memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
struct tm card rec * cardp = priv - > p ( ! ! ! ! sbi ( sbi ( sbi * * * * * * * * * , bio * * * * * * * * * * * type * func * func * func * func * func * func * func * func * func * func * sizeof &
lbs deb usbd ( & cardp - > udev - > if struct * - - type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * type * . <unk> ) ) ) ) ) )
if ( memcg kmem bypass ( memcg ) )
css put ( & memcg - > css ) ;
memcg = get mem cgroup from mm ( memcg - > mm ) ;
memcg schedule kmem cache create ( memcg , cachep , null ) ;
if ( current - > memcg kmem skip account | | current - > <unk> )
io - > fio . op flags | = ( req < < ( id memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
nid t ino , enum page type type , int rw )
io - > fio . op flags = req preflush | req prio ;
mutex lock ( & io - > io lock ) ;
up read ( & io - > io rwsem ) ;
u32 * spir = port regs - > common regs <START_BUG> host ; ( ; ] ( ; ] , ( <END_BUG> ! = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
static void fm93c56a select ( struct work adapter * qdev )
qdev - > mem map registers = null ;
qdev - > eeprom cmd data = auburn eeprom cs ;
ql write nvram reg ( qdev , spir ,
wilc semaphorerelease ( & h wait response , null ) ;
if ( ( s32error & & ! <unk> ) ) {
wilc catch ( s32error , null )
str wid . s32value size = eth <unk> ;
wilc errorreport ( s32error , wilc fail , null ) ;
s = kvzalloc ( struct size ( s , smtab , smt size ) , debug kernel
rwlock init ( & s - > lock ) ;
refcount set ( & s - > smtab [ i ] . refcnt , NUMLITERAL ) ;
struct smt data * t4 init smt ( void )
s - > smt size = smt size ;
if ( ! kvm apic hw enabled ( apic ) ) {
if ( ! apic mmio in range ( apic , address , address ) )
if ( len ! = NUMLITERAL | | ( offset & HEXLITERAL ) ) {
unsigned int offset = kvm lapic get drvdata ( address , address - > base address ) ;
apic debug ( " STRINGLITERAL \n " , len , ( long ) address ) ;
return state - > mode changed | | state - > , , ;
needs modeset ( const struct drm crtc state * state )
} - > mode & & state - > mode changed snd snd } ; ,
{ return state - > mode changed ; } ;
drm needs <unk> ( state ) - > active changed | | - ;
static void make established ( struct sock * sk , fail snd get i i i i apic ;
tp - > snd nxt = snd <unk> ;
tp - > snd una = snd <unk> ;
tcp set state ( sk , tcp established , null ) ; ; s i i i s ) ) ) ) ) ) ) ) ) )
tp - > pushed seq = snd isn ;
if ( xwrite ( wfd , victim , body len len ) * body len ( ( ( <START_BUG> ( ( <START_BUG> ( c ( c ( c ( c ( ( force force force ( c ( c ( ( force force force ( <START_BUG> ( if ( if ( ( force ( <START_BUG> ( if ( if ( ( force ( <START_BUG> ( if ( if force ( ( force ( <START_BUG> ( if ( if force ( ( force ( <START_BUG> ( if ( if force ( ( force ( <START_BUG> ( if ( if force (
if ( <unk> ( wfd , victim , byte count ) ! = " lock ( ( if ( if ( if force ( if ( if ( if force ( if ( if ( if ( if ( if ( if ( if ( if ( force ( if force ( if ( if ( if ( ( if ( if force ( if ( if ( if ( ( if ( if force ( if ( if ( if ( ( if ( if force ( if ( if ( if ( ( if ( if force (
if ( <unk> len > = body len ) {
static int init do copy ( void )
kmem cache free ( body cache , vcollected ) ;
fvalue set ( & fi - > value ) ; ; ; , bytes pr , err ) ,
dissector assert ( value ptr ! = null | | NUMLITERAL ;
if ( length > NUMLITERAL ) {
bytes = g byte array new ( ) ;
g byte array * bytes , * * errp ;
mparam = ( mime param * ) <unk> malloc ( sizeof ( mime param ) ) ;
tmpval = buf strdup ( value , value ) ;
if ( ! tmpval | | ! tmpval ) return NUMLITERAL ;
if ( <unk> ( c , null ) ) {
tmpname = buf strdup ( name , null ) ;
const int max tries = NUMLITERAL , msec per try = NUMLITERAL )
if ( ! pkt dev )
static void pktgen mark device ( const char * ifname )
pkt dev = pktgen nn threads ( ifname , remove , null ( ifname ( ifname ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( (
if ( + + i > = max tries | | + + NUMLITERAL ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ifname ( ( ( params ( ifname ( ifname ( ( ifname ( ifname ( ( ifname ( ifname ( ( ifname ( ifname ( ( ifname ( (
struct panel drv data * ddata = dev dissector dissector )
static void tfp410 set timings ( struct omap dss <END_BUG> = { } {
dssdev - > panel . timings = * timings ;
omapdss dpi set timings ( dssdev , timings , null , & " STRINGLITERAL " ;
struct omap video timings * timings , * * errp , g int gfp mask ;
cancel delayed work sync ( & fan watchdog do ;
static int fan watchdog active = NUMLITERAL ;
pr info ( ibm err " STRINGLITERAL "
if ( ! queue delayed work ( fan watchdog work , , unused pr pr
if ( fan watchdog active & & fan watchdog <unk> )
pr info ( " STRINGLITERAL \n " , dev , ( void flag flag > dev connector > dev connector > NUMLITERAL > < NUMLITERAL ) ) field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
free irq ( dev - > irq , dev ) ;
if ( dev - > irq & & dev - > <unk> )
static int <unk> unused dio700 detach ( struct comedi device * dev )
if ( dev & & dev - > subdevices )
ret = asn1 octet decode ( asn1 , & ch device irq > = ; - ch - > name ( = dev ( dev ( dev ( dev ( dev ( ( force ( force ( struct dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( ( dev ( dev ( ( dev ( ( dev ( dev ( ( dev ( ( dev ( dev ( ( dev ( ( dev ( dev ( ( dev ( ( dev ( dev
* subid | = ( ch & HEXLITERAL ) ;
} while ( ( ch & HEXLITERAL ) = = HEXLITERAL irq irq > " STRINGLITERAL " - NUMLITERAL ( ( dev ( ( force force ( > port ( ( port ( ( <END_BUG> ( > port ( > port ( > port ( ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> ( > port ( ( <END_BUG> (
* subid < = asn1 <unk> <unk> ;
asn1 subid decode ( asn1 sck * asn1 , const guint32 - > , guint32 > NUMLITERAL - <START_BUG> - part - part )
if ( ret < NUMLITERAL & & ret ! intr - ;
ret = pm runtime get sync ( connector - > dev ) ( = = = = = = = - - <unk> field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
pm runtime mark last busy ( connector - > dev ) ;
pm runtime put autosuspend ( connector - > dev - > dev ) ;
nv50 mstc detect ( struct <unk> * <unk> , struct drm connector * connector , <END_BUG> enum field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
osc update next shrink ( cli , null ) > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) )
refcount inc ( & obd dirty pages ) ;
assert spin locked ( & cli - > cl loi list lock ;
atomic dec ( & cli - > cl dirty pages ) ;
page size , pga , pga - > pg ) ;
int intr status = NUMLITERAL ;
vpfe process buffer complete ( vpfe , null ) ;
intr status = vpfe reg read ( & vpfe - > ccdc , vpfe irq sts ) ;
if ( field = = v4l2 field none | | field = = v4l2 field none ) {
static irqreturn t vpfe isr ( int irq , void * dev )
free irq ( wl - > irq , wl ( ) ( ) ) , null connector - NUMLITERAL connector - NUMLITERAL connector connector - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
wl1271 free hw ( wl , null ) ;
wl1271 unregister hw ( wl , null ) ;
device init wakeup ( wl - > dev , NUMLITERAL ) - NUMLITERAL - NUMLITERAL connector connector - NUMLITERAL connector - NUMLITERAL connector connector - NUMLITERAL connector connector - NUMLITERAL connector connector - NUMLITERAL connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector connector - NUMLITERAL connector connector
if ( wl - > irq wake enabled | | wl - > > = NUMLITERAL ;
static int mcp251x power enable ( static loop struct ( <END_BUG> ( <END_BUG> ( <END_BUG> ( struct * * * * * * , chip , chip , - = - einval , - einval , int , - einval , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
return regulator enable ( reg , null ) ) ) ) , ( )
if ( ! reg )
return regulator disable ( reg , null ) ;
if ( ! is err ( enable ) )
static void init mmp2 timer init ( void )
unsigned long clk rst ;
timer init ( irq mmp2 <unk> , null ) ;
raw writel ( apbc apbclk | apbc rst , apbc " STRINGLITERAL " ) ;
clk rst = apbc apbclk | apbc fnclk | apbc fnclksel ( > > NUMLITERAL ) - ( ( unsigned long = ( ( force force force = ( ( force force force = ( ( force force force = ( ( force force = ( ( void = ( ( force force = ( ( force force = ( ( force force = ( ( force force = ( ( void = ( ( force force = ( ( force force = ( ( force force = ( ( void = ( ( force force = ( ( force
if ( test and set bit , ;
clear bit ( napi state npsvc , & napi - > ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL
if ( ! test bit ( napi state sched , & napi - > state = = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
int work = NUMLITERAL , * tmp ;
return ( budget - int ) ? budget - : <unk> : null ;
static void * init refok mca reg ( void )
return <unk> virt alloc ( sizeof ( struct NUMLITERAL ) struct
kernel stack size , NUMLITERAL , NUMLITERAL ) if size if = null clk clk clk state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state
} on ( ! in <unk> <unk> ( ) ) }
return <unk> virt alloc ( sizeof ( struct ia64 ; ) struct . / / writel ) state ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
int eccsteps = chip - > ecc . steps . steps ;
struct nand chip * chip , const uint8_t * buf , int oob required )
int sector idx ;
int eccsize = chip - > ecc . ecc . size ;
const uint8_t * datap = buf - > oob . datap . datap ;
iod - > req . execute ;
container of ( work , struct nvme loop iod init init init * ( ) * ( ) ) poll poll ;
static void nvme loop execute work ( struct work )
struct nvme loop iod * iod =
} - > execute - > execute - > execute | |
if ( counter - > state ! = perf counter state <unk> )
if ( count < n * sizeof ( u64 ) | | count > = n - > hw )
if ( counter - > hw event . read format & perf format total time running )
if ( counter - > hw event . read format & perf format total total enabled )
u64 values [ NUMLITERAL ] ;
return qmp pc dimm device list ( & init net , ) <END_BUG> <unk> = = ) ;
memory device info list * qmp query memory devices ( } ) * * errp = * NUMLITERAL ]
} ( & init net , errp ) ;
return qmp pc dimm device list ( & init net , ) <END_BUG> = = NUMLITERAL = = NUMLITERAL ] ( ( ( { ( ( { ( ( { ( ( { } ( ( { ) ( ( ( ( ( ( ( ( ( ( ( ( ( { ( ( { ( ( { } ( ( { ) ( ( ( { } ( ( { ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { ( ( { ( ( { } ( ( { ) (
qmp free <unk> ( & errp - > dev ) )
static inline void q ( u32 * block , u8 { <START_BUG> { <START_BUG> { data { } * rec * rec * time * read * read * read * read * read * <unk> * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * read * <unk> * read * read * read * read * read
u32 i , val ;
block [ NUMLITERAL ] = f3 ( block [ NUMLITERAL ] , kr [ ; status ( ; status * ( ( time * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
block [ NUMLITERAL ] = f2 ( block [ NUMLITERAL ] , kr [ NUMLITERAL ( ; data i2c * ( ( time * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ( ( * * * * * * * * * * * * * * * * * * * * * * * *
block [ NUMLITERAL ] = f1 ( block [ NUMLITERAL ] , kr [ NUMLITERAL ] i2c i2c status i2c i2c status i2c i2c <unk> i2c i2c status i2c i2c i2c status i2c i2c <unk> i2c i2c status i2c i2c i2c status hw i2c i2c status i2c i2c i2c status hw i2c i2c status hw i2c i2c status hw i2c i2c status hw i2c i2c status hw i2c i2c i2c hw i2c i2c status hw i2c i2c i2c hw hw i2c i2c i2c status hw i2c i2c hw hw i2c i2c i2c hw hw hw i2c i2c i2c i2c hw
u32 i2cctl = ixgbe read reg ( hw , ixgbe + ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) ( > ) (
status = ixgbe err i2c | ixgbe err ( hw ) ;
status = ixgbe set i2c data ( hw , & i2cctl , data ) ;
status = ixgbe raise i2c clk ( hw , & i2cctl , null ) ;
if ( status = = NUMLITERAL | | status > = NUMLITERAL ) {
if ( ! clhash - > hash ) ) ) ) ) ) ) ) ) ) ) data data data data data data data data data data data data data data data data data data data data data data data data data status status status status status status data status status status data data data data status status status status status status data data data data data status status status status status status data status status status status data data data data data data data data data data data data data data data data status status status status status
clhash - > hash = qdisc class hash alloc ( ; size ) ) ) ) ) ) data data data data data data data data data data ixgbe status status status status status status data data data status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
clhash - > hashmask = size - NUMLITERAL ;
clhash - > hashsize = ( unsigned long ) size ;
static int qdisc class hash init ( struct qdisc class hash * clhash )
mutex unlock ( & shost - > class mutex ;
pr info ( " STRINGLITERAL \n " ) ;
if ( shost - > host busy = = shost - > hash if ;
scsi log error recovery ( & shost - > host ,
void scsi eh wakeup ( struct scsi host * shost )
int nid alloc ;
nid alloc = cpuset mem spread node ( cachep , gfp atomic | gfp zero ( ( ( return data force ( ( data ( ( return ) ( ( data ( ( return ) ( ( data ( ( return f sock ( ( ( data ( ( return ) ( ( return since ( ( data ( ( return ) ( ( return since ( ( data ( ( return ) ( ( return since ( ( data ( ( return ) ( ( return since ( ( data ( ( return ) ( ( return since (
nid alloc = nid here = nid here = numa node id ;
if ( ! in interrupt ( ) | | ! in <unk> ( ) ( ( data ( ( return data ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( ( data ( (
else if ( current - > mempolicy & & nid - > <unk> )
static int lvf probe ( const = = = = probe probe * * nid )
return avprobe score max / NUMLITERAL ;
return avprobe score extension ( p - > buf , avprobe * alloc <END_BUG> <START_BUG> nid ) struct file net struct <unk> struct struct file struct file struct <unk> struct <unk> <unk> struct sock struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct file struct cred struct cred struct none struct struct n struct struct file struct n struct struct n struct struct n struct struct n struct struct struct n )
if ( av <unk> ( p - > buf ) ! = id )
if ( ! av <unk> ( p - > buf + NUMLITERAL ) > alloc <unk> nid )
void start ice ( struct ast rtp ( , ( , rtp ( , ( ; status alloc , ) - ( ( struct n rtp ( - n sock sock sock sock sock - > node sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock sock )
if ( ! ice | | ! bus - > length ) -
ice - > start ( instance , null ; ( unsigned long ; ( force force - > if - > if - > if - > if - > if - > if - > if - > if - > if - > if - > <unk> alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc sock sock sock sock sock sock sock sock sock
return ast rtp instance get drvdata ( instance ) - NUMLITERAL dev dev dev dev )
struct ast rtp engine ice * ice = ast rtp instance = int - > ( ( ; ) alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc alloc sock sock * NUMLITERAL
int init orion5x pci map irq ( v > + static static + + pin nid nid nid )
int bus = dev - > bus - > number NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL alloc )
if ( bus < orion5x pci local bus nr ( dev ) )
return irq orion5x pcie0 int ;
* pc ie endpoint ?
vhost net stop ( n , & tx sock , & rx sock ) ;
vhost net flush ( n , & n - > file ) ;
vhost net flush ( n , & tx sock ) ;
if ( rx sock & & rx sock )
kmem cache free ( vhost cache , n ) ;
return dax synchronous ( dev - > ast instance ; instance , ;
static int device synchronous ( struct dm void ( start , ( start ; * ( - p nid ( if ; ; ) ( if - > = ( , , if nid ; ( , * return * return return return return return return return return return return return return return return return return return int ; ( ( , , * return return return return return return return return return return return return return return return return return return return return return return return return return return return int ) ( ;
sector t start , sector t len , const void ( void ( void instance dev > = = ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
} - > dax dev - > dax dev ;
{
memcpy ( sta - > mac , mac - > mac , mac , d = eth if if i
sta - > keymgmt = ( unsigned long ) keymgmt ;
sta = ar - > sta list [ free slot ] ;
sta - > aid = ( unsigned long ) aid ;
u8 ielen , u8 keymgmt , u8 ucipher , u8 auth )
static int ldlm resource complain ( cfs hash t * hs , struct cfs hash state state temp temp ;
refcount read ( & res - > lr refcount ) ;
refcount read ( & res - > lr refcount ) ;
struct hlist node * hnode , void * arg , bool <unk> )
pr debug ( " STRINGLITERAL " lpu64 " STRINGLITERAL " lpu64 " STRINGLITERAL " lpu64 ( ) ( ( u64 > table ) > table ) -
if ( i = = NUMLITERAL | | i > = NUMLITERAL ) {
if ( val > = gti - > lookup table [ NUMLITERAL * i ] )
adc lo = gti - > lookup table [ NUMLITERAL * i + NUMLITERAL ] ;
int temp , adc hi , adc lo , adc - > lookup table ;
} else if ( i > = ( gti - > nlookup table - NUMLITERAL ) ) {
bug on ( refcount read ( & entry - > refcnt ) < [ bd - > refcnt ) int
evict chunk ( & chunk - > dev , chunk ) ;
void audit tree freeing mark ( struct fsnotify mark * entry , struct ar slot
* either the inode or the caller of fsnotify mark ( & init - > parent - > parent * ) *
struct audit chunk * chunk = container of ( entry , struct audit chunk u8 , ) STRINGLITERAL STRINGLITERAL & & & & & & & & & > > > > NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; -
r = pm runtime put ( & dss . pdev - > dev ) , null , null , null ) ; ; ; ; ( - = pm ) ; ; ; ; ; ; ; ; ; ; ; ; ( - = = & ( ( ( i NUMLITERAL NUMLITERAL < < <unk> ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
warn on ( r < NUMLITERAL | | r < NUMLITERAL ) ;
void dss runtime put ( void )
pr debug ( " STRINGLITERAL \n " ) ;
int r ;
if ( ( machine = = mach pmac & & blank ) & & blank )
if ( ( machine = = mach pmac & & ! blank ) )
aty128 set crt enable ( par , par - > crt on ) ;
if ( par - > lock & | par - > asleep )
if ( par - > chip gen = = rage <unk> ) {
if ( ! afalg chk platform ( ) | | * <unk> nf <unk> platform ( ( ( ( ;
if ( ! toadd )
engine free ( toadd , null ) ;
err clear error ( & init net , ) ;
static void engine load afalg ( void )
return sizeof ( struct fc rscn pl s ) ;
u16 ox id , u32 <unk> )
rscn - > event [ NUMLITERAL ] . portid = s id )
rscn - > event [ NUMLITERAL ] . format = fc rscn format )
rscn - > command = fc els <unk> ;
<unk> free ( & nt - > mw ) ;
ntb transport free queue ( & nt - > qps [ i ] ) ;
ntb free mw ( nt , i , & nt - > qps ) ;
for ( i = NUMLITERAL ; i < ntb max mw ( ndev ) ; i + + )
cancel delayed work sync ( & nt - > link work ) ;
nf ct tuple u blank ( inverse , null , null s return NUMLITERAL return < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL i = NUMLITERAL = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i i i i = , NUMLITERAL = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i i i i i i =
inverse - > dst . protonum = orig - > dst )
return l4proto - > invert tuple ( inverse , orig , & > NUMLITERAL return = NUMLITERAL return = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL i = NUMLITERAL = = NUMLITERAL = = NUMLITERAL i = NUMLITERAL = = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i = NUMLITERAL i i i = NUMLITERAL i = NUMLITERAL i i i i i = , NUMLITERAL = = NUMLITERAL i = NUMLITERAL i i i i = , = NUMLITERAL i = NUMLITERAL i i
inverse - > dst . dir = orig - > dst . . . */ NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
if ( l3proto - > invert tuple ( inverse , orig ) = - id . kvm return NUMLITERAL return { unregister = unregister <unk> )
if ( emulate instruction ( vcpu , NUMLITERAL ) = = emulate if ( max ( vcpu if ( vcpu if ( ( max ( max ( max ( max ( vcpu ( ( struct ( max ( max ( max ( max ( ( u32 ( max ( max ( remove ( remove ( ( u32 ( remove ( ( remove ( ( struct ( remove ( ( remove ( ( remove ( ( remove ( ( struct ( ( ( struct ( remove ( ( remove ( ( remove ( ( remove ( ( struct ( ( remove
return kvm vcpu halt ( vcpu , null ) ;
if ( vcpu - > arch . halt request ) {
int vec , u32 err code , u32 err )
vcpu - > arch . halt request = NUMLITERAL ;
err | = ffurl close ( & init net , nf <START_BUG> > - uc , NUMLITERAL , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , vcpu , NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ;
for ( i = NUMLITERAL ; i ! = data - > <START_BUG> ; ; ; ( = = = code , vcpu , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code , code ) ,
struct concat data * data = h - > priv ;
av freep ( & data - > nodes ) ;
int err = NUMLITERAL ;
encode seqid op tail ( lock - > ) ;
nfsd4 encode lock ( struct nfsd4 compoundres * resp , be32 str > } ;
if ( ! nfserr | | ! lock )
nfsd4 encode lock denied ( resp , & lock - > ) ;
else if ( nfserr = = nfserr <unk> | | nfserr = " STRINGLITERAL " ;
struct tspec body * p tspec , pqos tclas p tclas , u8 tclas num ,
p ts common info - > t clas num = tclas num | tclas <unk> ;
u8 tclas proc , unsigned int <unk> proc )
memcpy ( p ts common info - > addr , addr , NUMLITERAL ) ;
static void make ts entry ( const struct ts common info * p ts , u8 * addr ,
ret = fiemap check flags ( fieinfo , - - - - NUMLITERAL ;
return extent fiemap ( inode , fieinfo , start , len lock ;
u64 start , u64 len , u64 len )
if ( ret & & ret )
static int btrfs fiemap ( struct inode * inode , struct <unk> > if fiemap start { * pthread ( ts ( t , > > ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num <unk> ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) ( num ) (
static int statechange queue ( const char * dev , int name " STRINGLITERAL " )
strcpy ( sc - > dev , dev ) ;
free pages ( sc , & sc - > state , null , null , null ) ;
if ( ast pthread create ( & attr , changethread , sc ) ) {
ast log ( log error , " STRINGLITERAL \n " ) ;
if ( ! find vmstate active ( ) | | ! make vmstate <unk> ( ) ) info
if ( bdrv can snapshot ( & init net , bs , bs ) ) {
void do delvm ( const monitor * mon , const q dict * qdict )
const char * name = qdict get str ( qdict , " STRINGLITERAL " ) ;
while ( ( bs = bdrv next ( bs ) ) ) {
pr debug ( " STRINGLITERAL \n " ) ;
const char * end = start + btf - > hdr ( ) , )
const char * start = btf - > nohdr data ;
const struct btf header * hdr = btf - > hdr . hdr , , )
return - <unk> ;
unsigned int indirect blks = NUMLITERAL | get <unk> <unk> ;
bidx = node ofs - dec ofs - dec ofs - " , irq = ( if ; ( long ; ( long ; long ; long ; ( long ; long ;
bidx = node ofs - dec node ofs - dec ofs NUMLITERAL , " STRINGLITERAL " rsp rsp rsp rsp rsp rsp rsp rsp rsp rsp rsp rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu */ rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu */ rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu */ rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu rcu
block t start bidx of node ( unsigned int node ofs , struct [ . long long long long long long ;
int dec = ( node t ofs - NUMLITERAL ) / ( nids per NUMLITERAL ) ; ( ( cpu * ; ( long ; ( long ; ; ; ( long ; ( long ; ; ; ( long ; ( long ; ; ; block ; ( long ; ( long ; ; ; block ; ( long ; ( long ; ; ; block ; ( long ; ( , long ; long ; ( , long ; ( , long ; ( , , long ; ( , , long ; ( , long ; long
int i , ret = NUMLITERAL , counts ;
if ( ! irq idxs | | ! irq count ) {
if ( counts = = NUMLITERAL | | counts > = NUMLITERAL )
pr debug ( " STRINGLITERAL \n " ) ;
return - <unk> ;
bpp = ia css util input free = ctx pool = = NUMLITERAL , ( irq ! = irq css NUMLITERAL ) & & irq css input & & irq css input & & ( if ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies NUMLITERAL ; ( ( unsigned int ; ( ( jiffies
if ( stream ! = null & & ctx pool )
stream - > config . pixels per clock = = used css <unk> ; ; = ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ long ; ; long ; ; ; ;
int bpp = NUMLITERAL ;
ia css stream input format ( struct ia css stream , ,
static struct arm pmu * init )
armv7pmu . name = " STRINGLITERAL " stream ;
return & armv7pmu ;
armv7pmu . num events = armv7 read num clock ia ;
armv7pmu . map event = armv7 a5 map event stream stream ctx ctx NUMLITERAL NUMLITERAL irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq irq = NUMLITERAL irq irq irq irq irq irq = , NUMLITERAL irq irq irq irq irq irq irq irq = armv7 a5 ! ;
force quiescent state ( rsp , NUMLITERAL , NUMLITERAL ) ;
if ( cpu needs another gp ( rsp , rdp ) ) {
warn on once ( rdp - > beenonline = = NUMLITERAL ) ;
spin lock irqsave ( & rcu get root ( rsp ) , flags ) ;
rcu <unk> pointer ( rsp start gp ( rsp , flags ) ) ;
ctx list pool = memblock alloc from ( dec t * page * dec | read < read < . < NUMLITERAL ) ; > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
struct ctx list * <unk> ;
ctx free . next = ctx free . prev ;
clist - > ctx mm = null ;
clist - > ctx number = ctx ;
struct ad774x chip info * chip = iio priv > - - memset )
return <unk> ( buf , " STRINGLITERAL \n " , ( u16 port io ( skb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
static ssize_t ad774x show ( struct device * dev ,
char * buf , error * * errp )
struct iio dev * dev info = dev get drvdata ( dev port > = ( ; ( ; ( char - > name ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
mutex lock ( & dvb - > lock ) ;
mutex unlock ( & dvb - > lock ) ;
if ( ! dvb - > thread ) {
if ( dvb - > thread & & dvb - > thread )
rc = ptr err ( & dvb - > thread ) ;
nest = nla nest start ( skb , type , null - NUMLITERAL - NUMLITERAL - part - > size - sizeof ( - > data - > data - > data - > data - > data - > data - > data > null > NUMLITERAL > ( void , ) > + > NUMLITERAL > NUMLITERAL > NUMLITERAL > + > + > NUMLITERAL > NUMLITERAL > NUMLITERAL > + > + > NUMLITERAL > NUMLITERAL > NUMLITERAL > + > + > NUMLITERAL > NUMLITERAL > NUMLITERAL > + > + > NUMLITERAL > NUMLITERAL >
switch ( v - > code ) {
if ( ! nest | | ! nest - > <unk> )
if ( nla put string ( skb , nfta verdict chain ,
v - > chain - > name = null )
if ( wport - > write urb ! = - <unk> page page - ( einprogress ) thread )
struct usb serial * serial = port - > <unk> . io > = port - > - ( - - ) ;
return ( room ) ? : ( room - > bulk ) > NUMLITERAL , , port , port ( port - > port thread thread thread thread ) ;
int room = NUMLITERAL ;
static int omninet write room ( struct tty serial port * port page page - ctx - > port - > <unk> - args - > <unk> - > <unk> - > <unk> thread )
io ctl - > cur = <unk> ( io ctl ;
static void io ctl map page ( struct io ctl * )
bug on ( io ctl - > index > = io ctl ;
memset ( io ctl - > cur , NUMLITERAL , page cache size put * thread if * * * * * * * * * * * * * * * * <unk> = thread if * * * * ctl ( thread if * = thread if * = thread if * * errp = thread if * * * * * * ctl ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
io ctl - > size = page cache size | page cache size nla * <unk> ( thread if * errp = thread if * data = thread if * data ( thread if = thread if * data = thread if * data = null = thread if * * errp ( - einval = thread if * owner = thread if * data = null ( thread if * owner = thread if * data = thread if * data = thread if * ' ( = thread if * part = thread if * data = thread
apic write around ( apic lvtt , v ( dev - > - > ctl cur cur > ctl map ! = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
int cpu = smp processor id ( ) ;
void enable apic timer ( void )
if ( using apic timer & &
unsigned long v ;
inode - > i op = ext2 file inode operations ;
inode - > i fop = ext2 xip file operations | ext2 <unk> <unk> ;
ext2 mark inode dirty ( inode , inode - > i sb ) ;
inode = ext2 new inode ( dir , mode , mode ) ;
if ( ext2 use xip ( inode - > i sb ) ) {
ret = pccard validate cis ( s , bind fn all , > NUMLITERAL ) , count inode ( count ) inode inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count ) inode inode inode ( count )
unsigned int * count , bool <unk> )
s - > cis virt = null ;
static int <unk> readable ( struct pcmcia socket * s , struct resource - len - > i =
if ( ( ret ! = NUMLITERAL ) | | ( count = ; > = = = = & count ) )
return iter - > ent ? iter : null ; ( ( ( )
static void * find next entry inc ( struct work iterator init init NUMLITERAL |
if ( iter - > ent & & iter - > ent )
iter - > ent = find next entry ( iter , & ( ( force ( iter * * * * * * * - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir - ( dir -
& iter - > lost events , & iter - > lost events ; ; return iter ; ; ; ; ; ; ; ; ) ; ; ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
return wacom tpc pen ( wacom , null ) ;
return wacom tpc mt touch ( wacom , null ) ;
return wacom mt touch ( wacom , null , null ) ;
static int wacom tpc irq ( struct wacom wac * wacom , size_t > char > is <unk> )
return wacom tpc single touch ( wacom , len , null ) ;
ff cbs fragment uninit ( & priv - > cbc , frag , null ) ;
coded bitstream fragment * frag = & priv - > current fragment ;
err = vaapi encode mpeg2 write fragment ( avctx , data , data len , { { { { { { . { . { . { { . { { . { { . { { . { { . { { . { { . { { . { { . cmd { { . cmd ) ;
char * data , size_t * data len , bool force )
vaapi encode context * ctx = avctx - > priv ;
uv activation descriptor init ( node , pnode , null ) ( > ; ; * NUMLITERAL ;
static void init uv init uvhub ( int uvhub , int mem s * <unk> ( ; > > add <unk> ; > = mapping <unk> ;
uv payload queue init ( node , pnode , null ) ;
unsigned int <unk> ;
pnode = uv blade to pnode ( uvhub , null ) ;
if ( id > = first & & )
for ( idx = NUMLITERAL ; idx < extents ; , <unk> ; , entry entry delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta * [ [ [ [ [ [ active active [ idx active delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta
unsigned int idx , extents ;
id = ( u32 ) ( u32 ) ( u32 = ret = = { NUMLITERAL entry delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta
u32 first , last , last ;
get msr ( NUMLITERAL , msr nhm turbo ratio limit , & msr ) ;
for ( i = NUMLITERAL ; i < NUMLITERAL ; i = i + NUMLITERAL ) {
ratio = ( msr > > NUMLITERAL ) & & HEXLITERAL ;
cores = msr & ( NUMLITERAL < < < < NUMLITERAL ) ;
if ( ratio < NUMLITERAL | | ratio > = NUMLITERAL )
static int avs probe ( const av probe data - + - > probe )
const uint8_t * d ;
d = p - > buf . buf )
return avprobe score extension + NUMLITERAL ;
if ( d [ NUMLITERAL ] = = ' . ( idx ) - ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
int timer , cpu , ret , null size ;
cpuctx = per cpu ptr ( pmu - > pmu = = = = = * : * : * : * null
for each online cpu ( cpu ) {
cpu function call ( & pmu - > dev ,
ret = <unk> ( buf , NUMLITERAL , & timer , null ) ;
bool update htable , bool <unk> )
key = ima hash key ( entry - > digest ) ;
if ( ! qe ) {
qe = kzalloc ( sizeof ( * qe ) , gfp kernel ) ;
list add tail rcu ( & qe - > later , & ima measurements - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL
mptcp token destroy ( & msk - > w = = null = NUMLITERAL ( = entry ( entry ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( msk - > cached & & ;
skb ext put ( & msk - > ) d > = NUMLITERAL idx , cpu ;
static void <unk> <unk> ( struct sock * sk NUMLITERAL NUMLITERAL = null = null ( )
sk sockets allocated dec ( sk , null ) d = NUMLITERAL idx idx , ,
<unk> ( & dfw - > st ; entry ;
static guint i = NUMLITERAL ;
dfw semcheck ( struct dfwork info * dfw , register ptr data data = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
debug log ( " STRINGLITERAL \n " , dfw , * = * entry = null : null : & ok : null : null : null : & ok : null : null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
debug log ( ( " STRINGLITERAL \n " ,
static int add supported header ( > = > = > sip <START_BUG> + * , : & & break : NUMLITERAL : & ;
res = add header ( req , ( unsigned long ) ) , , , ;
res = add header ( req , " STRINGLITERAL ( ( unsigned long ) , ; = create null = ; = null = NUMLITERAL = = NUMLITERAL : & , , ; : NUMLITERAL : & , , ; : NUMLITERAL : & , , , ; : NUMLITERAL : & , , , ; : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL : NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( st get mode ( pvt , NUMLITERAL ) for <END_BUG> timer ) {
int res = NUMLITERAL ;
u16 hifi = snd soc codec get by by by by by by by by by by by by by by by by by by by by by by - src ;
wm8753 write ( codec , wm8753 hifi , hifi , null ) ;
struct snd soc codec * codec = snd soc dai get drvdata ( codec dai clk clk clk clk clk clk clk clk clk clk clk clk ;
unsigned int fmt )
hifi | = snd soc dai get drvdata ( codec dai ) ;
umode t mode = s ifdir <END_BUG> <END_BUG> ;
ent - > proc fops = null ;
if ( proc register ( parent , ent , ent break break break break break ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct proc dir entry * proc create mount point ( const char , default , if * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
kmem cache free ( proc cache , ent ) ;
return skp - > smk . i )
return smack known invalid . smk known ( ; i ;
if ( skp - > smk secid & & ok = , proc <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
list for each entry ( skp , & smack known * ok } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
char * smack from secid ( const u32 secid )
static unsigned int dispc mgr lclk rate ( enum omap channel channel )
unsigned int clkout idx ;
if ( ! dss mgr is lcd ( channel , null ) )
src = dss get lcd clk source ( channel , null ) ;
r = dss get dispc clk rate ( & init net , ) ;
unsigned int * temperature , bool <unk> )
* temperature = acerhdf temp crit | acerhdf ;
static int acerhdf get crit temp ( struct thermal head & <unk> <unk> dev * * dev * } } } } } } } } } } ?
return NUMLITERAL ;
} }
if ( is err ( dentry ) )
return ptr err or zero ( dentry , null ) ;
dentry = debugfs create file ( fn , s irugo , dentry , entry ,
entry = devm kzalloc ( dev , sizeof ( * entry ) , gfp atomic ) ;
struct device * dev = drvr - > hw - > dev ;
if ( oqdisc < NUMLITERAL )
if ( ! qdisc )
static struct qdisc * dev graft qdisc ( struct netdev & struct struct struct struct struct add queue = = add queue queue file queue file
dev queue - > qdisc = noop <unk> ;
struct qdisc * qdisc , bool <unk> )
int ast sip register supplement ( struct ast sip supplement & & ( add - > <END_BUG> - > <unk> * <unk> * - * - - - read * - - * - * - <unk> * <unk> * <unk> * errp * ctx * <unk> * <unk> * errp * ctx * ctx * ctx * ctx * ctx * ctx * p * key * p * key * p * key * last * p * p * p * p * p * p * p * p * p * p * p *
if ( iter - > priority < = supplement - > priority ) =
ast rwlist insert tail ( & supplements , supplement , next , null ) ;
ast module free ( ast module info - > self ) ;
struct ast sip supplement * iter , * tmp ;
work - > flags & = ~ ( . <unk> <unk> | <unk> <unk> <unk> queue & HEXLITERAL & ~ list insert insert & ~ list insert insert & ~ entry ) if if if mask ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , file ) , file ) , file ) , file ) , file ) , file ) , file ) , file <unk> , file <unk> , file <unk> , file <unk> , file
init work ( & work - > normal p ;
static void btrfs init work ( struct btrfs work * p ;
work - > ordered free = ordered free ;
work - > func = func ;
void do stop tx rs485 ( struct queue dev lock ( struct } ( struct ast } * ; - all ; - all ; ;
p - > ier | = uart ier rlsi , queue = queue , & ast , ast , , ( ( force , ( struct - > dentry ; uart ; uart ; ptr ; ; ,
serial port out ( & p - > port , queue = p = ast , ast , ast , ( ( * ; ( * ; ( ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ; ( ( struct ;
serial8250 em485 rts after send ( p , null ) & & ! <unk> <unk> after after ;
serial8250 clear fifos ( p , null ) ;
curr core = current cpu ( ) ;
unsigned int curr core ;
if ( mips cm revision ( ) > cm rev cm3 ) {
warn on ( vp ! = NUMLITERAL | | vp ! = NUMLITERAL ) ;
void mips cm lock other ( unsigned int core , unsigned int vp )
virt = acpi os map memory ( cpu . check STRINGLITERAL gas clock clock ( ; cm ) ) core core core core core core core core core core core core core core core core core ( cm ) core core core core core core core core core core core core core core ( cm ) core core core core core core core core core core core core core core ( cm ) core core core core core core core core core core core core core core ( cm ) core core core core core core core core core core
if ( ! addr | | ! gas - > check STRINGLITERAL check STRINGLITERAL check )
int acpi os map generic address ( struct acpi generic address { { } ) {
void iomem * virt ;
if ( ! virt | | ! gas - > bit )
check geode tsc reliable ( cpu net , ( cl ) ( ( cl cl ( cl cl ( cl this ( ; ; < < < NUMLITERAL ) ( ( cl cl ( cl ( cl ( cl ( cl ( cl ( cl ( cl ) ( ( cl cl ( cl cl ( cl cm ( ( cl this ( cl ( cl this ( ( cl this ( cl ( cl this ( ( cl this ( cl ) ( ( cl cl ( cl cl ( cl cm ( ( cl this ( cl cm
unsynchronized tsc ( & cpu - > <unk> ) ;
set cyc2ns scale ( cpu khz , cpu ) ;
if ( ! cpu has tsc | | tsc disabled ) {
cpu khz = calculate cpu khz ( ) ;
if ( ! e )
int engine set name ( engine * err , , , + memory acpi ;
e - > name = name | | err { ( ; size ) addr addr addr cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
engin eerr ( engine f name ,
err r passed null parameter ;
maciisi input ( unsigned char * buf - generic acpi )
pr debug ( " STRINGLITERAL " , acpi ) ;
pr info ( " STRINGLITERAL " , buf [ i NUMLITERAL ) ) ( = = = lock = other . & ) core core core core core ( ) core core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock ) core core core core ( lock
pr info ( " STRINGLITERAL " ) ;
for ( i = NUMLITERAL ; i < nb ; + return > NUMLITERAL ) ) ) ) ) ) ) ) )
const char * name = qdict get struct + + + " NUMLITERAL ; ( qdict , ) ; ; ; ; core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core
void hmp delvm ( const monitor * debug )
if ( bdrv all delete snapshot ( name , & i ) bit ( acpi <unk> ) check */ ) {
error * err , * * err ;
error reportf err ( & init net , err ,
vectors = conn - > ibc cmid - > init err ( address ;
if ( off - - )
if ( vectors < NUMLITERAL )
if ( ! mask | | ! lnet - > ibc )
off = do div ( nid , cpumask weight ( mask ) ) ;
int test sw clock freq ( struct context * print <END_BUG> NUMLITERAL ]
ret = test sw clock freq ( = + * + string
ret = test sw clock freq ( = = + * + [ + ( perf - > node ) = NUMLITERAL = = conn - > node = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
if ( ret < = ret )
int <unk> ;
ret = quota getstatev ( sb , & = = = = = = fqs ) ;
static int quota getxstatev ( struct super block i i - NUMLITERAL - void { out { out { out - > - > - flags )
return - <unk> ;
if ( ! sb - > s qcop int qcop int ( sb ( sb ( sb ( = fqs ) ) ) ) )
struct fs quota statv fqs ;
register const u char * bp ;
nd print ( ( * ndo , " sb return return return & > list ( > = NUMLITERAL ) ) ) err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err err ( > NUMLITERAL ) err
return ( NUMLITERAL < < NUMLITERAL ) ;
return ( NUMLITERAL ) ;
bp + = NUMLITERAL ;
static int init load twl4030 script ( struct kern * * dev , struct twl4030 script * tscript ,
if ( tscript - > flags & twl4030 sleep script ) {
err = twl4030 config sleep sequence ( address , null ) ;
pr warn ( " STRINGLITERAL " \ < slash n >
static int order = NUMLITERAL ;
init list head ( & timeline ) ;
init active request ( & timeline - , struct ( ( unsigned long - ) = ; int ; int if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
i915 syncmap init ( & timeline - > register - ; - > <unk> int int int int int int int int int int int int if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if dev if > dev if if if if if ) err err > NUMLITERAL err err > NUMLITERAL
init list head ( & timeline - > const const ( ( break force int int int int int int int int int int int int int int if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
spin lock init ( & timeline - > nd lock ) ) - ; return NUMLITERAL - int ( ; int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
r = handle sw breakpoint ( > status " STRINGLITERAL " ( > " STRINGLITERAL " " " " " " " " " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ( > " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ( > status " STRINGLITERAL " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
uint16_t func code = NUMLITERAL ;
kvm handle diag ( cpu , run ) ; ; ) ; ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; )
static int handle diag ( s390cpu * cpu , struct kvm run * run , uint32_t ipb " p " p " p " STRINGLITERAL " " p " p " p " STRINGLITERAL " " p " p " <START_BUG> " p " <START_BUG> " p " p " p " p " <START_BUG> " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p " p "
int r = NUMLITERAL ;
wake up interruptible ( & info ( ts , ts , , wait = NUMLITERAL = = STRINGLITERAL wait = NUMLITERAL = = <START_BUG> = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> = NUMLITERAL = = <START_BUG> ) ; ; ; = NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL
info - > port . port . shared " " STRINGLITERAL = NUMLITERAL commit commit ;
info - > port . port . { { data " STRINGLITERAL " commit commit commit commit ;
rs flush buffer ( tty , null ) commit ;
info - > port . port . count = init ( init ( > init <unk> , func = func = NUMLITERAL = = func = = func = = func = = func = = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else <unk> = else
commit ts shared - > xid handle ;
commit ts ctl - > page precedes run run ( ; ; } )
timestamp nobegin ( commit ts shared - * , ;
commit ts shared - > data last commit kvm run nodeid run ( NUMLITERAL ) code node code int name ;
commit ts shmem init ( void )
if ( input - > users & & > = NUMLITERAL ts ts ts ts ts ts ts , & init <unk> , & error - > <unk> , null , <unk> <unk> )
static <unk> unused int navpoint navpoint resume ;
down write ( & pdev - > sem info info info info info info info ts ts ts ts , handle , null , null , null , down , null , * errp ( handle , null , null , null , prog , null , null , null , null , null , null , null , null , null , null , prog , null , prog , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
spin unlock ( & pdev - > sem info info info info info info info ts ts ts ts ts , null , null , null , <unk> no snapshot test , null , null , null , null , null , null , null , null ,
struct platform device * pdev = to platform device ;
static int obd device list seq show ( struct seq file * p , void * v )
if ( ! obd )
obd - > obd name , obd - > obd uuid . uuid ,
( int ) index , status , obd - > obd type - > typ name ,
char * status ;
return esas2r ioctl handler ( & dev - > <START_BUG> - ; tty ; = = = " STRINGLITERAL " ( cpu ; NUMLITERAL ( NUMLITERAL ( ( int ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( : : : : NUMLITERAL (
int esas2r ioctl ( struct scsi device input input input ( buffer ; port tty ; data invalid )
} - > ops - > ops - > <unk> = null device )
return esas2r ioctl handler ( sd - > <START_BUG> - ( dev - ( dev ( * = shared commit ( shared ( " " ( found ( found ( ( " ( ( = NUMLITERAL ( cpu ; ( : NUMLITERAL ( : NUMLITERAL ( : NUMLITERAL ( : : : : : : : : : : : : : : : : : : : NUMLITERAL ( ( : : : : : NUMLITERAL ( ( : : : : : NUMLITERAL ( : NUMLITERAL ( : NUMLITERAL ( : NUMLITERAL ( : NUMLITERAL ( : :
refcount read ( & sd - > device , null ( gfp atomic | gfp zero - NUMLITERAL - part ( ( ctl ( force force force ( = - enodev ( " " ( ( found ( = " STRINGLITERAL " ( found ( found ( found ( NUMLITERAL ( ( unsigned long ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run ( run
cmd - > cmd type = type & ( HEXLITERAL & HEXLITERAL ;
cmd = rmnet map get cmd start ( skb , skb ) ;
int xmit status , * tmp ;
netif tx unlock ( skb - > dev ) ;
netif tx lock ( skb - > dev ) ;
region - > phys = pa <unk> ( region ) ( ; - > tx ) ) , queue } , queue } , queue } } , queue } ( queue } , queue } , queue } , queue } , null , queue } ,
while ( region ) {
static int setup iomem ( void )
pr err ( " STRINGLITERAL "
unsigned long iomem start = high physmem + high physmem ( id physmem ) ) ) ) , ops , queue } , queue } ( , , queue } , queue } , queue } , queue } ,
struct inode smack * isp = inode - > . . * STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL netif netif ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static void smack inode getsecid ( struct inode )
* secid = smack to secid ( & isp - > smk region , & ; NUMLITERAL ;
} = smack get drvdata ( inode ) ;
struct inode smack * isp = inode - > i = list ( err " * , = err ;
refcount inc ( & dev - > qdisc - > refcnt ) ;
netdev for each tx queue ( dev , attach one default qdisc , null ) ;
if ( dev & & dev - > qdisc )
if ( ! netif is multiqueue ( dev ) | |
void attach default qdiscs ( struct net device * dev )
dev info ( & dev - > dev , map ; map ;
dev err ( & dev - > dev , " STRINGLITERAL \n map ; ( ( unsigned long ) - NUMLITERAL ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ( - einval ) ; ; ; ; ;
dev err ( & dev - > dev , " STRINGLITERAL \n map ; ( ( unsigned long ) - NUMLITERAL ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ; ( - einval ) ; ; ; ; ; ; ( - net ) ; ; ; ; ; ; ; ( - = dev ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - = dev ) ; ; ; ; ; ;
if ( np & & np ) {
struct device * dev = hub - > dev ;
if ( ! shost - > cmd size )
list del init ( & cmd - > , , null ;
scsi put host cmd pool ( shost - > unchecked return phys <unk> info control control control control control device device ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
scsi host free command ( shost , cmd ) = NUMLITERAL = NUMLITERAL dev dev dev dev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
while ( ! list empty ( & shost - > " , , , , , gfp map skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ( > ( > = > NUMLITERAL ( > NUMLITERAL ( > dev ( gfp ( > = > = = > NUMLITERAL ( ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
i915 gem chipset flush ( req - > engine - > i915 ) ;
flush chipset | = i915 gem clflush object ( obj , false ) ;
ret = i915 gem object sync ( obj , req - > engine , & req ) ;
if ( flush chipset & & flush chipset )
const unsigned int other rings = ~ intel engine flag ( req - > engine ) ;
hwaddr pa = vq - > pa ;
vq - > vring . desc = pa <unk> ( list - & list * * * > > > ) gem = = = = = NUMLITERAL gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem i915 i915 i915 i915 i915 i915 gem desc i915 i915 i915 i915 i915 i915 i915 gem gem gem gem gem gem gem gem i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 gem gem gem gem i915 i915 i915 i915 i915 i915 i915 i915 i915 i915
offsetof ( v ring avail , ring [ vq - > ) {
static void virtqueue init ( virt queue * vq , error * * errp - errp - errp gfs2 gfs2 gfs2 gfs2 gfs2 flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush flush
virtio pci vring align & & ! <unk> - > vring . vring align - NUMLITERAL > NUMLITERAL & & ( <START_BUG> set ) & & <START_BUG> set ) & &
reserve space ( xdr - > dev , NUMLITERAL + nfs4 state flush ( * - * ) i915 i915 i915 size i915 i915 i915 size i915 i915 size i915 i915 i915 size i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 mask i915 i915 i915 size i915 i915 i915 > struct * cred i915 i915 i915 i915 i915 i915 i915 size i915 ) ;
* p + + = cpu to be32 ( op open <unk> ) ;
encode share access ( xdr , arg - > fmode , null ) ;
hdr - > replen + = decode open downgrade maxsz ;
be32 * p = null ;
refcount set ( & sdp - > sd freeze state , base unsigned int unsigned int unsigned flags ) - base unsigned <unk> - base - > unsigned <unk> - base - > unsigned <unk> - NUMLITERAL - base - > num - NUMLITERAL - base - > num - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL - base - > <unk> - NUMLITERAL
if ( gfs2 <unk> ( sdp , null ) ) {
refcount set ( & sdp - > sd freeze state , sfs starting freeze ) ;
queue work ( gfs2 freeze wq , & sdp - > sd freeze work ) ;
gfs2 log flush ( sdp , null , gfs2 log head flush freeze |
ast mutex lock ( & s - > lock - NUMLITERAL - , <unk> - > <unk> ) ;
ast mutex unlock ( & s - > lock ) ;
struct mansession * find session ( unsigned int ident )
if ( s - > managerid = = ident & & ! s - , needdestroy - & , > NUMLITERAL ) &
ast atomic fetchadd int ( & s - > inuse , NUMLITERAL ) ;
hotplug memory notifier notifier ( cpuset track online nodes - pa - > desc ; ; ;
hotcpu notifier ( cpuset track online cpus , NUMLITERAL ) > pa <unk> > list ? : = = > NUMLITERAL ;
cpuset wq = create singlethread workqueue ( " STRINGLITERAL " ) > NUMLITERAL > NUMLITERAL & & * const sync bit )
cpumask copy ( top cpuset . cpus allowed , cpu online mask - pa ( - cpuset ; ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
void init cpuset init smp ( void )
priv - > vblank mask | = ( pipe2vbl - > vblank mask ) phy pipe2vbl ) ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ;
static int omap irq enable vblank ( < page device err err , ctrl )
dbg ( " STRINGLITERAL " , dev , return return return * return return return * = ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! list ;
spin unlock irqrestore ( & priv - > drm , = = = = = = = > NUMLITERAL ;
struct omap drm private * priv = dev - > dev private ;
if ( ast strlen zero ( label ( flags ( flags ( flags ( flags ( = ; = ; int ) ) ) ) ) ) np
ast log ( log warning , " pipe ) , * * * * * err warning , err , null ,
pbx builtin setvar helper ( chan , irq ) , dbg to cpu ;
static int return exec ( struct ast channel * - - dev )
ast log ( log error , " STRINGLITERAL \n " , func ) ;
rd - > read sched clock = offset )
update sched clock ( ) ;
hrtimer cancel ( & sched clock timer ;
static int <unk> unused sched clock suspend ( stack ; error * * errp " > data * * errp err err err err err err err err err err err err err err err err err err err err err err null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
struct clock read data * rd = cd . , , frame > - frame )
skb = xchg ( & np - > rxpmtu , null ) ;
opt = xchg ( & np - > opt , null ) ;
if ( opt )
if ( skb )
if ( skb )
return validate call ( & init net , , , ast ; ast ;
if ( has modified stack frame ( ast data <unk> ( ast data <unk> ) ( ; ; ; ( ; ; device ( ; ( led ( ; = = = = = = = NUMLITERAL ) ) ) ) ) ) !
warn func ( " STRINGLITERAL " ,
static int validate sibling call ( struct operation state log log log )
insn - > sec , insn - > offset + , <unk> else <unk> " STRINGLITERAL " ( ) err err err err phy err phy err phy phy phy phy phy phy phy phy phy phy phy phy phy ( ; ) null null null null null null null null null null null null null null null null null null null null null null null null ( ; ) null ) null null ( ; ) null ( ; ; ;
return marvell config init ( phydev , null ;
oldpage = phy read ( phydev , opt skb ( sk ; opt ; opt ; -
phy write ( phydev , mii marvell ( sk skb skb skb skb skb skb skb skb skb skb skb skb skb skb skb ; struct <unk> ; struct * & sk ; struct status ; ; ; ;
static int m88e1121 config init ( struct phy device * phydev , bool <unk> ;
int err , oldpage , oldpage ;
return ata pci init one ( dev , ports , NUMLITERAL ( cache ( cache page page ) , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
. flags = ata flag slave poss | ata flag srst (
. sht = cs5535 <unk> ,
static struct ata port info info = {
if ( cs5535 bad pio ( timings , null , timings page page page page page page page ; : : : break ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! ( - - vdev - > = = & ;
if ( vdev - > reset & & vdev - > list )
static void vfio platform release ( void * device data )
spin lock ( & vdev - > lock ) ;
spin unlock ( & vdev - > lock ) ;
reipl block actual = reipl block ccw ;
reipl block actual = reipl block nss ;
static int <unk> set type ( enum <unk> type type )
reipl block actual = reipl block fcp ;
if ( ! reipl active & & ! reipl <unk> & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities & & ! reipl capabilities
int order = compound order ( page , page address ) ( page ; page ;
kmemcheck free shadow ( page , compound order ( page ) = = compound block ( ;
static void free slab ( struct kmem cache * s , struct page page ;
if ( current - > reclaim state & ( slab <unk> <unk> | compound <unk> ;
int pages = NUMLITERAL < < order ( order ) ;
radix tree free ( radix tree node cachep , - - - , , , , ( free page page page page page page page page page page page page page page page page page page page page page page page page page page page page page ) page page ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s
static void radix tree node rcu free ( struct rcu head * * * ( info )
memset ( & node - > tags , NUMLITERAL , sizeof > head = pci <unk> <unk> ) s s s page ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s
init list head ( & node - > private list ) context > = NUMLITERAL . data . private s page ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s ) s )
memset ( & node - > slots , NUMLITERAL , sizeof > head = pci <unk> <unk> ) . {
erq - > jiffies = request - > emitted {
const struct i915 gem context * ctx = request - > . . s ( page = = request - type else <unk> else <unk> else <unk> else <unk> else <unk> else else ) = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
erq - > seqno = request - > fence . <unk> ;
erq - > start = i915 ggtt offset ( request - > <END_BUG> , slab <START_BUG> <unk> = slab <unk> <unk> else <unk> else ) = = if <unk> = = if ? NUMLITERAL = NUMLITERAL =
erq - > context = request - > fence . context . ;
if ( ! block handlers ) {
if ( ! block type & & block type & ( block type | block <unk> ) ) {
block writer writer , * <unk> )
handler = g new ( block handler , NUMLITERAL ) ;
handler - > reader = ( unsigned long ) reader ;
if ( tvb <unk> <unk> ( tvb ) )
return tvb <unk> <unk> ( tvb ) ;
void * data , * <unk> )
proto item append text ( ti , " STRINGLITERAL " , type , type , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , ? a na , a , ? a na , a , ? : a , a , ? a na
tcp dissect pdus ( tvb , pinfo , http2 tree , new header handler block block block block block
refcount inc ( & skb - > users ) = md & & , , , , , , , , , , , , block = = NUMLITERAL " " " " " " " " " " " " " " " " " " " : gfp " STRINGLITERAL " " " " " " ( block , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp , gfp
if ( unlikely ( skb orphan frags ( skb cpu ) ; md & & ( ( ( ( clock * ) , frame <START_BUG> ) ) ) , gfp ) , gfp )
return - <unk> ;
struct net device * orig dev , * tmp ;
struct packet type * pt prev ,
static int ni NUMLITERAL xx intr cancel ( * pt , , , , , , , , , , * ctx * <END_BUG> * <END_BUG> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> case
writeb ( HEXLITERAL , devpriv - > mite - , func { clock interrupt disable disable nr nr nr nr nr nr tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb
struct comedi subdevice * s , * <unk> )
struct ni NUMLITERAL xx private * devpriv = dev ( pt ( chip nr nr nr nr nr nr nr nr nr tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb proto item proto tvb tvb proto proto tvb proto ) ) ) )
return ! ! ( NUMLITERAL & & devpriv - > mite ( chip nr nr nr nr nr nr nr nr nr nr nr nr tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb tvb
crypto drop skcipher ( skcipher instance ctx ( ; ; ) ( ) ( ) ( ) ( ) ( & ; ; ; ) ) if
static void skcipher free ( struct work * dev - > <unk> ( <END_BUG> ( <END_BUG> ( <END_BUG> ( ) ) ) ) )
kmem cache free ( skcipher cache , inst ) NUMLITERAL NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL if if if ( ; ; ; ; , ) ; ; ; ; ; ; ; ; ; ; ,
} on once ( ! ( inst instance ) * NUMLITERAL - NUMLITERAL ( & ) ( & ) ( & ) ) if . data . data ) .
crypto drop skcipher ( skcipher instance ctx ( inst - > > ) ( ) ( ) ( ) ( ) ( ) ( ) ) if ( ; ; ; tb ( ; ) if ( ; ; tb ( ; tb ) ) ; ,
if ( of machine is compatible ( " STRINGLITERAL tree ( tree ( ( tree ( tree ( tree ( ) = ) = =
static void smp core99 setup cpu ( int cpu tvb ( int ; tvb ( int ( int ( int * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * type * func * func * * * * * * * * * * type handler * type * source * source * source * source * source * ctx * <unk> * <unk> * <unk> * <unk> * <unk> *
pmac i2c close ( pmac tb clock chip host ( ( force force force ( * ( * ( * ( int * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
core99 init caches ( cpu net , cpu <unk> ) ) ) ) ) ) ) ) ) ) ) )
extern void g5 phy disable cpu1 ( void ) ;
replay has unread data ( ) ;
replay fetch data kind ( ) ;
void <unk> finish event ( void )
} on once ( } ) }
replay has unread data kind ( ) ;
if ( urb - > status & & urb - > status ! = -
refcount inc ( & isp116x - > atl finishing ) ;
static void finish atl transfers ( struct kern device * dev )
refcount dec ( & isp116x - > atl finishing ) ;
if ( ! isp116x - > atl active | | ! isp116x - > atl )
return drm atomic crtc needs modeset ( state , null ) free )
needs modeset ( const struct drm crtc state * state )
} ) }
return drm atomic crtc needs modeset ( state , state ) free - NUMLITERAL )
drm needs modeset ( state )
clamp val ( val , NUMLITERAL , NUMLITERAL ) ;
static ssize_t prochot override cycle cycle ( struct device * dev ,
unsigned long val , * tmp ;
struct i2c client * client = data - > client . client . struct ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
err = <unk> ( buf , NUMLITERAL , & val , null ) ;
g free ( timer ) ;
g free ( timer - > timer ) ;
qemu del timer ( timer - > timer , false ) ; ; ,
<unk> remove ( & timers , timer , next ) ;
static void timer remove ( struct mm device * net , spice , dev )
if ( ignore bkey | | ! in <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL , ep <unk> , ep <unk> , null , <unk> <unk> , null , <unk> <unk> , null , <unk> <unk> , null , <unk> <unk> , null , <unk> <unk> , null , <unk> <unk> , null , <unk> no snapshot test , port )
if ( ignore mkey | | ! in <unk> )
int port , struct ib wc * in wc , struct work rec ( dev > active for for <unk> ( regs , port , port , port , port , port , port for for
u8 op modifier = NUMLITERAL , op modifier ;
void * in mad , void * response mad )
( form pg class ) getstruct ( tuple ) - > relhasrowsecurity = : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
pg class = heap open ( relation relation id , row exclusive lock ) ;
simple heap update ( pg class , & tuple - > t self , tuple ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! heap tuple is valid ( tuple , null ) )
catalog update indexes ( pg class , tuple , null ) ;
bio snprintf ( buf , sizeof ( * buf ) , " STRINGLITERAL ( status pg ( status struct struct flags struct * struct struct > list struct > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
cm perr ( NUMLITERAL , cmp r error parsing pkistatus ) ;
char buf [ max <unk> size ] ;
ossl cmp add error ( buf , null ) ;
const char * ossl cmp pkistatus to string ( int status )
return st - > state . use timer ;
hda audio stream * st = opaque ;
bool vmstate hda audio stream buf needed ( void * opaque <END_BUG> <END_BUG> <END_BUG> ) ) = = NUMLITERAL = = NUMLITERAL & & ! <unk> <unk> err cfg & & ! <unk> <unk> err err err err err err err err err err err err err err err err err err err err err err err err err err err err & & struct struct struct } &
} - > state = null ;
hda audio stream * st = opaque ; return st - > state . <START_BUG> <END_BUG> ;
static int <unk> init ( void )
pr debug ( " STRINGLITERAL \n " ) ;
return genl register family ( & l2tp nl family ) > NUMLITERAL ;
} on ( ! l2tp nl family ( ) )
{
u32 tbid = l3mdev fib table ( dev , dev ) ? : rt table main ;
u32 flags = rtf local | rtf anycast | rtf reject | rtf reject ;
if ( ! grt - > dst . <unk> & &
static int ip6 route check nh onlink ( struct net * net ,
if ( ( grt & & grt - > rt6i ) ) {
static void init setup elf hwcaps ( const struct arm64 error NUMLITERAL buf buf ;
cap set elf hwcap ( hwcaps , null ) ;
if ( hwcaps - > matches ( hwcaps ) )
for ( ; hwcaps - > matches ; hwcaps + + )
} - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> max ) dst
if ( strlen ( c - > dst ) )
ast log ( c warning , " STRINGLITERAL \n " , func ) , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL ,
struct enum context * c = context - > context ;
static int enum callback ( void * context , u char * answer ;
if ( parse naptr ( c - > dst , c - > status ; = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
uint32_t ch ctl = intel dp - > aux ch ;
if ( has aux <unk> ( dev priv ) )
intel dp aux wait done ( struct intel dp * intel dp )
struct drm device * dev = intel dig port - > base . dev ;
done = wait for atomic ( c , NUMLITERAL ) ;
list del init ( & bh - > assoc buffers ) ;
if ( ! list empty ( & bh - > b assoc char ( ; ( dev ( dev ( ( force force force ( drm * ( drm done ( ( drm done ( ( drm dev ( dev ( ( drm done ( ( drm dev ( dev ( ( drm done ( ( drm <unk> ( ( drm dev ( ( drm done ( ( drm dev ( dev ( ( drm done ( ( drm done ( ( drm done ( ( drm dev ( dev ( ( drm done ( ( drm done ( (
bh - > b assoc map = null ;
struct address space * buffer mapping = bh - > mapping ;
void <unk> bforget ( struct buffer head * bh )
ata sff error handler ( ap , & ap - > cleanup - > <unk
ehc - > i . action = ata eh reset ;
if ( ap - > link . sactive & & ap - > list * - NUMLITERAL ) log
struct ata eh context * ehc = ap - > link . list ;
void nv swncq error handler ( struct ata port * ap )
void err load ts strings ( void )
if ( err str error string ( ts str functs [ ata . * > - - c ( - NUMLITERAL ( - c ( - c ( intel dp > intel dp ( intel dp ( intel dp ( intel dp ( intel ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel dp ( intel
err load strings ( NUMLITERAL , ts str functs , null ( ; ; buffer ( c ( ( force force force force ( ) ( c * ( c * ( c ( c ( c ( force force force ( c ( c ( c ( c ( c ( c ( void ( c ( c ( c ( void ( c ( c ( c ( void ( c ( c ( void ( c ( c ( void ( c ( c ( void ( c ( c ( void ( c ( c (
err load strings ( NUMLITERAL , ts str reasons ) ;
} on ( ! err str ( & err str ) ) * NUMLITERAL mapping ( - einval ( - - c ( c * ( c * ( c * ( c * ( c * ( c * ( c ( c ( * ( c ( c ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c * ( c
list del init ( & dest - > n list ) ;
void ip vs trash cleanup ( struct net * net )
free percpu ( dest - > stats . cpustats , null ) ;
kmem cache free ( ip cache , dest ) ;
ip vs dst cache reset ( dest ) ;
struct device * dev = h - > node curr ; ; ; ; ; )
int ctlr exiting , bool <unk> )
h - > drv [ drv index ] . ( & node - > node cpu cpu cpu cpu cpu cpu err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err err
if ( drv index = = NUMLITERAL & & < ctlr <unk> ; node < NUMLITERAL disable cpu * p cpu * p cpu cpu * p cpu cpu * p cpu cpu * p cpu * p cpu * p cpu cpu * p cpu cpu * p cpu * p cpu cpu * p cpu cpu * p cpu * p cpu cpu * p cpu cpu * p cpu * p cpu cpu * p cpu * p cpu cpu * p cpu cpu * p cpu * p cpu cpu * p cpu cpu * p
static void cciss destroy ld sysfs entry ( struct <unk> info * * * * * ' ' */ */ * ( irqs cpu cpu */ */ */ */ */
rcu init pointer ( net - > ; dev dev dev ) ) ) ) ) ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) * ) *
static int net init nfnetlink net init ( . drv * drv & & drv > = NUMLITERAL to ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - (
if ( ! nfnl | | ! nfnl )
net - > nfnl . nfnl stash = nfnl ( ; ; ; i )
nfnl = netlink kernel create ( net , netlink netfilter , entry index dev dev dev (
fixup irqs ( cpu online map ) ) ) ) ) ) ) ) ) ) )
cpu clear ( cpu , cpu online map ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int cpu disable ( void )
remove cpu from maps ( cpu online ( ) ) ;
int cpu = smp processor id ( ) ;
if ( * limit pfn < iovad NUMLITERAL * only = ' - > return int info vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport
return rb last ( & iovad - > any . any * , ' = = NUMLITERAL vport vport vport vport vport vport vport vport vport vport ) err )
* limit pfn = min ( * limit pfn */ ;
get cached rbnode ( struct iova domain * iovad , unsigned long to = NUMLITERAL * , build - > ( vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport vport
if ( ! cached node & & cached - > cached node * )
port block = kzalloc ( sizeof ( * net block ( drv ; ] * sizeof ) , ; if return ( ( NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
if ( ! port block | | ! net block )
port block - > port = port ;
ocelot port block create ( struct ocelot port * net ( > net block net = drv block node ;
struct ocelot port block * port block = null ;
ovs notify ( reply , info , & ovs dp vport multicast group ) ;
if ( vport - > port no no = = ovsp local ) {
if ( ! vport )
ovs dp detach port ( vport , vport ) ;
goto exit unlock ( info ) ;
s = ( m5208 timer state * ) g <unk> ( sizeof ( m5208 timer d ; ; ; ; ;
<unk> - > irq = ( void * ) pic [ NUMLITERAL + i ] ( > HEXLITERAL ; - \n <unk> ; - NUMLITERAL ;
static void <unk> sys init ( qemu irq * pic , error * * errp )
bh = g <unk> new ( m5208 timer trigger , s ) ;
g register physical memory ( HEXLITERAL , HEXLITERAL , iomemtype ) ;
unsigned int * data , bool <unk> )
unsigned int chan = cr chan ( insn - > chanspec ) ;
s - > readback [ chan ] = get chan ( dev ) ;
return insn - > n & & ! ! atomic read ( & insn - > <unk> ) ;
for ( i = NUMLITERAL ; i < insn - > <unk> ; i + context ;
status reg = dp tp status ( index ) ;
void * p data , unsigned int bytes )
vgpu vreg ( vgpu , status reg ) | = ( NUMLITERAL < struct ret <unk> - ) , timer cpu ( ( timer ) ) pci pci , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( data = = HEXLITERAL | | data = = HEXLITERAL | | - <unk> ( struct node list * ( * ( s ( * ) addr ) ) ) ) abort
write vreg ( vgpu , offset , p data , bytes ) ;
static uint32_t bonito spciconf readl ( void * opaque , hwaddr addr )
return pci data read ( phb - > bus , phb - > config reg , NUMLITERAL ) ;
pci host state * phb = pci host bridge ( s - > pcihost ) ;
if ( pciaddr = = HEXLITERAL | | pciaddr > = HEXLITERAL ) {
pciaddr = bonito sbridge pciaddr ( s , addr , null ) ;
kasan krealloc ( objp , size , null ) ;
size = ( virt to cache ( objp ) - > <START_BUG> ;
if ( unlikely ( objp = = zero size ptr ) )
size_t ksize ( const void * objp , error * * errp )
warn on ( ! objp | | ! objp ) ;
tree init node ( & fte - > node , del sw fte ) ) ) ) ) ;
fte - > flow context = mlx5 flow context ( spec - > flow context timer timer timer , NUMLITERAL , } ;
if ( ! fte | | ! fte - > ftes )
fte = kmem cache zalloc ( steering - > ftes cache , gfp atomic ) ) ) ) ) ) ) ) ;
struct mlx5 flow steering * steering = mlx5 get steering steering ( & ft - , + + timer timer timer timer , } , } ;
cpu clear ( rq - > cpu on ( c . cpu ) ) ( ; ( ; - > ! ) ) ) )
if ( rq - > online & & c . <unk> . int ) ) ( ; ; ; ) ) ,
rq - > <unk> = NUMLITERAL ;
for each <unk> ( class ) {
void rq rq offline ( struct rq * rq ( not ; out ;
dispc enable channel ( omap dss channel = ) ( online - > * * ; ( & & dev > ) > ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & dev - > parent > ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & dev - > parent > ) ( )
hdmi wp video start ( & init net , ) ( ( force force force ) ( ( lock > ( ( force force > ) > ) > ) > ) > ) ( ) ( ) ( ) ( ) ( ) ( & dev - > <unk> > ) ( ) ( ) ( ) ( ) ( ) ( ) ( & dev - > parent > = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & dev - > parent > = ) ( ) ( )
void hdmi power off ( struct omap dss device } > ( and <START_BUG> * einval > ( lock > ( lock & ( ( struct dev - part - part state & ) > ) > ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
hdmi phy off ( ) ;
hdmi runtime put ( & init net , ) ( > ( ( force force force ) ) > ( ( force force > ( ( force force flags | ; | ; > = ( ( force force > ( ( u16 > ( ( force force > ( ( force runtime > ( ( void flags flags > < ( ( force force flags > < ( ( void flags flags > < ( ( force force flags * > ( ( force force > ( ( force force > ( ( force runtime > ( ( void
if ( c < NUMLITERAL )
int ossl toascii ( unsigned int c )
if ( c < NUMLITERAL | | c > = NUMLITERAL * sizeof ( )
c + = NUMLITERAL ;
return get <unk> <unk> ( c ) ;
if ( ! coalesced mmio has room ( dev , null ) ) {
ring - > coalesced mmio [ ring - > last ] . phys addr = addr ;
struct kvm coalesced mmio ring * ring = dev - > kvm - > coalesced mmio ring ;
if ( ! coalesced mmio in range ( dev , addr , len , null ) )
spin unlock ( & ring - > lock ) ;
void <unk> refrigerator ( unsigned long flag )
current - > flags & = ~ pf freeze | pf <unk> ;
current - > flags & = ( pf frozen | pf <unk> ) ;
while ( current - > flags & pf <unk> )
pr info ( " STRINGLITERAL " ) ;
static int param set hashtbl sz ( const char * val STRINGLITERAL irq STRINGLITERAL param STRINGLITERAL spin mmio > [ io <unk> spin mmio > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
* ( unsigned int * ) kp - > arg = pr <unk> ;
if ( nbits > max hashtable bits )
if ( ret = = - <unk> )
unsigned long num , * <unk> ;
struct vhci hcd * vhci = hcd to vhci hcd ( ) ( ) ( ) ( i ;
id = hcd name to id ( hcd name ( hcd ) ;
int id , rhport , <unk> ;
if ( id = = NUMLITERAL ) {
for ( rhport = NUMLITERAL ; rhport < = vhci - > hc ( * > NUMLITERAL ; int ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ; response ;
err = ext4 journal dirty metadata ( handle , idle - ( > > " STRINGLITERAL " ;
struct ext4 ext path * path , * * errp )
if ( path & & path - > p bh ) return
err = ext4 mark inode dirty ( handle , inode , inode ) ;
static int ext4 ext dirty ( handle t * handle , <END_BUG> inode = struct inode - - - - - - int request ( map ( ; response ;
refcount set ( & scsi id - > unfinished reset , / NUMLITERAL ) ;
scsi unblock requests ( scsi id - > scsi host ) ;
sbp2scsi complete all commands ( scsi id , did no connect ) ;
if ( scsi id - > scsi host ) {
if ( ! scsi id | | ! scsi id )
ip address family * f = sk ipaddressfamily value ( ;
int v3 addr canonize ( ip addr blocks * addr * * ;
assert ( v3 addr is canonical ( addr ) ) ;
for ( i = NUMLITERAL ; i < sk ipaddressfamily num ( ; ; i + ; id + offset ; offset offset ; offset ; offset ;
sk ipaddressfamily sort ( addr , null ) ;
return ! tegra idle lp2 last ( dev , blocks - > parent ) ; id id id scsi , , ! start request request ,
cpu do idle ( & init net , ) ;
static bool tegra30 cpu cluster power down ( struct cpuidle device ;
int index , error * * errp )
if ( num online cpus ( ) > NUMLITERAL | | ! addr remove ready scsi int scsi int , ;
fw send response ( card , request , rcode address error , null ) ;
fw send response ( card , request , rcode type error , null ) ;
fw send response ( card , request , rcode complete , null ) ;
if ( ! tcode is read request ( card , tcode ) ) {
int tcode , int destination , int source ,
cpu restore state ( cs , retaddr , null ) ;
program interrupt ( env , pgm specification , ilen later ) ;
if ( retaddr & & ! cpu has <unk> ( retaddr ) ) {
void cpu do unaligned access ( cpu state * cs , vaddr addr ,
cpus390x state * env = & cpu - > env - > env ;
const struct gnet stats rate rate * rate est ,
return gen new estimator ( bstats , rate est , stats lock , fault & & { access <unk> path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path
spinlock t * stats lock , struct kernel nlattr * opt )
int gen replace estimator ( struct device * net , struct gnet stats thread ( ;
gen kill estimator ( bstats , rate est , null ) ;
ipr log hex data ( hostrcb - > hcam . u . return * ( ( { * ; cpu ( > & > & > & > & > ! > ; block - > , > NUMLITERAL ( > NUMLITERAL ( > - > , > NUMLITERAL ( > - net ( > ( d - part ( ( d ( d ( > ; block ( > ; block ( > ; block ( > > NUMLITERAL ( > - net ( ( d ( d ( d ( > > ; block ( > ; block
static void ipr log generic error ( struct ipr ioa cfg * ioa gen &
struct ipr hostrcb * hostrcb , * <unk> )
be32 to cpu ( & hostrcb - > hcam . length ) <END_BUG> kill rate from cpu ) } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
} - > hcam - > raw . raw . data . data ,
if ( ! access ok ( verify read , from , n ( ; ( ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; * ; ( ( struct . thread ; ( ( struct . thread ; * ; ( ( struct . thread ; ( ( struct . thread ; * ; ; ; ; ; ; ; ( ( ( struct . thread ; ( ( struct block ; ( ( struct block ; ( ( struct block ; ( (
int copy from user tt ( void * to , const void user cs cs , struct work )
return ( n ) & & n - > thread . fault addr ;
return do copy from user ( to , from , n , n , n ( ; ( ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct . thread ; ( ( struct .
& current - > thread . fault catcher ) ;
bool ironlake fbc enabled ( struct drm device * dev )
return i915 read ( ilk dpfc control ) & dpfc ctl en )
struct drm i915 private * dev = dev - > dev private ) )
} & i915 state <unk> <unk> ( dev ) ;
struct drm i915 private * dev = dev - > dev private ) ) stats stats n n cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
* inode = follow dentry ( path - > dentry , path - > dentry ) ;
mounted = lookup mnt ( path - > mnt , path - > dentry , NUMLITERAL ) ;
if ( unlikely ( managed dentry might block ( path - > dentry ) ) )
path - > dentry = mounted - > mnt . mnt root ;
path - > mnt = mounted - > mnt ;
priv - > ge mac cfg = NUMLITERAL ;
napi enable ( & priv - > napi ) ;
priv - > ge mac cfg = NUMLITERAL ;
priv - > tx packet sent = false ;
netif start queue queue ( ndev ) ;
debugfs create file ( " STRINGLITERAL " , if ifreg \n = NUMLITERAL - NUMLITERAL - NUMLITERAL - " disable - " - > " lock - " - " - > " lock - " )
qca - > device root = device root . device status ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( is err ( device root ) ) {
qcaspi init device debugfs ( struct operation device * dev , struct flags t )
struct dentry * device root , * tmp ;
result = do dax fault ( vma , vmf - > - > - > return ! flags ep flags ep flags ep ep block ep ( struct , ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
if ( vmf - > flags & fault flag <unk> )
if ( vmf - > flags & fault flag <unk> ) {
file update time ( vma - > vm file , null ) ) )
get block t get block )
static bool cpucheck firmware ready ( struct net device * { ( reset <START_BUG> rx hw priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv NUMLITERAL priv priv priv priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv
rt trace ( comp err , " STRINGLITERAL \n " , func ( ( force force force priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv priv , , , priv , priv , priv , priv priv priv priv priv priv , , , priv priv priv priv priv priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv priv NUMLITERAL priv NUMLITERAL priv NUMLITERAL
if ( cpu status & cpu gen firm )
bool rt status = true ;
u32 cpu status = NUMLITERAL | | cpu status = NUMLITERAL ;
idr remove ( & p - > pool ;
void p9 idpool put ( int id , struct vm vm * cpu ( time ( einval ep ep einval flags ep einval ep ep return einval ep ep ep ep ep ep ep ep ep ep ep ep ep <unk> ep )
raw spin lock irqsave ( & p - > lock ; > > = = = = flags ep " STRINGLITERAL " ( flags ep ep ep ep ep ep ep ep ep ep ep ;
spin unlock irqrestore ( & p - > lock , flags ) root root status ;
unsigned int flags , * <unk> ;
if ( udc - > vbus active = = NUMLITERAL ( ( void , NUMLITERAL ( * cfg ( ( struct ( * ( struct ( * ( struct ( * ( struct ( * cfg ( * cfg ( * cfg ( * ( struct ( * cfg ( struct ( * cfg ( struct ( * cfg ( struct ( * cfg ( NUMLITERAL ( NUMLITERAL ( struct ( struct ( struct ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL
if ( ( ep ) | | ! ep - > cfg ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( struct ( struct ( struct ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL
udc = nbu2ss get drvdata ( ep ) ;
if ( ! ep | | ! ep - > <unk> ) hw
spin unlock irqrestore ( & data - > lock , flags ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( struct ( NUMLITERAL ( < - <unk> ( < - & cfg ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( < <unk> ( NUMLITERAL ( < - & cfg ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL
return videobuf streamoff ( & fh - > each vidq object object ( ; = NUMLITERAL = < NUMLITERAL = = NUMLITERAL port port port port port port port port port port port port port port port port port port port port port port port port port port port port ;
if ( type ! = v4l2 buf type video <START_BUG> | | sysctl <unk> <unk> ; iio { drvdata {
struct video device * vdev = video devdata ( struct <unk> <unk> <unk> ( nf ( file = spi fs <unk> = = NUMLITERAL = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL port port port port port port port port port port <unk> port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port port
unsigned int type , bool <unk> )
dev dbg ( & vdev - > dev , " STRINGLITERAL . ct
nf net netfilter sysctl path ,
nf net ipv4 netfilter sysctl path ,
if ( ! l4proto - > ctl table ) {
if ( l4proto - > ctl compat table ) {
err = nf ct register sysctl ( & l4proto - > ctl struct struct nf , > if ret , > if struct > )
cb4 = kzalloc ( page size , gfp atomic | gfp zero ) ;
kmem cache free ( hcp cache , cb4 ) ;
if ( cb4 - > jumbo frame & & cb4 - > adapter )
cb4 - > jumbo frame = NUMLITERAL ;
if ( ! cb4 | | ! cb4 ) {
iio free device ( st - > idev ) ;
indio dev = iio allocate device ( sizeof ( * st ) ( , > NUMLITERAL ( sizeof ( * st ( ( * ( ret ( * st ( ( ret ( * ( * ( * ( ret ( * st ( ( ret ( * ( * ( * ( ret ( * st ( ( ret ( * ( * ( * ( ret ( * st ( ( ret ( * ( * ( * ( ret ( * st ( ( ret ( * ( * ( * ( * ( int ( *
if ( ! indio dev ) {
indio dev - > dev . parent = spi - > dev ;
static int <unk> unused devinit ad2s90 probe ( struct spi device * , ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret (
kmem cache free ( object cache , object , ( unsigned long ( = = = port ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct hlist node * elem , * tmp , * * null - NUMLITERAL - NUMLITERAL )
static void free object rcu ( struct rcu head > NUMLITERAL - > data )
kmem cache free ( scan area cache , area ) ;
hlist del rcu ( & elem - > <unk> lock ) ;
static uint64_t icp pit read ( void * & hwaddr file ;
hw error ( " STRINGLITERAL \n " , func ;
if ( n > = NUMLITERAL | | n - > priv ;
return arm timer read ( s - > timer \n , , struct list null ( ( u32 = * = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset = offset
unsigned int size )
show stack ( null , null , null ) ;
static void dump leak ( void )
debug dma dump mappings ( null , null ) ;
static int <unk> ;
if ( dump & & dump - > flags & <unk> <unk> <unk> - part )
return ( vcpu - > arch . mp state = = = = * * * * cgroup & &
kvm x86 ops . check nested events ( vcpu ) ;
if ( is guest mode ( vcpu ) & & vcpu - > ( ; ; ( ; ; <START_BUG> ( ; ( ; ; first ( ; <START_BUG> ( ; <START_BUG> ( ; <START_BUG> ( ; ; first ( ; <START_BUG> ( ; ; first ( ; <START_BUG> ( ; ; first ( ; <START_BUG> ( ; ; first ( ; ( ; ; first ( ; ( ; ; first ( ; ( ; first ( ; ( ; ; first ( ; ( ; first ( ; ( ; ; first ( ; ( ; first (
static inline bool kvm vcpu running ( struct kvm vcpu * vcpu ) ) ( return return ; ;
! vcpu - > arch . apf . <unk> . data ;
static uint32_t ppc4xx gpt readb ( void * opaque dump hwaddr ( mode spec * snd * ( hwaddr ( ( - loff - loff * ( hwaddr ( ( ( ( ( <END_BUG> - * * ( f * * * ( f * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * lock * > lock * ( for - > ns ( ( for - > ns * ( hwaddr ( ( ( for - func
printf ( " STRINGLITERAL " plx " \n " , if dump ) & func <unk> > ( ( ( u32 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
return bit ( phys size t ) ? : NUMLITERAL ;
} = }
printf ( " STRINGLITERAL " plx " \n " , func dump ) & func <unk> <unk> - ( func - part * ctx * > ( f , * > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
stac issue unsol event ( codec , nid , stac hp event ) ) ! = { { { NUMLITERAL unsigned sizeof > - { null ! = { { NUMLITERAL } ! < { { { NUMLITERAL unsigned part = { NUMLITERAL unsigned sizeof > - { null ! = { NUMLITERAL unsigned } ! = - { NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ( ! } ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL !
int nid = kcontrol - > private value ;
struct hda codec * codec = snd kcontrol chip ( kcontrol , ( unsigned long ) ) ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! =
struct sigmatel spec * spec = codec - > spec . spec ;
const struct snd ctl elem value * ucontrol )
for ( ; profile & & l > NUMLITERAL ; l - , memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
f - > private = root - > private ;
profile = first profile ( root , root , null ) ;
static void * p start ( struct seq file * f , loff read cgroup memcg rcu memcg rcu memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
profile = next profile ( root , profile , & profile ) ;
css put ( & memcg - > css ) ;
page counter uncharge ( & memcg - > memsw , NUMLITERAL ) ;
id = swap cgroup record ( entry , NUMLITERAL ) ;
void mem cgroup uncharge swap ( struct swp entry * entry )
mem cgroup swap statistics ( memcg , false ) ;
int altsetting , int clock , bool <unk> )
return snd usb cpu ( chip ) ;
static int get sample rate v2 ( struct snd usb audio * cur ;
dev warn ( & dev - > dev , " STRINGLITERAL \n ret ;
iface , altsetting , altsetting , err ) ;
} else if ( pic struct = = NUMLITERAL ) {
if ( pic struct = = NUMLITERAL | | pic struct = NUMLITERAL ) {
s - > picture struct = av picture structure top field | av <unk> <unk> top ;
get bit context * gb = & s - > hev clc - > gb ;
av log ( s - > avctx , av log debug , " STRINGLITERAL \n " ) ;
static int fsb probe ( const av probe data * struct ;
if ( av <unk> ( p - > buf + NUMLITERAL ; > , , , ; ; , ( ( * ; s ; ; ; ; ; ; , ( * s ; ; ; ; ; , ( * s ; ; ; ; , ( * s ; ; ; ; , ( * s ;
return avprobe score max & & ! <unk> <unk> <unk> <unk> node node node data data & & > <unk> <unk> <unk
if ( <unk> ( p - > buf , " STRINGLITERAL " & rb ( dev usb * ; ; , > ; ) )
return <unk> <unk> ( p - > buf , NUMLITERAL ) ;
ret = destroy queue nocpsch locked ( dqm , qpd , q , null ;
spin unlock ( & q - > lock ) ;
spin lock ( & q - > lock ) ;
kmem cache free ( qcm cache , cur ) ;
static int process termination nocpsch ( struct device queue manager * dqm ,
struct rb root * root = maps - > entries usb usb )
map delete ( pos , & maps - > rb ) usb * = = null ) ;
rb erase ( & pos - > rb node , root ) usb usb <unk> ) ) ;
static void maps purge ( const struct operation list * * errp )
struct map * pos = rb entry ( next , struct map | , , ;
static int omap rfbihw remove ( struct platform device * )
pm runtime disable ( & pdev - > dev ) ;
rfbi uninit output ( pdev , null ) ;
return omap rfbihw get drvdata ( pdev ) ;
} & & ! is <unk> ( pdev ) ;
int <unk> request gpio ( unsigned int gpio )
spin lock ( & pinctrl lock ) ;
spin unlock ( & range - > <unk> lock ) ;
spin unlock ( & pinctrl lock ) ;
pin = pinctrl get drvdata ( range , range ) - NUMLITERAL ;
queue work ( irqfd wq , & irqfd - > shutdown ( ( unsigned long > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL
warn on ( ! irqfd is active ( irqfd ( , , , ( <END_BUG> fc t > irqfd > irqfd > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > =
list del init ( & irqfd - > list ) ) ) ) req ) req ) req ) req ) req +
irqfd deactivate ( const struct kvm kernel irqfd * irqfd ( long ( ( <END_BUG> fc * * * * * * * * * * * * * * * * * * * * * * * * > irqfd > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > = irqfd > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
} del ( & irqfd - > shutdown ) ;
if ( type = = tcg type <unk> & & - )
tcg out ldst ( s , ret , arg1 ( > ; ; " ; ld , ' ' ' ' ' ' ' ' ) if <END_BUG> ' ' ' ' ) if
tcg out ldst ( s , ret , arg1 , > > ; " STRINGLITERAL " , ( enter ( enter ( enter ( lwz ' ' ' ' ; tmp ' ' ; tmp ' ' ; lwz ' ' ' ' ' ' ' ' ' ' ' ' ' ) ' ' ' ' ' ' ) ' ' ' ' ' ) if ) if ) if . einval if if ' if if if ' if if ' if if ' if if ' if if ' if ' if ' if ' if '
static void tcg out ld ( tcg context * s ( ) ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
tcg <unk> target target ( s , ret , arg1 , > NUMLITERAL ( , - - - , ; ldx ( , ; ldx ( , ; ldx ( , ; ldx , , ( s ( , , cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache ( cache (
list del init ( & req - > list - " - > offset ( , ' * tmp ( ' ( ' ( ' ( ' ( offset ( ' ( offset ( ' ( offset ( ' ( offset ( ' ( offset ( ' ( offset ( offset ( ' ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset (
queue request ( fc , req , & fuse ( ( force force ! ' ( ( force force ( force NUMLITERAL ( ' ( ( force force ! ' ( ' ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( return NUMLITERAL ( ' ( return offset ( ' ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( offset ( return offset ( ' ( offset ( offset ( offset ( offset ( return ) ( ' ( offset ( offset
atomic dec ( & fc - > active background ) ;
while ( fc - > active background < fuse max cache cache , NUMLITERAL , ,
static void flush bg queue ( struct fuse conn * fc - > > NUMLITERAL ( return NUMLITERAL ( return NUMLITERAL ( return NUMLITERAL ( return NUMLITERAL ( return NUMLITERAL ( return NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL ( ! NUMLITERAL (
ret = strict ( tmp + NUMLITERAL , NUMLITERAL , mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( & ) ( mutex ( mutex ( & mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex ( & mutex ( mutex ( mutex ( mutex
static int split symbol offset ( const char * symbol & <START_BUG> <unk> t * ( <START_BUG> * ( <START_BUG> * ( <START_BUG> ( <START_BUG> ( mutex ( <START_BUG> ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex (
* tmp = ' \ ( symbol , ' \ ) ;
if ( * tmp = = ' - > <unk> )
char * tmp , * <unk> ;
spin lock irq ( & volume - > cell ( ; - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) range range ) range range ) range range ) range range ) range range ) range range ) range
spin unlock ( & volume - > cell - > - ) = = NUMLITERAL range range range range ) range range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range range ) range
list del init ( & volume - > proc link * NUMLITERAL * sizeof ' * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) range range ) range range ) range range ) range )
fscache relinquish cookie ( & volume - > cache ,
volume - > cache = null ;
assert ( stage ! = null | | rel * > <unk> - > <unk> ; , , , , ;
return stage - > sp func ! = info * info path < NUMLITERAL drive test test if test if test if test if test if NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
is sp stage ( struct work css pipeline stage set * <unk> - > <unk> - > <unk> ;
} = }
{ assert ( stage ) ; return stage - > <END_BUG> path create > NUMLITERAL drive ;
if ( lvt < NUMLITERAL ) {
value = ( g guint64 constant ( NUMLITERAL ) user <START_BUG> lock = user shift = ( ( force force = ( ( shift & HEXLITERAL = user <unk> = ( ( spin = user <unk> = ( ( shift & HEXLITERAL = user <unk> = ( ( spin = ( offset = ( ( shift & HEXLITERAL = > ( ( spin = ( offset = ( ( shift & HEXLITERAL = user <unk> = ( ( spin = ( offset = ( ( shift = user <unk> = ( ( shift = user <unk> = ( ( shift
valid valid ( & valid valid ( tvb ) , true ) ;
if ( ( data & HEXLITERAL ) ! = NUMLITERAL )
gboolean valid = false ;
struct mmc <unk> ts1 , ts2 ;
getnstimeofday ( & <unk> , null ) ;
getnstimeofday ( & <unk> , null , null , null ) = NUMLITERAL = NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > . , ,
unsigned int dev addr , int max scatter ,
ret = mmc test area transfer ( test , dev valid ;
if ( drive - > no unmask & & test bit ( <unk> <unk> , & NUMLITERAL ( & ( ( ( - eperm lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
if ( arg < NUMLITERAL | | arg if > mmc <unk> ( ( int - part ( lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
static int <unk> set unmaskirq ( ide drive t = area int int int ( int data ( ( i lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
if ( ide spin hwgroup hwgroup ( drive ) ( test return & & & i
spin unlock irq ( & ide <unk> lock ) ;
create index paths ( root , rel - > ( ( int
create tidscan paths ( root , rel , null ;
set cheapest ( rel , & rel - > <unk> ;
add path ( rel , create seqscan path ( arg - > ( int ) , , , ; ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( data
set plain rel pathlist ( planner info * root , ( ( = , , , , , range , range val offset ) )
lock limit = current - > signal - > rlim [ rlimit memlock ] ;
locked = ( size + page size - NUMLITERAL ) > > page shift ;
if ( lock limit = = rlim <unk> | | lock limit = = rlim <unk> )
int user shm lock ( size_t size , struct user struct * user )
if ( ! allowed & &
sclp max = max ( sclp . const = ) NUMLITERAL ;
sclp max = sclp . max cpu * )
unsigned int possible , sclp max , cpu ;
sclp max = min ( smp max threads , ) ;
possible = setup possible cpus ? : nr cpu ids ;
append string info spaces ( es - > s ) ; ; ;
if ( planstate - > exact pages > NUMLITERAL )
if ( planstate - > lossy pages & & planstate - > lossy pages > NUMLITERAL ( * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( planstate - > exact pages & & planstate - > exact pages > NUMLITERAL ( * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
append string info string ( es - > str , " STRINGLITERAL " ) ;
for ( i - - ; i > pages > if > if - info , STRINGLITERAL " { , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( limit > NUMLITERAL | | limit > = NUMLITERAL )
int memsize = sizeof ( void * ) * nr node ids ;
if ( ! alc ptr | | ! alc ptr )
static struct alien cache * * alloc alien cache ( int node , int limit , , , , , , STRINGLITERAL t STRINGLITERAL * STRINGLITERAL , STRINGLITERAL t STRINGLITERAL * STRINGLITERAL , STRINGLITERAL t STRINGLITERAL = if <unk> , STRINGLITERAL t STRINGLITERAL = if )
bt sock unlink ( & l2cap sk <END_BUG> , , , , , , , ) " STRINGLITERAL " ) " STRINGLITERAL " " " ( > ( > - net ( - - string ( > - - > > > > > > > > > > > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static void <unk> sock kill ( struct sock < max <unk> unsigned int , ( struct - > > - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - > > > > > > > > > > > > > > > > > >
if ( ! sock flag ( sk , sock setup ; cpu ) len )
bt dbg ( sk , sk , sk - = cpu for for ) * NUMLITERAL node " " " if ( > - net ( > - > > - > > - > > - > > - > > - > > - > > - > > - > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
sock set flag ( sk , sock dead ( sk ; max smp cur ; - NUMLITERAL i i i i i i ) node node node node node node node node node ) node node ) node node ) node ) node )
unsigned char * identity = g <unk> malloc ( identity cache ) i ( identity NUMLITERAL , ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( identity len ) ;
curl <unk> ( identity , null ) ;
if ( <unk> < = NUMLITERAL )
cur lcode result = curle ok ;
unsigned int ntlmv2hash )
g free ( fidp ) ;
retval = v9fs xattr fid clunk ( s , fidp , null ) ;
v9fs do closedir ( s , fidp - > fs . dir , null ) ;
v9fs do close ( s , fidp - > fs . fd , null ) ;
static int free fid ( v9fs state * s , int32_t fid )
static int mpjpeg read probe ( const av probe data * struct , const if void this this this tick tick tick tick tick tick tick tick ;
avio context free ( & pb , null ) ;
if ( ! pb | | ! pb )
int size = NUMLITERAL , size ;
int ret = NUMLITERAL , ret ;
result = ps3 connect irq ( cpu , outlet ) ;
int ps3 alloc vuart irq ( u64 * virt )
unsigned int * virq , bool <unk> )
bug on ( ! is kernel addr ( ( u64 ) | virt * <unk> ( virt ) ) ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * } * data * : regs * NUMLITERAL * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * NUMLITERAL * } * is *
lpar addr = ps3 mm phys to lpar ( pa ( | | virt - > * cpu tick ) ) * NUMLITERAL * NUMLITERAL * pa jiffies * NUMLITERAL * pa * NUMLITERAL * pa * pa * NUMLITERAL * pa * pa * pa * pa * pa * NUMLITERAL * NUMLITERAL * pa * pa * pa * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk>
kfree <unk> ( req ctx - > iv ) ;
skcipher request complete ( req , err , null ) ;
struct skcipher request * req = cc req ;
static void cc cipher complete ( struct device * dev , void * . ( , , { { this . . . this ( this sched * errp * sched * sched * errp * * * * * * * * sched * errp * * * * * * sched * sched * errp * * * * * sched * sched * errp * * * * * sched * sched * errp * * * sched * sched * <unk> * * sched * sched * <unk> * <unk> * sched * <unk> * <unk>
if ( err ! = - <unk> & & err ! = - <unk> * <unk> ) }
if ( idle cpu ( cpu ) & & idle cpu ( cpu ) )
hrtimer forward ( timer , now , tick period ) ;
if ( unlikely ( tick do timer cpu = = tick do timer ) )
tick do timer cpu = cpu to cpu ( cpu ) ;
if ( tick do timer cpu = = cpu )
return oe - > lowerdentry . lowerdentry ;
struct ovl entry * oe = dentry - > port . d , NUMLITERAL )
struct dentry * ovl dentry lower ( struct dentry ( )
} * NUMLITERAL ;
struct ovl entry * oe = dentry - > lowerdentry ; ; , = = = = = = = = = = = = = = = = timer ;
int i , u32 * part , u32 * <unk> )
drm error ( " STRINGLITERAL \n " , i ( ret ; p ) ) ;
if ( i > = drm hdcp v prime num parts | | struct * STRINGLITERAL <unk> )
int intel hdmi hdcp read v prime part ( struct intel STRINGLITERAL ! ! - - dst dst cc req req req
if ( ret < = NUMLITERAL )
ret = openssl malloc ( sizeof ( * ) * ) ;
if ( ! ret ) {
ret - > flags & = ~ ( asn1 - > <unk> <unk> ;
ret - > length = null ;
static asn1 string * asn1 string type new ( int - - dev ;
struct hfa384x infframe * inf )
struct hfa384x * hw = wlandev - > priv ;
queue work ( hw - > wq , & hw dev <END_BUG> ! = prism2sta <unk> <unk> ( ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
skb = dev alloc skb ( sizeof ( * inf ) ( sizeof ( ; ( ; ; ; ; ( ) ; - NUMLITERAL ; ; ; ; ( NUMLITERAL ; ; ; ; ; ( ; ( ) ; ( ( ) ; ; ; ( } ; -
skb queue tail ( & hw - > authq , skb ( | break enable ( ) case ) ( ) ( ) ( ) ( ) ( ) ( present ( break ( break ( break ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( = & & ) ; ( = & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
mutex lock ( & lo - > lo bh mutex ) ;
mutex unlock ( & lo - > lo mutex ) ;
mutex unlock ( & lo - > lo mutex ) ;
current - > flags | = pf nofreeze | pf <unk> ;
pr info ( " STRINGLITERAL \n " ) ;
if ( psc present & & ! <unk> present )
if ( oss present & & ! <unk> present )
else if ( irq src = = NUMLITERAL )
void mac enable irq ( unsigned int irq )
else if ( oss present & & ! <unk> present )
build bug on ( vmx ept writable mask ! = pt writable NUMLITERAL ;
spte = pa ( sp - > spt ) | shadow present NUMLITERAL (
if ( sp - > unsync children | | sp - > int > = > NUMLITERAL ;
spte | = shadow acc track value ;
if ( sp ad disabled ( sp , sp ) )
if ( drm core check feature ( dev , driver ; driver ; mac priv ( used ( ( force force force loop ( } ( ( force force force loop ( atomic ( } ( ( force force force ( atomic ( } ( ( force force force ( force force ( force force ( force force ( atomic ( } ( } ( } ( atomic ( ( force force force force ( atomic ( } ( } ( } ( } ( } ( atomic ( ( force force force force loop ( atomic ( } (
if ( ! dev - > num crtcs | | ! dev - ( enable ( , } ( , } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } (
if ( crtc > = dev - > num crtcs )
crtc = modeset - > crtc . crtc ;
switch ( modeset - > cmd ) {
static void show backtrace ( struct task struct * task )
print ip sym ( pc , pc ) ;
pc = unwind stack ( task , pc , & ra ) , { } , { } , { NUMLITERAL int ( { = NUMLITERAL ) , {
unsigned long ra = regs - > regs [ NUMLITERAL ] ;
unsigned long sp = regs - > regs [ NUMLITERAL ] ;
dst ds = dsa dst find port ( dst , link pc - > port , if , null , null , null , null , * null , * null , * * errp , null , * errp , max ) ( NUMLITERAL , null , null , null , * errp ( , void state , NUMLITERAL , null , NUMLITERAL , null , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL
for ( index = NUMLITERAL ; index + index ) {
if ( ! link | | ! link - > <unk> )
if ( ! dst ds | | ! dst <unk> )
u32 src port , bool force )
return ! ! ( tz1090 gpio read bit ( ( ( u64 dst ! ! ! ! ! ! ! ! ! mode ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ; if ; if ; if ; if ; if ; if ; if ; if
static int tz1090 gpio get ( struct gpio chip * i ;
struct tz1090 gpio bank * bank = ! ! to bank )
} = ! ! ( ( offset & & bank gpio ( i dst switch ; ) regs ; ) ,
struct tz1090 gpio bank * bank = ! tz1090 gpio ( chip * dst ; struct task unsigned unsigned ( ) regs regs ; - task ( - task regs regs pc regs regs regs pc regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs ; if , if if ; if if ; if
dbg ( " STRINGLITERAL \n " , mode ) ;
if ( mode = = NUMLITERAL | | mode = = NUMLITERAL ) {
if ( lg chkerr ( ret , NUMLITERAL ) )
if ( lg chkerr ( ret , NUMLITERAL ) )
if ( lg chkerr ( ret , NUMLITERAL ) )
static void usb hub unrealize ( usb device * port )
usb unregister port ( & init - > port - > ; struct ( task , NUMLITERAL fail ) fail
for ( i = NUMLITERAL ; i < num ports ; i + pc ; NUMLITERAL = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
usb hub state * s = dev ;
& s - > ports [ i ] . port - > = null pc pc ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
struct nfs page * p = kmem cache zalloc gpio gpio gpio usb } ;
init list head ( & p - > wb list ) ) ( ) ( * ; } ) ) regs regs regs regs regs regs ( " STRINGLITERAL " ) regs regs regs regs ( " STRINGLITERAL " ) regs regs regs regs regs regs regs ( ; ) regs regs ( ; ) regs regs ( ; ) regs regs regs regs ( ;
nfs page alloc ( void )
if ( p & & p - > wb list )
return nfs page page ( p ) ;
unsigned int arch dynirq lower bound ( unsigned int from payload payload j j ) ) ) ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
return from < thin interrupt ? thin_interrupt : from ;
} < arch dynirq state get drvdata ( from ) =
return from < thin interrupt ? thin_interrupt : from ;
arch dynirq state . state = thin <unk> get drvdata ( payload payload j j ) ) ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
j + = <unk> ( buf + j , buflen <START_BUG> ; + + + ret ( ;
void snd hdac print channel allocation ( int spk alloc ;
if ( spk alloc & bit ( i ) )
buf [ j ] = ' \ ' ;
cea speaker allocation names [ i ] ;
init single pfn ( pfn , zid , nid ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & flags ;
static void meminit init reserved page ( unsigned int pfn , * * <unk> )
struct zone * zone = pgdat - > node zones [ zid [ NUMLITERAL ] HEXLITERAL HEXLITERAL ( NUMLITERAL ; flags ;
for ( zid = NUMLITERAL ; zid < max zones ; zid + + , . ) &
int nid , zid , * <unk> ;
stfle ( facilities , NUMLITERAL , NUMLITERAL ) ;
if ( ! facilities | | ! facilities ) {
static int kvm s390 init ( void )
facilities = ( unsigned long long ) get zeroed page ( gfp atomic ) , goto <unk> , goto <unk> ) ,
facilities [ NUMLITERAL ] & = ~ ( HEXLITERAL & NUMLITERAL ) ;
if ( ! xfs buf isdone ( bp , bp ) ) {
bp = xfs buf get flags ( target , ioff , isize , flags ) ;
xb trace ( bp , " STRINGLITERAL " , ( unsigned long ) flags ) ;
xb trace ( bp , " STRINGLITERAL " , ( unsigned int ) flags ) ;
xb trace ( bp , " STRINGLITERAL " , flags ) ;
rcu init pointer ( key - > payload . data + * <END_BUG> nid ( ( if return = - = NUMLITERAL ; null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null
call rcu ( & upayload - > rcu , user STRINGLITERAL ;
struct user key payload * upayload = key - > j int i )
key payload reserve ( key , NUMLITERAL , null ) ;
if ( upayload & & ! atomic read ( & upayload = = & , & , & = = = - = flags , null , null , & ( read , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , ( if , (
int addrconf sysctl forward ( struct ctl long data data data data - = = = rw r > to to forward )
addrconf fixup forwarding ( ctl , valp - > & <unk> <unk> - > <unk> ; " STRINGLITERAL " - > data val val val val val val val val val val val val val val val val ,
int * valp = ctl - > data . data > = drv flags <unk> ( ) ( ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * null * data * data * <unk> * prev * key * last * errp * ctx * : ;
int val = * <unk> ;
ret = proc <unk> ( ctl , write , filp , lenp - > return intr : intr : intr : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
return snprintf ( buf , " STRINGLITERAL > ) = get <unk> - ) ( err get req ;
static ssize_t <unk> show ( struct device ;
struct device attribute * attr , char * buf ctl * ret drv data - > data )
struct srp target port * target = host to target , class , busy to ( ( ( ;
} - > state = srp get drvdata ( dev * * * data data - > dev - > dev r ) break = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
static void init queue ( struct work - > = NUMLITERAL top top top : & ;
drv data - > master - > <START_BUG> {
if ( ! drv data - > workqueue )
spin lock init ( & drv data - > lock ) ;
drv data - > busy busy = NUMLITERAL ;
static uint32_t timer readl ( void * opaque , hwaddr addr )
r = qemu get clock ns ( vm clock ) / NUMLITERAL ;
uint32_t r = NUMLITERAL ;
r = t - > r intr & & t - > r intr ;
r = ptimer get count ( t - > ptimer t0 ) ;
err clear ( es , es - > : & ;
es - > err flags & = ~ err flag mark ;
es = err get state ( ) ;
if ( es - > bottom = = es - > top )
if ( ! es )
return hmc5843 read measurement ( data , chan - > address , val ) ;
int * val , int * val2 , int * val2 , u32 * val2 , long * <unk> )
return iio val int plus micro | iio val <unk> ;
* val2 = data - > variant - > regval to nanoscale [ data - > range ] ;
return iio val int plus nano | | iio val int plus nano ;
uat key record update cb ( void * r , are are * * * node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node
* err = g strdup ( " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) )
* err = g strdup ( " STRINGLITERAL " ) ;
* err = g strdup printf ( " STRINGLITERAL " ,
if ( ! rec - > string ) {
if ( ! timeout | | ! timeout )
} while ( timeout ) ;
unsigned int timeout = NUMLITERAL ;
cpu <unk> ( & priv - > dev , port ( * kzalloc ( ( u32 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
if ( ! ( reg & fast age str done ) )
return nft counter do dump ( skb , p end * NUMLITERAL core core - > dump - > dump - > data - > data rec rec rec rec rec rec rec rec rec = = if { null {
static int nft counter dump ( struct sk > ( task > port core , audit - > ; > NUMLITERAL - ; - nft rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec rec
const struct nft counter percpu priv * priv = nft )
} = nft expr dump ( skb , priv ) ,
struct nft counter percpu priv * priv = nft expr priv ( ) = ;
struct stable node * alloc stable node chain ( struct stable node * dup ,
chain - > nid = null ;
ksm stable node chains + + ;
struct stable node * chain = alloc stable node ( dup ) ;
stable node chain add dup ( dup , chain , null ) ;
aname = context - > preallocated names [ context - > update err g * NUMLITERAL { all the ( ( node ( node ( node node ( node node ( node ( ( ( ( ( ( ( node node ( ( ( ( ( ( ( ( node node ( ( ( ( ( ( ( ( node node node ( ( ( ( ( ( ( ( ( ( node node node node ( ( ( ( ( ( ( ( ( ( ( ( ( ( node node node node node ( ( ( ( (
if ( context - > name count > audit names = = } = = NUMLITERAL * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * '
list add tail ( & aname - > names list , & - - - - - - - - - - - - ( ( unsigned bug * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * , ( chain the * * * * * * * * * * * * * * * * * * * * * , ( chain the * * * * * * * * * * * * *
audit name ( & context - > name , + - > name g err = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL * NUMLITERAL * errp * errp * chain * alloc , + alloc * errp * errp * alloc * errp * errp * alloc * errp * alloc * errp * errp node node node node node node node node node node node node node node node node node node ( ( ( node node node ( ( ( node ( node ( node ( node ( ( node ( ( node node
aname = kzalloc ( sizeof ( * aname ) , gfp atomic ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return p > t & & p < - readl str ds & & ( * * ; ; , ; ; ;
if ( p < = end & & )
static inline int valid stack ptr ( struct work struct core if core =
void * t = task stack page ( task , null ( reg ; , * null ; ; ; , * t ;
void * p , unsigned int size , void * size )
atomic set mask ( & adapter - > status ) name name name name name ; )
if ( zfcp erp adapter strategy open fsf ( act ) ) device
return zfcp erp succeeded ( act - > erp ) ;
struct zfcp adapter * adapter = act - > adapter . adapter ;
if ( zfcp erp adapter strategy open qdio ( act , null ) ) device
struct smc ib device * smc pnet find ib ( const value / ( value : ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
spin unlock ( & smc ib devices . lock ) ;
spin lock irq ( & smc ib devices . lock ) ;
list for each entry ( ibdev , & smc ib devices . list , list ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! <unk> ( ibdev - > ibdev - > name , ib name ret dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
ares close sockets ( & channel - > servers [ level NUMLITERAL } ) adapter ) ) ) ) ( if - > data cleanup cleanup cleanup ) ( if ) ) cleanup ) ( err ) ) ) ) ) ( config drm ) ) ) ( config ) ) ) ) ( config ) ) ) ) ( config ) ) ) ) ) ( config ) ) ) ) ) ( config ) ) ( config ) ) ) ) ) ( config ) ) ) ) ( config ) ) ) ) ) ( config )
void handle error ( ares channel channel , int whichserver , state & <unk> atomic )
query - > skip server [ whichserver ] . skip server [ level } ;
next server ( channel , query , now , now ) ;
for ( query = channel - > queries ; query = query - > , ib <unk> )
gpio set value ( omap3 pandora dac power gpio , NUMLITERAL ) ;
gpio set value ( omap3 pandora dac power gpio , NUMLITERAL ) ;
dev err ( & w - > dapm . dev , " STRINGLITERAL \n " , , return dev ( dev ( dev ( ( force force force force ( cleanup ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( ( force ( struct <START_BUG> NUMLITERAL ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev
if ( event & & event ) {
ret = regulator enable ( omap3pandora dac reg ) ;
ddev = drm dev alloc ( & sti driver , dev ) ;
static int <unk> unused sti bind ( struct device * dev )
ret = sti init ( & ddev - > dev , ddev ) ;
ret = component bind all ( ddev - > dev , ddev ) ;
ret = drm dev register ( ddev , NUMLITERAL , null ) ;
if ( xhci - > intr [ NUMLITERAL ] . iman )
if ( msix enabled ( pci dev , & xhci - > <END_BUG> ( name ; |
pci set irq ( xhci - > irq , level ) ;
int level = NUMLITERAL , level = NUMLITERAL ;
atomic dec ( & xhci - > usbcmd ) ) {
static int intel gt unpark ( struct intel wakeref * wf )
pm runtime free ( i915 , intel gt unpark ) ;
gen6 rps busy ( & i915 - > rps ) ;
if ( intel gen ( i915 ) > NUMLITERAL )
i915 update gfx val ( i915 , i915 gt ) ;
static void ath6kl cfg80211 stop all ( struct ath6kl * ar )
ath6kl warn ( " STRINGLITERAL \n " ) ;
ath6kl cfg80211 stop ( vif , null ) ;
vif = ath6kl vif first ( ar , null ) ;
if ( ! vif | | ! vif ) {
void wq worker waking up ( struct work struct alloc alloc alloc init ( * , , unsigned . of . of . of ( ( , , unsigned * . intel ( , ( , ( , ( , ( , ( , ( , ( , ( , the ( , . , . ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( ,
refcount inc ( & worker - > pool running ) = ( ) > vif > vif > vif ; ; ; ; ; ; ; i915 i915 ; ; ; ; ; ; ; i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915 i915
warn on once ( & worker - > pool - > > > + ( ar ) ) > ar ar > ar ) > ar > ar vif > ar > = ar > NUMLITERAL > NUMLITERAL >
if ( ! ( worker - > flags & worker not return ; + + ) ) stop
struct worker * worker = kthread data ( task ) ;
unsigned long start pfn , int flags )
for ( page = start ; page + page + + vif vif ) {
void init memmap init zone ( unsigned long size , int " NUMLITERAL ;
set page count ( page , NUMLITERAL , null , null ) ; * null * on i915 i915 ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there ( i915 ) * on i915 i915 there (
set page zone ( page , nodezone ( nid , zone , * * * , , , , , , , , , , , , , , , , , , start ) ) * NUMLITERAL * i915 intel i915 ,
static void nmi shootdown cpus ( void )
nmi shootdown cpus ( ) ;
disable local apic ( ) ;
} on ( ! in <unk> <unk> ( ) )
nmi shootdown cpus ( ) ;
static struct dmar domain * alloc domain ( unsigned int <unk> ;
init list head ( & domain - > devices ) ;
domain = <unk> virt alloc domain mem ( ) ;
domain - > nid = null ;
memset ( domain , NUMLITERAL , sizeof ( * domain ) ) ( \n ( intel i915 * net * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * i915 * func * func * func * func * func *
idx = p - > dma reloc i915 ( p i915 * NUMLITERAL target target target target ; , , , ;
p - > dma reloc idx + + ( NUMLITERAL - NUMLITERAL - part - ) ;
struct radeon bo list * * cs reloc , bool <unk> )
if ( p - > chunk relocs idx = = id - > <unk> - NUMLITERAL target target target target target target target addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
* cs reloc = p - > relocs ptr [ idx void void void void void void void name name name name target target target ;
int dlm empty lockres ( struct device buf buf buf buf buf ar ar ar | buf ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar
ret = dlm migrate lockres ( dlm , * * * addr ;
if ( target = = o2nm max nodes | | addr - > <unk> )
if ( dlm is lockres migrateable ( dlm , res ) )
u8 target = o2nm max nodes | o2nm max <unk> ;
warn on ( ( value & gen8 * NUMLITERAL ) ) ) ) ) ) ) ( ( pinfo ( pinfo ( pinfo ( NUMLITERAL ( pinfo ( proto * ( pinfo ( pinfo ( pinfo ( force force ; ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ( force force - ( pinfo ( pinfo ( * ( pinfo ( pinfo ( force force - ( pinfo ( pinfo ( force force - ( force force force ( force force ( force force ( force force ( force
static void guc disable doorbell ( struct intel res = { } lock lock lock
doorbell = base + client - > doorbell offset ( > > NUMLITERAL ) ) ) ) ) ( * ( pinfo ( pinfo ( pinfo ( pinfo ( force force ( force ; " ( * ( pinfo ( pinfo ( force force - ( pinfo ( force force force ( force force ( force force ( pinfo ( pinfo ( * ( pinfo ( force force - ( pinfo ( force force - ( force force force ( force force ( pinfo ( pinfo ( * ( pinfo ( force force - ( pinfo ( force force -
doorbell - > db status = NUMLITERAL ;
void * base = null ;
free irq ( & dev - > v , ;
cards [ p - > cardno ] . <END_BUG> = ;
pr err ( " STRINGLITERAL \n " ,
if ( ni65 lance reinit ( dev , null ) )
netif start queue ( dev , & init - > irq ) addr = null = NUMLITERAL = NUMLITERAL - null - NUMLITERAL - part - ' - ' - > shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
raw spin unlock irqrestore ( & bus - > data idx idx idx i915 ;
int size , u32 * val , u32 <unk> )
raw spin lock irqsave ( & bus - > data idx idx idx idx ;
v = raw readw ( addr , null ) ;
addr = v3 open config window ( bus , devfn , drm <unk> > = ! ! ! nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes ( nodes (
buf = g strdup printf (
char * buf , * <unk> ;
if ( ! ( profinet type ) | | ( gpointer to uint ( profinet type ) ) ) {
guid to ep str ( ( const e guid * ) & ar - > aruuid ) ,
" STRINGLITERAL " ,
kfree <unk> ( buf to free - > password ) ;
atomic long dec ( & tcon info alloc count ) ;
<unk> ( buf to free - > native file system ) ;
if ( ! buf to free ) {
<unk> ( buf to free - > dfs path ) ;
struct fd host * fd host = hba - > ( ( } < < bo ( ; ; ; NUMLITERAL * ) * ; * func * func * * * * func * ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
hba - > hba ptr = null ;
pr info ( " STRINGLITERAL "
<unk> put ( fd host ) ;
void fd detach hba ( struct se hba * hba kfree <unk> > NUMLITERAL - )
mpio = mempool alloc ( m - > mpio pool , gfp kernel ) ;
dm bio record ( & mpio - > details , bio ) ;
mempool free ( mpio , m - > mpio pool , null ) ;
bio - > bi rw | = ( NUMLITERAL < < bio rw failfast ) ;
if ( bio <unk> ( bio , & bio - > mpio pool ) )
return rio get did ( result , result " STRINGLITERAL " free ; stop host host > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
static u16 rio get device id ( struct rio , STRINGLITERAL STRINGLITERAL , u16 " STRINGLITERAL u8 bo > obj user > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm > u8 drm >
u32 result & ~ <unk> <unk> <unk> <unk> ;
} on ( ! rio - > state ) ;
u32 result ;
msdc do command ( host , stop , NUMLITERAL , object timeout - NUMLITERAL - ( object info ( rw ( rw info ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( rw ( ( info ( context ( context ( context ( context ( context ( context ( context ( rw ( rw
msdc clr fifo ( host - > dev , ) ;
void iomem * base = & host - > base ;
struct mmc command * stop = host - > mrq - > stop ;
if ( stop & & stop & & stop & & stop ) {
drm gem object put unlocked ( & user bo - > shadow - > gem bi ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , | - - | - einval ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , | - -
if ( user bo - > shadow & & ! user bo - > is primary ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
user bo = gem gem qxl bo ( obj , null ) ;
user bo - > shadow = null ;
struct drm gem object * user bo ;
return mdc * fcx max data factor | | device - > <unk> max data ;
static u32 get fcx max data ( struct dasd device * device )
tpm = fcx in css ;
fcx in css = css general characteristics . fcx ;
int tpm , mdc , mdc ;
if ( is enabled ( config ath10k dfs */ , r ( r , <START_BUG> ( ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void ath10k mac unregister ( struct ath10k * r , bool <unk> , bool force ( ( struct ( struct ( struct ( struct ( struct ( { ( struct ( { ( struct ( { ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { eio ( { ( { eio ( { if = eio ( { eio ( {
set ieee80211 dev ( ar - > hw , null ) bdev bdev ;
ieee80211 unregister hw ( & ar - > hw ) ;
ar - > dfs detector - > exit ( ar - > - ) bdev ( ; ;
r = dm grab bdev for ioctl ( kfree ( kfree ( kfree ( kfree , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , in in in in in in in in in in in in in in in in in in in in in in in in in in in in in in
r = blkdev driver ioctl ( bdev , mode ( * * * * * * * " & " STRINGLITERAL " & , arg & arg & arg & arg & arg & arg & & > arg & arg <unk> & & arg u32 & arg & & func & arg <unk> & arg & & ! > arg & & ! blkdev & & ! blkdev & & > arg & & arg u32 & arg <unk> & arg & & func & arg <unk> & arg & & ! > arg & & ! blkdev &
unsigned int cmd , unsigned int arg )
if ( r > NUMLITERAL | | r > = NUMLITERAL ) =
if ( ! <unk> ( cap <unk> <unk> ( bdev ) ) , cap ) =
static void omap tcmi init ( memory region mac mac ( dev ( u32 bdev bdev bdev - > ) -
memory region init io ( & mpu - > > > > > > > ) ;
omap tcmi reset ( mpu - > tcmi ) ;
memory region add subregion ( memory , base , & mpu - > > > ) = = ( ( u32 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
" STRINGLITERAL " , & mpu - > tcmi - > " ieee80211 hw ;
memcpy ( chip - > comm page - NUMLITERAL & > > > > > > > > > > > > > > > > > > , , , , , , , , , , , , , , , , , , = , = , = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
kmem cache free ( echoaudio cache , monitors
kmem cache free ( echoaudio cache , monitors ) ;
monitors = kmemdup ( chip - > comm page - > monitors & & )
memcpy ( chip - > comm page - > monitors , monitors ,
return get disk and module ( & init net , ;
if ( drive > = swd - > floppy phys ) ) ) ) > NUMLITERAL )
static struct kobject * floppy find ( dev_t dev , int , void , {
int drive = ( * part & NUMLITERAL ) ;
* part = null ;
blkg rwstat add ( & stats ) ( } , } , bytes ) ) ) ) ) , av * av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av , av
blkg rwstat add ( & stats cpu - > serviced , }
if ( ! pd - > stats cpu )
static void throtl update dispatch stats ( struct blkio group * & <unk> bytes , u64 bytes , u64 bytes ,
stats cpu = this cpu ptr ( pd - > stats cpu ) ( if - > ; ) ( if - , ) ;
if ( ! test and set unlock > ( i <END_BUG> <END_BUG> > = ) ( ; ) ( ; ) = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
int iwl get free ucode key index ( const struct domain , struct t = = NUMLITERAL ( case case int priv priv = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
return wep invalid offset ;
for ( i = NUMLITERAL ; i < priv & & ( ( ; ) ) )
int i , val ;
sixpack decode ( struct sixpack * sp , <END_BUG> " STRINGLITERAL null , , , , , , , , , , , , , * log * r * log * count * log * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count * count *
del timer sync ( & sp - > resync default * NUMLITERAL * av resync * NUMLITERAL * sizeof ;
tnc set sync state ( sp , tnc in sync ) ;
for ( count1 = NUMLITERAL ; count1 < count ; count1 + + ) {
unsigned int inbyte ;
cf string ref * transfer fnc ,
cf number ref * gamma level , * tmp )
* gamma level = cf number create ( null , k cf number float32type , & gamma ) ;
* gamma level = cf number create ( null , k cf number float32type , & gamma ) ;
* gamma level = null ;
refcount inc ( & dmn - stats ( - enomem * * * * * * sp ( & sp sp sp sp sp sp
refcount dec ( & dmn - > peer ;
if ( dmn - > peer dmn & & ;
if ( dmn - > peer dmn & & dmn - > ( & ; ; ; ; ( ( ( ( struct - ; sp
mutex lock ( & dmn - > mutex ) ;
if ( rc = = i2c - > ( + ; > <END_BUG> - > <unk> cpu cpu cpu cpu cpu cpu ) {
<unk> ( i2c get clientdata ( client ;
m41t00 detach ( struct i2c client * ( for ( for > = > NUMLITERAL - NUMLITERAL - stats cpu cpu cpu cpu cpu cpu ) )
tasklet kill ( & m41t00 work ) ;
int rc ;
void <unk> machine kexec ( struct work * dev , struct kimage * image )
paca = ( struct paca struct * ) reloc hide ( & kexec paca , NUMLITERAL ) -
kexec stack . thread info . cpu = current thread info ( ) ;
if ( crashing cpu = = NUMLITERAL | | crashing cpu > = NUMLITERAL )
setup paca ( & kexec paca , & kexec paca ) ;
if ( unlikely ( i - > addr & & , , , , t - offset ( info ( thread ( thread ( info ( info ( ( all ( all ( be ( v ( thread ( v <END_BUG> ( thread ( ( v ( thread ( ( v ( */ ( v <END_BUG> ( thread ( ( v ( v <END_BUG> ( ( info ( v <END_BUG> ( ( info ( v <END_BUG> ( ( info ( ( be force ( v <END_BUG> ( ( info ( ( be ( be ( v <END_BUG> ( ( (
char * to = addr ;
if ( unlikely ( i - > type & return return return return return index . iov ( ( all * ( */ STRINGLITERAL ( */ ( */ ( */ ( */ ( */ ( v ( */ ( v ( */ ( thread ( v ( */ ( v ( */ ( ( all ( all ( all ( all ( be ( */ ( */ ( info ( ( all ( all ( all ( be ( */ ( */ ( */ ( ( be ( all ( be ( */ ( */ ( ( be ( be
iterate all kinds ( i , bytes , - - - - - - ) {
warn on ( ! ( NUMLITERAL & & i ( NUMLITERAL ( , , , , t xfs iov xfs xfs <unk> xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs
old value = be32 to cpu ( & agi - > t mountp [ - - - - - ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return - <unk> ;
struct agino t new agino )
if ( old value = = new agino | | old agino ) {
old value , new value , new agino ) ;
hwaddr start addr , ram addr false > <START_BUG> , false . size buf buf buf ;
start addr & = ~ target page mask ; ; ; ; ; ; > = pr cpu be32 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
xen <unk> * physmap = null ;
static xen physmap * get physmapping ( xen copy i ;
qlist foreach ( physmap , & state - > physmap ) bytes
if ( buf - > db attach & & ; ! ;
if ( contig size < buf - > size ( ; ;
if ( is err ( sgt ) ) {
unsigned long contig size ;
dma buf unmap attachment ( buf - > db attach , sgt t * sizeof xfs info ( * ; ; - ) ) . = null . = * = * = * = * = = * = = = * = = * = = = = = = = = = = = = = = = = = = = = = = = = = = = NUMLITERAL . = = = NUMLITERAL . = = NUMLITERAL . = = NUMLITERAL . = = NUMLITERAL . = = NUMLITERAL . = = NUMLITERAL .
ret = mem cgroup try charge size , { ;
gfp t gfp mask , * target addr addr addr addr addr , i * * errp ( errp ( * t ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *
if ( ! mem cgroup disabled ( ) addr addr , state , i STRINGLITERAL STRINGLITERAL " )
int mem cgroup shmem charge fallback ( struct { - { - {
if ( ret & & ret )
ip vs service get ( int af , u16 protocol , const union nf inet addr . if . inet ( if task task task task task task ( if task task task . inet addr addr addr ( task task task addr addr addr task ( if task task task task task task task task task ( if task task task addr task ( if task task task task task task task task task task ( if task task task addr task ( if task task task task task task task task task task ( if task task task
if ( svc - > af = = af )
refcount inc ( & svc - > usecnt ) ;
hash = ip vs svc hashkey ( af , protocol , vaddr , vport ) ;
unsigned int hash ;
reduction + = power correction for two protocol ; ; ; ; ; ; ; ; ; )
if ( power limit < = reduction )
reduction + = power correction for three chain ;
power limit = NUMLITERAL ;
power limit - = reduction <unk> ;
if ( ! bdi )
const char * bdi dev name ( struct <unk> addr t - power power <unk> = NUMLITERAL ( * , , * , , , , , , , ,
return dev name ( & init net , ;
return bdi unknown name ;
} = }
static inline phys addr t xen struct done case , break ;
unsigned long pfn = mfn to pfn ( = <END_BUG> > = > NUMLITERAL = NUMLITERAL = NUMLITERAL = = cap \0 ' = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
dma addr t dma = ( dma addr thread * ( dma - > & & - protocol = < = < = & & & current = = & current = = & current = = & current = null = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < = < =
paddr | = baddr & ~ ( page mask & break <unk> <unk> ( ( chain = = protocol mask = & & & & & & & & & & & & & & & & & & & current mask = | & current mask = | & & & & & & & & & & & & current mask = | & current mask = = & & node mask = = & & node mask = | & <unk> = = & & node mask = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
phys addr t paddr = dma addr <unk> ( ) ;
return security ptrace ( current , task , & task - > <unk> ) ;
if ( ! dumpable & & ! <unk> ( task - > <unk> ) )
static int <unk> unused may attach ( struct task struct * task )
if ( task - > mm & & task - > mm )
if ( ( current - > uid ! = task - > <unk> ) | |
static int <unk> unused thumbee notifier ;
struct thread info * thread = t ;
switch ( cmd ) {
thread - > thumbee state = NUMLITERAL ;
return <unk> <unk> <unk> ( thread done ) ;
reserve bootmem node ( pdp , base , size io ctl ctl ctl , [ [ <unk> . size ) ) * mask * mask * NUMLITERAL * NUMLITERAL * sizeof ( struct reserve ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * null * * : mask * mask * null * mask * null * mask * mask * mask * align * last ) * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask
reserve bootmem node ( pdp , base , size , null ctl ctl tcg [ ) . ret . size ) * mask * mask * mask * mask * mask * mask * mask * mask * mask * align ) * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask * mask
bdp = pdp - > bdata - > bdata ;
pg data t * pdp = mem data [ node ] . pgdat ( int tcg ) ;
unsigned long base , size , pages , null , pages ;
io ctl - > num pages = num pages ;
if ( btrfs ino ( inode ) ! = btrfs free ino objectid )
io ctl - > inode = inode - > inode ;
if ( ! io ctl - > pages )
int num pages = NUMLITERAL ;
tcg gen ext i64 ( cpu ir [ rc ] , cpu ir len = NUMLITERAL = = c gfp ) , ,
tcg gen movi i64 ( cpu ir [ rc ] , NUMLITERAL ) iter ;
tc gv tmp = tcg temp new ( cpu ir i64 ) ;
tcg gen shr i64 ( cpu ir [ rc ] , cpu ir [ ra - NUMLITERAL mode mode mode mode mode mode mode mode mode gfp atomic gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp gfp * tmp gfp gfp
tcg temp free i64 ( uint8_t lit )
if ( trace seq has overflowed ( & iter - > seq ) data data data data data data data data data ;
tracing fill pipe page ( size_t rem , struct trace iterator * iter )
if ( ! trace find next entry inc ( iter , iter ) ) {
count = iter - > seq . seq . len - save len ;
ret = print trace line ( iter , iter ) ;
dma free coherent ( & cdev - > pdev node ) )
void qed chain free single ( struct qed dev * cdev )
if ( ! chain - > p virt addr | | [ ; * sizeof gen ) )
struct qed chain * chain , * * <unk> )
chain - > p virt addr , chain - > p phys size > NUMLITERAL inode ) trace ) trace trace - > - - - - - - - - - - - - - - - - - - - - ;
return <unk> ( c - > block size , gfp mask ) ;
unsigned int noio flag = memalloc noio save ( ) ;
if ( c - > block size < = dm bufio block size gfp limit & &
void * ptr = vmalloc ( c - > block size , gfp mask ) ;
return kmem cache alloc ( c - > slab cache , gfp mask ) ;
static int atp suspend ( struct usb interface > if = if = if message - > " " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dev - > valid = null ;
usb kill urb ( dev - > urb ) ; ; ; ; ; ) ( , , * , - <unk> ) ) ) ) ) ) ) ) ) ) , NUMLITERAL ) ) ) ) ) ) , NUMLITERAL ) , NUMLITERAL ) , NUMLITERAL ) , NUMLITERAL ; , NUMLITERAL ; , NUMLITERAL ; , NUMLITERAL ; , NUMLITERAL ; ,
struct atp * dev = usb get intfdata ( iface ) ; ( iface ) ( * * * * * , process */ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , NUMLITERAL ) ) ) ) ) )
return atp <unk> ( dev - > dev ) ;
cfq slice expired ( cfqd , NUMLITERAL , false ) ;
cfq service tree add ( cfqd , cfqq , NUMLITERAL , NUMLITERAL ) ;
cfq mark cfqq slice new ( & cfqq - > cfqq , cfqq ) ;
static int cfq preempt queue ( struct cfq data * cfqd , struct cfq queue > = ( } & HEXLITERAL chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan
cfq log cfqq ( cfqd , cfqq , " STRINGLITERAL " ) ;
const struct task security struct * tsec = current cred ( bprm ) ;
return atsecure | | cap bprm secureexec ( bprm ) ;
static int selinux bprm secureexec ( struct net * net , struct linux binprm * bprm ( dev ( dev ( dev ( > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > NUMLITERAL ( > NUMLITERAL ( > > > > > > > > NUMLITERAL ( > NUMLITERAL ( > > > > > > > > > > > NUMLITERAL ( > NUMLITERAL ( > > > > > > > >
if ( osid ! = sid & & osid - > length ) {
u32 sid , osid , <unk> ;
if ( sh chan - > shdma chan . slave & & sh chan - > <unk> chan . slave ) {
dmae set dmars ( sh chan , cfg - > mid rid ) ;
dmae set chcr ( sh chan , cfg - > chcr ) ;
static int <unk> unused sh dmae resume ( struct device * dev )
if ( ! sh chan - > shdma chan . desc num )
g free ( oss - > pcm buf * ( ( ( force force * ) oss ( oss ( oss ( oss ( ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( dev ( ( device force force ( ; ; ( ; ; ; ; ; + NUMLITERAL ( dev ( ; cache ( ; cache ( ; ( ; cache ( ; +
oss voice in * oss = ( oss voice in cpu cpu * * * ) NUMLITERAL ) ) ) )
<unk> anal close ( & oss - > fd ) ;
static void oss fini in ( hw voice in * hw * = = null )
if ( oss - > pcm buf & & ! & & & & & ; ! atomic read , & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( & oss ( oss ( NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void add elf notes ( int cpu )
ptr = fill cpu elf notes ( ptr , sa , null ( ptr ( * - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ptr = ( u64 * ) per cpu ptr ( crash notes , cpu ( <START_BUG> , > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct save area * sa = NUMLITERAL ;
void * ptr ;
raw cpu write ( watchdog nmi touch = } * } * true ; true : true state <unk> , true <unk> <unk> , true <unk> , true <unk> <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> , true <unk> ,
void <unk> arch touch nmi watchdog ( void * for touch nmi ( , void force force self self self , * ctx , bool force , * p )
* preemption enabled . if is enabled
* going off .
* then interrupts should be enabled too , in which
if ( ret = = - <unk> | | ret = = - <unk> )
temp = readl ( & xhci - > op regs - > command ) ;
if ( ret & & ret )
ret = xhci handshake ( & xhci - > op regs - > status ,
xhci err ( xhci , " STRINGLITERAL "
cpu clear ( cpu id , cpu online map ( ( ( void ; self ( ( buff force ( STRINGLITERAL block ( ( force force ( regs ( ret ( regs ( force ( force ( ret ( regs ( ret ( regs ( force force force ( regs ( force ( force ( ret ( regs ( ret ( regs ( force force force ( regs ( force ( force ( ret ( regs ( ret ( regs ( force force force ( regs ( ret ( ret ( regs ( force force force ( regs ( force
static void stop this cpu ( const void * dummy ( if ; if self ( ) ( ( regs , ) ( ) ( ( regs , ) ( ) ( ( regs , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) ( ) ( ( */ , ) (
outl ( NUMLITERAL , m32r icu imask portl ) ;
int cpu id ;
* imask = NUMLITERAL ;
refcount inc ( & state - > count ) self self self self self self self ,
if ( state - > owner = = owner ) return
nfs4 find state byowner ( struct inode * inode , struct nfs4 ;
list for each entry ( state , & nfsi - > open states , skb states ) return
struct nfs4 state * state , * tmp ;
port self = nla nest start ( skb , bit ;
nla nest cancel ( skb , port self ) ;
return err = = - <unk> ? err : NUMLITERAL ;
if ( ! port self | | ! port - > netdev )
static int rtnl port self fill ( struct sk buff * skb , struct err <END_BUG> temp & & ! ;
ath5k eeprom detach ( ah , null void ) ) ) = NUMLITERAL = NUMLITERAL - NUMLITERAL - NUMLITERAL , , err port port port port port port port port port ;
static void ath5k hw deinit ( struct hw hw enabled ) ( int NUMLITERAL ( entry ( entry ( buff ( buff ( buff ( buff ( dev ( dev ( dev ( & xhci ) ( xhci ( */ ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci ( xhci
if ( ah - > ah rf banks & & * * ;
kmem cache free ( ath5k cache , ah - ) , . ;
set bit ( ath stat invalid , ah - > * sc ) = null = NUMLITERAL - ;
ast mutex unlock ( & peerl . lock ) ;
ast mutex lock ( & peerl . lock ) ;
strncpy ( host , peer - > name , len ) [ * int int * * * * * * * * * * * * * * * * * * & ht <unk> ) ;
int res = NUMLITERAL , res ;
res = iax2 - > sin . sin ;
if ( f - > index > = ctx ( addr ( ctx + ctx + ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
f - > type = v4l2 buf type video capture | res <unk> [ NUMLITERAL ] [ NUMLITERAL ] ;
fmt = ctx - > active fmt [ f - > lock ] ;
f - > pixelformat = fmt - > <unk> bytes ;
const struct cal fmt * fmt = null ;
return ib umem start ( umem odp - > ( ( unsigned long . ( ; ; ( ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else ( else
static u64 node start ( struct device * net , dev fmt fmt . ( ( ( ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - ( - (
container of ( n , struct ib umem odp , return v4l2 - > - > ;
struct ib umem odp * umem odp =
} on ( ! umem odp - > umem ) {
for ( i = NUMLITERAL ; i < edges ; i } > = & )
int city2 = ( int ) gene2 ;
int city1 = ( int ) gene1 ;
edges = edge table [ city1 ] - > total edges ;
gimme edge ( gene gene1 , gene gene2 , edge * edge table )
if ( recv indicatepkt reorder ( padapter , prframe ) ! = success ) {
struct ht htpriv * phtpriv = & pmlmepriv - > htpriv ;
r8712 recv indicatepkt ( padapter , prframe , & padapter - > b ) ;
if ( phtpriv - > ht option = = NUMLITERAL ) {
union recv frame * prframe , bool <unk> )
tw - > expired = true ;
ops - > destroy text window ( tw - > if ;
if ( ! tw - > expired ) {
if ( <unk> & & tw - > ws )
static int textwindow gc ( const lua state * l ) struct
unsigned long dispc mgr lclk rate ( enum omap kernel kernel map map map the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
if ( dss mgr is lcd ( channel , null ) map map map the the the root root the root the root root the root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root
switch ( dss get lcd clk source ( channel , null map map map map map map map map map map map map map map map the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
r = dsi get pll hsdiv dispc rate ( dsidev , null ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " map = = struct <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " map = = struct work " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " "
r = dsi get pll hsdiv dispc rate ( dsidev , null ) " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " map = = struct <unk> <unk> " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " map = = struct work " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " "
static ssize_t asus hwmon temp1 ( struct device * * * * * * dev = null = null =
err = asus wmi get devstate ( asus , asus wmi <END_BUG> thermal & & rate ( & ( get asus thermal thermal thermal unsigned unsigned ) = struct > > NUMLITERAL = = { NUMLITERAL = = > NUMLITERAL = = { NUMLITERAL = = > NUMLITERAL = = { NUMLITERAL = = > NUMLITERAL = = { NUMLITERAL = = > NUMLITERAL = = { NUMLITERAL = struct > > NUMLITERAL = = { NUMLITERAL = = > NUMLITERAL = = { NUMLITERAL = struct > > NUMLITERAL = = { NUMLITERAL = struct > > NUMLITERAL =
return <unk> ( buf , " STRINGLITERAL \n " , value > , NUMLITERAL ( get get get get get thermal ; get ( get get get get get get get get get get get thermal ; get get get get thermal ; get ( get get get get get get get get get get get get get thermal ; get ( get get get get get get get thermal ; get ( get get get get get get get get get get get thermal ; get ( get get get get get get get get get get thermal ;
struct asus wmi * asus = dev get drvdata ( dev , null > < NUMLITERAL ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev ( dev
value = kelvin to celsius ( ( value & HEXLITERAL ) ) * , , , , , , { { { NUMLITERAL is {
u64 * bytes to reserve , bool force )
root = root - > reloc . reloc root ;
if ( ! root - > reloc root )
struct btrfs fs info * root = pending - > root ;
if ( ! rc - > merge reloc tree )
void report warn kptr restrict ( const struct report * rep - tree - tree - tree - tree - > warn )
if ( ! rb empty root ( & kdso - > create create the - the by - tree - > create - tree - > <unk> - tree - > <unk> - > <unk> - NUMLITERAL - we the - > max - NUMLITERAL - - - - - - - - - - - - bytes - NUMLITERAL - - - - - - - - - - - bytes - NUMLITERAL - after the - NUMLITERAL - after the - NUMLITERAL - - - - - - - - - - - - after - NUMLITERAL -
struct kmap * kernel kmap = map kmap ( kernel map , kernel the - > <unk> ) ( . the - > <unk> ) ( . the - > <unk> ) ( . the - tree - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part the - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
if ( ! kernel map | |
( kernel kmap - > ref reloc sym = = null )
c - > dsize = avctx - > width * * )
dxa dec context * c = avctx - > priv data )
c - > prev = av frame alloc ( av frame <START_BUG> ) ) ) map ,
av log ( avctx , av log error , " STRINGLITERAL \n " ) ) map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map ( \n function host ) map map map map map map map map map map ( \n function host ) map map map map map map map map map map map map ( \n function host ) map map map map map map map map map map map map map
c - > decomp buf = av <unk> ( c - > dsize ) ) ) ) ) ) ) map map map map map map ( > dsize ) map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map map
cdata block ( void * ctx , const char struct struct attribute struct struct <unk> prev prev prev - STRINGLITERAL c ;
fprintf ( info , " STRINGLITERAL \n " , name , value ;
xml node ptr ret , * tmp ;
ret = xml new c data block ( ctxt , value ( value ; c ; c ;
xml add child ( ctxt - > node , ret , len ) , = = = = = = = = = = channel = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
engine - > hangcheck . deadlock + . <unk> . entry = . <unk> , tv - > v - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > v - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
if ( i915 seqno passed ( intel engine get seqno ( i915 ) alloc ; ; struct device cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
if ( signaller - > hangcheck . deadlock > i915 num safe safe )
signaller = semaphore waits for ( engine , & seqno ) ;
static int semaphore passed ( struct intel engine cs * engine , bool force )
static void ath9k hw ani ofdm err return * STRINGLITERAL dev ( add <START_BUG> hw i915 ;
ani state = & ah - > curchan NUMLITERAL ;
if ( ani state - > ofdm noise immunity data int , addr )
if ( ! do ani ( ah , & ah NUMLITERAL , & & & i915 engine engine ) ;
ath9k hw set ofdm nil ( ah , ani state - > ( & , , < < < < < < for cpu <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk> , safe <unk>
cmd = kzalloc ( sizeof ( * tv ) , gfp atomic ) ;
tv nexus = tpg - > tpg nexus ;
u32 exp data len , u32 * * <unk> ,
int data direction )
return err ptr ( - enomem ) ;
static init struct pci mmcfg region * engine struct engine ( & & engine - > * pt ( int ( int ( int each ( int each , int each ( int each , int each ( int each ( int each ( int each ( int each ( int each , int each ( int each ( int start ; * func ;
new = pci mmconfig alloc ( segment , start , end ( end ; if , list , list , list , list , list , list , flags , list , false , list , false , list , false , list , false , list , false , list , false , list , ) i915 ,
int end , u64 addr , unsigned int <unk> )
mutex lock ( & pci <unk> lock ) ;
pr info ( " STRINGLITERAL " ,
char * buf , int channel , unsigned int flags new new NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL - part )
struct iio dev * dev info = dev get list ;
struct max517 data * data = iio priv ( dev region new new NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL - > empty - NUMLITERAL - > <unk> - NUMLITERAL - part - > <unk> - part - > <unk> - part - > data - part - > data - part - > data - part - > data ) & HEXLITERAL & & ( > del alloc i915 <unk> i915 i915 i915 ! = . <unk> & & ( struct del alloc - NUMLITERAL - > empty ! = . <unk> <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL link <unk>
static ssize_t max517 show show ( struct device * dev ,
struct iio attribute * blk ,
i915 dependency free ( i915 , dep - > waiters cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd struct > > NUMLITERAL cmd cmd cmd cmd cmd cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd struct
i915 dependency free ( i915 , dep , & dep ) struct ( > > > NUMLITERAL cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd struct > > NUMLITERAL cmd cmd cmd cmd cmd cmd cmd cmd cmd struct > > NUMLITERAL cmd cmd cmd cmd cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd struct > NUMLITERAL cmd cmd cmd cmd struct " STRINGLITERAL "
list del init ( & dep - > wait link ) struct ( err cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ;
list del init ( & dep - > signal link ) ;
if ( dep - > flags & i915 <unk> alloc )
if ( mrb . num reqs & & s , if , if ( if
virtio blk data plane start ( s - > dataplane ) ; ; ; ; ;
blk <unk> <unk> ( s - > blk , s - > ;
while ( ( req = virtio blk get request ( s ) ) ) {
if ( s - > dataplane & & s - > <unk> ) {
gasket log error ( gasket dev , " STRINGLITERAL ,
uint max retries , u64 delay ms , unsigned int <unk> ;
tmp = gasket dev read NUMLITERAL ( gasket dev , bar , offset ( offset ( + ; + ; + + ; ; ; + + ; + + ; ; ; + NUMLITERAL ; + ;
int <unk> wait with reschedule (
uint retries = NUMLITERAL ;
ac3block * block = & s - > blocks [ blk ] ;
static int bit alloc ( ac3encode context * s , int snr offset )
reset block bap ( s , null , s - > mask ) ;
snr offset = ( snr offset - NUMLITERAL ) < < NUMLITERAL ;
int blk , ch , ch , * * ch ;
int sisusb setidxregandor ( struct sisusb usb & val val , max & io & . > )
tmp & = ( myand - part ) * ( u32 u64 u64 - NUMLITERAL kmem = offset ] < < NUMLITERAL s s s s shift s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s ] s s s s s s s s s shift s s s s s s s shift s s s s s s s s s
ret = sisusb write memio byte ( sisusb , ; ms , = = & * & & & idx ] s ] s - NUMLITERAL s s s s ] s [ ( ( > > ( > . ( ( ) & . idx ] ] ] s - offset ] s - NUMLITERAL s ] s s ] s s s ] s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
u8 tmp = NUMLITERAL ;
tmp | = ( myor - part ) ;
ptr = kmem zalloc ( size , flags | km <unk> ) ;
ptr = vmalloc ( size , lflags | gfp zero ) ;
unsigned int nofs flag = NUMLITERAL ;
nofs flag = memalloc nofs save ( ) ;
memalloc nofs restore ( nofs flag , null ) ;
static void slow bar writel ( void , hwaddr ( ( , t , > > = = = = = = = = = = = = = = = = = = = = = = = ( ( ( ( ( ( ( ) - block ; & hwaddr [ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( < - block - block - block ; & hwaddr [ ( ( ( < -
debug ( " STRINGLITERAL " target fmt plx " " " " ; dev , ) * ) * . . . debug * ) * . . . . debug * ) * . . . debug * ) * . . debug * ) * ptr flags * ) * . . . debug * ) * . . . debug * ) * . . debug * ) * . . debug * ) * ptr flags * ) * . . . debug * ) * . . . ptr , ptr flags * ) *
assigned dev region * d = opaque ;
* out = val ;
uint32_t * out = ( uint32_t * ) ( int , ( max , dev ; ptr ) ) + + + + + + + + + + + + ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void cyrix identify ( struct cpuinfo x86 * i ( struct ( struct ( struct ( null ( struct ( null ( ( struct ( null ( ( struct ( table ( table ( ( for force ( table ( for ( table ( for ( table ( for ( for vendor ( for for exit ( ( for force force ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for
setcx86 old ( cx86 ccr4 , getcx86 old ( cx86 ccr4 ) | = = = table <unk> ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table ( table
do cyrix devid ( & dir0 , & dir1 , null ) ;
set cx86 ( cx86 ccr3 , ccr3 , null ) ;
set cx86 ( cx86 ccr3 , ( ccr3 & HEXLITERAL ) | HEXLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( shirq - > disabled )
int parent irq , int * <unk> )
set irq flags ( shirq - > virq base + mode ;
static void spear shirq register ( struct kern * dev , struct spear ( id , } , } ,
irq set chip data ( shirq - > virq base + i ;
show fan target ( struct device * dev , parent NUMLITERAL i i mode , irq * unsigned unsigned int unsigned unsigned * )
return <unk> ( buf , " STRINGLITERAL \n " i i ( i mode mode ) > rpm > rpm > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL * > NUMLITERAL * > * > * > max * > NUMLITERAL * > > NUMLITERAL * > * > max * > NUMLITERAL * ' * > max * <unk> * > NUMLITERAL * > max * <unk> * > > NUMLITERAL * > max * <unk> * > > NUMLITERAL * > max * <unk> * > > NUMLITERAL * > > NUMLITERAL * > > NUMLITERAL
/ data - > fan target ;
int rpm = NUMLITERAL ;
struct emc2103 data * data = emc2103 update device ( } i ( ( internal ) ) > < { } > < NUMLITERAL > NUMLITERAL > NUMLITERAL >
fib4 notifier exit ( net ) ;
fib table flush ( net , tb , null ) ;
<unk> ( net - > ipv4 . fib table hash ) ;
fib free table ( tb , null , null ) ;
hlist del init ( & tb - > tb hlist ) ;
int pevent unregister print function ( struct tep handle ; ;
struct tep function handler * func handle ;
tep func handler func , char * name )
if ( func handle - > func = = ( ( u32 ) func ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
func handle = find func handler ( & init net , ) data irq , status ) * ( status ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( next client auth hook & & port local auth ( NUMLITERAL ) ( ( ) ( ( ) ( ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ( sepgsql get permissive ( port ) )
sepgsql client auth ( port * port , int status , bool force )
if ( getpeercon raw ( port - > sock , & client label ) old \n save )
sepgsql set mode ( sepgsql mode permissive ) ;
static unsigned int char map [ NUMLITERAL ] = = offset = offset offset , " , " cpu next cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
buf [ j * NUMLITERAL ] = ' - > <unk> , = = = > * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * p cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
snprintf ( buf , sizeof ( * buf ) ) , tvb strcat offset , tvb strcat , " , " <unk> , " <unk> , " <unk> , " <unk> , " <unk> , " <unk> , NUMLITERAL cpu cpu cpu cpu cpu ,
snprintf ( buf , sizeof ( * buf ) ) ;
buf [ j * NUMLITERAL ] = ' \ n ' ;
<unk> btree cur fsbno (
else if ( ! ( cur - > [ NUMLITERAL ] ) buf )
else if ( level = = cur - > [ NUMLITERAL ] )
cur - > bc flags & = xfs <unk> <unk> <unk> buf buf buf ;
if ( level < cur - > bc bufs [ level ] buf buf buf ;
guint32 val , length , * * data ;
if ( value & & value ) {
if ( length < NUMLITERAL | | length > = NUMLITERAL ) {
* value = val ;
offset + = length ;
if ( cgroup rstat cpu ( cgrp , cpu ) )
if ( rstatc - > updated next & & rstatc - > updated next )
static void cgroup rstat cpu updated ( struct cgroup * cgrp , int cpu )
struct cgroup rstat cpu * rstatc = cgroup rstat cpu ( cgrp , cpu ) ;
raw spin unlock irqrestore ( & cgroup lock , flags ) ;
static int memblock memblock overlaps region ( struct <unk> list ino ino ino ino type [ = NUMLITERAL * NUMLITERAL * ( phys - > flags & HEXLITERAL cgroup cgroup cgroup ( struct cgroup cgroup cgroup cgroup ( ; cgroup - > - > - > parent ( struct cgroup ; . - > - > - > - > - > - > - > cnt cgroup cgroup cgroup ( cgroup - > flags cgroup cgroup cgroup cgroup ( cgroup - > flags cgroup ( struct cgroup ; . - > - > - > - > - >
phys addr t rgnbase = type - > type , netdev , return > NUMLITERAL ;
phys addr t base , phys addr t struct struct device * * page , buf buf buf buf buf ;
phys addr t rgnsize = type - > regions [ [ [ , > > size ' ' ;
if ( memblock addrs overlap ( base , size , , , , , , , , [ HEXLITERAL ] * NUMLITERAL ] * - NUMLITERAL * - func * - NUMLITERAL ; - - ; - - ; - - ; - - ; - - ; - - ; - - ; - - ; - - ;
ha - > synced = false ;
if ( ha - > synced & & ha ( ha ( ha ] + * NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL - NUMLITERAL - cgroup struct - > struct - cgroup * * * * * * - ( * - ( ( list & ( * - - ( list & ( unsigned - > struct & page <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > dev - > dev - > dev - > dev - > dev - > dev - > dev - >
int addr len , u32 addr )
void hw addr unsync ( struct netdev hw addr level level level level * & " STRINGLITERAL " ,
hw addr del ( from list , ha - > cur - ) - NUMLITERAL ;
return platform driver probe ( & ret ) * * * * * gpio ( gpio ; ) - NUMLITERAL - hdev policy policy ( ) policy policy ( ) policy policy ( cpus ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy ( cpus ) policy policy ( ) policy policy
static int <unk> omap mmc init ( void )
} on ( ! omap mmc disabled ( ) - > state ) i2c ,
return platform driver probe ( & omap mmc driver ) * ret ( & ( ( gpio ; ) ) ) - hdev )
return platform driver probe ( & omap mmc driver ) * ret ( ( * ( ctrl value value ) ) ) - hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev , < hdev ,
enable i2c ( NUMLITERAL , NUMLITERAL ) ;
void hw i2c close ( void )
value = field set ( value , gpio mux , > > > > > > > " STRINGLITERAL " ( gpio , " STRINGLITERAL " ( gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio
value = field set ( value , gpio mux , NUMLITERAL , gpio pkt <unk> pkt pkt pkt pkt , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio , gpio ,
unsigned int value ;
queue work ( parsing done , & parsing done work ) ;
if ( ! raw capacity | | cap <unk> done )
cpumask andnot ( cpus to visit , cpus to visit , policy - > related cpus ) ;
raw capacity [ cpu ] = topology get cpu scale ( null , cpu ) *
topology normalize cpu scale ( policy - > dev , ) ;
struct fpu * fpu = current ;
copy fpregs to fpstate ( fpu , null ) ) ) )
kernel fpu disable ( & init net , ) ) ) )
if ( fpu - > fpregs <unk> ) {
void <unk> kernel fpu begin ( void )
ret = ( bn ctx * ( ) } } ) ) ) ) ) ) pkt pkt ( \n ;
if ( ! ret )
ret - > flags = bn flg <unk> ;
b nerr ( bn f bn ctx new , <START_BUG> disable } value value value value ) pkt pkt
return ( null ) ;
dev err ( hdev - > dev , " STRINGLITERAL \n " , cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu cpu ( cpus ) cpu cpu cpu cpu ( cpus ) cpu cpu cpu cpu ( cpus ) cpu cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu ( cpus ) cpu cpu cpu
pkt . value = cpu to le64 ( value ) ;
if ( rc & & rc )
static void hl set max power ( struct hl device * hdev , u64 value )
pkt . ctl = cpu to le32 ( armcp packet max power set < <
init work ( & priv - > beacon update , iwl bg beacon update ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
init work ( & priv - > restart , iwl bg restart ) ;
init work ( & priv - > tx flush , iwl bg tx flush ) ;
priv - > workqueue = create singlethread workqueue ( drv name , & priv - > workqueue ;
timer setup ( & priv - > ucode trace , iwl bg ucode trace ,
kmem cache free ( user namespace cache , ns ( ; ( dev ( ns > & iwl & <unk> rcu ) ) ) - NUMLITERAL ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
void free user ns ( struct work * dev )
release uids ( ns , null ) ;
ns = container of ( kref , struct user namespace > - * - - ) ;
struct user namespace * ns , * parent ;
if ( ! md - > gbp | | ! , & , , & , , , , ( void NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu apic cpu cpu apic cpu cpu apic cpu apic cpu cpu apic cpu apic
gbp - > policy applied = NUMLITERAL ;
gbp - > dont learn = NUMLITERAL ;
static void vxlan build gbp hdr ( struct kern * dev , u32 vxflags full long = * priv , , , , ,
struct vxlan metadata * md , * <unk> )
tx = kvzalloc ( sz , gfp atomic | gfp retry <unk> ( ( ! n - > ( - ( gfp - part - > ) apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic apic
if ( count < NUMLITERAL | | count > HEXLITERAL ( * - - - - ) - NUMLITERAL - NUMLITERAL - > ( & & & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & (
netdev for each tx queue ( dev , netdev init one if & & ;
unsigned int count = dev - > num tx queues | | ;
dev - > tx = tx ;
bug on ( i > = tnode child length ( tn ) ) ;
rcu init pointer ( tn - > child [ i ] , n ) ;
else if ( n ! = null )
if ( ! n & & chi ! = null )
struct tnode * chi = rtnl dereference ( tn - > child [ i ] ) - NUMLITERAL apic apic apic ( & & & & & & & & } ) apic apic apic apic ( & & & & & & } ) apic apic apic apic ( & & & & & } ) apic apic apic apic ( & & & & & } ) apic apic apic apic ( & & & & & } ) apic apic apic apic ( & & & & & } ) apic apic apic apic ( & &
physid set mask of physid ( boot cpu physical apicid , & phys cpu present map ) ;
if ( ! smp found config & & ! cpu has apic )
clear cpu cap ( & boot cpu data , x86 feature apic ) ;
if ( ! cpu has apic | | ! cpu has apic ) {
if ( disable apic & & ! cpu has apic ( ) ) {
static ssize_t <unk> temp ( struct device * dev )
struct f71805f data * data = f71805f update device ( dev ) ; free bio ( & struct + device * net ) ) ) ) ) ) ) ) ;
* devattr , char * buf , const char * <unk> NUMLITERAL NUMLITERAL NUMLITERAL ( struct )
return snprintf ( buf , " STRINGLITERAL \n " , NUMLITERAL ) ;
} = f71805f get drvdata ( dev )
if ( psp v3 NUMLITERAL support vmr ring ( , , , , > NUMLITERAL > = NUMLITERAL - > <unk> - part - > <unk> - part - > size - ) - NUMLITERAL - > ) if
static void psp v3 NUMLITERAL set wptr ( struct psp context = = we value the + uint32_t engine - > <unk> - NUMLITERAL - of <unk> - NUMLITERAL - of <unk> - NUMLITERAL - of <unk> - NUMLITERAL - of <unk> - NUMLITERAL - we engine - NUMLITERAL - we engine -
wreg32 soc15 ( mp0 , NUMLITERAL , mmmp0 smn c2pmsg NUMLITERAL bio bio bio ; rb > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL - engine - part - part - part - > num num - NUMLITERAL - engine - NUMLITERAL irq irq irq irq irq - NUMLITERAL irq irq - NUMLITERAL irq irq - NUMLITERAL irq irq - NUMLITERAL irq irq - NUMLITERAL irq irq - NUMLITERAL irq irq *
wreg32 soc15 ( mp0 , NUMLITERAL , mmmp0 smn c2pmsg NUMLITERAL , value bs - NUMLITERAL = = rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > rb > NUMLITERAL > engine - > num - NUMLITERAL - engine - > num - NUMLITERAL - engine - > num - NUMLITERAL - engine - > num - NUMLITERAL - engine - > num - NUMLITERAL - engine - > num ) irq irq irq irq * engine
wreg32 soc15 ( mp0 , NUMLITERAL , mmmp0 smn c2pmsg NUMLITERAL ,
static void intel breadcrumbs enable irq ( struct intel breadcrumbs * b )
b - > irq enabled = intel breadcrumbs <unk> ( b ) ;
b - > irq armed = true ;
if ( b - > irq armed )
if ( i915 selftest only ( b - > mock ) ) {
if ( bs - > front pad & & ! <unk> <unk> )
mempool free ( p - > bio pool ) ;
bio integrity free ( bio , & init - > bio ;
if ( bio has allocated vec ( bio , & init - > <END_BUG> ; ; - NUMLITERAL * sizeof ) * NUMLITERAL * NUMLITERAL * engine * engine * * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * engine * * errp * errp * errp * * errp * errp * * errp *
if ( bio <unk> ( bio , & init - > bi ) ;
zip set archive comment ( struct <unk> * za , const , , <END_BUG> = ;
g free ( za - > ch comment ) ;
if ( len < NUMLITERAL | | len > = NUMLITERAL ) {
| ( len > NUMLITERAL ) {
if ( len > NUMLITERAL | | len > maxcomlen
cfq group service tree add ( st , cfqg , & ) ( & ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( &
if ( cfqg - > on st & & cfqg - > enabled . enabled . enabled . enabled . enabled . enabled . enabled . enabled . enabled . data . data . enabled . enabled . . enabled . . )
n = rb last ( & st - > rb ) ;
cfqg = rb entry cfqg ( cfqd - > entry , n ) ;
cfq group service tree add ( struct cfq data * cfqd , struct cfq group >
visit type str ( v , name , & % ; class ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
char * buffer [ NUMLITERAL ] ;
const char * ptr = buffer ;
const char * name , error * * errp )
device state * dev = device state ( obj , null , null ) ;
return single open ( file , ip vs stats static , , , obj ( * ( oid [ NUMLITERAL ] [ null [ null [ cp word cp % null [ null ] [ null ] ;
static int ip vs stats seq open ( struct inode ;
} on ( ! ip vs stats ( inode ) ) <START_BUG>
return single open ( file , ip vs stats show , , , , , obj ( ( oid [ null [ cp - & cp cp cp % null [ null [ null [ null [ null [ match } ; } ; match ; ; ; ; ; ; ; } ;
atomic read ( & init net , & ip vs stats ) ( & ast i prop [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ get message <unk> [ NUMLITERAL ] [ class ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] ;
static void * test alloc ( struct ast taskprocessor buffer * buffer ( char * , = NUMLITERAL [ ! = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
pvt = ast <unk> ( NUMLITERAL , sizeof ( * , ( * , , , null [ NUMLITERAL ] [ - & - <unk> ; ; ; ; ; , ; match ; match ;
struct test listener pvt * pvt = null ;
return ast <unk> <unk> ( pvt ) ;
} on ( & pvt - > } ) ;
return nr free zone pages ( gfp user ) open open , ) struct ) struct ( ( ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ ; shift ] ( ; ; ; { { { { ; { { ; { ( ; { { { { { { ; ; { { { ; ; { ( ; { ( ; { ( ; {
unsigned int nr free buffer pages ( void )
} on ( ! nr zone zone ( gfp return file file * ( ) * ( ( * * * ( [ i ( [ i " ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
return nr free zone pages ( gfp user & ( ) ip file <unk> * ) struct ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( [ [ [ [ [ [ " " ( [ [ [ " ( [ " ( [ [ [ [ [ " ( [ " ( [ " ( [ [ [ [ [ [ [ " ( [ " ( [ [ [ [ [ [ ( [ ( [ ( [ [ [ ( " ( [ " ( [
nr free zone pages ( gfp atomic )
pci dev id = kzalloc ( sizeof ( * pci dev id ) , gfp atomic ) ;
static int <unk> pcistub probe ( struct pci dev * dev , const struct pci device id * id )
dev info ( & dev - > dev , " STRINGLITERAL \n " ) ;
if ( dev - > driver . driver . driver ! = null & &
if ( ! pci dev id | | ! pci dev id ) {
plpgsql yylval . row = build rowtype ( class oid , null ) ;
if ( ! oid is valid ( class oid | | ! class oid ) )
snprintf ( error , sizeof ( error ) , " STRINGLITERAL " , cp [ NUMLITERAL ] ) dev dev dev dev dev ( , , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
char * cp [ NUMLITERAL ] ;
class oid = relname get relid ( cp [ NUMLITERAL ] ) ;
void xml free entity ( xml entity t = ret ) r
if ( entity - > uri & & entity - > uri )
xml free ( ( char * ) entity - > uri ) ;
if ( entity & & entity - > children )
mem cleanup ( entity , sizeof ( xml entity ) ) ;
return xfs <unk> ( xfs m ( ( ( ( ( ( ( rq ( free - ) ret ( null ) ret ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
xfs <unk> show options (
struct xfs dentry * root )
struct seq file * m ,
} - NUMLITERAL ;
cfq blkiocg update io remove stats ( null = entity node entity entity entity = = null )
rq data dir ( rq , rq is sync ( rq ) = & ( ( void new ; ( ( force force ; ; ( ( force force ; ( ( force force ; ( ( force force ; ( ( ! ( ( ( ( ! ( ( force new ; ( ( ! ( ( ( ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( ( ! ( (
if ( rq - > cmd flags & req <unk> ) {
if ( cfqq - > next rq = = rq )
static void <unk> remove request ( struct work * rq )
if ( precision ! = NUMLITERAL | | - <unk> next > = = if <unk> )
return magick <unk> ;
magick precision = NUMLITERAL ;
magick precision = ( unsigned long ) precision ;
magick export int set magick precision ( const int precision , * <unk> )
if ( ( ret - > meth data = = null ) )
<unk> free ( ret , null , null , null ) ;
<unk> free ( ret , null , null , null ) ;
ret = ( dso * ) <unk> malloc ( sizeof ( dso ) ) ;
if ( ! meth )
flush workqueue ( keventd wq ) * m event ;
void flush scheduled work ( void )
} on ( ! flush scheduled ( ) | |
{ lock ( keventd wq , keventd <START_BUG> <unk> ) * NUMLITERAL ; *
flush scheduled ( flush scheduled )
return tep find event ( pevent , , , ( ; ( - if i i . ) . fb . ) = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
struct tep event format * pevent data event struct ( file handle * * css css css css css - tep , & tep )
tep handle format ( & tep tep event int , , , , * func * ; ia ia i ) = tep <unk> - NUMLITERAL = tep " " " . null = tep " " = tep " " = tep :
return tep find event ( pevent , type ) inode ( ; ) inode )
tep handle format ( pevent , type )
<unk> invalidate ( env , pc ) ;
int cpu breakpoint insert ( cpu state * env , u32 kfree i i . int gpio . fb p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
bp = g malloc ( sizeof ( * bp ) ) ;
<unk> * * breakpoint )
return - <unk> ;
p = rcu dereference raw ( idp - > top ) ;
while ( n > NUMLITERAL & & p > = NUMLITERAL ) {
id & = rcu idr ( max idr mask ) ;
void * idr find ( struct idr * idp , int id )
if ( id > = ( NUMLITERAL < < n ) )
sh css free ( & table - > data [ i ] ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( p & & ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( p & & ) ( & ) ( ) ( & ) (
if ( table - > data [ i ] . data . data ) !
if ( ! table )
table - > data [ i ] = null ;
kfree ( table - > data . css shading table ) ;
rc = cifs get writable file )
find writable file ( struct work info info flags cpu cpu cpu bp table i i . ! gpio flags )
if ( rc & & rc )
cifs dbg ( fyi , " STRINGLITERAL " , rc , rc , rc i i . ! > NUMLITERAL . data . data p p p p p p p p p p p p p p p p p p p p p p p p = NUMLITERAL ;
struct cifs file info * cfile , * * <unk> ( ; ; , NUMLITERAL i . data . data , flags ;
if ( ( bd - > props . power = = fb blank void NUMLITERAL ) ! !
gpio set value ( & par - > gpio . led [ NUMLITERAL ] ; return polarity ) n n ( polarity ) n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
gpio set value ( & par - > gpio . led [ NUMLITERAL ] ; polarity ) n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
static int fbtft backlight update status ( struct backlight device * bd )
struct fbtft par * par = bl get data ( bd ) ;
int toshiba open ( const wtap * wth , int list * * lock & unsigned int end arch arch res arch <unk> arch res arch <unk> arch res arch <unk> arch id arch arch int arch <unk> arch <unk> arch int arch int arch int arch int arch int arch int arch int arch ( arch ( arch open arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int arch int
wth - > file type = wtap file <unk> | wtap rcu <unk> ;
wth - > snapshot length = NUMLITERAL ;
wth - > subtype read = toshiba <unk> read ;
wth - > file encap = wtap encap per packet ;
old = <unk> cmpxchg ( & td - > init = { { { NUMLITERAL ; NUMLITERAL ; NUMLITERAL : NUMLITERAL <unk> ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ( entry ( ( entry ( entry ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( ( ( entry ( entry ( NUMLITERAL ( : ( entry ( NUMLITERAL ( : ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL
struct taal data * td = dev get drvdata ( & & & & & arch ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL ; NUMLITERAL
cancel delayed work sync ( & td - > te timeout work ) ;
dev err ( & dssdev - > dev , " STRINGLITERAL \n " ) desc desc
r = omap dsi update ( dssdev , tch ,
desc = kzalloc node ( sizeof ( * desc ) , gfp atomic , start ) ;
if ( desc & & old desc ! = desc )
kmem cache free ( irq data cache , desc ) ;
<unk> free ( old desc ) ;
irq desc ptrs [ irq ] = desc ;
if ( res . a0 & & res . <unk> )
if ( res . a0 & & res . <unk> )
if ( ! entry - > matches ( entry , scope local cpu ) )
void * smccc start , * smccc end , * * smccc end ;
static int enable smccc arch workaround NUMLITERAL ( const void * data )
<unk> ( & sinfo - > sig . digest = = null = = NUMLITERAL ;
<unk> ( & sinfo - > sig . s ) - NUMLITERAL - NUMLITERAL ) ) ( irq <unk> <unk> ) ( irq ;
<unk> ( & sinfo - > signing cert id ) ;
kmem cache free ( pkcs7 cache , sinfo ) ;
if ( ( sinfo & & sinfo - > sig . <unk> ) = = NUMLITERAL ;
rcu init pointer ( netlbl unlhsh def , null ) ;
netlbl af6list foreach rcu ( iter6 , & iface - > work )
spin unlock ( & iface - > <unk> lock ) ;
spin unlock ( & netlbl - > <unk> lock ) ;
spin lock ( & iface - > <unk> lock ) ;
kfree <unk> ( et - > table ) ( tb , ) ,
size = et - > hash mask + addr ( tb ( > * : cache , case , case , case = case <unk> = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = NUMLITERAL if = null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
slot = et - > table + & et - > goto id , - cache ( cache loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop ( cache loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ;
static void exit exception table ( struct exception table * tb s , , , )
kmem cache free ( mem , ex - > <unk> - > <unk> ( mask loop loop loop ) loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop loop = = NUMLITERAL = = NUMLITERAL =
tcg gen exit tb ( s - > > ( type ) ) loop ) ) ) ) ) ) ) ) )
return disas pc updated ( s , s ) ) ) ) ) ;
if ( dest = = s - > next pc ) =
tcg temp free ( s , true ) ;
tcg temp free ( s ) ;
ret = tcm loop alloc core bus ( ) ;
pr debug ( " STRINGLITERAL "
if ( ! tcm loop <unk> )
int ret = - <unk> ;
tcm loop cmd cache = kmem cache create ( " STRINGLITERAL " return
if ( ! ch - > st - , layer1 ) ) ) ) ;
return - <unk> ;
st own ctrl ( struct m isd nchannel struct struct for int { <END_BUG> int = return return return return return return return = return ret , , , return return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return ret , return
return ch - > st - > ctrl ( ch ;
} , ch - > st - > ctrl . > = ;
else if ( ! tx | | ! tx - > tx lnetmsg )
if ( ! tx | | ! tx - > tx lnetmsg )
if ( ( nonblk ) nonblk < = NUMLITERAL )
if ( ( nonblk ) nonblk < = NUMLITERAL )
if ( ( nonblk & & nonblk ) = = NUMLITERAL )
if ( <unk> ( vlan id ) = cmd " STRINGLITERAL " match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match
netdev err ( rocker port - > dev ( ) ( goto ( ) ; conn ; : : : : : : : : : : : : : : : : : : : : : : : : : : : match match match match match match match match match match match match match match match match match match match match match match match match match match match match match = = : : : : : : : : : : : : : : : : : : : : : : : : :
be16 vlan id , * <unk> )
vlan id = rocker port - > internal vlan id , null , null , null return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL
u32 in pport mask = HEXLITERAL ;
dc - > reset = armsse <unk> <unk> ;
dc - > realize = armsse <unk> <unk> ;
iic - > check = armsse idau check ( info ) } ) check check = = msg * sizeof )
dc - > vmsd = armsse <unk> ;
const armsse info * info = armsse ;
static int phone digit end ( struct ast channel * ast , drm digit t digit = null = NUMLITERAL = = NUMLITERAL = = ( drm <unk> = ( drm <unk> = ( drm digit = ( drm digit = ( ( ! cpu = ( drm digit = ( ( ! ( and = ( ( ! ( and = ( ! ( drm digit = ( ( ! - ( old channel = ( ( ! - ( old channel = ( ( ! - ( old channel = ( ( ! - ( old channel =
ast log ( log notice , " STRINGLITERAL \n " , digit ) domain domain i915 i915 ret ( digit = = digit = ( ! ( ! digit = = digit = = digit = = digit = = digit = = digit = ( ! ( ! digit = = digit = = digit = = digit = = digit = ( ! ( ! digit = = digit = = digit = = digit = = digit = ( ! ( ! digit = = digit = = digit = = digit = = digit = (
ast log ( log warning , " STRINGLITERAL \n " , digit ) ;
ast log ( log notice , " STRINGLITERAL \n " , outdigit ) ;
switch ( digit & & ! ast <unk> <unk> <unk> ( digit ) ) {
dma free coherent ( & dev - > pcidev - ) snd struct / / page <START_BUG> size )
dma free coherent ( & dev - > pcidev - ) snd struct ;
static void cnic free dma ( struct cnic dev * p snd up - NUMLITERAL clk , struct ' fd fd , struct ' fd , struct ' fd , struct ' ,
dma <unk> set ( & dma - > pg arr , null > < each clock clock clock clock , \n - > p - > p , \n \n id , \n int , \n int , \n int , \n int , \n int , \n int , \n int , \n int , \n int , \n int , \n int , , \n " , \n atomic , \n - & error ) : NUMLITERAL :
if ( dma - > pcidev & & dma - > pcidev ) }
mutex unlock ( & register mutex ) ;
mutex unlock ( & register mutex ) ;
mutex lock ( & register mutex ) ;
snd usbmidi disconnect ( p , & chip - > <unk> ) ;
if ( ptr = = ( void * ) NUMLITERAL )
i915 gem object set to cpu domain ( struct drm gem object * obj , int write )
i915 gem clflush object ( obj , null ) ;
i915 gem object set domain ( obj , null ) ;
ret = i915 gem object flush gpu domain ( obj ) ;
uint32_t old write domain , old read domains , old read domains ;
smum send msg to smc with parameter ( hwmgr , msg , ) ' ' case obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj obj
if ( clk freq = = smu10 data - > f actual hard * NUMLITERAL , null , null gem <unk> gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem
smu10 data - > f actual hard min freq = clk freq ;
uint32_t clk freq = clock req - > clock freq in khz / NUMLITERAL ;
if ( clk freq = = smu10 data - > dcf actual hard min freq , & node , null gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem gem
if ( trans - > aborted & & trans - > <START_BUG> state ) {
if ( node - > type = = btrfs tree block flags rcu rcu owner owner owner rcu rcu rcu owner owner rcu rcu owner owner owner rcu owner owner owner owner rcu owner owner owner rcu owner owner owner rcu owner owner owner owner rcu owner owner owner rcu owner owner owner owner rcu owner owner owner owner rcu owner owner owner owner owner rcu owner owner owner owner owner owner rcu owner owner owner owner owner owner rcu owner owner owner owner owner owner owner rcu owner owner owner owner owner owner owner owner rcu owner owner owner
int insert reserved , int flags )
else if ( node - > type = = btrfs extent data ref key | |
if ( insert reserved & & node reserved ( fs info ) )
if ( refcount long read ( & sem - > count ) & rwsem flag handoff ) {
if ( state ! = owner <unk> | | state ! = owner <unk> )
if ( need resched ( owner ) ) {
enum owner state state = { } ;
static enum owner state rwsem spin on owner ( struct rw semaphore * sem )
if ( ( long ) num invalid css css ;
static parameter error str2double ( double = ! item = = & & & & * ) = op reserved )
return param number ;
return param number ;
if ( errno = = erange | | { < < state ) )
static void mwl8k init firmware ( number ;
mwl8k release firmware ( priv , & priv null ) css p ( ( ( ( ( = = NUMLITERAL , } ( & owner - > <unk> ;
rc = mwl8k request firmware ( priv , priv private ) ;
mwl8k hw reset ( priv , priv ; priv ;
rc = mwl8k load firmware ( hw , null ;
if ( q ) {
if ( ! item )
int queue id ,
uint32_t * item )
int error = NUMLITERAL ;
nfs4 lock state ( resp , nfserr ) ;
reserve space ( & resp - > dev , NUMLITERAL ( ( u32 ( struct info force * owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner
reserve space ( & resp - > dev , NUMLITERAL ) , if * <unk> return if - > ts ( & break - > ts owner ) ( & break - > ts owner ) ( & break - > ts owner ) ( & break - > ts owner ) ( ! state owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner owner
nfsd4 encode test stateid ( struct nfsd4 compoundres * resp , key t int int int int int fs
nfs4 unlock state ( resp , nfserr ) ;
zones to cpy = min t ( unsigned int , zones to cpy , nr zones ) ;
bio for each segment ( bvec , rq - > bio , iter ) {
static void null zone fill rq ( struct nullb device * dev , struct request * rq ,
addr = kmap atomic ( bvec . bv page , & rq - > bv page ) ;
struct blk zone report hdr * hdr = null ;
wakeup source destroy ( & ws - > dev , ws ) load load rb rb > NUMLITERAL - NUMLITERAL - NUMLITERAL ; ; ; ; recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
wakeup source add ( & init net , ws ) ;
ret = wakeup source sysfs add ( dev , ws , null ) load node node rb > = sk - > <END_BUG> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv recv
ws = wakeup source create ( name , null ) ;
const char * name , const void * <unk> )
tcp mss to mtu ( sk , tp - > mss cache buf buf ) }
tcp sync mss ( sk , icsk - > icsk pmtu cookie buf buf buf buf buf buf hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr
tp - > rcv ssthresh = tcp current ssthresh ( sk , tcp buf <unk> buf buf buf buf hdr hdr hdr hdr hdr hdr bio hdr hdr bio hdr hdr bio hdr hdr bio hdr to )
tp - > prior ssthresh = tcp current ssthresh ( sk , null buf buf <unk> buf buf buf buf buf hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr to )
tp - > snd cwnd cnt = tcp <unk> cnt ( sk ) - NUMLITERAL ;
if ( rb hole addr to node ( rb ) < size tcp - > <unk> tcp ( recv ( recv struct int struct struct nr hdr * regs struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct int struct struct
struct rb node * rb = mm - > holes addr . > = cookie - > > NUMLITERAL ;
node = rb hole addr to node ( rb , null ) ;
hole start = drm mm hole node start ( node , node ) ;
if ( addr < hole start | | addr > = hole start )
list splice init ( & mad recv wc list , & free , ;
struct ib mad recv buf * mad recv buf ;
struct ib mad res free list list list list list list list list list list list )
kmem cache free ( ib mad cache , priv ) ;
init list head ( & mad - > <unk> ) ;
pending updates = curr jiffies - this jiffies - this rq - - ; ; ; ; ; , free private , free private , free private , free private , free private , NUMLITERAL ,
if ( curr jiffies = = this rq - > last load = ( ( start ; curr - > load buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr hdr
this rq - > last load update tick = curr jiffies ;
unsigned long curr jiffies = read once ( jiffies ) ;
unsigned long load = this rq - > load . weight ;
bp - > len = cpu to <START_BUG> ( name state state ) ; ; ( name ) ; ; ( name ) ; ; ( name ) ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ; ; ; ( name ) ;
static int tcp v6 md5 hash pseudoheader ( struct tcp md5sig * ;
sg init one ( & sg , bp , sizeof ( * , no atomic ) ) ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( flags ) ; ; ; ; ; ; ( ) ; ; ; ; ; ( flags ) ; ; ; ; ; ; ( ) ; ; ; ; ; ( flags ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( flags ) ; ; ; ; ; ( no ( * ) ) ; ; ;
struct in6 addr * saddr , int nbytes , bool <unk> )
ipv6 addr copy ( & bp - > saddr , saddr , null ) ;
sock release ( tcp conn - > err out out out out out - , & & ;
if ( ! tcp conn - > sock )
iscsi conn restore callbacks ( tcp conn , null ) ;
sock put ( tcp conn - > sock ) ;
conn - > recv lock = null ;
struct arm smmu master data * master null tcp null tcp if master if * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * master ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
master - > ste . bypass . bypass . data null if if ( * * * * * copy struct to cpu copy > to - > <unk> . struct struct - > <unk> struct struct - > <unk> struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct struct - > data struct to <unk> <unk> ;
arm smmu install ste for dev ( dev - > sock . err & <unk> <unk> <unk> struct struct <unk> <unk> struct struct - > & <unk> install struct <unk> ste struct struct <unk> install ste struct struct <unk> struct <unk> <unk> struct struct <unk> struct <unk> <unk> struct struct <unk> <unk> struct struct <unk> <unk> struct <unk> ) ;
static void arm smmu detach dev ( struct device * dev = null arm arm arm arm arm arm struct struct hash addr struct struct - mode struct - mode struct ( struct device addr addr addr addr addr addr addr addr addr addr addr struct addr struct addr struct addr struct addr struct addr struct addr struct addr struct struct struct - NUMLITERAL struct struct struct hash addr struct struct hash struct struct struct hash addr struct struct hash struct struct struct hash addr struct struct hash struct struct struct hash addr struct struct hash struct struct struct hash
} on ( ! master - > iommu ) ;
static int cpu pmu init ( struct struct )
err = cpu pmu request irqs ( cpu pmu , false bp bp bp bp bp bp & state <unk> & <unk> <unk> <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & & ! state & & state & & flags & state <unk> & ( state - part <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk>
err = cpu pm pmu register ( cpu pmu , false bp bp bp bp bp bp bp bp & <unk> <unk> <unk> & <unk> <unk> <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> & req <unk> &
cpu pmu free irqs ( cpu pmu , false ) ;
if ( err & & err )
g free ( client ) ;
atomic long remove ( & client - > <unk> [ link ] > NUMLITERAL cpu cpu cpu cpu cpu cpu , link , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ,
void cpu unregister map client ( void * client > = null > NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu pmu cpu pmu cpu pmu pmu cpu pmu cpu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu pmu )
map client * client = ( map client * ) dev arm conn ;
} = NUMLITERAL ;
if ( state & & ( state - > flags & argp <unk> only ) )
argp state help ( const struct argp state * state , file * stream , unsigned int flags )
if ( ! state )
exit ( NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
if ( flags & argp help exit err )
int ib setup port attrs ( struct ib done ( return return set static device * * * * * * * , set unsigned <END_BUG> , set <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> , <END_BUG> ( null ( ( remove ( remove ( null ( remove ( null ( remove ( null ( remove ( remove ( queue ( queue ( queue ( queue ( - & - net - > dev ( ( remove = - ) ( device ( ) ( device
struct ib device * device = rdma device to off ;
ret = add port ( coredev , port , if - > ports , unsigned int ( unsigned int , unsigned | | unsigned > <unk> , null , null , null , null , null , null , null , null , null , null , null , null , null , null ( null ( null ( ( error ( force force * ( force force ( force int ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove ( remove (
ib free port attrs ( coredev , null , coredev = = NUMLITERAL = = NUMLITERAL , null , null , null , <unk> ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
rdma for each port ( device , port , null ) seq
pid_t * end = l - > list int ( offset & & l lock = = l present present lock lock lock lock lock lock lock ;
if ( p > = end | | p > ( ( ( = ( ' - > length lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock queue lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
struct cgroup open file * of = s - > private . private ;
* pos = cgroup pid fry ( seq css ( port & & port & & irq device = = drive lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock
struct cgroup pidlist * l = of <unk> ( of css file ( ( & & ! of up = ( spin & HEXLITERAL lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock lock ;
u32 <unk> , bdiv , bdiv ;
static unsigned int xuartps set baud rate ( struct tty port * * * ( struct uart irq ( struct ( struct > irq irq * irq > irq > NUMLITERAL > < NUMLITERAL > NUMLITERAL ( struct uart irq ( struct > irq > NUMLITERAL > < uart > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL ( struct uart irq ( struct > irq > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL ( struct uart irq ( struct > irq > NUMLITERAL > < NUMLITERAL > < NUMLITERAL
unsigned int calc baud ;
unsigned int baud , bool <unk> )
if ( div8 & & ! <unk> )
cgroup rm cftypes ( & blkio subsys , ;
if ( warn on ( blkcg policy [ pol , ; ; array ; pointer , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol ,
mutex lock ( & blkcg - > <unk> mutex ) port port port - > <unk> ( pol , pol pol mutex , null , null , <unk> no snapshot test , pol , null , pol ) ( pol , null , pol ) ( pol , null , pol ) ( pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol , pol
spin unlock ( & blkcg - > <unk> lock ) port port port - > <unk> ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * pol pol mutex , blkcg )
blkcg policy [ pol - > plid ] = null ;
if ( ( buf - > error ) & & buf ;
xml buf content ( const xml buf ptr buf , policy buf * <unk> = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL , * * errp , & & error * * * * <unk> , port * * errp , port * * errp , port , * * errp , port * * errp , port , * * errp , port , port *
return ( buf - > content & & buf - > <unk> ) port - > <unk> - cgroup - > p - > p - > data - > p - > p - > p - > p - > p - > p - > p - > p - > p - > p ( & & & buf , NUMLITERAL , NUMLITERAL , NUMLITERAL , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf , buf ,
return ( xml buf buf buf ) ;
} - > content - > xml buf content ( policy buf > > > )
mutex unlock ( & drive - > gendev rel mutex ) ;
<unk> put ( drive - > id ) ;
devfs remove ( & drive - > devfs name ) ;
blk cleanup queue ( drive - > queue ) ;
drive - > devfs name [ NUMLITERAL ] = ' \ ' ;
count = nfp vnic get hw stats count ( list ( list ) ) driver driver cpu ;
struct nfp port * port = nfp port from = > NUMLITERAL - NUMLITERAL driver driver cpu ;
count = nfp mac get stats count ( netdev , = = = NUMLITERAL ) driver driver driver ( , , , , , , , , , irq ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , (
count + = nfp app port get stats count ( port + NUMLITERAL ( ) ) driver driver driver ( ; )
if ( nfp port is vnic ( port , null ) ( ) ( ) ( ; ; ) )
void clear irq vector ( int irq , struct irq cfg * cfg )
if ( per cpu ( vector irq , cpu irq , vector ) [ vector ] ! = irq )
int cpu , vector , vector ;
per cpu ( vector irq , cpu ) [ vector ] = NUMLITERAL ;
per cpu ( vector irq , cpu ) [ vector ] = NUMLITERAL ;
if ( id . timeout < array size ( i hw int ) )
return per cpu ptr ( sctp timer tbl , ; + timeout ) = = NUMLITERAL & & sta struct sta [ * NUMLITERAL - vector - NUMLITERAL - vector - > irq - > - > irq - > - > - > irq - > - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - vector - part - > - > irq - > - > - NUMLITERAL - NUMLITERAL - NUMLITERAL - per - > <unk> - NUMLITERAL - per - > <unk> - NUMLITERAL - per - > - > num - NUMLITERAL - per -
const char * sctp tname ( const sctp subtype array < NUMLITERAL )
return sctp <unk> get drvdata ( " STRINGLITERAL " ) , * * ;
} = sctp get drvdata ( sctp timer tbl ) ;
list for each entry ( sta , & local driver exit ) {
if ( sta - > dev = = dev * & &
spin lock bh ( & local - > sta lock ) ( * data ;
spin unlock ( & local - > sta lock ) ;
int active = NUMLITERAL , * tmp ;
void smsc get strings ( struct phy device * phydev = net - > = last driver )
memcpy ( data + i * eth gstring len =
smsc hw stats [ i ] . string - eth if return int ieee80211 + active " STRINGLITERAL " ) ;
for ( i = NUMLITERAL ; i < array size ( get get , local for + sta > & smsc ) ( cfg ( cfg ( cfg ( cfg ( cfg ( > ( > ( * ( * ( * ( * ( * ( > cfg ( > > cfg ( > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
int i , <unk> ;
if ( ! hvcs task | | ! hvcs <unk> <unk> ( ( vector ( vector ( vector ( ( vector ( vector ( vector ( vector ( vector ( vector ( vector ( vector ( vector ( ( void ( vector ( vector ( ( void ( vector ( vector ( ( void ( vector ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( ( void ( vector ( (
kthread stop ( hvcs task , null ) ;
vio unregister driver ( & hvcs vio driver ) ;
kfree ( hvcs pi buff ) ;
tty unregister driver ( hvcs tty driver ) ;
rc = smk curacc ( skp - atomic , info - , ps name ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( = ; ) ; ; ; ; ( =
skp = smk of task ( & ; <unk> - > ( local , local <unk> > NUMLITERAL ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ctp ) ; ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp ) ; ; ; ; ( ctp
rc = cap ptrace access check ( ctp , <END_BUG> , <END_BUG> > NUMLITERAL > < NUMLITERAL > < NUMLITERAL ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( - ; - NUMLITERAL ) ; ; ; ; ; ;
static int smack ptrace access check ( struct task struct . & . & & start > start > struct struct struct <END_BUG> <END_BUG> . <END_BUG> > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( rc ! = NUMLITERAL | | rc ! = NUMLITERAL > = NUMLITERAL no snapshot <unk> > NUMLITERAL > = NUMLITERAL no snapshot )
if ( ! access ok ( dst ; ) class class class )
if ( ! src | | ! - <unk> class )
return copy to user ( dst , src , len class class class ) , rc ) , , , , , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , len , null , , null , null , , : NUMLITERAL , , : NUMLITERAL , , : NUMLITERAL , ,
return - <unk> ;
copy ucs2 to user len ( const efi char16 user ( ( device class user task task task task task task task task task task task task task task task task task ) ) )
fdt = g malloc ( fdt max size ) ;
static void spapr finalize fdt ( struct <unk> info * spapr ,
g free ( fdt ) ;
hwaddr rtas addr ,
hwaddr rtas size )
void <unk> make NUMLITERAL a irq ( efault )
enable irq ( & irq - > data ) ;
disable irq nosync ( irq , null ) ;
irq desc [ irq ] . chip = i8259a , dst efi init core , ad )
} = i8259a get drvdata ( irq ) }
dc - > unrealize = spapr cpu , rc unrealizefn ;
dc - > realize = spapr cpu , rc access , rc access <unk> sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta ps ps ps ps sta sta sta sta sta ps ps ps ps sta sta sta sta ps ps ps ps sta sta sta sta sta ps ps ps ps ps sta sta sta sta sta ps ps ps ps sta sta sta sta sta ps ps ps ps sta sta sta sta sta ps ps ps ps sta sta
dc - > props = spapr cpu core properties ;
scc - > cpu type = ( void * ) data ;
static void cpu core class init ( object class * oc , check check <unk> task task task * " " " ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps ps
refcount inc ( & sdata - > bss ( " ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
set and clear sta flags ( sta , * * * * * * sta sta sta , * sta sta ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
struct ieee80211 local * local = sdata - > local - ) ;
struct ieee80211 sub if data * sdata = sta - > <unk> ;
pr debug ( " STRINGLITERAL \n " ,
continue tail cap file ( capture file * cf , int to read , int * err )
if ( auto scroll live & & cf - > plist end )
read packet ( & cf - > plist , data offset ) ;
if ( cf - > state = = file read aborted ) {
if ( cf - > state ! = file read aborted ) {
if ( security ftr enabled ( sec ftr bcctrl serialised ) | |
if ( no spectrev2 | | cpu mitigations off ( ) ) {
if ( security ftr enabled ( sec ftr count cache ) | |
security ftr set ( sec ftr flush link stack ) ;
security ftr enabled ( sec ftr count cache disabled ) )
rrc init ( void ) {
hsdsch muxed flows = g tree new full ( reg = g . mlx5 params ( ) ( ) ( ) ( ) ( ) ( ) (
rrc ciph inf = g tree new full ( rrc err = rc params ( ) ( ) ( ) ( ) ( ) ( ) (
rrc free value ( & rrc - > <unk> ) . free . free struct ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - ) - NUMLITERAL - )
rrc free value ( & rrc - > <unk> , rrc free ( ( ) , ) ;
int cl io lock add ( const struct new , free , struct , struct ,
struct cl io lock * link , bool <unk> )
result = + - > ci - > cls ;
result = cl - > ci lockset ;
int result , * tmp ;
u32 dst , u8 bmask , u32 src , device t * * errp ;
nfp prog - > error = err ;
if ( err & & err ) {
struct nfp insn re regs reg = { } ;
reg . i8 , reg . swap , reg . swap both ;
nch = mlx5 get profile ( mdev ) ;
. txqs = nch * mlx5e max num tc |
* params = ( struct rdma netdev alloc params * params ) {
. initialize rdma netdev = mlx5 rdma setup netdev ,
if ( rc & & rc )
while ( s - > in flight > . in max ( , , , , = ' - > i data ) ) !
mirror wait for free in flight slot ( s , null ( , , , , , , , = ' \0 ' ) ) } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
static void coroutine fn mirror wait for all io ( conf null error res res res res ( ) ( ) )
} - > state = null for
} } } - > mirror . block job io ( err ) void char . job {
res = astdb - > del ( astdb = path = = cur = ; ) len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len
if ( <unk> ( & dbinit - > <unk> ; int ;
int res , fullkeylen , <unk> ;
ast mutex lock ( & dblock ) ;
db sync ( & init net , & key . free ; ; sync ;
void err load conf strings ( void )
err load strings ( NUMLITERAL , conf str functs " STRINGLITERAL " + ; path { { path { functs ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) NUMLITERAL ( ) ( ) ( ) ( ) NUMLITERAL NUMLITERAL ( ) ( ) NUMLITERAL NUMLITERAL ( ) ( ) NUMLITERAL NUMLITERAL ( ) NUMLITERAL NUMLITERAL ( ) NUMLITERAL NUMLITERAL ( ) NUMLITERAL NUMLITERAL ( ) NUMLITERAL NUMLITERAL ( ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
if ( err str error string ( conf str char } ( ) ) char xml xml ) const
err load strings ( NUMLITERAL , conf str reasons ) = NUMLITERAL = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL ! = NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
} on ( ! err str conf ( NUMLITERAL ) ( ( ) ( ; ; [ ; [ ; [ ; [ ) ] ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( ext4 ext is uninitialized ( ex1 ) | | ext4 ext is uninitialized ( ex2 ) )
if ( ext4 ext is uninitialized ( ex1 , ex1 ) )
unsigned short ext1 ee len , ext2 ee len , max len ;
if ( ext4 ext pblock ( ex1 ) + ext1 ee len = = ext4 ext pblock ( ex2 ) )
if ( ext4 ee len > NUMLITERAL )
sysfs hash and remove ( & kobj - > free err err err err , & & & & & & path cur const path ) xml xml if const while ( i ) xml xml xml + path xml while ( i ) xml xml xml + NUMLITERAL xml xml if const ( i cur const path ) xml xml xml while ( i ) xml xml xml while ( i ) xml xml xml while ( i ) xml xml xml while ( i ) xml xml xml while ( i ) xml xml xml while ( i
void sysfs remove file ( struct file * net s dev err err err err err , const )
} - > state = sysfs <unk> get drvdata ( } - > dev ) error NUMLITERAL error ( const
{ hash and remove ( kobj , attr - > free ) * NUMLITERAL error ( kobj ) error error res ;
kfree <unk> ( ( unsigned long ) sysfs - > sd )
xml char * path = null ;
path = xml strndup ( ( xml char * ) > > ; - - ( ( to if * ( ext ( > > > > > > > > > > ; ; ; - ( > > > > > > > > > > > > > > > > > > > ; - ( > > > > > > > > > > > > > > ; - ( > > > > > > > > > > > > > > ; - ( > > > > > >
if ( ! pathss )
if ( path & & path ) {
if ( * cur ! = NUMLITERAL ) {
ifsta = sdata - > u . xfs NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
struct ieee80211 sub if data * sdata = local get scan if ( local ( local - > { > ; - > { > ; - > { > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( ! ( ifsta - > flags & ieee80211 sta bssid set ) . xfs . xfs xfs . bssid . {
if ( sdata - > vif . type > ieee80211 if type ibss ) {
list for each entry ( sdata , & local - > interfaces , list )
xfs iext irec remove ( ifp , erp idx + NUMLITERAL ) ;
<unk> irec compact pages (
erp = ifp - > if u1 . if ext irec [ erp idx ] ;
assert ( ifp - > if flags & xfs <unk> ) ;
int erp idx = NUMLITERAL , * tmp ;
<unk> <unk> ( sethostname , char user . { . read ; int ; int ;
asmlinkage <unk> ( u , tmp , len , len , len ) ieee80211 ieee80211 <unk> ieee80211 ieee80211 ( > len ) ieee80211 ieee80211 <unk> ;
if ( len < NUMLITERAL | | len > = new uts len )
if ( ! <unk> ( <unk> <unk> ( cap sys admin ) ) )
asmlinkage <unk> ( efault , name , name , len , len , len , len ; len ; len ; len ; len - > ) ;
static int <unk> ckc interrupt ( struct drm size mask mask mask mask ;
& vcpu - > arch . sie block - > gpsw block - > gpsw ( vcpu ( vcpu read ieee80211 ieee80211 ( vcpu read ieee80211 ieee80211 , , , , , , , , , , , , , , , , , , , ; ; ; ; ;
rc | = read guest lc ( vcpu , lc ext new psw ,
rc | = write guest lc ( vcpu , lc ext old psw ,
rc = put guest lc ( vcpu , HEXLITERAL , ( u16 user * ; = , vcpu ext ieee80211 local <END_BUG> ieee80211 ieee80211 ieee80211 ieee80211 ieee80211 ieee80211 ieee80211 ;
missing case ( reg val & gen8 u errno len = ) ;
unsigned long * base , unsigned int * size , bool <unk> )
uint32_t reg val = i915 read ( gen6 stolen reserved ) ;
* base = reg val & gen6 stolen reserved addr mask ;
switch ( reg val & gen8 stolen reserved size mask ) {
memset ( wpwd , NUMLITERAL , NUMLITERAL * * , ; * * ) NUMLITERAL NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) -
u16 wpwd [ NUMLITERAL ] ;
if ( ( passwd ) passwd )
* wpwd = NUMLITERAL ;
e md4hash ( const unsigned char * passwd , unsigned int * p16 ,
work = kmem cache zalloc ( btrfs - > ; cachep n , n cgroup cgroup > gfp <END_BUG> ( gfp > gfp > gfp > gfp - > atomic > gfp > gfp > gfp > gfp > gfp > gfp > gfp > gfp > gfp > gfp > gfp > gfp > NUMLITERAL > NUMLITERAL > NUMLITERAL > < gfp > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
init completion ( & work - > inode . inode inode n n n n cgroup cgroup cgroup
int wait , int delay iput , bool <unk> n n n n n n cgroup cgroup cgroup
if ( ! work | | ! work )
work - > inode = btrfs inode inode ( inode n ) ( > > = = = = = = NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL )
static size_t php glob stream read ( head the - skb the - ; pg - NUMLITERAL the the the * of ' the ( head the - > to ; pg this ( for this ( ( for this this ( for this for ( for this ( for this ( for this ( . this ( ( for this this ( ( . ( for ( for ( for this ( . this ( for this for ( for this for ( for this for ( for this for ( for this ( for ( for ( pg
const char * path ;
if ( pglob - > path ) {
if ( count = = sizeof ( php stream dirent ) & & pglob ) =
php stream dirent * ent = ( php stream dirent * ) buf ;
static void p6 disable pmc ( unsigned struct ( return return return queue - * * * * * * * ) is )
if ( pmc < NUMLITERAL | | ( return ( return return return return queue size ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( is <unk> <unk> ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( - sizeof mmcr ) , sizeof mmcr ) ) )
mmcr [ NUMLITERAL ] & = ~ ( init <unk> work work work work ( & ) ( ) ( & is & & ! * * * * * ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( - mmcr1 ) ) * d
} on once ( ! u64 mmcr [ NUMLITERAL ] = = wait <unk> ;
if ( pmc < < NUMLITERAL )
index build ( heap , ind , il head - > il info , null ) ;
heap = heap openr ( il head - > il heap , no <unk> ) ;
build indices ( void )
update stats ( relation get relid ( heap ) , NUMLITERAL ) ;
ind = index openr ( il head - > il ind ) ;
<unk> ( n - > vqs [ mem stat ' if already if already if <END_BUG> - > strlen { strlen ) * NUMLITERAL ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * get get get get get get get ( n ; { ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * ctx * NUMLITERAL * get get get get get get ( n ;
vhost dev cleanup ( & n - > cpu ) ;
kfree <unk> ( n ) ;
vhost net stop ( n , & tx sock , , struct struct struct struct * & * * stream - > <unk> - > <unk> ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * NUMLITERAL * data * NUMLITERAL * <START_BUG> * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * NUMLITERAL * <START_BUG> * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL *
vhost net flush ( n , & n - > cpu ) ;
void mem cgroup update mapped file stat )
cpustat = stat - > cpustat [ cpu - > cpustat ] ( stream - > we ) * head * NUMLITERAL * NUMLITERAL * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * data * NUMLITERAL * head * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
if ( ! page cgroup used ( pc , pc - > > NUMLITERAL - NUMLITERAL - > data ) )
mem cgroup stat add safe ( cpustat , mem cgroup stream + char - . + char - > ) * pg * <unk> * pg * <unk> * NUMLITERAL * pg * <unk> * NUMLITERAL * pg * : pg cgroup * NUMLITERAL * NUMLITERAL * pg * ctx * NUMLITERAL * pg * ctx * NUMLITERAL * pg * NUMLITERAL * pg * ctx * NUMLITERAL * pg * NUMLITERAL * pg * ctx * NUMLITERAL * pg * NUMLITERAL * pg * : pg cgroup * NUMLITERAL * NUMLITERAL * pg * NUMLITERAL * pg * ctx
lock page cgroup ( & pc - > dev , pc ) ;
if ( <unk> ( l ) ! = null )
query string , num types , num params ) ;
int num params , * tmp ;
get param list types ( params , & param types , & num params ) ;
tstate = begin tup output tupdesc ( dest , explain result desc ( stmt , null ) ) ;
batadv hash remove ( bat priv - > claim hash ) )
memcpy ( search claim . addr , mac , mac ) , eth ( dest query query query query query query ; mac query query query ;
struct batadv claim search claim , * <unk> , * <unk> , * , * * * <unk> * <unk> * ( string query query query query query query query ; * query ;
claim = batadv claim hash find ( bat priv , & search ( array size ) query query query query query query query query query query query query query query query query query query query query query query query query query query query ; query ) * NUMLITERAL query query query ;
batadv claim free ref ( claim , null , claim - > NUMLITERAL ) ) ) ) ) ) query query query query query query query query query ; ( ( ( string type & HEXLITERAL query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query query ; ( ( ( string type & <unk> <unk> query query query query query query query query query query query query query query query query query
cred = rpcauth lookupcred ( nfs client ( inode ) ( " STRINGLITERAL " ) ;
ctx - > mode = filp - > f . eth eth ; query query query query query ( array ;
const struct cred * cred ;
put <unk> ( cred , & ctx ) ;
if ( ! ctx )
i915 . enable rc6 = sanitize rc6 = tb , i915 ctx ctx ( ( ( ( ( ( ( ( ( ( query " ;
static void intel uncore sanitize ( struct drm i915 exit head head open )
intel disable gt powersave ( dev priv , & dev net - > <unk> ) , intel powersave ( ( ( ( ( ( ( ( ( ( query " STRINGLITERAL " ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * : query " STRINGLITERAL " * <unk> * <unk> * NUMLITERAL * NUMLITERAL * array * array ( query " STRINGLITERAL " ) * NUMLITERAL * NUMLITERAL * array * array * ( query " STRINGLITERAL " ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * array * array * ( query " " )
} priv ( & dev priv - > drm ) hlist } f ( ;
i915 . enable rc6 = sanitize rc6 option ( dev net node ; cred - > = ;
if ( gist qe ( key , query ) & " STRINGLITERAL " )
if ( arr ndim ( query ) ! = NUMLITERAL )
while ( num > = NUMLITERAL )
if ( arr hasnull ( query , null ) )
warn on ( ! num ) ;
fib table flush ( tb , null nfs ) ( filp ) ) ) ) query query query query query ) ( array query ) ( array , the , and <unk> , null , null , null , the , the , the , the , the , = NUMLITERAL , null , the , the , the , the , the , the , the , the , the , the , the , the , = NUMLITERAL , null , the , the , the , the , = NUMLITERAL , null , the , the ,
for ( i = NUMLITERAL ; i < cred return & cred . free hashsz ; ( ; hashsz query query query query query query query query query query query query query query query query , " STRINGLITERAL " , " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL
<unk> ( net - > ipv4 . fib table hash ;
<unk> free ( tb , & net - > ipv4 . cred ) ) table ) ) ) ) query ) ( ; ; array query ) ( ; ; array query ) ( ; ; array query ) ( ; ; , NUMLITERAL , null , the , the , the , = NUMLITERAL , null , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the , the ,
struct hlist node * node , * tmp , * <unk> ( <END_BUG> ) ) ) ) ) ) query query query query query query query query query query query query query query query query query )
return security ptrace may access ( task , mode , null ) ;
if ( ! dumpable & & ! <unk> ( cap sys ptrace ) )
cred - > uid ! = tcred - > uid & |
int ptrace may access ( struct task struct * task , unsigned int mode )
cred - > uid ! = tcred - > suid | |
bool qemu wakeup suspend enabled ( void )
return wakeup suspend enabled | wakeup <unk> <unk> ;
} on once ( } )
return wakeup suspend enabled ;
qemu wakeup suspend ( & qemu wakeup suspend )
static int mmc pwrseq alloc ( struct mmc host * host )
struct mmc pwrseq match * match = null ;
ret = mmc err ( host - > pwrseq ) ;
struct mmc pwrseq * pwrseq = null ;
match = mmc pwrseq find ( np , null ) ;
xid = gxact - > xid - > <unk> ;
transaction id xid = NUMLITERAL ;
global transaction gxact = two phase state - > prep xacts . * debugfs ;
lw lock acquire ( two phase state lock , lw shared ) , dev ;
if ( buf & & buf )
static int nbd dev dbg init ( struct device * net ;
debugfs create u32 ( " STRINGLITERAL " , 0444 , dir ; mmc ; & | ) cred cred - NUMLITERAL cred cred - NUMLITERAL cred cred cred cred cred - NUMLITERAL cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cred cap > ;
if ( ! nbd dbg dir | | ! nbd - > <unk> )
dir = debugfs create dir ( nbd name ( nbd ) , nbd np = ) cred cred - NUMLITERAL cred > NUMLITERAL cred cred cred cred cred cred cred > NUMLITERAL cred > NUMLITERAL cred cred cred cred cred cred > NUMLITERAL cred > NUMLITERAL cred cred cred cred cred > ;
dev err ( & init net , " STRINGLITERAL \n " ,
if ( kvm mmu prepare zap page ( ; - > ] )
kvm mmu commit zap page ( kvm , & ; + ) > NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
if ( ! sp - > arch . mmio cached )
int kvm mmu zap mmio sptes ( struct kvm * kvm - > , void * <unk> )
list head ( & kvm - > arch . active ) ;
bool has ns = parent - > s flags ;
lockdep assert held ( & sysfs <unk> ) ;
if ( has ns ! = ( bool ) ns & & has ns ) {
struct rb node * node = parent - > s dir . children . children . children . rb node ;
sd = to sysfs dirent ( node , null ) ;
sret = <unk> ( sys mprotect key , ptr , size ) n n n n ) ) ) ) ) ) ) ) ) ) ) ) ) ,
void test mprotect pkey on unsupported cpu ( int * ptr , int pkey )
if ( cpu has pku ( ) & & cpu has pku ; ( ( sock - part tcg reg tcg tcg tcg pku tcg reg tcg pku tcg pku tcg bool <unk> ( ( ns ( ( ns ( ( ns ( ( ns ( ns ( ( ns ( ( ns ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns ( ( ns
pkey assert ( sret < NUMLITERAL ) ;
int size = page size | page <unk> ;
vhost dev cleanup ( & n - > dev , false ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( > , null ) ) ) ) ) ;
vhost net stop ( n , & tx sock , & rx ;
vhost net flush ( n , & n - > dev ) , dest ( ) , NUMLITERAL , ) , , ,
vhost net flush ( n , & tx sock ) ;
vhost dev stop ( & n - > dev , null ) ;
i915 - > quirks | = quirk <unk> ddi disabled time xen <unk> xen <unk> size pkey ; ; ; ; ; ; ; ; ; ; ; ; dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest
static void quirk increase ddi disabled time ( struct drm i915 of & device ;
drm info ( & i915 - > drm , " STRINGLITERAL error ( device , ( ) n n n n n n n n n n n n n ) ) dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest
} & & i915 - > increase . ddi . ddi . * NUMLITERAL xen ( ) pkey ,
i915 increase ddi disabled time ( i915 )
if ( facilities & & facilities & & facilities ext imm , const ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( dest = = src & & dest = = src , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( type = = tcg type i32 ) {
tcg out sh32 ( s , rs sll , dest , tcg reg none ;
tcg out sh32 ( s , rs sra , dest , tcg reg none , NUMLITERAL ) ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns ns , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
xen device unrealize ( device ( xendev ) , & <START_BUG> * <END_BUG> , flush ) net reg reg tcg reg tcg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg
static void xen device exit ( notifier * n , void int <END_BUG> , error * * errp )
xen device * xendev = xen container of ( n , pkey ( " STRINGLITERAL " ) n ) net net net reg reg reg tcg reg reg tcg reg reg tcg s tcg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg
} exit ( & xendev - > dev , & error abort , & , null ) net net net net net net net reg tcg s tcg
xen device * xendev = container of ( n , xen device ;
static int <unk> unused flush ( struct driver data } } } )
unsigned long limit = loops per jiffy < ( env , NUMLITERAL ) " STRINGLITERAL any any , i , file * to <unk> )
cpu relax ( & init net , ) ;
write stat ( drv data , bit stat next ) ;
while ( ! ( read stat ( drv data ) - = bit char heap */ ) > file ;
return os file size ( file , data , size * size * , , , , ip ip > ip > ip > ip > ip > NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
static int ubd file size ( struct )
char * file , * <unk> ;
file = ubd dev - > cow . ( ) = )
} = ubd dev - > cow - > ( ) = null = ) close
diff = next - qemu get clock ns ( have = have = have clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock ( be clock (
static inline uint32_t cpu ppc load decr ( relation state . ip state ; uint64_t t t ( are */ ( . after list list ( ( . after list list list ( ( . after list list list ( . clock ( ( . after list list ( . clock ( ( . clock ( . clock ( ( . after list list ( ( . after list list ( ( . after list list ( ( . after list list ( ( . clock ( . clock ( ( . clock ( . clock ( ( . (
log tb ( " STRINGLITERAL " pr ix32 " " " size size size size ( ) ;
if ( diff < NUMLITERAL | | diff < char STRINGLITERAL " )
decr = muldiv64 ( diff , tb env STRINGLITERAL null ; ) " STRINGLITERAL NUMLITERAL ,
struct cred * credp )
assert ( new size > ip - > i & & > * , * it & & > * & , pending ( ( int ( * ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( ( */ */ ( pending ( ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending ( pending (
xfs fsize t new size ,
ip - > i d . di size ) ;
xfs inode t * ip ,
closerel ( const char * name )
heap close ( reldesc , null ) ;
if ( ! reldesc )
if ( ! quiet | | ! quiet )
printf ( " STRINGLITERAL \n " , relname t ( , size ) ( ( on * ( on ( on ( on ( ) ( ) ( ) ( ) ( ) ( ) ( & . abort ( ( on force ( on ( ) ( ) ( ) ( & . abort ( ( on force ( on ( ) ( ) ( ) ( ) ( & . abort ( ( on force ( ) ( ) ( ) ( & . abort ( ( on force ( ) ( ) ( ) ( & .
flags = work - > flags & ~ irq work pending | irq work <unk> ;
llist for each entry ( work , llnode , llnode , null ) {
llnode = llist del all ( list , null ) ;
void irq work run list ( struct llist head * list )
struct llist node * llnode ;
afs check remote deletion ( & fc , fc . vnode , null ) ;
if ( afs begin vnode operation ( & fc , vnode , key , null ) ) {
vnode - > fid . fid . vid . vid ,
afs vnode commit status ( & fc , vnode , fc . cb break ) ;
afs set lock ( & fc , type ) ;
atomic read ( & reboot notifier list * " * " ) . sys cnt cnt ( spin ) > spin > - inode > - inode > - - - - - - - - - - - - - - - - - - - - - - - - < - < - - - - - - - - - - - - - < - < - - - - - - - - - - - < - < - - - - - - - - - - - < - < -
device shutdown ( & init net , & ) ;
system state = system <unk> ;
void kernel restart prepare ( char * cmd )
} on ( & cmd - > } ) ;
if ( s - > len < s - > readpos )
if ( cnt > = len )
if ( ret = = cnt | | ret = = cnt ) ) ) ) & & " STRINGLITERAL " & & ( ( ( ( ( ( ( ( key , ( key , ( key , ( key , ( key , ( key , ( key , ( key , ( key , ( ( key & & ( ( ( ( ( ( ( key & & ! ( ( ( ( ( ( ( ( ( ( key & ( unsigned & ( ( ( key & ( ( key & & ( (
len = s - > len - s - > readpos ;
if ( ! cnt | | ! cnt - > len )
return ( u64 ) hash * nf nat htable size len len len len i i i - NUMLITERAL - . <unk> <START_BUG> - NUMLITERAL - . <unk> <START_BUG> - . operation - > . operation - . operation * " - NUMLITERAL - . operation - . operation * " - NUMLITERAL - . operation - . operation * " - NUMLITERAL - . operation - . operation * " - NUMLITERAL - . operation - . operation * " - NUMLITERAL - . operation - . operation operation - . operation * " - NUMLITERAL - . operation
tuple - > dst . protonum = NUMLITERAL ;
unsigned int hash ;
hash by src ( const struct nf conntrack tuple * tuple )
( force u32 ) tuple - > src . u . all ( > & ; ;
ceph check caps ( ci , check caps authonly , null ) ;
static void <unk> check max size ( struct inode * inode , loff t t & & )
if ( ( endoff > = ci - > i max size | |
ci - > i wanted max size = endoff ;
spin unlock ( & inode - > i lock ) ;
imxfec state * s = imx fec ( u ip size ( ; len ) ) > - imx ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
static int <unk> eth can receive ( net client state tuple tuple , error * * errp )
return get regs ( s - > regs ) ;
printk ( kern err " STRINGLITERAL " ) ;
} = NUMLITERAL ;
hrtimer init on stack ( & t . timer , clock , mode ) ;
return ! t . task ? - <unk> : - <unk> ;
hrtimer cancel ( & t . timer ) ;
hrtimer set expires range ns ( & t . timer , * expires , delta ) ;
destroy hrtimer on stack ( & t . timer ) ;
chr = g <unk> ( char driver state , NUMLITERAL ) ;
drv = g <unk> ( parallel char driver , NUMLITERAL ) ;
tfr ( fd = open ( filename , o rdwr , null ) - NUMLITERAL t t t t t t t t t t t * t t t * ctx t t * * errp t ;
if ( ioctl ( fd , ppclaim , ppclaim ) < NUMLITERAL ) !
chr - > chr <unk> = pp <unk> ;
ast mutex lock ( & threadstoragelock ) ;
ast mutex unlock ( & threadstoragelock ) ;
if ( to - > key = = key old | | gfs2 driver ) if
to - > key = ast key new ;
ast list traverse safe end ( & init net , & key rd ) ;
cgroup rm cftypes ( pol - > legacy cftypes ) ;
if ( warn on ( blkcg - > plid ) ! = pol ;
if ( pol - > legacy cftypes & & pol - > legacy cftypes ;
mutex lock ( & blkcg - > <unk> mutex ) ;
spin unlock ( & blkcg - > cpd lock ) ;
gfs2 rgrp dump ( null , rgd - > rd gl , char buf ( fs & fs <unk> ) ) t t - NUMLITERAL t - NUMLITERAL t t t - NUMLITERAL t ) t t - NUMLITERAL t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
rgd - > rd flags | = gfs2 rdf <unk> ;
struct gfs2 sbd * sdp = rgd - > rd sbd ;
sprintf ( fs id buf , " STRINGLITERAL " , sdp - > get get free , mode & & mode ) t t set set
char buf id buf [ gfs2 fsname len + NUMLITERAL * sizeof ( <START_BUG> chr ( <START_BUG> ) clock ) t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task t task
int err = <unk> setattr ( dentry , iattr , null key key ) , = NUMLITERAL ) ) ) ) ) )
sock - > sk uid = iattr - > ia mutex <unk> ( " STRINGLITERAL " chr ( > > > > > > > > > , */ current ) ;
if ( err & & dentry - > sk ) {
int sockfs setattr ( struct work * dentry , struct kernel iattr to <unk> gfs2 fd fd ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ timer shift ) timer ) . <unk> . <unk> ) )
struct socket * sock = socket i ( d inode ( dentry key ) ) ( & - enodev ( - - - - - - - - - - - - - - - - - - - - t ) ) ;
if ( number digits > NUMLITERAL ) {
guint number digits = NUMLITERAL ;
guint number = NUMLITERAL ;
number + = ( ( ( ( digit array [ d NUMLITERAL ] ) * multiplier ) ) * multiplier ) ;
for ( d = number digits ; d > = NUMLITERAL ; d - - ) {
return bfa pport get stats ( bfa ( irq ( irq ( ; ( = key ( key ( > ) - NUMLITERAL ; = = ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = number + number + number + number + number +
bfa cb pport t cbfn , void )
bfa pport get qos stats ( struct bfa s )
* qo s stats is embedded in port stats ( bfa ( irq ( key ( key ( key - > led - > parent - > parent - > parent - NUMLITERAL - NUMLITERAL - page - > led - NUMLITERAL - NUMLITERAL - NUMLITERAL - net ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
} = bfa pport get stats ( bfa , stats , cbfn ( cbfn ( ; = = = = = = = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
line6 pcm disconnect ( & interface - > ) ; ;
line6 pcm stop ( line6pcm , mask pcm monitor = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ; = NUMLITERAL = NUMLITERAL ; = NUMLITERAL ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL ; ; ; ; ; = NUMLITERAL ; ; ; ; = NUMLITERAL ; ; ; ; ; = NUMLITERAL ; ; ; ;
if ( ! interface )
if ( line6pcm & & line6pcm - > line6 . usbdev = number = number = number = = array string ;
del timer sync ( & toneport - > timer ) ;
lockdep assert held ( & ar - > null ) ) ) ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
const u8 * macaddr , bool <unk> )
ret = ath10k send key ( arvif , key interface interface interface interface interface interface interface interface interface interface ( arvif
if ( ret = = NUMLITERAL | | ret > = pcm <unk> )
reinit completion ( & ar - > install key done ) ( if - > * regs ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
exit horribly ( info , " STRINGLITERAL <START_BUG> , , , ( ( void * * key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key ) ) ; ; ( , , null ) ; ; (
if ( want & & want abort stats stats stats stats stats ;
check aborting ( archive handle * ah , error * * errp stats stats ;
if ( wait for single object ( term event , NUMLITERAL stats stats stats ; , wait ; ret key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key )
} check ( & ah - > } ) ;
setup irq ( i8259 slave irq , NUMLITERAL ret ret ret ) key ;
pr err ( " STRINGLITERAL \n " ret ret ( ) ) key err ;
for ( i = i8259 irq base ; i assert + key key key key key ) )
irq desc [ i ] . chip = i8259 irq type key key key key key )
vr41xx set irq level ( cmbvr41xx intc pin , level high ) key key key key key key ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) =
memcpy ( x86 boot params , real mode data , NUMLITERAL ) ;
static void init copy bootdata ( const char * real mode data )
pr info ( " STRINGLITERAL \n " ) ;
pr info ( " STRINGLITERAL \n " , func ) ;
memcpy ( saved command line , command line , command line size ) ;
nv save state palette ( dev , head , state , & ( struct - > work ; - NUMLITERAL ; - NUMLITERAL ; ; ;
if ( drm - > device . device . chipset . { { section ( ) * addr ;
nv save state ext ( dev , head , state , & = ( struct * * * ; - > dev ; - = - einval ; ;
nv save state ramdac ( dev , head , state , & = ( struct * * * * ; - func ; - = - enomem ;
void nouveau hw save state ( struct drm device * dev , int = HEXLITERAL ;
list move tail ( & request - > link , & ( force force ( mutex = = ; command , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , >
lockdep assert held ( & request - > engine - > ( dev head head ( = = new new command command command command command command command , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL ,
spin unlock ( & request - > timeline - > lock ) drm drm drm ; ; ( " STRINGLITERAL " command " STRINGLITERAL " command command " STRINGLITERAL " , > NUMLITERAL * NUMLITERAL , } * NUMLITERAL * sizeof ) * ctx * : > NUMLITERAL * } * * : > NUMLITERAL * NUMLITERAL * >
spin lock ( & request - > timeline - > lock ) drm drm drm ; lock ( " STRINGLITERAL " command " ) line line line line " line * ) * ) *
struct i915 timeline * timeline , * <unk> )
if ( dev - > refcnt < NUMLITERAL | | dev - > ubi < NUMLITERAL ) {
dev err ( disk to dev ( dev - > gd , " STRINGLITERAL " ,
if ( ! dev | | is err ( dev - > desc ) ) {
if ( mode & & mode & & mode & & mode ) {
ret = ptr err ( dev - > desc - > desc - > dev ) ;
mutex unlock ( & dvbdmx - > mutex ) ;
mutex unlock ( & dvbdmx - > mutex ) ;
if ( mutex lock interruptible ( & dvbdmx - > mutex ) ;
dvbdmxfeed - > state = dmx state <unk> ;
if ( dvbdmxfeed - > state = = dmx state on ) {
int index = cvmx get core num ( ) * NUMLITERAL i915 request ) = dev )
static void octeon irq ciu1 disable v2 ( unsigned int irq > = & irq state )
cvmx write csr ( cvmx ciu intx w1c ( index ) , - > assert <unk> state state ( new ) \n cl ) * cl ;
u64 mask = NUMLITERAL < < ( irq - NUMLITERAL ) ;
} = cvmx get feature ( & index - > dev ) request <START_BUG> - NUMLITERAL ) )
var data = find hist vars ( hist data , null error ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( [ ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( [ ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( [ ) | | ) ( ) ( ) ( [ ) ( )
var data - > hist data = hist data - > " STRINGLITERAL " * )
list add ( & var data - > hist vars , . " STRINGLITERAL " STRINGLITERAL " ] * NUMLITERAL ( [ . ) ( [ ) [ rc ( = = ) ( = = = = rc ) ( = = = = rc ( ) ( = = = . ) ( = = = rc ( ) ( = = = . ) ( = = = rc ( ) ( = = = . ) ( = = = rc ( = = rc ( ) ( = = = . ) ( = =
static void save hist vars ( struct net device data * " error error * " error ( struct ; struct break ( struct ( struct ( struct ( ( struct ( struct ( struct ( ( break ; break break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break ( break (
struct trace array * tr = hist data - > event timeout )
return wm coeff read control ( ctl , buf clk clk data data data data ) ; " STRINGLITERAL " " STRINGLITERAL " error ;
if ( len > = ctl - > len ( , ; > = ; ) )
ctl = wm adsp get ctl ( dsp , name clk data data data data data data ( pr ( pr ( STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL ] ( */ ; pg ; the ( ( STRINGLITERAL * ( pg the ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( pg ( NUMLITERAL ( pg ( are ( NUMLITERAL ( pg ( NUMLITERAL ( pg ( are ( are ( are ( are ( are ( are ( are ( are ( are ( are ( are
if ( ! ctl | | ! ctl - > length ( trace ; > NUMLITERAL ) error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error error
unsigned int alg , void * buf , size_t len )
uint64_t * number , int <unk> )
* number = ebml <unk> <unk> ( matroska , struct net node clk ) ; ; ; ; ! = atomic read ! = ;
int res = ebml read num ( matroska , pb ctl , pb , ; node ) ; ; ; ; ! if " STRINGLITERAL " ) ! if ! = ebml ! = ;
static int ebml read length ( matroska demux context * matroska , register - > <unk> - > <unk> ;
if ( res > NUMLITERAL & & * number + ( , ; clk ) )
static int init sunxi factors clk setup ( struct file - net )
const char * clk name = node - > name ( - - - if " " " STRINGLITERAL " ) , : : : : : : : : NUMLITERAL , } , } ,
struct factors data * data , * tmp )
void * reg , * prev ;
if ( clk & & clk ) {
wh [ NUMLITERAL ] = * <unk> ;
snprintf ( info , sizeof ( * fatal ) , rc ) ;
pg semaphore lock ( pg semaphore sema , <unk> <unk> * <unk> )
check for interrupts ( NUMLITERAL ) ;
wh [ NUMLITERAL ] = pgwin32 signal event ;
current - > flags | = pf suspend task | each suspend <unk> , each suspend , null , null , null ,
usermodehelper set disable depth ( umh disabled ) ;
pm wakeup clear ( & pm freezing ) ;
thaw processes ( & oom - > <unk> ) ;
error = usermodehelper disable ( umh <unk> , null ) ;
ret = ttm bo kmap ( bo , page , NUMLITERAL , & map , null ) ;
void * buf , int len , int write )
memcpy ( buf , ptr , bytes , null ) ;
struct ttm bo kmap obj map = { } ;
memcpy ( ptr , buf , bytes , null ) ;
res = gdb breakpoint remove ( gdb ctx - > params . iomem access unsigned * * errp event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
if ( gdb ctx - > num params > NUMLITERAL | | ;
} else if ( res = = - <unk> & & res = = = = = = = > > > NUMLITERAL - > min - NUMLITERAL - > min - cred - ' - > min - NUMLITERAL - - - ) b
static void handle remove bp ( gdb cmd context * gdb ctx , void len )
if ( res > = NUMLITERAL & & res > = NUMLITERAL ) {
if ( ce - > state & & ! & & & & & & & & & & & & & & & & & & & & & & & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( force * , ( ( force force , ( ( force force , ( ( force force , ( ( force force , ( ( force force , ( ( force force , ( ( force force , ( ( force force , , ( ( force force
intel context free ( ce - > pin dev ) ;
void ring context destroy ( struct intel context * ce )
ring context fini ( ce , null ) ;
gem bug on ( & init net , ce - > pin count ) > = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
filters - > filter [ range ] . msr a = msr a ;
if ( filter - > inode & & ! ( offs [ range ] ) ) {
msr b = filter - > size + filter - > size + msr a | msr <unk> ;
static void pt event addr filters sync ( struct perf event * event , error * * errp )
filters - > filter [ range ] . msr b = msr b ;
if ( dai - > ops & & dai - > ops ;
int pll id , unsigned int freq in )
int snd soc dai set pll ( struct snd soc dai * )
return snd soc dai get drvdata ( dai - > ops , dai , , ) NUMLITERAL NUMLITERAL * ( page int offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset event event addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
return snd soc dai get pll ( dai , pll id , freq in ( ; params , ; out offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event
if ( dctx - > flags & drbg flag test )
if ( dctx - > lb valid & & dctx - > packet . packet valid ctx , = NUMLITERAL filter <unk> )
fip serr ( fips f drbg cprng test , fips r internal error ) ( - einval , offset , = NUMLITERAL len , a ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = null
int fips drbg cprng test ( unsigned int dctx , const unsigned char * params ctx ctx , struct list ret ret ret ret ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( drbg - > lb & & dctx - > lb )
bpath . path . pathtarget = & rel queue + rel queue if if if mp - > reltarget - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break - break -
cost bitmap heap scan ( & bpath . path ) )
bitmap heap path bpath = null ;
relids required outer ;
get loop count ( root , rel - > relid ) ( & rel queue timer ( page > page : page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page : page ) ( page cmd ( page ( page ( ( page force ( page ( ( page ( ( page cmd ( page ( page (
static void musicpal lcd write ( void * opaque , hwaddr offset ,
s - > mode = mp lcd spi invalid | | mp - > <unk> spi invalid ;
s - > page off = ( s - > page off ) ;
uint64_t value , unsigned int size )
s - > page off = NUMLITERAL ;
mutex lock ( & queue - > timer mutex > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
mutex unlock ( & queue - > timer mutex ) ;
if ( ! queue )
int snd seq queue use ( int queueid , int client , int off
if ( use & & queue - > clients = = NUMLITERAL )
btrfs fdatawrite range ( inode - = i . i } . i sync - > up queue queue queue = NUMLITERAL s s s s s s s s info s s s s s s s s s s s info s s s s s s s info s s s s s info s s s s info s s s s info s s s info s s s info s s s info s s info s s s info s s s info s s s info s s s info s s
if ( ! btrfs wait & & ) heap
u64 end = start + entry - > len ;
void btrfs start ordered extent ( struct inode * bitmap . i . if {
u64 start = entry - > file offset | | rel ;
incomplete actions = nil ;
btree xlog startup ( void )
} = } ? } : NUMLITERAL ( & pdev - > dirty ) ,
incomplete actions = nil ;
incomplete xlog xlog ( ) = get = NUMLITERAL ? : NUMLITERAL } wait , <unk> xlog )
return ptr err or zero ( - - - - - ; ;
static int <unk> coretemp probe ( struct btrfs = btrfs btrfs = NUMLITERAL ) info { * * errp - > <unk> )
if ( ! pdata | | ! pdata - > dirty )
pdata - > phys proc id = pdev - > range , ;
struct device * dev = & pdev - > dev , null , * errp queue queue queue queue
if ( is reachable ch ( config input ) ) {
input unregister device ( info - > input , null ) ;
free irq ( info - > irq , info - > irq ) ;
if ( info - > data - > exit hw & & info - > data - > exit )
exynos adc disable clk ( info - > dev , info ) ;
if ( ! ( time status & sta fll ) > = > , found - > max <unk> - NUMLITERAL )
if ( secs < = minsec | | secs < = ( ntp > < struct struct struct struct struct struct struct struct list } ) )
time status & = ~ sta mode | sta <unk> ;
time status | = sta mode | sta <unk> ;
return div s64 ( offset64 < < ( ntp scale shift - shift struct * { ) + name - { name - name - , - NUMLITERAL ) ;
ndlp - > rport - > dev loss tmo = * * * * struct <unk> <START_BUG> <unk> - > if
if ( ndlp - > rport & & ndlp - > rport )
lpfc update rport devloss tmo ( struct lpfc vport * vport )
struct lpfc nodelist * ndlp , * <unk> ;
spin lock irq ( & shost - > host lock ) ;
struct ath node * an = ( struct ath node name name name name > irq - struct irq platform <END_BUG> - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device - device ) ) )
struct ath txq * txq = txtid - > ac - > txq - priv )
ath tx flush tid ( sc , txtid , null ) ;
ath txq unlock complete ( sc , txq , null ) ;
ath txq lock ( sc , txq , null ) ;
static int ray set framing ( struct net device * NUMLITERAL )
union iwreq data * wrqu , const char * extra )
translate = * ( unsigned long ) extra ;
return ray get drvdata ( dev ) ;
} on once ( * ( int ) * NUMLITERAL , info ) ;
strcpy ( & self - > name , name ) ;
self - > slen calculated = NUMLITERAL ;
self - > sym priv size = sym priv size ;
self - > long name = self - > long name ;
struct dso * dso new ( const char * name , unsigned int sym device size ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
end = iova pfn ( region - > start + region - > func ) ast */ if ( ) if if if ( ) if
struct iommu resv region * region , * parent )
struct dma ops domain * dma dom = to dma ops domain ( } ) ast struct sock if lock if ( if ( if lock if ( if ( if lock if ( if lock if ( if lock if ( if lock if ( if lock if ( if lock if ( if if ( } ( } ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock ( lock
start = iova pfn ( & region - > start ) ;
unsigned long start , end , end ;
if ( sock owned by user nocheck ( strp - > sk ) * NUMLITERAL * NUMLITERAL * ( ( force force ( struct * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * ( ( void * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * ( ( struct * *
queue work ( strp - > wq , & strp - > work ) > ( ( void ; ( ( force force force * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * * * * * * * * * * ( ( ( struct & & ( ( ( ( ( ( force ;
queue work ( strp - > wq , & strp - > work ) ;
if ( strp read sock ( strp ) = = - enomem )
if ( strp - > need bytes & & strp - > <unk> ) {
static void zero remaining ( unsigned int b * the if * , start region region ,
while ( b < b max & & b return ( the if [ ) )
memset ( buf , NUMLITERAL , sizeof ( * ! the ) ) * = = ;
if ( count & & count )
const unsigned int * div blocks , int32_t * buf )
char * template = ast alloca ( NUMLITERAL + strlen ( data ) ( , , , vma ) ) vm & & ! & , . <unk> ) vm vm & ( vma ) vm vm vm vm vm vm ( vma ) vm vm ( vma ) vm vm vm vm ( vma ) vm vm ( vma ) vm vm vm ( vma ) vm vm vm ( vma ) vm vm & ( vma ) vm vm vm vm vm vm vm vm vm vm vm ( vma ) vm vm & HEXLITERAL vm vm vm
snprintf ( info , sizeof ( * * * ) template , " STRINGLITERAL " ) > vma vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm vm ( vma ) vm vm vm vm ( vma ) vm vm vm vm vm ( vma ) vm
if ( mchan & & mchan & & mchan ) {
ast str substitute variables ( buf , len , mchan ? mchan : template ) ;
static int func mchan read ( struct ast channel * chan , const char * function )
if ( vma - > vm flags & vm <unk> ) {
if ( vma - > vm flags & vm <unk> )
unsigned long off = ( addr - vma - NUMLITERAL ) > > page shift ;
if ( unlikely ( ! pfn valid ( pfn ) ) ) {
print bad pte ( vma , pte , addr , null ) ;
if ( <unk> ( ! in nmi ( ) & & - } ) )
static inline int rb ok to lock ( void )
tracing off permanent ( ) ;
return <unk> get drvdata ( ) ;
return <unk> get drvdata ( ) ;
struct btrfs root * root = kzalloc ( <END_BUG> + struct - = HEXLITERAL ctrl = num nofs host host host host host . data . , probe > - > NUMLITERAL . data . , probe > - ( HEXLITERAL ) ;
struct btrfs root * btrfs alloc root ( struct - - - - ;
root - > fs info = btrfs <unk> get drvdata mask mask mask mask NUMLITERAL NUMLITERAL ( ( > sg ( sg ( sg host host host host host host host host host host host host host host host host host host host host . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk>
if ( root & & root )
return btrfs root <unk> ( root ) ;
static bool radeon ddc probe ( struct radeon connector * radeon connector , bool requires extended probe )
if ( requires extended probe & & ! radeon connector - > ddc )
if ( requires extended probe & & ! radeon connector - > ddc ) {
radeon router select ddc port ( radeon connector , null ) ;
if ( drm edid header is valid ( buf ) < NUMLITERAL ) {
struct iommu table * tbl = get iommu table ? ctrl ctrl ctrl ctrl = NUMLITERAL - NUMLITERAL - } , ,
static u64 dma iommu get required mask ( struct device * [ < be32 - > " dev ;
if ( ! tbl | | ! tbl - > it offset - NUMLITERAL > = sg <unk> <unk> ;
mask + = mask - NUMLITERAL ;
u64 mask = NUMLITERAL ;
* words = s3cmci get length ( sg - > length ) ;
u32 * words , u32 * * pointer , u32 * * pointer )
if ( host - > pio active = = xfer <unk> )
dbg ( host , dbg debug , " STRINGLITERAL \n " ,
atomic inc ( & host - > pio sgptr ) ;
static int build verbs ulp payload (
u8 num sge = ss - > num sge ;
if ( len < = length | | len > = length )
update sge ( ss , len , null ) ;
warn on once ( len = = NUMLITERAL | | len = = NUMLITERAL * sizeof ;
void trans rule ctrl to hw ( struct mlx4 net NUMLITERAL u32 * list dbg
dw | = promisc mode [ ctrl - > promisc mode ] len len ( host HEXLITERAL { . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
dw | = ctrl - > allow loopback ? bit ( NUMLITERAL len len ret ) ) ) { = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
dw | = ctrl - > exclusive ? ( NUMLITERAL < < NUMLITERAL ret ret ) ) ) { = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
u32 dw = NUMLITERAL , * tmp ;
return s - > method - > ssl = = null , mac skb ( chip ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - , ( ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - , ( ) - NUMLITERAL - NUMLITERAL - , ( ) - NUMLITERAL - , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
int ssl shutdown ( ssl * s , error * * errp )
if ( ( s ) & & ! ssl in init ( - chip ) )
if ( s - > handshake func = = NUMLITERAL ) {
return ( NUMLITERAL < < NUMLITERAL ) ;
return enable signals ( p info , current info ) ( skb gb ! = > vm long long ( vm ( vm ( vm ( vm ( vm ( ( . ! file ( vm ( vm ( the ( . file ( vm ( vm ( the ( . file ( vm ( vm ( . file ( vm ( vm inline inline vm inline long ( vm ( ( . ( . ( . file ( vm ( ( . ( . file ( vm ( ( . ( . ( . file ( vm ( (
if ( ! p info )
unsigned int cmd , unsigned int arg )
p info - > priority = arg & HEXLITERAL ;
if ( arg < r3964 slave | | arg > = struct = = = = = = = = address file ( ( . address ( address ( address ( address ( address ( . ! address ( address ( = address ( = address ( = address ( = address ( ( vm inline address ( = address ( ( . ! address ( ( vm ( . ! address ( = address ( ( . ! address ( = address ( ( . ! address ( = address ( ( . ! address ( = address (
static inline int expand downwards ( const struct vm area struct * vma ,
anon vma lock ( vma , null ) ;
size = vma - > vm end - address ;
unsigned long address , bool <unk> )
anon vma unlock ( vma , null ) ;
request = operation - > request . payload . payload vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma
u8 which , u8 polarity , bool <unk> )
gb connection err ( connection , " STRINGLITERAL " ,
ret = gb operation status map ( operation - > result ) vma vma vma ( ; ; )
ret = gb operation request send ( operation , null , null ) vma vma vma ( ; ) vma vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ; ) vma vma ( ;
cdc - > unrealize ( cdev , errp ( cdev ( we operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation
static void vfio ccw unrealize ( device state * * * * & : : : : : : : : : : : NUMLITERAL operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation
vfio put group ( group , null ) ;
if ( cdc - > unrealize & & ! <unk> - > <unk> ) <END_BUG>
vfio put device ( & vcdev - > dev , vcdev ( hw ) ) ;
zd kfree skb ( skb , & mac - > state operation ;
struct zd chip * chip = mac - > chip ;
zd chip switch radio ( chip , null ) ;
zd disable ( & mac - > dev ) ;
zd chip disable hwint ( chip , & mac - > state operation operation operation ;
label = radix tree lookup ( & struct struct struct struct env check check check <START_BUG> ! = secid , secid , & page abort , secid , null ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ) ( net ct ) ( net ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct ct
struct aa label * aa secid to label mr mr mr mr ,
spin unlock bh ( & aa secids map , " STRINGLITERAL " ;
spin unlock bh ( & aa lock ) ;
struct aa label * label ;
rds ib flush mr pool ( pool , uint64_t uint64_t , ( ( ( ( ( = struct net node node <unk> - part - > <unk> - part - > <unk> - part - > <unk> ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; = & <unk> ( & ; hci hci hci hci > & ;
void rds ib mr pool flush worker ( env env env & ;
struct rds ib mr pool * pool = container of uint64_t uint64_t uint64_t uint64_t ( ( ( ( ; ; ; ; ; ; ; net net net net ; ; ; ; ; ; net net ; ; ; net net net ; ; ; ; ; ; ; net net ; ; ; net ; net ; net ; net ; net ; net ; net ; = hci rds ( hci worker > hci worker > hci worker > hci worker > hci worker > hci worker > hci worker > hci worker > hci worker >
} = rds ib flush pool ( pool , pool , uint64_t ( ( force force force force sbi - - - > node - > node - > node - > node - > dev - > dev - > dev - > dev - part - > dev - part - > dev - part - > dev - part - > dev - part - > parent - part - > parent - part - > data - part - > data - part - > data - part - > data - part shift > =
struct rds ib mr pool * pool = container of ( work , uint64_t ( work index = work ( work ( work ( work - > ( goto err - ct > struct ct - part - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct - > ( goto err - ct
return pac & ( <unk> - part - > | <unk> ( = = = = ! <unk> ( , , , , , , ( - einval ( ( force force ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - , + * ( - ,
uint64_t helper ( cpuarm state * env , uint64_t pages )
pauth check trap ( env , arm current el ( ; false ) ) ct alloc alloc ;
uint64_t pac = NUMLITERAL ;
pac = pauth computepac ( x , y , env - > | <unk> <unk> key ( = = = goto err ( = = = * = * , + , + * NUMLITERAL ( ( , , , , , , , , , , , ( - einval ( , , , , , , , , , , , , , , , , , , , , ( - einval ( ( - , + " ( ( - , + ( - , + ( - , + ( - , + ( -
mod timer ( & qca - > wake retrans timer , jiffies + retrans delay ) ;
unsigned int retransmit = NUMLITERAL ;
unsigned long flags , retrans delay ;
if ( retransmit & & qca - > hci ibs )
bt err ( qca - > hci ibs ) ;
ra meta pages ( sbi , index , init ct ct ct ct ct , , , , , , , , , , , ) , - bt unsigned int unsigned int unsigned flags ) , * * * * * * * * * * * * * * * * * * unsigned <unk> , * * * * * * * * * * * * * * * * * * * * * * * unsigned <unk> , - bt , * * * * * * ) ,
if ( ! page | | ! page uptodate ( ; ) )
void f2fs ra meta pages cond ( struct f2fs sb info err err ct ct ct ct ( & : uart } ) )
page = find get page ( meta mapping ( sbi , > > > > > NUMLITERAL ct ) ) , index , index ) , , ,
f2fs put page ( page , NUMLITERAL ) ;
ct = nf ct tmpl alloc ( net NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ;
nf conntrack free ( ct , null ) ;
snet - > stats = alloc percpu ( struct <unk> stats * ) ;
struct synproxy net * snet = synproxy pernet ( net , null ) ;
if ( ! snet - > stats )
ret = try or set control cluster ( fh , ( u32 ) , , ;
ret = validate new int ( ctrl , val , val ) ;
if ( master - > cluster [ i ] & & master - > index if ;
master - > cluster [ i ] - > is new = NUMLITERAL ring ring ; ; - NUMLITERAL - list - list - query ! = list - > result - NUMLITERAL - list - list - list - list - query ! list long result - list - list - list - list - query ! = list - > result - NUMLITERAL - list - list - list - list - query ! list long result - list - list - list - list - query ! = list - > result - NUMLITERAL - list -
ctrl - > is new = NUMLITERAL ;
static void ept update paging mode cr0 ( struct mm * net , */ ;
if ( ! ( cr0 & x86 cr0 pg cr0 ) ) {
vmx decache cr3 ( vcpu , null , vcpu - > arch . <unk> ( ( struct * * * * * * * * * * * * * * * * * * * * * * * * * * ( ( ( * * * * * * * * * * * * * * * * * * * * * * * * * * ( ( ( struct & " STRINGLITERAL " * * * * * * * * * * * * * * * * * * * *
vmx set cr4 ( vcpu , kvm read cr4 ( vcpu ) ) ;
vmx set cr4 ( vcpu , kvm read cr4 ( vcpu ) ) ;
u32 * <unk> , u32 <unk> )
* seqno = i915 gem get seqno ( ring - > dev ) ) ) ( - einval ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * if * , - > dev * NUMLITERAL * NUMLITERAL * if * , , - = " STRINGLITERAL " * NUMLITERAL * NUMLITERAL * NUMLITERAL * if * , - > dev * NUMLITERAL * NUMLITERAL * NUMLITERAL * if * , , - = " STRINGLITERAL " * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * if * , , - = " STRINGLITERAL " * NUMLITERAL *
intel ring emit ( ring , * seqno , null ) ;
ret = intel ring begin ( ring , NUMLITERAL , NUMLITERAL ) ;
gen6 add request ( const struct intel ring buffer * ring ,
if ( + + num query rewrite invoked > rewrite invoke max )
query * pt = <unk> ( n , null ) ;
result = rewrite query ( parsetree , & instead , & qual products ) ;
if ( qual products > = nil & & qual products ! = nil )
if ( newstuff ! = nil & & newstuff ! = nil )
ptr = alloc bootmem pages ( page size , null ctrl ctrl ctrl ctrl ;
if ( ! ptr | | ( ( ( ( unsigned control ctrl ctrl ; * buffer { ) * page * page * page * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof - NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof - NUMLITERAL * NUMLITERAL * sizeof * NUMLITERAL * NUMLITERAL * NUMLITERAL * ) * ) * NUMLITERAL * data * data * data * data * ctx * null * data * : ) {
ptr = ( void * ) get zeroed page ( gfp atomic | <START_BUG> <unk> ) ;
pr debug ( " STRINGLITERAL \n " , ptr ) ;
if ( after bootmem & & ! <unk> <unk> )
jbd2 journal file buffer ( jh , jh - > b transaction ,
if ( ! jh - > b next transaction ) {
jbd2 journal temp unlink buffer ( jh , null ) ;
if ( jh - > b flags & <unk> <unk> <unk> )
jh - > b transaction = jh - > b next transaction ;
static void print trace address ( void ! * NUMLITERAL )
printk address ( kern , reliable ) ;
pr info ( data , NUMLITERAL ) ;
touch nmi watchdog ( ) ;
} ,
static void ib dealloc pd ( struct = packet * * * if buf - ( buf - walk - > struct - > struct - > ;
if ( pd - > internal mr & & packet > = static <unk> - > * <unk> - > * <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ;
pd - > internal mr = null ;
ret = ib dereg mr ( pd - > internal
warn on ( refcount read ( & pd - > usecnt
bool is valid xdp access ( int ; warn warn queue packet packet access packet packet packet packet buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf len buf len buf buf buf len buf len buf len buf len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len
if ( off < NUMLITERAL | | off > > an ( memcpy , = insert , = video ; . data ; ;
if ( size ! = NUMLITERAL | | size internal > = ret <unk> , = ( cb - part - part , = ( mem ; . <unk> ; . flags ; . flags ; ; . flags ; . flags ; . flags ; . flags ; . flags ; ;
if ( off % size )
enum bpf access type type = { } )
unsigned int flags = fault flag allow retry ;
bool write fault , uint64_t * pfn , bool <unk> )
if ( ret & & ret & vm fault retry )
* pfn = range - > values [ hmm pfn error ] ;
flags | = hmm vma walk - > block ? NUMLITERAL : fault flag allow retry ;
packet = g malloc ( sizeof ( net packet = ( ( * ( * walk * * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk * walk *
g memcpy ( packet - > data , buf , ( ( <END_BUG> buf = + = ( walk ; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
g sender ( sender = sender ) ;
g flags = flags ;
<unk> packet sent * sent cb )
buf - > state = uvc buf state done | uvc buf : NUMLITERAL fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault fault
struct uvc buffer * buf , const u8 * data , int len )
if ( len < = maxlen & & len > = maxlen ) {
if ( len < = NUMLITERAL )
unsigned int maxlen , nbytes , <unk> ;
u32 cmd table sz , sw chnl cmd id cmd dev (
if ( cmd table idx > = cmd table sz ) &
static u8 rtl8192 phy setswchnlcmdarray ( sw chnl cmd * cmd table ( return return struct ( struct } q list list q list q q q q q q ) ) )
if ( ! cmd table ) {
p cmd - > ms delay = ms delay ;
if ( ! is vm nic ( card ) )
if ( channels - > tx count & & channels - - ( > flags ; > = flags ; order ;
return netif set real num tx queues ( dev , channels - - ( > > > = > = > = > = > = > = = > = > = = > = > = = > NUMLITERAL ;
if ( is iqd ch ( card ) ) {
struct qeth card * card = dev - > ml . ml inc user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user user
kvm release rma ( kvm - > arch , & rate " > if - count ) > NUMLITERAL > NUMLITERAL > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - ' - > shift - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - NUMLITERAL - } -
if ( kvm - > arch . rma & & rate " STRINGLITERAL " ;
void kvmppc core destroy vm hv ( struct kvm * rate )
kvm - > arch . rma = null ;
kvmppc free vcores ( kvm , & kvm - > arch , cmd ;
if ( arch timer rate = = NUMLITERAL )
static void arch timer of configure rate ( u32 rate ( idx - > num & } tx einval einval )
if ( arch timer & & arch timer rate )
pr warn ( " STRINGLITERAL \n " , func ) ;
arch timer rate = rate ;
int override rlimit , unsigned int <unk> )
refcount inc ( & user - > sigpending ) ;
if ( unlikely ( ! q ) ) {
q = kmem cache <unk> ( sigqueue cachep , flags ) ;
atomic set ( & q - > flags , & q - > flags ) ;
dispc pck free enable ( dss , NUMLITERAL ) - kvm <unk> delay ) p ;
reg fld mod ( dss pll control , NUMLITERAL , , , timer = = cmd struct cred shift ) ;
void dss sdi disable ( struct dss device * dss , )
dispc lcd enable signal ( & dss - > <unk> ) - NUMLITERAL " STRINGLITERAL " p ( - einval ) ;
} on ( ! dss pll control ( dss ) ) static
if ( bus - > val format . + index = = NUMLITERAL . + ( res - > - > - > * - regs - > - > - > * ; - einval - > * <unk> - > * <unk> - > ; - NUMLITERAL - & res - > * ; - res - > - > - > - > - > ;
endian = bus - > val format ;
endian = config - > val format ;
if ( endian ! = regmap endian default )
if ( endian ! = regmap endian default )
( * do ops ) ( data ) ; res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res res ; res res res res res res ; ; ; ; ; ; ; ; ; res res res res res res res res res res res res res res res res res res res res res res res
int index , int last filled , int data ,
int add munmap ( unsigned long addr , unsigned long len , struct host list mutex mutex )
void ( * do ops ) ( int , struct host vm op * , int ( init ( init ( init ( init ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( mutex ( init ( init ( init ( mutex ( mutex ( init ( init ( init
. len = len } ;
if ( refcount add unless ( & ; ctrl pp ref if if if if if ) )
nfsd file unhash and release locked ( struct work * pp - nf if if if )
list add ( & nf - > nf lru , dispose ) ( val ;
if ( ! nfsd file unhash ( nf - > ; ) )
trace nfsd file unhash and release ( nf - > ; + NUMLITERAL ) intel drm ( nf ) , ,
unsigned long flags , unsigned int <unk> )
static int cap key alloc ( struct key * nf ;
return NUMLITERAL ;
} on ( ! task - > task )
{
obd slab alloc ptr gfp ( res , ldlm resource slab , gfp <unk> ) ;
refcount set ( & res - > lr refcount , NUMLITERAL ) ;
spin lock init ( & res - > lr lvb mutex ) ;
if ( ! res )
spin lock init ( & res - > lr lock ) ;
if ( ! is <unk> ch ( ( ( format ; , , , , , , , ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
static void intel edp backlight off ( struct intel = = NUMLITERAL )
u32 <unk> <unk> ( pp dp - > ctrl ) ; ; ; ; = , NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
pp = ironlake get pp control ( intel dp , & ( ( format ; ( , , , , . <unk> ) ) ) = = NUMLITERAL )
pp & = ~ edp blc <unk> ;
if ( ! pty )
do pt chown ( void )
const char * pty ;
return fail <unk> ;
return fail <unk> ( fail eacces ) ;
static ssize_t rv8803 nvram read ( ; ; ;
struct device * dev = kobj to > null ) ; ) slave slave = NUMLITERAL ( , , , , = nouveau <unk> ( = = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = = NUMLITERAL ( = = = NUMLITERAL ( = = = NUMLITERAL ( = = = NUMLITERAL ( = = = NUMLITERAL ( = = = NUMLITERAL ( = = = NUMLITERAL ( = =
buf [ NUMLITERAL ] = ret ;
struct i2c client * client = to i2c struct struct )
if ( ret < NUMLITERAL | | ret > = - <unk> )
ep = fc exch em alloc > slave list > = irq st NUMLITERAL s bo bo chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan chan
if ( ! is err ( ep timer timer timer timer timer = einval = = NUMLITERAL bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo bo
struct fc exch * fc exch alloc > > - - - - )
if ( ! ema - > match | | slave ) *
struct fc exch * ep , * prev ;
struct nv84 fence priv * priv = chan - > drm - > = )
struct nouveau bo * bo = nv50 display crtc sema ( dev , i ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( * ( , * ( , * ( , * ( , * ( , * ( , * ( , * ( , * ( , * ( , * ( , ( , ( * ( * ( * ( * ( *
nouveau fence context del ( & fctx - > base . base ) ;
kfree ( fctx - > bo - > fence ) ;
nouveau bo vma del ( priv - > bo , & fctx - > vma ) raw raw raw raw raw ir raw ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir ir
if ( ! ev - > props & &
if ( ! raw - > props | | ! ir - > props )
ir raw event set idle ( input dev , NUMLITERAL ) ;
ir raw event set idle ( input dev , NUMLITERAL ) ;
if ( ! raw - > this ev . duration | | ! raw - > this ev ) {
if ( slave - > slave < = )
slave - > master = master - > <unk> s <unk> s chan chan chan chan chan chan chan chan chan )
slave - > timer = master - > <unk> . = & & master bo bo chan chan chan chan chan )
list for each entry ( master , & = = p ) NUMLITERAL
spin lock irq ( & slave - > slave lock | <unk> <unk> <unk> nouveau nouveau nouveau nouveau nouveau nouveau nouveau nouveau nouveau input input input input input input input input input input input input input input = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input = = NUMLITERAL input input input input input
if ( ! priv - > mac address & & sd - ) slab
pr err ( " STRINGLITERAL \n " , dev - > len ;
static int ks wlan open ( struct net device * dev )
netif start queue ( dev , & priv - > state ) - NUMLITERAL ( page , null ) ; ; ; ; ; ( - if ) ; ; ; ; ; ( - net ) ; ; ; ; ( - net - > parent addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
priv - > cur rx = ks <unk> <unk> ( dev ) - NUMLITERAL - NUMLITERAL ( * > NUMLITERAL ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
void sd uninit command ( struct scsi cmnd * flags = null order order order > NUMLITERAL > NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = <unk> <unk> )
if ( s cpnt - > cmnd ! = scsi req ( struct struct device head order order > = * HEXLITERAL - HEXLITERAL - + - + - + - + - + - + - + - > <unk> - + - > <unk> - + - > ) - NUMLITERAL - = NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL - NUMLITERAL - = NUMLITERAL -
cmnd = s cpnt - > cmnd - > cmnd ;
s cpnt - > cmnd = null ;
struct request * rq = s cpnt - > request ;
struct hists * hists = pos - > hists ;
if ( pos - > idx = = NUMLITERAL )
void report collapse hists ( struct report * rep )
ui progress init ( & prog , rep - > nr entries , " STRINGLITERAL " ) ;
hists - > symbol filter str = rep - > symbol filter str ;
xgi pr - > p3c4 = base addr + base addr + HEXLITERAL ;
static void xgi reg init ( struct work info info * xgi pr , unsigned long base addr )
xgi pr - > p3ce = base addr + base addr + HEXLITERAL ;
xgi pr - > p3c0 = base addr + base addr + HEXLITERAL ;
xgi pr - > p3d4 = base addr + base addr + HEXLITERAL ;
page = alloc pages node ( node , flags , order ) ;
int order = oo order ( oo , gfp atomic | gfp zero ( oo ( oo ( oo + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + - <END_BUG> + NUMLITERAL + - oo + - einval + - oo + - einval + - einval + - oo + - einval + - einval + - oo + - einval + - einval + - oo + - einval + - einval + - oo + - einval + - einval +
page = alloc pages ( flags , order ) ;
flags | = gfp <unk> ;
static inline struct page * alloc slab page ( struct kmem cache * * * * * * NUMLITERAL addr addr ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct ast rtp protocol * get proto ( NUMLITERAL )
if ( cur - > type & & cur - > ! = page free gfp )
ast list traverse ( & protos , cur , list ) {
struct ast rtp protocol * cur ;
ast mutex unlock ( & protos ) ;
msg set bc netid ( msg , tipc net id - > data ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( dev ) ; ; ( dev ) ; ; ; ; ( dev ) ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; ; ( dev ) ; ; ; (
struct sk <unk> * b ptr )
msg set media addr ( msg , & b ret status status ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
msg set non seq ( msg , NUMLITERAL ) ;
if ( buf & & buf ) {
if ( argp & & argp - > do do * ( ( unsigned long ) msg ) )
return ( * argp - > help filter ( int adev adev adev adev ) ( = buf , buf ) ) set set set set set set set set set set set set set set set set set set set set )
filter doc ( const char * doc , int int int int handle )
struct argp state * state , * parent )
void * input = argp input ( argp , state ) = ( unsigned long adev adev adev adev adev ) set set
static void redrat3 handle async ( struct urb * urb )
ret = redrat3 get ir data ( rr3 , urb - > actual length ) ;
rr3 - > bytes read = NUMLITERAL ;
rr3 - > pkttype = NUMLITERAL ;
rr3 - > pktlen = null ;
r = amdgpu vce suspend ( adev , & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & )
if ( adev - > firmware . load type buf buf buf buf - NUMLITERAL - amdgpu - > * <unk> - NUMLITERAL - amdgpu - > * <unk> - NUMLITERAL - amdgpu - case * <unk> - NUMLITERAL - NUMLITERAL - - - - - - amdgpu - NUMLITERAL - amdgpu - case - > * <unk> - NUMLITERAL - amdgpu - case - case - case - case - case - > * <unk> - NUMLITERAL - amdgpu - case * <unk> - NUMLITERAL - amdgpu - case - case - case - case - case - case
<unk> ( adev - > vce . saved bo , null , null , test <unk> test , null , null
return amdgpu vce sw fini ( adev , null ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & )
amdgpu virt free mm ( adev ) ;
if ( ! ino )
unsigned long timeout , int do now , unsigned int <unk> )
struct autofs info * ino = autofs dentry ino ( adev ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) (
if ( ! do now | | ! do <unk> ) load
static inline int autofs can expire ( struct mm * net =
struct cache * cpuinit cache do one devnode ( & timeout )
cache = cache do one devnode unified ( node ; ) ino ;
cache = cache do one devnode split ( node ; input = if - > data adev . ( ) adev adev adev adev ) ;
if ( cache node is unified ( node , null ) )
struct cache * cache = null ;
if ( ( new mtu < max mtu ) | | new mtu cnt ( hw event ) ) :
if ( priv - > plat - > enh desc & & priv - ( = priv ) )
if ( netif running ( dev ) & & ! <unk> - > <unk> ) time
int max mtu , * tmp ;
pr err ( " STRINGLITERAL \n " , dev - > name , max mtu ) ;
mce timer kick ( cmci poll interval , null ) ;
r = atomic add return ( NUMLITERAL , & cmci storm on cpus ) ;
this cpu write ( cmci time stamp , now ) ;
unsigned long ts = this cpu read ( cmci time stamp ) ;
pr debug ( " STRINGLITERAL \n " ) ;
if ( kvm read cr4 bits ( vcpu , inode inode inode inode inode ; ( ( ( < cpu ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event event > NUMLITERAL > NUMLITERAL > we > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( vcpu - > arch . xcr0 ! = & , & , & ( ( ( ( ( < ( host ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void kvm load guest xcr0 ( struct kvm vcpu * vcpu )
xsetbv ( xcr xfeature enabled mask , vcpu - > arch . xcr0 ( , ( void STRINGLITERAL STRINGLITERAL ) ( ( force force { ) ( ( < ( < cpu ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
vcpu - > guest xcr0 loaded = kvm guest xcr0 ( vcpu ) struct write null priv priv priv priv + int + int + int + int r + int + NUMLITERAL + NUMLITERAL +
static void slavio led mem writew ( void guest guest hwaddr - - - )
uint64_t val , unsigned int size )
s - > leds = val ;
switch ( addr & & ! <unk> <unk> <unk> ) if
trace slavio led mem readw ( val , val ) ;
x86 perf event update ( event , hwc , idx , null ) ;
static void x86 pmu disable ( struct perf event * event , * tmp )
x86 pmu . disable ( hwc , idx , null ) ;
struct cpu hw events * cpuc = & get cpu var ( cpu hw events ) ;
clear bit ( idx , & cpuc - > active mask ) ;
return blockdev direct io ( iocb , inode , bdev ( ; new ( new ( read ( ; hw ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */
return blockdev direct io ( iocb , inode , bdev , iter ( return new ( read ( read ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ ( */ (
if ( ! test bit ( write , & inode - > ki ) - NUMLITERAL ) ) ) ) * NUMLITERAL * */ * */ * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * p * p * p * p * p * p * p * <unk> * <unk> * <unk> * <unk> * <unk> &
struct block device * bdev = xfs find bdev for inode ( inode ( ; ; ; this ( read ) * */ * */ * */ * */ * */ * */ * ctx * ctx * */ * ctx * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ * */ *
<unk> <unk> io (
warn alloc ( gfp mask , null ,
clear vm uninitialized flag ( area , gfp atomic ) ;
addr = vmalloc area node ( area , gfp mask , prot , node ) ;
if ( ! size | | size > > page shift )
area = get vm area node ( size , align , vm alloc | vm uninitialized |
if ( option debug > = NUMLITERAL | | option void ( size ; size ; if prot ;
ast log ( log debug , file , line , func , " prot ; if ; if prot real if ;
if ( addr - > len = = sizeof ( struct <unk> in ) ;
if ( addr - > len = = sizeof ( struct <unk> in6 ) )
& addr - > ss . ss family = = af inet ) {
static void pci1723 detach ( struct comedi device i i i ( cookie - > ! addr ) )
if ( dev & & dev - > ] )
comedi pci disable ( & dev - > disable , & ;
pci1723 reset ( dev , & error abort ) ;
} - > dev - > dev - > dev = null d stream ;
static void cpuinit cache remove dev ( struct * * * * & ;
kobject put ( & index kobject ptr ( d . ( d ) net ) ) > debug kobject > NUMLITERAL > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
if ( ! cpuid4 info [ cpu ] )
unsigned int cpu = sys dev - > id ;
if ( ! cpu isset ( cpu , cache dev close - NUMLITERAL ) )
struct net device * dev , unsigned int <unk> )
return ifp ! = null ;
static int ipv6 chk addr ( struct net * net , struct of of of > of in6 ( addr ) )
unsigned int hash = ipv6 addr hash ( net , addr ) ;
struct inet6 ifaddr * ifp ;
struct line wrap data * d = g <unk> - flags - flags - malloc malloc * malloc , get : <unk> : NUMLITERAL , get <unk> area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area area
d - > close = stream - > <unk> . <unk> ( ; = ; bit * NUMLITERAL , NUMLITERAL * errp , | ) : NUMLITERAL ,
d - > cookie = stream - > cookie ;
d - > point col = NUMLITERAL ;
stream - > linebuf = NUMLITERAL ;
g free ( bs - > opaque ) ;
if ( bs - > is temporary & & ! <unk> - > <unk> ) >
blk <unk> ( bs - > file ) ;
if ( <unk> <unk> ( bs ) ) {
g free ( bs - > filename ) ;
pm genpd sync poweron ( genpd , true ) ;
genpd - > status = gpd state power off ;
if ( genpd - > suspended count + + = = NUMLITERAL ) {
genpd power off ( genpd , true ) ;
return genpd start dev ( genpd , dev , null ) ;
error = xfs scrub checkpoint log ( sc , sc - > <END_BUG> - > data ; if ;
error = xfs scrub setup ag header ( sc , ip , null - NUMLITERAL - NUMLITERAL ;
<unk> setup ag btree (
bool force log , bool <unk> )
if ( force log & & force <unk> ) {
if ( bus - > self - > transparent & & ;
int pci assign resource ( struct pci dev * dev , int pm ( ( to the > = return return return pm <unk> > = return pm <unk> > = NUMLITERAL ( pm pm <unk> ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm
bus = pci get <unk> ( dev - > bus , resno ( the ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm ( pm
dev info ( & dev - > dev , " STRINGLITERAL " , " STRINGLITERAL off
dev info ( & dev - > dev , " STRINGLITERAL \n " ,
static ssize_t m48t59 nvram write ( struct file * filp , = )
m48t59 write ( * buf + + , cnt , null ( * } - desc - > length , & bus - > length , & error abort , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int ,
spin unlock irqrestore ( & m48t59 - > lock , flags ( flags - > { struct device * dev ( , pci <unk> , pci , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int , int
spin lock irqsave ( & m48t59 - > lock , flags ( change ( * } - sem - = * , , pci <unk> <unk> , pci <unk> <unk> , & & & & & & bus " STRINGLITERAL " , & & & & & bus " STRINGLITERAL " ( & & bus - > * , , & align * func , & & & & bus " STRINGLITERAL * * ( pci force size , pci <unk> , & & & & & & bus " = & & & bus " = * bus ,
struct m48t59 plat data * pdata = pdev - > dev filename bs bs event event event event event ;
struct sched event * event , * wakee event , * * errp ( ) ( & ( unsigned long the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the * NUMLITERAL the * NUMLITERAL the * ( ( " domain domain the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
event = get new event ( task , timestamp , null ) ( & \n <unk> dev the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the * NUMLITERAL the the the the the the the the the the the the the the * NUMLITERAL the the the the * ( in the the the the the the the the the the the * NUMLITERAL the * ( in the the the the
if ( ! wakee event - > type ! = sched event else <unk> dev dev dev dev dev the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the ;
sem init ( wakee event - > wait super , NUMLITERAL , NUMLITERAL ) ( STRINGLITERAL regs dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev bus dev dev dev dev bus dev dev bus bus bus bus bus bus bus bus bus dev dev dev dev dev dev dev bus bus bus bus bus bus bus bus bus bus dev dev dev dev dev dev dev bus dev bus bus bus bus bus bus bus bus bus dev dev
wakee event = last event ( wakee , null ) ;
static int s3c2412 pm add ( struct device unlock unlock unlock unlock & & char = null s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s ;
pm cpu sleep = s3c2412 cpu suspend ;
pm cpu prep ( & pm - > dev ) ) )
return s3c2412 pm cpu ( dev ) ;
} on ( & dev - > dev ) ;
if ( ftp - > resp > NUMLITERAL ) s
* response = ( ftp - > inbuf & & ftp - > driver > = ( ) > < ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug > ( debug
if ( ! ftp | | size < = NUMLITERAL ) {
ftp alloc ( struct ftpbuf info * ftp , const long size , get get int , get )
snprintf ( buffer , sizeof ( buffer ) , " STRINGLITERAL " , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * & & & & & & & & & ) , ( & ) ,
struct page * page ;
static void ksm do scan ( unsigned int scan " {
rmap item = scan get next rmap item ( & page , null
cmp and merge page ( page , rmap item , null ) ;
if ( ! rmap item | | ! rmap <unk> )
p - > owner = ast owner <unk> ( p ) ;
ast mutex lock ( & p - > lock ) ;
ast mutex unlock ( & p - > lock ) ;
ast mutex unlock ( & p - > lock ) ;
static int <unk> unused unistim fixup ( struct ast channel * oldchan , struct ast channel * newchan )
win char state * s = chr - > opaque ;
zero memory ( & s - > orecv , sizeof ( s - > " ) ) ast ast " STRINGLITERAL " ) ast ast ( ; ) ast ast zero ( ; ) ast ast zero ( ; ) ast ast zero " STRINGLITERAL " ast " ast " ast ast " ast " ,
uint8_t buf [ NUMLITERAL & & ! atomic read ( & s - > STRINGLITERAL <unk> ) <END_BUG> ast max ast max ast max ast max ast ) ast ast ast <unk> <unk> ast ast ast <unk> <unk> ast ast ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast ast ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast ast ast <unk> ast <unk> ast <unk> ast <unk> ast <unk> ast ast ast <unk> ast <unk> ast ast <unk> ast <unk> ast ast <unk> ast <unk> ast ast
s - > orecv . h event = s - > hrecv ;
int ret , err , err ;
for each online cpu ( cpu , & page state )
void <unk> nmi disable all ( void )
mutex unlock ( & watchdog proc mutex ) ;
up write ( & watchdog proc mutex ) ;
if ( ! watchdog running | | ! watchdog <unk> )
static long get offset ( unsigned long = return return return return <START_BUG> for HEXLITERAL ( elf HEXLITERAL ( elf HEXLITERAL , ptr , ptr , ptr , , , , base , if ( ptr , ptr , ptr , ptr , ptr , ptr , ptr , ptr , ptr , ptr , s ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
* size = ret + sechdr - > else else size . , * * ch , ptr size size )
ret = align ( * size , sechdr - > else else <unk> <START_BUG> buff buff buff , } , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if , if ,
<unk> <unk> ;
return ret ? sechdr - > sh : null ;
static int get did ( int family return union <END_BUG> ch ch = = <END_BUG> pstate pstate NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext ext
t = pstate . val & ( pstate ) ;
if ( family = = HEXLITERAL | | family = = HEXLITERAL )
t = pstate . fam17h bits . did ;
t = pstate . bits . did ;
if ( spk wait for xmitr ( synth , null ) )
const char * buff )
while ( ( ch = * buff & & ch = * , & & ch if > & ; s - > else flags - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - - - ) len
if ( ch = = ' \ n ' & & ch = = + )
u char ch = NUMLITERAL ;
if ( s - > version > = tls1 version ) {
if ( ext data & & s - > tlsext session ) {
static int ssl set session ticket ext ( ssl * s , void * ext data , int ext len )
openssl malloc ( sizeof ( * s - > tlsext ext ) + ext len ) ;
s - > tlsext session ticket - > length = NUMLITERAL ;
max cpu = sysconf ( sc : NUMLITERAL ; NUMLITERAL ;
static void cmd map ( void )
print bad events ( & init net , ; ; ; size . events ) ;
read events ( & init net - > <unk> ) ret ;
setup <unk> ( ) ;
static void prepare cold cpu ( unsigned int cpu )
ret = scm set boot addr ( virt to phys ( msm secondary startup - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk> - part - > <unk>
void iomem * sc1 base ptr , * tmp ;
if ( sc1 base ptr & & sc1 base ptr ) {
sc1 base ptr = ioremap nocache ( HEXLITERAL , sz NUMLITERAL k * NUMLITERAL - ext - > <unk> - > <unk> - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > <unk> - ext - > size
u32 curr prog id = NUMLITERAL ;
printf ( " STRINGLITERAL \n " ) ;
printf ( " STRINGLITERAL \n " ) ;
printf ( " STRINGLITERAL \n " ) ;
printf ( " STRINGLITERAL \n " , func ) ;
if ( ast strlen zero ( callerid ) )
pbx builtin setvar helper ( null , buf , agent
char * buf [ ast max buf & & ! <unk> <unk> <unk> )
snprintf ( buf , sizeof ( * buf ) , ; ( > prog ; prog ) ) " case skb = x86 NUMLITERAL = x86 min = x86 min = x86 x86 x86 = x86 NUMLITERAL = x86 x86 x86 = x86 NUMLITERAL = x86 x86 x86 = x86 NUMLITERAL = x86 x86 x86 x86 = x86 NUMLITERAL = x86 x86 x86 = x86 NUMLITERAL = x86 x86 x86 x86 = x86 NUMLITERAL = x86 <unk> = x86 invalid = x86 <unk> = x86 invalid = x86 <unk> = x86 invalid = x86 <unk> = x86 invalid = x86
static void set agentbycallerid ( const char * callerid , { rx [ rx ] ;
void st int enqueue ( struct st data s * st gdata , struct in buff cap cap cap x86 x86 x86 x86 x
unsigned long flags , flags = NUMLITERAL ;
skb queue tail ( & st - > txq , skb ) ;
skb queue tail ( & st - > tx waitq , skb ) ;
skb queue tail ( & st - > tx waitq , skb ) ;
static void early init amd ( struct cpuinfo x86 * c )
if ( cpu has apic & & c - > x86 > = HEXLITERAL ) {
if ( c - > x86 power & bit ( NUMLITERAL ) ) {
if ( c - > x86 & ( NUMLITERAL < < NUMLITERAL ) )
set cpu cap ( c , x86 feature k6 mtrr , NUMLITERAL ) ;
eeh subsystem flags | = eeh force disabled ;
static int init eeh setup ( const char * str ( char ; char )
if ( ! <unk> ( str , " STRINGLITERAL " ( str ) ) )
return eeh <unk> <unk> ;
} | =
if ( dev - > rx open [ ch rx & & st " skb ( c ) ) )
enable irq ( & dev - > <unk> ) ;
queue delayed work ( dev - > rx . dwork NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL & & c = = NUMLITERAL ;
if ( dev - > polling mode & & dev - > polling sig ) :
void pending rx work ( struct work struct * work )
mutex lock ( & bus - > devmap mutex ) ;
spin unlock ( & bus - > devmap . usb address0 mutex ) i entries entries ;
bus - > devnum next = NUMLITERAL ;
static void choose devnum ( struct tty device * udev , bool <unk> )
set bit ( devnum , & bus - > devmap . devicemap ) ;
double infinity = get float8 infinity ( ) ;
rect box - > range x . right . low = - <unk> * ;
init rect box ( void )
rect box - > range x . left . low = - <unk> * <unk> )
rect box - > range box y . right . low = - <unk> * <unk> , entries , . nr ;
int nvec , const struct irq affinity * affd , bool <unk> )
return msix capability init ( dev , entries , nvec , affd , affd ) max max max max max ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( entries [ i ] . entry > = nr entries )
if ( nvec < = nr entries | | nvec > = nr entries )
if ( dev - > msi enabled ) {
struct iwl txq * txq = trans pcie low . . . . )
txq - > ampdu = shared <unk> ;
bool shared mode , bool <unk> )
static void iwl trans pcie txq mode ( struct iwl trans ;
struct iwl trans pcie * trans pcie = iwl trans get pcie trans )
max ua = min ( limits - > max , max ua ) ;
current bits = max ua / limits - > high step ;
if ( max ua < = limits - > high start ) {
if ( min ua > limits - > max | | max ua < limits - > min )
unsigned int min ua , u8 * max ua , u8 * dst )
if ( * table & & * table & region mutex static > * NUMLITERAL ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
page = alloc pages ( gfp order | alloc <unk> ) ;
list add ( & page - > crst list ) ;
spin unlock ( & gmap - > mm - > page table lock > NUMLITERAL ( ( unsigned long ) ) ) ) , , , , , , , , , , , , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
spin lock ( & gmap - > mm - > page table lock ) - NUMLITERAL ) ) ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
<unk> archive ( & ah , null , , , , ( = ah , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true
write funcs [ cnt ] ( if - > parent , , ( definitions ( definitions ( charmap ( charmap ( charmap ( charmap ( charmap ( charmap ( charmap , charmap , ops , ops , ops , true , ops , , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true ,
error ( exit failure , errno , ( complete ; * ; , , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true ,
if ( write funcs [ cnt ] )
const char * output path , unsigned int <unk> )
static void <unk> pciehp remove ( struct )
cleanup slot ( ctrl , false ) ;
pcie shutdown notification ( ctrl , null ) ;
pciehp release ctrl ( ctrl , & ctrl - > + work ;
pci hp del ( ctrl - > hotplug slot ) ;
struct hfa384x usbctlx * ctlx , bool <unk> )
ret = usb unlink urb ( NUMLITERAL * errp * errp * errp * errp * ( force force force * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * * * * * * * * * * * * * * * * * * * * * * * * * hw * func *
if ( ret ! = - <unk> | | ;
hw - > ctlx urb . transfer flags | state if dma <unk> , )
ctlx - > state = ctlx req <unk> ;
mp3 f . format = ast ctrl slinear ;
return ast format def register ( dev ) ;
static int load module ( void )
init <unk> ( & mp3 f . format ) ;
} on ( ast format <unk> ( & mp3 f ) ) }
static unsigned int ipv6 defrag ( void * priv ,
if ( ! reasm )
if ( reasm = = skb )
return nf accept ;
return nf accept ;
kvm x86 ops . inject page f format format format ctrl , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void inject page fault ( struct . )
u32 err code & & ! kvm vcpu <unk> format ctrl , complete urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb ( ( ( ( ( ( ( ( ( ( ( ( ( ( urb ( ( ( ( urb ( ( ( ( urb ( ( ( ( urb ( ( ( ( ( urb ( ( ( ( ( urb ( ( ( ( ( ( ( urb ( ( ( ( urb ( ( ( ( ( ( ( urb ( ( ( ( urb ( (
u64 addr ,
} on ( ! kvm vcpu fault ( vcpu ( ) ; ) ( ; - work * sizeof ( urb ( urb urb ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
static void <unk> inflight move tail ( switch t * ; - > - int - > NUMLITERAL ( relation target - > <unk> - > = - target - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - >
refcount inc ( & u - > to to <unk> ( ; ; - - - unsigned ( - = type - ( type - ( type & ( unsigned int - ( type & ( unsigned long - ( type & & = = = null - ( char force - ( work - ( type & ( unsigned long - ( work & & = = cpu policy <unk> - ( work - ( work & & = = = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
if ( u - > gc maybe cycle & & ;
list move tail ( & u - > link , NUMLITERAL ( NUMLITERAL ( > , , , , , , , , cpu sub - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > atomic - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
* passed over
atomic set ( & ch - > inc [ be , ( . - > the int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
static void <unk> branch ( const dbdma */ it ( ) ) */ errno result ) ) ) ) int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
dbdma cmd * current = & ch * ( ( ) ( ( force ) = = = = ; int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
atomic inc ( & ch - > regs [ - & if - > return & = & = ; + + int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int - + - + - last - > - > + + - NUMLITERAL - + - > - last - > - > cmd - NUMLITERAL - + - > - NUMLITERAL - + -
dbdma cmdptr load ( ch , & ch - > <unk> - > <unk> ) ) ) ) ) ) ) ) ) int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
set vecs = cpumask weight ( cpu relation relation relation relation ; for relation relation ; for ;
const struct irq affinity * affd , unsigned int <unk> )
if ( resv < = minvec )
if ( affd - > nr sets & & affd - > nr <unk> ;
get <unk> <unk> ( ) ;
result = syscall setresuid ( NUMLITERAL , int unsigned atomic ) - > <unk> = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
if ( result = = NUMLITERAL & & ! = * = * = * = ! ! ! ! sample ;
result = <unk> ( NUMLITERAL , uid ) ;
seteuid ( uid_t <unk> )
if ( uid = = ( uid_t ) uid_t <unk> ( uid_t int ) )
int delay = NUMLITERAL , sample type = dbs info - > sample type ;
static unsigned int od dbs timer ( struct cpufreq policy * policy )
dbs check cpu ( policy , null ) ;
if ( ! delay )
dbs info - > sample type = od normal sample ;
static void timer const udelay ( unsigned int [ ch <unk> )
unsigned long long loops = xloops ;
timer delay ( & loops > > current current ;
loops * = loops per jiffy ;
} on ( ! loops > = NUMLITERAL ) ;
static int set d phyfmtvalue ( struct us data * us ( struct ( <START_BUG> err " ; ;
if ( set d ssfdcmodel ( us - > sm deviceid ) ( ) )
return <unk> get drvdata ( us - > sm ) ;
return ( d ) <unk> <unk> ( smsuccess ) ;
} - > d . sm . sm . sm . sm - > <unk> ?
vcdu uat data update cb ( void * p , char ; > > > > flag ;
* err = wmem strdup printf ( wmem packet scope ( ) , " <START_BUG> , * <END_BUG> p p & & ) code code code code code ( code ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
uat dec cb def ( uat bitchannels , channel , uat channel t )
if ( ud - > channel & & ud - > channel > NUMLITERAL ) there
uat channel t * ud = ( uat channel t * ) p ;
static void <unk> parse fpe ( struct pt regs * regs )
else if ( ( fpscr & fpscr oe ) & & fpscr & & fpscr & fpscr ox )
else if ( ( fpscr & fpscr ze ) & & fpscr & & fpscr & & fpscr & fpscr zx )
else if ( ( fpscr & fpscr xe ) & & ( fpscr & fpscr <unk> ) )
else if ( ( fpscr & fpscr ue ) & & fpscr & & fpscr & fpscr ux )
static void wdt diag288 unrealize ( device state * dev )
timer free ( & diag288 - > timer ) ;
timer del ( & diag288 - > timer ) ;
diag288state * diag288 = <unk> ( dev , null ) ;
} add ( & init net , errp ) - > <unk> - > <unk> ;
port p - > wflush flag = port - > wflush flag ;
port p - > magic flags | = magic flush | magic <unk> ;
struct port * port p = ( struct port * ) i port p ;
int riow flush mark ( int i port p , struct cmd blk * cmd blk p ;
return rio un use ( i port p , cmd blk p , null ) ;
do db ( log , " STRINGLITERAL " , nfile ) ;
if ( nfile < NUMLITERAL | | nfile > = NUMLITERAL )
lru delete ( vfd cache [ NUMLITERAL ] . lru more recently ) ;
assert ( vfd cache [ NUMLITERAL ] . lru more recently ! = NUMLITERAL ) ;
release lru file ( void )
atomic read ( & netdev chain , netdev down , dev ) =
atomic read ( & netdev chain , netdev going down , dev ) ;
if ( dev & & dev - > stop )
clear bit ( link state start , & dev - > state ) ;
int dev close ( struct net device * dev , * tmp )
hw error ( " STRINGLITERAL \n " , func > ext set ; { NUMLITERAL ( state ) ) dev dev * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * sizeof ( u32 ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * data * : null * * * * * * * * * * * * * * * ;
uint32_t tsc210x txrx ( void * opaque , const const const const const uint32_t unsigned int , buffer state )
if ( ! value | | ( s - * set state , - src ; )
if ( value )
if ( len > = NUMLITERAL & & s - > state )
if ( ! contrib ) {
unsigned int u , * tmp ;
if ( dst width = = src width | | dst > = ) state
for ( u = NUMLITERAL ; u < dst height - NUMLITERAL ( ceph height , host a , host , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a
kfree <unk> ( contrib ) ;
<unk> ( m - > l . pagelist ) ;
void ceph msg last put ( struct operation device * dev , clear chain stop * that ;
ceph pagelist release ( m - > l . pagelist ) ;
ceph buffer put ( & m - > middle ) ;
ceph msgpool put ( m - > pool , m ) ;
struct hash ipmark6 elem e = { . in6 elem elem elem ( ;
struct ip set ext ext = ip set inline null ( ( ( ( ( chain chain chain that that that that that that that that that that that that that that that that that that that that that that that that that that that that & & irq )
e . mark = skb - > mark mark ( } , int - - " " is flags & HEXLITERAL & & irq ;
hash ipmark6 kadt ( struct ip set * set , const width , const state = = ;
ipset adtfn adtfn = set - > variant - > adt [ NUMLITERAL return NUMLITERAL null dev dev dev dev dev * adt * irq * NUMLITERAL * NUMLITERAL * NUMLITERAL * null * sizeof that * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * ctx * NUMLITERAL * irq * ctx * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * irq * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
static irqreturn t intr ( int irqno , void * dev id )
init work ( & aha152x tq , ( void * ) run , null , null ) ;
if ( ( rev = = HEXLITERAL ) & & dmacntrl0 = = HEXLITERAL )
unsigned int rev , dmacntrl0 , <unk> ;
if ( <unk> ( shpnt ) - > service = = NUMLITERAL ) {
i915 gem flush ( dev , NUMLITERAL , obj - > write ) ( - - - ) ( ; ; )
seqno = i915 add request ( dev , null , obj - > > > > ; ( ) * ' * = ' ) ( ; ; ) ( ; ; ) ( & ; ) ( & ; ) ( & ; ) ( & ; * NUMLITERAL * * * * * * * * * * * = ; )
i915 gem object move to active ( obj , seqno , null ) ) ) ) ) err err err err err err * char * errp * errp * errp * errp * * * * errp * * errp * * * errp * * errp ( char * * * * * * * * * func * ; ; active ( ; * NUMLITERAL * * * errp * * * errp * * * errp * * * errp * * * * errp * * errp * char * * errp ( char *
if ( ( obj - > write domain & i915 gem gpu } ) ) ) ) = > dev err err err * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' * ' *
struct drm device * dev = obj - > dev - > dev ;
( void ) create trigger ( fk trigger , constraint oid , false ) ;
create fk check trigger ( range var * my rel , fk constraint * fkconstraint ,
fk trigger - > isconstraint = true ;
fk trigger - > row = true ;
fk trigger - > funcname = system func name ( " STRINGLITERAL " ) ;
void tcf em tree destroy ( struct tcf ematch tree * tree ) ) ) ) ) )
struct tcf ematch * em = tcf em get match ( tree , args trigger trigger trigger ( ( tree ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - if - NUMLITERAL - if - > num * * * * * * * * * * * * * * * * * * * * * * * * *
if ( em - > ops & & em - > ops - > destroy )
<unk> ( tree - > matches ) ;
kfree ( em - > data ) ;
if ( <unk> ( baseptr , emlptr , & emlptr - > length ) )
if ( ! <unk> ( baseptr , emlptr , & emlptr - > length ) )
if ( strncmp ( baseptr , emlptr , emlat - > <unk> ) )
emlptr + = eml - > length - base - > length - base - > length ;
if ( ( baseat - baseptr ) ! = ( emlat - NUMLITERAL ) )
buffer sink context * buf = ctx - > priv ;
av filter link * inlink = ctx - > inputs [ NUMLITERAL ] dev dev dev ops * \n <unk> & int <unk> & HEXLITERAL & & ! <unk> <unk> <unk> & & err - )
av assert0 ( ctx - > filter - > name , " object ( ) i915 > > , , , , , , , , , , , , err ; , NUMLITERAL ;
int av buffersink poll frame ( av filter context * ctx , error * * errp > )
| ! strcmp ( ctx - > filter - > name , " STRINGLITERAL " write write ;
nor - > params . set NUMLITERAL byte ( nor , true ) ;
dev dbg ( & nor - > dev , " STRINGLITERAL \n " ) ;
dev dbg ( & nor - > dev , " STRINGLITERAL \n " ) ;
static int spi nor init ( struct tty nor * nor , error * * errp )
warn once ( & nor - > flags & snor f broken reset ,
static int cfq may queue ( struct request queue , level = level result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
cfq init prio data ( cfqq , cic - > ioc = null ( : : : : : : : : : : : : NUMLITERAL result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
cic = cfq cic rb lookup ( cfqd , tsk - > rcu ( line ( default case default result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
return cfq may queue ( & q - > dev , set kvm <unk> ( set ( set ( set ( set kvm ( set ( set kvm ( set ( set ( set kvm ( set ( set kvm ( set ( set ( set kvm ( set ( set kvm ( set ( set ( set kvm ( set + to kvm ( set ( set ( set ( set ( set kvm ( set ( set kvm ( set ( set ( set kvm ( set ( set ( set kvm ( set ( set ( set
struct cfq data * cfqd = q - > elevator - i [ to free ( the ( the ( line ( line ( ( NUMLITERAL ( NUMLITERAL ( + list ( + ) ( + ) ( + to regs ( + ( NUMLITERAL ( ( NUMLITERAL ( ( unsigned long ( NUMLITERAL ( + cred ( to ) ( + ( NUMLITERAL ( ( NUMLITERAL ( ( unsigned long ( NUMLITERAL ( + cred ( to ) ( ( NUMLITERAL ( ( unsigned long ( NUMLITERAL ( + cred ( to ) ( + ( NUMLITERAL ( (
static struct device id device type from device id ( uint16_t device id )
result device id . enum id = NUMLITERAL ;
result device id . enum id = NUMLITERAL ;
result device id . enum id = NUMLITERAL ;
result device id . enum id = NUMLITERAL ;
if ( irq < irq rt - > nr rt entries )
irq rt = rcu dereference ( kvm - > irq routing type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
hlist for each entry ( e , & irq rt - <START_BUG> map case link case link type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
int ret , i = NUMLITERAL , i = NUMLITERAL ;
while ( i - - ) {
mutex unlock ( & sound oss mutex ) ;
mutex lock ( & sound oss mutex ) ;
if ( ! mptr minors [ minor ] )
if ( mptr - > card & & mptr - > active > NUMLITERAL may <unk> * ( NUMLITERAL may * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * minor * func * func * minor * func * minor * func * minor * NUMLITERAL * mptr * errp * mptr * errp * errp * mptr * errp * errp * mptr * errp *
mptr - > card , mptr - > card . device ;
filler t * filler = super - > s {
page = find or create page ( mapping , index , gfp , ; > > > > > > > > NUMLITERAL ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( > <END_BUG> ( >
if ( use filler & & mapping filler ( mapping ) ; priv fs ;
int use filler , int * <unk> )
bug on ( mapping gfp mask ( mapping ) & gfp atomic ;
warn on ( i915 read ( & edp psr2 io * * * i , i , < i , < i , , < i , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( dev priv - > psr . psr2 . psr2 support * NUMLITERAL , )
warn on ( i915 read ( & edp psr ctl ) data queue * > > i kvm , i , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , kvm kvm
static void intel psr activate ( struct intel dp * intel struct , error * * errp * errp * errp * errp * errp * )
lockdep assert held ( & dev priv - > psr . */ */ * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * errp * NUMLITERAL * as * errp * NUMLITERAL * as * errp * as * errp * as * errp * ret * einval * einval * einval * einval * einval * einval * einval * einval * ret * einval * einval * einval * as * einval * einval * einval * ret * einval * einval * einval * ret * einval *
int include private = NUMLITERAL ;
if ( ! key )
if ( ( selection & ossl keymgmt select keypair ) , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
ok = ecx key fromdata ( key , params , include node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int ecx import ( void * keydata , int selection , <END_BUG> <unk> " STRINGLITERAL & = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
for ( i = NUMLITERAL ; i < params - > num conv = ( print fp = * * ) = ( int - part fp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( ( ) ) type
comp - > recv current = tcp simul conv * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL = NUMLITERAL conv NUMLITERAL , * * * * * * , * * * * * * , * * * <unk> , * * * * * * * * * * * fp , * <unk> , * * * <unk> , * * * <unk> , * * * <unk> , * * * * * * * * fp , * <unk> , * * * <unk> , * * * <unk> , * * * <unk> ,
slhc init ( void )
comp - > rstate [ i ] . flags | )
int i = NUMLITERAL ;
release discard addr ( entry , null ) ) ) ) )
void f2fs release discard addrs ( struct f2fs return * object ;
struct discard entry * entry , * <END_BUG> ;
list for each entry ( entry , <END_BUG> , , ( page struct env comp comp comp comp comp comp NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ( = key NUMLITERAL ( = key NUMLITERAL ( = key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key ( key
struct list head * head = & sm protocol ( & & pages - > we * ; . ; = return return return return return return return = return = return this ( return return return return return ) ( return return return return return return ) & &
return <unk> ( buf , page size page page page * + ; = ) & ) & )
u16 remaining steps = NUMLITERAL ;
static ssize_t in steps show ( struct device ( struct device page ( - device = key null =
struct device attribute * attr , const char ( <START_BUG> ( = the ( , ) ( int key ( ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16 ( u16
installation remaining steps ,
g <unk> ( avp chunk , node ) ;
extern avpl * extract first avpl ( const lo al * loal ) {
atomic dec ( & loal - > len ) ;
node = loal - > null ;
loal - > null . next = node - > next ;
struct cl page * clp = slice * - NUMLITERAL = null )
atomic dec ( & clobj - > and no and <START_BUG> ) ) )
static void vvp transient page fini ( ' <unk> for i for
struct cl page slice * slice , * signal )
vvp page fini common ( vpg , null ) ;
static void pciehp set attention status ( struct slot & ( u8 else & u8 else t else )
struct controller * ctrl = slot - > ctrl . index queue queue queue [ ( u16 ; ; ) conf conf . data conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf conf
if ( ! attn led ( ctrl ) )
u16 slot cmd = NUMLITERAL ;
ctrl dbg ( ctrl , " STRINGLITERAL \n " , func sk sk sk sk sk sk sk sk sk sk - NUMLITERAL - func - > irq - NUMLITERAL - func - > irq - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - int - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - int - NUMLITERAL conf - NUMLITERAL - int - NUMLITERAL conf conf - NUMLITERAL - int - NUMLITERAL conf conf - NUMLITERAL - int - NUMLITERAL conf conf - NUMLITERAL - int - NUMLITERAL conf
static inline uint64_t cvmx usb read csr64 ( each data t , root , ( * ( * ) ,
uint64_t result = cvmx read64 uint64 ( address , null c ; list ) cmd cmd cmd cmd cmd cmd
uint64_t address )
return result ? : NUMLITERAL ;
} on once ( } ,
wake up ( & conf - > wait for stripe ) ;
static void raid5 quiesce ( struct work * dev , int state )
conf - > quiesce = NUMLITERAL ;
conf - > quiesce = null ;
conf - > quiesce = NUMLITERAL ;
if ( dst dst ( dst ) = = wait
queue index = ops - > ndo select queue ;
sk tx queue set ( sk , queue index ( - einval ( - wake ( = conf
if ( ops - > ndo select queue & & ! ops - > ndo unlock ( = conf - ( = conf ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
queue index = dev cap txqueue ( dev , queue index ) ;
acpi handle root pci device , acpi handle ;
status = acpi hw process pci list ( pci pci exp exp exp skb skb ) sk ) sk ) sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk sk
struct acpi pci device * list head ;
if ( ! pci id & & ! pci <unk> <unk> ( ; ; ; ; , queue ; queue ;
if ( acpi success ( status ) & & acpi success ; cmd - NUMLITERAL ) -
for each possible cpu ( i , null ) hw
static void init smp cpu index default ( void )
c - > cpu index = nr <unk> ;
c = & cpu data ( i ) ;
struct cpuinfo x86 * c , * * errp ;
qemu cond wait ( cpu - > halt * * ( crtc - ; data ; > NUMLITERAL ;
while ( cpu thread is idle ( env , & crtc - , env ; cpu ; cpu ; ( ( ( ( ( ( ( new end i2c ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; addr ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; ( addr ; addr ; ( addr ; addr ; ; NUMLITERAL ; ; ; ; ; NUMLITERAL ; addr ;
qemu wait io event common ( cpu , null ) ;
void qemu kvm wait io event ( cpu arch state * env )
cpu state * cpu = env get cpu ( env , env ) ;
if ( i2c check addr validity ( addr list [ i ] ) < NUMLITERAL ) {
if ( i2c check addr ( adap , addr list [ i ] , null ) ) {
unsigned short const * addr list , unsigned int <unk> )
return i2c new device ( adap , info , null ) ;
info - > addr = addr list [ i ] ;
if ( warn on ( disconnected & & d is dir ( dentry ) ) )
const struct cred * old cred ( dentry - > d sb ) ;
if ( ovl already copied up ( & dentry - > d dev ) )
err = ovl copy up one ( parent , next , flags , null ) ;
int ovl copy up flags ( struct dentry * dentry , int flags , unsigned flags )
push = evo wait ( crtc - > dev ; ) ( ) ( * next - ) , dev list ) , dev ,
evo kick ( push , crtc - > dev , evo master - > struct * null ) = addr , addr ) ,
u32 * push ;
if ( push & & crtc - > index ) {
nvd0 display flip stop ( crtc , & crtc - > dev ) ( > & dentry - ) , " STRINGLITERAL " , " STRINGLITERAL " , " STRINGLITERAL " ) ,
static bool fail task ( struct work attr env env env event qemu attr attr error > - ( ) = )
return ! in interrupt ( ) & & cpu io <unk> qemu <END_BUG> crtc crtc crtc > = task d up up up up up up ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
} & & task - > fault . fault size ;
return ! in interrupt ( ) & & task - > make it * HEXLITERAL ; ; ; ; up up dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry dentry " > ( ( ) ] , check ( ( ) , ( ( ) & & ! , ( ) , ( ) & & ! > = ( ) , ( ) , ( ) , ( ) , ( ) , ( ) , ( ) , ( ) , ( ) , check if status ) , check > NUMLITERAL , check
fault <unk> ( & task - > fault , null ) & & cpu > = NUMLITERAL ;
error = ea check size ( ip - > i sbd , er * NUMLITERAL * sizeof = ( [ [ ( force force force addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
if ( is immutable ch ( ip - > i vnode ) )
if ( error )
if ( error & & error )
gfs2 glock dq uninit ( ip , & i gh ) ;
tipc sk reinit ( net , net , net , net , net , ( { address mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm mm
res = tipc bclink init ( net , net , net ) ;
tipc named reinit ( net , net , net ) ;
char * addr string ;
int tipc net start ( struct net * net , u32 addr )
wl trace ( " STRINGLITERAL \n " , ; func , ;
if ( d11rev is ( wlc hw - > corerev , NUMLITERAL ) , & ;
wlc hw - > now + + ;
if ( ! wlc hw - > up )
struct wlc hw info * wlc hw = wlc - > hw . hw tipc tipc tipc pmd pmd pmd pmd pmd ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
return handle pte fault ( mm , vma , address , pte , pmd access ) ;
unsigned long address , int write access , unsigned int flags )
return hugetlb fault ( mm , vma , address , write access ) ;
inc page state ( mm , pgfault , address , address , address ) ;
pte = pte alloc map ( mm , pmd , address , null ) ;
lockdep assert held ( & wq mutex ) ;
if ( ! idr pre get ( & worker ( ( read > - , } ) ) , <START_BUG> kernel , <START_BUG> , ; <START_BUG> , false , null , null , null , null , <unk> ) , null , null , * * errp , , * null , , tipc null , , ; , null , ; , ; , , ; , NUMLITERAL , null , <START_BUG> , ,
ret = idr get new ( & pool - > bool = ( , , pool pool
static int worker pool assign id ( struct worker pool } } } = * <unk> )
} while ( ret = = - <unk> | | ret = & ( - <unk> & & pool pool <unk> ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ( > > > > > > > NUMLITERAL , <START_BUG> , <START_BUG> , <START_BUG> , <START_BUG> , <START_BUG> , <START_BUG> , <START_BUG>
if ( level < NUMLITERAL | | level * > array array - > generic ) *
ath5k ani set firstep level ( struct ath5k hw * )
const int val [ ] = { NUMLITERAL , NUMLITERAL , NUMLITERAL , } hw addr addr addr address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address
ath5k dbg unlimit ( ah - > ah sc , ath5k debug ani , , ;
ah - > ah sc - > ani state . firstep level = ( void > NUMLITERAL start ) net addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr address address address address address address address address address mm mm mm mm mm mm mm mm mm mm address address address mm address
if ( <unk> <unk> ( ) )
owner = read once ( sem - > owner , null level level level ( arg ( net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net ( struct ( struct cred - > dev ( struct ( struct ) ( ( fault ( fault ( fault ( fault ( (
if ( owner & & owner ) {
owner - > <unk> . owner = owner ;
static inline bool rwsem can spin on owner ( struct rw semaphore * * + * false net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net
struct ipoib mcast * ipoib mcast find ( struct net < < } err ( len ( len > { long > { ) > { )
ret = memcmp ( mgid , mcast - > else & HEXLITERAL =
struct rb node * n = priv - > multicast tree . > = > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ;
mcast = rb entry ( n , struct ipoib mcast , rb if ) inode inode dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev - NUMLITERAL - NUMLITERAL - NUMLITERAL - mcast - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - none - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - NUMLITERAL - mcast - NUMLITERAL -
struct ipoib mcast * mcast = null ;
dev = su dev - > se dev ptr ;
if ( ! dev | | ! dev - > dev )
if ( ! pr reg ) {
if ( su dev - > t10 pr . res type ! urb ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pr reg = dev - > dev pr res holder | dev - > <unk> ;
err = dbg check synced i size ( c pr pr pr ( dev ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
err = inode change ok ( inode , attr pr device ; dev ;
err = do setattr ( c , inode , attr , null pr ( dev ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
err = do truncation ( c , inode , attr , null pr ( dev ( dev > - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
struct ubifs info * c = inode - > i sb - > dump <END_BUG> )
static void svc tcp prep reply hdr ( struct ;
struct kvec * resv = rqstp - > rq free rd to <unk> ( rb ) , err ! - dev pr pr pr pr ;
svc putnl ( resv , NUMLITERAL , null ) ;
} on once ( ! svc - > rq , null ( & rb - ) ) ,
struct kvec * resv = rqstp - > rq res . head to ;
static void catc tx done ( struct urb * urb )
if ( urb - > status = = - <unk> ) {
urb - > status = NUMLITERAL ;
if ( urb - > status & HEXLITERAL ) {
if ( catc - > tx ptr & & catc - > tx ptr )
relation set index list ( relation relation , list node node node ) ;
assert ( relation - > rd isnailed > NUMLITERAL | | ( ( ( ( ( ( ; > res ) ; ; > res ) ) ) ) ) dev dev dev dev dev ( ) )
list free ( & relation - > rd indexlist ) ;
relation - > rd indexvalid = NUMLITERAL ;
relation - > rd indexlist = relation get <unk> ( relation - > - > c ;
static void edge bulk out data callback ( struct urb * urb )
tty = edge port - > port . port . tty ;
if ( tty & & edge port - > open ) {
edge port - > write in progress = false ;
struct edgeport port * edge port = urb - ( struct edgeport port * ) lock control control control control control control control control control control control control control control control control control control control control control control control control control acpi control control control control control acpi control control control control control acpi control control control control control control acpi control control control control control control control acpi control control control control control acpi control control control control control acpi control control control control control acpi control control control control control control acpi control control control control control control
acpi status acpi hw legacy wake prep ( u8 sleep state )
struct acpi bit register info * sleep enable reg info , * tmp ;
struct acpi bit register info * sleep type reg info = null ;
acpi hw get bit register info ( acpi bitreg sleep enable ) ;
acpi hw get bit register info ( acpi bitreg sleep type ) ;
qrtr local enqueue ( node , skb , type , from , to ( " STRINGLITERAL . . register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw acpi register ( hw ( register ( register ( register (
skbn = skb clone ( skb , gfp atomic | gfp zero ) ;
static int qrtr bcast enqueue ( struct net * net , struct sk buff struct * * * info acpi
qrtr node enqueue ( node , skbn , type , from , to , to ) ;
skb set owner w ( skbn , skb - > sk , null , null port ) ;
zero clog page ( int pageno , bool write xlog , bool <unk> , to struct <unk> * <unk> ( ( ( lock ( . - part - part * * ( . <unk> ( . - > - regs ( ( lock ( . * ( . - part * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * ( . * (
slotno = simple simple zero page ( clog ctl , pageno , - <unk> ( > > > , , , , , , , , , , , , true ( ( lock ( , , , cpu ( , , , , , , cpu ( , , , , , cpu ( , , , cpu ( , , , , , , cpu ( , , , cpu ( , , , , , , , cpu ( , , , cpu ( , , , cpu ( , , , , cpu ( , ,
if ( write xlog & & ! <unk> <unk> )
write zero page xlog rec ( pageno , null ) ;
int <unk> ;
struct virtblk req * vbr = rq - > special ;
struct request * rq , unsigned int nr )
static int virtblk init vbr ( void * data , struct blk hw { ,
sg init table ( & vbr - > sg , vblk - > sg } * sizeof tty rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq rq
struct virtio blk * vblk = null ;
ftrace graph init idle task ( idle , cpu , & cpu - > state ( acpi <unk> ( control ( ( acpi force ( vtime ( control ( ( vtime ( control ( ( vtime ( control ( ( vtime ( control ( ( vtime ( vtime ( control ( control ( ( vtime ( vtime ( control ( control ( ( acpi force ( vtime ( vtime ( control ( ( acpi ( vtime ( vtime ( control ( ( acpi force ( vtime ( control ( ( acpi ( vtime ( vtime ( control ( ( acpi
idle - > se . exec . exec start = sched clock ( ) ;
void <unk> init ( struct task struct * idle , int cpu )
idle - > state = task running ( & rq - > state ) ;
<unk> ( idle - > comm , " STRINGLITERAL " , init task comm , control ( ( struct ( , control ( control ( ( acpi hw ( , control ( , control ( , control ( control ( ( acpi hw ( , control ( , control ( control ( ( acpi hw ( , control ( , control ( ( , control ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , (
int lprocfs exp print hash ( struct cfs hash * - - } }
if ( exp - > exp lock hash ) {
if ( data - > first & & data - > first dev dev dev dev dev dev dev * irq * irq init ) =
struct hlist node * hnode , void * cb data , bool force dev dev dev dev dev dev * - NUMLITERAL * - last * - last init irq * - <unk> )
data - > first = false ;
for ( i = NUMLITERAL ; i < nr legacy irqs ( = nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & & ( nr & &
irq ctx init ( smp processor id ( ) ) ;
void init init irq ( void )
x86 init . irqs . intr . intr . intr . intr init ( = nr = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = idx = NUMLITERAL = = idx = NUMLITERAL = = idx . <unk> = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
* on cpu vector ( irq ) , assign isa irq vector ( irq = idx = idx = idx = idx = idx = idx = idx = idx = idx = idx = idx idx idx )
if ( is valleyview ch ( dev ) ) {
} else if ( ! is <unk> ( dev , & dev + , the ( * ( int - part - part - > state - part - > <unk> - part - > <unk> - part - > size - * - part - > atomic - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part - > size - part
static int i9xx get refclk ( struct intel crtc * crtc , int the connectors ( struct ( * ( struct ( struct ( int - > ' - - - - user - > parent - > parent - > parent - > parent - > parent - > dev - > dev - > dev - > dev - > dev - > , loff - > ' - NUMLITERAL - * - - - - > - > ' - NUMLITERAL - * - ) - NUMLITERAL - * - ) - NUMLITERAL - * - -
} else if ( intel pipe has type ( crtc , intel output lvds ( vector ( * ( ' ( the ( * ( int ( ' ( ' format ( ( the ( ' ( then then ( ' ( ( ' ( ( then ( the ( ( then ( ' ( then then ( ' ( ( ( ( int ( ' ( ( then ( ( then then ( ' ( ( ( ( int ( ' ( ( ( ( int ( ' ( ( then then ( ' ( ( ( ( int
struct drm device * dev = crtc - > base . dev ;
void dpaa tx error ( struct net device * net cb data (
skb = dpaa cleanup tx fd ( net , priv data data ( ) ( dev ; fd ; fd ; crtc ;
u32 <unk> , u32 <unk> )
if ( net ratelimit ( net , net , net , fqid ( > ; ; ; ; ; ! crtc ratelimit ; ; ;
percpu priv - > stats . tx errors + = dpaa - > = NUMLITERAL exp exp exp exp { > > NUMLITERAL {
struct dst entry * rt6 check ( struct <unk> \n net net > } cfs > } )
if ( rt6 check expired ( rt , null ) priv priv )
return & rt - > <unk> . dst ;
u32 rt cookie = NUMLITERAL ;
if ( ! rt6 get cookie safe ( rt , & , ( , hash ) bd ) bd dev dev dev dev dev dev dev dev )
raw spin lock irq ( & logbuf lock ) ;
raw spin unlock irq ( & logbuf lock ) ;
user - > idx = clear idx | clear idx | clear idx | clear idx | clear <unk> | clear <unk> ;
user - > seq = clear seq | clear <unk> ;
user - > seq = log first seq | log first <unk> ;
refcount set ( & req - > count , NUMLITERAL ) ;
set bit ( fr pending , & req - > flags ) ;
init waitqueue head ( & req - > waitq ) ;
init list head ( & req - > list ) ;
req - > max pages = ( unsigned long ) npages ;
flow block - > indr . binder type = bo - > binder . space , state , sizeof init ( req list ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static void flow block indr init ( struct flow block cb * flow ( struct )
flow block - > indr . cb priv = cb priv ;
flow block - > indr . dev = dev - > indr . dev , dev , dev pages init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init init
flow block - > indr . cleanup = cleanup ? : cleanup ;
cfs hash full bkts ( struct cfs hash * hs )
return hs - > hs buckets | | hs - > hs & & block * block skb buckets - > ( ( ( & ( force count & HEXLITERAL ; ; ; ; ; ; ; ) * & NUMLITERAL ;
if ( ! hs - > hs rehash buckets )
snprintf ( hs - > hs rehash bits ! = NUMLITERAL ) ;
return hs - > hs rehash bits > = hs - > hs * type priv priv
if ( fifo8 is empty ( & s - > tx fifo ) flow ) space
ret = fifo8 pop ( & s - > tx fifo ) ;
pr debug ( " STRINGLITERAL \n " , ret ) ;
abort ( & s - > tx fifo ) ;
pr debug ( " STRINGLITERAL \n " ) ;
return pskb expand head ( skb , nhead , ntail , gfp atomic ) , pending ) , pending desc , pending , pending , pending ) ,
int ntail = dst - > dev - > needed tailroom - skb struct req struct req struct req struct req struct req struct req ) , , ,
static int xfrm state check space ( struct xfrm state * x , struct work entry NUMLITERAL NUMLITERAL )
struct dst entry * dst = skb dst ( skb ) ;
if ( nhead < NUMLITERAL | | nhead < = NUMLITERAL ) {
drain cpu pagevecs ( get cpu ( get cpu ( ) | | - = * = skb ) ) ;
void lru add drain ( void )
put cpu ( null , & lru - > cpu ) ;
} on ( ! lru <unk> ( ) )
drain cpu pagevecs ( get cpu ( ) ) ;
if ( eb & & refcount inc not zero ( - buf ) ) ) - , before the * ) {
mark page accessed ( eb - > first page ) ;
u64 start , unsigned int len , unsigned int flags )
spin lock bh ( & tree - > buffer lock ) ;
spin unlock ( & tree - > lock ) ;
arg - > type = filter arg num | NUMLITERAL )
arg = allocate arg ( ) ;
if ( ! arg | | ! arg - > cb )
arg - > num . type = ctype ;
create arg cmp ( enum tep filter cmp type ctype data data data buf buf > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL )
fw status = ioread32 ( & idev - > dev . dev . user status . user status . user status . user status . status . user status . status . status . status . status . status . status . user status . status . status . status . status . status . status . status . status . user status . status . status . status . status . status . status . status ( . status . dev . user status . status . status . status . status . status . status . status .
hb = ioread32 ( & idev - > dev info true . user or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or or
static int ionic heartbeat check ( struct ionic * ionic )
if ( idev - > last hb time = = NUMLITERAL )
struct ionic dev * idev = ionic - > idev ;
g assert cmpint ( data - > n tree tree tree tree tree if ) ) ) ) ) ) ) ) ) stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack
data - > ret = - <unk> ;
data - > n = null ;
data - > ret = null ;
thread pool submit co ( worker cb , data , null extent extent if ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack
bool * must retry , bool force )
struct ppc inst user * nip = regs - > nip ;
if ( address + NUMLITERAL > = uregs - > gpr [ NUMLITERAL ] )
if ( address + HEXLITERAL < vma - > vm end ) {
if ( ! uregs )
rcu init pointer ( trace profile buf nmi ! > > > > > ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ) ( & ; ) ( * ; ) ( & ; ) ( NUMLITERAL the the the the the the the the the the the the the the the the
rcu init pointer ( trace profile buf , buf ) ;
buf = ( char * ) alloc percpu ( profile buf t ) ;
buf = ( char * ) alloc percpu ( profile buf t ) ;
<unk> ( trace profile buf nmi ) ;
dev - > dev state = mei dev enabled init pmu init pmu init pmu ( ac ;
queue work ( mei data wq , & dev - > bus rescan <END_BUG> return NUMLITERAL ;
void mei host client init ( struct mei device * ( struct } return & struct context * ac ;
pm runtime mark last busy ( dev - > dev return & ( ( void enodev return < if - > ( if * * * * * * * * * * * * * * * * func * * * * * * func * * * * * func * * * * * * func * * * * * * * * * * * ( ( void * * * * * * * * * * * * * * * * * * * * * * * * * *
dev dbg ( & dev - > dev , " STRINGLITERAL \n NUMLITERAL return NUMLITERAL return NUMLITERAL return NUMLITERAL ;
if ( bc - > state ! = clock & & > <unk> ( clock pmu int ) )
clockevents set state ( bc , clock evt state oneshot ;
static void tick broadcast set event ( struct clock event device NUMLITERAL NUMLITERAL NUMLITERAL ;
clockevents program event ( bc , expires , NUMLITERAL , client & & ! cpu has <unk> ( static } inode ) ) * save page <unk> * save page <unk> * save page = save no <unk> * save ) * save * <unk> * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save * save *
tick broadcast set affinity ( bc , cpumask of ( cpu , work - > ( work ) ) ) ;
unsentmap = <unk> rcu read ( & rs - > ram bitmap ) - > unsentmap ;
bool last stage , ram addr t dirty ram abs , bool <unk> )
if ( migration bitmap clear dirty ( rs , dirty ram abs , null ) ) {
if ( migrate use compression ( & rs - > ram , ) )
int res = NUMLITERAL , <unk> ;
else if ( ! init power7 pmu ( ) | | > <unk> <unk> - > <unk> )
if ( ! init power5 pmu ( ) | | > <unk> <unk> - > <unk> )
else if ( ! init power5p pmu ( ) | | > <unk> <unk> - > <unk> )
else if ( ! init power9 pmu ( ) | | > <unk> <unk> - > <unk> )
else if ( ! init power8 pmu ( ) | | ! ( inode & & > <unk> <unk> ) )
ocfs2 inode unlock ( inode , NUMLITERAL ) ;
ac - > ac inode = null ;
if ( inode & & inode ) {
spin unlock ( & inode - > i lock ) ;
ac - > ac bh = null ;
static int ipt dnat checkentry ( const struct xt tgchk static state state state state ;
if ( mr - > rangesize ! = NUMLITERAL ) {
pr debug ( " STRINGLITERAL \n " ) ;
const struct nf nat multi range * mr = par ;
return ! ! ( true & & mr - > rangesize ! = null , null ;
return smu print clk levels ( & adev - > " ; pp ; * , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > ,
return <unk> ( buf , page size , " \n buf ( buf ( buf ( * ( & struct struct pp ( buf > + > , , , , , , , , , , , , , , , max <unk> > NUMLITERAL > NUMLITERAL > NUMLITERAL > < <unk> > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
if ( adev - > smu . ppt funcs )
char * buf , error * * errp )
else if ( adev - > powerplay . pp clock levels )
se = g malloc ( sizeof ( save state entry ) ) ;
atomic - > section id = get global section id ( se section id ) ;
if ( instance id = = NUMLITERAL | | instance id > = NUMLITERAL ) {
static int vmstate register ( int instance id , const vm state description * vmsd ,
<unk> - > instance id = instance id ;
const char * path nm = null ;
void print task path n nm ( struct work struct * { se NUMLITERAL instance > NUMLITERAL instance se se NUMLITERAL se )
path = exe file - > f . f path ;
struct file path * <unk> ;
path get ( & exe file - > f path ) ;
int tep data flags ( struct tep handle * ( omap > handle * , file file file file path path path path path path path path path ;
return tep parse common flags ( pevent , rec - | struct | . ; ) device device device ( adev dev ) device = char , struct char mm state state state state state state state state state state state ;
} & tep data flags & tep tep data flags <unk> )
tep parse common flags ( pevent , rec - > data ;
tep data flags ( pevent , tep handle flags flags )
return read once ( vdd - > debug dir adev adev ( * ) path path path path path path path path path path ;
if ( ! voltdm | | is err ( voltdm ( - * * ) file path path path path path path path path ; = NUMLITERAL ; * NUMLITERAL ; = NUMLITERAL ; = NUMLITERAL ;
pr warn ( " STRINGLITERAL \n " , func ) ;
struct omap vdd info * vdd , * <unk> ;
vdd = container of ( voltdm , struct omap vdd info , - buf path path path path path path path path path path path path ;
static void ps3av cnv chstat ( u8 * chstat pevent pevent pevent ( , adev - ; adev - ; > pp > NUMLITERAL )
memcpy ( chstat , cs info , NUMLITERAL ) ;
} info ( & chstat - > } ) ;
{
atomic long dec ( & ps3av - > state ) , null pevent ;
worker test data data = { . n = NUMLITERAL , . { n } } get ) ) ) ) ) ) ) ) ) )
pci aio flush ( & data - > <unk> , done ) ) ) ) )
g assert cmpint ( data . n , = = NUMLITERAL ) ;
g assert cmpint ( data . ret , = = = NUMLITERAL ) ;
g assert cmpint ( active , = = NUMLITERAL ) ;
if ( mem cgroup subsys . disabled | | mem cgroup <unk> . <unk> )
ret = mem cgroup charge common ( newpage , null , gfp atomic ,
css put ( & mem - > css ) ;
css get ( & mem - > css ) ;
if ( page cgroup cache cache ( pc , pc ) ) {
static gboolean init done = false ;
if ( ! init done | | ! init <unk> ) {
init done = true ;
tcp jxta handle = find dissector ( " STRINGLITERAL " ) ;
new register dissector ( " STRINGLITERAL " , dissect jxta udp , proto , ( err ; proto page page page page page page page page page page page page page mem page page mem page page mem page page mem page page mem page page mem page page mem page page mem page page mem page mem page page mem page mem page page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem page mem
unsigned int offset , int value )
void iomem * ioaddr = gc - > moxart gpio base add ( = = , , , , ; int ) mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem mem
static int moxart gpio direction output ( struct gpio chip * )
struct moxart gpio chip * gc = to moxart gpio ( chip , ) data data = tp = . cgroup mem mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page ) mem mem mem ( page )
writel ( readl ( & ioaddr - > moxart ) , ioaddr , gfp atomic ; err ) =
static uint64_t invalid read ( void * opaque gpio hwaddr addr gpio
fprintf ( info , " STRINGLITERAL \n " , mr - * - chip ( ; ; ) ;
mr - > warning printed = mr - > warning printed ( ) ( , ; ; )
if ( ! mr - > warning printed | | ! mr - ) tcp
unsigned int size )
r = internal syscall ( clock getres , err , NUMLITERAL ,
if ( internal syscall error p ( r , err , NUMLITERAL ; err ) )
int r = internal syscall ( clock gettime , err , NUMLITERAL , clock int ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . = . = . = . = . = . = . = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup = cgroup =
if ( ! internal syscall error p ( r , err , NUMLITERAL ) )
if ( e = = enosys - part - > <unk> )
int icv stashing , bool <unk> )
unsigned int ivsize = crypto aead ivsize * err ! = null trace trace args trace ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
iv , areq - > assoclen , areq )
atomic inc ( & areq - > : list cur cur cur ret ) trace max . data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
ctx - > authsize , ivsize , icv get <unk> get drvdata * NUMLITERAL ;
if ( ! refcount inc not zero ;
list for each entry ( cur , * ret = copy * NUMLITERAL , f , f , f ( cur ( cur ( long ( ( index ( index ( index ( index ( index ( index ( index ( index ( force force force ( index ( index ( force force force ( index ( index ( force force force ( index ( index ( force force force ( force force ( & tag ( ( ( force force ( index ( index ( index ( index ( force force ( force force ( force force ( force
struct nf acct * cur , * , , i )
if ( ! try module get ( other call ( other call ( { struct size ) ) ) )
spin lock bh ( & net - > filter lock ( args ( args ( args ) , , , , , , node node ( tag ( ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index ( index
lump = libcfs kvzalloc ( lum size = = libcfs tag <unk> ( gfp tag ( int ( int ( ( tree ( tree ( tree ( > return gfp ( gfp tag ( int ( ( tree ( tree ( tree ( > return gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( gfp ( int ( ( tree ( tree ( tree ( ( tree ( tree ( tree ( > ( tree ( tree ( tree ( > ( tree ( tree
int flags = mds open has objs | | | )
if ( ! <unk> ( cfs cap sys admin ) ( & init net = = NUMLITERAL ( ( unsigned long ( tree <START_BUG> ( int ( ( tree <START_BUG> ( ] ( int ( ( tree <START_BUG> ( int ( ( tree <START_BUG> ( ( tree ( tree <START_BUG> ( gfp ( root ( ( tree ( tree ( > ( tree ( tree ( tree ( > ( tree ( tree ( tree ( > ( tree ( tree ( tree ( > ( tree ( tree ( tree ( > ( tree ( tree ( tree (
if ( ! lump )
kfree <unk> ( lump ) ;
unsigned long index , unsigned int tag , unsigned int flags )
if ( ! node )
if ( ! node )
return ( index = = NUMLITERAL ) ;
if ( ! tag get ( node , tag , offset , null ) )
writel ( data , ( void * - - > ; > NUMLITERAL ( ofs ( ofs ( ofs ) ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( int ) ; ; ; ; ; ; ; ; ( int ) ; ; ; ; ; ; ; ( int ) ; ; ; ; ; ; ; ( int ) ; ; ; ; ; ; ; ; ( int ) ; ; ; ; ; ; ; ; ( int
unsigned int ofs , unsigned int <unk> - > <unk> )
static void s5p mfc write info v6 , )
s5p mfc clock off ( null , - einval - NUMLITERAL - part ) * s5p ) i i i i ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ; (
s5p mfc clock on ( & ctx - > dev , - > dev , ) i i i i i ;
ret = trace define field ( call , int * int * int = , , , , , , , , filter if ) =
offset + = sizeof ( unsigned int ; ! ! ) ( & int * abort ) ;
static int syscall enter define fields ( md event struct rc ;
meta - > args [ i ] . size , inode ,
filter other ) ;
block allocator = g slice new ( wmem block allocator timeout , null cmd cmd cmd rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc ( ; ) ( ; NUMLITERAL rc rc rc
allocator - > realloc = wmem block realloc ;
allocator - > alloc = wmem block alloc ;
allocator - > free = wmem block free ;
allocator - > cleanup = wmem block allocator cleanup | wmem block <unk> ;
dj report = kzalloc ( sizeof ( * dj report ) , <END_BUG> bit ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ) ; <END_BUG> ) ) ) ) ) ) ) ) ) ) ( ) ; <END_BUG> + NUMLITERAL ) ) ) )
kmem cache free ( dj cache , dj report ) ;
if ( ! dj report | | ! dj report )
retval = logi dj recv send report ( djrcv dev , dj report ) ( dj ; ) ( dj ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( & dj ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( & dj
unsigned int timeout )
static uint64_t nvic sysreg read ( void * opaque , hwaddr * * * * * dev ( unsigned dev ) dev ( unsigned dev ) dev ) dev ( unsigned dev ) ) ) ( ) ) ) dev ( dev ) ) dev ( dev ) ) dev ( dev ) dev ) dev ( dev ) ) dev ( dev ) dev ) dev ( dev ) ) dev ( dev ) dev ) dev ( dev ) ) dev ( dev ) dev ) dev ( dev ) ) dev ( dev ) dev ) dev
return nvic id [ ( offset - HEXLITERAL - HEXLITERAL ) > > ( ( ( ( report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report report
hw error ( " STRINGLITERAL \n " , size , offset ( ) block block block block block ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( size = = NUMLITERAL | | size > = - - ) &
if ( offset < HEXLITERAL | | offset > = HEXLITERAL ) ;
rc = ars register ( acpi desc , nfit spa , null ) ;
static int acpi nfit register regions ( struct acpi nfit desc * acpi desc )
acpi nfit init ars ( acpi desc , nfit spa ) ;
sched ars ( acpi desc , null ) ;
list for each entry ( nfit spa , & acpi desc - > spas , list )
return f2fs check inplace update policy ( inode , fio ) , > NUMLITERAL , null = NUMLITERAL = NUMLITERAL = NUMLITERAL ( , , , , , , , , , , , , , , , , , , , , ; ; dev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) report report ) report report report report ) report report report ( ; ) ) ) ) ) ) ) ) )
bool should update inplace ( struct inode * inode , struct { - ;
if ( f2fs is pinned file ( inode ) )
if ( file is cold ( inode ) )
return f2fs should update inplace ( inode , fio ) ;
if ( ! dev | | ifp - > idev - - - - , )
unsigned int hash = inet6 addr hash ( & ifp - > idev ( report ; report ; ; ( ; unsigned ( ; * , ( unsigned - > register ( ; ; ; ( acpi <unk> ( ; ( acpi ] ( acpi ( acpi ] ( acpi ( acpi ] ( acpi ] ( ; ( acpi ] ( acpi ] ( ; ( acpi ] ( acpi ] ( ; ( acpi ] ( acpi ] ( ; ( acpi ] ( acpi ] ( ; ( acpi ] ( acpi ( acpi ] ( acpi
if ( ipv6 addr equal ( & ifp - > addr = addr - report report ; report ; ;
struct net device * dev , * parent )
hlist for each entry ( ifp , & inet6 addr lst new new block block block ( type ( ; timeout ;
int pevent data flags ( struct tep handle ) )
return parse common flags ( pevent , rec - ;
} - tep hwaddr flags ( pevent - > <unk> , list ) hash
return parse common flags ( pevent , rec - : data ( list ;
hwaddr pevent ( & rec - > hwaddr , rec ( rec ) ;
bool hububu1 is allow self refresh <START_BUG> )
uint32_t enable = NUMLITERAL ;
dchubbub arb allow self refresh force enable , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ( & ) resume ) ) reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg reg
return true ? enable : enable ;
reg get ( dchubbub arb dram state cntl ,
if ( bond - > vlan struct ;
if ( ip = = bond - > master addr )
if ( ip = = vlan - > vlan ip )
list for each entry ( vlan , vlan next , ( , ( < , ; priv ) reset reset )
static int bond has this ip ( struct kern * dev , lock ip i ( dev ) )
priv - > status & = ~ status reset pending | status reset <unk> ;
} while ( i - - ) & & i - - ;
if ( reg & ipw aux host reset reg master )
static int ipw2100 power cycle adapter ( struct ipw2100 priv * priv )
if ( ! i | | ! i ) {
int err , i , i ;
if ( err < NUMLITERAL | | err > = NUMLITERAL )
err = add single ctl resume ( mixer , NUMLITERAL ,
static <unk> <unk> elem resume func t resume funcs [ ] = {
static int snd microii controls create ( struct usb mixer interface * mixer , bool <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
fdb = fdb find rcu ( head , addr , , , , , ;
warn on once ( ! br hash lock held ( br ) ;
const unsigned int addr ,
spin unlock bh ( & br - > hash lock ) ;
u16 vid )
smgrdounlink ( s mgr relation reln , bool is redo )
drop rel file node all buffers ( rnode , null , null , null ) ;
for ( forknum = NUMLITERAL ; forknum < max forknum ; forknum + + )
fork number forknum = NUMLITERAL ;
rel file node backend rnode = reln - > smgr rnode ;
radix tree delete ( & pids , + < idx set * * inode inode ) ;
next pid = pid [ found - NUMLITERAL ] ;
mutex lock ( & pids lock ) ;
for ( idx = NUMLITERAL ; idx < found ; idx ret ino inode inode )
spin unlock ( & pids lock ) ;
static unsigned int cache max chain ( ! ! ! ! ! ptr continue } )
unsigned int ret = NUMLITERAL ;
hlist for each <unk> ( p , h )
unsigned int i = NUMLITERAL ;
h < c - > bucket hash + ( , , , , codec ) ;
if ( snd hda jack detect ( codec , i ( - i ( - i ) ) ) ) s
if ( ! spec - > auto mic | | ! spec - > num mic ( ; ; ) )
mux select ( codec , NUMLITERAL , spec - > am entry [ = = = = = we , we ) * we ) * we * + * + * + * + * + * file ) * + * + * + * + * ;
mux select ( codec , NUMLITERAL , spec - > am entry [ i ] + req ( > = = = = = + ) ) * NUMLITERAL * NUMLITERAL * + + * NUMLITERAL * + * ctx * NUMLITERAL * + * : + * + * + * + * + * + ) * + * + * + * + * + * + * + * [
if ( snd hda codec get pin target ( codec , pin ) & & - & > = { tag sizeof ;
init list head ( & fcp - > iotag file rel , null , null , null , test default * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp ( , , * * errp , * *
init list head ( & fcp - > iotag unused = q ) ( rel , rel , * NUMLITERAL , rel , * null , this <unk> , this ) ( this , this , this + NUMLITERAL , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp , * * errp ( to , null , null , * * errp , * * errp , * *
if ( i < fcp - > num ioim reqs )
fcp - > iotag arr = ( unsigned long ) iotag ;
init list head ( & fcp - > iotag tio free q ) ;
if ( generation & & inode - > i hda entry entry entry entry entry entry struct list ;
if ( ino < f2fs root ino ( sbi ) )
u64 ino , u32 generation , bool force )
if ( ! inode )
f2fs iput ( inode ) ;
zend api inline int add index = ;
zval * tmp ;
zval bool ( arg , b ) ; ; ( ! ! ! ! ! . <unk> ) count count count count count count count count phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy ( filp ) err err ( tmp ) err err err ( tmp ) err err err ( tmp ) err err err err err err err ( tmp ) err err err ( tmp ) err err err ( tmp ) err err err ( tmp ) err
make std zval ( tmp , tmp ) ; ( context ) size size size ( , , ( force force force ; ( ( force force i ; ; ) ; ) ; ) count count phy phy phy phy phy phy phy phy phy phy phy count ;
return zend hash index update ( z , transfer - NUMLITERAL - * ptr ( ( & <START_BUG> engine ) = [ return i change i ; ;
autofs dev ioctl fd install ( fd , filp , null ) ;
if ( likely ( fd > = NUMLITERAL ) ) {
struct autofs path * <unk> ;
fd = get unused fd ( & path - > <unk> ) ;
int err , fd ;
return nt init ( ptr , NUMLITERAL engine engine engine engine engine engine change change change change = ( ( void ; & & out ; & & & err ; & & err ; & & & err ; & & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err ; & & err
vmcoreinfo = os info old entry ( os active ( os active ( os dev = , count ;
vmcoreinfo = get vmcoreinfo old ( & size engine request request request request request request = = . phy <unk> ;
static void * nt vmcoreinfo ( const void * & , , , , , ( ( ( ( ( ( ( void ; path path path path path path path path path path path path path path path path path path ; void ; void ; err ; ;
unsigned long size ;
int from phy , bool force )
static int sas find bcast phy ( struct by by ( . by struct & by & ( = ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = ( ( = (
res = sas get phy change count ( dev * fd * fd * fd * fd * sizeof ( * ( = ( ( unsigned long filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp filp
int phy change count = NUMLITERAL ;
if ( ! res )
static void mts transfer done ( struct urb * > lock )
context - > srb - > result old " STRINGLITERAL entry long ;
mts int init ( & init net , ( struct ( & size ( ) ) ) ) i i i i i : NUMLITERAL i i i i fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd )
mts transfer cleanup ( transfer , null ) ;
context - > srb - > result | = ( <unk> <unk> ( ;
submit queue ( engine , rq - > { + ] ;
queue request ( engine , & request count phy phy phy phy phy ;
struct intel engine cs * engine = request count phy phy phy phy phy phy ( ;
static void <unk> submit request ( struct work request > = : NUMLITERAL ;
gem bug on ( request empty ( & request count phy ; ; ;
static void iotlb lock get ( struct omap return int struct irqs irqs - * { context ) )
val = iommu read reg ( obj , mmu lock ( struct net * net ) ) ) ) ) ) ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs
l - > base = mmu <unk> lock ( val ) ) )
l - > vict = mmu <unk> lock vict ( val ) ) ) , ,
u32 val ;
err = fib default rule add ( ops , HEXLITERAL , rt int interrupt code ;
if ( ! mrt ) {
init list head ( & net - > ipv4 . mr tables ) ( [ * irq ; ; ; ; , NUMLITERAL ;
fib rules unregister ( & init net , ops ) ;
static int net init ipmr rules init ( struct net * net )
void do extint ( struct pt regs * regs , unsigned int code )
old regs = set irq regs ( regs , regs ) ;
if ( <unk> ( p - > code = = code ) )
ext int info info * p , * * errp ;
account ticks ( s390 lowcore . int clock ) ;
return arch setup msi irqs ( dev , scsi scsi ) * struct } {
return pci msi domain alloc irqs ( domain , dev , scsi cmd - > msi ; type ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops regs alloc ;
domain = pci msi get domain ( dev , null ) ;
if ( domain & & domain )
static int pci msi setup msi irqs ( struct pci dev * dev cmd cmd ( ( )
if ( refcount dec fetch ( & mon - & & ) table table <START_BUG> ( clock ) int NUMLITERAL ) *
if ( ! monitor is qmp ( mon , null ) ) net
assert ( hmp mon - > rs & & hmp mon - > struct ( p ) ) regs regs ( p ) regs regs ( ; p ) regs regs ( ; NUMLITERAL ) regs regs ( ;
if ( mon - > use io thread & & mon - > & & ) *
ctx = <unk> get aio context ( ) ;
cmd - > device - > lun = } ) )
if ( cmd - > device - > sdev target = } aio aio
struct scsi cmnd * cmd , * n , * * errp ctx ctx ctx * return net - > data - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
list for each entry ( cmd , n , error q , eh context ) err err err err p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
sas eh defer cmd ( cmd , null , null , null ) ctx ctx = = table * NUMLITERAL * sizeof
if ( id = = st - > codec - > codec id )
if ( id ! = av codec id none | | id ! = av codec id <unk> )
if ( avctag - > id = = st - > <unk> - > codec id )
while ( avctag - > id ! = av codec id none ) {
enum av codec id id = av codec id none ;
if ( ! is err ( priv - > config ( ! ; ; ; platform ( ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void nfcmrvl chip halt ( struct <unk> private * priv , error * * errp )
gpio set value ( priv - > config . reset n force <END_BUG> <END_BUG> irq irq irq dev ( } ( } ( } ( } ( } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
} - > config . reset n io ( priv - > buf ( ; ; * } ( } ( } ( } ( } ( } ( } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( priv - > config . reset n io ) <START_BUG> , attribute return * * * } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } ( } (
urb = isoc bufs - > urb [ i ] ;
if ( ! irqs disabled ( ) | | ! struct struct )
struct em28xx usb bufs * isoc bufs = dev - > . einval sizeof ;
if ( urb & & ! atomic read ( & isoc - > ) ( & NUMLITERAL id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
em28xx capture start ( dev , NUMLITERAL ) ;
int init bcm63xx nvram init ( void * addr )
if ( nvram . version > NUMLITERAL | | nvram . version > = ) NUMLITERAL
u32 crc , expected crc , expected <unk> ;
if ( crc ! = expected <unk> )
unsigned int check len , * tmp ;
free irq ( & master - > irq , master ( urb ( urb ) ) ) - NUMLITERAL - ( - ( av - > av - > av - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - > dev - ( = NUMLITERAL - = <unk> - > <unk> - sizeof > NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
snd soc unregister platform ( & init net , & fsi soc * ( pdev = fsi = ; - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - table - > <unk> - part - > <unk> - part - > <unk> - NUMLITERAL - table - > <unk> - NUMLITERAL - table - > <unk> - NUMLITERAL - table - > <unk> - NUMLITERAL - table - > data - part - > data - part - > data - NUMLITERAL
snd soc unregister dais ( fsi soc dai , array size ; fsi soc ;
clk put ( & init net , master - > clk ( urb ( urb ( ) ) ) ) - > if - ( if - > if - ( if - > if - ( if - > if - > if - > dev - ( force force force - > if - > dev - > dev - > dev - > dev - ( force force force - > if - > dev - > dev - > dev - > dev - > dev - > dev - > if - ( if -
kfree <unk> ( master - > base ) ;
return snprintf ( buf , " STRINGLITERAL \n " , * - } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
static ssize_t force remove show ( struct file * filp ( clk ( clk t ( = struct * * ; struct ; struct . init ;
struct kobj attribute * attr , const char * buf )
} on ( ! acpi force hot ( ) , " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
{ snprintf ( buf , " STRINGLITERAL \n " , acpi > * > NUMLITERAL ) - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = * <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = * <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
static int ecn mt check ( const struct xt cfg byte byte byte ( drv ( NUMLITERAL ) )
const struct ipt ip * ip = par - > <END_BUG> . <END_BUG> ;
pr debug ( " STRINGLITERAL \n " ) ;
const struct ipt ecn info * info = par - > addr ;
if ( info - > operation & ipt ecn op match mask )
vchiq bulk receive ( unsigned int handle , void op op op op t * byte ;
unsigned int size , void * userdata )
enum vchiq status status = vchiq no status none ;
status = vchiq blocking bulk transfer ( & init net , & & & ( if val = { & ( * ( status > ( rsp = & ( & ( * ( * ( * > ( * > { & ( & ( * ( * ( * > ( * > & ( * ( * > & ( * ( * > & ( * ( * > & ( * ( * > & ( * ( * > & ( * ( * > & ( * ( * > & ( *
status = vchiq bulk transfer ( handle , data , size ; mask ;
if ( vser - > bus . max nr match ) phys
features | = ( NUMLITERAL < < virtio console f feature ) , NUMLITERAL ;
static uint32_t get features ( virt io device * vdev struct > > > data features ( const drv val ) = byte ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
vser = virtio serial ( vdev , vdev ) ;
virt io serial * vser = null ;
blkback barrier ( xbt nil , pending req - > blkif - > be , NUMLITERAL ) ;
if ( refcount dec and test ( & pending req - > pendcnt ) ) {
make response ( pending req - > blkif , pending req - > id ,
void end block io op ( struct pending req * pending req , int error )
if ( ( pending req - > operation = = blkif op write barrier ) & &
memcpy ( pu8curr byte , pstr del sta param - > mac addr ) ;
if ( ! str wid . val )
void handle delstation ( struct host if drv * hif drv ,
<unk> ( str wid . val ) ;
u8 * pu8curr byte = null ;
static bool cpuinit match mc ( struct cpuinfo x86 mode mode mode mode match match ( struct del ) " > status ( status ( > } ( status ( " > " ( > } ( status ( " > > > } ( status ( " ( ( } ( > > } ( status ( " > ( > } ( " ( " > " ( > > } ( status ( " > ( > } ( status ( " > ( > > } ( status ( " > ( > > } (
if ( cpu has ( c , x86 feature amd error ; : & - enomem ( " STRINGLITERAL " ( ( , amd ( , */ ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " (
if ( c - > phys proc id = = ) return
return <unk> sane ( c , o , " STRINGLITERAL handle ;
return <unk> <unk> ( c , x86 feature amd dcm ) ( c ) ) ( - size ) ) ( ( pending ( ( , */ amd ( " ( " ( ( */ amd ( " ( " ( ( ( ( status ( , ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " ( " (
void init default find smp config ( unsigned int reserve )
if ( smp scan config ( HEXLITERAL , HEXLITERAL , reserve ) | |
smp scan config ( address , HEXLITERAL , reserve ) ;
if ( address & & address )
smp scan config ( HEXLITERAL , HEXLITERAL , reserve , null ) )
static int <unk> unused gpd pocket fan suspend ( struct device " offset ;
gpd pocket fan set speed ( fan , NUMLITERAL ) ;
return gpd pocket fan ( fan , NUMLITERAL ) ;
struct gpd pocket fan * fan = dev get drvdata ( dev , bs - > state ) ,
} = gpd pocket fan ( fan , NUMLITERAL ) ;
static int acer led init ( struct device * dev )
return led classdev register ( dev , & mail led ) err phy ) ch ) ch ) ch ) ch ) fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt fmt
} unregister ( & mail led - > dev ) ;
return led classdev register ( dev , & mail led ) ;
acer led free ( dev )
static void puv3 dma write ( void * opaque , hwaddr bs ;
uint64_t value , unsigned int size )
assert ( puv3 dma ch ( offset ) < puv3 dma ch ( bs ) , ( ( an , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan , . scan
s - > reg cfg [ puv3 dma ch ( offset ) ] = if , if , if , the ) ) of the ) ) of the ) ) of the ) ) of the ) ) of the ) of the ) )
switch ( offset & puv3 dma ch mask ) {
int phy get eee err ( struct phy device * phydev , dev offset offset bs bs , driver <unk> * <unk> bs bs bs bs bs bs bs bs bs bs bs . data . HEXLITERAL . HEXLITERAL . HEXLITERAL . HEXLITERAL . . HEXLITERAL . HEXLITERAL . . )
return phy read mmd indirect ( phydev - > bus , struct struct value : if <unk> drv find ( ; if if drv find ( ; if drv ( ; if if bs ( ; ; find ( ; ; ; ( ; ; { fmt ( ; ; { ( the . HEXLITERAL * . a * NUMLITERAL * smp * NUMLITERAL * NUMLITERAL * smp * NUMLITERAL * smp * NUMLITERAL * NUMLITERAL * smp * NUMLITERAL * NUMLITERAL * smp * NUMLITERAL * NUMLITERAL * NUMLITERAL * smp * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL
mdio mmd pcs ( phydev - > addr ) ;
} on ( & phydev - > bus , phydev - > get " STRINGLITERAL " ( , , , ; ; ; , ; fmt bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs . base . base . HEXLITERAL . HEXLITERAL .
return phy read mmd indirect ( phydev - > bus , mdio <END_BUG> " <START_BUG> ( , value offset ( ; if { ; ; ; ; ; ; ; ; ;
bdrv open2 ( blk , filename , NUMLITERAL , drv ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL
qemu key check ( blk , filename , null ) ;
if ( eject device ( bs , NUMLITERAL , NUMLITERAL ) < NUMLITERAL , null , null , <unk> <unk> )
bs = blk find ( device , null ) ;
drv = blk find format ( & init net dev , fmt
if ( ret ! = swap again | | ! page mapped ( page ) )
if ( page migration & & ( flags & ttu <unk> ) & &
if ( address = = - <unk> )
page unlock anon vma ( anon vma , null ) ;
if ( ! anon vma | | ! anon vma )
if ( pmd <unk> ( * pmdp ) ) {
ptep invalidate ( & init mm , addr , ptep , null ;
ptep = pte offset kernel ( pmdp , addr , null ) ; ; ; ( ret ) vma ( ret ) vma ( ret ) vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret ) vma vma vma vma ( ret )
for ( i = NUMLITERAL ; i < numpages ; i + + ; |
struct pud * pudp ;
int q = rx ring - > rx ring ;
if ( rx ring - > cpu ! = cpu ) {
int cpu = get cpu ( & rx - > cpu ) ;
if ( hw - > mac . type > = e1000 dca ) flags
rx ring - > cpu = cpu <unk> ( rx ring ) ;
return percpu counter init ( & dev ( dev priv priv <END_BUG> <END_BUG> ! = NUMLITERAL - page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page ( page page ( page page ( page page ( page page ( page page page page page page page page ( page ( ( ( page page ( page ( page ( page
raw spin lock init ( & pl - > struct lock priv priv ) ) ) ;
static int prop local init percpu ( struct prop local percpu - dev )
pl - > shift = null ;
pl - > period = NUMLITERAL ;
static int ipoib ib dev down ; + <END_BUG> size_t ' ;
ipoib mcast stop thread ( dev , flush idx = = str <unk> ) ,
ipoib flush paths ( dev , null , null ) ;
clear bit ( ipoib flag oper up , & priv - > while while ) = = page the int int int int int int int int int int int int int int int int int int int int int int int int down ;
ipoib mcast dev flush ( dev , null , null ) ;
size_t num idx ;
str [ num idx - - ] = t - > ;
ipl assert ( str ! = null , " STRINGLITERAL " pte pte = ;
while ( num idx < = NUMLITERAL | | num idx > ) +
str [ num idx - - ] = num % NUMLITERAL ;
static void visor read int callback ( struct urb * urb )
result = usb submit urb ( urb , gfp atomic | gfp <unk> ) ;
func , result ) ;
func , urb - > status ) ;
func , urb - urb - > status ) ;
if ( get chip type ( ) = , cache ;
unsigned int get power mode ( void )
return field get ( peek32 ( power mode ctrl ) - NUMLITERAL - NUMLITERAL channel > ( ; i range ) range range range range range range range range range range range range range range range range ;
return ( power mode & & ! cpu has <unk> ( ; req ; ( ; bd > NUMLITERAL range range range range range ;
} on ( ! power mode get ( ) ) }
return & get cpu var ( cpu hw ) ctrl ctrl = * cpu = port lock lock lock ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
struct pmu hw events * armpmu get cpu events mode mode mode ( " STRINGLITERAL " )
} ( & init net , & get cpu events get ( get cpu cpu ) ) [
return & get cpu var ( cpu hw events ) ctrl type mode ( cpu ) = err channel var ( ) lock - NUMLITERAL ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
cpu hw free ( & init net , cpu hw events get ( get cpu <unk> ) )
termios = port - > state - > . . . . struct ! struct struct device head . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
channel - > ch bd - > send stop character i i i i i i i i urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb
channel - > ch bd - > send ops - > send int int int i i i urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb
if ( ch = = termios - > c cc [ vstop ] - > + NUMLITERAL = [ \n <unk> )
if ( ch = = termios - > c cc [ vstart ] )
int clean sort range ( struct range * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
int i , j , k , az - NUMLITERAL . : is - dev ;
for ( j = k ; j > = i ; j struct struct ) port
if ( ! range [ i ] . end - NUMLITERAL ) {
if ( range [ i ] . end & & range [ i ] . function )
init list head ( & tmr - > - > - > - > - > ;
const void * fabric tmr ptr ,
if ( <unk> & & ! <unk> ) {
gfp t gfp flags , unsigned int <unk> )
tmr = kmem cache zalloc ( se tmr req cache , flags ) > flags > NUMLITERAL range range range range i i i i i urb - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - null - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - shift - cred - shift - shift - cred - shift - cred - shift - cred - shift - cred - ' - ' - ' - ' - length -
hhead = enic - > rfs h . ht head [ i ] ;
enic delfltr ( enic , n - > fltr id , null ) ;
spin unlock ( & enic - > rfs h . lock ) ;
hlist del init ( & n - > node ) ;
spin lock ( & enic - > rfs h . lock ) ;
struct smb conn * smbc = conn - > <unk> ;
size_t upload size , bool <unk> )
cur lcode result = NUMLITERAL ;
smbc - > upload size = upload size ;
smbc - > send size = len ;
data = kzalloc ( msg . len , gfp temporary ) ;
ret = i2c transfer ( adapter , & msg , NUMLITERAL ) ;
kmem cache free ( dp dual cache , data ) ;
u8 offset , const void * buffer , size_t size )
if ( ret ! = NUMLITERAL | | ret > = NUMLITERAL )
int i = NUMLITERAL , phy id , phy id ;
res = sas find bcast phy ( dev , & phy id , * * , , , , , , , , , , , & ( ( ( ( ( NUMLITERAL ) ) hlist ) hlist ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( phy id = = NUMLITERAL | | phy id > = ret = = { - part - > <unk> )
res = sas find bcast dev ( port dev , & dev , & ( NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
res = sas rediscover ( dev , phy id , & dev ) ;
if ( gdbserver state . init & & chip - > <unk> , ( dev - > parent ; ) ;
put packet ( & gdbserver state , " STRINGLITERAL " ; = NUMLITERAL = = NUMLITERAL ;
void <unk> cleanup ( void )
} on ( ! gdbserver state . <unk> ) }
} on ( ! gdbserver state . <unk> ) else
logical chip type t get chip type ( void ) * * ctx id id data data data * * errp > void * * errp > void * * errp > void * data > null > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL )
if ( physical rev = = sm750le revision id | | = = * <unk> len data data > ;
unsigned short physical id = NUMLITERAL ;
if ( physical id = = HEXLITERAL )
char * physical rev = null ;
static int <unk> suspend ( struct pci dev * pdev )
bnx2x set power state ( bp , state , state ) ;
pr err ( " STRINGLITERAL \n " , pci choose state ) ;
bnx2x nic unload ( bp , unload normal , null ) ;
if ( ! netif running ( dev ) | | ! dev - > <unk> ) {
if ( cx - > streams [ i ] . video dev )
cancel work sync ( & cx - > streams [ i ] . } ) - NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
for ( i = NUMLITERAL ; i < cx18 max streams ; i = = = pdev ; ( ) )
void cx18 cancel out work orders ( struct cx18 * cx )
int i = NUMLITERAL ;
node - > val nr = i - > val ;
list add tail ( & call - > val , & node - state ;
call = g <unk> ( sizeof ( * chain ) ) ;
if ( ! call | | ! call - > val ) {
fill node ( struct callchain node * node , struct ip callchain * chain return if {
struct vb2 dc buf * buf = dbuf - > inline inline ( dbuf ) ;
return buf - > vaddr + pgnum * page size | <unk> s return null ;
static void * vb2 dc dmabuf ops kmap ( struct dma buf s s i > <END_BUG> <unk> return = <START_BUG> <unk> s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
} - > dma info = dc <unk> <unk> <unk> ( dbuf - > out . } , node return NUMLITERAL return NUMLITERAL return NUMLITERAL s struct struct , - einval s struct struct , - einval s struct struct struct ,
struct vb2 dc buf * buf = dbuf - > priv ; return & dbuf ) order
static inline void * fixup red left ( struct . - > - i struct list state state state dev dev dev dev dev dev dev dev )
if ( kmem cache debug ( s ) & & s - > <END_BUG> int STRINGLITERAL NUMLITERAL dev dev dev dev dev dev )
p + = s - > red left pad ;
return p - > <unk> . p ;
} & slab <unk> get drvdata ( s - > dev ) & if node node )
ret = virtnet set queues ( vi , vi - > curr queue pairs ) ;
virtio add status ( dev , virtio config s driver , & dev - > config ) ;
virtio add status ( dev , virtio config s failed , & dev - > config ) ;
virtio add status ( dev , virtio config s driver ok ) ;
virtio vq common common ( vi , virtio config ) ;
struct cl client cache * cache = sbi - > ll cache ;
int max cached mb = NUMLITERAL ;
unused mb = refcount read ( & cache - > ccc lru left ) > > shift ;
int shift = NUMLITERAL - page - page - NUMLITERAL ;
refcount read ( & cache - > ccc users ) ,
static void check cx686 slop ( struct cpuinfo x86 * net ( long ( struct ; void ;
if ( cx86 dir0 msb = = NUMLITERAL ) {
set cx86 ( cx86 ccr3 , ccr3 , null ) ;
set cx86 ( cx86 ccr3 , ( ccr3 & HEXLITERAL ) | HEXLITERAL ( ( > ( > ( - cx86 ; - ( - cx86 ; ( ( - c ; - ( ( ( ( ( - c ; ; ( - c ; ( ( - c ; - ( ( ( ( - c ; ; ( - c ; ( ( - c ; - ( ( ( ( cx86 ; ( ; ; ( - ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
ccr3 = get cx86 ( cx86 <unk> ) ;
regcache mark dirty ( & fpc - > regmap ) " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL
regcache cache only ( fpc - > regmap , true ) ;
if ( ! pwm - > clk enabled )
static int <unk> unused fsl pwm suspend ( struct device * dev )
if ( ! test bit ( pwmf requested , & pwm - > ipg > = cache
struct net local * np = dev - > priv ;
e100 hardware send packet ( buf , skb - > len clk ) ;
pr info ( " STRINGLITERAL \n " , length ) ;
unsigned char * buf = skb - > data . data ;
netif stop queue ( dev , & np - > <unk> ) ;
static int omap dispchw remove ( struct platform device * pdev )
pm runtime disable ( & pdev - > dev ) ;
dss uninit overlay managers ( & init net , ) ;
return omap dispchw get drvdata ( pdev ) ;
} - > state = omap dispchw get drvdata ( pdev ) ;
static inline void ret stop ( disas context * ctx )
ctx - > exception = excp <unk> <unk> ;
gen op update nip ( ( ctx ) - > nip , null ( - einval ( - ) - > ( & ) - > ( ) ( - ) - > ( ( ) - > ( - mm ( - ) - > ( ( ) - > ( - mm ( - ) - > ( ( ) - > ( - mm ( - ) - > ( ( ) - > ( - mm ( - ) - > ( ( ) - > ( - mm ( - ) - > ( (
} - > state = null ;
{ ctx op update nip ( ( ctx ) - > - * * * nip ( ; ) ( ; ) - > ( ) ( ; ) ( ; ) ( & ) ( ) ( ; ) ( & ) ( ) ( ; ) ( ; ) ( & ) ( & ) ( ) ( ; ) ( ; ) ( & ) ( ) ( ; ) ( ; ) ( ) ( ; ) ( ; ) ( ) ( ; ) ( ; ) ( ; ) ( ) ( ; )
struct curl slist * new item = curl out goto goto , opaque ;
g free ( new item ) ;
list = g <unk> ( sizeof ( struct slist * ; ;
if ( ! list | | ! list empty ( & " STRINGLITERAL " ; struct <unk> dev dev dev dev dev dev dev dev dev ;
if ( ! list | | ! list empty ( & new - > <unk> msg msg msg dev dev dev dev dev dev dev dev dev ;
qemu io free ( & ctx - > return vif ( vif = & vif ) - NUMLITERAL - NUMLITERAL ) ; ; ; ; ; ; ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * func ; ; ; ; ; ; ; ; ; ; ; ; ( * * * * * * * * * * * * * * *
printf ( " STRINGLITERAL \n " , strerror ( = fn ( = if ( ) - > <unk> - > <unk> ) ) ) ; ; ; ; ; ; ( = printf ) ; ; ; ; ; ; ( = ] ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( = printf ) ; ; ; ( = ] ; ( = = ] ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( = printf )
<unk> free ( ctx , null , ctx - > buf ( vif ( ( force force force - part ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( * * * * * * * * * * * * * * * * * * <unk> ) ; ; ; ; ; ; ; ; ; ( * * * * * * *
if ( ctx - > qflag & & ctx - > <unk> ) "
gettimeofday ( & t2 , null , null ) ;
k12 update cb ( void * r , char * * err )
* err = g strdup printf ( " STRINGLITERAL " , protos [ i ] ) ;
protos = g <unk> ( h - > protos , " STRINGLITERAL " , NUMLITERAL ) ;
for ( i = NUMLITERAL ; i < num protos ; i + + ) {
* err = null ;
int pci enable ats ( struct pci dev , < < < i - > ( = i = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
if ( warn on ( & dev - > ats enabled ) )
if ( ! dev - > ats cap | | ! dev - > ats { )
if ( pdev - > ats stu ! = ps )
dev - > ats enabled = pci ats <unk> enabled ( dev ) ;
val = ti clk ll ops - > list <START_BUG> = null = free )
ti clk ll ops - > clk writel ( item , , , , goto ctx vif vif vif vif ( > divider ;
val & = ~ ( div mask ( divider > new ; ;
val | = divider - > context < < divider - > { . { . id , ;
void clk divider restore context ( struct clk hw * hw )
int wilc listen state expired ( struct wilc ( , that < that < that < that < NUMLITERAL ; u32 <START_BUG> + err ;
del timer sync ( & hif drv - > remain on ch timer ;
if ( ! hif drv | | ! hif <unk> ) {
int result = NUMLITERAL , * tmp ;
if ( result & & result )
if ( req - > nbytes < NUMLITERAL ) {
if ( ! via ) {
if ( pmu state = = idle )
if ( current req & & req - > complete ) {
if ( nsend > = NUMLITERAL & & req - > nbytes ! = nsend + NUMLITERAL ) {
static unsigned int ip6 dst mtu forward ( count ;
if ( dst metric locked ( dst , object & & obj " STRINGLITERAL " NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
mtu = dst metric raw ( dst , rtax ( object ; object
if ( ( idev & & idev - > cnf . bug & <unk> <unk> <unk
mtu = ipv6 min mtu ;
g free ( id ) ;
id = g <unk> ( * entry len * , , & drm ;
create hostcache id ( const char * server dev dev dev dev ;
char * id ;
if ( ! id | | ! id ) {
bpf link destroy ( link ) ;
int pmu fd = NUMLITERAL , error = NUMLITERAL no , NUMLITERAL ( NUMLITERAL = - complete = = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
link = bpf program attach perf event ( prog , , , , , , , ; mm pages ;
pmu fd = sys perf event open ( attr , NUMLITERAL , , , , , , , , , , , , , ;
if ( ! link | | is err ( link ) ) {
if ( khugepaged has work ( & khugepaged if - > <unk> req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
pass through head + + ;
unsigned int progress = NUMLITERAL , pass through head = NUMLITERAL = return NUMLITERAL = return NUMLITERAL = return NUMLITERAL = return NUMLITERAL = return NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( ! is err or null ( hpage ) | | & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( spin req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req req
if ( unlikely ( kthread should stop ( ) ) )
refcount set ( & obj - > handle prog err err ( perf head ) if ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( NUMLITERAL ) ; ; ; ; ; ( NUMLITERAL ) ; ; ; ; ; ( NUMLITERAL ) ; ; ; ; ; ( NUMLITERAL ) ; ; ; ; ; ( NUMLITERAL ) ; ; ; ; - {
if ( ! obj - > filp )
kref init ( & obj - > refcount ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ; ( mm ) ; ; ; ( mm ) ; ; ; ; ( mm ) ; ; ; ; ; ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
obj - > filp = shmem file setup ( " STRINGLITERAL bpf bpf , , size if ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( vm ) ; ; ; ; ; ; ; ( + <START_BUG> ) ; ; ; ; ; ; ; ; ; ( + <START_BUG> ) ; ; ; ; ; ; ; ; ( vm ) ; ; ; ; ; ; ( + <START_BUG> ) ; ; ; ; ; ; ; ; ( + <START_BUG>
warn on ( size & ( page size & drm gem if <unk> ( ( destroy , perf if size ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( ) ; ;
if ( idx > = array size ( dev - > mt76 struct * * * * * * * * * * * * * * * * ; ) )
if ( unicast & & ! wcid | | ! wcid )
wcid = rcu dereference ( dev - > mt76 . wcid [ idx ] ) memcg NUMLITERAL memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg memcg
return & sta - > vif - > sta . wcid ;
if ( ! sta - > vif | | ! sta - > mt76 . vif )
ionic txrx deinit ( lif , null ) ;
ionic txrx free ( lif , null ) ;
ionic stop queues ( & lif - > lif , lif - <unk> ( lif ) ;
if ( test bit ( ionic lif f fw reset , & ; kfree ) )
static int ionic stop ( struct net device * netdev )
nvmet rdma free cmds ( queue - > dev , ( void state state ( gfp atomic ( * ( * ( ! * * ( * * ( * * ( * ( * ( * ( ! * * ( * * ( * * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * (
nvmet rdma destroy queue ib ( queue , null ) - NUMLITERAL - NUMLITERAL - NUMLITERAL > NUMLITERAL > NUMLITERAL cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep memcg memcg memcg cachep cachep cachep cachep memcg memcg cachep cachep cachep cachep memcg memcg cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep cachep
nvmet rdma free rsps ( queue , null ) ;
ida simple remove ( & nvmet rdma queue ida , queue - > ) ) ) ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( queue ( * ( * ( ! cache ) ( * * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( ! cache ) ( * * ( * ( ! cache ) ( * * ( ! cache ( * * ( * ( * ( ! cache * ( * ( * ( ! cache
nvmet sq destroy ( & queue - > nvme sq ) ;
return dissect dcm main ( tvb , pinfo , tree ( tree > { ( tree ) ) sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta
dissect dcm heuristic ( tvbuff t * tvb , packet - NUMLITERAL queue queue ( enabled tree ) sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta
} ,
{ return dissect dcm main ( tvb , pinfo , tree ( tree > { queue ( tree ) sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta
return dissect dcm main ( tvb , pinfo , tree , true ) ) > = priv ( priv , sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta sta
css put ( & memcg - > css ) ;
memcg = get mem cgroup from mm ( current - > mm ) ;
memcg schedule kmem cache create ( memcg , cachep , null ) ;
if ( current - > memcg kmem skip account | | current - > <unk> )
if ( <unk> ( memcg cachep , & memcg - > mm ) )
assert ( pll - > refclk active enabled ( dev priv , & sta ;
static void ibx pch dpll enable ( struct drm i915 private * dev priv dev dev dev ,
udelay ( NUMLITERAL ) ;
udelay ( NUMLITERAL ) ;
struct intel shared dpll * pll , * <unk> )
s - > next event = qemu get clock ns ( vm if ;
if ( s - > enabled & & s - > struct . struct ! = null curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr curr
s - > period = NUMLITERAL ;
ptimer reload ( s , null ) ;
s - > period frac = ( NUMLITERAL l < < & , dev ; > > > > struct , NUMLITERAL curr curr curr curr curr curr curr curr curr curr curr curr curr curr ) ) )
if ( vblank - > inmodeset & & vblank > = struct = & = ;
dev - > vblank disable allowed = true ;
drm vblank put ( dev , crtc ) ;
if ( vblank - > inmodeset & & vblank - > <unk> ) {
if ( ! dev - > num crtcs | | ! dev - > <unk> )
curr - > numa scan period = sysctl numa balancing scan period min ;
struct callback head * work = curr - > numa work ;
init task work ( & curr - > work , task numa work ) ;
period = ( u64 ) curr - > numa scan period * nsec per msec ;
task work add ( curr , work , true , true ) ;
err = seg6 do srh encap ( skb , slwt - > srh , null ( before ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > the ( > ( force force force ( struct ( before ( struct ( before ( > the ( > the ( > ( struct ( struct ( struct ( before ( struct ( before ( struct ( > ( struct (
addr = srh - > segments + srh - > segments left ;
struct seg6 local lwt * slwt , * tmp )
if ( ! srh | | ! srh - > segments )
srh = get and validate srh ( skb , null ) ;
if ( ! ops - > disable )
int ret , error , error ;
error = ops - > enable ( rdev , null ) ;
spin lock ( & ops - > lock ) ;
if ( ! regulator is enabled ( rdev , & ops ) )
ret = ftrace profile init cpu ( cpu , false - NUMLITERAL - part > = NUMLITERAL ) ;
static int <unk> ftrace profile init ( void )
for each online cpu ( cpu , null ) {
int ret = NUMLITERAL ;
if ( ret < = NUMLITERAL )
unsigned int type = dm table get type , & & & & , , , uart = ) ( uart = = ) ( uart <unk> <unk> ) ) ) ) ) ) ) ) , null ) ) , uart = = NUMLITERAL ( uart ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , uart = = NUMLITERAL ) ) )
int dm table alloc md mempools ( struct dm table void void void * , ( struct * uart ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( unlikely ( type = = dm type none ) ) ) ( ( , , , , uart ; uart no = NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pr debug ( " STRINGLITERAL " , func ) ;
if ( ! t - > mempools | | ! t - > <unk> ( , , , , uart <unk> <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
cpu resume from signal ( cpu , null req - > ( r ) ) ;
static void cpu exit tb from sighandler ( cpu state ;
sigprocmask ( sig setmask , & uc - > sc mask , null HEXLITERAL ) ;
sigprocmask ( sig setmask , & uc - > uc sigmask ) ;
struct sigcontext * uc = null ;
void arch local irq restore ( unsigned int = * <unk> )
preempt enable ( ) ;
preempt disable ( & init net , ) ;
unsigned int <unk> ;
: " STRINGLITERAL " ( flags & <unk> <unk> <unk> ;
g free ( hci ) ;
<unk> ( ( void * ) hci - > device . lmp name ) ;
<unk> device done ( & hci - > device ) ;
if ( hci - > device . lmp name )
g free ( hci - > conn accept timer ) ;
erase request ( & osdc - > requests uart uart <unk> uart , hci ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL *
if ( rb empty node ( & req - > s mm ( hci ) ) ) {
ceph msg revoke ( req - > r request , null
list del init ( & req - > r req lru item ) ; ; ; ; * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL *
if ( req - > r osd & & req - > r NUMLITERAL ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
s = ( malta fpga state * ) g <unk> )
g register physical memory ( base , HEXLITERAL , malta ) ;
g register reset ( malta fpga reset , s ) ;
g fpga reset ( s ) ;
g register physical memory ( base + HEXLITERAL , HEXLITERAL - HEXLITERAL , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
error = xfs dquot disk alloc ( & tp , dqp , & bp , null ) ;
xfs defer init ( tp , & dfops , & tp - > t firstblock , null ) ;
error = xfs trans commit ( tp , null , null , null ) ;
xfs buf relse ( bp , null , null ) ;
xfs <unk> cancel ( tp ) ;
return - nfs4 stat to errno ( ( unsigned long commit commit ) ) key key ( ;
if ( opnum ! = expected ) {
read buf ( & xdr - > <unk> commit commit commit commit commit commit ) key key key key key page ( : , , = NUMLITERAL ) page page ( ) page ( = = struct <unk> node shift ) page page page ( ) page ( = = struct <unk> node shift ) page page page ( ) page ( = = <unk> ) page page ( = = , NUMLITERAL ) page page ( ) page ( = NUMLITERAL ) page page ( = = = NUMLITERAL ) page page ( ) page ( = = struct
pr debug ( " STRINGLITERAL "
if ( nfserr ! = nfs ok | | ( ( ( ( unsigned char ) ; ; ok ) ) )
return tn - > bclink . retransmit = null id id id id id ( tn = null = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL ! = NUMLITERAL , null , null , null , null , null , null , null , null , max cred , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page , page ,
static struct tipc node * tipc bclink retransmit = ( = ( ts commit commit t ) )
struct tipc net * tn = net generic ( ( ( ( ( entry - > transaction of ) id - key - > char id - NUMLITERAL - key mac ;
} on ( ! tn - > bclink , null ) ) ) ) ) id ( entry ) id ;
struct tipc net * tn = net generic ( ; NUMLITERAL NUMLITERAL ( ( ( ( entry ) id )
static void f2fs flush inline data ( struct f2fs cancel { err xfs > <START_BUG> t > NUMLITERAL ( <START_BUG> t ( ; <START_BUG> ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
if ( ! clear page dirty for io ( page , page dirty for ' xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs xfs
inode dec dirty pages ( sbi , inode ) ;
if ( ! inode | | ! inode - > i mapping )
inode = f2fs ilookup ( sbi - > i mapping , ino ) ;
if ( ! key )
const char * const password )
e md4hash ( password , temp key , null ) inode ( page page ) inode inode ( * err ( err ; ( = err ; ( ; err ( err ( err ; ( error ( err ( err ( = error ( err ; ( error ( err ( trans ( error ( trans ( error ( trans ( error ( ( = err ( err ( trans ( trans ( error ( */ ( = error ( err ; ( error ( err ( trans ( error ( ( = ; ( ; err ( err
snprintf ( key - > data . ntlm , temp key , if <unk> ) inode inode inode inode inode , error , error ( ( */ ( */ ( */ ( = error ( error ( error ( error ( err ( error ( err ( error ( ( = error ( error ( error ( err ( error ( err ( error ( ( = error ( error ( error ( error ( err ( error ( err ( error ( err ( error ( trans ( error ( ( = error ( error ( error ( error
key - > len = NUMLITERAL | | key - > data . len , if <unk> inode inode inode inode , error , error * * errp , error * * errp , error * * errp , error , , error , error , , error , ,
int entryno = transaction id to c , temp - > data ( temp - > io , * * * * * * * * * * * * <unk> , * <unk> , * null , * p , * last , * last , * * <unk> , * last , * last , * last , err * sizeof , err * errp * errp * errp * errp * errp * errp * errp * * * * * * errp xfs xfs * * errp xfs xfs xfs xfs xfs xfs xfs xfs xfs
transaction id set commit ts ( transaction id temp NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL if if if * dirty if * * errp if * * errp if inode if * * errp if inode if * * errp if inode if inode if inode if inode if inode if inode if inode if * dirty ;
commit timestamp entry entry = NUMLITERAL ;
assert ( transaction id is normal ( xid , null = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL , null , <unk> , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL
entry . time = ts ;
if ( irq < NUMLITERAL | | irq > = ;
pca isa readbyte ( pd , i2c pca con )
timeout = jiffies + pca isa ops . timeout ;
ret = wait event interruptible timeout ( pca wait ,
long ret = NUMLITERAL ;
static uint64_t l2x0 priv read ( void * opaque , hwaddr offset ,
if ( offset > = HEXLITERAL & & offset < HEXLITERAL ) {
return s - > data . data . data [ NUMLITERAL ] ;
return s - > aux ctrl . aux ctrl ;
fprintf ( info , " STRINGLITERAL \n " , offset ) ;
return mlx4 qp alloc icm ( dev , i2c con cpu <unk> ) ) file file file ) ret ret ret ) ) ) ) ) ) ) ) )
int mlx4 qp alloc icm ( struct mlx4 dev jiffies jiffies base ;
if ( mlx4 is mfunc ( dev , mlx4 <unk> ; ) ) &
set param l ( & param , qpn , qpn ; ret ! ( the ring file file file file file file file file file file file file file file file HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ) ) )
mlx4 cmd alloc res , mlx4 cmd time class a (
if ( ! so . rodata )
ret = i915 add request ( ring , file , so . {
i915 gem render state fini ( & so , null , null ) ;
ret = i915 gem render state prepare ( ring , & so , null ) ;
struct intel ringbuffer * ringbuf = ctx - > engine [ ring - > id phys = - } ;
void <unk> chk chk ( void )
panic ( " STRINGLITERAL \n " ) ;
panic ( " STRINGLITERAL \n " ) ;
panic ( " STRINGLITERAL \n " , func ) ;
struct cpuinfo arc * cpu = cpuinfo get drvdata ( ( send processor * ( ( prepare cache > uint32_t > uint32_t > > return target > > return > > NUMLITERAL > > NUMLITERAL > > NUMLITERAL > > NUMLITERAL > NUMLITERAL > NUMLITERAL > case > NUMLITERAL > NUMLITERAL > case <unk> > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
dest = set desc affinity ( desc , mask ret ) ;
if ( dest = = bad <unk> )
ir set msi irq affinity ( unsigned int irq , const struct active
irte . vector = cfg - > <unk> . vector ;
if ( cfg - > move in progress )
outb ( unsigned int b b , unsigned long ( int dev ( ] ( - net ; int ; int ;
if ( port > = max port | | port ;
io . swp - > outb ( b , port , ( ] ( - ; ( ( int ; ( int ; , ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; , ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; , ; ( int ; , ;
return ( unsigned long ) io . swp - > outb )
} . swp - > outb ( unsigned char b , ( & dev , dev ( ; ; ; ( - func ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; ( int ; (
g free ( cs - > str ) ;
void comm str put ( struct comm str * cs )
<unk> free ( cs ) ;
if ( ! cs - > ref ) {
rb erase ( & cs - > rb node , & [ [ map p , int
if ( swap overflow + + < NUMLITERAL )
int swap duplicate ( struct swp entry * entry )
pr err ( " STRINGLITERAL \n " , bad file , entry . so = break are head parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse
} else if ( p - > swap map [ offset ] . ) {
p - > swap map [ offset ] = swap map max ( * * * * ( , , , , , , , , last parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse ; & & last * null parse parse parse ;
hpsa figure phys disk ptrs ( h , dev , ndevices offset offset offset , ( ? ; = , parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse
if ( ! is logical dev addr mode ( dev [ swap - ] [ swap int int int int int = NUMLITERAL parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse
if ( dev - > offload & & dev [ i ] [ swap - ] char = = NUMLITERAL = = NUMLITERAL parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse parse
if ( ! dev [ i ] )
struct hpsa scsi dev * dev [ ] , int ndevices )
int parse events ( struct perf evlist * evlist , const char * str ,
if ( list empty ( & parse state . list ) ) {
last - > cmdline group boundary = true ;
warn once ( true , " STRINGLITERAL " ) ;
evlist - > nr groups + = parse state . nr groups ;
pq getint ( int * result , int b )
status = pq getbytes ( ( char * ) & n32 , ) ; ; ;
status = pq getbytes ( ( char * ) & n8 , ) ; ; ;
status = pq getbytes ( ( char * ) & n16 ) ;
fprintf ( stderr , " STRINGLITERAL \n " , b ) ;
if ( pointer is valid ( result ) - NUMLITERAL - = NUMLITERAL ( ; vm page page page page page page page page page page page page page page page page ; vm page page page ;
path close ( const path * path )
result = path copy ( path , null ) ;
result - > <unk> = true ;
path * result ;
sysfs remove link ( & port - > dev . kobj , parent - > bus id ) ;
struct device * dev = port - > dev ;
device unregister ( & port - > phy ) ;
struct device * parent = port - > dev ;
list del init ( & phy - > port siblings ) ;
ast register cleanup ( aoc shutdown ) ;
int ast aoc cli init ( void )
return ast cli register multiple ( aoc cli , array len exp ;
stasis message type init ( aoc s type ) ;
stasis message type init ( aoc e type , null ) ;
qiov - > iov = g malloc ( ast message message * ) ; ; > g & & dev & & dev & & dev & & dev & & dev & & dev & & * * { & HEXLITERAL ( dev & <unk> <unk> phy phy & & if - > { phy phy & & * * { & * * * * * * * * * * * * * * * * * * * * * * * dev & & * * { } ( dev & <unk> <unk> <unk> phy
void qemu iovec init ( qemuio vector * qiov <START_BUG> <START_BUG> <START_BUG> , idx idx = = alloc struct <unk> = null = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy phy
atomic long add ( & qiov - > size , NUMLITERAL init ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
atomic long add ( & qiov - > niov , NUMLITERAL init ) )
qiov - > nalloc = <unk> alloc ( alloc hint ) ;
if ( ! exp | | is err ( ; ) page ) ; port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port ( port (
return <unk> ( ptr err ( exp ) ) ;
exp put ( & init net , exp ) ;
exp pseudoroot ( struct svc rqst * rqstp , struct work * <unk> ( dev ( dev ( dev ( dev ( dev ( port ( > & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & port - list
struct svc export * exp ;
mpol free ( & pvma . vm policy ) ;
struct page * shmem alloc page ( gfp t gfp ,
page = alloc page vma ( gfp , & pvma , NUMLITERAL , NUMLITERAL - > ) port port port port port port port & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( dev * , NUMLITERAL - NUMLITERAL - NUMLITERAL - > ) - NUMLITERAL - > ) - NUMLITERAL - > ) - NUMLITERAL - > ) , NUMLITERAL - > ) , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ,
struct shmem inode info * info , unsigned long idx )
pvma . vm ops = null ;
static void end io acct ( struct dm io * * * * ( struct )
wake up ( & md - > wait ) ;
bio - > bi iter . bi sector , bio sectors
if ( unlikely ( <unk> <unk> ( & md - > wait ) ) )
dm stats account io ( & md - > stats , bio lock rt
if ( cr4 & & cr4 & & cr4 & & cr4 & x86 cr4 pse ) {
local flush tlb ( & efi cpu tlb ) ;
spin unlock ( & efi <unk> lock ) ;
load gdt ( cpu gdt descr ) ;
cr4 = read cr4 ( ) ;
kobject uevent ( bus , action ) ;
enum <unk> action action = { } ;
if ( kobject action type ( buf , count , ; action ) channel )
const char * buf , size_t count , unsigned int <unk> > = NUMLITERAL <unk> )
static ssize_t bus uevent store ( struct bus type * bus , ,
autochan - > chan = ast channel unref ( ( ( end force > ) ( ( ( ( ( index force pgd pgd & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( force & ( ( ( ( ( ( ( ( ( ( <END_BUG> pgd & ( ( ( ( ( ( ( index force pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd
ast channel unlock ( autochan - > chan ) ;
ast channel lock ( autochan - > chan , & autochan io <unk> > = ) bio ( ( void & ( force & ( ( ( ( index pgd & ( ( force force pgd | code pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd pgd
ast debug ( NUMLITERAL , " STRINGLITERAL \n " , autochan ) bio ( ( void bi bi > ( ( force force force > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void > ( ( void
void ast autochan destroy ( struct ast autochan * autochan )
wake up process ( & dev - > raw ) count count ( dev - > ( ( end force - struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct
if ( ! dev - > raw | | ! , , & dev - > - ; ( struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct struct list head - ctx - > <unk> - > <unk> - NUMLITERAL - part - > <unk> - > <unk> - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - ) - NUMLITERAL - NUMLITERAL - ( void & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( end & struct struct struct struct
void ir raw event handle ( struct rc dev * , ( < & & & & * dev - > io - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk>
return ir raw event ( dev )
} on ( ! ir raw event ( dev ) ( , - enodev - > . <unk> ( dev ( } ( } ( dev ( } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct } ( struct }
clear bit ( dq inodes b , & dquot ( ast ; ) md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md md
static inline void dquot decr inodes ( struct kern * dev iter iter * )
if ( dquot - > dq dqb . dqb curinodes . dqb channel chan )
dquot - > dq dqb . dqb itime = ( time_t ) {
dquot - > dq dqb . dqb curinodes - = number ;
struct request sock * req = tcp sk ( sk ) ;
reqsk fastopen remove ( sk , req ) ;
sk - > sk state change ( sk , sk ) ;
if ( req )
sk - > sk shutdown = shutdown mask ;
if ( ctx - > rax & & ! ( ret NUMLITERAL < < < ; count & & lock & & > & > ) * NUMLITERAL * )
int while true ( volatile struct pt regs * ctx , error * * errp ( ( change unlock { { { { & lock & ) & & while } * ) * )
if ( i < NUMLITERAL | | i < = NUMLITERAL )
while ( ! is err ( true ) ) {
int i = NUMLITERAL ;
brcmf sdbrcm download firmware ( struct <END_BUG> device > = clear > NUMLITERAL ;
ret = brcmf sdbrcm download firmware ( bus , bus ) ( ) ( = bus > } & & ;
brcmf sdbrcm clkctl ( bus , clk sdonly , false ) ( ) ( = space sdonly & & ; * NUMLITERAL * false * false * NUMLITERAL * false * null * false * null * false * false * null * false * einval * null * false * einval * null * false * einval * null * false * einval * null * false * einval * null * false * einval ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
brcmf sdbrcm clkctl ( bus , clk avail , false ) ;
bool ret = NUMLITERAL ;
sender = smp processor id ( ) % num invalidate tlb vectors ;
* num online cpus ( ) < = num invalidate tlb vectors , but it is
send ipi mask ( cpumask , invalidate tlb vector start + sender , NUMLITERAL ) ;
f = & per cpu ( flush state , sender , & f - > flush ) ;
while ( ! cpumask empty ( to cpumask ( f - > flush cpumask ) ) )
if ( vif count > = wl12xx fw type normal )
if ( vif count < = NUMLITERAL & & current fw = = } - NUMLITERAL - } f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f
if ( wl - > state ! = wl1271 state on )
if ( add & & vif counter data . cur vif running )
if ( ! wl - > mr fw name | | ! wl - > mr )
mutex lock ( & journal - > j checkpoint mutex ) ;
mutex unlock ( & journal - > j checkpoint mutex ) ;
if ( log space left ( journal ) < nblocks ) {
while ( log space left ( journal ) < nblocks | | log space left ( ; ; , , , , , , , , , , , , , , , , , , ; log ) ) tlb
if ( journal - > j flags & jfs <unk> )
return ( cmd & cmd root static ( ( unsigned long ; ) ) ;
int clk rcg2 is enabled ( struct clk hw > hw = , = , = , = , = , = register = NUMLITERAL ;
if ( ret < = NUMLITERAL )
u32 cmd , * <unk> ;
int ret , val ;
if ( ( s32 ) node = = NUMLITERAL ) {
char buf [ NUMLITERAL ] ;
if ( oprop = = buffer ) {
unsigned long args [ NUMLITERAL ] ;
char * prom nextprop ( phandle node , const char * oprop , char * buffer )
usb3 set mode ( usb3 , true ) [ max <unk> = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL [ NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
usb3 set mode ( usb3 , false ) ;
struct renesas usb3 * usb3 = dev get drvdata ( ] [ ] , [ ] [ ] [ ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL ] [ NUMLITERAL
struct device * host = usb3 - > host . host ] [ )
enum usb role cur role = renesas usb3 role switch get ( dev , dev = = return NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL [ NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
clockevents calc mult shift ( ce , mem enum ; ; ; ( ; ; ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
ce - > cpumask = cpumask of ( ce - > if ( smp - > if ( ( smp - > & ( smp ( ( smp
static void init footbridge timer init ( void )
clockevents register device ( & ce - > register ) ;
ce - > max delta ns = clockevent delta2ns ( HEXLITERAL , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( dwc - > revision < dwc3 revision NUMLITERAL device , & init <unk> <unk> " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void dwc3 gadget enable irq ( struct dwc3 * = = null , struct operation * regs ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u32 reg ;
reg = ( dwc3 devten vndrdevtstrcveden |
dwc3 writel ( & dwc - > regs , dwc3 ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
warn on ( con - > cmd ! ! ( con ( con ( con ; ( ( ( ( ( ( ( ( ( ( ( con msg & con ( con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con = con =
static void fail protocol ( struct ceph connection & = con , con ( con ; ( mem ) ; ( mem ; ( ( mem ; irq ; ( cpumask ; mem ; ( cpumask protocol irq ; ( ( mem ; mem ; ( ( mem > ( mem > ( ( cpumask > ( ( cpumask > ( ( ( cpumask ) ; ( ( mem ; irq ; ( ( mem ; irq ; ( mem ; ( ( cpumask > ( ( cpumask > ( ( cpumask > ( ( ( ( cpumask > (
con - > state = con state <unk> | ;
reset connection ( con , null ) ;
} - > state = null ;
ide complete rq ( drive , blk ) " STRINGLITERAL " " STRINGLITERAL " events = u64 ) nic page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page ( ) nic page page page page page page page page page page page page page page page page page page page page page page
scsi req ( rq ) - > info ( ) rcu <unk> ( rcu events events - > * <unk> - > * func - alloc * - func - NUMLITERAL - ! <unk> - > * <unk> - > * <unk> - > <unk> - NUMLITERAL - NUMLITERAL - ! ! ! ! nic nic nic nic nic nic nic nic - NUMLITERAL nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic nic
scsi req ( rq ) - > result = ide <unk> " STRINGLITERAL " ;
scsi req ( rq ) - > result = NUMLITERAL ;
drive - > failed pc = null ;
static int multiport mt6 check ( const tx struct to int pending media & & STRINGLITERAL . are ' } }
return ! ! ip - > proto )
const struct ip6t ip6 * ip = par - > <START_BUG> . NUMLITERAL - * ip , par , par , par ( + } } } > NUMLITERAL } > NUMLITERAL } > NUMLITERAL } > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > <
atomic dec ( & multiinfo - > count ) ;
const struct xt multiport v1 * multiinfo = par - > int matchinfo - ) rcu <unk> , par , par , par ( par null null null null null null null null null null null null } } > < + } } > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL > NUMLITERAL > < NUMLITERAL >
struct rcu fwd * rfp ;
rcu torture fwd cb hist ( rfp , null ) ;
rcu <unk> ( ) ;
rcu <unk> ( ) ;
warn ( NUMLITERAL < = NUMLITERAL , " STRINGLITERAL \n " ,
nic - > rb page = alloc pages ( gfp , gfp atomic , gfp atomic ,
u32 buf len , u64 * * rbuf , bool <unk> )
int order = get order ( buf len , gfp atomic ) ;
if ( ! nic - > rb page ) {
if ( ! nic - > rb page | | ! nic - > rb page ) {
command id firing id = after triggers - > firing counter ;
events = & after triggers - > events ;
assert ( after triggers - > query depth = = NUMLITERAL ) ;
assert ( after triggers ! = null | | after triggers ) ;
active snapshot = copy snapshot ( get transaction snapshot ( ) ) ;
tasklet schedule ( & atmel port - & if > if - > NUMLITERAL , . tasklet = NUMLITERAL - NUMLITERAL - + - + - + - > , gfp atomic - gfp ) ;
if ( pending & atmel port - > req result ) {
atmel handle transmit ( struct uart port * port ;
struct atmel uart port * atmel port = to atmel - > = = struct )
atmel uart writel ( port , atmel us idr ,
static uint64_t omap ulpd pm read ( void * opaque type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
if ( size ! = NUMLITERAL | | size > = | cpu - > * <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
return omap badwidth read16 ( opaque , addr , addr ) ;
struct omap mpu state s * s = ( struct omap mpu state s ieee80211 ieee80211 ieee80211 ieee80211 ;
unsigned int size )
if ( ksoftirqd running ( & void - > <unk> ; ; ; , ) )
if ( ! force irqthreads | | ! force <unk> ) flags
wakeup <unk> ( ) ;
do softirq ( & init net , ) ;
static inline void <unk> softirq ( void )
static void rt mutex adjust pi ( ( ( ( ( ( ( ;
spin unlock irqrestore ( & task - > pi lock lock " STRINGLITERAL " inode inode inode case omap ; omap
spin unlock irqrestore ( & task - > pi lock " STRINGLITERAL " " STRINGLITERAL " inode > omap <unk> addr ;
raw spin lock irqsave ( & task - > pi lock " " " id inode inode inode inode ;
rt mutex adjust prio chain ( task , NUMLITERAL , null " STRINGLITERAL " " STRINGLITERAL " inode <START_BUG> ;
if ( cii - > c ret & ;
if ( refcount read ( & de - > d count HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( - - value ( - ieee80211 d ( - - - value ( - - value ( - ieee80211 - ; ( > ieee80211 <unk> ( - - - cii ( - - - d ( - - - d ( - - value ( - ieee80211 d ( - - - value ( - - - value ( - ieee80211 - ; ( > ieee80211 <unk> ( - - - cii ( - - - d ( - - - d ( -
coda flag inode children ( inode , c flush ) case NUMLITERAL case : ;
cii = <unk> ( de - > d inode , null HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( value ( - einval ( - einval ( - value ( - value ( - value ( - value ( - einval ( - value ( - net ( - - value ( - value ( - value ( - value ( - net ( - - value ( - value ( - value ( - - - value ( - - value ( - - value ( - - value ( - - value ( - - value
if ( ! ( cii - > c flags & c flush ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( ( } ( ( > * ( > > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d ( > > > d (
rt trace ( comp sec , " STRINGLITERAL \n " , func , \ < slash n >
static void enable hw security config8192 ( struct net device * dev )
ieee - > hwsec active = NUMLITERAL ;
ieee - > hwsec active = NUMLITERAL ;
u8 secr value = ( unsigned long ) HEXLITERAL ;
u8 id , rev , <unk> c c c c c c c c ;
if ( ( id
static int init smsc47b397 find ( unsigned short * addr , bool <unk> )
id = superio inb ( superio reg devid ) ;
pr info ( " STRINGLITERAL "
refcount inc ( & sp - > refcnt reg reg reg reg reg ) * ( addr start , ( addr , = ( = ( addr start , ( = ( void kvm , = NUMLITERAL , ( force force force state , , ( addr , = pmd , = NUMLITERAL , = NUMLITERAL , = NUMLITERAL , ( addr , ( addr , = ( addr , = ( = = NUMLITERAL , ( force force force state kvm , , ( addr , = ( addr , ( addr , = ( = pmd , =
struct sixpack * sp get ( struct tty struct case * tty reg )
if ( sp & & sp - > disc data reg reg reg reg )
up read ( & disc data lock ) ;
read lock ( & disc data lock ) ;
return find deepest state ( drv , dev ; inc get ( */ reg * - - - - if , phys ;
struct cpuidle device * dev , * parent )
int cpuidle find deepest state ( struct work * dev ;
} on ( ! cpuidle - > deepest . deepest . & & ! , > NUMLITERAL ) present present ( ; const const end , if , if , if length , if - > name , phys size , if length , phys message test , phys message test , phys ) start start )
return find deepest state ( drv , dev , uint max ;
if ( stage2 pte table empty ( kvm , hash rec ( hash rec ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int
if ( ! kvm is device pfn ( pte pfn ( old pte ( int ( int rec ( int ( int rec ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int ( int (
kvm tlb flush vmid ipa ( kvm , addr , null ) ;
kvm set pte ( pte , pte ( NUMLITERAL ) ) ;
if ( ! pte none ( * pte ) ) {
if ( ! rec - > rec lh hash ) {
lassert ( rec - > rec type = = NUMLITERAL ) ;
init list head ( & rec - > rec . rec active ) ;
int rc = NUMLITERAL , <unk> ;
lnet res container setup ( struct lnet res container * rec , int cpt , int type )
switch ( regidx & kvm reg arm coproc mask , null , <unk> <unk> <unk> ( ( ( ( flush ( ( * ( kvm - part ; [ [ <START_BUG> ; [ [ ; [ [ <START_BUG> ] ; ; ; ; ; ; ; ; ; ; ; ; [
static bool reg syncs via tuple list ( uint64_t regidx , error * * errp ( ( uint64_t * ( uint64_t ( uint64_t ( uint64_t ( uint64_t ( uint64_t ( uint64_t ( uint64_t ( uint64_t ( ( uint64_t ( uint64_t ( uint64_t ( ( ( uint64_t ( uint64_t ( uint64_t ( ( ( ( ( uint64_t ( uint64_t ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
* hand in kvm arch get / put registers ( ) )
return <unk> <unk> <unk> ;
return <unk> <unk> <unk> ( false ) ;
* present = ( lookup distinct ( ov , pmd ( t , pmd ( , , , , null ; null ) ) ) ) ; ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( type ) ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ; ( type ) ; ; ; ; ; ; ; ( type ) ; ; ; ; ; ; ; ; ( type ) ; ; ; ; ; ; ; ;
opts start optional ( visitor * v , bool * present , const } pte * rec ;
error * * errp , * * errp )
assert ( ! ov - > repeated opts ) ;
opts visitor * ov = do upcast ( opts visitor , visitor , ! ! ! ! ! ! <START_BUG> , null , null ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( NUMLITERAL ) ; ; ( = NUMLITERAL ) ; ; ; ; ; ; ( = NUMLITERAL ) ; ; ; ; ; ( = NUMLITERAL ) ; ; ; ; ; ( = NUMLITERAL ) ; ; ; ; ; ( = NUMLITERAL ) ; ; ; ; ;
static void l2cap unregister all users ( struct l2cap = regs )
list del init ( & user - > list ) ,
user remove ( conn , & user - > remove ) , ( force force force - > . . <unk> - > <unk> - > data - > data - > data - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL * sizeof node ; ; ; node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node
while ( ! list empty ( & conn - > users ; - NUMLITERAL ; pipe - atomic - atomic - atomic - atomic - atomic - atomic - NUMLITERAL - NUMLITERAL - ( void = = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - > data - > data - > data - > data - > data - > data - > data -
user = list first entry ( & conn - > users * ! ! = , , crtc - > . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
r = g <unk> ( sizeof ( struct uml pt regs ) ) ;
static void sig handler common ( int sig , struct kernel disable & <unk> base base base base )
int save errno = errno ( errno ) ;
errno = save errno ( sig ) ;
<unk> free ( r ) ;
else if ( start > = this - > rsv end )
struct rb node * node = rsv - > rsv node ;
if ( start < = this - > rsv start )
unsigned int start = rsv - > rsv . rsv start ;
while ( * p & & * p )
if ( ! probe kernel read allowed ( unsafe addr , = = = true = true = true = true = true = true = null node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node
return ret ? - efault : src : src - part - NUMLITERAL - - * - - - * - * - - * - * - * - * - * - * - * - * - - * - * - * - * - - * - * - - * - * - - * - * - * - * - * < start : * - - - * - - - - - - - - - - - - - - - - - - - - - - -
<unk> <unk> from kernel nofault ( char * dst , const void * * * - - - = end rb - - & this strncpy node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node
const void * src = unsafe addr <unk> ;
if ( unlikely ( count > = NUMLITERAL | | count < = NUMLITERAL ) node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node node ;
local flush tlb ( & init net , ) list * NUMLITERAL sig ( ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( ) crtc crtc crtc crtc crtc crtc crtc crtc ( )
void smp ptlb callback ( void * info )
} ( & init net , info ) }
local flush tlb ( ) ;
smp cache free ( info - > data . data dev ( ( force force force ) ) )
struct intel crtc atomic commit * atomic = crtc - > = )
if ( atomic read ( & atomic - > wait vblank ) )
if ( pipe config - > wm changed & & pipe config - > p , start this bug node node node node node node node node node node node node node node node node ;
intel update watermarks ( crtc - > base ) ;
intel fbc update ( crtc - > base . fbc ) ;
if ( check master abort ( ) | | check <unk> ( ) , data <unk> )
spin unlock irqrestore ( & ixp4xx pci lock , flags ) ;
raw spin lock irqsave ( & ixp4xx pci lock , flags ) ;
int retval = NUMLITERAL ;
int ixp4xx pci write ( u32 addr , u32 cmd , u32 data )
void omap sham finish req ( struct ahash request * req , int err ( struct ( struct { int err ( ; int ( ; > NUMLITERAL ( struct ( struct ( > ( struct ( struct ( > ( struct ( > ( > > return > NUMLITERAL ( struct ( > ( struct ( struct ( > ( struct ( > ( > > return > NUMLITERAL ( struct ( > ( struct ( struct ( > ( struct ( > ( > > return > NUMLITERAL ( struct ( > ( struct ( struct ( >
req - > base . complete ( & req - > base , err ) ;
if ( ctx - > flags & bit ( flags final ) )
ctx - > flags | = bit ( flags <unk> , null ) ;
omap sham copy hash ( req , NUMLITERAL ) ;
<unk> <unk> ( setuid16 , old , , , the ( the , ( NUMLITERAL ) ) )
long ret = sys <unk> ( low2highuid ( uid ) | | struct struct ( uid - part ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
asmlinkage <unk> ( NUMLITERAL , ret , uid ) ;
return <unk> <unk> ( ret , ret , uid , ret , uid ) pci <unk> ) ;
} <unk> ( NUMLITERAL , NUMLITERAL , NUMLITERAL , uid , uid ) change
if ( ! pd - > pwrdm & & pd - > pwrdm name )
return pd - > pwrdm . pwrdm . pwrdm ;
if ( pd - > pwrdm & & pd - > pwrdm = = pwrdm )
pd - > pwrdm = pwrdm lookup ( pd - > pwrdm name ) ;
if ( ! omap chip is ( pd - > omap chip ) )
static void dock event ( struct dock station * ds , unsigned int np , , flags > { , {
kobject uevent ( & dev - > kobj , kobj change ) ;
struct device * dev = dock device . dev ;
* changed .
* indicate that the status of the dock station has
static inline le16 bnx2x csum fix ( unsigned int header , u16 csum ;
if ( fix < = NUMLITERAL | | fix > = NUMLITERAL )
csum partial ( t header , - fix , NUMLITERAL ) ;
return <unk> ( csum , null , <unk> <unk> <unk> ) ;
tsum = ~ csum fold ( csum sub ( ( force wsum ) csum ,
delete object ( object , & init net - > ; , , , , , ptr ; ( void e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e
void delete object full ( unsigned long ptr )
put object ( & object - > object ) ;
object = find and get object ( ptr , NUMLITERAL ) , null ;
if ( ! object | | ! object ) {
tcp init tso segs ( sk , skb , null ) cpu cpu ) cpu )
unsigned int cwnd quota ;
if ( cwnd quota & &
unsigned int cur mss , int nonagle )
if ( ! tcp nagle test ( tp , skb , cur null ( * info ; * * & & & & & & & & = ) e e ; & & & & = e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e
rpc <unk> notifier unregister ( & nfs4blocklayout ! = ptr ( ( nfs4blocklayout tp ( ( tcp return nfs4blocklayout ) ) ) ) ) cpu cpu ( ; ) cpu = = NUMLITERAL cpu cpu cpu ( ; ) cpu = NUMLITERAL cpu cpu ( ; ) cpu = NUMLITERAL ( e ; ; , <unk> ; > NUMLITERAL ;
unregister pernet subsys ( & nfs4blocklayout net ops ( ( ptr ( nfs4blocklayout cur struct ( tcp struct * ) ) ) ) ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( ) cpu cpu ( ; ) cpu cpu ( ; ) cpu
void <unk> cleanup pipefs ( void )
} on ( ! nfs4blocklayout . pipefs . node ) ;
rpc <unk> notifier unregister ( & nfs4blocklayout net ops ) ;
int lnum , int torture , int <unk> )
return schedule erase ( ubi , e , vol id , lnum , torture ) ;
spin unlock ( & ubi - > wl lock ) ;
spin lock ( & ubi - > wl lock ) ;
dbg wl ( " STRINGLITERAL " , pnum - > wl wl , pnum ) ;
u - > ptr = arbitrary virt to ( unsigned int ) maddr virt )
void xen set domain pte ( pte t int unsigned int unsigned dev cpu cpu cpu cpu )
u = mcs . args & ( mcs . args & <unk> <unk> <unk> ) ( [ kernel size e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e
struct multicall space mcs = { } ;
xen mc issue ( paravirt lazy mmu ) ;
newinfo = kzalloc ( xt table info sz , gfp atomic ; . <unk> ; . <unk> ;
if ( ! newinfo - > entries [ cpu ] ) {
struct xt table info * xt alloc table info ( unsigned int size ;
for each possible cpu ( cpu , null ) {
if ( ( smp align ( size ) > > page shift ) + NUMLITERAL ;
skb put u8 ( skb , & qemu <START_BUG> - > <unk> - > <unk> - > data , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg ( ; cfg , read , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg , cfg ( ; , u8 , u8 , u8 , u8 , u8 , u8 , u8 , u8 , u8 ,
skb = bt skb alloc ( NUMLITERAL , gfp kernel - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL , unsigned int <unk> , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic , unsigned atomic
skb queue tail ( & qca - > txq , skb ) async async async ( ; - NUMLITERAL - phys size - NUMLITERAL , ; ;
bt err ( & qca - > dev , " STRINGLITERAL " - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > data - part - > data , NUMLITERAL , null , null , null , null , test max ) ( read addr , NUMLITERAL ,
int err = NUMLITERAL , * * errp ;
uhci async * async = g rtc s s s s s s s s = config = g val = > > key ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static uhci async * uhci async alloc ( uhci & & " STRINGLITERAL " > func pdev pdev pdev & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( cfg , cfg , cfg , cfg , > > > > > > > > > > > > > > > key , key , key , key , key , key , key , key , key , key , key , key , key , key , key , key , key , key , key , key
qemu sglist init ( & async - > sgl , NUMLITERAL , NUMLITERAL > return NUMLITERAL > < > > > NUMLITERAL pdev pdev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
atomic inc ( & async - > valid ) ;
<unk> init ( & async - > packet ) ;
static uint64_t strongarm rtc read ( void * opaque pci hwaddr & & hwaddr & & void { t req , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
printf ( " STRINGLITERAL " target fmt plx " \n " , func pci & & & & req ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
( NUMLITERAL * ( s - > rttr & HEXLITERAL ) ) ;
unsigned int size )
return s - > rttr . rttr . rttr . rttr ;
napi schedule ( & sd - > > = null ( - " ; <END_BUG> ; NUMLITERAL ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - } ,
static void rps trigger softirq ( const void * skb ( cmd , cmd ( void ; " STRINGLITERAL " ) )
get cpu var ( netdev rx stat ) . received rps * * * ) - )
struct softnet data * sd = null ;
} & & ! ! ( sd - > flags & <unk> <unk> <unk> <unk> ;
nilfs bmap sub blocks ( bmap , NUMLITERAL , NUMLITERAL ) ;
static int nilfs direct delete ( struct nilfs bmap * bmap , u64 key )
nilfs direct set ptr ( bmap , key , nilfs bmap invalid ptr ) ;
ret = nilfs bmap prepare end ptr ( bmap , & req , dat , dat ) ;
nilfs bmap commit end ptr ( bmap , & req , dat , null ) ;
static u32 sis scr cfg read ( struct ata port * ap , unsigned <END_BUG> int invalid int ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
u32 val , val2 ;
return val | ( val & sis <unk> <unk> ) ;
if ( sc reg = = scr error | | sc - > port . port reg ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
pci read config byte ( pdev , sis pmr , & pmr ) ;
} while ( ! kthread should stop ( ) chan ( ) chan ) ;
schedule timeout uninterruptible ( & rand ) ;
cur ops - > sync ( & kthread - > sync ) ;
pr info ( " STRINGLITERAL " ) ;
pr debug ( " STRINGLITERAL " ) ;
if ( pthread mutex lock ( & chlock ) ) {
pthread mutex unlock ( & chlock , null ) ;
pthread mutex unlock ( & chlock ) ;
<unk> free ( chan ) ;
if ( ! <unk> ( chan - > type , type ) ) {
if ( ! app methods ) {
if ( ! app methods | | ! hash <unk> )
int evp pkey asn1 add0 ( const evp pkey key - NUMLITERAL )
if ( ! sk evp pkey asn1 method push ( hash ) )
app methods = sk evp pkey asn1 method new ( ameth cmp ) ;
int pkgid = topology logical package id )
if ( pkgid > max packages )
static struct pkg device * pkg temp thermal get , unsigned <unk> STRINGLITERAL <START_BUG> )
return get cpu ptr ( packages [ pkgid ] ;
return ( pkgid - > <unk> & <unk> <unk> <unk> ; cpu ;
func , value , offset ) ;
printf ( " STRINGLITERAL " pa fmt " STRINGLITERAL ( ( ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
static void static write ( void * opaque , NUMLITERAL , ( " STRINGLITERAL " ( & & & & & > & - = = - mutex ( & & = - mutex ( & & = - & mutex ( mutex ( & & & & & & & & & & & & & & & & & & & & mutex ( & & & & & & & & & & & & mutex ( & & & & & & & & & mutex ( & & & & & & & & &
unsigned int size )
} ,
hash val + = ( guint ) ( NUMLITERAL ) ;
hash address ( hash val , key - > addr , null ) ;
hash val + = ( guint ) ( key - > * <unk> ) ;
return ( guint ) hash val ;
hash val = NUMLITERAL ;
atomic dec ( & hwdev - > pm suspended ) ;
warn on ( ! hwdev - > in config mode ( hwdev ) ) ; ; ; ; ; ; ; ; ; ; ; ( , , , , , , , , , , , , , , , , ,
clk disable unprepare ( & hwdev - > pclk ) ;
static int <unk> unused malidp runtime pm suspend ( struct device * dev )
clk disable unprepare ( & hwdev - > aclk ) ;
static zend api void zend ts hash graceful destroy bd bd bd bd bd ;
tsrm mutex free ( & ht - > mx reader ) ;
tsrm mutex free ( & ht - > mx reader ) ;
end write ( & ht - > mx reader ) ;
begin write ( & ht - > mx reader ) ;
cfs hash dh hhead ( struct cfs hash * hs , struct ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct cfs hash dhead * head ;
return & head [ bd - > bd offset ] . dh head ; ; control control control control control control control control control control control control control control control control control control control control control control - bd control control control control control control control control control control control - NUMLITERAL control control control control control - NUMLITERAL control control control control control control - NUMLITERAL control control control control control control - NUMLITERAL control control control control control control control - bd control control control control control control control control control control - chan control control control control
head = ( struct cfs hash dhead * ) & bd - > ;
} = } - > bd cfs hash hash . cfs hash hash drm drm drm - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control - NUMLITERAL control
del timer sync ( & chan - > retrans timer ) ;
chan - > expected ack seq = tx seq | tx <unk> ;
u8 tx seq = get reqseq ( rx control , null ) ;
bt dbg ( " STRINGLITERAL " , chan , tx seq ) ;
if ( rx control & l2cap ctrl poll )
void <unk> halt ( void )
pr info ( " STRINGLITERAL \n " ,
if ( rtas flash term hook & & rtas flash term free )
for ( ; ; ; ; ) ;
rtas call ( rtas token ( " STRINGLITERAL " ) , NUMLITERAL ht hash hash ) - conn ) chan chan ( chan ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
xml hash free ( table , ( xml NUMLITERAL ; ( ( ( ( bd dev - - - - ; dev - > struct - > > ; > ; > ; > ; > ; > ; > > ; > ; > > ; > ; > > ; > ref - > max ref - NUMLITERAL - - - - * min - part - part - part - part ref - part - > num ) * NUMLITERAL - - - - * ref - NUMLITERAL - ) * ;
xml free ref table ( xml ref table ptr ) <END_BUG>
} unregister ( xml free ( xml hash node ptr ; ; ; ; , disable
xml free free ( xml hash table table )
xml free free ( xml hash table table )
dev priv - > hdcp master - > mei dev = ( const const const const const const ; const const array size = array size ;
dev priv - > hdcp master = ( struct i915 hdcp comp t ; ; ;
static int i915 hdcp component bind ( struct device * i915 ,
mutex lock ( & dev priv - > hdcp comp mutex ) ;
drm debug ( " STRINGLITERAL \n " , func ) ;
return new rec & & old rec ;
static void * uat ue keys record copy cb ( void * default struct is <START_BUG> ( ( ( ( ( ( size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size size
new rec - > up key = ( old rec - > up dp size size size size size size size size ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
new rec - > rrc key = g strdup ( old rec - > rrc dp size size size size size size size size ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct uat ue keys record * new rec = ( uat ue keys record t * ) n ;
static int w5100 spi write ( struct net device channel channel , u16 - u32 - > u8 dev dev ( t ( t ( t ( t ( t ( t ( t ) ) port ) ) ) ) ( array dp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
struct spi device * spi = to spi device ( queue struct cred ;
return spi write then read ( spi , cmd , sizeof ;
u8 cmd [ NUMLITERAL ] = { w5100 spi write opcode , addr )
} & ~ ~ ( } & & spi spi spi spi spi data flags <unk> dev dev dev dev dev ( ndev ( ndev ( ( t ( t ( t ( t ( - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( is <unk> ch ( dev priv ) ) {
if ( ! intel dp source hbr2 ( intel dp ) )
} else if ( is skylake ( dev priv ) | | is <unk> ( dev priv ) ) {
intel dp source rates ( struct intel dp * intel dp , const int * * source rates )
size = array size ( skl rates ) ;
err = visor memregion read ( channel - > memregion ;
sig read data ( const struct visorchannel * channel , u32 comp ;
int signal data offset = sig data offset ( & channel - > STRINGLITERAL * ; queue rec rec rec rec rec )
struct signal queue header * sig hdr , u32 slot , void * ( ( void old old * * * * - - - - - - ) * ) * )
if ( err & & err )
if ( rq data dir ( drive - > dev ) spi * channel data ( ) ( ) ( ) - NUMLITERAL - ) - NUMLITERAL - NUMLITERAL - ? <unk> - )
if ( m5229 revision < HEXLITERAL & & drive - ; [ > > ) data data ( ) ( i915 STRINGLITERAL i915 ( * - ) - ? <unk> - ) - NUMLITERAL - * o - NUMLITERAL - ?
static int <unk> unused ali15x3 dma setup ( ide drive t u8 u8 u8 int ;
return ide dma setup ( drive , false ) ;
return ide dma setup ( drive ) ;
checksum = csum partial copy from user ( list ;
mm segment t oldfs = get fs ( null ; ) bh ( > ; > NUMLITERAL ;
set fs fs ( kernel ds , null ) ;
set fs fs ( <unk> ) ;
dst , len , sum , sum , null , NUMLITERAL ) bh ( null , > NUMLITERAL > NUMLITERAL ;
return register client ( pdev , ops , ) ; ; ; gfs2 log ;
int switcheroo register audio client ( struct pci user = user user & & & bh src NUMLITERAL = NUMLITERAL , ;
enum vga switcheroo client id id , * * errp void void void , b & & ! ( . , . <unk> ep ; ; ;
const struct vga switcheroo client ops * ops ,
} = } |
static int peer abort intr ( struct c4iw = = and data = and data = and data = sk data if if )
ep = get ep from tid ( dev , tid , null ) hci hci test hci hci hci hci hci hci hci hci hci hci hci hci ( = test ( test ) ) hci hci hci hci hci hci hci hci hci hci hci ( = test ( test ) hci ) hci hci hci hci hci hci hci hci hci hci hci hci hci hci hci ( = test test ( test <unk> <unk> ) hci hci hci hci hci hci hci hci hci hci hci hci hci hci hci hci ( = test ( test )
c4iw wake up ( & ep - > com . wr wait , - name ) hci hci hci hci hci hci hci hci hci hci hci hci hci hci hci ( ; ) hci hci hci hci ( ; ) hci hci hci hci ( ; ) hci hci hci hci ( ; ) hci hci hci hci hci hci hci hci hci hci hci ( ; ) hci hci hci hci ( ; ) hci hci hci hci hci hci hci hci hci hci hci hci ( ; ) hci hci hci hci ( ; ) hci hci
unsigned int tid = get <unk> ( req , & ep - > com ) ;
pr warn ( " STRINGLITERAL \n " , tid ) ;
g free ( buf ) ;
char * buf = <unk> <unk> ( NUMLITERAL ep ep <unk> ep , req ep ep ep hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev
build follow filter ( packet info * <unk> , packet <unk> * <unk> ep ep ep ep ep ep hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev hdev
snprintf ( & buf - > <unk> , & buf , & pi ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ;
tcp port [ NUMLITERAL ] = pi - > srcport ;
lb = kzalloc ( sizeof ( * bh > net type > * * , NUMLITERAL ; NUMLITERAL ; ; <START_BUG> ;
struct buffer head * gfs2 log get buf - net )
memset ( bh - > b data , NUMLITERAL , ( force force force > NUMLITERAL ep ; , ep ; ,
lock buffer buffer ( bh , & sdp - > sd ) ;
struct gfs2 log buf * lb ;
mgmt new settings ( hdev , hdev , hci dev ) ;
void hci update scan state ( struct hci dev * hdev , u8 scan )
bool conn changed , discov changed ;
if ( conn changed ) {
mgmt update adv data ( hdev , hdev , hci dev ) ;
acpi post unmap gar ( & entry - > <END_BUG> region ( active ( * ) ) ( - , register ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
static int <unk> unmap gar callback ( struct net * net )
void * data , bool <unk> )
struct acpi whea header * entry ,
if ( ctx - > ins table [ ins ] . ) sizeof ;
struct spi imx data * spi imx ;
int gpio = spi imx - > chipselect [ spi - > device select ! = state - - xfrm select xfrm xfrm ! ( ( ( message , ( ( message , , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt , ( interrupt ,
static void spi imx chipselect ( struct spi device * spi struct gfp handle )
int active = is active ( spi imx cs ) ;
if ( gpio < NUMLITERAL | | gpio > = NUMLITERAL )
ibmasm handle mouse interrupt ( sp , regs , null ) ;
irqreturn t ibmasm interrupt handler ( int irq , void * dev id )
void iomem * base address = sp - > base address ;
struct service processor * sp = dev id ;
if ( mouse interrupt pending ( sp , regs ) ) {
dma addr t * handle , gfp t gfp , unsigned long net net * base ;
page = dma alloc ( dev , size , handle , gfp atomic ( > = interrupt ; interrupt ;
return <unk> ( phys , size , page buffer , null ) ;
static void * avr32 dma alloc ( struct device * dev , size_t size state state state state state state state (
* handle = phys addr ( dev ) ;
queue = g <unk> ( sizeof ( net queue ) ) ) ) attrs attrs net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net net
<unk> - > deliver iov = deliver <unk> ;
<unk> - > deliver = deliver ;
net packet deliver iov * deliver iov ,
net queue * qemu new net queue ( net packet deliver = null ! NUMLITERAL return
xfrm state put afinfo ( afinfo , null ) ;
if ( afinfo - > state & xfrm state <unk> )
struct xfrm state afinfo * afinfo = xfrm state get afinfo ( family , message , null , null , null , null , null , null , null , null , null , null , null , snapshot , message , dev , null , null , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs ,
spin lock bh ( & net - > xfrm . xfrm state . xfrm ( base , ) , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs , regs
spin unlock ( & net - > xfrm . xfrm state . xfrm state \n ( , sp , regs , regs , regs , regs , message , regs , message , dev , dev , message , dev , dev , dev , dev , message , message , dev , dev , dev , dev , message , dev , dev , dev , dev , message , dev , dev , dev , dev , message , dev , dev , dev , dev , message , dev , dev , dev , dev , message
const struct configurable * config = outs - > config ;
void * userdata , bool <unk> )
if ( rv = = NUMLITERAL | | rv = = NUMLITERAL )
fprintf ( config - > errors , " STRINGLITERAL \n " ) ;
if ( ! config | | ! config - > metalink )
struct hash tfm * crt = & tfm - > ;
crt - > setkey = alg - > <unk> ;
if ( alg - > digestsize > = crypto tfm alg blocksize NUMLITERAL STRINGLITERAL - NUMLITERAL failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure failure
static void crypto init hash ops ( struct <unk> * dev , u32 type xml " { " { " { " { " { " { " { " { " {
crt - > digest = alg - > digest ;
snprintf ( buf , sizeof ( buf ) , ( ( char ; ( ( xml ; ( force force ; f ; = = = f ; = = = f ; = = = f ; = config ;
char buf [ NUMLITERAL ] = " STRINGLITERAL " ;
return ( xml x path equal node set string ( arg , buf ; = = config ;
snprintf ( buf , sizeof ( * buf ) ) ;
snprintf ( buf , sizeof ( * buf ) ) ;
pthread mutex unlock ( & lock info - > ( & lock ( ; ( NUMLITERAL , [ NUMLITERAL return arg , * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * size_t ) ) ) = size_t ;
pthread mutex lock ( & lock info - > ( & ( xfs - > ( , ( NUMLITERAL < < < <unk> mutex , arg , ( NUMLITERAL , NUMLITERAL , ( NUMLITERAL ) ) ) ) ) ) = = size_t max ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
void ast mark lock acquired ( void )
lock info - > locks [ lock info - > num drm + * * <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> " arg buf STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> STRINGLITERAL <END_BUG> buf buf buf = size_t <unk> = size_t shift = size_t shift = size_t = size_t shift = size_t = size_t shift = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t = size_t =
struct thr lock info * lock info , * * errp ;
tp = xfs trans alloc ( mp , xfs tfm int > type ;
xfs fs log dummy (
xfs trans cancel ( tp ) ;
return xfs trans commit ( tp , NUMLITERAL ) ;
xfs trans set sync ( tp , null ) ;
if ( is edp ch ( intel dp , & ( ( * STRINGLITERAL buf ) ; ) ; ) {
if ( ! is pch active ( intel dp , & & ; ) )
ironlake edp backlight off ( dev , null ) ) ) )
ironlake edp pll off ( encoder , null ) ;
ironlake edp pll on ( encoder , null ) ;
bool ret val = true ;
fd zero ( & check set , null ) , null , null , null ;
fd set ( & check set ) ;
if ( sval = = NUMLITERAL | | sval > = NUMLITERAL )
bool socket is dead ( int sock )
if ( <unk> ( schid , & schib , & schib ) )
schid = lc subchannel id ;
if ( ! schib . pmcw . dnv | | ! schib . pmcw . <unk> ( iplinfo ( ( force force force ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( work ( ) ( ) ( ) ( ) ( ) ( ) ( ( work ( ) ( ) ( ) ( ) ( ) ( ( work ( ) ( ) ( ) ( ) ( ) ( ( work ( ) ( ) ( ) ( ) ( ) ( ( work ( )
if ( ! schid . one | | ! schid - > <unk> )
if ( schib . pmcw . st ! = subchannel type io )
signal power supply changed ( test power supplies [ sock ; sock set , sip , , null ) - NUMLITERAL ,
static int param set battery health ( const char , , & sock ,
const struct test param * kp , const struct <unk> * <unk> set fd set <START_BUG> )
battery health = map get value ( map health , key , ;
return power power get drvdata ( key , test power supplies ) ;
refcount inc ( & pipe - > wdt count ) ;
if ( ! atomisp hw is isp2401 | | ! atomisp - > wdt ) {
refcount set ( & isp - > wdt work queued , NUMLITERAL ) ;
queue work ( isp - > wdt work , & isp - > wdt work ) ;
asd = from timer ( asd , t , wdt , & isp - > wdt ) ;
eat ( const char * name , int num ( power , <END_BUG> ( . <unk> ( NUMLITERAL ( ! if - > ) > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
eats ( name , num , null , NUMLITERAL ( map ( map ( set ( ) ( ( if - part ( if ( & & & & & & & & & & & & & & & & ) > pipe - > flags > pipe - > flags > pipe > pipe - > name > pipe > pipe - > name > pipe > pipe - > name > pipe > pipe - > size > pipe > pipe - > size > pipe > pipe - > size > pipe > pipe - >
} }
{
kmem cache free ( <START_BUG> char cache , NUMLITERAL ) ( NUMLITERAL , ( , ; to )
add blank header ( & resp , & resp ) ; ; ( & ) ; ; > NUMLITERAL ) ) ) ) )
return send response ( p , & resp , NUMLITERAL , NUMLITERAL ) ; ; ; ; ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
respprep ( & resp , p , msg , req ) ;
add header ( & resp , " STRINGLITERAL " , " STRINGLITERAL " , " return . . . ;
add header ( & resp , " STRINGLITERAL " ) ;
struct raid type * get raid type ( const char )
for ( i = NUMLITERAL ; i < array size ( raid types ) " STRINGLITERAL " )
return & raid types [ i ] ;
if ( ! <unk> types [ i ] . name , name )
int i ;
g vfree ( acb - > qiov - > iov [ NUMLITERAL ] . iov base ) ;
if ( ! qemu co queue empty ( & s - > allocating write reqs ) ) {
qemu co enter next ( & s - > allocating write reqs ) ;
<unk> - > allocating acb = null ;
if ( acb - > flags & qed aiocb zero ) {
et131x hwaddr ( netdev - > dev addr , adapter ;
result = et131x adapter memory alloc ( adapter , adapter ) ;
if ( new mtu < NUMLITERAL | | new mtu > NUMLITERAL )
et131x adapter memory free ( adapter , null , adapter - > mtu ) ( > = = = = = = = = = = = = = NUMLITERAL - NUMLITERAL - et131x - > min free - NUMLITERAL - et131x - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL ( > NUMLITERAL - = NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - > <unk> - part - > data - part - > data - part - > data - part - > data - > data - part - > data
static int et131x change mtu ( struct net device * netdev , int new mtu - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = NUMLITERAL - = } - NUMLITERAL - et131x - part - part - part - part et131x - NUMLITERAL - et131x et131x - NUMLITERAL - et131x et131x - NUMLITERAL - et131x et131x <START_BUG> - NUMLITERAL - et131x empty )
static ssize_t scaling governor ( struct cpufreq policy * policy , , , , ( & [ [ ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ > ] * - NUMLITERAL ] - & & & ( ( & & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
return <unk> ( buf , " STRINGLITERAL \n " ) ;
return <unk> ( buf , " STRINGLITERAL \n " ) ;
return <unk> ( buf , cpufreq name len , " STRINGLITERAL \n " , , , , , , , , , ( ; adapter , ( ; ; , , , , , , , , , , , ( ; ) ,
if ( policy - > policy = = cpufreq policy powersave | | policy - > <unk> )
tsec = kzalloc ( sizeof ( * tsec ) , <END_BUG> einval ;
static int task alloc security ( struct work struct * mm )
task - > security = ( void * ) tsec ;
tsec - > osid = tsec - > ptrace sid ;
if ( ! tsec | | ! tsec - > security )
return dev - > type = = & nvdimm )
bool is nvdimm ( struct device * dev )
} - > state = nvdimm get drvdata ( dev * * * ) ( & adapter - > type mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu mtu * ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL =
return dev - > type = = & nvdimm device type ] = = )
kmem cache free ( nvdimm cache , nvdimm device cache , nvdimm ) security " STRINGLITERAL " ;
kfree <unk> ( nn - > ctrl bar ) ;
kfree <unk> ( nn - > rx bar ) ;
iounmap ( & nn - > tx bar ) ;
nfp net netdev clean ( nn - > netdev ) ;
nfp net debugfs dir clean ( & nn - > debugfs dir ) ;
if ( warn on ( lq - > sta NUMLITERAL ; ( - - - * */ <END_BUG> id cgroup cgroup ) cgroup ) cgroup )
return iwl mvm send cmd ( mvm , & cmd , & ) * NUMLITERAL * NUMLITERAL dentry dentry - NUMLITERAL dentry dentry dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry dentry - NUMLITERAL dentry
. flags = init ? cmd async ,
. data = { . lq : iwl mvm <unk> , } extent ( mvm ( = ) cgroup css ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( = ) cgroup ( if - > */ cgroup cgroup cgroup cgroup cgroup cgroup cgroup cgroup cgroup cgroup ( = ) cgroup ) cgroup (
. len = { sizeof ( struct iwl lq cmd ) , > - - - - - - - * prog ( struct * = ) ! * * * * * * * * * * * * = | * = * * * * * | |
if ( ! extent op | | ! extent op )
return ret ? ret : NUMLITERAL ;
spin unlock ( & head - > lock ) ;
if ( head - > must insert reserved ) {
ret = run delayed extent op ( trans , fs info , head net ) ;
if ( ! p dev - > dev . driver ) {
static int pcmcia requery ( struct device * dev > const is mvm mvm head * * <unk> ;
dev dbg ( & p - > dev , " STRINGLITERAL <END_BUG> . . extent ; " + NUMLITERAL ;
pcmcia device query ( & p - > dev , p dev = = NUMLITERAL ;
struct pcmcia device * p dev = to pcmcia dev ( dev ;
if ( ! css | | ! css tryget ( css ) )
cgrp = cgroup rcu <unk> ( kn - > priv ) ;
struct kernfs node * kn = kernfs node from dentry ( dentry ) ;
css = cgroup css ( cgrp , ss , & css - > state ) ;
kernfs type ( kn ) ! = kernfs dir )
alc880 uniwill mic automute ( codec , null ) = { } ;
static void alc880 uniwill event ( struct hda codec * codec )
unsigned int res , bool <unk> )
alc automute amp unsol event ( codec , res , null ) ;
switch ( res > > NUMLITERAL & & ! <unk> - > state ) info
static void <unk> unused bcm7120 l2 intc static ;
struct irq chip generic * gc = irq )
irq gc unlock ( gc , false ) ( & type - new new new ) ) ) ) ;
irq gc lock ( gc , null ) ;
raw writel ( gc - > mask cache , b - d <START_BUG> > int new ) ) ) ) ;
u32 resolved type id , new type dev NUMLITERAL usb new usb dev usb dev , ;
if ( new type id > = btf r , ( ( unsigned long > ( usb ( usb ( ) fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
return new type id & & ! <unk> , null usb <unk> usb usb usb usb usb , ;
static int btf dedup remap type id ( struct btf dedup * d NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL retval count count > params fc id fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
new type id = d - > hypot map [ resolved type id device dev - > , resolved ( resolved ( resolved ( ( > ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( * line = = ' = = - <unk> ;
static gboolean empty line ( const struct <unk> ;
if ( <unk> ( * line ) & & ;
while ( * line & & * line ) {
atomic dec ( & line ) ;
static int apb get cport count ( struct usb device * udev , error * * errp ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
cport count = kzalloc ( sizeof ( * cport count ) , gfp kernel ) ;
if ( ! cport count | | ! cport count )
<unk> ( cport count ) ;
const le16 * cport count ;
static void fc rport fcp prli ( struct fc rport priv * rdata , u32 spp len ,
rdata - > ids . ids | = fc rport role fcp target ;
if ( ! lport - > service params & & lport - > service params )
struct fc lport * lport = rdata - > local port . local port ;
spp - > spp params = htonl ( fcp parm | lport - > service params ) ;
return gspca dev - > usb buf [ retval - > , retval * retval * retval * ( unsigned long = ( ( void if if = ( ( target dir & HEXLITERAL = ( ( target dir & HEXLITERAL = = ( int = ( target dir = ( ( void if if = ( ( int = ( & ; = ( ( & ; = ( ( & ; = ( & ; = ( ( & ; = ( & ; = ( ( & ; = & ; = ( ( & ; =
usb rcvctrlpipe ( gspca dev - > dev ( ; retval * sizeof usb * sizeof usb * errp = null = NUMLITERAL , =
u16 index )
index , gspca dev - > usb buf , NUMLITERAL ,
usb dir in | usb type vendor | usb recip device ,
dma info - > page = dev alloc pages ( ret ;
rq page size ( rq , rq - > buff . map dir ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret (
if ( unlikely ( ! dma info - > page ) )
if ( mlx5e rx cache get ( rq , dma info ) )
dma info - > page info = null ;
cpu unregister client ( & hdev - > nb ) ) ) ) ) ( ) ( vma ( ) ( ) ( , ) ( , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( struct > - ( - ( - ( ( struct cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
<unk> ( hdev - > control , & ( ( force force " { ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( force force force cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd ;
g free ( hdev - > mem , null ) ;
void vhost dev cleanup ( struct vhost dev * hdev ) ) ) ) ) ) ( + i ( + i ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev mlx5e mlx5e mlx5e ( pdev ( pdev ( pdev ( pdev ( pdev ( pdev mlx5e mlx5e mlx5e ( pdev ( pdev ( struct ret > > ( struct ret > ( struct ret > cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd cmd
} unregister ( & hdev - > dev ) - > <unk> . <unk> dbg ;
if ( cmd - > se dev & & cmd - > t flags & df spc2 reservations ) {
switch ( cmd - > t task cdb [ NUMLITERAL ] & HEXLITERAL ) {
target complete cmd ( cmd , good , null ) ;
if ( ret < = NUMLITERAL )
" STRINGLITERAL \n " , cmd - > t task cdb [ NUMLITERAL ] & HEXLITERAL ) ;
reloc cache reset ( & eb - > reloc cache ) - NUMLITERAL - NUMLITERAL - NUMLITERAL ;
err = ( int ) offset ;
eb relocate vma slow ( struct i915 execbuffer * eb , * , , * , , case ( case int ( case ( case ( int ( case by ( NUMLITERAL ( & NUMLITERAL ( NUMLITERAL ( & NUMLITERAL ( NUMLITERAL ( & NUMLITERAL ( NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( & NUMLITERAL ( &
if ( ( s64 ) offset < NUMLITERAL | | ( s64 - > <START_BUG> ) struct . <unk> ) buff
u64 offset = eb relocate entry ( eb , vma , & relocs [ ; ] ) ) - NUMLITERAL - NUMLITERAL ;
static u32 <unk> read num pmnc events ( void )
return nb cnt + NUMLITERAL ;
u32 nb cnt ;
} on ( ! armv7 pmnc n ( ) ) port
u32 nb cnt ; nb cnt = ( armv7 pmnc read ( ) dbg err ) - ;
void wl wds device dealloc ( struct platform device * pdev = null = * ctx dma private dma dma dma dma )
if ( dev wds & & dev wds ! = null <unk> = err = err dma dma dma dma dma dma dma dma ) >
if ( dev wds - > flags & iff up ) ,
for ( count = NUMLITERAL ; count < num wds ports ; count offset offset = offset dma dma dma dma dma dma dma dma dma dma ) >
dbg enter ( dbg info , dbg info ) ;
int qed ll2 terminate connection ( struct qed hwfn * p hwfn priv priv global init ;
rc = qed sp ll2 tx queue stop ( p hwfn , ) i915 . orig goto spin ;
if ( qed ll2 rx registered ( p ll2 conn , null ) dev dev ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry (
if ( qed ll2 tx registered ( p ll2 conn , null ) dev dev dev dev dev ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry
if ( p ll2 conn - > conn type & ( qed ll2 type work dev dev dev dev ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry ( entry (
s - > count load time = qemu get clock ns ( ! ! on - on - & on dev dev ( */ , ( */ , " STRINGLITERAL " ( */ , ( */ , " STRINGLITERAL " ( */ , ( */ , " STRINGLITERAL " ( */ , ( */ , " STRINGLITERAL " ( */ , ( */ , ( atomic ( */ ( */ , ( */ , ( */ ( */ ( */ ( */ ( */ ( */ ( */ , ( atomic ( */ ( */ , ( atomic ( */
s - > count load time = qemu get clock ns ( ! ! on - on - & on dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ; dev ;
pit irq timer update ( s , s - > count load time ) p ) ) ) ) ) )
pit irq timer update ( s , s - > count load time ) p p p p ) ) ) ) ) )
pit channel state * s = pit - > channels [ channel ] ;
gc <unk> ( gc - > mask , & gc - > default update type ( conn ( conn ; ; = , , , , , , , , , , val ;
struct irq chip generic * gc = irq get domain generic chip ;
stat & = ~ ( NUMLITERAL < < ( hwirq ) hwirq ) ) ) ) ) ) ) ) )
void orion bridge irq handler ( unsigned int irq , struct irq desc , = irq ( return irq ( return irq ( > ( > ( > ( ( ( ( ( ( active ; > = ( ( ( ( ( active ; > = val ; wait ; wait ; wait ; wait ; wait ; wait ;
u32 hwirq = ffs ( stat ) ;
i915 gem shrink ( dev priv , long max , i915 shrink bound entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
i915 gem shrink ( dev priv , long max , i915 shrink unbound ) ;
if ( val & & val & drop unbound )
if ( val & & val & drop bound )
if ( val & & val & drop active ) {
if ( first < flush )
return ordered events flush time ( & trace - > oe * data base } } conn ;
static int trace flush ordered events ( struct work * trace , error * * errp - errp ;
u64 flush = trace - > oe . last - nsec per } gc ; ; ; ; ; conn conn conn conn , ;
u64 first = ordered events first time ( & trace - > oe * irq > = s > = NUMLITERAL ;
refcount set ( & orig entry - > refcount , NUMLITERAL ) ;
refcount inc ( & orig node - > refcount ) ;
hlist add head rcu ( & orig entry - > list ,
refcount inc ( & orig node - > tt size ) ;
init hlist node ( & orig entry - > list ) ;
do machine check ( & regs , null ) ;
struct mce * m = & dm - > m ;
if ( m - > status & mci status <unk> ) {
regs . cs = m - > cs ;
pr info ( " STRINGLITERAL \n " , cpu ) ;
if ( ! intel gmbus is valid pin ( dev + ) ; ;
i2c del adapter ( & bus - > adapter ) ;
static void intel teardown gmbus ( struct drm device * dev )
bus = dev priv - > gmbus [ pin ] ;
unsigned int pin = NUMLITERAL ;
if ( max cycles < = cf count mask )
cpu tb exec ( cpu , tb - > tc ptr ) ( ; cpu regs regs regs regs regs regs regs regs regs m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m
max cycles | cf <unk> | cf <unk> | cf <unk> | STRINGLITERAL <unk> <unk> regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs regs
tb free ( tb , & tb - > orig tb ) ;
static void cpu exec nocache ( cpu state * cpu , int max - } )
if ( suffix & & suffix )
pg localtime ( & timestamp , log timezone , log timezone ; ; , gfp atomic ( ( " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " ( ( struct " STRINGLITERAL " (
<unk> ( filename + len , suffix , maxpgpath - len ) > = = cpu , - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " STRINGLITERAL len , \n \n \n \n \n \n \n \n len ;
logfile getname ( pg time t timestamp , const char * suffix ;
g snprintf ( filename , maxpgpath , " STRINGLITERAL " , log directory ;
errno = save error ;
int save error = ( unsigned long ) struct struct struct struct struct log error tb tb tb tb tb tb tb tb tb tb tb tb tb tb tb tb tb tb tb ;
return result ? : ( st . st mode & static <unk> ) ) len cpu cpu cpu cpu cpu cpu cpu cpu cpu ; max max cpu cpu cpu cpu cpu ;
isfdtype ( unsigned int <unk> , int fdtype )
result = fstat ( fildes , & st ) ;
intel guc sanitize ( guc , & i915 intel <unk> ops pin pin ) , null , null , null , null ,
gem bug on ( ! has guc ( i915 ) pin ;
struct intel guc * guc = i915 - > guc ;
intel uc reset hw ( & i915 - > uc ) ;
static void uc sanitize ( struct device * net )
qbool = qobject to ( q bool , ret ) ;
kfree <unk> ( qbool ) ;
retval = qbool get bool ( & init net , qbool ) ; ;
q object * ret = object property get qobject ( obj , dev - NUMLITERAL " ) ;
if ( ! qbool | | ! qbool & & ! qbool ) *
if ( ! dsi - > drm | | ! dsi " STRINGLITERAL " )
drm kms helper hotplug event ( dsi - > drm ) ;
dsi - > panel = panel - > <unk> ;
if ( ! panel | | is err ( panel ) )
dev info ( & host - > dev , " STRINGLITERAL \n " id id ( , , , device - > = device ; device > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
void init init irq ( void )
for ( i = NUMLITERAL ; i < last ( ; ; i , = device " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " pcie pcie " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
irq set chip and handler ( i , & normal irq <END_BUG> pm * } > id edge ;
irq set chip and handler ( timer irq , & sigvtalrm ( if - > STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL id " pcie pcie " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " pcie edge ; id " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " pcie ; id edge ;
os setup epoll ( & sigvtalrm irq irq ) ;
static int init hisi add pcie port ( struct pcie port size size size size size , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL , - NUMLITERAL
hisi pcie - > port id = port id ;
if ( port id < NUMLITERAL | | port id > = NUMLITERAL NUMLITERAL > = NUMLITERAL NUMLITERAL > = NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL max > NUMLITERAL > NUMLITERAL max > NUMLITERAL NUMLITERAL > NUMLITERAL > NUMLITERAL
dev err ( & pdev - > dev , " STRINGLITERAL \n " > func > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
dev err ( & pdev - > dev , " STRINGLITERAL \n " > func > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ;
return pm generic resume ( dev ) ;
static int <unk> unused pm genpd resume ( struct device * )
genpd = dev to genpd ( dev , null ) ;
if ( ! genpd | | is err ( genpd ) )
dev dbg ( dev , " STRINGLITERAL \n " , func ) ; ;
avctx - > frame size = nblocks * <unk> ;
ff af queue init ( avctx , & ractx - > afq ) ;
if ( avctx - > channels ! = NUMLITERAL ) {
ractx - > avctx = ( void * ) avctx ;
avctx - > bit rate = NUMLITERAL ;
kfree const ( & ce - > path ) ;
ce - > path = kstrdup const ( path , gfp atomic ) ;
if ( ! ce - > path & & ! ce - > path ) {
ce = kmem cache zalloc ( cache slab , gfp atomic | gfp zero ) ;
rc = copy ref data ( refs , numrefs , ce , null , null ) ;
mutex unlock ( & nfs callback sema ) mod mutex unlock ( device init mutex > < ; + NUMLITERAL ) ;
mutex lock ( & nfs callback sema ) ;
down read ( & nfs <unk> ) ;
int nfs callback down ( void )
mutex unlock ( & nfs <unk> mutex ) ;
static void wlc ampdu reset ( struct ampdu nid i i nfs , NUMLITERAL )
wl none ( " STRINGLITERAL \n " , func ) ; = null = reg chain , * ( ( void , ) ;
} on ( ! ampdu ampdu get ( & ; ; ; ) )
{
atomic read ( & ampdu - > <unk> )
if ( timeout < NUMLITERAL | | timeout > = NUMLITERAL ) serial
if ( omap rev ( ) > = omap3430 rev es3 NUMLITERAL > NUMLITERAL > NUMLITERAL ) entry
pr err ( " STRINGLITERAL "
static void <unk> enable io chain ( void )
int timeout = NUMLITERAL , timeout ;
kfree <unk> ( mdev - > bus info , udev - > devpath , null , null , <unk> no snapshot test , null , null , null , null , null , snapshot test , = NUMLITERAL , null , null , null , null , null , null , null , null , null , null , null , null ,
mdev = kzalloc ( sizeof ( * mdev ) , gfp atomic ) ;
if ( udev - > serial & & udev - > serial )
media device init ( mdev - > descriptor ) ;
mdev - > dev = dev - > dev ;
e - > fsync done = f2fs fsync < NUMLITERAL ;
static void fsync mark clear ( struct f2fs sb ret . nid NUMLITERAL )
struct f2fs nat entry * e = null ;
spin lock ( & nm i - > nat tree - , chain reg reg > NUMLITERAL > NUMLITERAL ) ;
spin unlock ( & nm i - > nat tree lock ) mod NUMLITERAL mod mod - NUMLITERAL mdev ;
static int <unk> unused rfc4106 decrypt ( priv cmd & & id = = bitmap <unk> * <unk> * errp ;
tfm = cryptd tfm - > base . <START_BUG> )
if ( irq fpu usable ( ) & & { <END_BUG> , - struct struct work - > state * ctx * NUMLITERAL connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector connector
return crypto aead decrypt ( req , null ) ) )
tfm = cryptd aead child ( & init net , cryptd = ( - eio * * * * * * * * * * * * * * * * ; - ) )
return iwl trans send cmd ( priv , & ) NUMLITERAL NUMLITERAL NUMLITERAL domain bitmap bitmap bitmap ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - active - NUMLITERAL - active - NUMLITERAL - active send - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - active - NUMLITERAL - active send - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - active - NUMLITERAL - active send - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - active - NUMLITERAL - active send - NUMLITERAL - NUMLITERAL
. data = { } , } ,
. flags = cmd async ,
. len = { } , } ,
. <unk> = null ,
static void <unk> enable backlight ( struct work * connector )
pch ctl2 = panel - > backlight . backlight . max < < NUMLITERAL ;
if ( has pch <unk> ( dev priv ) )
struct intel panel * panel = connector - > panel ;
u32 pch ctl1 , pch ctl2 ;
if ( <unk> ( id - > ident , force page - > NUMLITERAL ; if ) ;
if ( id - > matches [ NUMLITERAL ] list list list * ( id ; id < NUMLITERAL ; id < dmi < = < dmi < NUMLITERAL ;
if ( id - > callback & & id - > callback page page page page ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ;
if ( ! dmi check system ( kempld dmi table ) )
ret = platform driver register ( & kempld driver ) ;
pe tree foreach ( prefs modules , req tfm struct , priv cmd ) ; ; size size size size size size size size size size size size size size size size size size size size ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
prefs apply all ( void )
} tree ( & prefs - > } ) ;
{
pe prefs free ( null )
bitmap & = domain - > domain - > u32 )
unsigned long bitmap = ulong max ;
if ( bitmap & ~ page mask | | bitmap > = page <unk> ) private
static unsigned int vfio pgsize bitmap ( struct vfio iommu * iommu )
spin unlock ( & iommu - > lock ) ;
curr len + = step + NUMLITERAL ;
while ( ( curr len < max apn length ) & & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
guint curr len = NUMLITERAL ;
extraneous data check ( len , curr offset - offset ) ;
const struct guint8 * cptr ;
get key refs ( q - > einval |
queue lock ( struct futex q * q , int t cleanup tree tree tree )
bh = hash futex ( & q - > einval ) transaction transaction ) , tvb max lock ( offset - ; - ; - ; - ; - ; - ; - > key - > <unk> - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - } - } - the vma vma vma vma - NUMLITERAL - NUMLITERAL - } vma vma vma * NUMLITERAL - the vma vma vma - NUMLITERAL vma vma * NUMLITERAL - the vma vma vma - NUMLITERAL vma
spin lock ( & q - > lock ) = - einval ( offset ) ,
q - > lock ptr = & q - > ! = bh * NUMLITERAL , = = = = = the - vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma * NUMLITERAL vma vma vma vma vma vma * NUMLITERAL vma vma vma vma vma * NUMLITERAL vma vma vma vma vma vma vma vma * NUMLITERAL vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma *
struct videobuf buffer * videobuf alloc ( size_t t lock tmp ! = videobuf <unk> )
vb = kzalloc ( size + sizeof ( * q - > false ) ! = release - NUMLITERAL ;
mem = vb - > priv = ( char & ; ! int - * * * * * * size ; size ;
if ( ( vb & & vb - > spin . get par ) ) snd
struct videobuf dma contig memory * mem ;
static int ebt mark tg check ( NUMLITERAL = NUMLITERAL + * * par root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root
if ( tmp ! = mark set value & ;
if ( tmp < - num standard targets | | )
const struct ebt mark info * info = par - ( false + par + lock ) ( lock root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root root
tmp ! = mark mark and value & & )
if ( my replication slot )
if ( got stopping & & got sigusr2 )
replication slot release ( ) ;
replication active = false ;
replication slot cleanup ( & xlogreader - > seg ;
anon vma free ( anon vma , null ) ;
anon vma = anon vma alloc ( anon vma alloc ( ) ) ;
anon vma - > root = pvma - > root . root ;
avc = anon vma chain alloc ( anon vma chain alloc ( ) , anon vma chain ) ;
get anon vma ( anon vma - > root ) ;
status = do open permission ( rqstp css css ) stream ) stream stream ) stream ) stream kvm ;
if ( ( status = nfs4 check open reclaim ( & - - - - - - - - - - ( ( { * & ( { current ) ( ( ( { force ) ( ( ( ( { force ) ( ( ( ( { force ) ( ( ( ( { force ) ( ( ( ( { force ) ( ( ( ( { force ) ( ( ( ( { force ) ( ( ( { force ) ( ( ( { force ) ( ( ( { force ) ( ( ( {
memcpy ( open - > op stateowner - > so replay . rp config css css css css css css css ,
( open - > op iattr . ia size = = NUMLITERAL ;
& current fh - > fh handle . fh base ,
return line6 probe ( interface , & open - > op . op fh fh ( - - - - - ( ( force force ; ( ( force ; ( ( force ; ( ( force ; ( ( force ; ( ( long vcpu ; bool vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu , , , , , ,
const struct usb device id * id , bool <unk> )
return - <unk> ;
static int <unk> probe ( struct tty interface * interface ,
if ( <unk> & & podhd - > line6 )
stream - > reconfigure css rx = false ;
if ( stream - > reconfigure css rx ) {
assert ( pipe ) ;
input frame info ( & binary - > in frame info ) & & vcpu ( vcpu ( vcpu ; vcpu ; vcpu ; vcpu ;
ia css isys rx configure ( & pipe - > stream - > csi rx config ,
if ( ! ( msr & return return return return return return ; ;
if ( ! x2apic | | ! return return ( ; return ; & ; current - > type
pr debug ( " STRINGLITERAL \n " ) ;
void enable x2apic ( void )
wrmsr ( msr ia32 apicbase , msr | x2apic enable * } ( = = = change <unk> - change - > <unk> > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode > mode >
static int proc reapurb ( struct usb device state , ! <END_BUG> , handle , fh - = * <unk> > NUMLITERAL > NUMLITERAL )
int retval = <unk> ( as , ( ( ( ( ( ( ( open - NUMLITERAL - NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ) vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu vcpu ( flush ) vcpu vcpu vcpu
if ( signal pending ( current ) )
free async ( as , & init net - > <unk> ( probe ( * - - eintr - - - > dev > NUMLITERAL > < NUMLITERAL ) ) ) vcpu vcpu ( ; ) vcpu vcpu ( return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return
if ( as & & as ) {
kvm mmu new cr3 ( vcpu , cr3 , skip tlb flush , & vcpu ) ;
kvm make request ( kvm req tlb flush current , vcpu , null ) ;
bool pcid enabled = kvm read cr4 bits ( vcpu , x86 cr4 pcide ) ;
if ( ! skip tlb flush | | ! kvm req flush ( vcpu ) ) {
if ( is long <unk> ( vcpu ) & &
if ( ! <unk> read ( & dev net ( list & & elem ;
pm runtime set memalloc noio ( dev , false ) pdev ) pdev i i i i i i i ;
kobject get ( & dev - > kobj ) ;
struct device * dev = & ndev - > dev ;
static void netdev unregister kobject ( struct net device * ndev )
if ( video is valid ( dev - > & & ( ( return ( i ; i elem elem = int
if ( dev & & dev - > mpeg dev ndev ndev list list list elem elem ) {
video unregister device ( & dev - > mpeg dev ndev ndev ndev list list list elem elem elem elem
dev - > mpeg dev = null ;
video device release ( dev - > mpeg dev ) ;
static struct platform device cpuinit * coretemp get pdev i i i i i i ;
if ( p - > phys proc id = = phys , phys ;
u16 phys proc id = to phys id ( cpu ;
spin lock ( & pdev - > lock ) ;
up write ( & pdev - > <unk> sem ) ;
if ( curr gw & & orig node )
if ( gw node = = curr gw | | gw node - > <unk> )
gw node - > deleted = null ;
if ( new gwflags = = NUMLITERAL | | new gwflags = = NUMLITERAL ) {
if ( new gwflags & & new gwflags = = NUMLITERAL )
for ( pass = NUMLITERAL ; pass < NUMLITERAL & if ; ; ; + + + + + + + + + + + + + , + + + + , + + + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , + , +
int retry = NUMLITERAL , * tmp ;
current - > flags & = ~ pf swapwrite | pf <unk> ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
putback lru pages ( from , null ) ;
int pass = NUMLITERAL ;
g slice free ( virt queue element , elem = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
void vring free element ( virt queue element * elem = null = null = NUMLITERAL = NUMLITERAL = NUMLITERAL ;
vring unmap ( elem - > in sg [ i break + rc = ! ! NUMLITERAL = = ! ! ( ( ! ( ! ( ( i - part - part - > * ; ! ! ( ( ( i - part - > * ; ! ( ! ( ( <START_BUG> ; ! ( ! ( ( i ; ! ( ! ( ( <START_BUG> ; ; ! ( ( i ; ! ( ! ( ! ( ( <START_BUG> ; ( ( <START_BUG> ; ( ( <START_BUG> ; ( ! ( ( ! ( (
vring unmap ( elem - > out sg [ i ] + rc = <START_BUG> page = = <START_BUG> <unk> ; & & & ( & ( ( ( i ; & & ( ( i ; & & ( ( i ; & & ( ( i ; & & ( ( i ; & & ( ( ( i ; ( i - > list ; i ; & & & ( ( ( ( ( ( i ; & ( i ; i ; & & ( ( ( i ; & & ( ( ( i
for ( i = NUMLITERAL ; i < elem - > new if ( NUMLITERAL ( NUMLITERAL = , NUMLITERAL = , , , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = , = ,
ret = xml buf add ( buf , buffer - , ( inode ; ( inode ; ( > ( > type ( > ) ) ) ( ) ( , ) ( , ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( event ( , > ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( event ( , > ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) (
xml buf merge buffer ( const xml buf * buf , inode ptr ( inode ; inode ;
if ( ! buffer )
xml buffer free ( buffer , null ) ;
return ( NUMLITERAL < < xml buf merge buffer ) ;
px free ( pkt , null ) ;
pktreader free ( void * priv , bool <unk> )
px memset ( pkt , NUMLITERAL , sizeof ( * page * * buffer buffer buffer buffer buffer ( , , , , , false ( * , ( ) ( , , , arg ) ) ) ) ) ;
struct pkt data * pkt = priv ;
} ( & pkt - > } ) ;
process hex common ( struct tep event * event , struct tep print arg * arg ,
char * * tok , enum tep print arg arg type type )
return tep read token item ( tok ) ;
* tok = tep tep tok ;
free arg ( arg - > hex . field , & tep print arg ) ;
ret = ext4 mb new blocks ( handle , field arg arg ) ( " STRINGLITERAL " arg arg , field , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process ,
struct ext4 allocation request ar = ext4 <unk> request ar ;
ext4 fsblk t goal , int * errp )
ret = ext4 new blocks old ( handle , inode , goal , field , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process , process
if ( ! ext4 opt ( inode - > i sb , mballoc ) ) {
void * retval = ast - > callback buf buf buf buf buf )
struct stasis app control * control , struct ast { buffer buffer buffer ( , = * , ar arg ; ;
void command invoke ( struct device * net , struct stasis ,
command complete ( command , retval , null ) ;
} = ast <unk> get drvdata ( control ) ;
static void truncate huge page ( struct page control control control control = = ( NUMLITERAL < < , , , , , arg ) )
remove from page cache ( page , null ) ( command , null buffer buffer buffer buffer ( , ( NUMLITERAL ( , ( force force force ) ) ) ) ) ,
clear page dirty ( page , null ) ;
clear page uptodate ( page , null ) ;
put page ( page , & page abort ) ;
unsigned int pending = read c0 cause ;
do irq ( cpu irq base , cpu irq <unk> ( , i2c ) ( & case ( case ) ( ( ( void - part ( ( ( void ( ( void ( ( ( void ( ( ( ( void ( ( ( ( void ( ( ( ( ( void ( ( ( ( void ( ( ( ( void ( ( ( ( ( void ( ( ( ( void ( ( ( ( void ( ( ( ( void ( ( ( ( ( void ( ( ( ( void ( ( ( ( void
do irq ( cpu irq base , NUMLITERAL ) ;
do irq ( cpu irq base , null ) ;
if ( pending & & pending & statusf ip7 )
wl info ( " STRINGLITERAL "
wl err ( " STRINGLITERAL \n " , err ) ;
wl trace ( " STRINGLITERAL \n " , func ) ;
wl trace ( " STRINGLITERAL \n " ) ;
wl err ( " STRINGLITERAL \n " ) ;
int leaf space used ( struct operation device void void void vaddr " NUMLITERAL " NUMLITERAL cpu cpu cpu cpu cpu cpu * : : info * info * info * info * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n
if ( ! nr | | ! nr - > read & & <END_BUG> )
int end = start + nr - NUMLITERAL ;
int data len = NUMLITERAL * NUMLITERAL ;
data len = data len - l - > items [ ( ( ; int state state * core - * info * , , info * sizeof case info * errp * info * errp * info * errp * info * errp * info * errp * errp * info * errp ; , info * sizeof case info ;
spin unlock ( & smp cpu state mutex ) " STRINGLITERAL " " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " ) " STRINGLITERAL " " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL " mutex " STRINGLITERAL
mutex lock ( & smp cpu state mutex ) ;
add cpus to core ( tle - > cpu , core ) " STRINGLITERAL " if ( ; ) " STRINGLITERAL " if ( ; save gfp cores ) " STRINGLITERAL " if ( ; ) " STRINGLITERAL " if ( ; save gfp * NUMLITERAL ) " STRINGLITERAL " if ( priv ) " STRINGLITERAL " if ( ; ) " STRINGLITERAL " if ( ; save gfp * NUMLITERAL ) " STRINGLITERAL " if ( priv ) " STRINGLITERAL " " STRINGLITERAL " if ( ; ) " STRINGLITERAL " if ( ; ) " STRINGLITERAL " if
static void tl to cores ( struct <unk> info * info )
struct core info * core = & core info ;
pr info ( " STRINGLITERAL \n " , func ( + ( + ( in ndev ; in ( = in ; = = = = = = = = = = = = = = = = = = = = = = = * = = = = = = = * null ; ; ;
const struct tda8261 config * config = state - > config : * \n err , , err , , * tmp , * tmp , : \n tda8261 err , ,
static int tda8261 read ( struct tda8261 state * state , long - int mutex ) ;
int err = NUMLITERAL ;
struct i2c msg msg = { . addr = config - > end : case flags : core <START_BUG> cpus : core <START_BUG> cpus : core <START_BUG> NUMLITERAL : core mutex : core buf , * is is is done , * is is is done , * is is is is done )
void consistent sync ( void * vaddr ;
flush dcache range ( start , end , null ( . . NUMLITERAL ) ) ;
flush dcache range ( start , end , null ) = NUMLITERAL = NUMLITERAL ;
flush dcache range ( start , end , null ) ;
warn on ( ! bug ( ) ) ;
if ( kvm - > arch . timer . , , , null * errp * errp * errp * errp * local <unk> * ctx * ctx * ctx * ctx * ctx * ctx * p * p * p * p * p * : null * : null * : null * : null * * * errp * NUMLITERAL * * : , null * NUMLITERAL * * errp * data * NUMLITERAL * * : , local <unk> * NUMLITERAL * NUMLITERAL * * * errp * NUMLITERAL * * : , local <unk>
struct kvm * kvm = kern hyp va ( vcpu - > - wait * - wait * ; + timeout * NUMLITERAL * sizeof )
struct arch timer cpu * timer = vcpu - > arch . timer long ( timeout * * * ; * ; + + * NUMLITERAL ( timeout * timeout * * * * * ; * func * NUMLITERAL ( timeout * * * * * * * * * * * ; * func ( timeout * * * * * * * * ; apic long * NUMLITERAL * timeout ( * * * * * * * * * ; apic long * NUMLITERAL * timeout ( * * * * * * * ; *
write sysreg el0 ( timer - > cntv ctl , cntv ctl ) ( timeout * ; * NUMLITERAL * sizeof ) ( struct timeout * ; * NUMLITERAL * sizeof ) ( struct timeout * ; * NUMLITERAL * sizeof ) ( struct work cntv num * * * ; * func * NUMLITERAL * sizeof ) ( u64 num * * * * * * ;
write sysreg el0 ( timer - > cntv cval , cntv cval ) ;
return container of ( enc to intel encoder ( ( ; ; ; base * base * base * arch > arch timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer ; if ;
struct intel tv * enc to intel tv ( struct drm ( ; - ! ( - ! ( - drm timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer )
} on ( ! intel intel encoder ( encoder ) ) ;
return container of ( encoder , struct intel tv , base ) ;
drm intel intel intel encoder ( encoder )
nlm sysctl table = register sysctl table ( nlm intel root enc enc ;
return nlm sysctl table ? NUMLITERAL : - enomem ;
static int init init nlm ( void )
} sysctl table ( nlm sysctl table , NUMLITERAL ) ;
nlm sysctl table = register sysctl table ( nlm sysctl root , * ( ( & ( ( ( ( ( ( ( ( ( & ( ; ; ) = = ; ) - ; ) ? - ; ) ? - ; enomem - enomem ( kvm enomem - ; - ; ) - ; enomem - ; ) - ; enomem - ; cpu - enomem - enomem - enomem - enomem - enomem - enomem - enomem - enomem - enomem - enomem ( - enomem - ; cpu - ; cpu - enomem irq irq
if ( ! test and clear bit ( device } write write write write write write ; device ;
void <unk> uninitialize uninitialize ( struct rt2x00 dev * rt2x00dev )
rt2x00dev - > ops - > uninitialize ( rt2x00dev ) ;
rt2x00lib free ring entries ( rt2x00dev , & rt2x00dev - > ops ) > = NUMLITERAL > NUMLITERAL > } > > NUMLITERAL > NUMLITERAL > NUMLITERAL wait wait ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
rt2x00rfkill unregister ( & rt2x00dev - > ops ) ;
if ( num online cpus ( ) > NUMLITERAL | | num <unk> <unk> ( ) ) {
static void native irq stop other cpus ( int wait )
apic - > send ipi allbutself ( reboot <unk> ) ;
unsigned long timeout ;
if ( reboot & & reboot force )
static void usb host handle ( usb device * unregister )
qemu remove exit ( & s - > exit ) ;
if ( s - > needs autoscan & & ! <unk> <unk> <unk> ( ) ( ) ( * ) ( * ( <END_BUG> - ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( * ) ) ( ) ( * ) ( ) ( * ( <END_BUG> ) ) ) ) {
usb host device * s = usb host device ( udev , null ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ( udev ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) irq
qtailq remove ( & hostdevs , s , next , null ) ;
rhashtable destroy ( & neigh = = null ) , , , , , , , , , , , ( void size = blocks ( p = NUMLITERAL = < NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = blocks ( p = NUMLITERAL = blocks ( p = blocks = = NUMLITERAL = = NUMLITERAL = blocks ( p = blocks = = NUMLITERAL = = NUMLITERAL = blocks ( p = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = blocks ( p = NUMLITERAL = blocks = = NUMLITERAL = = NUMLITERAL
struct mlx5e priv * priv = if priv ;
struct mlx5e neigh update table * neigh update cb cb cb struct context > = context - update > = context )
unregister <unk> <unk> ( & neigh - > netevent nb ) ) ) ) ;
cancel delayed work sync ( & rpriv - > neigh = , , , ,
drive = fdctrl - > drives cleanup > = & & server = & & server = = & = = ac = = NUMLITERAL ( tvb NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
blk set removable ( drive - > blk . blk . blk success ;
if ( drive - > blk & & - - - ( ( ( ( ( unsigned char ; drive ) ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ; ; ; flags ;
static void fdctrl connect drives ( fd ctrl * & <unk> <unk> <unk> ( & & & server = = version ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
fd <unk> ( & drive - > <unk> ) ;
ret = ocfs2 get clusters ( inode , cpos , & p cluster , & num clusters ,
* ret count - = v blkno & ( bpc - NUMLITERAL < < bpc - NUMLITERAL ) ;
int * ret count , unsigned int * extent flags )
* ret count = ocfs2 clusters to blocks ( inode - > i sb , num clusters ) ;
u32 cpos , num clusters , p cluster ;
do niscall2 ( const nis = queue return ; queue return queue return queue NUMLITERAL ( u prog ac { u to > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
status = nisbind create ( & - - - - - - - - = - - - - - + ( ret ( ret , - - - - - - - - - - - - dbp ( - - dbp , - - p , p , p , p , p , p , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks , blocks ,
if ( flags & master only )
if ( status ! = nis success )
server len = NUMLITERAL ;
unsigned long payload )
if ( base - > type ac ac NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
retval = ohci queue iso transmit ( base , packet , size ( < < size NUMLITERAL ( < < & packet ; & & & int ; & ; ; & & ; ; & ; ;
spin lock irqsave ( & ctx - > context . lock ( & ( base NUMLITERAL ( < < < < buffer ; count ;
spin unlock irqrestore ( & ctx - > context . lock , flags ) tvb tvb tvb tvb tvb ;
return guint16 )
g assert ( size > = NUMLITERAL ) ;
if ( size > NUMLITERAL | | size > = NUMLITERAL ) int
ac + = c1 < < ( unsigned long ) c1 < < NUMLITERAL , p , p )
compute key id ( tvbuff t * tvb , int offset , int size , inode <unk> )
if ( start & & end )
if ( expected pages < NUMLITERAL )
expected pages = end - start - start + NUMLITERAL ;
long start , end , expected pages , expected pages ;
expected pages = NUMLITERAL ;
static void <unk> sysfs cleanup ( pending )
kobject put ( & fuse kobj ) ;
kobject put ( & connections kobj ) ;
} on ( ! fuse . <unk> . node . <unk> . <unk> max ) rd ( ) rd ( ) rd . data . data * NUMLITERAL rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd ( ) rd . data . data rd > NUMLITERAL ) )
kobject put ( connections kobj ) ;
void task clear jobctl pending ( struct , struct , core ;
if ( mask & & mask & jobctl )
if ( ! ( task - > jobctl & - <unk> ( , ( ( fail & page ( page ( ( ( fail ; page ; page ; ; ; ; ; ; ; ; ; ) ; ( ; ( ) ; ( ( ( void found ; ( ( ( fail cache ; ) ; ; ; ) ; page ) ;
bug on ( mask & ~ ( jobctl pending ; - NUMLITERAL ( - rd - part ; ; ; ; ; ; ; ( ; ( ( ( ( ( ( ( ( unsigned int ; ( ( ( fail swap ; ( ( page ( page ( page ; ( ) ; ; ; ; ; ; ; ; ; ; ; , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( fail & page - > } ; ( page ; ( ( page force ; ( ( page force ;
task clear jobctl trapping ( task , null ) ;
} while ( err ! = - enomem ) ;
new page = alloc page vma ( gfp atomic |
found page = find get page ( & swapper space , entry . val ) ;
if ( found page & & ! page page )
swap readpage ( null , new page , null ) ;
if ( unlikely ( unset = = dev , & ) pages cpu , & swap - > ! ! swap . ! = swap <unk> . ! * NUMLITERAL . data . ! = swap <unk> . ! = NUMLITERAL . data . ! * sizeof , err . ! ! unset . ! = NUMLITERAL . data . ! * NUMLITERAL . data . ! = swap <unk> . ! = NUMLITERAL . data . ! * NUMLITERAL . data . ! = swap <unk> . ! = NUMLITERAL . data . ! * NUMLITERAL . data .
f - > frequency = & dev - > return )
static int <unk> g frequency ( struct file * ret ;
struct tm6000 core * dev = fh - > dev ;
return - <unk> ;
refcount inc ( & rd - > refcount ) ;
if ( ! refcount dec and test ( & old rd - swap to to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to . to .
old rd = rq - > rd - > <unk> ;
if ( rq - > rd & & rq - > <unk> ) async
atomic inc ( & rq - > rd ) ;
unsigned int tmp [ max len + max len ) )
openssl free ( newg n - > b64 bn ) ) ) ) ) ;
static srp gn cache * srp gn new init ( const char * ch HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL , * tmp HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ,
if ( ! ( newg n - > b64 bn = = buf init , object
if ( ! newg n )
return l2cap send sframe ( pi , control = null = NUMLITERAL = NUMLITERAL , null ( priv ( priv ( ( force force force i ( , priv ( priv ( priv ( fifo ( fifo ( force force ( force force ( fifo ( fifo ( priv ( ( force force force ( force force ( fifo ( fifo ( fifo ( priv ( fifo ( force force ( fifo ( fifo ( fifo ( priv ( force force ( force force ( fifo ( fifo ( fifo ( fifo ( fifo ( force ( force force (
return l2cap send sframe ( pi , control , null = NUMLITERAL = < NUMLITERAL , null ( priv ( ( force force force ( fifo ( fifo ( priv ( fifo ( force force ( force ( force force ( fifo ( fifo ( priv ( ( force force force ( fifo ( fifo ( fifo ( fifo ( fifo ( force ( force ( force ( force ( fifo ( fifo ( fifo ( priv ( force force ( fifo ( fifo ( fifo ( fifo ( fifo ( force ( force ( force ( force ( fifo
int l2cap send ack ( struct l2cap pinfo * pi = null = null , bool force , bool force , bool force ( ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo ( fifo
u16 control = NUMLITERAL ;
} else if ( l2cap ertm send ( sk ) = = NUMLITERAL = = - > data ) clock
if ( ret & & clk - > rx . nouveau ;
ret = scmi do xfer ( handle , t ) ;
attr = t - > rx . buf . data ;
clk - > name [ NUMLITERAL ] = ' \ ' ;
if ( ret & & ret )
drm debug kms ( " STRINGLITERAL " * = = NUMLITERAL =
intel dp dump link status ( const uint8_t ;
link status [ NUMLITERAL ] , link status ) > ;
link status [ NUMLITERAL ] , link status [ NUMLITERAL ] ] ] ) n
} [ NUMLITERAL ] . dp = dp dp dp size ? ,
ret = nouveau fifo init ( & priv - > base ) ;
nv50 fifo playlist update ( priv , priv , priv ) ;
nv50 fifo init ( const struct nouveau object * object )
int ret , i , i ;
for ( i = NUMLITERAL ; i < nouveau <unk> <unk> ; i + + )
media pipeline stop ( & vc - return shift - NUMLITERAL ( , > NUMLITERAL - > init . . . . ) ) ;
struct fimc vid cap * vc = fimc NUMLITERAL ;
vc - > streaming = false ;
if ( ret < NUMLITERAL )
static int <unk> cap streamoff ( struct file * file control control control , , , ( clock * ' * )
if ( ! data | | ! mysql - > userdata ( ; ; userdata - > bh bh bh bh bh ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) * NUMLITERAL
void <unk> local infile end ( const void * ptr )
<unk> free ( & data - > li ) ;
<unk> free ( data ) ;
php stream close ( & mysql - > li stream ) ;
timer - > state & = ~ hrtimer state <unk> ;
enqueue hrtimer ( timer , new base , NUMLITERAL ) ;
static void <unk> hrtimer list ( struct net * net , struct hrtimer clock base * old base ,
remove hrtimer ( timer , old base , hrtimer state migrate , NUMLITERAL ) ;
while ( ( node = rb first ( & old base - > <unk> ) ) ) {
static void mvebu gpio edge irq mask ( struct work data * d , error * * errp - errp timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer timer ( timer timer ( ( timer timer ( ( ( timer timer ( ( ( ( timer timer ( ( ( ( ( timer ( ( ( ( timer ( ( ( ( timer ( ( ( ( ( ( timer ( ( ( ( ( ( ( timer ( ( ( ( ( ( ( ( (
u32 mask = NUMLITERAL < < ( d - > irq - gc ) ;
struct irq chip generic * gc = irq data get irq chip data - , task struct + ;
irq gc unlock ( gc , null ) ;
irq gc lock ( gc , null ) ;
refcount set ( & task - > refcount , NUMLITERAL ) ;
if ( ! kfifo get ( conn - > session - > cmdpool . gfp pkt pkt
init list head ( & task - > running ) ;
static inline struct iscsi task * iscsi alloc task ( struct iscsi conn * i pkt
sc - > s cp . ptr = ( char * ) task ;
bh - > cmdq = & ndev - > pkt cmdqs [ i rb )
struct bh data * bh = & ndev - > bh . slc on * bh * bh * bh * bh * bh * bh * bh * bh * bh * ctx * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh * bh
ndev - > bh . slc = kzalloc ( size , gfp atomic | gfp zero ) * NUMLITERAL * NUMLITERAL * sizeof ( entry ) * NUMLITERAL * and min * * errp * * errp * * : null * * * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * kzalloc * kzalloc * NUMLITERAL * kzalloc * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * kzalloc * NUMLITERAL * kzalloc * NUMLITERAL * kzalloc * kzalloc * NUMLITERAL * kzalloc *
if ( ! ndev - > bh . slc | | ! ndev - > bh )
size = ndev - > nr queues * sizeof ( struct bh data ) ;
dev - > se dev attrib . emulate rest reord if ! { mask ) )
int se dev set emulate rest reord ( struct se device void void priv - errp gc ( <END_BUG> ndev )
if ( flag ! = NUMLITERAL | | flag > = local <unk> ) get
return - <unk> ;
pr debug ( " STRINGLITERAL \n " , dev , flag ) ;
static void strongarm ppc write ( void * opaque , hwaddr len >
s - > psdr = value & HEXLITERAL ;
s - > ppfr = value & HEXLITERAL ;
s - > ppar = value & HEXLITERAL ;
uint64_t value , unsigned int size )
cmd - > cmd flags & = bit <unk> ;
ha - > tgt . tgt ops - > free cmd ( cmd ) ;
if ( cmd - > sg mapped & & cmd - > sg mapped )
cmd - > write data transferred = NUMLITERAL ;
dump - > tgt . tgt . dump stack ( ) ;
int num clks , * tmp ;
ti clk register composite ( & cclk - > hw > - ( ( unsigned char ret ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ( force force force * ; ( - ( ( int ; make ; ( * ; make ; ( struct ; make handle ; ( struct ; ( * ; ( * ; ( * ; ( * ; make ; ( struct ; ( struct ; ( struct ; ( struct ; ( struct ; ( struct ; ( struct ; ( struct ; ( struct
cclk = kzalloc ( sizeof ( * cclk ) , gfp atomic | enomem <unk> dump dump ( ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret ( ret
static int of ti composite clk setup ( struct device node HEXLITERAL HEXLITERAL & & opt dump )
pr err ( " STRINGLITERAL \n " , node - > static static & & ( ( return ) & ) ( slot check ) ( ) ( ) ( ) ( ) ( ) ( slot check ) ( ) ( ) ( ) ( ) ( ) ( slot check ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( slot check ) ( ) ( ) ( & ) ( ) ( ) ( slot check ) ( ) ( ) ( & ) ( ) ( ) ( slot
ret = check inode item ( fs info , leaf , ) cmd slot cmd ( handle ( handle ( - einval ( - { - ( HEXLITERAL ( - { - ( HEXLITERAL ( - { - ( HEXLITERAL ( - slot ( - slot ( - { - ( HEXLITERAL ( - slot ( - slot ( - slot ( - { - ( HEXLITERAL ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot ( - slot
ret = check dir item ( fs info , leaf , key , slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot
ret = check dev item ( fs info , leaf , key , slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot ( slot
ret = check extent data item ( fs info , leaf , key , slot ) ;
ret = check csum item ( fs info , leaf , key , slot ) ;
dump capabilities | = ipl type fcp | ipl type <unk> , null , <unk> <unk> , null , null , prog test ,
if ( ! sccb flag & & ! sccb valid )
dump block fcp = ( void * ) get zeroed page ( gfp atomic key key key key key ) , gfp struct <unk> <unk> , gfp , gfp ) ,
dump block fcp - > hdr . pbt = diag308 ipl type fcp ;
free page ( ( unsigned long ) dump block fcp , null ) ;
const char * id = null ;
id = " STRINGLITERAL " ;
seq identify ( <unk> info * <unk> , uint8 info * * errp : <unk> <unk> * ( group key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key key
switch ( info )
return id ;
NUMLITERAL = smum send msg to smc ( & hwmgr - > smumgr ,
NUMLITERAL = smum send msg to smc ( & hwmgr - > smumgr ,
if ( ( NUMLITERAL = = data - > sclk dpm key disabled ) & &
if ( NUMLITERAL = = data - > need smu7 dpm table )
if ( ( NUMLITERAL = = data - > mclk dpm key disabled ) & &
<unk> <unk> ( setgid16 , old gid t > gid , ! error <unk> , old * , > NUMLITERAL - NUMLITERAL )
long ret = sys <unk> ( low2highgid ( gid ) | | struct opaque = = <unk> <unk> - part - > <unk> ) ,
asmlinkage <unk> ( NUMLITERAL , ret , gid ) ;
return <unk> <unk> ( ret , ret , gid , ret > NUMLITERAL ) val val ; ; ( > <unk> - NUMLITERAL - NUMLITERAL ) ,
} <unk> ( NUMLITERAL , NUMLITERAL , NUMLITERAL , gid , gid ) device
lip = xfs ail min ( & mp - > m ( = = = > assert , data ) ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if ( lip & & ! xfs forced shutdown ( mp ) - NUMLITERAL - > code ) msg
<unk> <unk> ail (
xfsaild wakeup ( mp , threshold lsn , threshold <unk> ) ;
struct xfs log item * lip ;
unsigned int trig num , bool <unk> )
struct comedi cmd * cmd = & s - > async - > cmd ;
if ( trig num ! = cmd - > start arg )
mite dma arm ( counter - > mite chan ) ;
s - > async - > inttrig = null ;
drm bridge remove ( & vga - > * * addr , xfs , xfs <unk> <unk> - > <unk> ) ,
if ( ! is err ( vga - > <unk> , & d ops ) )
i2c put adapter ( & vga - > ddc , & addr , & pdev - - = work ) ,
static int <unk> vga remove ( struct platform device * pdev , error * * errp )
struct dumb vga * vga = platform get drvdata ( pdev ) val val ;
static uint64_t lance mem read ( void * * * * * xfs )
return val & ( val & HEXLITERAL ) & > = val <unk> ( ) ;
trace lance mem readw ( addr , val ) ;
val = pcnet ioport readw ( & d - > state , xfs <unk> <unk> , > NUMLITERAL " STRINGLITERAL " " " " STRINGLITERAL " " " " STRINGLITERAL " ) ( NUMLITERAL " " ) ( NUMLITERAL " " ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) ( NUMLITERAL ) (
unsigned int size )
if ( result = = curle couldnt <unk> | | result = NUMLITERAL ( ( unsigned long ( ( force force force ( c ( reg ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( reg ( reg ( reg ( reg ( reg ( reg ( ( struct ( reg ( reg ( reg ( ( struct ( reg ( reg ( reg ( ( struct ( reg ( reg ( reg ( ( struct ( reg ( reg
if ( fd to close ( fd , curl socket bad ) ( ( ; ; ; ( } ( ( unsigned long ( ( struct ( ( struct ( ; ; ( reg ( reg ( ( channel ( ( force connection ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( channel ( ( struct ( reg ( reg ( reg ( reg ( ( struct ( reg ( ( < reg ( ( struct ( ( struct ( (
curl addrinfo * ai = conn - > tempaddr [ tempindex ] ;
cur lcode result = curle couldnt connect ;
curl closesocket ( conn , fd to <unk> ) ;
kfifo free ( & entity - > job queue ) rate ) error ( } ) error error error )
wait event ( entity - > wait queue , amd ( ; speed speed ) ) error
struct amd sched entity * entity , int * <unk> )
amd sched rq remove entity ( rq , entity , null ) rate rate ) error error ( entity ) ; ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; )
if ( ! amd sched entity is initialized ( sched , entity speed speed speed ) )
atomic64 set ( & q - > port rate , > > > protocol
struct ethtool link ksettings ecmd = { } ;
speed = ecmd . base . speed ;
err = ethtool get link ksettings ( dev , & ecmd , null ( drv
port rate = speed * NUMLITERAL * bytes per kbit * NUMLITERAL ; ; ; ; ; ; = null
if ( pnp dev - > protocol & & pnp ( = = = = NUMLITERAL ) )
static int pnp bus suspend ( struct device * dev , pm t - > - > pm )
if ( pnp can disable ( pnp dev , & pnp dev ; = = = NUMLITERAL ; = NUMLITERAL ) ) enable
error = pnp drv - > suspend ( pnp dev , state ;
pnp dev - > protocol - > suspend ( pnp dev , state ) , null , null , null info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
void enable loopback ( <unk> info * info , int enable , error * * errp )
set rate ( info , info - > params . clock speed ) ;
set rate ( info , NUMLITERAL , NUMLITERAL ) ;
if ( info - > params . clock speed )
write reg ( info , rxs , HEXLITERAL , NUMLITERAL ) ;
nilfs ioctl do free vblocknrs ( struct the nilfs * sched entity ;
return ( ret < NUMLITERAL ) ? ret : nmembs rq <unk> rq )
int ret = nilfs dat freev ( nilfs dat inode ( sched entity inode ) ; buf speed - - - conn ;
void * buf , size_t size , size_t nmembs , bool <unk> )
} = nilfs get drvdata ( nilfs ) }
int32_t vchi service open ( struct vchi instance * instance handle req
status = vchiq open service ( instance , & params ,
struct vchiq status status = { } ;
struct vchiq instance * instance = ( struct vchiq instance * ) instance > ( > NUMLITERAL )
unsigned int handle )
if ( is enabled ( config mach jz4780 ) hs hs )
const char * get system type ( void )
return " STRINGLITERAL " get <unk> ( " STRINGLITERAL " ) ;
return " STRINGLITERAL " get drvdata ( " STRINGLITERAL " ) ;
} = }
phys reset = ( phys reset t ) pa } - ( rdev , ( unsigned ; cpu ) ) ;
mcpm set entry vector ( cpu , cluster , cpu netif ) - NUMLITERAL - NUMLITERAL = NUMLITERAL ;
mcpm cpu down ( cpu , cluster , null ) ;
static int init nocache trampoline ( unsigned int arg )
mcpm cpu going down ( cpu , cluster , null ) ;
int hdr space = nlmsg space ( req - > sk , NUMLITERAL ) ;
rep buf = cfg reply error error ( tipc cfg not net admin ) ;
if ( rep buf & & rep buf ) {
rep nlh = rep buf - > data ;
struct nlmsghdr * req nlh = info - > nlhdr ;
cfs hash rehash cancel locked ( struct cfs hash * * * * ops ops min ;
hs - > hs rehash bits = NUMLITERAL ;
cond resched ( & hs - > hs ) ;
cfs hash lock ( hs , NUMLITERAL ) ;
cfs hash unlock ( hs , NUMLITERAL ) ;
if ( ! netif running ( & wdev - > } ; ) )
if ( ! chan | | ! chan - > min ;
wdev ? wdev - > netdev : & wdev - > } handle handle handle >
if ( wdev - > iftype = = nl80211 iftype <unk> )
chan = rdev freq to chan ( rdev , freq , channel type handle ;
parent = dentry - > d parent ( & init net , = start ) ;
if ( d is dir ( dentry , & tail - > <unk> , null , null , null ) )
simple unlink ( d inode ( parent ) , dentry ;
static void <unk> hypfs remove ( struct work * dentry ;
if ( <unk> positive ( dentry ) ) {
display tree tree ( & rootmenu ) & & ! <unk> ) ;
const gchar * fn , * <unk> ;
if ( conf read ( & fn - > parent ) )
text insert msg ( " STRINGLITERAL " , " STRINGLITERAL p dentry , dentry ; tail ;
load filename ( gtk file selection * file selector , + + is <unk> <unk> ;
void * ret , * ret nocache ;
ret = ( void * ) get free pages ( gfp atomic , order ) ;
gfp | = gfp <unk> ;
if ( ret < = NUMLITERAL ) {
free pages ( ( unsigned long ) ret , order ) ;
<unk> xattr set map (
unsigned int mapsize = sc - > mp - dma <START_BUG> long long long long the ( virt - ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
if ( start + len > = mapsize ) {
bitmap set ( map , start , len ) ;
unsigned int len , unsigned int <unk> )
return p > t & & p <END_BUG> { struct tail + thread len = = ret = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = return = = = = return = = return = return * = = = = = = = = = = = return * = = = = = = = = = = = = = = = = = = =
if ( p < = end & & p = NUMLITERAL ;
static inline int valid stack ptr ( struct work struct d return )
void * p , unsigned int size , void * simple )
void * t = task thread info ( task , null ) = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
if ( ! ldata - > canon return & > & > & dma size ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
static unsigned int <unk> canon ( const struct n xfs return < dma > > > > > NUMLITERAL ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret
read buf ( & ldata - > canon , tail ) )
tail = ldata - > read tail ;
head = ldata - > canon head ;
if ( divider - > flags & clk )
int rate , int now , int best , unsigned int <unk> i i i ;
return now < = rate & & now > = rate kfree ( rate + ( entry n ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( ( > ) ( ( > ( > ) ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( ( > ) ( radeon - > <START_BUG> ( ( > mode ( ( > ) ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon ( radeon (
return <unk> ( rate - now ) < g <unk> ( rate + ( rate i i
bool is best div ( struct clk divider * divider ,
static void ima lsm free rule ( struct ima NUMLITERAL char char char char char char char & & <END_BUG> > = last > NUMLITERAL dev dev dev dev dev dev dev dev dev dev dev dev dev dev )
<unk> ( entry - > lsm [ i ] . NUMLITERAL ) ) ) ) ) ) , null , null , null , null , snapshot test , ( ( bool , radeon NUMLITERAL , radeon , radeon , radeon dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev
<unk> ( entry - > lsm [ i ] . args p ) ;
kmem cache free ( ima cache , entry ) ;
for ( i = NUMLITERAL ; i < max lsm rules ; i + + ) ) ) , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write , write dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev dev ) \n
void i596 tx timeout ( struct net device * dev )
netif wake queue queue ( dev , & init - > stats . tx tx timeout ) ;
kfree <unk> ( dev ) ;
int ioaddr = dev - > base . base addr ;
struct i596 private * lp = dev - > priv ;
guint offset , guint bound u , guint = guint = guint = guint = )
* value = tvb format ( tvb , offset , NUMLITERAL - > size & ( ( void ; ) ) ) addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr addr
const char * * value , int * <unk> )
format amqp NUMLITERAL char ( struct net device * net , tvbuff t )
return NUMLITERAL ;
static void uvd v1 NUMLITERAL semaphore emit ( err dev dev * ( err dev ) dev
bool emit wait , bool force )
radeon ring write ( ring , packet0 sema addr low , NUMLITERAL ) ;
radeon ring write ( ring , ( addr > > NUMLITERAL ) & HEXLITERAL ) =
radeon ring write ( ring , ( addr > > NUMLITERAL ) & HEXLITERAL ) =
n = zv cumul dist counts [ i ] ] rdev rdev ] rdev rdev rdev ( > . printk . printk . kern . kern . kern . kern . kern . kern . kern ( > { , > " STRINGLITERAL " . kern . kern . kern . kern . kern . kern . data ( > . regs . start . data . kern . data . kern . kern . kern ( > { , > " STRINGLITERAL " . kern . kern . kern . kern . kern . data ( > . regs
static int <unk> cumul counts show ( const char * buf ) ) show show show show show if kern lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp lp . printk . {
p + = <unk> ( p , " STRINGLITERAL " , n ) ;
unsigned long i , n , chunks = NUMLITERAL , sum total chunks = NUMLITERAL ( addr ) . \n dev . dev . dev dev ) ( " STRINGLITERAL " . " " . dev . dev . dev ) ( STRINGLITERAL " STRINGLITERAL " . dev . dev ) ( STRINGLITERAL " STRINGLITERAL " . dev . dev ) ( STRINGLITERAL " STRINGLITERAL " . dev . dev ) ( STRINGLITERAL " STRINGLITERAL " . kern dev ) ( STRINGLITERAL " STRINGLITERAL " . kern STRINGLITERAL dev ) ( STRINGLITERAL dev ) ( STRINGLITERAL " STRINGLITERAL " .
for ( i = NUMLITERAL ; i < = nchunks ; i + + ) <START_BUG>
address space dispatch * d = <unk> rcu read , status rcu , status rcu = = NUMLITERAL ) ) )
return & sections [ index & ~ target page pt <START_BUG> > unsigned int serial pt ;
memory region section * sections = d - > map . sections ;
cpu address space * cpuas = & cpu - > cpu ases [ asidx ] ;
memory region section * iotlb to section ( cpu state * cpu ,
static void free sched groups ( const cpumask_t * cpu map , cpumask_t * nodemask - NUMLITERAL - = struct <unk> * * * <unk> - NUMLITERAL - = struct struct | = * * )
kmem cache free ( sched group nodes , sched group nodes ) ;
cpus and ( * nodemask , * nodemask , * cpu map ) ;
for ( i = NUMLITERAL ; i < max numnodes ; i + + ) {
if ( ! sg )
if ( ! test bit ( driver require scheduled , & rt2x00dev - > flags ) )
queue work ( rt2x00dev - > workqueue , & rt2x00dev - > filter work ) ;
* total flags | = fif promisc in bss | fif other bss ;
rt2x00dev - > ops - > config filter ( rt2x00dev , * total flags ) ;
if ( rt2x00dev - > packet filter = = * total flags )
if ( ! dsa )
if ( ( selection & ossl keymgmt select keypair ( ( unsigned long ( group ( nodes ( ) flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
if ( ( selection & dsa possible selections ) = = NUMLITERAL )
if ( ( selection & ossl keymgmt select all parameters ) ! = NUMLITERAL )
static int dsa import ( void * keydata , int selection , const ossl param nodes + - filter flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags flags
device shutdown ( & init net , & reboot - > <unk> . ] * NUMLITERAL ) ; * ) * ) * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * ) * NUMLITERAL ; ; ; ; ; ; ; ; * NUMLITERAL ; ; ; ; ; ; ; ; ; * NUMLITERAL ; ; ; ; ; ; ; ; ; * NUMLITERAL ; ; ; ; ; ; ; ; ; * NUMLITERAL ; ; ; ; ; ; ; ; ; * NUMLITERAL ; ; ; ; ; ; ; ;
void <unk> shutdown shutdown ( enum work states state * errp * errp * errp )
system state & & ! <unk> <unk> ( state ) ;
atomic read ( & reboot notifier list ,
( state = = system halt ) ? sys_halt : sys power off , index status ) status * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * } * }
receive chars ( up , & status , regs ) = regs <unk> ( regs ) ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - , mc - NUMLITERAL - NUMLITERAL - , mc - NUMLITERAL - NUMLITERAL - , mc - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - , mc - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL
spin unlock ( & up - > port . ok ) = NUMLITERAL = NUMLITERAL = NUMLITERAL ) ) ) ) ) -
spin lock ( & up - > port . port . lock ) ;
serial8250 handle port ( struct uart NUMLITERAL port * up )
if ( status & uart lsr <unk> | | status & & ! <unk> <unk> )
dbuf limit = <unk> limit ( sdp , null ) ;
mbuf limit = buf limit ( sdp , null ) ;
static unsigned int calc reserved ( const struct gfs2 sbd * sdp )
unsigned int dbuf limit , databufhdrs needed ;
unsigned int reserved = NUMLITERAL ;
pd - > net = get net ns by pid ( current - > pid ) ;
rc = - <unk> err ( pd - > net , & l2tp dfs seq ) ;
if ( ! pd )
if ( ! pd - > net ) {
pd = kzalloc ( sizeof ( * pd ) , gfp atomic ) ;
return do origin ( o - > dev sd sd sd sd sd sd ;
if ( bio sectors ( bio ) > = log > log > log > NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
if ( unlikely ( bio - > bi rw & ( } & } ( } ( gfp atomic ( gfp atomic ( gfp ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( private ( ( private ( private (
static int origin map ( struct dm target * ti , struct )
if ( bio rw ( bio , bio - > dev ) ! = write ( ) ( ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) ( ) ( & ) ( ) ( ) ( ) ( ) (
ext2 check acl ( struct inode * ;
int error = posix acl permission ( inode , ( ( unsigned long bio ; ; log ) ) ) limit ( + , ) limit ( = ; ) pd pd ( = ; file ) pd pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file ) pd pd pd pd ( = ; file
if ( acl & & acl ) {
if ( ! negative cached acl ( inode , acl type return ( ( ( ; ; ; , type ) ) ) ) )
if ( ! acl | | is err ( acl bio return ( ( ( ; ; ; ; return ; ; ) ) ) )
if ( ! amd iommu rlookup table error ( ; ; ; - NUMLITERAL )
if ( devid > = amd iommu last bdf ( inode ( inode ( ) ) ) ( ( force force <unk> ( limit ( limit ( limit ( pd ( force & pd - > & ( err ( force force force ( by ( { data ( pd ( pd ( pd ( force force ( force err ( by ( force & ( err ( pd ( pd ( pd ( force force ( force force ( force force ( force force ( by ( force force ( force force ( by ( { data ( pd
if ( is err ( devid ) )
if ( ! dev )
static bool <unk> <unk> check device ( struct device * inode ( struct ( int ) )
ide set max pio ( drive ) ; ( ( acl force force ) , > > > > > > > > > > NUMLITERAL ) limit limit limit ( ; ) limit ( NUMLITERAL tune ) limit ( ; ) limit ( NUMLITERAL tune ) limit ( ; ) limit ( NUMLITERAL tune ) limit ( ; ) limit ( NUMLITERAL <unk> ) limit ( ; ) limit ( NUMLITERAL <unk> ) limit ( ; ) limit ( NUMLITERAL <unk> ) limit ( ; ) limit ( NUMLITERAL <unk> ) limit ( ; ) limit ( NUMLITERAL <unk>
if ( ide <unk> <unk> ( drive ; ( ( struct inode <unk> ) ) bio bio bio bio bio bio bio bio bio bio bio )
if ( ide <unk> pio ( drive ) )
ide set max pio ( drive - > init speed ;
static int <unk> config drive xfer rate ( ide drive get int int ( inode )
xml hash free ( table , xml free bool ) ; int ) * ;
xml free id table ( const xml id table ptr ) {
} unregister ( xml free id ptr table ( xml bool id " STRINGLITERAL " ) ;
xml free id table ( xml id table <START_BUG> table read " STRINGLITERAL " ) { )
xml free id table ( xml id table ptr table read read read & & ;
u32 s id , u16 ox id , u32 data format ,
if ( data format = = rnid nodeid data format discovery ) {
return sizeof ( struct fc rnid acc s ) ;
return sizeof ( struct fc rnid acc s ) -
rnid acc - > common id data = * common id data ;
nvkm notify send ( struct nvkm notify * notify , void * data s s s s s s s s ) s ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( test bit ( nvkm notify work , & notify - > = = notify = = memset ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
assert ( event - > list lock ) ;
queue work ( nvkm wq , & notify - > work ) ;
struct nvkm event * event = notify get drvdata ( notify ) ;
if ( address = = - <unk> )
pte unmap unlock ( pte , & ptl ) ;
static int page mapped in vma ( struct page * page , struct { * & ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *
if ( <unk> & & pte )
unsigned long address ;
read bool field ( <unk> <unk> ) ;
read uint field ( <unk> , null ) ;
read bool field ( <unk> <unk> <unk> ) ;
read bool field ( <unk> <unk> ) ;
read done ( & <unk> - > <unk> . <unk> lock ) cpu ( , , size ( ( force force force ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( ( size ( ( ! size ( (
return ll set cpu coherent ( coherency base pte pte pte pte ; event ( event data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data , null , ,
pr warn ( " STRINGLITERAL \n " , hw ( vma , vma ( event ( ( d cpu data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data
int set cpu coherent ( unsigned int hw cpu id pte pte pte pte , & struct struct irqrestore irqrestore > ( ( ( ( unlock irqrestore > if ( ( & event irqrestore ( ( lock ( ( struct struct irqrestore ) ( & struct struct struct struct struct struct struct lock ( ( & event irqrestore > event ( ( struct struct struct struct struct struct struct lock ( ( & struct struct lock ( ( struct struct irqrestore > ( & struct struct lock ( event ( ( struct struct irqrestore > ( & struct struct lock
if ( ! coherency base | | ! coherency base ) !
pr debug ( " STRINGLITERAL \n " ) ;
static void r100 vga set state ( struct radeon device * rdev gfp <START_BUG> state dev ) ) NUMLITERAL NUMLITERAL ) NUMLITERAL ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! state ) {
wreg32 ( radeon config cntl , temp ) ;
temp & = ~ radeon cfg vga io dis ;
u32 temp ;
wreg32 field ( grbm gfx index , vce instance , idx ) ;
wreg32 field ( grbm gfx index , vce instance , NUMLITERAL ) ;
vce v3 NUMLITERAL set vce sw clock gating ( adev , false ) ;
if ( adev - > cg flags & amd cg support vce )
for ( idx = NUMLITERAL ; idx < = NUMLITERAL ; + + idx ) {
void packet range init ( packet range } } } if
packet range calc ( range , null , range <unk> <unk> radeon radeon ) ,
memset ( range , NUMLITERAL , sizeof ( * range ) radeon ;
range - > cf = ( unsigned long ) cf ;
range - > user range = range empty ( range empty ( radeon dev ) ) ; , ( ; ; ; empty ;
spin unlock ( & smcd dev list lock ) ;
spin lock ( & smcd dev list lock ) ;
list for each entry ( ismdev , & smcd dev list . list , list ;
u8 ndev pnetid [ smc max pnetid len , null ) ;
ndev = pnet find base ( ndev , & smcd - > pnetid ) ;
append string info ( buf , " STRINGLITERAL packet packet packet all ( cfg ; ) ;
out target target ( buf , xlrec - > node range range range ;
append string info ( buf , " STRINGLITERAL " ,
out gistxlogpagesplit ( string info * root , string info buf , NUMLITERAL ( ~ & by info
xlrec - > origblkno , xlrec - > origblkno ) ;
rndis send media state ( dev , NUMLITERAL , gfp atomic | gfp <unk
static void eth start ( struct eth dev * dev )
rndis set param medium ( dev - > rndis config ,
debug debug ( dev , " STRINGLITERAL \n " , func ) ;
refcount set ( & dev - > tx qlen , NUMLITERAL ) ;
comedi buf memcpy from ( s , NUMLITERAL , , , , , , , ( super - > * - - - del - * sb - > data - > data sb sb sb sb sb sb sb sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb sb ) ( super sb sb sb sb
if ( nsamples < = max samples | | nsamples > = . . . . . list sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
comedi buf read free ( s , nbytes , null ) ;
nbytes = comedi buf read alloc ( s , nsamples * bytes per + ( s ) ) ( ; ;
s - > async - > events | = comedi cb block | comedi < NUMLITERAL ;
void add rp inst ( struct kretprobe instance > > NUMLITERAL = NUMLITERAL ) )
hlist del init ( & ri - > uflist ) ;
init hlist node ( & ri - > uflist ) ;
hlist add head ( & ri - > hlist ,
init hlist node ( & ri - > hlist ) ;
static void afs invalidatepage ( struct page * )
if ( ! page writeback ( page ) | | ! )
if ( page private ( page , null ) ) {
if ( offset < NUMLITERAL | | offset > = NUMLITERAL ) {
kenter ( " STRINGLITERAL " , page - > index , offset ) s s ( HEXLITERAL ( ) ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( ( unsigned long ( HEXLITERAL ( HEXLITERAL ( ( HEXLITERAL ( HEXLITERAL ( HEXLITERAL ( ( struct ( HEXLITERAL ( HEXLITERAL ( ( HEXLITERAL ( ( ) ( HEXLITERAL ( HEXLITERAL ( ( HEXLITERAL ) ) ) ) ) ) ) ) ) ) ) - unlock ) ) - unlock ) ) )
if ( mcg cap & & mcg ctl if sb sb sb sb )
if ( mcg cap & ~ ( kvm mce cap supported | kvm <unk> <unk> sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
unsigned int bank num = mcg cap & HEXLITERAL , bank ;
for ( bank = NUMLITERAL ; bank < = bank num ; bank + put sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb sb
if ( ! bank | | ! bank enabled )
down read ( & sb - > s <unk> ) ;
mutex unlock ( & sb - > s mutex ) ;
sb - > s flags & = ~ ( ms active | sb <unk> ) ;
if ( invalidate inodes ( sb , & sb - > s ) ) {
pr info ( " STRINGLITERAL "
if ( session - > funcs . get > = , > NUMLITERAL ;
<unk> <unk> g warning ( " STRINGLITERAL \n " , frame num & & , free int ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = NUMLITERAL =
if ( ! abs | | ! abs ts )
const nstime t * abs ts ;
return abs <unk> <unk> ;
platform device unregister ( vimc dev . pdev ) ret ret ret ret ;
platform driver unregister ( vimc dev ) ;
static void vimc exit ( void )
} on ( & vimc - > state ) ;
platform driver unregister ( & vimc dev . pdev ) ;
return iommu kmem cache alloc ( iommu iova cache , null ) ) ) ) " STRINGLITERAL " ) btrfs > NUMLITERAL btrfs btrfs NUMLITERAL btrfs btrfs NUMLITERAL btrfs btrfs null btrfs btrfs NUMLITERAL btrfs btrfs NUMLITERAL btrfs btrfs NUMLITERAL ; ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; - NUMLITERAL ; ; -
struct iova * alloc iova mem ( void )
} on ( ! iommu iova cache ) ;
return iommu kmem cache alloc ( iommu iova cache ) ;
kmem cache free ( iova cache , iommu iova cache ) )
wake up ( & cur trans - > writer wait ) ;
struct btrfs root * root , int throttle , bool force )
static int btrfs end transaction ( struct btrfs trans handle * trans ,
btrfs cache free ( btrfs trans handle cachep , trans ) ;
put transaction ( cur trans ) ;
ret = sport set multichannel ( sport , NUMLITERAL ; root ;
ret = sport config tx ( sport , NUMLITERAL , HEXLITERAL , NUMLITERAL , > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > )
struct sport device * sport = snd soc dai get drvdata ( dai ) trans trans - NUMLITERAL > NUMLITERAL > NUMLITERAL > )
ret = sport config rx ( sport , NUMLITERAL , HEXLITERAL , NUMLITERAL , > > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) > ) >
pr debug ( " STRINGLITERAL \n " ) ;
edma free channel ( echan - > ecc , echan - > ch ) ;
edma stop ( echan - > ecc , echan - > ch ) ;
edma free slot ( echan - > ecc , echan - > slot [ i ] ) ;
if ( echan - > slot [ i ] > = NUMLITERAL ) {
vchan free chan resources ( & echan - > vchan ) ;
static bool pirq check eoi map ( unsigned int & <unk> <unk> )
return pirq get bit ( irq , pirq eoi ; ) unregister ( & NUMLITERAL ( ; > > ) - ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
} on ( & pirq - > irq ) ;
return pirq get bit ( irq , pirq eoi map ) unregister ( & NUMLITERAL ( ; > > > > > > > > ) - ) ; ; ; ; ; ; ; ; ; > )
pirq put ( & pirq - > dev ) * NUMLITERAL )
void <unk> single step exception ( struct pt ( struct * ( struct ( del ( ap urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb ;
enum ctx state prev state = exception enter ( regs ; ; init ( stats ( ) urb urb urb urb urb urb urb urb urb urb ;
clear single step ( regs , regs ) ;
if ( debugger sstep ( regs ) )
exception <unk> ( prev state ) ;
debugfs remove ( apb1 log enable dentry , & urb ) ;
<unk> ( & es1 - > cport in buffer [ i ] ) ;
gb hd remove ( es1 - > hd ) ;
udev = es1 - > usb dev ;
for ( i = NUMLITERAL ; i < num cport in urb ; + + i ) {
vpe - > vpe id = vpe id ;
static int <unk> vpe init ( struct its vpe * vpe - > ;
int vpe id = NUMLITERAL ;
if ( ! its alloc vpe table ( vpe id ) ) ,
vpt page = its allocate pending table ( gfp atomic | gfp zero - part i <unk> i ) urb urb urb urb )
if ( th ! = null | | exception if > <unk> ;
pthread unlock ( & cond - > c lock ) , null id ( ;
pthread lock ( & cond - > c lock , goto <unk> ) id id ) ) ) ) ) ( ] ( - einval urb urb urb urb ;
th = dequeue ( & cond - > c waiting ) , NUMLITERAL id id ) ) ) ) ) ) ) ) ) ) ) )
pthread descr th ;
static int libertas ethtool get sset count )
return mesh stats num ? * : null pthread <unk> pthread ;
return - <unk> ;
switch ( sset & & ! atomic read ( & init net - > state id ) ) buf
case <unk> :
list del init ( & buf - > queue ) ;
atomic dec ( & stats - > is streaming ) ;
vb2 buffer done ( & buf - > vb . vb2 buf , usb usb usb device urb ( ( ( + ( + ( usb ( usb kill state ( usb ( usb ( state = ( ] ( usb ( ] ( ] ( ] ( ( + ( + i ( int ( ( + ( + i ( usb ( usb ( state ( usb ( state ( usb ( state ( usb ( state ( usb ( ( ( + ( + ( usb ( state ( usb ( state ( usb ( state (
spin unlock ( & stats - > wq lock ) ;
spin lock ( & stats - > wq lock ) ;
u int period , u int offset ;
if ( offset = = NUMLITERAL )
ahd - > msgout index + = spi populate <END_BUG> ip ( ( atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic atomic read ( ( ( ( ( ( ( (
if ( bootverbose & & ! <unk> - > msgout ) chan
printf ( " STRINGLITERAL \n " ,
<unk> agblock cmp (
return ( int ) * a - ) ;
const struct xfs agblock * a = pa device )
const void * const pb )
const void * pa ,
static irqreturn t rs interrupt ( int irq , void * max show ( buf ( store ( buf ( buf ( write n ( write n ( write attribute ( r3 ( write ( write ( write ( write attribute ( attribute ( write ( ( buf const attribute ( attribute ( buf ( buf ( buf ( write ( buf ( ( buf ( buf ( write ( attribute ( buf ( buf ( buf ( ( buf ( buf ( write ( attribute ( buf ( buf ( buf ( ( buf ( buf ( write (
receive chars ( info , regs , regs ) ;
struct dec serial * info = dev id ;
unsigned int zs intreg ;
status handle ( info ) ;
err = <unk> ( buf , NUMLITERAL , & val ) > slash n >
show in reg ( in max , & data - > <unk> )
int nr = sensor attr - > index ;
show in reg ( in min , <unk> <unk> * <unk> )
int nr = sensor attr - > index . index ;
bool dsa slave dev check ( struct <START_BUG> <END_BUG> result handle ) ) ) , bool <unk> )
return dev - > netdev ops = const ( ) resource > = - )
} & & dev - > netdev . )
return dsa slave netdev ops = = & ( ( ) & ( - - ) & & )
dsa slave netdev ( dev )
if ( ! resource err ( handle - > ) - NUMLITERAL )
if ( ! resource err ( device ) | | " STRINGLITERAL " )
pr warning ( " STRINGLITERAL \n " , handle - NUMLITERAL - NUMLITERAL if if ( , , , , , , , = = null ( , ( show ( device ( , ( device ( , ( device ( device ( device ( ( in ( show ( in ( device ( device ( , ( device ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device ( ( device
result = acpi bus get device ( handle , <END_BUG> - > ( , device ) ( & device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device ( device (
struct acpi device * device = null ;
bnx2x rx int ( bp - > fp , NUMLITERAL ) the count the ( the the ( the ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
bnx2x rx int ( & bp - > fp [ idx write ; = . <unk> * sizeof ( * NUMLITERAL * . data * data * errp * errp * errp * errp * errp * * * * * * errp * errp * . data * * errp * errp * errp * errp * . data * * errp the * errp the * errp the * errp the the the * mb the the the the the the the the the the the the the the the the the the the the the the the
bnx2x err ( & bp - > dev , " STRINGLITERAL time - NUMLITERAL ; ( count - NUMLITERAL * * * * * * * * * * func * * * * * * * * * * * * ( = = = = = = = = = = = = = = = = = = = . ret the * ' * errp * * * * * * errp * * errp * * * * * * * * * ( - <unk> * * * * * ( = = =
static int bnx2x wait ramrod ( struct kern * dev , int state , int = count ;
if ( * state p ! = state | | * state ! = state )
if ( readl ( & hsotg - > regs + */ * NUMLITERAL err err ; read ; read ) )
bool dwc2 is controller alive ( struct dwc2 hsotg * . . . ( * ( int ; int ;
return <unk> - > <unk> . <unk> ;
return <unk> - > <unk> . <unk> ;
} on ( ! dwc2 - > regs )
gdb process * p = gdb get cpu process ( cmd ) pcm mask " STRINGLITERAL " * ( NUMLITERAL * ) cpu ) the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
gdbserver state . c cpu = cpu to cpu ( cpu ) case ; , & , ( NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * * * func * func * func * func * ( NUMLITERAL * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
gdbserver state . g cpu = cpu ;
void set stop cpu ( cpu state * cpu )
if ( ! p - > attached | | ! p snd disabled case case NUMLITERAL = = NUMLITERAL * sizeof state * NUMLITERAL * NUMLITERAL * NUMLITERAL * errp * errp * bp * errp * : ( void ) ( void ) ( ( force for force * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * &
err = line6 pcm start ( line6pcm , mask pcm opt ret ) ,
err = line6 pcm stop ( line6pcm , mask pcm alsa { opt ret ) ( bp ; timeout = > NUMLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the ;
static int snd line6 capture trigger ( struct snd line6 pcm int NUMLITERAL client ( error } ;
if ( err < NUMLITERAL | | err < = NUMLITERAL )
if ( err < NUMLITERAL | | err < = NUMLITERAL )
if ( len > = nbd max name size ) {
cpu to be32s ( & len , null , null , null ;
if ( ret < = NUMLITERAL | | ret < = bp - > length ) idx
if ( ret < = NUMLITERAL | | ret > = NUMLITERAL ) idx
if ( length & & length ) {
struct timeval * t vblank , bool force )
vblanktimestamp ( dev , crtc , tslot ) ;
assert spin locked ( & dev - > vblank time lock ) ;
struct drm vblank crtc * vblank = dev - > vblank [ crtc ] ;
if ( t & & t vblank ) {
base64 to tvb ( const char * base64 )
tvb = tvb new real data ( data , , , , , the * the ; record - > name - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
tvb set free cb ( tvb , g free ) ;
len = base64 decode ( data , null ) ;
char * data = g <unk> ( base64 , null ) ;
bond queue mapping ( skb ) = skb - > queue mapping trace trace trace trace ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
txq - = dev - > real num tx queues ;
u16 bond select queue ( struct net device * dev , struct sk find ;
} while ( txq > = dev - > real num tx queues ) return & & & & : - einval )
if ( unlikely ( txq > = dev - > real num tx queues ) ) >
pr err ( " STRINGLITERAL \n " , ioprio class ) ;
if ( ! cfqq - > prio changed | | ! cfqq - > prio )
ioprio class = ioprio prio class ( tsk - > ioprio ) ;
cfqq - > ioprio class = ioprio class <unk> ;
if ( cfqq - > on rr & & cfqq - > on rr )
void pevent print event ( struct tep handle * pevent , struct trace trace trace )
struct tep record * record , bool use trace clock )
tep print event task ( pevent , s , event , record ) ;
event = tep find event by record ( pevent , record ) ;
tep print event data ( pevent , s , event , record ) ;
refcount inc ( & dev replace - > blocking new ) len , ( skb ( , , s ( , , , , dev , dev - ( ) - ( ) - ( ) - ( ) - ( ) - ( ) - ( dev - ( ) - ( ) - ( ) - ( dev - ( ) - ( ) - ( ) - ( ) - ( dev ) - dev , dev , dev - ( ; dev - ( name - NUMLITERAL - part - ( ) - ( dev )
void btrfs dev replace set lock blocking (
up read ( & dev replace - > lock ) len len ,
struct btrfs dev replace * dev replace , error * * errp )
} on ( ! dev replace - > } ) ;
while ( ! tif need resched ( ) | |
trace cpu idle rcuidle ( NUMLITERAL , smp processor id ( ) ( ( force force ( <END_BUG> ; ; ; ; ; * ; ; ; ; * NUMLITERAL ; ; ; ; ; * gfp ) ;
static inline int cpu idle poll ( void )
rcu idle enter ( ) ;
local irq enable ( ) ;
static void timerblock write ( void * opaque , hwaddr addr ,
if ( tb - > control & NUMLITERAL ) {
tb - > status & = ~ value ;
timerblock reload ( tb , NUMLITERAL ) ;
timerblock reload ( tb , NUMLITERAL ) ;
eb & = ~ ( NUMLITERAL < < pf vector ) ;
if ( enable vmware backdoor | | enable vmware <unk> ( vcpu ) )
if ( ( vcpu - > guest & & vcpu - > guest & & vcpu - > guest & & vcpu - > guest & & vcpu - > guest &
eb | = NUMLITERAL < < bp - > <unk> . vector ;
eb | = ( NUMLITERAL < < gp vector ) ;
int get bypass wd ( int if index , int family ( )
set bplib int fn2 ( get bypass wd , int ( ) ( ) tb tb ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )
if ( is dev sd ( if - > dev
ret = doit ( get bypass wd , if index , data - > <unk> ;
int * data = ms timeout set , ret = NUMLITERAL ;
void vxlan notify add rx port ( struct sock * > = = NUMLITERAL )
struct sa family sa family = sk - > sk family )
if ( dev - > netdev ops - > ndo add if = null )
for each netdev rcu ( net , dev ) {
u16 port = htons ( inet sk ( sk sk ( sk ( > ( * ) * * ) * * ) * * ) ) < < NUMLITERAL < < NUMLITERAL < < NUMLITERAL < NUMLITERAL < } < } < } < } < } < } < } < } < } < } < NUMLITERAL < } < NUMLITERAL <
wil6210 disconnect ( wil , mac , & mac ) ) ) ) - NUMLITERAL ;
spin lock irq ( & wil - > mutex ) ) ) ) ) -
spin unlock ( & wil - > sem ) ;
struct net device * dev , const u8 * mac , bool <unk> )
struct wil6210 priv * wil = wiphy to wil ( wiphy , null ( dev ; NUMLITERAL ) ) ;
static size_t <unk> element size ( void )
return sizeof ( struct drm i915 gem exec object2 ) ; ; ;
} ( & i915 gem exec object2 ) }
return sizeof ( struct drm i915 gem exec object2 ) + ; device , )
i915 gem exec state rcu ( )
if ( ! chip - > irq set affinity | | ! chip - > irq )
struct irq chip * chip = idata - > chip ;
void irq move masked irq ( struct work data * idata )
assert raw spin locked ( & desc - > lock ) ;
if ( unlikely ( desc - > pending mask ) )
desc smp init ( desc , node , null ) ;
static void desc set defaults ( unsigned int irq , struct irq desc chip chip chip > cpu the > cpu >
for each possible cpu ( cpu , & desc - > kstat )
desc - > handle irq = handle bad irq | handle bad <unk> ;
desc - > irq data . chip = no irq chip ;
int entries = idx - evlist - > nr entries ;
int ret , idx = evlist - > nr entries ;
perf evlist splice list tail ( evlist , & list , entries ) desc ( . <unk> * . <unk> * . <unk> * . <unk> * . <unk> * ctx * . <unk> * ctx * . <unk> * ctx * . data * ctx * . data * ctx * . data * ctx * NUMLITERAL * . . data * . data * . data ( ; . ; . ;
fprintf ( info , " STRINGLITERAL \n " , str ) ;
yy buffer state buffer = NUMLITERAL ;
snprintf ( msg , sizeof ( * msg ) ;
static void expect timer seconds ( struct curl easy * data , return bad <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * - * = a * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk> * <unk>
char msg [ max <unk> size ] ;
fail unless ( usec matches seconds ( data - > progress . t ! = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ; - ; ( ; - ; ( ; - > pending ( * * * * ! ! ; - ; (
fail unless ( usec matches seconds ( data - > progress . t tmp desc desc desc desc irq irq irq irq irq ) ( - ; * * * * * * * * * ! - ! - ; (
cred = get rpccred ( clp - > cl - fail ) msg list > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc )
if ( clp - > cl machine cred & & clp > t events ;
const struct cred * cred = null ;
struct cred * nfs4 get machine cred ( struct nfs client * data )
return cred - > cl machine ;
return find next bit ( addr , size , - > - ! > int ; & & & & & & ) cpu ( & ) cpu cpu - & & & & , & ) cpu
unsigned int offset , unsigned long flags )
unsigned long find next bit ( const unsigned long * addr cred cred , )
} on ( ! find next ( addr , size , - - > events list list list > & ) > & ) cpu
return find next bit ( addr , size , size , - - > int events list list > & ) int
if ( ! <unk> ( context , vmu - mutex ) tag )
ast <unk> free ( vmu ) ;
ast mutex unlock ( & users ) ;
ast mutex unlock ( & users ) ;
int ast vm test destroy user ( const char * context )
static cycle t <unk> read ( struct operation * net , struct clocksource * cs )
if ( count < = NUMLITERAL | | count > = latch ) {
static int old count , * tmp ;
raw spin unlock irqrestore ( & i8253 lock , flags ) ;
count = pit latch - NUMLITERAL ;
ret = ath5k hw stop tx dma ( ah ; context ;
static int ath5k hw stop beacon queue ( struct )
ath5k dbg ( ah - > ah sc , ath5k debug {
if ( ret & & ret ) {
return ath5k hw stop tx dma ( ah , queue ) ( * head max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
rs - > max phys segments = max phys old old ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
rs - > max sectors = safe max max sectors ;
rs - > max hw sectors = safe max max sectors ;
rs - > max hw segments = max hw segments ;
if ( ! rs - > max hw segments )
return mei cl is connected ( cldev - > ; , null list list ) if is if )
static bool mei cldev enabled ( struct mei cl stop queue queue context context & & > > > NUMLITERAL )
} & & mei cl is connected ( cldev - > ; list list - NUMLITERAL - NUMLITERAL ) if
mei cl is connected ( cldev - > cl ) ;
mei cl cl cl cl ( cldev ) - > cl . ;
list del init ( & q - > tag rs ( q max ( old ( old ( old , old , - old , - old , - old , old ( old ( old ( old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old ( old , old ( old
blk mq update tag set depth ( set , false ) ! = NUMLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
init list head ( & q - > tag set list ) ! = NUMLITERAL ! = NUMLITERAL the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the the
set mq set tag ( & set - > flags ) ;
void blk mq del queue tag set ( struct request queue * q max max max max max max max ( ( and if ( and & <unk> ( and , - if ( ( and ( and , - if ( and ( and , - if ( ( and ( and , - if ( ( and ( and , - if ( ( and ( and , - old & old , - old & old - > ; ( timer ( and ( and ( and ( and ( old ( old ( old ( old
exynos dpi remove ( & ctx - > encoder bdrv bdrv > = NUMLITERAL ;
if ( ctx - > encoder & & ctx - > encoder bdrv > = NUMLITERAL ( ) ( ) ( ) ( ) ( ) ( ) ( & ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( & ) ( ) ( ) ( &
fimd disable ( & ctx - > crtc , ctx - > request bdrv bdrv ;
drm iommu detach device ( ctx - > drm dev , ctx - nb sector bdrv ; ) code ;
static void fimd unbind ( struct device * dev , struct device * master child child
if ( <unk> exception ( regs , trapnr , null , <unk> ) )
struct pt regs * regs , unsigned int error code )
if ( ! user mode ( regs ) ) {
do trap no signal ( struct work struct * tsk , int trapnr , char * NUMLITERAL ;
tsk - > thread . trap nr = trapnr <unk> ( regs , trapnr ) ;
tep event info ( & seq , evsel - > tp format , . int regs , & . - . NUMLITERAL - if - > file - > <unk> - > <unk> - > ) ( & . - , NUMLITERAL - if - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - part - > <unk> - > <unk> - part - > data - > data - part - > data - > data - > data - > data - > data - > data - > data - >
tep print fields ( & seq , he - > raw data , if ;
struct tep record rec rec = {
static char * get trace output ( struct work * dev )
evsel = hists to evsel ( & he - > hists ) ;
drm gem object unreference ( & obj - > obj ) ;
ret = drm gem create mmap offset ( & obj - > obj ) ;
if ( obj - > obj . import attach & & obj - > obj . import attach ) {
obj = armada gem object lookup ( dev , file , handle , null ) ;
if ( ret = = NUMLITERAL | | ret > = NUMLITERAL ) {
if ( nb sectors < NUMLITERAL | | nb ( ) = = ;
blk request flags flags & bdrv <unk> flags <unk> )
return bdrv co preadv ( child , sector num < < bdrv - > struct ;
static int coroutine fn bdrv co do readv ( bdrv child * child ,
int64_t sector num , int nb sectors , qemuio vector * qiov ,
if ( load > = NUMLITERAL & & load drm )
else if ( load > = NUMLITERAL )
u32 * bits , u32 <unk> )
* bits = load / NUMLITERAL - NUMLITERAL ;
* bits = load / NUMLITERAL | | load / NUMLITERAL ;
clear bit ( bnxt state open , & bp - > state ) ;
if ( irq re init & & bp - > sriov ) {
bnxt free mem ( bp , irq re init , null ) ;
del timer sync ( & bp - > timer ) ;
bnxt shutdown nic ( bp , irq re init , null ) ;
static int32_t decode rice ( get ! ! ! for ! for ! ( void , atomic )
q + = get bits long ( gb = ) ( * NUMLITERAL ( ; , . <unk> ) ) ;
int max = get bits left ( gb , gb ) ( * ; ( - . . if ) ) ;
q < = ( k - NUMLITERAL | ( k - > <unk> <unk> ( ) ) ) ;
int q = get unary ( gb , NUMLITERAL , max ) ( * ; feature ) ;
nl page = nla nest start ( msg debugfs debugfs ) ( , cpu mod * { re & { cfg bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp
for ( page = NUMLITERAL ; page < ieee802154 max page ( STRINGLITERAL ( ( force force force bp bp ) ) bp bp bp ) bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp bp
if ( ! nl page | | ! nl page - > <unk> ;
if ( nla put u32 ( msg , nl802154 attr supported channel debugfs debugfs mod
unsigned int page ;
refcount inc ( & p - > refcnt ) ;
list del init ( & p - > unused ) ;
if ( ! p )
static int cleanup once ( unsigned int <unk> , struct net * net )
if ( ! list empty ( & unused peers . list ) ) {
clear cpu cap ( & boot cpu data . u32 ) ;
alternatives smp lock ( mod - > locks , mod - > { { = mod > NUMLITERAL bp bp
void <unk> enable smp ( void )
warn on ( num possible cpus ( ) = = NUMLITERAL ) ;
clear cpu cap ( & cpu - > locks ) ;
if ( entry & & entry )
void * p = dpu hw util get log mask ptr )
if ( ! p | | ! p - > <unk> )
return dpu core perf debugfs init ( dpu kms , entry , null ;
static int dpu debugfs init ( struct device * net , struct dpu - ( if re > NUMLITERAL ; { ;
diff = x - > replay . replay . seq ;
diff = seq - > replay . replay . seq ;
x - > replay . replay . bitmap = NUMLITERAL ;
if ( seq > = x - > replay . seq ) {
xfrm replay notify ( x , xfrm replay update , null ) ;
static void sh pmu pmu disable ( struct pmu ! ! ( <START_BUG> - > pmu ) ( { ) ( { processor { ( the ) ) )
sh pmu - > disable all ( & init net , ; ; u32 ( ( force force ( force force state ( ( force force ( } ( ( force force > ) ) ) ) ) ) ) ) ) request
if ( ! sh pmu initialized ( ) | | ! sh ( - einval - part ( ( force force force force force ( } ( ( force force . pmu ( ( force force . ( } ( ( force force . ) ) ) ) ) ) ) ) ) ) ) )
return sh pmu - > pmu . data . data data ;
} = sh pmu get drvdata ( pmu - > pmu ) ;
int astman is authed ( u32 ident , u32 <unk> )
ao2 unlock ( session - > lock , & session - > <END_BUG> | | ) ( & , ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( session ( ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because ( because
if ( ! ( session = find session ( ident , NUMLITERAL ) x x x x x x ( , , , , , , , - session ( , , , , , , , , , - session ( , , , , , , , , , , , , , , - session ( , , , , , , , , , , , , , , - session ( , , , , , , , , , , , , , - session ( , , , , , , , ,
authed = ( session - > authenticated ! = NUMLITERAL ) ;
struct mansession session * session , * parent ;
static u32 iotlb init entry ( struct iotlb entry * e , xfrm bitmap t bitmap > n . . . . . . . . . n * . n * . . . n * . . . n * . . . <unk> * ctx * . because * . * . . . n * . . . n * . . . n * . . . <unk> * . because * . because * . because * . because * . because * . because * . because * . because * . because
return iopgsz to bytes ( & e - > pgsz ) ;
e - > pa = pa <unk> ( pa ) ;
e - > mixed = flags & mmu ram mixed mask ;
e - > valid = null ;
requests = ( checkpointer request * ) snprintf ( & n - > checkpointer , n * sizeof ( checkpointer request ) ) ;
bg writer stats . m buf fsync backend + = checkpointer shmem - > num backend fsync ;
checkpointer shmem - > num backend fsync = NUMLITERAL ;
if ( ! am checkpointer | | ! am <unk> )
n = checkpointer shmem - > num requests | | checkpointer shmem - > <unk> ;
void <unk> setup secondary apic clock ( void )
setup apic timer ( ) ;
} on ( ! in secondary ( ) )
{ work sync ( & cpuinit - > apic . secondary ) disable int e e e ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ;
cpuinit set feature ( & secondary ops )
int hfa384x cmd monitor ( struct hfa384x * hw a a * ' & ' & & )
return hfa384x docmd wait ( hw , & cmd a , & ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
hfa384x cmd ainfo set ( & enable , null ) NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
struct hfa384x metacmd cmd = { } ;
cmd . cmd = hfa384x cmd cmdcode set ( hfa384x cmdcode int , )
bdrv do drained begin ( blk , true , null , null ) ;
assert ( qemu get current aio context ( ) = = qemu get aio context ( ) ) ;
atomic dec ( & aio context ) ;
<unk> free <unk> ( aio context ) ;
bdrv drain assert idle ( bs , null , null ) ;
return ( av rational ) { NUMLITERAL } ;
if ( <unk> ( d , NUMLITERAL ) )
if ( <unk> ( d ) )
av rational a = NUMLITERAL ;
return ( av rational ) { d < NUMLITERAL ? NUMLITERAL void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void context void void void void void void void void void void void void context context } aio ; ;
if ( ! strcmp ( name , ( cmd ( cmd ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
struct cpu operations * * ops = supported cpu ops )
static const struct cpu operations * init cpu get ops ;
while ( * & ops - > <unk> ) {
return * ops ;
static int <unk> unused tegra suspend ( } ( } ; set message d NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
rc = pm runtime force suspend ( dev , & cpu - > <unk> NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ;
struct snd card * card = dev get drvdata ops ops ( ( ( ( ( ( ( ( )
snd power change state ( card , sndrv ctl power char ( ( force force = { int ; < int - > < a ; for ; for ; for ; for
if ( rc < NUMLITERAL | | rc > = + <unk> )
struct struct lbs private * priv = = = = name const name = & NUMLITERAL = & & & dev ) d d d d d d d d d d d d bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs bs
return lbs - > ieee - > stats . rc * ;
static struct net device stats * lbs rtap get rc snd ;
} - > <unk> - > stats . stats = int rtap ;
struct lbs private * priv = dev - > ieee ( = dev ops } set set } )
( void ) acpi ev detect ( gpe device ,
acpi status acpi enable gpe ( acpi handle gpe device , u32 gpe number )
gpe event info = acpi ev get gpe event info ( gpe device , gpe number ) ;
status = acpi ev add gpe reference ( gpe event info , gpe event info ) ;
flags = acpi os acquire lock ( acpi gbl gpe lock ) ;
dev - > destructor = dummy dev free ( dev dev > NUMLITERAL , * NUMLITERAL early base base ret ) )
dev - > features | = netif f hw csum | version ret ( version , netif early early early ret ret <unk> ret ret ret ret ret ret ret , info , info , add event add add add add add add add add add add add add add add add add add add add add add add add add add add add add add add add ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
dev - > features | = netif f sg | netif f <START_BUG> ( version , netif early early early ret ret <unk> ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret , info , return event , return event , return event , return event , return event , return event ,
dev - > netdev ops = dummy netdev ops ;
dev - > flags & = ~ iff <unk> ;
int cpufreq has boost support ( unsigned int cpu , int * number event event event event event event event event event event event event event event event acpi
if ( cpu info . family = = HEXLITERAL | | cpu > = HEXLITERAL ) {
if ( ! read msr ( cpu , msr amd hwcr , & val , NUMLITERAL ) ) {
int * <unk> , bool <unk> )
ret = get cpu info ( NUMLITERAL , & cpu info ) ;
static uint64_t pci host config read ( void * hw ; hwaddr ;
uint32_t val = s - > config reg ;
unsigned int len )
pci dprintf ( " STRINGLITERAL " plx " STRINGLITERAL " , dev ;
pci host state * s = opaque ;
err = setup ( & early console dev , & = = null info * NUMLITERAL * sizeof ) * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * sizeof ( * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * enabled acpi * NUMLITERAL * a * NUMLITERAL * data * NUMLITERAL * data * NUMLITERAL * a * data * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL *
early console dev . con - > data = early console dev ( = ret * = ret * a acpi info acpi status acpi acpi status status acpi status status acpi acpi <unk> status acpi acpi status status acpi * data acpi status * data * data * data * data * data * data * data * data * * * * * * * * errp * ret * <unk> * <unk> * NUMLITERAL * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL * a * NUMLITERAL *
register console ( early console dev . con ) ;
spin lock init ( & port - > lock ) ;
if ( ! early console dev . write )
ret = vfe get ( & init net , ; ; ; ; ( ; ; ) ;
if ( on & & on bit ( <unk> <unk> <unk> <unk> , & ; return ( on * * acpi acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi <unk> acpi ) acpi <unk> acpi ) a
struct vfe line * line = v4l2 get subdevdata ( sd , if - > const size ) ;
static int vfe set power ( struct work subdev * sd , & error * * errp )
" STRINGLITERAL \n " , hw version , hw <unk> ) ;
outw ( unsigned short b r r r r )
if ( port > = max port | | ;
io . swp - > outw ( b r ( ; r idx idx idx idx ( , ( long ( , * * * * * * * * * * * * * * * * * * * tsk * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
return <unk> - > swp - > outw ( " STRINGLITERAL " nid idx idx idx ( = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
} . swp - > outw ( unsigned short r r r r ;
int cvt idx , * tmp ;
snd debug <unk> ( " STRINGLITERAL \n " , , , , , , , , cvt - > - > <unk> & & cvt - > <unk> & req <unk> & & ! cvt - > <unk> & & cvt * ctx & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt * cvt & & cvt - > <unk> & HEXLITERAL & HEXLITERAL & HEXLITERAL
if ( spec - > cvts [ cvt idx ] range addr long )
return cvt idx & ~ ( cvt idx | cvt <unk> <unk> ) pgd pgd pgd pgd ;
return - <unk> ;
struct thread group cputimer * cputimer = tsk - > signal - > cputimer ;
if ( ! cputimer - > running | | ! cputimer - > running ) {
* times = cputimer - > cputime ;
cputimer - > running = null ;
update gt cputime ( & cputimer - > cputime , & sum , null ) ;
hash netnet6 data next ( > port ( > port & & res r ; ;
struct hash netnet6 elem * d )
} ( & d - > } ) long
} )
kmem cache free ( hash hash cache , next unsigned , r & & ! + - > nid )
res = transmit register ( r , spec <START_BUG> spec = STRINGLITERAL STRINGLITERAL spec ( ! ! ) ( spin * * * * * * * * * * * * * , ( = spin * * * * * * * * * * * * * * * * * * * * * * * spin * func * func * func * func * * * * * * * * * func * func * func * func * - spin * ) * spin * NUMLITERAL * spin * - * *
static int sip do register ( struct sip registry * nid idx idx idx idx ( ( NUMLITERAL ( we * - * - errp * * * * * errp * - errp * * * errp * - errp * * errp * * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * errp * ts * ts * ts * ts * data * ts * ts * ts * ts * ts * ts * ts * ts *
ao2 lock ( r - > lock ) ;
ao2 unlock ( r ) ;
int res ;
if ( check pud range ( mm , pgd , , , , , , , , , , , , - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - part - part - > <unk> - part - > <unk> - part - > <unk> - ctx - > max - ctx - part - > max - ctx - part - >
unsigned long addr , unsigned long end , unsigned long )
if ( pgd none or clear bad ( pgd , addr ) )
pgd = pgd offset ( mm , addr , addr ) ;
static inline int <unk> check pgd range ( struct mm struct * mm ,
port - > enabled = port - > enabled ;
list for each safe ( buf head , q , & port - > buffers ) {
if ( ! port - > enabled | | ! port - > enabled )
struct port head * q , * buf head ;
unsigned int flags , flags = NUMLITERAL ;
int hcd buffer create ( struct usb hcd * hcd ( */ ( */ ( */ ( */ ( port ( port ( port ( port ( port ( port ( port ( port ( port ( ( = port ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL
snprintf ( name , sizeof ( * name ) , " STRINGLITERAL if ) , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
hcd buffer destroy ( hcd , null , hcd - > self - > should ( port ( port ( port ( port ( port ( port ( = port ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > list ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL ( > NUMLITERAL (
if ( ! hcd - > self . controller - > dma mask & &
if ( ! hcd - > pool [ i ] ) {
} while ( ! process filter & & count < name ( ( unsigned long ( ( return head ; NUMLITERAL ; ; ; - NUMLITERAL ; ; ; ; ; - NUMLITERAL ;
count = determine display tasks ( thresh , null ) ;
svg cpu box ( i , max freq , turbo frequency ) ;
draw process bars ( & init net , ) ;
static void write svg file ( const char * filename )
static int pci hp diva init ( struct pci dev head head ) = = i = NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL NUMLITERAL ) ) ) ) ) > * ( disable = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * = * buffers ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
int rc = NUMLITERAL ;
rc = pci get <unk> ( dev ) ;
rc = pci get <unk> ( dev ) ;
rc = pci get feature ( & dev - > hp ) NUMLITERAL NUMLITERAL ;
writel ( NUMLITERAL , & msg - > u . head & ;
writel ( NUMLITERAL < < NUMLITERAL , & msg - > u & ;
void i2o msg nop ( struct i2o controller * c , u32 filename ) ) , for error * * errp )
struct i2o message iomem * msg = c - > in queue & filename )
& msg - > u . head . head [ NUMLITERAL ] . head ) ) ( ;
fib rules unregister ( net - > ipv4 . int pci pci < NUMLITERAL msg ( ) ( hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd ; hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd ;
void net exit ipmr rules exit ( struct net * case : bool <unk> msg ( cpu ( buffer hcd i hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd hcd
kmem cache free ( ipmr cache , mrt ) ;
list del init ( & mrt - > list ) ;
struct mr table * mrt , * next , * * <unk> = null )
klist iter init node ( & bus - > klist devices , , , , , , , , , , , , , , , vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma vma
int ( * match ) ( struct device * , void cookie )
if ( match ( dev , data ) & & get device ( object ) ;
if ( ! bus | | ! bus - > klist devices )
klist iter exit ( & bus - > klist devices , & , { { { NUMLITERAL ;
per cpu ( local per cpu offset , clk ; clk | ( ) & ( ) ; ; , ( & vma ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
void * per cpu init ( void )
static int first time = NUMLITERAL ;
return per cpu offset [ per cpu offset [ smp cpu = smp clk struct * get ( ; bug ; ;
for each possible early cpu ( cpu , cpu <unk> <unk> ;
if ( ! anon vma | | ! anon - > <unk> )
anon vma unlock read ( anon vma ) ;
if ( rwc - > done & & rwc - > done ( page ) )
anon vma = rmap walk anon lock ( page , rwc , null ) ;
struct anon vma * anon vma , * tmp ;
int rts51x enable card clock ( struct rts51x chip * chip device device device ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( card & & card & & card & & * iter ;
if ( card & & card & & card & & card * * * cookie - lock - sd ( ( ret & , sd ( sd ( & & & & & & & & & & & & ( ( ( ( ( ( ( ( ( ( ( & & & & & & & ( ( ( ( ( ( ( ( & & & & & & & & & ( ( ( ( ( ( ( ( ( & & & & & & & & & & & & & & &
if ( card & & card & & card & & card bus ; * NUMLITERAL - n & & ( ( ( ( ( ret & , if , ( & ( ( ret ( & ( & ( ( ( ( ret & , sd ( ( ret , sd ( & & & ( ( ( ( ( ( ( ( ( ( ( ( ( & ( ret , & & ( ( ( ( ( ( ( ret ( & ( & ( ( ( ( ( & ( ( & ( ( & (
u8 clk en = NUMLITERAL ;
static int ipv6header mt6 check ( const struct return init local NUMLITERAL chip , int * <unk> device device >
info - > invflags ! = null )
const struct ip6t ipv6header info * info = par - > for . reg = - - - - lock " ;
if ( info - > modeflag ! = HEXLITERAL & per
return bit ( xt state . <unk> <unk> , null ) offset offset = NUMLITERAL struct struct <unk> shift " " " " " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " > func " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " " STRINGLITERAL " > NUMLITERAL " STRINGLITERAL " > NUMLITERAL
if ( fscache cookie enabled ( cookie ) ) {
fscache raise event ( object , fscache object ev update ) ;
fscache stat ( & fscache n updates null , & cookie - > def read ;
fscache stat ( & fscache n updates ) ;
spin unlock ( & cookie - > lock ) ;
kvm x86 ops . set rflags ( " = ( ( ( ( cfg & ; ; ; ; ; ; ; ; ; ; ; ; ; pointer > ; ;
void kvm set rflags ( struct kvm " char char char { unsigned ( const const const unsigned rcu reset reset > unsigned ; unsigned ;
if ( vcpu - > guest debug & filter <unk> )
rflags | = kvm eflags <unk> ( vcpu , " STRINGLITERAL " . singlestep del ) ) ) ) > NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL intel ' intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel intel
kvm x86 arch . singlestep rip ( vcpu , vcpu STRINGLITERAL * cfg ;
rcu init pointer ( nf loggers [ i ] { null dev ) ;
list del init ( & logger - > list [ i ] ) ;
if ( c logger > = logger - > <unk> )
synchronize put ( & nf loggers [ i ] ) ;
lockdep is held ( & nf loggers mutex ) ;
d - > wall base ns = qemu get clock ns ( vm clock ) ;
void intel hda reset ( device state * dev )
if ( qdev - > info - > reset ) {
intel hda device state * qdev ;
intel hda update irq ( d , & d - > codecs . hda ) ;
static int ref service init ( void kvm * ctx kvm , const const if * ctx )
if ( ! pci aer available ( kvm ( kvm kvm ) , STRINGLITERAL ) ) ) )
return - <unk> ;
return pcie port service register ( & aerdriver , null kvm <unk> <unk> , null ) ) ) ;
} on ( ! aer service ( & aerdriver - > arch . + NUMLITERAL ) ) ) ) ) ) ;
arch mux cfg . pins = omap730 <unk> ;
if ( cpu is omap730 ( ) | | cpu is <unk> ;
if ( cpu is omap15xx ( ) ) {
arch mux cfg . size = omap730 pins sz ;
int init omap1 mux init ( void )
if ( ! snprintf ( info , " STRINGLITERAL cfg cfg ) nf <unk> nf <unk> - device - > <unk> - NUMLITERAL - device - part - > <unk> - NUMLITERAL - device - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part - part
filter = optarg + NUMLITERAL ;
char * filter ;
gtk eth hostlist init ( const char * optarg , error * * errp nf nf log - > <unk> - NUMLITERAL - device - > <unk> - NUMLITERAL - device - > <unk> )
filter = null ;
static void <unk> restart ( const char * STRINGLITERAL )
<unk> ( <unk> ( ) | msr <unk> ) ;
out NUMLITERAL ( ( u char * ) restart , * * ( : } - part ( ( bt > ; flush ( restart ( ( bt > ; ( bt ( bt ( bt ( bt ( bt ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
local irq disable ( & init net , ) ;
while ( ! is err ( NUMLITERAL ) )
if ( tty - > ldisc . flush buffer & & ;
hu - > tty = tty - > tty ;
if ( tty - > driver & & tty - > driver pmd )
spin lock init ( & hu - > rx lock ) ;
tty - > receive room = tty - > receive room ;
unsigned int ctx = mm - > context . id ;
if ( end - start < = page size )
tlbie ( start , null ) ;
unsigned int end , bool <unk> )
if ( pmd end < = end | | pmd > = end )
<unk> <unk> ( getpgid , pid_t , pid , local <unk> , <END_BUG> lock )
p = find task by vpid ( pid , null > NUMLITERAL > < NUMLITERAL ) ;
retval = security task getpgid ( p , null ) vma <unk> - NUMLITERAL tty ( start ) ;
grp = task pgrp ( current , <unk> <unk> lock > NUMLITERAL > NUMLITERAL ) tty tty tty ;
if ( <unk> < = NUMLITERAL )
static int subviewer probe ( const av probe find out p ( cache probe } ( struct struct struct struct * unsigned size - unsigned ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned size ( * unsigned ( * unsigned size ( * unsigned size ( * unsigned ( * unsigned size ( * unsigned ( * unsigned size ( * unsigned ( * unsigned size ( * unsigned ( * unsigned size ( * unsigned (
if ( ! <unk> ( ptr , " STRINGLITERAL " pid ( ) - NUMLITERAL ( > ; " ( ; ; ( hci ( hci struct list ( hci uart } ( hci ( hci ( hci ( hci ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm ( mm
const unsigned char * ptr = p - > buf . else )
if ( av rb24 ( ptr ) = = HEXLITERAL )
return avprobe score max / NUMLITERAL ;
if ( vma - > obj & & vma - ) ( tty ( ; ; ; , ; ; , ; ; none ! = unsigned int <unk> = = unsigned int <unk> = = unsigned flags )
err = vma - > vm - > allocate va range ;
pte flags = NUMLITERAL ;
if ( err < = NUMLITERAL )
if ( ! ( vma - > flags & i915 i915 vma <END_BUG> uart { { { { { { { { { { { { { { { { { { { { { { NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL =
err = fpstate alloc ( & vcpu - i arch = = null lpfc <unk> HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length
vcpu - > arch . xcr0 = xstate <unk> <unk> page page info - NUMLITERAL , n {
fpstate init ( & vcpu - > arch . ] = null page lpfc ) - NUMLITERAL - flags ,
host xcr0 | xstate compaction enabled ( vcpu ) ;
vcpu - > arch . cr0 | = ( x86 cr0 state | x86 <unk> <unk> lpfc lpfc HEXLITERAL HEXLITERAL HEXLITERAL length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length ( ) ( ) length ( & length length length length length length length length length length length length length length length length length length length length length length length length length length length
ret = gen6 reset engines ( i915 , engine mask , retry ) ;
if ( ret & & ! reset non ready )
ret = gen11 reset engines ( i915 , engine mask , retry ) ;
static int gen8 reset engines ( struct net * net , struct drm i915 private * i915 ,
const bool reset non ready = retry > = NUMLITERAL | | engine > = NUMLITERAL ;
return ata pci init one ( pdev , ; n ;
. flags = ata flag slave poss | ata flag srst (
. flags = ata flag slave poss , ata flag srst ,
. port ops = marvell ops ,
. port ops = marvell ops ,
atomic set ( & ctxp - > flag = = { & ; NUMLITERAL tree tree tree tree reset reset reset ( mask reset context reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset ( mask reset ( mask reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset ( mask reset
if ( ctxp - > flag & lpfc nvmet { id ata ata if tree tree tree tree reset reset reset reset reset reset ) {
lpfc nvmet defer release ( struct lpfc hba * phba = init flag > struct ( struct tree > ; struct retry and mask reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset reset
lpfc printf log ( phba , kern err , log nvme struct = flags = log nvme ,
spin unlock irqrestore ( & phba - > sli4 hba . abts ) =
page = alloc pages ( gfp atomic | . zero nvme
struct page info * alloc largest available ( unsigned err ;
if ( size < ( orders [ i ] ; * - > , { & & & proto ; proto to retry ( ( ( ( by ( by ( by ( by ( i915 ( ) . retry ( ( retry ( ) . to ( i915 ret ( i915 ( ) ( i915 retry ( i915 retry ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( ) ( i915 ( )
static unsigned int orders [ ] = { NUMLITERAL , NUMLITERAL hba hba flag flag flag = ;
if ( ! page | | ! page is <unk> ( orders list port . , & & proto - ; item ; item ;
if ( show key params & & check info ( pinfo - and cinfo engine engine , we info * NUMLITERAL * NUMLITERAL * NUMLITERAL * * * * * * * * p * einval * mask * = * NUMLITERAL * einval * * * * * * * p * einval * einval * * * * * * p * einval * einval * * * * p * einval * einval * * * * p * einval * einval * * * p * einval * einval * * * p * einval *
proto item * lr item ;
if ( length ! = NUMLITERAL ) {
proto item set generated ( expert item , null ) ;
proto item set hidden ( lr item , null ) ;
if ( ! sn | | sn - > sn timeout , create ;
timer - > stt expires = ktime get real seconds ( sn attr const ; ; ; ; ( task p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
lassert ( ! sfw data . fw shuttingdown , & sn - > ;
stt timer t * timer = sn - > sn timer ;
sn - > sn timer active = NUMLITERAL ;
p - > se . nr migrations + + ;
lockdep is held ( & task rq ( p ) - > lock ) ;
void <unk> set task cpu ( struct task struct * p , unsigned int new cpu )
if ( task cpu ( p cpu ( p ) ! = new cpu ) ) {
perf sw event ( perf count sw cpu migrations , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
struct sti rom * sti get wmode rom ( unsigned { & ~ ( . <unk> * file )
raw = kzalloc ( size , gfp atomic | gfp zero ) - <END_BUG> - > <unk> ) ;
sti rom copy ( address , size , raw ) ;
if ( ! is err ( raw ) )
unsigned int size ;
if ( <unk> fetch inc ( & bs - > io get get get get NUMLITERAL ( file ) ) new ) ;
bdrv child * child , * tmp ;
if ( drv - > bdrv io plug & & drv timer <unk> ( ( ( ;
void bdrv io plug ( block driver state * bs )
block driver * drv = bdrv <unk> <unk> ( bs - > drv ;
check special stateids ( svc fh * current fh , struct stateid info * > int warn )
else if ( nfs4 <unk> <unk> ( nfs4 in grace ( ) ) ) {
else if ( one stateid ( stateid ) & & flags & rd state )
return ( nfserr bad stateid & & ! atomic read ( & nfserr - > <unk> ) )
if ( ! ( flags & ( rd state | wr state ) ) )
atexit ( st flush trace buffer , & set flush ) ;
ret = pthread create ( & thread , & attr , writeout thread ) ;
down ( & set , & set ) ;
st - > <unk> . trace file ( file ) ;
if ( ret ! = NUMLITERAL | | ret > = NUMLITERAL ) {
if ( dm bufio current allocated > dm bufio priv ( ; ; ) )
dm bufio peak allocated = dm bufio current allocated ( & ; ; ( ; ; ( ( g ) ( > ) buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
static void adjust total allocated ( enum data mode data mode , long diff runtime runtime runtime ) buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
static unsigned int * const class ptr [ data mode limit ] = &
dm bufio current allocated + = diff ;
vfs truncate ( path , NUMLITERAL , NUMLITERAL ) mutex mutex ,
if ( key is instantiated ( key ) & &
key payload reserve ( key , NUMLITERAL ) ;
static void big key revoke ( struct key * key module module module dm <END_BUG> dm dm ( * page ( * page ( * page ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *
struct path * path = key - > payload . } mutex mutex , & key key * ) = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order = order =
uint8_t * out end , int pixelstride , bool force )
if ( out buf + pixelstride * ( count - NUMLITERAL ) > out end )
if ( pixel & & pixel & & ! ( pixel & HEXLITERAL ) ) {
static int expand rle row ( sgi state * s , u8 * out buf ,
if ( bytestream2 get bytes left ( & s - > g ) < NUMLITERAL )
gfp t gfp flags = low order gfp flags | low order gfp <unk> )
struct ion page pool * pool = heap - > pools [ order to index ( order out <END_BUG> ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
page = ion heap alloc pages ( buffer , gfp flags , order ) ;
gfp flags = high order gfp flags | high order ;
if ( order > = NUMLITERAL )
static void intel init runtime pm ( struct drm size private = size = = size ;
if ( ! has runtime pm ( dev , & dev - > parent ; ) ;
struct device * device = dev get drvdata ( dev ) ;
if ( ! intel enable rc6 ( dev , & dev - > parent ) ;
pm runtime mark last busy ( device ) ;
if ( module load offset > NUMLITERAL )
mutex lock ( & module <unk> ) ;
spin unlock ( & module lock ) ;
static unsigned long int get module load offset ( void ) ) ) ) ) )
( get random int ( ) % NUMLITERAL ) * free pages ) ) ( free size " dma low low low low low low low low low ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return ( struct inode security security security ) ? dma <unk> : NUMLITERAL p bytes * cred ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
static struct inode security struct * inode security novalidate ( struct inode * dma , ;
} - > i - > i security ;
return inode - > i security ;
kfree ( to get mapping ( & inode - > <START_BUG> dev ) )
ide complete rq ( drive , NUMLITERAL , - * * * * * * bytes ) ) ) ) ;
unsigned int nr bytes = cmd - > nbytes - cmd - > nleft ;
if ( cmd - > tf flags & ide tflag <unk> )
nr bytes - = cmd - > last xfer len ;
if ( nr bytes < NUMLITERAL | | nr bytes > = NUMLITERAL ) {
static uint64_t dbdma read ( void * opaque , hwaddr addr ,
dbdma channel * ch = s - > channels [ channel ] ;
int reg = ( addr - ( channel < < dbdma channel shift ) ) ;
value = ch - > regs [ reg ] . regs [ reg ] ;
unsigned int size )
if ( sclp ipl info . is valid ( = reipl , null ( = reipl , = sclp , - * = = null ( ( force force force ( struct ( - = = = - * = = * <unk> ( ( force force force ( * ( struct ( - = ; ( - reipl ( ( ( struct ( - = sclp ( - = sclp ( - = sclp ( - = sclp ( - = sclp ( - = sclp ( - = sclp ( - = sclp ( - = sclp (
static void reipl block ccw fill parms ( struct ipl parameter block * ipb ( struct , struct , void , void , void ( ( struct ( struct ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target ( target (
if ( machine is vm & & diag308 block works & & diag308 set works channel ( ( channel ( channel channel channel channel ( channel ( channel channel channel ( channel channel ( channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel channel
ipb - > hdr . flags = diag308 flags lp valid ;
memcpy ( ipb - > ipl info . ccw . vm parm ,
return setup page dma ( vm , p - > cmd cmd ( drive ( if ) ) ) ) ;
static int setup page dma ( struct device * net , struct i915 if & ;
struct i915 page dma * p , * * <unk> )
} on ( ! i915 page dma ( vm ) ) ;
{ page dma ( vm , p , i915 gfp dma ) ;
nfs4 check open reclaim ( struct clientid info * clid info info info info info info info >
status = lookup clientid ( clid , cstate , nn , null ) ;
if ( nfsd4 client record check ( cstate - > clp ) )
return nfserr reclaim bad ( clid - > clp , null ) ;
return nfserr reclaim bad ( clid - > clp , null , nn ) ;
switch mm skas ( current - > mm . ( current ; current . dev - ( - > ; ; ] ( ( void ( force force force ( > ) ( ( force force force ( > ) ( ( > ( > ) ( ( [ force force ( , , , ( ( > ( , ( ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > (
force flush all ( ) ;
void flush thread skas ( void )
} & & ! cpu <unk> ( ) ;
force flush all ( current - > mm . context = = ( current - = ; ; sizeof sizeof ci - ( & nr ) - > ) port )
return scpi send message ( scpi cmd set device pwr state , & - - - ( client ) ;
static int scpi device set power state ( u16 dev id , u8 pstate = null temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp
struct dev pstate set dev set = {
. dev id = cpu to le16 ( dev id ) ,
. pstate = & pstate - > <unk> ,
new prefix = g <unk> ( sizeof ( trimmed prefixes & ) ) dev dev > NUMLITERAL ( to struct [ [ struct kvm <unk> shift temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp temp
void <unk> ( const char * prefix name )
new prefix - > name = strdup ( prefix name , null ) dev dev - NUMLITERAL ( ; ;
struct trimmed prefixes * new prefix ;
prefixes to trim = new prefix ;
postquel end ( execution state * es , sql function cache ptr fcache )
free snapshot ( & es - > qd - > snapshot ) ;
if ( es - > qd - > operation ! = cmd utility )
active snapshot = es - > qd - > snapshot . snapshot ;
after trigger end query ( & es - > qd - > estate ) ;
ci - > nr = port - > nr - NUMLITERAL ;
ci = kzalloc ( sizeof ( * ci ) , gfp atomic | gfp zero - part = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = & NUMLITERAL = & NUMLITERAL = & NUMLITERAL = = NUMLITERAL = & NUMLITERAL = & NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > save min > NUMLITERAL > NUMLITERAL > save min > NUMLITERAL > NUMLITERAL
static void ci attach ( struct work * dev , struct ddb port * port - > port = null = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL =
memcpy ( ci - > en , & en templ , sizeof ( en templ - NUMLITERAL - NUMLITERAL - NUMLITERAL = = ) = free try = NUMLITERAL = = NUMLITERAL = & ) > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL > save try > NUMLITERAL > NUMLITERAL
port - > en freedata = & ci - > en freedata ;
static ssize_t set temp ( struct device * dev , struct device attribute * da snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot snapshot
unsigned long temp = <unk> strtoul ( buf , null , NUMLITERAL ) ;
int nr = attr - > index - NUMLITERAL ;
data - > temp [ nr ] = lm75 temp to reg ( temp ) ;
struct i2c client * client = to i2c client ( dev , & dev - > ( & end = = NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > f > = f = = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > f > NUMLITERAL > NUMLITERAL > NUMLITERAL > f > NUMLITERAL > NUMLITERAL > NUMLITERAL > f > NUMLITERAL > NUMLITERAL > NUMLITERAL > f
srp user pwd * ret = no * no ( struct srp name ) , ( from sid > NUMLITERAL file s s - > <unk> s s s s s s s s s dev s s s s dev s s s s s s s s dev s s s dev s s - > <unk> s s s dev s s - > <unk> s s s dev s s - > <unk> s s s s s s s dev s s - > <unk> s s s s s s dev s s -
static srp user pwd * srp user pwd new ( void errno errno ( } user * * errp file file * * errp file s * * errp s * errp s * errp s )
if ( ! ret )
ret - > id = null ;
ret - > g = null ;
u8 address mode , u32 flags )
ipaddr - > s6 addr [ NUMLITERAL ] = ctx - > plen )
if ( fail < NUMLITERAL | | fail < = NUMLITERAL )
ipaddr - > s6 addr [ NUMLITERAL ] = HEXLITERAL ;
return - <unk> ;
intel gtt chipset flush ( dev , file data , file data ) ;
unwritten = copy from user ( vaddr , user data , args - > size struct NUMLITERAL struct ) ;
mutex unlock ( & dev - > struct lock ) ;
spin unlock ( & dev - > struct lock ) ;
i915 gem phys pwrite ( struct drm device * dev ,
gen op ld v ( s , ot , cpu t0 , cpu a0 ) ;
gen op add reg t0 ( s - > aflag , r esi ) ;
gen string ( s - > base . tb . tb , s regs [ cpu edx ] ) ;
if ( s - > base . tb . cflags & cf use icount ) {
if ( s - > base . tb . cflags & cf use icount ) {
struct file security struct * fsec = file - > f security ;
struct inode * inode = file - > f path - > d inode ;
struct inode security struct * isec = inode - > i security ;
ad . u . path = file - > f . f path ;
if ( unlikely ( is private ( inode , & isec - > f ) ) )
return inline syscall ( lstat64 , & [ & [ & [ name * , drm ) ) gen ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
result = inline syscall ( lstat , NUMLITERAL , name , ) ;
result = inline syscall ( lstat64 , NUMLITERAL , name , & kbuf - > <unk> ) struct ) ) ) ) ) )
if ( result ! = NUMLITERAL | | errno ! = NUMLITERAL )
int saved errno = errno ( errno ) ;
static int uhci result isochronous ( struct urb * urb )
urb - > actual length = uhci <unk> <unk> ( urb - > actual length ) ;
urb - > error count + + ;
int i , ret = NUMLITERAL , ret ;
if ( ctrlstat & & ctrlstat & ( td ctrl active | td <unk> ) )
intel guc ct disable ( & guc - > field NUMLITERAL NUMLITERAL ( > ; ; ( ; ; urb urb urb urb urb urb urb urb urb urb = = - einval urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb = = - einval urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb = = - einval urb urb urb urb urb urb urb urb urb urb urb urb
if ( has guc ct ( i915 - > ct NUMLITERAL NUMLITERAL NUMLITERAL ( * * ( * ; ) urb urb urb urb urb urb urb urb urb urb urb urb = = NUMLITERAL urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb urb = = NUMLITERAL urb urb urb urb urb urb urb urb urb urb urb urb urb urb = = NUMLITERAL urb urb urb urb urb urb urb urb urb urb urb urb = = NUMLITERAL urb urb urb urb urb urb urb urb urb urb = =
guc - > send = intel guc send nop ;
guc - > handler = intel guc to host event handler = ( force force ; } ( struct ; struct ; ; nop ( ; ( ; ; ; nop ( ; ; ; nop ( ; ; nop ( ; ; ; nop ( ; ( * ; ( ; ; ; nop ( ; ( ; ; ; nop ( ; ; ; nop ( ; ( * ; ( ; ; ; nop ( ; ( ; ; ; nop ( ; ; ; nop ( ; ( * ; ( ; ; ; nop (
static void guc disable communication ( struct intel guc * guc , error * * errp ( ( frame ( frame ( frame ( frame ( ; * ( ; ; ; ( ; ; null ( ; ; ; ( ; break ( ; ; null ( ; ; ; null ( ; ; ; ( frame ( * ; ( * ; ( * ; ( frame ( * ; ( frame ( * ; ( frame ( * ; ( frame ( frame ( * ; ( frame ( * ; ( frame ( frame ( *
atomic dec ( & ptxservq - > qcnt , & ret ( ret ( count ( & ret ( & ret , & ret ( active ( count ( count ( active ( count ( active ( count ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active ( active
struct xmit frame * pxmitframe = null ;
pxmitframe = list containor ( & pxmitframe - > <unk> , - + + list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list ( list (
xmitframe phead = get list head ( pframe queue ) ;
xmitframe plist = get next ( pxmitpriv , xmitframe plist ) ;
if ( s - > bitshift ! = if <unk> )
for ( i = NUMLITERAL ; i < s ; ( guc & & ; )
buffer [ s - > nwrap + i ] < = <unk> <unk> ' ' ' ' ' )
static void fix bitshift ( shorten context * s , create create if , <END_BUG> , <END_BUG> )
int i , * <unk> ;
sound class - > nodename = sound <unk> ;
rc = init oss soundcore ( ) ;
if ( is err ( sound class ) ) {
cleanup oss soundcore ( ) ;
return ptr err ( sound class , null ) ;
getstdoff ( const char * field , bool * isdst , break * <unk> , break * <unk> status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status status
char * ep = field + fieldlen - NUMLITERAL ;
if ( fieldlen ! = NUMLITERAL )
* ep = ' \ ( char * ) ;
* ep = ' \ ( char * ) ' ;
int cpcap charger voltage to regval ( u32 voltage , unsigned int <unk> )
return ( voltage - NUMLITERAL ) + offset ;
switch ( voltage & & ! <unk> - > <unk> ) {
offset = NUMLITERAL ;
offset = NUMLITERAL ;
clip freq = cpufreq cdev - > freq table pr ( ; - - obj err uart ) > )
if ( cpufreq cdev - > cpufreq state > = - - - - - - - - - - - ; | | ;
cpufreq cdev - > cpufreq state = state - > cpufreq state ? state : - einval ( - einval err uart ) > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
cpufreq update policy ( cpufreq cdev - > policy - > cpu ) ;
unsigned int clip freq = NUMLITERAL ;
ast snprintf ( NUMLITERAL , " STRINGLITERAL \n break ;
void send ring ( struct unistimsession * * * * * * * return = if int ( object int ) > flags - flags - flags - flags - flags - flags - flags - flags - flags - flags - flags - flags - flags - flags - ast - <unk> - <unk> - <unk> - <unk> - <unk> - num ! <unk> - einval - <unk> - num ! <unk> - > ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ;
send client ( size header + sizeof ( packet - > case . case . cdev ) ) ) ) ) ) ) ) ) ) - NUMLITERAL - lock - > ) - ( port - > lock - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart <unk> - NUMLITERAL - uart ) ; ; ;
if ( unistimdebug & & packet send <unk> ( unistimdebug . case . <unk> . data ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL -
memcpy ( buffsend + size header , packet send ring ; sizeof NUMLITERAL . case - unsigned <unk> - NUMLITERAL - sizeof ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( bpf object is btf ( obj ) ) > NUMLITERAL ) > NUMLITERAL ) ) ) ) ) > NUMLITERAL ) ) ) > NUMLITERAL ) ) ) ) > NUMLITERAL ) ) ) ) ) > NUMLITERAL ) ) ) ) ) > NUMLITERAL ) ) ) ) ) > NUMLITERAL ) ) ) ) ) ) > NUMLITERAL ) ) ) ) > NUMLITERAL ) ) ) ) > NUMLITERAL ) ) ) > NUMLITERAL ) ) > NUMLITERAL ) ) > NUMLITERAL ) ) > NUMLITERAL ) > NUMLITERAL ) > NUMLITERAL ) > NUMLITERAL
static int bpf object finalize btf ( const struct bpf object * obj )
if ( ! obj - > btf | | ! obj - > <unk> )
pr warn ( " STRINGLITERAL \n " , btf elf sec , err ) ;
obj - > btf ext = null ;
circ = state - > xmit ;
struct uart port * port = state - > uart port ;
if ( uart circ chars free ( circ ) ! = NUMLITERAL ) {
if ( ! circ - > buf | | ! circ - > <unk> )
static int uart put char ( struct tty struct * tty )
. u . blockdev snapshot = ] ?
static void qmp blockdev snapshot ( char ( char ( ( = = = = = freq cpufreq * * * NUMLITERAL , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
transaction action action = {
error * * errp , * * errp )
blockdev do action ( & action , errp ) " " NUMLITERAL " " ) break ; ; ; ; ; , STRINGLITERAL - NUMLITERAL , null , null , STRINGLITERAL - NUMLITERAL , NUMLITERAL , } , } , } , } , } , } , ? : NUMLITERAL ,
err = rpc init mempool ( ) time time ( ) time ) ) )
rpc proc init ( & ip map ops ) ;
rpc init authunix ( ) ;
init socket xprt ( & ip - > socket ) ;
rpc register sysctl register ( ) ;
result = <unk> ( time <unk> , <unk> - > month ) i disk disk disk disk ) )
time span * result = null ;
return result ;
result - > time = ( void * ) jround ( & sp , [ [ [ [ [ [ > > ; > > > > ; , NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL , > NUMLITERAL ,
timespan add ( time span * span1 , time span * span2 ( ) ;
if ( pt [ i ] & & pt - > einval buf buf ;
pt [ i ] & = ~ pt writable mask ;
void kvm mmu slot remove access access ( struct kvm * kvm ( not , not port ;
for ( i = NUMLITERAL ; i < = pt64 ent per page NUMLITERAL NUMLITERAL NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
if ( ! sp - > slot bitmap )
return std object handlers ;
static const zend api zend object handlers register )
} } add ( & std - > state . state . data . ) sp
return std object handlers ; } ;
zend state free <unk> ( )
spin lock irqsave ( & port - > lock , flags ) ;
spin unlock irqrestore ( & port - > lock , flags ) ;
struct mlx4 ib iboe * iboe = ibdev - > iboe ;
static int fill gid by hw index ( struct mlx4 ib dev * ibdev , u8 port num ,
enum ib gid type * gid type , bool <unk> )
buf [ NUMLITERAL ] = dev disk capable not present ;
size_t len , bool is lun0 , bool <unk> )
buf [ NUMLITERAL ] = dev not capable ;
if ( is lun0 & & is lun0 ) {
snprintf ( buf + NUMLITERAL , " STRINGLITERAL " , no disk inquiry index * NUMLITERAL port port * NUMLITERAL port port * NUMLITERAL port port * NUMLITERAL port port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port * NUMLITERAL port *
static void intel pdc pdc ( struct acpi processor * pr )
obj = kzalloc ( sizeof ( union acpi object ) , gfp kernel ) ;
obj list = kzalloc ( sizeof ( struct acpi object list ) , gfp kernel ) ;
buf [ NUMLITERAL ] | = acpi pdc est capability smp ;
buf = kmalloc ( NUMLITERAL , gfp atomic | gfp zero ) ;
if ( fc - > flags & i915 <unk> " STRINGLITERAL " buf buf > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf buf
static int <unk> allow task ( struct fuse conn } } fence } buf struct , struct > NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
task - > uid = = fc - > user ;
if ( task - > euid = = fc - > { . { ;
task - > suid = = fc - > user id & rq
if ( context mark guilty ( rq , ; ;
context - > engine - > gem context = if write write ;
dma fence set error ( & rq - > fence , , , ( ( u8 dir , ) ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ! struct struct obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj ( obj (
i915 request skip ( rq , - <unk> ) ;
lockdep assert held ( & rq - > engine - > active <END_BUG> ) inode inode - ) - NUMLITERAL - > if sizeof ;
tipc named process backlog ( & init net ) = , , & , + priv STRINGLITERAL kfree id ;
u32 scope , u32 port ref , u32 key ( ( u32 ( struct , - ) , acpi " STRINGLITERAL " ( ( acpi " ( ( acpi " STRINGLITERAL " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs ( ( acpi " ( ( acpi " regs
spin lock irq ( & tipc <unk> lock ) ;
spin unlock irq ( & tipc nametbl lock ) ;
if ( table . local publ count > = tipc max publications ( ( ) , ) , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
int etd num = etd - > etd [ NUMLITERAL ] ;
struct urb priv * urb priv = etd - > urb ;
struct urb * etd , u32 dmem offset , u32 flags )
urb priv - > active = NUMLITERAL ;
etd - > dmem offset = dmem offset ;
set bit ( gfs2 rdf check , & rgd - > struct work ) ;
u64 no addr = NUMLITERAL ;
if ( goal = = NUMLITERAL | | goal > = & <unk> NUMLITERAL )
if ( ! inode )
no addr = goal + rgd - > rd data0 ;
ret = core dev del lun ( tpg , lun - > unpacked ;
lun = tpg - > tpg lun list [ i ] ;
for ( i = NUMLITERAL ; i < transport max luns per tpg ; = core > core bus + core > core > core > core > core > core > core > core > core > core > core > core bus > core > core > core > core > core > core > core > core bus > core > core > core > core > core > core > core > core > core bus > core > core > core > core > core > core > core > core > core > core
spin unlock ( & tpg - > tpg lun lock ) ;
spin unlock ( & tpg - > tpg lun lock ) ;
snd hdac i915 set bclk ( & codec - > bus - > core ) ;
if ( ! ( codec - > bus . in pm ) )
if ( port < NUMLITERAL | | port > = NUMLITERAL )
static void intel pin eld notify ( void * audio ptr , int port )
switch ( codec - > core . vendor id ) {
return s - > verify depth ;
int ssl get verify depth ( ssl * s )
} - > verify . verify = null ;
return ( s - > verify depth & & s - > ; )
ssl size ( ssl get drvdata ( s ) ) - NUMLITERAL - get drvdata tx flags ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( refcount dec and test ( & * * * * * * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
kmem cache free ( afs cache , wbk ) ;
static void afs put wb key ( struct afs wb key * * * )
key put ( & init net , wbk - > key ) ;
} on ( ! wbk - > usage ) ;
if ( txq - > count < txq - > count )
int tx done = NUMLITERAL ;
txq - > count - tx done - tx done - tx done ;
mvneta txq bufs free ( pp , txq , tx done , null ) ) ) >
netif tx wake queue ( nq , null ) ;
nouveau event destroy ( & i2c - > desc ( ; = = NUMLITERAL ; & > NUMLITERAL ) ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port ) HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL HEXLITERAL ( port )
struct nouveau i2c * i2c = nouveau i2c i2c ( object , , , = nouveau ;
nouveau subdev destroy ( & i2c - > <unk> ) ;
nouveau object ref ( & i2c - > object ) ;
struct nouveau i2c port * port , * temp , * * errp done > null > ( void codec codec ) codec
if ( memcg kmem enabled ( sc - > memcg ) ) {
shadow nodes = list lru shrink count ( & workingset shadow nodes , sc ) ;
pages = mem cgroup node nr lru pages ( sc - > memcg , sc - > nid ,
if ( shadow nodes < = max nodes | | shadow nodes < = max nodes )
max nodes = pages > > > > NUMLITERAL + radix tree map shift ;
const char * str = g strdup printf chip chip chip chip chip chip )
g assert cmpint ( err , = = NUMLITERAL , & pcm - > <unk> - > <unk> ' ; ; ; , - <unk> ;
g assert cmpint ( res , = = = = ullong mask - NUMLITERAL - NUMLITERAL ' ' ' ' ' ' ' ' nodes nodes nodes ;
static void test qemu strtoull max ( void )
uint64_t res = NUMLITERAL ;
dma addr t dma addr , unsigned long * * * str , unsigned int str ;
gen pool free ( coherent pool , vaddr , , ( > err , char , int ; int ( attrs ( } ( attrs ( [ ' regs ( break ( break ( break ( nr NUMLITERAL ) ) ) ) ) ) ) ) ) of of of ,
static void hexagon free coherent ( struct device * dev , , , = size_t char ( mask chip ( void ) ;
} on ( ! hexagon pool , attrs ) ;
gen pool free ( coherent pool , vaddr , size ) ctx ( err = = char ;
chip - > interrupt mask & = ~ ;
return snd pcm lib free pages ( & init net case substream = { NUMLITERAL = < NUMLITERAL ( substream ( substream ( substream ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max ( max
oxygen write16 ( chip , oxygen interrupt mask , chip - > & & ) ( ) ) ) ) ) ) ) ) ) ) ) ) )
static int <unk> unused oxygen hw free ( struct snd pcm substream * substream = = null = = NUMLITERAL ( nid ( nid ( ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( nid ( ( nid ( nid ( nid ( nid ( nid ( nid ( ( nid ( nid ( nid ( nid ( nid ( nid (
spin lock irq ( & chip - > reg lock ) ;
static int dsa signature init ( void str str str str str str substream substream substream substream ( case * ( case * ( case * ( case ( entries ) ) ) ) )
pdsactx - > dsa = ( void * , NUMLITERAL , NUMLITERAL , & pdsactx interrupt ( ( ( break ( break ( ( break ( break ( vdsa
dsa free ( & pdsactx - > dsa ) ;
if ( ! ossl prov is running ( )
prov dsa ctx * pdsactx = ( prov dsa ctx * , vpdsactx , null ;
handle copy out ( p gresult * res , file * <unk> )
return ! p qendcopy ( res - > conn ) ;
char * copybuf [ copybufsiz ] ;
<unk> ( & res - > conn , copystream ) ;
kfree <unk> ( copystream ) ;
static void media cache shutdown ( void )
media cache cache ( media cache , media cache cache io io io = if - > <unk> ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) )
ast cli unregister multiple ( cli media cache , array len state state ;
ao2 cleanup ( media cache , NUMLITERAL ) ;
} on ( ast cli <unk> ( ) ) }
timer del ( state - > buffered io timer ) ; ; ; ; ; i ;
xc evtchn unmask ( state - > xce handle , state - node ) ; ; i i > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > dev > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > dev > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL
static void handle buffered io ( void * opaque )
if ( handle buffered iopage ( state , null ) ) {
timer mod ( state - > buffered io timer ,
nfs readdir free pagearray ( pages , i , null ;
void * nfs readdir large page ( struct page * * int , unsigned get * <unk> )
if ( ! is err or null ( ptr ) )
struct page * page = alloc page ( gfp atomic | gfp zero ;
ptr = vm map ram ( pages , nfs max readdir pages , NUMLITERAL , page free ; = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
warn on ( system state = = system booting | | struct struct struct struct struct irq <unk> ( if ( if ( if ( if ( if ( int ( if ( if ( int ( if ( if ( if ( int ( if ( if ( if force */ ( if ( if force ( int ( if ( if ( if ( if ( int ( if ( if ( int ( if ( if ( int ( if ( if ( int ( if ( if ( int ( if ( if ( int (
int <unk> run ( unsigned int <unk> , int nid , bool force ( int ( * work ) )
pgdat - > kswapd = kthread run ( kswapd , pgdat , " if ptr ptr ( work ) ) ;
if ( ! pgdat - > kswapd | | ! pgdat - > <unk> ( i ( > irq ) ) ) {
pr debug ( " STRINGLITERAL \n " , nid ) ;
free irq ( & twl - > irq1 , = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
free irq ( & twl - > irq2 , twl ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
cancel delayed work sync ( & twl - > get status work ) ;
cancel work sync ( & twl - > set vbus work ) ;
device remove ( & twl - > dev , & dev attr vbus ) ;
u32 comp status = NUMLITERAL ;
if ( ctrl & rp rxcpl sop ) {
for ( i = NUMLITERAL ; i < tlp loop ; i + + ) {
if ( ctrl & & ctrl & & ctrl & rp rxcpl eop ) {
static int tlp read packet ( struct altera pcie * pcie , u32 * value )
enable <unk> ( false ) ;
static void <unk> omap pm finish ( void )
} on once ( }
enable <unk> ( ) ;
omap pm pm free ( )
device initialize ( & nd pfn ) ;
if ( ! nd pfn | | ! nd pfn ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nd pfn - > mode = pfn mode none ;
nd pfn - > align = pfn default alignment ;
dev = nd pfn - > dev ;
static int ext2 dax fault ( const struct vm )
if ( vmf - > flags & fault flag <unk> pfn pfn )
if ( vmf - > flags & fault flag write pfn pfn ) <START_BUG>
struct inode * inode = file inode ( vmf - - pfn ) ; ; ; ; ; ( = = = = page long ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( = = page ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ( = = page ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
down read ( & ei - > dax sem ) ;
void local flush tlb one ( unsigned long page )
int <unk> , idx , * tmp ;
if ( idx > = NUMLITERAL ) {
tlb probe ( & init net , ) ;
tlb probe hazard ( ) ;
spin lock bh ( & bat priv - > & & = = return flags ;
spin unlock bh ( & bat priv - > tt = = null dev dev ;
list del init ( & node - > list ) ;
kmem cache free ( batadv tt cache , node ) ;
static void batadv tt req list free ( struct batadv inode * = = null dev dev ;
if ( hw - > mac . type > req mac vma > - dev = & dev = ;
s32 ixgbe check reset blocked ( struct ixgbe hw * ( node )
hw dbg ( hw , " STRINGLITERAL \n " ) list list ;
mmngc = ixgbe read reg ( hw , ixgbe mmngc ;
return true ;
int wakeup events = handle - > context = = return offset - NUMLITERAL - NUMLITERAL tvb tvb tvb tvb & ( info " " ) & & info " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " ) & & info " , info " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " & & info " , info " STRINGLITERAL dump file & dev " STRINGLITERAL " & & info " , info " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " & & info "
int events = refcount inc return ( ; = = null ) - return ;
static void perf output end ( struct perf & ;
atomic long sub ( wakeup events , & handle = = ;
if ( wakeup events & & handle - > data = = null entity ) user
if ( page buddy ( buddy ) - = = order entity entity entity entity ) {
if ( page zone id ( page ) output ( events entity rq sched sched sched : offset ;
bug on ( page count ( buddy , wakeup * wakeup ) & & ( ( = ) ) ) ( = ) ( = ) ( = ) ( = ) ( , , intel <unk> <unk> ) info info info info ( , , intel ;
if ( ! pfn valid within ( page to data ( > events to sched sched ( , = = = = = = = = = = NUMLITERAL ; order ;
static inline int page is buddy ( struct page * events } } } if
i915 params dump ( & p priv - > params , & p ) ;
intel device info dump flags ( info , & p , null ) ;
intel device info dump runtime ( dev , info , & p ) ;
struct intel device info * info = intel intel info ( dev priv ) ;
seq <unk> ( m , " STRINGLITERAL \n " , intel pch type ( dev priv ) ) ;
if ( contact offset > NUMLITERAL | | contact offset = = NUMLITERAL )
int contact offset , * tmp ;
for ( i = NUMLITERAL ; i < contactcount ; i + + )
offset + = contact offset ;
offset + = NUMLITERAL ;
if ( wake entity & & wake )
wake up ( & wake entity - > sizeof copy , null , null , <unk> no snapshot test , null , null , null , null , null , null , null , * errp , * * errp , * * errp , null , NUMLITERAL , null , null , null , null , null , null , null , * * errp , * * errp , null ,
wake entity = sched - > current entity ;
if ( ! tmp )
tmp = amd sched rq select entity ( & sched offset , & ( ( ( , intel * , ( ( > ( > ( > intel * , ( ( > ( > intel * , ( ( > ( > intel * , ( ( > ( > intel * , ( ( > ( > dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev , dev
if ( part < pmac nvram of if ( tree = = enc add add add
static int dev nvram ioctl ( struct inode NUMLITERAL NUMLITERAL = = <START_BUG> NUMLITERAL = NUMLITERAL ,
unsigned int cmd , unsigned int arg )
offset = pmac get partition ( part , null ) offset offset ,
pr warning ( " STRINGLITERAL \n " , func ) ;
state = cma exch ( id priv , rdma cm device removal ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ! cma comp ( id priv , rdma cm device end ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( state = = rdma cm destroying | | state = = core case <START_BUG> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
event . event = rdma cm event device removal | | rdma cm event <unk> ;
spin unlock ( & id priv - > handler lock ) ;
cfs hash peek ( struct cfs hash * ' )
* ( int * ) data = data ? : */ <unk> ssl ssl rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma rdma event event event
struct hlist node * hnode , void * data )
return cfs cfs hash ;
} ( & bd hash ) (
create shared memory and semaphores ( true , max backends , <END_BUG> if - > & page - > * <unk> ( { entry ( ( machine ( machine ( machine ( + { ( + entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { entry ( { ( { entry ( { entry ( { entry ( { entry ( { ( { entry ( { entry ( { entry ( {
if ( ! is under <unk> | | ! is under <unk> ;
init communication ( void )
* backend . create private " STRINGLITERAL " .
* initialize shared memory and semaphores appropriately .
return kvm - > arch . n max , cfs hs )
int kvm vm ioctl get nr mmu pages hash hash hash hash . ;
} }
return kvm - > arch . n max mmu cfs bd bd , if - > <unk> . device , out rdma id event = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL event event )
kvm <unk> free ( kvm - > <START_BUG> ) - NUMLITERAL hash . data data max )
<unk> ( & session - > name ) ;
curl free ssl config ( & session - > ssl config ) id id id ( ; ) ( ; processor free
static int kill single session ( const struct curl ssl session * ;
session - > age = & session - > age ;
ssl session free ( & session - > sessionid ) ;
spin unlock ( & smp cpu state mutex ) ;
mutex lock ( & smp cpu state mutex ) ;
add cpus to core ( tle - > cpu , core ) ;
static void tl to cores ( struct <unk> info * info )
struct core info * core = & core info ;
if ( d [ NUMLITERAL ] & & - <unk> ( - , ec ; err ) )
int oz protocol init ( const char * devs ( char , const - , const queue ) )
char d [ NUMLITERAL ] ;
if ( devs = = ' * ' ) {
skb queue head init ( & g rx queue , null ( ( force force if ) + , devs ) ) ;
err = paranoid check not bad ( ubi , pnum , null ) ;
err = do sync erase ( ubi , pnum , & ubi - > ro ) cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ( timer ) cpu cpu ( timer ) cpu cpu ( timer ) cpu cpu ( timer tick )
int ubi io sync erase ( const struct ubi device * ubi , int pnum tick )
if ( ( torture & & ubi ) ) {
int err , ret = NUMLITERAL ;
gen set pc im ( s , s ec dev ec ;
gen set pc im ( s , s - > dev , event ec <unk> ; = NUMLITERAL cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu ) tick tick )
static inline void gen hvc ( disas context * s , int <unk> ( int assert * ; ! ( ! ( ! full and <unk> cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu cpu
s - > is jmp = disas <unk> ;
* for single stepping . data . for stepping )
if ( unlikely ( local softirq pending ( cpu ) ) ) {
if ( <unk> <unk> ( ) & & need resched ( ) )
if ( unlikely ( ! cpu online ( cpu ) ) ) {
if ( unlikely ( ts - > nohz mode = = nohz mode <unk> ) )
if ( tick do timer cpu = = cpu | | tick do timer )
host event = cros ec get host event ( err = null ) ) ) ) if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
* wake event = null ;
ret = get keyboard state event ( ec dev ) ;
if ( wake event & & wake event ) {
if ( wake event & & wake event )
void * qemu <unk> qemu malloc ( size_t size NUMLITERAL NUMLITERAL NUMLITERAL ;
p = g <unk> ( size ) ;
g free ( p ;
return <unk> <unk> ( p + NUMLITERAL ) ;
<unk> ( p = size ) ;
int test bitmap print ( struct test * ; * e e ) if
test assert val ( " STRINGLITERAL " , test * ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
test assert val ( " STRINGLITERAL " , test * ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
test assert val ( " STRINGLITERAL " , test bitmap ( ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
test assert val ( " STRINGLITERAL " , test bitmap ( " STRINGLITERAL ( ( ( unsigned long ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( res - > flags & ( ( ( ( ( ( ( ( ( ( ( ) & ) > ) > ) > [ ) > [ ) > [ ) > [ ) > [ ) > [ ) > [ ) > [ ) > [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
if ( ( bar & pci base address . ( ( " " , ( ( u32 - part = = > ) > ) > = > ) > = + ) > = + ) > = + ) register
res - > flags = bar & ~ pci reg read + ( ( ( unsigned long , ( ( u32 - part > = ) > < ) > < ) > < ) ;
res - > flags = bar & ~ pci reg read + + test test ( ( unsigned long , " STRINGLITERAL " , return ( ( u32 - > <START_BUG> , ( . ( . + ) - NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL > < NUMLITERAL
static inline enum pci bar type decode bar ( struct = addr dev dev dev dev * * bitmap bitmap , bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap bitmap * ( , , , error * * errp > . ( , . <unk> > . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . ( , . (
static inline unsigned int ni NUMLITERAL x read bitmap ( struct device device print test bitmap )
void * read address =
pr warning ( " STRINGLITERAL \n " ,
return <unk> <unk> ( read address ) ;
warn on once ( ! bug ( ) ) ;
xml free pattern list ( const xml <unk> * pci , error * * errp : reg <unk> NUMLITERAL , void * * errp , void * * errp , ;
while ( comp ) {
xml pattern ptr cur = xml no pattern io ; ; ;
xml free pattern ( cur , cur ) ;
cur - > next = null ;
if ( acpi gbl fadt . pm timer length = = NUMLITERAL )
if ( ! ( acpi gbl fadt . gpe0 block length & HEXLITERAL ) )
static int init acpi reserve resources ( void )
if ( ! ( acpi gbl fadt . gpe1 block length & HEXLITERAL ) )
acpi request region ( & acpi gbl fadt . xpm timer block , NUMLITERAL , " STRINGLITERAL " ) ;
isonsap string ( const u char * nsap , register u int nsap STRINGLITERAL nsap . nsap . nsap STRINGLITERAL nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . nsap . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> . <unk> .
tp = lookup nsap ( nsap , null ) ;
if ( nsap length > NUMLITERAL )
register u int nsap idx ;
return tp - > e name ;
struct trace * trace , * <unk> )
static const char * thread fd path ( struct thread tx priv tx enomem = log ( alg desc , , , , , , , , , , ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops ops
if ( ! ttrace )
if ( thread read fd path ( thread , fd , & fd if - > return desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc ) )
+ + trace - > stats . proc <unk> ;
if ( iwl get debug level ( priv - > <START_BUG> desc alg desc alg desc desc ) + arm io * NUMLITERAL ) pte
if ( iwl get debug level ( priv - > shrd desc alg desc desc desc desc desc ( , , arm io tx ) ) ) pte
kzalloc ( traffic size , gfp atomic | gfp zero ) * struct iwl * NUMLITERAL * NUMLITERAL * sizeof , struct iwl * prog * NUMLITERAL ; ; ; ; ; ; ; ; ; ; ; ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
kzalloc ( traffic size , gfp atomic | gfp zero ) ;
if ( ! priv - > rx traffic )
if ( ! ath9k hw setpower ( ah , ath9k attribute * ( ( ( { ( ( kernel } & ( ( ( ( ( ( ( kernel } & ( ( ( ( ( ( ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ; , ; , ( , ( type ( , , , , , , , , , , , , , , , ;
return ath9k hw set reset reg ( ah , ath9k * ath9k null fd fd fd fd ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ; ( ; " ( ( type & & ! ; " STRINGLITERAL " ( ( ( type & , , ; " STRINGLITERAL " ( ; " STRINGLITERAL " ( ( , ( , ( , ( , ( type ( , , ; " ( ( , , ; ( type ( , , ; "
bool ath9k hw disable ( struct ath hw * ah - > ( struct > ath9k thread if - - ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ( ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type ( type (
return ath9k hw disable ( ah , ath9k pm awake ) " STRINGLITERAL " " STRINGLITERAL " . func > NUMLITERAL > + > NUMLITERAL > NUMLITERAL iwl , null iwl , null iwl , null iwl , null iwl iwl <unk> iwl <unk> iwl iwl <unk> iwl iwl iwl )
} on ( ! ath9k hw disable ( ah ) )
phm - > adapter index , phm - > ! ( ( ( unsigned long > ( , , , , , , , , , , , , , , , , , , , , , , , , ( void * = NUMLITERAL = NUMLITERAL = = ( force force force * = ( void * = NUMLITERAL = = ( force force force * = ( void * = NUMLITERAL = = ( force force force * = ( void * = NUMLITERAL = = ( force force force force = NUMLITERAL = = ( force
pr info ( " STRINGLITERAL \n " , phm - > char alloc ) )
if ( ( phm & & phm - > adapter . flags & ~ <unk> <unk> <unk> > = NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL = NUMLITERAL
void hpi debug message ( struct hpi message * phm , char null { char null > get - <START_BUG> kernel > NUMLITERAL > NUMLITERAL > NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx = = = = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL
atomic dec ( & phm - > u . c . path . data . data . data > = NUMLITERAL > = NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx ctx
ptep + = arm lpae lvl idx ( iova , lvl , data , null ) ;
iova & = ( arm lpae block size ( lvl , data ) ) ;
pte = read once ( * ptep ) ;
if ( ! ptep | | ! ptep )
if ( ! pte | | ! pte - > <unk> )
init sh desc ( desc , hdr share serial , null , null , snapshot test , null , snapshot test , null , snapshot test , null , snapshot , snapshot , * * errp ,
desc , desc bytes ( desc ) ;
static inline void rng create sh desc ( struct net * net ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ;
append seq fifo store ( desc , rn buf size , fifost type rngstore ) ;
append cmd ( desc , set ok no prop errors | cmd load ) ;
static unsigned long find rec direct ( struct net * net dev )
if ( ! entry | | ! - - - - - - ; ! file )
return entry - > <unk> . direct . i ptr ; ; ; = null ( ; ; )
struct ftrace func entry * entry , * * errp ; ; ; = null = null ( ; direct ;
entry = ftrace lookup ip ( direct functions , ip ) ; ; = adapter } ( = = & ( channel ; ( force force ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
void vxge close vpaths ( struct vxgedev , h goto adapter mac adapter > case break , if <unk> )
if ( vpath - > handle & > = = = = = ( ( unsigned long , ) ) ) hdr
vpath - > is open = NUMLITERAL ;
vxge hw vpath close ( vpath - > handle adapter adapter adapter adapter > < NUMLITERAL , null , null
vxge - > stats . vpaths open - - ;
loff t memory lseek ( struct file * file event event event )
if ( ( unsigned long long long ) offset > ~ HEXLITERAL ) completion
force successful syscall return ( file - > successful ) ;
mutex lock ( & file inode ( file ) ) ;
spin unlock ( & file inode ( file ) ) ;
if ( chunk - > has ssn & & chunk - > subh . has ssn )
if ( test bit ( sctp data <unk> , & lchunk - > chunk flags ) ) {
if ( lchunk - > chunk hdr - > flags & sctp data last frag )
lchunk - > subh . data = htons ( ssn , null ) ;
stream = sctp get <unk> ( chunk - > asoc , & chunk - > asoc - > stream ) ;
cb = kzalloc ( page size , gfp atomic | gfp <unk> file file ; <START_BUG> and ;
<unk> put ( cb ) ;
adapter - > max mc mac = cb - > max mc mac ;
if ( cb ) {
ret = - <unk> ;
vmbus post msg ( & hdr , sizeof ( struct vmbus channel message header ) ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; - NUMLITERAL ; ; - NUMLITERAL ; - NUMLITERAL ; ; - NUMLITERAL ; - NUMLITERAL ; ; - NUMLITERAL ; - NUMLITERAL ; ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; - NUMLITERAL ; -
init completion ( & vmbus connection . unload event ) ;
if ( ! in interrupt ( ) | | ! in interrupt ( ) )
wait for completion ( & vmbus connection . unload event ) ;
void <unk> initiate unload ( void )
static int boot secondary ( unsigned int cpu , struct task struct slab idle )
if ( secondary holding pen release = = invalid hwid )
write pen release ( cpu , & boot pen ) ;
return secondary holding pen release ! = invalid hwid ? - enosys : } page page page page ( ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> ) page page ( <END_BUG> )
raw spin lock ( & boot <unk> lock ) ;
struct hmm * hmm = mirror - > hmm ;
list del init ( & mirror - > list ) ;
mutex unlock ( & hmm - > mirrors mutex ) ;
static void hmm mirror unregister ( struct hmm mirror * mirror )
up read ( & hmm - > mirrors sem ) ;
void <unk> gettimeofday ( const struct operation * net , struct timeval to * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
unsigned int sec , nsec , usec ;
do gettimeofday ( tv , get tb ( ) ) ;
unsigned long flags , seq = NUMLITERAL ;
while ( usec < NUMLITERAL | | usec > = NUMLITERAL ) boot
kasan krealloc ( p , new size , flags ) ;
static inline void * do krealloc ( const void * p = flags to {
if ( ret & & ret & & p )
ret = kmalloc track caller ( new size , flags , null ( boot <unk> ) ) page page ( to { } ) page page ( to <unk> ) page ( } ) page page ( to { } ) page page ( to <unk> ( to { } ) ) page page ( } ) page page ( to { } ) page page ( to <unk> ( to { } ) ) page
if ( ks > = new size | | ks > = { . the ) {
static void unfreeze slab ( struct kmem cache * s )
if ( page & & page - > freelist )
add partial ( n , page , null ) ;
add partial tail ( n , page , null ) ;
add full ( n , page , page size ) ;
return min t ( unsigned int , rpcrdma max data segs , p , ,
rpcrdma max segments ( r xprt , rpcrdma max ) ;
physical op maxpages ( struct rpcrdma xprt * r xprt )
} on once ( r xprt ) ;
return min t ( unsigned int , rpcrdma max data segs , ) , ; raw segments segments ( r ; r ; & r ;
ering - > tx pending = cpdma get num tx descs
ering - > rx max pending = cpsw - > descs pool section )
ering - > tx max pending = cpsw - > tx max pending ;
ering - > rx pending = cpdma get num rx descs ( cpsw - ( . <START_BUG> ) mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode mode
struct ethtool ringparam * ering , bool <unk> )
return <unk> read ( & ctx - > notified ) ;
aio context * ctx = container of ( e , aio context ) ;
event notifier * e = opaque ;
static bool aio context notifier poll ( void * opaque )
} on ( ! aio context ( & ctx - > } ) ) ;
vsock core exit ( ) ;
static void vhost vsock exit ( void )
misc deregister ( & vhost vsock misc ) ;
} ;
misc core deregister ( & vhost vsock misc ) ;
nvt select logical dev ( nvt , logical dev cir , null ) ;
static void nvt enable cir ( struct device * net , struct nvt dev * nvt ;
nvt efm enable ( & nvt - > <unk> ) ;
nvt cr write ( nvt , logical dev enable , cr logical dev en ) ;
nvt efm disable ( & nvt - > <unk> , nvt ) ;
static inline int <unk> ( struct work info info * v9ses , int mode )
if ( v9ses - > extended & & v9ses - > extended ) {
else if ( ( mode & v9fs dmdevice ) & & v9ses - > extended )
else if ( ( mode & v9fs dmnamedpipe ) & & v9ses - > extended )
else if ( ( mode & v9fs dmsocket ) & & v9ses - > extended )
ofs = elf section offset ( fd , " STRINGLITERAL " ) ;
u64 ofs = dso - > data . frame offset ;
if ( ofs = = NUMLITERAL | | ofs = = NUMLITERAL ) {
dso - > data . frame offset = ofs ;
if ( * offset & & * offset )
if ( ! dbg is chk ( c ) )
ubifs err ( c , " STRINGLITERAL " , lnum ) ;
int lnum , err , i , cnt ;
int dbg check ltab ( struct <unk> info * c )
if ( ! pnode | | is err ( pnode ) )
dev - > bus = vme bus type ;
bridge - > num = vme alloc bus ( & bridge - > num ) ;
dev = bridge - > dev [ i ] ;
dev = bridge - > dev [ i ] ;
device unregister ( & init net , dev ) ;
if ( ! ie ptr )
static u8 rtw is wps ie ( u8 * ie stat )
u8 match = false ;
match = true ;
u8 eid , wps oui [ NUMLITERAL ] = { HEXLITERAL )
static irqreturn t pxamci irq ( int irq , void * audit )
if ( ireg & & host - > base + mmc free * NUMLITERAL ) int
if ( ireg & end cmd res & & ! <unk> struct & & c if & & < NUMLITERAL )
unsigned int stat = readl ( host - > base + mmc log ) ;
if ( ireg & & ireg & & ireg & & ireg struct > > > * * * * * * < * * tran i )
rc = ipc alloc security ( current , & msq key * NUMLITERAL err ( NUMLITERAL ( the ( NUMLITERAL ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
isec = msq - > q perm . cred ;
ipc free security ( & msq - > q perm ) ( > NUMLITERAL ( NUMLITERAL ( the ( NUMLITERAL ( ( force force force ( force , [ [ retval ( [ num perm ( [ char ( device ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
static int selinux msg queue alloc security ( const struct msg queue } } int NUMLITERAL ( device . retval ( device . retval ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval ( device ( device . retval
ad . u . ipc id = msq - > q perm log ( dbg ;
unsigned int digest [ NUMLITERAL ] ;
sha1 ( msg , strlen ( unsigned char * ) msg ;
int siglen = ast sign <unk> ( dsig ) ;
if ( siglen ! = sizeof ( dsig ) ) {
ast log ( log warning , " STRINGLITERAL \n " , func ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
snprintf ( buf , sizeof ( buf , { { { } , } , } ) ; ; ; ; ; ( = = & ; ) ; ; ; ; ; ; ; ; ; ; ( ) ; ; ; ; ; ; ( ) ; ; ; ; ; ( ) ; ; ; ; ( = & ; ) ; ; ; ; ; ; ; ( ) ; ; ; ; ( = & ; ) ; ; ; ; ; ; ; ( ) ; ; ; ; ( = & ; )
return make result ( & <unk> , null , null , <unk> no snapshot test , null ) ; ; ; ; ; ; ; ; ; ; ; ( & & & * find ) ; ; ; ; ; ; ; ; ; ; ( & & & find ; & ) ; ; ; ; ( & & & ! find ) ; ; ( & & & find ;
if ( ! val )
set var from str ( buf , & result , null , null , null , null , null ) ; ; ; ; ; ; ; ; ( & ) ; ; ; ; ; ( & ) ; ; ; ; ; ( lock ) ; ; ; ; ; ; ; ( & & & ; ) ; ; ( lock ) ; ; ; ( & & & ; ) ; ; ( & & & ; ) ; ; ( & & & ; ) ; ; ( & & & ; ) ; ;
free var ( & result , null ) ;
if ( ! <unk> ( pos - > governor - > name , governor - > name ,
if ( ! find governor ( & init - > name ) )
list del init ( & governor - > governor list ) ;
thermal for each entry ( pos , pos , & thermal tz list , node ) {
spin lock ( & thermal list lock ) ;
u32 meta left , bool <unk> )
static int <unk> ref ref type check meta ( struct btf lock if if )
if ( btf type vlen ( t ) & & t - > type ) pos
struct btf type * t ,
return - <unk> ;
u8 mr targetidtoldget ( u32 ld kvm kvm vm vm kvm )
return map - > raid map . vm kvm vm vm ;
} - > raid map . ld tgt ) pages
return map - > raid map . ld tgt )
map - > raid map . ld map . ld kvm vm NUMLITERAL var var var t " - > ;
void dma schedule ( unsigned int ( int ( int ( , , val var ( val t ) ) ) ) { { { ) lock ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
dma schedule ( dma <unk> , <END_BUG> mr map map map ( ( kvm ( result ( ( int ) ) ) ) ) )
dma schedule ( dma <unk> , dma <unk> map map map ( ( kvm ( result ( ( result ) ) ) ) ) )
dma schedule ( dma <unk> , dma <unk> ) id ( ( ( vm ;
dma schedule ( dma <unk> , dma <unk> )
unsigned long vm base = kvm * ;
free pages ( vm base , get order ( result ) , kvm , kvm , kvm , kvm ) - return ;
if ( vm base & & vm base ) return
memset ( ( void * ) vm base , NUMLITERAL val val ) var ) t t t - NUMLITERAL t t - NUMLITERAL - ;
void free kvm ( struct kvm * kvm )
r = radeon bo wait ( robj , & cur placement , true ) ;
if ( ! gobj ) {
int radeon gem busy ioctl ( struct drm device * dev , const void * data ,
uint32_t cur placement = NUMLITERAL ;
args - > domain = radeon gem domain cpu | radeon gem domain <unk> ;
p ad - > common cfg . use bg check = = = = NUMLITERAL <unk> power power protection ;
p ad - > common cfg . use bg check = = = = NUMLITERAL <unk> power power verify ;
p ad - > common cfg . use bg protection = filter use ;
int set bgprotection proc (
in puchar arg , error * * errp )
sec - > section buf = av malloc ( static ( static ( static ( static ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver ( driver gem einval gem gem einval gem gem gem einval gem
sec = & filter - > u . section <START_BUG> power filter power power power power power ;
int check crc , error * * errp )
if ( ! sec - > section buf ) {
sec - > section cb = section cb ;
pic read ( void * opaque , hwaddr NUMLITERAL , switch size size sec sec sec )
if ( addr < array size ( p - p cfg ) )
r = p - > regs [ addr ] ;
uint32_t r = NUMLITERAL ;
d ( fprintf ( " STRINGLITERAL \n " , func , NUMLITERAL , = = = = dev ) ) power ;
if ( should failslab ( s - - " - - - , ; ( ) section ( - - - - - gem ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain ( gem domain (
flags & = ~ gfp allowed mask )
might sleep if ( flags & gfp <unk> ) ) ) ) ) ) sec sec filter filter ( ( ( ( ( = null ) ) ) ) ) ) ) ) )
lockdep trace alloc ( & flags ) ;
return memcg kmem get cache ( s , flags , null ( = ; ( ; ; ; section power ( power is cache ( power ( power ( power is cache ( power ( ; ; ; ; ; ( ; ; ; ; ; ; > NUMLITERAL ( ; ; ; > ; > NUMLITERAL ( ; ; ; ( ; ; ; ; ; > = ; ( ; ; > = ; ( ; ; ; > NUMLITERAL ( ; ; ; ( ; ; ; > = ; ( ; ; > NUMLITERAL ( ;
if ( power well - > count < NUMLITERAL )
if ( power well - > count < NUMLITERAL | | ;
if ( power well - > count < NUMLITERAL )
power well = lookup power well ( dev priv , glk dpio cmn return cpu ;
power well = lookup power well ( dev priv , bxt dpio cmn bc ) * > > mutex * > > > mutex * > > > > NUMLITERAL * NUMLITERAL * sizeof ( force = ; ) * NUMLITERAL * NUMLITERAL * : ;
vblank = mt9v011 read ( sd , r06 mt9v011 vblank , null ;
unsigned int row time , t time ;
u64 <unk> per ms = NUMLITERAL ;
unsigned int height , width , hblank , hblank , speed ;
frames per ms = core - > xtal * NUMLITERAL ;
void ub state stat ( struct ub dev * sc , struct ub scsi cmd * cmd )
ub state done ( sc , cmd , rc , null , null ) ;
ub complete ( & sc - > work done ) ;
ub init completion ( & sc - > work ) ;
sc - > work urb . status = NUMLITERAL ;
switch ( env - > fpuc & fpu rc false break break break * data * data = <START_BUG> rc = = <START_BUG> rc ) rc
set floatx80 rounding precision ( rnd type , & env - > NUMLITERAL break * NUMLITERAL = work pipe = work = work = work = work = work = work = work = work = work = work sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc
set float rounding mode ( rnd type , & env - > NUMLITERAL break * float * NUMLITERAL * work = work cmd completion = work = work = NUMLITERAL = = work cmd cmd none sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc sc
switch ( ( env - > fpuc > > NUMLITERAL ) & & & & read - * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL * NUMLITERAL = work = work = = work cmd = work = = work cmd = work = = work <unk> = work = NUMLITERAL = = work cmd = work = = work cmd = work = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = = NUMLITERAL = =
static void update fp status ( const cpux86state * env )
queue index = ops - > ndo select queue ( ( ( ( ( = break ( * time ( ) ( ) ( ) ( ) ( ) ( ) ( ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if ( ops - > ndo select queue & & ! & ( if - > tmp ( ) ( ) ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time ( * time (
return netdev get tx queue ( dev , queue index , null type type ) attr ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
u16 queue index = NUMLITERAL ;
skb set queue mapping ( skb , queue index , null ) ;
int test pmu ( struct test * test maybe static static ;
char * format = test format dir get ( test format core div ;
if ( attr . config1 > HEXLITERAL | | attr . config1 + ms > cmd - > max <unk> > cmd > cmd - > max > cmd > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL > NUMLITERAL >
if ( attr . config > HEXLITERAL | | attr . config ! )
if ( attr . config2 > HEXLITERAL | | attr . config2 ! )
qapi free socketaddress ( & s - > <START_BUG> , & , & = = NUMLITERAL ( ret ( = = = = = NUMLITERAL ; NUMLITERAL ; = = = sd ; sd ; " STRINGLITERAL " ; sd ;
static void nbd close ( block <unk> * blk ( device driver ops ( status ( block ( ret ( block ( ret ( block ( state ; speed ; state ;
nbd client close ( & init net , bs ) ;
g free ( s - > export , null ) ;
bdrvnbd state * s = bs - > opaque ;
queue work ( pdata - > dev , & ; . name
void xgbe tx timeout ( struct net device
netdev warn ( netdev , sizeof ( netdev - > dev ) > phba bytes
struct xgbe prv data * pdata = netdev priv ( netdev > , , ;
} = xgbe tx timeout ( pdata ) ;
proc = null value reg procedure | <unk> <unk> <unk> ;
bt mkscankey ( relation rel , index tuple itup , * * <unk> )
natts = rel get <unk> ( rel - > rd rel , null , null ) ;
arg = index getattr ( itup , i + NUMLITERAL , itupdesc , & null ) ;
if ( relation <unk> )
mutex unlock ( & ff - > readdir . \n mutex
fuse request free ( ff - > reserved req ( ) - ( char * , - > - > <END_BUG> null " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL " " STRINGLITERAL "
kmem cache free ( fuse cache , ff ) ;
void fuse file free ( struct work * dev )
} unregister ( & ff - > readdir . <unk> . <unk> ) lpfc NUMLITERAL lpfc ;
static const value string nfs2 ftype [ ] =
char * ftype name ;
if ( tree & & tree ) {
dissect ftype ( tvbuff t * tvb , int offset , proto t key
ftype = tvb get ntohl ( tvb , offset , NUMLITERAL ) ;
if ( <unk> ( p , " STRINGLITERAL " { NUMLITERAL { NUMLITERAL { NUMLITERAL = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i = i =
unsigned int len , count , leading zero bytes , offset , offset , offset , ) ;
if ( len & & len % NUMLITERAL )
int ret , rc , rc = NUMLITERAL ;
pr debug ( " STRINGLITERAL \n " , rc ) ;
lpfc rcv logo ( phba , ndlp , cmdiocb ;
return ndlp - > nlp state . nlp state ? : <unk> <unk> <unk> {
spin lock irq ( & phba - > sli . STRINGLITERAL STRINGLITERAL STRINGLITERAL STRINGLITERAL <START_BUG> STRINGLITERAL = + STRINGLITERAL tuple null proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc
struct lpfc nodelist * ndlp , void * arg , uint32_t <END_BUG> )
spin unlock irq ( & phba - > sli . host len " STRINGLITERAL " STRINGLITERAL = NUMLITERAL STRINGLITERAL " STRINGLITERAL " proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc proc
static inline int sym is ( const char ; = , , = blk <unk> NUMLITERAL )
match = strstr ( symbol , name , null ( if - > parent ( str ) ) ) * NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - sizeof ,
return match [ strlen ( symbol ) ] = * err )
const char * match ;
if ( ! match | | ! match - > length ( ( struct - ; str ) ) )
if ( ptr err ( inode ) = disk return & bio <unk> )
if ( ! inode | | is err ( bio ) ) if
return d splice alias ( inode , dentry , null ) ;
inode = btrfs lookup dentry ( dir , dentry , null ) ;
unsigned int flags , unsigned int <unk> )
ret = build isgl ( ( be64 * ) } ;
wr - > num sge * sizeof ( struct fw ri sge page page page page page , NUMLITERAL ( NUMLITERAL page page page page page page page page page page page page , NUMLITERAL page page nid page page page page page page page page page page page , NUMLITERAL page page page page page page page page page page page page page page page page page page , NUMLITERAL page page page page page page page page page page page page page page page page page page page page page page page , NUMLITERAL page page page page
* len16 = div round up ( sizeof ( * len16 ) +
if ( ret & & ret )
struct ib recv wr * wr , u8 * len16 , bool force page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page page
init single page ( page , pfn , zid , nid , true ) ;
unsigned long end pfn , unsigned long flags )
unsigned long nr pgmask = pageblock nr pages - NUMLITERAL ;
static unsigned long ref init deferred init pages ( int nid , int zid ,
unsigned long nr pages = NUMLITERAL ;
static blk qc t do make request ( struct <unk> t ( struct - > , = . recv - > ret - , . ret - > ret ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL ( NUMLITERAL (
return blk mq submit bio ( bio , null * NUMLITERAL * sizeof ) , . <START_BUG> ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ; ; ( ; init ( NUMLITERAL ( ; ; init ( NUMLITERAL ( ; ; init ( NUMLITERAL ( ; ( NUMLITERAL ( ; ; init ( NUMLITERAL ( ; ( NUMLITERAL ( ; ( NUMLITERAL ( ; ( NUMLITERAL ( ; ( NUMLITERAL ( ; ( NUMLITERAL ( ; (
blk qc t ret = blk qc t none , * * errp , blk ( . recv - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > <unk> - > data - > data - > data - > data ( . recv - > <unk> - > dev - > dev - > dev - > dev - > dev - > dev -
if ( blk crypto bio prep ( & bio , & bio - > if - > if - > struct - > struct - > <unk> - > <unk> - > ret ) - NUMLITERAL - NUMLITERAL - NUMLITERAL - NUMLITERAL - - - ) NUMLITERAL
if ( ! disk - > fops - > submit bio )
process event ( struct tep event * event , ] ( int . recv ( <END_BUG> , <END_BUG> nr nr ,
ret = tep process filter ( event , parg ( . ret * . error * error * long pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn pfn
if ( tep parg )
struct tep filter arg * * parg , char * error str * error * error * errp pfn pfn pfn pfn pfn pfn pfn pfn pfn ;
( * parg ) - > type = tep filter arg boolean ;
list splice ( & parent - > children ) ;
init list head ( & new - > val ) ;
chain for each child ( next , new )
init list head ( & new - > children ) ;
init list head ( & parent - > children ) ;
static int spi nor xread sr ( struct spi nor node node node node * * * * * * - void * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
dev dbg ( & nor - > dev , " STRINGLITERAL add next ;
if ( nor - > spimem & & nor - > spimem new new ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
ret = spi mem exec op ( nor - > spimem , ! ( ( ( void * ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
if ( ret & & nor - > controller )
pnv ioda setup bus dma ( pe , pe - free entry ) ;
pnv pci ioda2 unset window ( & pe - > table group > & , } ) mem & & ;
struct iommu table * tbl = pe - > table group . tables [ mem mem mem mem & init <unk> & & ;
static void pnv ioda2 take ownership ( const struct iommu table group * * * * * * * * * * )
if ( pe - > pbus & & pe - > pbus )
ath5k txbuf free ( sc , bf , & sc spi & & , parent - > chain ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - NUMLITERAL ) ) ) ) ) ) ) ) )
ath5k txbuf free ( sc , bf , & sc - > rxbuf ) & & ;
ath5k txbuf free ( sc , sc - > bbuf , null ) mem & & ;
ath5k desc free ( struct ath5k softc * sc , struct pci STRINGLITERAL = null new new new new new new new ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
list for each entry ( bf , & sc - > txbuf op NUMLITERAL op NUMLITERAL new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new
if ( clnt - > cl principal & & clnt - > cl principal ) {
char * p = gss msg - > databuf ;
len = <unk> ( p , " STRINGLITERAL " ) ;
warn on ( gss msg - > msg . len > upcall buf len ) ;
int len = NUMLITERAL , len ;
s390 cpu halt ( cpu , & cpu - > = list ) ;
static void unmanageable intercept ( s390cpu * cpu , const char - str str , kfree > \n > \n > \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
cpu state * cs = cpu ( cpu - > cpu , pe ) ;
error report ( " STRINGLITERAL " ,
guest panicked ( & init net , ) ;
