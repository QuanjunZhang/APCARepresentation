env - > def = g malloc0 ( sizeof ( * def ) ) ;
struct tm com res debug set level lvl ;
complete ( & ctx - > dev - > fw load complete ) ;
if ( phys ) {
intel timeline enter ( i915 request timeline ( rq ) ) ;
radeon sa bo free ( rdev , & vm - > sa bo , null ) ;
bridge frame free ( fr ) ;
static void tcg block io signals ( void )
mlxsw sp span mirror del ( mlxsw sp port , mirror - > span id ,
rc = smk fill rule ( subject , object , access , rule , import , NUMLITERAL ) ;
dst cache destroy ( & tunnel - > dst cache ) ;
struct led priv * ledpriv = & padapter - > ledpriv ;
u64 now = ktime get mono fast ns ( ) ;
return - einval ;
void mv cesa dma cleanup ( struct mv cesa req * dreq )
if ( can be granted ( r , lkb , NUMLITERAL , null ) ) {
* secid = smack to secid ( smk of task ( task security ( p ) ) ) ;
if ( ! dbg is chk lprops ( c ) )
for each combo port ( dev priv , port ) {
pvc device * pvc = pvcdev to desc ( dev ) - > pvc ;
value = ( value > > NUMLITERAL ) | HEXLITERAL ;
display dissector table names ( const char * table name , const char * ui name ,
hw error ( " STRINGLITERAL \n " , func , reg ) ;
n - > has vnet hdr = qemu has vnet hdr ( nc - > peer ) ;
mlx5 vxlan add port ( priv - > vxlan , port ) ;
for ( b = NUMLITERAL ; b < array size ( bat addrs ) ; + + b )
set bit ( NUMLITERAL , & mce need notify ) ;
s - > method - > ssl renegotiate check ( s , NUMLITERAL ) ;
if ( * err ! = NUMLITERAL & & * err ! = wtap err short read )
jfs error ( sb , " STRINGLITERAL \n " ) ;
update flag ( cs sched load balance , cs , NUMLITERAL ) ;
return list concat copy ( args , defaults ) ;
static const char * page bad reason ( struct page * page , unsigned long flags )
forget syscall ( regs ) ;
u8 brcmf flowring tid ( struct brcmf flowring * flow , u16 flowid )
struct response t * curr = intern . start ;
list [ nb ] = exp - > exp str ;
class unregister ( & umad class ) ;
sock = inet connect opts ( opts , in progress , errp ) ;
tep register print string ( pevent , printk , addr ) ;
while ( data len > = sizeof ( * gdata ) ) {
tracing generic entry update ( & entry - > ent , flags , pc ) ;
if ( inactive list is low ( lruvec , false , sc ) )
static int is in nid list ( hda nid t nid , hda nid t * list )
resc max val = num of global queues ;
if ( unlikely ( zero or null ptr ( block ) ) )
void xen init lock cpu ( int cpu )
if ( dss has feature ( feat dpi uses vdds dsi ) )
nd snprintf ( bridge id str , sizeof ( bridge id str ) ,
int err , result = NUMLITERAL , num ev = NUMLITERAL ;
static void i915 gem cleanup stolen ( struct drm i915 private * dev priv )
proc pid evict inode ( ei ) ;
syscall define0 ( sync )
int inet frags init ( struct inet frags * f )
shm mq inc bytes read ( volatile shm mq * mq , size n )
struct nvme queue * nvmeq = & dev - > queues [ queue idx ] ;
mask | = sz 16m | sz 256m ;
uas log cmd state ( cmnd , func , NUMLITERAL ) ;
return kvmalloc ( size , gfp kernel account ) ;
ret = i915 gem obj ggtt pin ( ctx , NUMLITERAL , pin mappable ) ;
cmm sysctl header = register sysctl table ( cmm dir table ) ;
static bool io file supports async ( struct file * file , int rw )
m = openssl malloc ( evp pkey size ( pkey ) ) ;
caps = nla nest start noflag ( msg , nl80211 pmsr attr type capa ) ;
qtailq foreach ( bp , & env - > breakpoints , entry )
uncore - > i915 - > params . mmio debug - - ;
dword tmp len = ( dword ) len ;
void tsc verify tsc adjust ( bool resume )
omap2 gp clockevent init ( NUMLITERAL , omap4 clkev source , " STRINGLITERAL " ) ;
cpus write unlock ( ) ;
int of mdio parse addr ( struct device * dev , const struct device node * np )
nmi panic ( " STRINGLITERAL " ) ;
void load ucode ap ( void )
tsk - > cpuset = & top cpuset ;
platform device unregister ( it87 pdev ) ;
comp = ( ssl comp * ) openssl malloc ( sizeof ( ssl comp ) ) ;
static char * dentry path ( struct dentry * dentry , char * buf , int buflen )
const wtap rec * rec ,
set task rq ( p , cpu ) ;
target ulong rt = NUMLITERAL ;
if ( last - > e value size ) {
if ( fv - > value . tvb & & fv - > tvb is private ) {
if ( sma - > sems [ i ] . semval = = NUMLITERAL ) {
bitmap copy ( ps - > inuse , ps - > configured , cnt ) ;
if ( r - > alloc capable & & domain setup ctrlval ( r , d ) ) {
int siglen = NUMLITERAL ;
while ( bytes < NUMLITERAL & & val > > bytes * NUMLITERAL ) bytes + + ;
return ( ret = = - enoent ) ? null : err ptr ( ret ) ;
if ( audio pt lock ( & pa - > pt , func ) ) {
return mesh plink frame tx ( sdata , wlan sp mesh peering open ,
unsigned byte = bytestream2 get byteu ( gb ) ;
av frame * frame = av mallocz ( sizeof ( av frame ) ) ;
static void init free lppacas ( void )
shm mq inc bytes written ( shm mq * mq , size n )
static void sl write ( void * opaque , hwaddr addr ,
if ( adapter - > wol en )
if ( ! ps adapter ) {
if ( ! tbl )
struct fuse io priv io = fuse io priv sync ( file ) ;
if ( expr - > nulltesttype = = is null & & ! expr - > argisrow )
dccp write xmit ( sk ) ;
newbuf = kvzalloc ( params - > buffer size , gfp kernel ) ;
if ( strcmp ( acer wmid accel hid , acpi device hid ( dev ) ) )
write once ( dev - > gro flush timeout , val ) ;
if ( socket can bind connect ( " STRINGLITERAL " ) < NUMLITERAL ) {
return valid spec na ;
dev dbg ( & psy - > dev , " STRINGLITERAL \n " , func ) ;
return float32 val ( a ) > > NUMLITERAL ;
dissect sccp slr param ( tvbuff t * tvb , proto tree * tree , guint length )
r - > name = name ? name : of node full name ( dev ) ;
u16 rxff bndy = max rx dma buffer size 88e - NUMLITERAL ;
u32 val , mask ;
if ( have nohz full mask ) {
struct acpi memory list * * return cache )
if ( gfs2 holder initialized ( & rs - > rs rgd gh ) )
write sequnlock ( & jiffies lock ) ;
err = setup sigframe layout ( user , false ) ;
if ( nosig only & & should send signal ( p ) )
if ( ! mp )
tmp = i915 read ( pipeconf ( crtc - > config . cpu transcoder ) ) ;
if ( ! spi - > cs gpiod )
object property del ( root container , name , & error abort ) ;
if ( drm warn on ( & dev priv - > drm , ! dig port ) )
rcu init pointer ( nf nat snmp hook , null ) ;
mutex lock ( & the tps - > lock ) ;
xchk fblock set corrupt ( sc , xfs data fork ,
skb free head ( skb ) ;
pr unimpl ( & svm - > vcpu , " STRINGLITERAL \n " , function ) ;
void iwl mvm tt initialize ( struct iwl mvm * mvm , u32 min backoff )
nvkm notify fini ( & conn - > hpd ) ;
return - einval ;
bcl - > bearer id = max bearers ;
register winch irq ( NUMLITERAL , fd , NUMLITERAL , data , NUMLITERAL ) ;
ioreq reset ( ioreq ) ;
struct nfs commit data * p = mempool alloc ( nfs commit mempool , gfp noio ) ;
if ( ! atime needs update ( path , inode , false ) )
bug on ( ! kparam is locked ( p . mod ) ) ;
assert ( frames ) ;
op = object property find err ( obj , name , & error abort ) ;
free block - > prev = null ;
static void wait for kprobe optimizer ( void )
dev vdbg ( & slot - > mmc - > class dev , " STRINGLITERAL \n " ,
kvfree ( cfg ) ;
acpi os unmap iomem ( v , sizeof ( * v ) ) ;
bug on ( waitqueue active ( li - > wq ) ) ;
struct hlist node * node2 ;
wmem free ( wmem file scope ( ) , temp - > data ) ;
err = mlx5 core destroy mkey ( dev - > mdev , & mr ) ;
kfree ( caldata ) ;
thermal zone device update ( data - > ti thermal , thermal event unspecified ) ;
idr fill slot ( idp , ptr , rv , pa ) ;
init cat cache phase2 ( sys cache [ cache id ] , true ) ;
static void sock shutdown ( struct nbd device * nbd , int lock )
engine - > wa ctx . obj = i915 gem object create ( engine - > dev ,
int val = gpiod get value ( ifx dev - > gpio . reset out ) ;
void ufshcd auto hibern8 enable ( struct ufs hba * hba )
const char * mt desc = " " ;
mptcp data ready ( parent , sk ) ;
if ( want init on alloc ( priority ) )
lg global lock ( & files lglock ) ;
r - > idiag rqueue = udp rqueue get ( sk ) ;
if ( ! machine is ( pseries ) & & ! machine is ( cell ) )
mutex lock ( & ice - > gpio mutex ) ;
if ( offset > = NUMLITERAL )
if ( ! is enabled ( config of ) | | ! tc )
if ( me ) {
return qatomic read ( & lockcnt - > count ) > > qemu lockcnt count shift ;
skb forward csum ( skb ) ;
set bit ( xmstate bit w pad , & tcp ctask - > xmstate ) ;
if ( ni - > ni lnd - > lnd accept )
const char * reason = null ;
tr - > tr num revoke rm + + ;
regmap write ( rtc - > regmap , max8907 reg alarm0 cntl , NUMLITERAL ) ;
u64 format field intval ( struct tep format field * field , struct perf sample * sample ,
g free ( client ) ;
if ( ! ts - > reset gpio )
clear bit ( cd - > bit , pen ) ;
tep register comm ( pevent , comm , pid ) ;
struct mlx4 buf * buf )
tep free event ( event ) ;
netif keep dst ( dev ) ;
static int dce v10 0 afmt init ( struct amdgpu device * adev )
struct iwl4965 scd bc tbl * scd bc tbl = priv - > scd bc tbls . addr ;
int kvm apic local deliver ( struct kvm lapic * apic , int lvt type )
return - eio ;
conncache lock ( conn - > data ) ;
fprintf ( stderr , " STRINGLITERAL \n " , packet count ,
knew - > subdevice = hda subdev nid flag | nid ;
dm table destroy ( hc - > new map ) ;
unsigned long r3k cache size ( unsigned long ca flags )
if ( port - > ops & & port - > ops - > dtr rts )
static int fsl req to dtd ( struct fsl req * req , gfp t gfp flags )
skb - > csum = csum unfold ( ( force sum16 ) cqe - > check sum ) ;
static int ssl get keyex ( const char * * pname , const ssl * ssl )
i915 vma make unshrinkable ( vma ) ;
mutex unlock ( & con - > sock mutex ) ;
wrmsr ( msr ia32 mcg status , NUMLITERAL , NUMLITERAL ) ;
ret = acpi dma configure ( dev , attr ) ;
n = palloc ( sizeof ( * n ) + len ) ;
struct ip vs kstats show ;
if ( crypt integrity aead ( cc ) )
static init int ftrace init tracefs ( void )
int * gpio = s2mps11 - > ext control gpio ;
if ( skb )
nvme delete ctrl ( & ctrl - > ctrl ) ;
static f2fs hash t f2fs dentry hash ( const struct qstr * name info ,
int type term , char * config , u64 num )
register timeout ( timeout id id , timeout handler proc handler )
if ( negpri ) {
handle invalid op ( regs ) ;
int ret = NUMLITERAL ;
if ( app - > handler & & app - > data ) {
static int s626 ai load polllist ( u8 * ppl , struct comedi cmd * cmd )
unsigned int v = get unary ( gb , NUMLITERAL , get bits left ( gb ) ) ;
unsigned long pages , int ih , int gl )
const pg enc2name * p = & pg enc2name tbl [ encoding ] ;
int mode , xml char * * inclusive ns prefixes ,
xfs buf trace buf = ktrace alloc ( xfs buf trace size , km nofs ) ;
struct nx host tx ring * tx ring = adapter - > tx ring ;
static unsigned int mc13892 vcam get mode ( struct regulator dev * rdev )
if ( ! pycapsule checkexact ( pyobj reader ) ) {
printk ( kern emerg " STRINGLITERAL " , addr ) ;
if ( test bit ( ws onstack , & work - > state ) )
ast channel spy remove ( chan , spy ) ;
unsigned int valid num sge )
bug on ( cpu > = nr cpu ids & & cpu ! = work cpu unbound ) ;
static int hist browser title ( char * bf , size_t size , const char * ev name ,
page - > s mem = kasan reset tag ( addr ) + colour off ;
hbqbp = kzalloc ( sizeof ( struct hbq dmabuf ) , gfp kernel ) ;
ai usermode = safe usermode ( mode - ' 0 ' , true ) ;
retval = destroy queues cpsch ( dqm , false , false ) ;
int encode special date time ( date time dt , char * str )
btrfs free reserved data space ( inode , * reserved , start , len ) ;
pgproc * proc = two phase get dummy proc ( xid , true ) ;
if ( pmu config term ( pmu name , formats , attr , term , head terms ,
wq copy work done = fnic wq copy cmpl handler ( fnic , io completions ) ;
struct mempolicy * get vma policy ( struct vm area struct * vma ,
return ( uint32_t ) chunk size ;
const char * type = backend - > u . spicevmc - > type ;
db gen ( NUMLITERAL , " STRINGLITERAL " , mb ) ;
destroy cache ( pool ) ;
ceph auth destroy authorizer ( auth - > authorizer ) ;
radix tree delete node ( root , node ) ;
if ( is usb device ( pdev ) | | is gfx device ( pdev ) )
subscription persistence update ( sub tree , null , subscription persistence send request ) ;
void dlm kick recovery thread ( struct dlm ctxt * dlm )
async synchronize cookie domain ( cookie , & async running ) ;
* pirq = find unbound pirq ( map pirq type msi ) ;
static void ft dump cmd ( struct ft cmd * cmd , const char * caller )
return ! parse options ( data , sb , NUMLITERAL ) ? - einval : NUMLITERAL ;
if ( driver byte ( result ) ! = driver sense | |
x - > elem - > cookie = he ;
ast mutex lock ( & iflock ) ;
res = replay state . data kind ! = event async ;
return - eagain ;
if ( val & & val ! = HEXLITERAL )
static ssize_t max6875 read ( struct file * filp , struct kobject * kobj ,
status = acpi ev walk gpe list ( acpi hw enable runtime gpe block ) ;
int ddk750 setmodetiming ( struct mode parameter * parm , enum clock type clock )
old dissector add ( " STRINGLITERAL " , tcp port telnet , dissect telnet ) ;
dbg info ( " STRINGLITERAL \n " , * ucblocks ) ;
n = kmalloc ( sizeof ( * n ) , gfp kernel ) ;
ncr5380 transfer pio ( instance , & phase , & len , & msgptr ) ;
( void ) replication slot acquire ( name , nowait ? sab_error : sab block ) ;
u8 wilc1000 prepare 11b core ( wilc wlan inp t * nwi , struct wilc * nic )
struct uv2 3 bau msg header * uv2 3 hdr = null ;
if ( ioc - > ctdev & & ! ioc - > fcmode )
beep enable store ( struct device * dev , struct device attribute * attr ,
if ( ! constant tsc | | ! mask )
static unsigned int ni readw ( struct comedi device * dev , int reg )
if ( is err or null ( dentry ) )
error report ( " STRINGLITERAL " , str ) ;
fb = intel framebuffer create ( obj , & mode cmd ) ;
struct t10 alua * alua = & su dev - > t10 alua ;
mutex init ( & neigh update - > encap lock ) ;
if ( pending base + pending acks < max pending acks ) {
dev = dev get by index ( & init net , ifindex ) ;
send shared invalid messages ( msg , NUMLITERAL ) ;
const char * bdrv get parent name ( const block driver state * bs )
int f2fs commit inmem pages ( struct inode * inode )
void ixgbe napi add all ( struct ixgbe adapter * adapter )
ibm440ep fixup clocks ( sysclk , NUMLITERAL , NUMLITERAL ) ;
hctx = openssl malloc ( sizeof ( * hctx ) ) ;
heap close ( result relation desc , no lock ) ;
unsigned char rearm )
for ( indexcol = NUMLITERAL ; indexcol < index - > nkeycolumns ; indexcol + + )
sg free table chained ( & freq - > sg table , sg chunk size ) ;
stasis forward cancel ( all - > forward all to cached ) ;
current time = qemu get clock ns ( clock ) ;
if ( gbufsize > meye max bufsize )
unsigned long vmaddr , dist ;
up read ( & snap src - > lock ) ;
absorb sync requests ( ) ;
if ( rcu access pointer ( q - > filter list ) )
int i , queues = max ( nic - > conf - > queues , NUMLITERAL ) ;
struct eeh dev * edev , * tmp ;
pr crit ( " STRINGLITERAL \n " ) ;
memblock x86 reserve range ( lowmem , HEXLITERAL , " STRINGLITERAL " ) ;
warn on once ( ! rcu read lock held ( ) ) ;
queue delayed work ( osb - > ocfs2 wq , & os - > os orphan scan work ,
if ( ! port - > membase ) {
init kmem cache node ( & s - > local node , s ) ;
if ( ! p fs - > pbr bh ) {
static void free formats ( struct tep format * format )
fi - > fib net - > ipv4 . fib num tclassid users - - ;
rtl8169 rx missed ( dev ) ;
time64 t expiry = read once ( key - > expiry ) ;
vfree ( fspath ) ;
if ( is err ( gate - > enable reg ) )
for ( subp = NUMLITERAL ; subp < priv - > subp nr ; subp + + )
relation cache init file pre invalidate ( ) ;
wlandevice t * wlandev = netdev - > ml priv ;
pr debug ( " STRINGLITERAL "
if ( i915 reset failed ( dev priv ) )
static int msm boot secondary ( unsigned int cpu , struct task struct * idle )
inode - > i mtime = inode - > i atime = current time ( inode ) ;
s3c2410 dma ctrl ( dma data - > channel , s3c2410 dmaop started ) ;
addr = tcg temp new ( ) ;
nvkm notify put ( & nv crtc - > vblank ) ;
fetch bp busy slots ( & slots , bp ) ;
cleanup scratch page ( vm - > dev , & vm - > scratch page ) ;
atomic64 inc ( & snic - > s stats . misc . ack isr cnt ) ;
int i , ret , write combine ;
elog ( error , " STRINGLITERAL \" STRINGLITERAL \" " , fmt ) ;
bool blk ordered complete seq ( struct request queue * q , unsigned seq , int error )
static void wake ( void )
if ( g hash table lookup ( rsakeys , entry ) = = null ) {
ep = p - > ep - > nr ;
static int proc ipc callback dointvec minmax ( ctl table * table , int write ,
v - > visitor . type str = qobject input type str keyval ;
btrfsic submit bio ( bio ) ;
u64 irq check mask = bit ull ( irq num ) ;
rcu nonidle ( pm runtime get sync ( pd dev ) ) ;
ast register cleanup ( message shutdown ) ;
vic register ( base , irq start , vic sources , resume sources , node ) ;
return f vendor identifier ( tvb , pinfo , tree , offset ) ;
return wfx link id no assoc ;
mutex init ( & dev data - > lock ) ;
intel hdmi init ( dev , ddi buf ctl ( port ) , port ) ;
tqe - > ack idx = not tcp ack ;
static int i2c acpi find match adapter ( struct device * dev , void * data )
hash position res = ht - > n num used ;
result = smtp auth login user ( conn , & authuser , & len ) ;
clk prepare enable ( fpc - > clk [ fpc - > period . clk select ] ) ;
arg - > boolean . value = tep filter true ;
spin unlock irq ( & info - > io lock ) ;
thrinfo - > task = kthread run ( threadfn , thrcontext , " STRINGLITERAL " , name ) ;
nvkm event fini ( & device - > event ) ;
current - > mm - > context . vdso = ( void user * ) addr ;
up write ref node ( & fte - > node ) ;
while ( ! acpi gbl db terminate loop ) {
fvalue set guid ( & fi - > value , value ptr ) ;
rbuf chk ctrl | = rbuf rxchk en | rbuf l3 parse dis ;
mousedev mix = mousedev create ( null , & mousedev handler , true ) ;
if ( is err ( cpufreq dev ) )
nss create tablename ( int * errnop )
data = ctxt - > err ctxt ;
if ( ! rcd - > rcvhdrtail kvaddr )
return check locale ( lc monetary , * newval , null ) ;
isp - > smk inode = smk of task ( task security ( p ) ) ;
queue - > stats . rx gso checksum fixup + + ;
static int p9 tag remove ( struct p9 client * c , struct p9 req t * r )
r = rw header ( lc , req op write ) ;
void min10 set blank ( struct mem input * mem input , bool blank )
xdr encode time ( be32 * p , const struct timespec * timep )
static void qmp output end struct ( visitor * v )
void ma cv disable key entry ( ps device p device , unsigned int u entry idx )
if ( htbl - > refcount )
nested vmx vmexit ( vcpu , exit reason exception nmi ,
struct kernfs node * kn = inode - > i private ;
return find ref head ( delayed refs , bytenr , NUMLITERAL ) ;
if ( xfs dir3 block verify ( bp ) ) {
if ( ! hdev is powered ( hdev ) ) {
gfp t gfp mask )
rep origin id nodeid , int pageno )
enum uverbs obj access access , s64 id )
struct fnhe hash bucket * hash = rcu dereference ( nh - > nh exceptions ) ;
return i915 mmio reg valid ( intel dig port - > hdmi . hdmi reg ) ;
static struct regmap * wm5110 get regmap ( struct device * dev )
( void ) lock acquire ( & tag , share lock , false , false ) ;
struct kernfs node * kn = kernfs dentry node ( dentry ) ;
static void rateinfo recalc ( struct dsthash ent * dh , unsigned long now )
static void ref init fallback flush ( void )
static void omap mpu timer write ( void * opaque , hwaddr addr ,
static void identity ( char * ptr )
fpu invalidate fpregs state ( fpu ) ;
static inline bool should continue reclaim ( struct mem cgroup zone * mz ,
desc = & gdev - > descs [ i ] ;
klist = kmalloc ( size , gfp nowarn | gfp kernel ) ;
mq sysctl table = register sysctl table ( mq sysctl root ) ;
lp = alloc paca data ( size , HEXLITERAL , limit , cpu ) ;
timer . mask = cpu mask none ;
enum intel combo mode cb mode ;
wl info ( " STRINGLITERAL \n " ) ;
static void zd1201 usbfree ( struct urb * urb )
ast register cleanup ( mm atexit ast ) ;
zend end loop ( opnum cond , null ) ;
read = & nor - > params - > reads [ cmd ] ;
return ib umem end ( & umem odp - > umem ) - NUMLITERAL ;
if ( sdma queue id > = cik sdma queues )
page remove rmap ( page , vma ) ;
pte k = ( pte t * ) memblock alloc low ( page size , page size ) ;
gboolean mausb is from host ( struct mausb header * header )
if ( ! css tryget ( & h cg - > css ) ) {
void igb free rx resources ( struct igb ring * rx ring )
snd ak4114 check rate and errors ( chip , chip - > check flags ) ;
device = ath6kl get hifdev ( func ) ;
ast mutex lock ( & p - > lock ) ;
if ( int thread hash ! = null ) {
static void collect signal ( int sig , struct sigpending * list , kernel siginfo t * info ,
c = ast hashtab lookup ( contexts table , & item ) ;
acb = g malloc0 ( pool - > aiocb size ) ;
static uint32_t mpic timer read ( void * opaque , hwaddr addr )
u64 max = NUMLITERAL * rq - > max idle balance cost ;
pg gss have cred cache ( gss cred id t * cred out )
static void remove proc entries ( struct ipmi smi * smi )
gfs2 log flush ( sdp , gl , normal flush ) ;
uint64_t hole64 start = i440fx pcihost get pci hole64 start value ( obj ) ;
if ( ! thermal zone device is enabled ( tz ) )
ccdc lsc program table ( ccdc , req - > table . dma ) ;
del timer sync ( & usbhid - > io retry ) ;
void cpu die ( unsigned int cpu )
u - > abort current sound = NUMLITERAL ;
if ( seqid = = null | | list empty ( & seqid - > list ) )
if ( get kernel nofault ( bkpt , ( void * ) pc ) )
ast std free ( symbols ) ;
asmlinkage protect ( NUMLITERAL , ret , filename , flags , mode ) ;
spin unlock ( & ls - > ls lkbidr spin ) ;
del event from groups ( event , ctx ) ;
int elv try merge ( struct request * rq , struct bio * bio )
void hists init ( struct hists * hists )
static void wacom remote destroy attr group ( struct wacom * wacom , u32 serial )
return c4 del chan stats ( cp . channum ) ;
static struct gb tty * get gb by minor ( unsigned int minor )
if ( vf id > = bp - > pf . active vfs ) {
u8 * cur byte ;
want v = hpte encode v ( va , psize , mmu segsize 256m ) ;
if ( sclp . has sigpif & & ! kvm s390 pv cpu get handle ( vcpu ) )
if ( buf = = null ) {
fprintf ( stderr , " STRINGLITERAL " , base cpu , msr ) ;
unsigned int risc ,
if ( xfs ag resv critical ( pag , xfs ag resv rmapbt ) | |
return parse event ( pevent , eventp , buf , size , sys ) ;
rcuwait wake up ( & manager wait ) ;
enable filter controls ( false ) ;
tx rx queue left + = pf - > num vf qps ;
pthread unlock ( & handle - > h lock ) ;
struct tep event * event , const char * field )
snd hdac bus reset link ( bus , full reset ) ;
uobj = uobj alloc ( uverbs object comp channel , file , & ib dev ) ;
return illegal char value ;
raw spin lock irqsave ( & ch - > mtu - > lock , flags ) ;
struct radeon bo * robj ;
lo - > plh lc cred = get cred ( ctx - > cred ) ;
mutex lock ( & ib uverbs idr mutex ) ;
static int alc alt capture pcm prepare ( struct hda pcm stream * hinfo ,
static void flush tlb func local ( const void * info , enum tlb flush reason reason )
qatomic inc ( & backend dev - > rdma dev res - > stats . missing cqe ) ;
bool locked = mutex trylock ( lock , false ) ;
struct hfi1 opa header * hdr ;
switch ( curitem - > qoperator . oper )
reg w ( gspca dev , HEXLITERAL , & byte send , NUMLITERAL ) ;
unsigned long flags ;
static u32 item udata ( struct hid item * item )
void gpiod free ( struct gpio desc * desc )
blk mq free rq map ( hctx , q - > queuedata ) ;
ret = drm atomic helper commit duplicated state ( state , ctx ) ;
stasis unsubscribe ( router - > subscription ) ;
tb = kzalloc ( sizeof ( struct st buffer ) , gfp kernel ) ;
if ( is connect status ( priv - > connect status ) ) {
static void cpt init clock gating ( struct drm device * dev )
static void validate bootdevices ( char * devices )
watchdog user enabled = old enabled ;
if ( ! pd - > add pulse ( pd , pe , null ) )
power supply changed ( charger - > battery ) ;
diameter avps handle = find dissector add dependency ( " STRINGLITERAL " , proto eap ) ;
if ( is err or null ( d ) )
void mpol put ( struct mempolicy * p )
vma - > vm page prot = vm get page prot ( vma - > vm flags ) ;
struct device * psci dt attach cpu ( int cpu )
uint32_t wait = NUMLITERAL ;
return imap [ NUMLITERAL ] . br blockcount < < NUMLITERAL ;
if ( ops - > get sset count )
return scnprintf ( buf , page size , " STRINGLITERAL \n " , lp - > chipname ) ;
hwaddr base , qemu irq irl )
ret = i915 gpu coredump copy to buffer ( error , buf , * pos , count ) ;
static void release tgcred ( struct cred * cred )
bfa ioim sgpg alloc ( struct bfa ioim s * ioim )
struct net device * bdev = dev get by index ( & init net , if id ) ;
warn on ( ! hlist unhashed ( & ifp - > addr lst ) ) ;
current - > thread . kvm shadow vcpu = vcpu - > arch . shadow vcpu ;
if ( sm750 get chip type ( ) = = sm750le )
tomoyo stat modified [ index ] = ktime get real seconds ( ) ;
if ( ! master image ) {
if ( get dma ops ( dev ) & & is enabled ( config arm64 ) ) {
soc camera remove device ( icd ) ;
venus shutdown ( dev ) ;
unsigned int count = data - > count ;
size_t memsize = sizeof ( void * ) * entries + sizeof ( struct array cache ) ;
if ( ast mutex lock ( & formatlock ) ) {
des set key unchecked ( deskey , ctx - > c . des ks ) ;
if ( ! battery - > bat )
s - > timer = qemu new timer ns ( vm clock , pl031 interrupt , s ) ;
encode seqid op tail ( resp , save , nfserr ) ;
tty = edge port - > port - > port . tty ;
kfd unref process ( p ) ;
packet = g malloc ( sizeof ( net packet ) + max len ) ;
if ( streq ( prop - > name , name ) ) {
plldiv = ( v & pll - > div ratio mask ) + NUMLITERAL ;
crash free reserved phys range ( end , crashk res . end ) ;
if ( is bxt ( pci ) )
int uninitialized var ( type ) , ret ;
lassert ( net ) ;
struct isert conn * isert conn = cma id - > qp - > qp context ;
sd - > next asid = sd - > min asid ;
udp4 lib err ( skb , info , & udp table ) ;
exec end sub plan ( sub plan expr state * node )
prg = dev - > t10 pr . pr generation + + ;
data [ i ] = devpriv - > ao readback [ chan ] ;
if ( key is positive ( key ) ) {
u8 * oui ;
for ( i = NUMLITERAL ; i < last irq ; i + + )
debug show all locks ( ) ;
while ( ! asc txfifo is half empty ( port ) )
ret - > c1 = ret - > c2 = ret - > parent = null ;
fm10k handle fault ( interface , type , & fault ) ;
if ( ! user access begin ( dst , len ) ) {
ide set max pio ( drive ) ;
efi uv1 memmap phys epilog ( save pgd ) ;
if ( dpcd caps - > dongle type ! = display dongle dp hdmi converter | |
stream = & ulpq - > asoc - > stream ;
resource type = acpi get8 ( aml ) ;
writel ( atm poison , sar reg dr0 ) ;
int result = inline syscall ( rt sigtimedwait , NUMLITERAL , set ,
sbrk ( ptrdiff_t increment )
struct pxa gpio chip * c = gpio to pxachip ( gpio ) ;
if ( instance - > adapter type = = ventura series )
av free packet ( & rms - > pkt ) ;
elapsed = s - > wt last update - qemu get clock ns ( vm clock ) ;
cred = nfs4 get clid cred ( session - > clp ) ;
dentry unlink inode ( dentry ) ;
for ( i = NUMLITERAL ; i < vi - > curr queue pairs ; i + + )
static int specific minor ( struct mapped device * md , int minor )
val = bnx2 rd ( bp , bnx2 nvm command ) ;
mlxsw core bus device unregister ( mlxsw i2c - > core , false ) ;
int clkdm sleep ( struct clockdomain * clkdm )
perf evsel close ( & evsel - > core ) ;
ret | = bit ( NUMLITERAL ) ;
if ( ! ctx - > sink detected | | ! ctx - > devcap read )
static void quirk vialatency ( struct pci dev * dev )
static int cp210x gpio init ( struct usb serial * serial )
int f2fs room for filename ( const void * bitmap , int slots , int max slots )
const char * pevent find function ( struct tep handle * pevent , unsigned long long addr )
if ( ! ec point is compat ( points [ i ] , group ) ) {
scandesc = heap beginscan catalog ( rel , NUMLITERAL , entry ) ;
unsigned long gap = rlimit ( rlimit stack ) ;
planned stmt * new plan = copy object ( plan ) ;
strlcpy ( errbuf , " " , errbuf size ) ;
if ( ui ! = null ) {
crash save cpu ( regs , safe smp processor id ( ) ) ;
free early ( ramdisk image , ramdisk end ) ;
if ( unlikely ( ! phba - > sli4 hba . hdwq ) )
static void mos7840 handle new msr ( struct moschip port * port , u8 new msr )
b ptr = tipc bearer find ( net , name ) ;
if ( rc < = NUMLITERAL )
tep func resolver t * func , void * priv )
int port = piix4 adapter count ;
rcu init pointer ( local - > sched scan sdata , null ) ;
allowi ( pdx ) ;
dbg info ( " STRINGLITERAL \n " , inversion ) ;
printk ( " STRINGLITERAL \n " , ahc name ( ahc ) , sdev - > id ) ;
return inet connect ( address and port , true , null , null ) ;
int nframes = NUMLITERAL , ret ;
return fill readbuf ( port , ( force char user * ) buf , count , false ) ;
if ( pos - > name & & ! strcmp ( pos - > name , name ) )
index relid index scan ( relation heap relation , datum relid )
set audio standard btsc ( core , NUMLITERAL , en btsc auto stereo ) ;
static void release all trace probes ( void )
scan = heap beginscan catalog ( pg authid rel , NUMLITERAL , null ) ;
scratch = per cpu ptr ( & scomp scratch , i ) ;
static int nuv probe ( const av probe data * p )
return call int hook ( ptrace traceme , NUMLITERAL , parent ) ;
pr notice ( " STRINGLITERAL \n " ) ;
return min t ( int , zs size classes - NUMLITERAL , idx ) ;
chip - > audio stream [ azf capture ] . substream = substream ;
cfg80211 scan done ( rdev , false ) ;
fs bio set = bioset create ( bio pool size , NUMLITERAL , bioset need bvecs ) ;
if ( rdtp - > dynticks nmi nesting )
if ( rb empty root ( & tp - > out of order queue ) ) {
if ( ! prev )
memcpy ( new - > maps , n - > maps , ebitmap size / NUMLITERAL ) ;
} else if ( ! dev get cma area ( dev ) ) {
dr cell - > flags = cpu to be32 ( drmem lmb flags ( lmb ) ) ;
fwrt debugfs add file ( timestamp marker , dbgfs dir , 0200 ) ;
if ( len > sizeof ( buf ) | | len < NUMLITERAL ) {
max packages = topology max packages ( ) * topology max die per package ( ) ;
if ( ! x86 apple machine )
if ( state - > m drxk state = = drxk no dev )
return number cred unused * sysctl vfs cache pressure / NUMLITERAL ;
kfree ( call - > ret acl ) ;
buf - > size + = len + sz ;
static inline void tlbie ( unsigned long va , int psize , int ssize )
static unsigned int bucket heap top ( struct cache * ca )
static char const * object type [ ] = {
static enum vxge hw status vxge restore vpath mac addr ( struct vxge vpath * vpath )
if ( val | | data - > kind = = fscsyl )
rds ib destroy conns ( rds ibdev ) ;
hash = jhash 1word ( hash , hashrnd ) ;
name = drv - > probe ( parent , host dev , sw addr , priv ) ;
if ( ! recs ) {
return zorro register driver ( & hydra driver ) ;
struct ccsr guts iomem * guts ;
kfree rcu ( zap , rcu ) ;
static int dss probe ( const av probe data * p )
val = soc dapm read ( dapm , e - > reg ) ;
nve0 graph generate unk60xx ( struct nvc0 graph priv * priv )
set document locator debug ( void * ctx , xml sax locator ptr loc )
test shm mq setup ( int64 queue size , int32 nworkers , dsm segment * * segp ,
vnc palette * palette )
static void nfs4 cb free slot ( struct cb process state * cps )
proto tree create root ( packet info * pinfo )
attrs = alloc workqueue attrs ( ) ;
if ( intel dp is edp ( intel attached dp ( connector ) ) & &
int uobj perform destroy ( const struct uverbs obj type * type , u32 id ,
percpu up read ( & bdev - > bd block size semaphore ) ;
u64 z [ ecc max digits ] ;
static void subpage write ( void * opaque , hwaddr addr ,
complete ( & pri adapter - > xmitpriv . xmit comp ) ;
zval new str ( value , buf ) ;
tramp free ( ( void * ) ops - > trampoline ) ;
return do open execat ( at fdcwd , & tmp , NUMLITERAL ) ;
struct kmem cache * s ;
writel ( viaparinfo - > shared - > cursor vram addr ,
static void vhost vsock device unrealize ( device state * dev )
mutex unlock ( & sisusb - > lock ) ;
static void ppc prep io writeb ( void * opaque , hwaddr addr ,
static int ila xlat addr ( struct sk buff * skb , bool sir2ila )
void except throwd ( long group , long code , char * msg , void * data )
int ret maybe unused = NUMLITERAL ;
int i , npend = NUMLITERAL ;
ipc rcu putref ( & sma - > sem perm , sem rcu free ) ;
if ( early cpu has feature ( cpu ftr arch 300 ) ) {
mmu notifier call srcu ( & hmm - > rcu , hmm free rcu ) ;
tup type = junkfilter - > jf tuptype ;
return tx status ( pbpctl dev ) ;
openssl free ( vfy ) ;
if ( ! bitmap - > sb page ) {
quiet write ( sp [ NUMLITERAL ] , & s , sizeof ( s ) ) ;
kvm make request ( kvm req triple fault , & svm - > vcpu ) ;
rc = tpm transmit cmd ( chip , & cmd , tpm2 self test in size , NUMLITERAL ,
if ( cinfo & & cinfo - > col first [ col custom ] > = NUMLITERAL )
c - > dst . addr . mem . ea + = ( sv > > NUMLITERAL ) ;
vp8 decode flush impl ( avctx , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
ring ep doorbell ( xhci , slot id , ep index , stream id ) ;
diag dma ops . diag308 reset ( ) ;
return qobject to ( q dict , qdict get ( qdict , key ) ) ;
void psci set domain state ( u32 state )
dev priv - > cdclk . hw . vco = vco ;
if ( mvmvif - > ap sta id = = iwl mvm invalid sta )
qatomic set ( & s - > status ,
operation - > errno = - eprotonosupport ;
return string nocheck ( buf , end , ip6 addr , spec ) ;
simple allocator = wmem new ( null , wmem simple allocator t ) ;
static void lance mem write ( void * opaque , hwaddr addr ,
if ( ! sender | | param num > NUMLITERAL ) {
tlb flush idte ( gmap - > asce ) ;
if ( test bit ( pg mapped , & req - > wb flags ) ) {
usbhsh device detach ( hpriv , udev ) ;
return err ptr ( - enodev ) ;
int err load crypto strings ( void )
while ( spi imx - > txfifo < spi imx get fifosize ( spi imx ) ) {
os dump core ( ) ;
radeon irq set state ( dev , radeon sw int enable , NUMLITERAL ) ;
p ba - > valid = true ;
if ( pdata & & pdata - > plat config )
dev - > dma ops = & dma direct ops ;
static int maybe unused hda tegra resume ( struct device * dev )
enum iwl table type rate type ,
avc audit data init ( & ad , ipc ) ;
drive - > settings = null ;
static int film probe ( const av probe data * p )
pg time t last copy time = NUMLITERAL ;
int spi nor write ear ( struct spi nor * nor , u8 ear )
qla2x00 sp final compl ( struct qla hw data * ha , srb t * sp )
static void filter free subsystem preds ( struct event subsystem * system )
transport execute tasks ( cmd - > se dev ) ;
trace report ( fd , false ) ;
if ( chan2 ) {
kvmppc radix tlbie page ( kvm , gpa , shift , kvm - > arch . lpid ) ;
void ide proc unregister port ( ide hwif t * hwif )
struct curseg info * array ;
bug on ( readl ( l2x0 base + l2x0 ctrl ) & l2x0 ctrl en ) ;
adapter - > flags2 & = ~ ( ixgbe flag2 ptp enabled |
update smt snooze delay ( cpu - > dev . id , snooze ) ;
dev warn ( dev - > ctrl . device , " STRINGLITERAL \n " , state ) ;
static disas jump type op bct64 ( disas context * s , disas ops * o )
static int rcu torture stall ( void * args )
len + = scnprintf ( buf + len , page size - len ,
err = get kernel nofault ( instr , ( unsigned * ) addr ) ;
unsigned long * size , mtrr type * type )
entry = memblock virt alloc ( sizeof ( struct firmware map entry ) , NUMLITERAL ) ;
init list head ( & per cpu ( active ctx list , cpu ) ) ;
mlx5 cmd comp handler ( dev , vector , true ) ;
unregister netdev ( priv - > slaves [ NUMLITERAL ] . ndev ) ;
efx free rx buffer ( rx buf ) ;
static irqreturn t a3000 intr ( int irq , void * dummy )
down write nonblock ( & snd pcm link rwsem ) ;
wslua error ( set filter , " STRINGLITERAL " ) ;
smmu domain - > cfg . pgd = pgd ;
gpt = g malloc0 ( sizeof ( ppc4xx gpt t ) ) ;
static int gen8 reset engines ( struct intel gt * gt ,
if ( ! se nacl ) {
mutex lock ( & host - > clk gate mutex ) ;
static av always inline void thread park workers ( slice thread context * c , int thread count )
kthread stop ( ailp - > xa task ) ;
spin lock bh ( & device spinlock ) ;
if ( acpi sci override gsi = = invalid acpi irq )
pr debug ( drv name " STRINGLITERAL \n " ,
} while ( ! time after ( jiffies , deadline ) ) ;
return rocker cmd exec ( rocker port , NUMLITERAL ,
if ( adapter - > flags & igb flag has msix ) {
wdh - > tsprecision = wtap tsprec usec ;
if ( ! ptype - > af packet priv | | ! skb - > sk )
static int self check seen ( struct ubi device * ubi , unsigned long * seen )
if ( ! cpu isar feature ( any fp16 , env archcpu ( env ) ) ) {
drm debug kms ( " STRINGLITERAL \n " , ret ) ;
int from , cpu = cpumask first ( mask val ) ;
const u64 total data rate ,
get cpuflags ( ) ;
return stream open ( inode , f ) ;
i915 reg t port ctrl = is gen9 lp ( dev priv ) ?
void online secondary ( void )
clk = of clk get from provider ( clkspec , null , func ) ;
emem verify pointer ( const emem pool t * hdr , const void * ptr )
dl deallocate tls ( tls tpadj ( pd ) , false ) ;
check bin dir ( & new cluster , cluster new ) ;
const char * name , const char * default trigger ,
avctx - > initial padding = NUMLITERAL ;
void print tracking ( struct kmem cache * s , void * object )
result = do dax fault ( vma , vmf , get block , complete unwritten ) ;
fs = gtk file selection new ( ( " STRINGLITERAL " ) ) ;
if ( skb dst ( skb ) - > xfrm ) {
for ( i = NUMLITERAL ; i < tcs type nr ; i + + ) {
return s - > s3 . tmp . new cipher ;
static struct sock * mptcp sk clone lock ( const struct sock * sk )
libm alias ldouble ( j1 , j1 )
if ( is encrypted ( inode ) & & s isreg ( inode - > i mode ) )
nouveau ramht ref ( null , & priv - > ramht ) ;
if ( qatomic read ( & bs - > in flight ) ) {
tty flip buffer push ( & info - > port ) ;
static zend string * phar resolve path ( const char * filename , size_t filename len )
freezable schedule timeout killable unsafe ( * timeout ) ;
sh css fifo snd ( unsigned int token )
gfp mask = current gfp context ( gfp mask ) ;
snprintf ( value , sizeof ( value ) , " STRINGLITERAL " , v ) ;
noinline int test dwarf unwind thread ( struct thread * thread )
static int maybe unused tsc2005 resume ( struct device * dev )
void set hdr multiplier ( struct pipe ctx * pipe ctx )
if ( ! pvt - > streamstate | | pvt - > thread = = ast pthreadt null )
int parse events add breakpoint ( struct list head * * list , int * idx ,
zcache evicted eph zpages + = zpages ;
pty char driver * s = ( pty char driver * ) chr ;
static char * ch7xxx get id ( u8 vid )
xl remove hash entry ( res ) ;
static int dra7xx pcie host init ( struct pcie port * pp )
sdhci common unrealize ( s ) ;
if ( psmouse - > pktcnt = = psmouse - > pktsize ) {
struct ast flags64 peerflags ;
idev = iio device alloc ( sizeof ( * st ) ) ;
if ( ! minor | | ! device is registered ( minor - > kdev ) )
err = add section ( nid , zone , i < < pfn section shift ) ;
static void init device table dma ( void )
static void init ap timer init ( void )
static int maybe unused dwc2 resume ( struct device * dev )
if ( is media entity v4l2 subdev ( first ) )
static void blk end sync rq ( struct request * rq , blk status t error )
imx27 add mxc ehci otg ( & visstrim m10 usbotg pdata ) ;
int iscsit na dataout timeout retries (
static int mpsub probe ( const av probe data * p )
if ( ! mpu )
spin lock irqsave ( & atiixp lock , flags ) ;
if ( index > = dev - > max queues ) {
if ( ( type = = armv8 pmuv3 perfctr sw incr )
unsigned int * hv status , unsigned int * target )
if ( lock - > l flags & ldlm fl destroyed ) {
throw ( reported bounds error ) ;
panic ( " STRINGLITERAL \n " ) ;
if ( unlikely ( is private ( d backing inode ( dentry ) ) ) )
void ber decode as ( const gchar * syntax )
xchk btree set corrupt ( bs - > sc , cur , level ) ;
if ( ! policy - > governor | | ! policy - > governor - > show setspeed )
fcntl64 nocancel ( int fd , int cmd , . . . )
set bit ( w1 master need exit , & dev - > flags ) ;
bool mlx5e any tunnel proto supported ( struct mlx5 core dev * mdev )
const struct typec altmode desc * desc )
destroy stream ( dice , amdtp in stream , i ) ;
rcu stutter wait ( const char * title )
start = nla nest start noflag ( skb , ovs flow attr actions ) ;
unsigned long exit qualification ;
rtmsg ifinfo ( rtm newlink , slave dev , iff slave , gfp kernel ) ;
void init init mem pgprot ( void )
s - > root & = vtd rtaddr addr mask ( s - > aw bits ) ;
if ( ! net eq ( dev net ( t - > dev ) , net ) )
static void perf event init cpu ( int cpu )
static int sys get curr temp ( struct thermal zone device * tzd , int * temp )
if ( psm < l2cap psm dyn start & & ! capable ( cap net bind service ) )
return & methods filep ;
power supply changed ( adc bat - > psy ) ;
if ( likely ( qatomic read ( & qsp initialized ) ) ) {
static void print stats ( struct blkif st * blkif )
parm = iucv param [ cpu ] ;
asthread = ast pthreadt null ;
if ( ! begin dial ( dial , chan , async ) )
return chan - > slave addr ;
read nic byte ( dev , msr , & msr ) ;
skb - > truesize + = page size ;
static int mt76u submit rx buffers ( struct mt76 dev * dev )
cl = mei cl alloc linked ( dev ) ;
unsigned char * plain ;
bd = bdget disk ( info - > gd , NUMLITERAL ) ;
g free ( rcb ) ;
f2fs wait on page writeback ( ipage , node , true , true ) ;
struct request key auth * rka = get request key auth ( key ) ;
struct sg table * sg ;
return get first cpu in process ( process ) ;
void dwc2 hsotg core disconnect ( struct dwc2 hsotg * hsotg )
return sprintf ( buf , " STRINGLITERAL \n " , NUMLITERAL ) ;
return register pernet subsys ( & icmp sk ops ) ;
csr | = musb txcsr flushfifo | musb txcsr txpktrdy ;
const char * pevent data comm from pid ( struct tep handle * pevent , int pid )
if ( wq has sleeper ( & rqw - > wait ) )
static void svc tcp listen data ready ( struct sock * sk )
power supply changed ( bat - > psy ) ;
spin unlock bh ( & mbx - > queue lock ) ;
ppc cpu t dialect attribute unused ,
int node = early cpu to node ( cpu ) ;
if ( blk rq is passthrough ( req ) )
curl http auth cleanup digest ( data ) ;
void init tegra init early ( void )
err = mlx5 query port max mtu ( mdev , & max mtu , NUMLITERAL ) ;
if ( ! p eeprom - > eeprom or efuse )
pppoe if print ( u char * user u , const struct pcap pkthdr * h ,
if ( filter list [ i ] . id = = filter default ) {
proto tree * enip tree = null ;
if ( vnic dev capable ( vdev , cmd init ) )
return err ptr ( - bpf loader errno compile ) ;
fd = get unused fd flags ( flags ) ;
xfs dir2 leaf lasthash (
u64 iter cycles )
autovac report activity ( & vacstmt , relid , for wraparound ) ;
check and double early res ( start , end ) ;
c = ast strdup ( cur - > callid ) ;
sr = tcg temp new ( ) ;
int handshake ( struct xhci hcd * xhci , void iomem * ptr ,
unsigned char curlx ultouc ( unsigned long ulnum )
if ( check mutability ( predicate ) )
ser dev - > id . type = serio 8042 ;
tty = hvcsd - > port . tty ;
if ( new incr - > rn > sclp . rnmax ) {
pr warning ( " STRINGLITERAL \n " ) ;
struct audit chunk * chunk = mark chunk ( entry ) ;
idx = mipsxx pmu alloc counter ( cpuc , hwc ) ;
str payload = ast alloca ( payload len ) ;
static void icl combo phys uninit ( struct drm i915 private * dev priv )
netif set xps queue ( dp - > netdev , & r vec - > affinity mask ,
return ( get nr inodes unused ( ) / NUMLITERAL ) * sysctl vfs cache pressure ;
gdb read byte ( buf [ i ] ) ;
atomic dec ( & watchdog cpus ) ;
int minor = md - > disk - > first minor ;
kfifo reset ( & sonypi device . fifo ) ;
if ( dev priv - > params . psr safest params )
static int dwc3 event buffers setup ( struct dwc3 * dwc )
list add ( & desc - > node , & chan - > desc . free ) ;
void extent map tree empty lru ( struct extent map tree * tree )
if ( rt2x00 has cap external lna a ( rt2x00dev ) ) {
if ( chan - > desc - > cyclic ) {
if ( mode = = seccomp mode disabled )
ext4 init xattr ( void )
struct nf dccp net * dn = nf dccp pernet ( net ) ;
expr = transform expr ( pstate , node , null ) ;
struct acpi hotkey * hotkey = seq - > private ;
cpu states = g new0 ( s390cpu * , max cpus ) ;
box = uncore alloc box ( type , cpu to node ( cpu ) ) ;
static int pcifront connect and init dma ( struct pcifront device * pdev )
drm i915 private t * dev priv = dev - > dev private ;
u64 tmp64 , val64 ;
spin lock ( & ctrl - > mbox lock ) ;
static inline u64 get next hop addr ( struct hl ctx * ctx , u64 curr pte )
* value = slot - > attention save ;
unsigned int create irq nr ( unsigned int irq want , int node )
if ( state . event ! = pm event suspend | | pmu sys suspended )
u32 ratemask , bool directed , u32 tx flags ,
int minlen = NUMLITERAL , attrlen = nla len ( nla ) ;
if ( qemu memfd check ( mfd allow sealing ) ) {
err = xattr mkdir ( inode , dentry , 0700 ) ;
if ( ! ndlp | | ! nlp chk node act ( ndlp ) ) {
sd = kzalloc ( sizeof ( struct v4l2 subdev ) , gfp kernel ) ;
void mlx5 register device ( struct mlx5 core dev * dev )
icp state * icp = icp ( cpu - > intc ) ;
if ( ! req )
ret = shmem reserve inode ( inode - > i sb , null ) ;
return sizeof ( struct fc scr s ) ;
int ssize , unsigned long inv flags )
if ( vtime accounting cpu enabled ( ) )
ret = crypto hash digest ( & desc , & sg , NUMLITERAL , result ) ;
if ( fxstat ( stat ver , fd , & st ) < NUMLITERAL )
security ops - > release secctx ( secdata , seclen ) ;
pci bus fire intx routing notifier ( pci get bus ( & lpc - > d ) ) ;
tcp free md5sig pool ( ) ;
logicalrep relmap init ( void )
heap truncate ( const char * relname )
apic write ( apic lvterr , value ) ;
static int mwl8k request firmware ( struct mwl8k priv * priv , char * fw image )
if ( pmu & & pmu - > func - > pgob )
switch ( hdw - > active stream type ) {
bool xsk umem peek addr ( struct xdp umem * umem , u64 * addr )
static void fn inc console ( struct vc data * vc )
return smk curacc ( p - > cred - > security , may write ) ;
ib device put ( device ) ;
struct cfs rq * cfs rq = null ;
dev = ugeth - > ndev ;
if ( ! ( ctx = openssl malloc ( sizeof ( * ctx ) ) ) ) {
synchronize srcu ( hctx - > srcu ) ;
for each possible cpu ( i ) {
static void init xstate enable boot cpu ( void )
return dce4 crtc do set base ( crtc , fb , x , y , NUMLITERAL ) ;
test length ( hfinfo , tvb , octet offset , octet length ) ;
int proto , err = NUMLITERAL ;
mlx5e refresh tirs ( priv , false , false ) ;
pqsignal ( sigusr1 , startup proc sig usr1handler ) ;
struct ccw1 * cp = cdev - > private - > dma area - > iccws ;
report user fault ( regs , interruption code , sigsegv ) ;
stimer start ( stimer ) ;
rtl w16 ( intr mask , tp - > intr event ) ;
set intr gate ( i , & early idt handlers [ i ] ) ;
call - > server = server ;
mutex lock ( & blkcg pol register mutex ) ;
static char * bsg devnode ( struct device * dev , mode_t * mode )
multifd send sync main ( rs ) ;
static void xhci reset bandwidth ( struct usb hcd * hcd , struct usb device * udev )
apic write ( apic icr , cfg ) ;
cfs hash dd hnode add ( cfs hash t * hs , struct cfs hash bd * bd ,
return priv - > channel tc2realtxq [ txq ix ] [ up ] ;
if ( cdev - > online & & ! cdev - > private - > flags . resuming )
hash tfm = crypto alloc shash ( hash alg , NUMLITERAL , NUMLITERAL ) ;
gc delref ( obj ) ;
kmem cache free ( file security cache , fsec ) ;
if ( firesat - > channel [ k ] . active )
debugf4 ( " \t STRINGLITERAL \n " , chan - > dimm - > label ) ;
if ( unlikely ( copy fpstate to fpregs ( fpu ) ) ) {
ast bridge channel kick ( bridge channel ) ;
union nvme result * result , void * buffer , unsigned bufflen ,
switch ( tvb reported length ( tvb ) ) {
rq - > cmd flags = flags | req alloced ;
bio - > bi rw | = ( NUMLITERAL < < bio rw failfast transport ) ;
const char * path = filename ;
evp mac free ctx ( ctx - > ctx ) ;
if ( ! vtime accounting enabled ( ) )
torture shutdown absorb ( " STRINGLITERAL " ) ;
tipc connect ( tsock - > p - > ref , & tsock - > peer name ) ;
tcf em tree destroy ( & head - > ematches ) ;
if ( sd - > num spliced )
ptr = ensure contiguous ( tvb , abs offset , limit ) ;
enqueue rt entity ( rt se , head ) ;
data = qdict get ( qobject to ( q dict , obj ) , " STRINGLITERAL " ) ;
g strlcpy ( buf , " STRINGLITERAL " , buf len ) ;
int dbg check synced i size ( const struct ubifs info * c , struct inode * inode )
if ( ! access ok ( from , n ) )
char sebuf [ pg strerror r buflen ] ;
curl detach connnection ( data ) ;
tick nohz idle exit norcu ( ) ;
inode - > i op = & debugfs dir inode operations ;
ret = i2c transfer ( adap , & msg , NUMLITERAL ) ;
int snd usb endpoint next packet size ( struct snd usb endpoint * ep )
mem cleanup ( attr , sizeof ( xml attribute ) ) ;
bhp = & first bh ;
plperl init interp ( ) ;
status - > status = unknown ;
if ( ! phys enc ) {
( void ) zcache flush page ( local client , pool id , & oid , ind ) ;
pr debug ( " STRINGLITERAL \n " , e - > id , e - > name ) ;
exit ( argp err exit status ) ;
static uint64_t omap os timer read ( void * opaque , hwaddr addr ,
return ms card - > err code = = err code ;
raw spin lock irqsave ( & l2x0 lock , flags ) ;
actual = qatomic cmpxchg ( ind addr , expected , expected | to be set ) ;
pciserial detach ports ( priv ) ;
obd slab alloc ptr gfp ( clk , ccc lock kmem , gfp nofs ) ;
static int maybe unused xpsgtr resume ( struct device * dev )
smb fdata ( param , fmt , param + pcnt , unicodestr ) ;
static void qeth l3 start ipassists ( struct qeth card * card )
itoa word ( itoa word type value , char * buflim ,
while ( * p )
static void poke turbosparc ( void )
void drm mm init ( struct drm mm * mm , u64 start , u64 size )
int ret = NUMLITERAL ;
init deferrable work ( & cache cleaner , do cache clean ) ;
static noinline void lkdtm do action ( const struct crashtype * crashtype )
ret = wait for single object ( sema , NUMLITERAL ) ;
iwl mvm disable txq ( mvm , i , NUMLITERAL ) ;
spu = get idle spu ( ctx , flags ) ;
switchtec ntb check link ( sndev , msg ) ;
struct smack known * iskp = ipp - > security ;
eth = ( struct ethhdr * ) skb - > data ;
if ( loaded > = NUMLITERAL & & loaded < = * cur ) {
writeq be ( reg unmasked , & hwq - > host map - > intr clear ) ;
mutex lock ( & ufsi - > truncate mutex ) ;
cgroup dev func proto ( enum bpf func id func id , const struct bpf prog * prog )
if ( ret | | ! cause )
static int init sourcesink bind config ( struct usb configuration * c )
mutex unlock ( & priv - > adapter mutex ) ;
return sctp get port local ( sk , & addr ) ;
bool mgmt get connectable ( struct hci dev * hdev )
mant * = NUMLITERAL ;
acpi os printf ( " STRINGLITERAL " , module name , line number ) ;
spin lock init ( & channel - > lock ) ;
phy suspend ( dev - > phydev ) ;
blocking notifier chain register ( & usb notifier list , nb ) ;
nmi watchdog user enabled = NUMLITERAL ;
err = blk sts ok ;
rule . port = & port block - > priv - > port ;
if ( val > = bit ( NUMLITERAL ) )
list = & h - > table [ i ] ;
g free ( req ) ;
warn on ( best cpu ! = NUMLITERAL & & ! cpu present ( best cpu ) ) ;
if ( dev - > mt76 . usb . sg en )
mempool free ( io - > meta page , log - > meta pool ) ;
memcpy ( insnbuf , start , insn len ) ;
s - > packet & = dca packet mask ;
syscall define3 ( sysfs , int , option , unsigned long , arg1 , unsigned long , arg2 )
void get cpu address sizes ( struct cpuinfo x86 * c )
rc = selinux set mnt opts ( sb , & opts , NUMLITERAL , null ) ;
netdev dbg ( dev , " STRINGLITERAL \n " , func , * extra ) ;
dma addr t * list = nvbe - > ttm . dma address ;
armsse class * asc = arm sse get class ( s ) ;
if ( zfcp erp action is running ( act ) )
reg = ufshcd readl ( hba , reg uic error code data link layer ) ;
netdev for each all upper dev rcu ( bond - > dev , upper , iter ) {
void rtl8723a disabled to emu ( struct rtl8xxxu priv * priv )
static int pca954x remove ( struct i2c client * client )
bool need vfio )
q - > limits . max segment size = max size ;
rcu eqs exit ( false ) ;
static void fsl emb pmu disable ( struct pmu * pmu )
dissect icbaaccoserver ping resp ( tvbuff t * tvb , int offset ,
unsigned int isr array size , u32 irqstatus )
if ( features & netif f ip csum )
mod timer ( & b - > fake irq , jiffies + NUMLITERAL ) ;
* confunc = tls construct cert verify ;
static int blk mq init flush ( struct request queue * q )
static void show command ( struct scsi cmnd * s cpnt )
int spi nor lock and prep ( struct spi nor * nor )
zend api int add index bool ( zval * arg , ulong index , int b )
qemu notify event ( ) ;
io jumps file plus ( fp ) = & io file jumps ;
memset ( & equiv table , NUMLITERAL , sizeof ( equiv table ) ) ;
int page is ram ( unsigned long pagenr )
static int vm test create user ( const char * context , const char * mailbox )
iounmap ( adapter - > io addr ) ;
encode seqid op tail ( resp , save , nfserr ) ;
cq = idr read cq ( cmd . cq handle , file - > ucontext , NUMLITERAL ) ;
data - > cyc2ns mul = NUMLITERAL ;
if ( ! uart tx stopped ( port ) )
if ( ! ( pevent - > flags & tep disable sys plugins ) )
pr debug ( " STRINGLITERAL \n " , skb , atmvcc , atmvcc - > dev ) ;
static int boot secondary ( unsigned int cpu , struct task struct * idle )
area = xen alloc vm area ( page size ) ;
if ( g resolv flags & resolv network ) {
openssl free ( mp ) ;
return security xfrm policy alloc ( & pol - > security , uctx ) ;
hwaddr base = omap l4 attach ( ta , NUMLITERAL , null ) ;
new hash = obj raw hashfn ( ht , rht obj ( ht , obj ) ) ;
addr = memblock virt alloc try nid raw (
return cdrom start packet command ( drive , NUMLITERAL , cdrom start rw cont ) ;
unlink peer ( peer ) ;
memset ( isdelim , NUMLITERAL , sizeof isdelim ) ;
printk ( " STRINGLITERAL \n " , pv info . name ) ;
cpu clear ( cpu , cpu callin map ) ;
tmio mmc data irq ( host , status ) ;
start timer ( t , interval ) ;
return scpi send message ( cmd set clock value , & clk , sizeof ( clk ) ,
return tab [ msgindex ] . calcit ;
struct list head * cur , * last , * next = inactive ;
hlist for each entry ( p , head , hlist )
get gss name ( struct connectdata * conn , bool proxy , gss name t * server )
s - > last xmit ts = qemu get clock ns ( vm clock ) ;
printk ( kern err " STRINGLITERAL \n " , func , param ) ;
static void ingenic early console write ( struct console * console ,
down read ( & clk - > rwsem ) ;
return smk curacc on task ( p , may read , func ) ;
bnx2x log ( " STRINGLITERAL \n " ) ;
dev priv - > bdev . dev mapping = dev - > anon inode - > i mapping ;
return - enomem ;
static int do s2io chk alarm bit ( u64 value , void iomem * addr ,
void perf mux hrtimer cancel ( int cpu )
r4k on each cpu ( local r4k flush cache range , vma , NUMLITERAL , NUMLITERAL ) ;
iommu dma unmap ( iommu get domain for dev ( dev ) , * handle , size ) ;
return - eperm ;
void pm print active wakeup sources ( void )
frwr op release mr ( struct rpcrdma mw * r )
if ( is laguna ( cinfo ) ) {
cafe dev dbg ( & cafe - > pdev - > dev , " STRINGLITERAL \n " ,
if ( tipc nametbl - > local publ count > = tipc max publications ) {
fts load ( ftsobj * sp , ftsentry * p )
if ( arg < NUMLITERAL | | arg > drive - > driveid - > max multsect )
nfs free unlinkdata ( data ) ;
ret = qdisc enqueue ( skb , qdisc , root lock , to free ) ;
map . flags = data - > flags ;
if ( strncasecmp ( dptr , needle , len ) = = NUMLITERAL )
limits - > max discard sectors = cache - > discard block size ;
struct autogroup * ag = autogroup task get ( p ) ;
if ( ! memory24 - > minimum & & ! memory24 - > address length )
return thread count = = qatomic read ( & multifd recv state - > count ) ;
constraint ns = dev pm qos read value ( dev , dev pm qos resume latency ) ;
if ( gpio > = omap max gpio lines + NUMLITERAL )
static int ast probe ( const av probe data * p )
struct lbs private * priv = ( struct lbs private * ) ( dev - > priv ) ;
lassert ( addr ) ;
return valid vpe ( its , desc - > its vmovp cmd . vpe ) ;
hrtimer forward ( struct hrtimer * timer , ktime t interval )
if ( omap irq pending ( ) | | need resched ( ) )
if ( p - > alloc mode = = ssr ) {
gem bug on ( ! i915 request timeline ( rq ) - > has initial breadcrumb ) ;
else if ( is module addr ( p - > addr ) )
if ( crypto skcipher get flags ( tfm ) & crypto tfm need key )
int ossl provider init ( const ossl core handle * handle ,
evlist for each safe ( evlist , n , pos ) {
return ipc has perm ( & shp - > shm perm , perms ) ;
if ( ! dev - > netdev ops - > ndo setup tc )
error = alloc data pages ( pagedir nosave , gfp atomic , NUMLITERAL ) ;
dest = tcg temp new ( ) ;
uintptr_t stack chk guard = dl setup stack chk guard ( dl random ) ;
tasklet disable ( & priv - > poll tx task ) ;
if ( priv - > flags & eip197 trc cache ) {
if ( ! is err or null ( udc - > transceiver ) ) {
static int rt mt6 check ( const struct xt mtchk param * par )
ret = ops - > alloc ( mi , metaval , exists ? gfp_atomic : gfp kernel ) ;
return ! ! ( data - > cur val & ( NUMLITERAL < < offset ) ) ;
static int prism2mib flag (
struct net * net = & init net ;
nest = nla nest start noflag ( skb , exts - > police ) ;
int rc = lsm ret default ( xfrm state pol flow match ) ;
spi bi - > irq = gpio to irq ( gpio pendown ) ;
static int aea read probe ( const av probe data * p )
u32 reg value ;
if ( b & & test bit ( NUMLITERAL , & b - > up ) ) {
if ( queue < dev - > queues ) {
vmx - > loaded vmcs - > nmi known unmasked =
err state * state = crypto thread get local ( & err thread local ) ;
if ( vsi - > netdev - > reg state = = netreg registered ) {
int width = div round up ( vc - > vc font . width , NUMLITERAL ) ;
data = kvmalloc ( alloc bytes , gfp kernel ) ;
writel ( pa symbol ( secondary startup ) ,
if ( bio op ( bio ) ! = req op read )
void amdgpu output poll changed ( struct drm device * dev )
static struct bkey * table to bkey ( struct bset tree * t , unsigned int cacheline )
drm gem object unreference unlocked ( gem ) ;
pr notice ( " STRINGLITERAL \n " ,
signal power supply changed ( & test power supplies [ test ac ] ) ;
p cmd - > para 2 = para2 ;
if ( ! intel display power is enabled ( dev priv , power domain plls ) )
locks start grace ( & ln - > lockd manager ) ;
priv - > assoc request = - einprogress ;
void afu irq name free ( struct cxl context * ctx )
mutex lock ( & resource - > devices lock ) ;
if ( kstrtol ( buf , NUMLITERAL , & value ) )
if ( sig = = null ) {
if ( dev - > state = = clock evt state shutdown )
tep find common field ( struct tep event format * event , const char * name )
int sk detach filter ( struct sock * sk )
if ( addr & & addr + size = = end addr ) {
bkt list = & netlbl domhsh rcu deref ( netlbl domhsh ) - > tbl [ bkt ] ;
if ( lp - > lp notifying | | ! ni )
retval = sctp make control ( asoc , sctp cid abort , flags , hint ) ;
if ( rb empty root ( & req - > r osd - > o requests ) )
return ata pci init one ( pdev , ppi , & cy82c693 sht , null ) ;
if ( dsi - > state & dsim state vidout available )
static int connected ( struct usb dev state * ps )
if ( s = = null ) {
int metadata ol bitnr = ctz32 ( ret ) ;
if ( ! plat data )
if ( ! mask )
sugov get util ( & util , & max , sg cpu - > cpu ) ;
mutex unlock ( & rpadlpar mutex ) ;
sb - > s flags | = sb rdonly ;
addr + = page size - ( handle to chunks ( handle ) < < chunk shift ) ;
while ( memblock x86 check reserved size ( & addr , sizep , align ) )
napi disable ( & vsi - > q vectors [ q idx ] - > napi ) ;
copy generic path info ( & scan plan - > plan , best path ) ;
pinst = hlist entry safe ( node , struct padata instance , cpu online node ) ;
remove ticket ( space info , ticket ) ;
u int32 t ts = extract 32bits ( & dh - > dh ts ) ;
mutex lock ( & st - > slock ) ;
mutex lock ( & group - > mark mutex ) ;
asc - > max ram size = NUMLITERAL * gi b ;
intel gt set wedged ( rq - > engine - > gt ) ;
rcu init pointer ( mlxsw sp port - > sample , null ) ;
if ( ret ) {
btrfs put fs root ( log ) ;
for ( cur = first action ; cur ; cur = cur - > next )
void writesl ( volatile void iomem * addr , const void * data , int len )
tree init node ( & fs prio - > node , null , null ) ;
ret = dax iomap fault ( vmf , pe size pte , & xfs iomap ops ) ;
addr = g malloc ( addrlen + NUMLITERAL ) ;
cfq slice expired ( cfqd , cfqd - > active queue , NUMLITERAL , NUMLITERAL ) ;
const node root = ( const node ) vroot ;
synthu device . minor = misc dynamic minor ;
if ( ! ste | | ! ( * ste & segment entry origin ) )
irq free hwirqs ( irq , NUMLITERAL ) ;
hwaddr mem base )
void mipi dbi enable flush ( struct mipi dbi dev * dbidev ,
if ( nla len ( rt ) < xfrm alg len ( algp ) )
gc delref ( column - > descid ) ;
static int init ipl init ( void )
if ( get msr ( base cpu , msr fsb freq , & msr ) )
lastkt = ktime get ( ) ;
sched int bit wait io ( struct wait bit key * word )
proto init ( register all protocols , register all handoffs ) ;
mlx5 del flow rules ( arfs t - > default rule ) ;
if ( dma mask > = dma direct get required mask ( dev ) )
ima print digest ( m , entry - > digest , ima digest size ) ;
if ( unlikely ( page - > mapping ! = mapping ) ) {
mc promisc = & esw - > mc promisc ;
static blk status t floppy read sectors ( struct floppy state * fs ,
static int cap open ( struct inode * inode , struct file * filp )
assert ( state < array size ( state name ) ) ;
kfree ( tstate ) ;
bool nfsd up before ;
rps - > power . mode = NUMLITERAL ;
mutex lock ( & cp - > pm mutex ) ;
if ( mask < HEXLITERAL )
pmd write lock in core ( pmd ) ;
return ff nvdec frame params ( avctx , hw frames ctx , NUMLITERAL , NUMLITERAL ) ;
return iommu kmem cache alloc ( iommu iova cache ) ;
err = follow managed ( path , nd ) ;
ret = intel init pipe control ( engine , NUMLITERAL ) ;
static bool init early alloc p2m ( unsigned long pfn , bool check boundary )
u64 lpj = ( u64 ) tsc khz * khz ;
unsigned int nocast flags )
if ( ! rr - > verb ) {
static int cpuid4 cache sysfs init ( unsigned int cpu )
if ( scsw is tm ( & irb - > scsw ) )
ionic reset queues ( lif , null , null ) ;
static void cpu bringup ( void )
unsigned int isn bits ;
if ( pcpu alloc pages ( chunk , pages , page start , page end , gfp ) )
ret = page counter set max ( counter , limit ) ;
if ( ! next dup )
s - > is jmp = disas noreturn ;
dev err ( ctrl - > device ,
gamma mode | = gamma mode mode 12bit multi segmented ;
if ( clockevent state oneshot ( dev ) ) {
object addresses * oktodelete ;
if ( bp - > b transp = = tp ) {
disk flush events ( ev - > disk , NUMLITERAL ) ;
free ( expanded format ) ;
static struct ref reloc sym * kernel get ref reloc sym ( struct map * * pmap )
pud = ( pud t * ) get zeroed page ( gfp atomic ) ;
if ( gpio is valid ( sensor - > platform data - > xshutdown ) )
bool dev pm skip resume ( struct device * dev )
leave ( " STRINGLITERAL " , conn , conn ? conn - > debug_id : NUMLITERAL ) ;
if ( gfp zone ( gfp ) > = policy zone )
static void ipoib neigh cleanup ( struct neighbour * n )
le16 * buf = ( le16 * ) buf ;
if ( addr < task size & & system uses ttbr0 pan ( ) )
blk update request ( tio - > orig , blk sts ok , nr bytes ) ;
line = syme - > src - > lines ;
if ( pstmt )
struct intel wait * wait , * n , * first ;
cpumask set cpu ( rq - > cpu , rq - > rd - > online ) ;
static int microblaze load dtb ( hwaddr addr ,
static void wait on pipe ( struct trace iterator * iter )
expr = coerce to target type ( pstate , expr , input type ,
char * key ( void )
swap entry free ( p , entry ) ;
static bool zram test flag ( struct zram * zram , u32 index ,
fl6 . flowi6 oif = l3mdev master ifindex by index ( net , oif ) ;
expert add info format ( pinfo , null , & ei cba acco disconnect , " STRINGLITERAL " ,
else if ( is blank ch ( str [ i ] ) )
if ( xfs da3 node verify ( bp ) ) {
worker - > flags | = worker started ;
void * * p , void * end , void * * obuf , size_t olen )
gboolean is video , rtp dyn payload t * rtp dyn payload )
written = mbsrtowcs ( pwcs , & s , n , & no r state ) ;
clkdev add table ( array and size ( pxa910 clkregs ) ) ;
const struct target core fabric ops * tfo ,
if ( ! is enabled ( config cfg80211 certification onus ) )
amroutine = get index am routine by am id ( idxrelrec - > relam , false ) ;
void linux to wlan ( wilc wlan inp t * nwi , struct wilc * nic )
struct sk buff * skb ,
wb queue work ( wb , work ) ;
core tpg remove lun ( se tpg , lun ) ;
fc . cb break = afs calc vnode cb break ( vnode ) ;
kmem cache free ( rsb cache , r ) ;
int r600 fmt get blocksize ( u32 format )
if ( ! chip )
this cpu write ( cpu tss rw . x86 tss . sp0 , sp0 ) ;
f2fs update inode page ( inode ) ;
if ( ! pi | | ! link up )
static int nx set dma mask ( struct netxen adapter * adapter )
if ( rpdev - > announce & & rpdev - > ept & &
random addr = kaslr get random long ( " STRINGLITERAL " ) % slots ;
static inline int machine without vbus sense ( void )
int pcmcia neponset init ( struct sa1111 dev * sadev )
static unsigned int das800 ind read ( struct comedi device * dev , unsigned int reg )
restrict info * ri = lfirst node ( restrict info , lc ) ;
if ( ! plane - > state - > visible )
static void early init centaur ( struct cpuinfo x86 * c )
return do execve ( getname kernel ( init filename ) ,
static int sh73a0 boot secondary ( unsigned int cpu , struct task struct * idle )
sta set sinfo ( sta , sinfo , true ) ;
writel ( val , dev - > mmio . regs + offset ) ;
clear siginfo ( & si ) ;
if ( rc ! = NUMLITERAL & & has capability ( tsk , cap mac override ) )
return state = = running & & nb fds < shared ;
cmd - > data = adapter - > num rx qs ;
if ( hostdata - > sensing = = cmd ) {
int aoa alsa init ( char * name , struct module * mod , struct device * dev )
void mlx4 ib destroy wq ( struct ib wq * ibwq , struct ib udata * udata )
static bool blk update bidi request ( struct request * rq , blk status t error ,
fail ( c , dti , " STRINGLITERAL " ,
return unpin extent range ( root , start , end , false ) ;
g free ( retval - > value ) ;
timer = g malloc0 ( sizeof ( * timer ) ) ;
const int32_t * filter pos , int filter size )
nd print invalid ( ndo ) ;
struct tep format field * field , struct tep record * record )
list add tail ( & rpc - > list , & es2 - > arpcs ) ;
if ( write ( stderr fileno , ach error , n ) ) { } ;
if ( ! file priv - > is master ) {
if ( soc type = = qca wcn3990 )
page = alloc page ( gfp kernel account | gfp dma32 ) ;
if ( isa driver & & isa driver - > probe )
netvsc dev = rtnl dereference ( net device ctx - > nvdev ) ;
ret = parse event symbols ( str , & attr ) ;
write lock bh ( & ife mod lock ) ;
chan err ( chan , " STRINGLITERAL \n " ) ;
cacpki applet data * pki applet data ;
state = kzalloc ( sizeof ( struct sp887x state ) , gfp kernel ) ;
if ( ! smp found config & & ! acpi lapic ) {
long max = NUMLITERAL ;
errno = eopnotsupp ;
openssl free ( obj ) ;
status = efi call virt ( get time , tm , tc ) ;
static int lbs cmd 802 11 get log ( struct lbs private * priv ,
static void cell release singleton ( struct dm bio prison cell * cell , struct bio * bio )
finit soft fpu ( & current - > thread . fpu . state . soft ) ;
syscall define2 ( statfs , const char user * , pathname , struct statfs user * , buf )
else if ( ! is factor ( block size , data limits - > discard granularity ) )
wait on bit lock ( page waitqueue ( page ) , & wait , bit wait io ,
return create physical mapping ( pa ( start ) , pa ( end ) , nid ) ;
return cgroup id ( bio blkcg ( bio ) - > css . cgroup ) ;
printf ( " STRINGLITERAL \n " , func , output ) ;
return dst - > rcv ( skb , dev , pt , orig dev ) ;
d set d op ( dentry , & adfs dentry operations ) ;
s8 delta , bool is2t )
fl = g list remove link ( fl , flp ) ;
static ssize_t php stdiop write ( php stream * stream , const char * buf , size_t count )
return bufp = = p - > buf ? avprobe_score_max : avprobe score max - NUMLITERAL ;
for ( i = NUMLITERAL ; i < NUMLITERAL ; i + + )
qeth setup ccw ( iob - > channel , iob - > data , len ) ;
static inline void pc87413 enable wden ( void )
page = find data page ( inode , from > > page cache shift , false ) ;
static int hpsa map one ( struct pci dev * pdev ,
set bit ( fm10k flag reset requested , interface - > flags ) ;
vma - > vm flags | = vm can invalidate | vm can nonlinear ;
describe object ( cache , object , addr , tag ) ;
br handle frame finish ( null , skb ) ;
cd - > fcftr value = default fifo f d rff |
rcu assign pointer ( b - > media ptr , dev ) ;
printk ( kern err " STRINGLITERAL \n " ) ;
if ( unlikely ( ! ldt | | idx > = ldt - > nr entries ) )
lblk start = ext4 lblk cmask ( sbi , lblk ) ;
pnv pci ioda2 tce invalidate pe ( pe ) ;
bool probe kernel read allowed ( const void * src , size_t size )
spin lock bh ( & nf conntrack expect lock ) ;
u8 i , uninitialized var ( val ) ;
cpuset update active cpus ( true ) ;
bool et hb is buffer crc32ok ( u8 * pby buffer , unsigned int cb frame length )
io tlb start = alloc bootmem low pages ( page align ( bytes ) ) ;
char * ctx = null ;
void fbcon new modelist ( struct fb info * info )
static void tcpm debugfs init ( const struct tcpm port * port ) { }
unsigned short range = xprt max resvport - xprt min resvport + NUMLITERAL ;
bit = ctz32 ( diff ) ;
ast uri decode ( buf , ast uri http ) ;
rc = linearize ( ctxt , addr , size , false , & linear ) ;
if ( check fit tl ( offset , NUMLITERAL ) )
void virtio bus device plugged ( virt io device * vdev , error * * errp )
if ( ! ( prefs . name resolve & prefs resolv mac ) )
sip scheddestroy ( p , sip trans timeout ) ;
} else if ( pipe full ( head , tail , pipe - > max usage ) ) {
cleanup scratch page ( dev , & vm - > scratch page ) ;
int status , ret = nfs ok ;
search indexed tlist for sortgroupref ( expr * node ,
if ( gpio is valid ( cf - > board - > vcc pin ) ) {
conn hashfn ( struct cfs hash * hs , const void * key , unsigned mask )
pr debug ( " STRINGLITERAL " , func , type ) ;
void noreturn pnv platform error reboot ( struct pt regs * regs , const char * msg )
declare sockaddr ( struct sockaddr l2 * , la , msg name ) ;
int sign nid = nid undef , hash nid = nid undef ;
void p info ( const char * fmt , . . . )
cic - > ttime . last end request = jiffies ;
* attach type = section defs [ i ] . expected attach type ;
mutex init ( & ei - > open mutex ) ;
for ( node = avtab search node ( ctab , key ) ; node ;
static inline void put child ( struct tnode * tn , unsigned long i ,
cap clear ( bprm - > cred - > cap permitted ) ;
rate control free sta ( sta ) ;
u8 * hw addr , u32 rates )
static void rtl92c deinit sw vars ( struct ieee80211 hw * hw )
int des key sched ( const des cblock * key , des key schedule * schedule )
uint64_t mcf uart read ( void * opaque , hwaddr addr ,
if ( of coresight ep is input ( ep ) )
u32 bank , bit , wakeup = NUMLITERAL ;
schedule work ( & ht - > run work ) ;
cur = flex array get ptr ( h - > htable , i ) ;
ipw write32 ( priv , ipw inta mask r , ~ ipw inta mask all ) ;
if ( console loglevel > = console loglevel debug )
static void date register classes ( tsrmls d )
enum i915 cache level cache level , u32 flags )
return h248 calls packet common ( tapinfo , pinfo , edt , prot info , redraw megaco ) ;
iseries seek read ( wtap * wth , gint64 seek off , wtap rec * rec ,
apic write ( apic lvt0 , apic dm nmi | apic lvt masked ) ;
int queue , err ;
filtered = zalloc ( sizeof ( * filtered ) +
skb - > truesize + = page size ;
cfs hash cond del locked ( cfs hash t * hs , struct cfs hash bd * bd ,
dev - > netdev ops = & ipgre tap netdev ops ;
if ( ret < NUMLITERAL | | ret < count )
mem cleanup ( cur , sizeof ( xml element content ) ) ;
efx - > type - > reconfigure mac ( efx ) ;
u32 tc reboot = meson wdt dc reset | meson wdt tc en ;
unsigned int bank , unsigned int reg , u8 val )
region count ( resv , start , end ) ;
static int dma supported ( struct device * dev , u64 mask )
ttm dma - > cpu address = null ;
void * * init out , char * * mac out , gfp t gfp mask )
struct clk * child , * tmp clk , * fail clk = null ;
static int rsxx dma configure ( struct rsxx cardinfo * card )
static void rkisp1 isp start ( struct rkisp1 device * rkisp1 )
show bpf prog ( prog ids [ iter ] , type ,
kmem cache free ( vm area cachep , vma ) ;
rc = parse sec desc ( cifs sb , pntsd , acllen , fattr ) ;
ftrace bug ( failed , rec ) ;
mvif - > group wcid . idx = mt vif wcid ( idx ) ;
void dce110 set bandwidth (
int init early irq init ( void )
unsigned int debounce , bool * gpio invert )
struct osc object * osc , int async )
if ( ! map - > bus | | ! map - > bus - > async write )
assert ( ! dev - > realized ) ;
bpf map inc ( inner map ) ;
if ( ret < = NUMLITERAL )
unsigned char data , unsigned int flags )
td = kzalloc ( sizeof ( struct egalax data ) , gfp kernel ) ;
mutex init ( & fh - > video q . lock ) ;
if ( status < NUMLITERAL ) {
struct tep event format * event ;
drm warn on ( dev , ret = = - edeadlk ) ;
if ( ret < NUMLITERAL & & ! mcb - > error ) {
memcpy ( bitmap - > max seq num , seq , seq num size ) ;
static inline int kprobes notify page fault ( struct pt regs * regs )
for each alloc enabled rdt resource ( r ) {
mlx5 wq destroy ( & conn - > cq . wq ctrl ) ;
mega get ldrv num ( adapter t * adapter , struct scsi cmnd * cmd , int channel )
return iwl trans send cmd pdu ( trans ( priv ) ,
init shared invalidation state ( void )
mutex lock ( & rtlpriv - > locks . ps mutex ) ;
define ( spinlock size , sizeof ( spinlock t ) ) ;
if ( ! pic - > f . buf [ NUMLITERAL ] )
if ( check fit ptr ( offset , NUMLITERAL ) ) {
mutex lock ( & q - > sysfs dir lock ) ;
static bool within kprobe blacklist ( unsigned long addr )
create shared memory and semaphores ( false , max backends , NUMLITERAL ) ;
smu get power limit ( & adev - > smu , & limit , false , true ) ;
return kmem cache shrink ( cachep , false ) ;
if ( ! atomic read ( & cmd - > t transport queue active ) ) {
pt addr = ppgtt - > pd . page table [ i ] - > daddr ;
switch ( vha - > qlini mode ) {
if ( ! has xcrs ) {
if ( ! refcount dec and test ( & b - > cpus ) ) {
authenc request complete ( areq , err ) ;
rc = hpriv - > stop engine ( ap ) ;
if ( ! ch - > req ring )
free all bootmem ( ) ;
const struct kset uevent ops * uevent ops ,
fprintf ( stderr , " STRINGLITERAL \n " , func , s - > len ) ;
assert ( random seed ! = NUMLITERAL ) ;
if ( ! bnxt new rm ( bp ) )
return real malloc ( size ) ;
timer setup ( & ns timer , ns poll , NUMLITERAL ) ;
static int intf start seq timer ( struct ipmi smi * intf ,
if ( lps0 device handle & & ! sleep no lps0 & & pm debug messages on )
static void usb hid unrealize ( usb device * dev )
crc - > crcval = update adler32 ( crc - > crcval , buf , size ) ;
void init free area init node ( int nid , unsigned long * zones size ,
remove pg temp files in dir ( temp path , true , false ) ;
int lbs set radio control ( struct lbs private * priv )
struct hid device * hdev = container of ( dev , struct hid device , dev ) ;
walk zones in node ( m , pgdat , true , pagetypeinfo showmixedcount print ) ;
if ( ( unsigned int ) event - > cpu > = nr cpumask bits | |
xprintf ( " STRINGLITERAL \n \n " , target , cmdline ) ;
void bfin icache init ( struct cplb entry * icplb tbl )
drm framebuffer remove ( fbdev - > fb ) ;
dev = mlxsw sp rt6 - > rt - > fib6 nh - > fib nh dev ;
isec = inode security ( file inode ( file ) ) ;
ret = nouveau bo pin ( nvfb - > nvbo , ttm pl flag vram , false ) ;
status = ice add rss cfg sync ( hw , r - > hashed flds ,
if ( check fwstate ( pmlmepriv , wifi ap state ) )
vacuum rel ( cur - > vrl relid , false ) ;
if ( drv - > busy configuring )
void cpu enable pan ( void * unused )
if ( type = = mlxsw core reg access type query )
ast queue frame ( chan , & f ) ;
mode = drm mode duplicate ( connector - > dev , & td028ttec1 mode ) ;
dev info ( & link - > dev , " STRINGLITERAL " ) ;
char socket ping pong ( qio channel ( ioc ) , & error abort ) ;
int init start uml skas ( void )
hwaddr len = wanted ;
acpi ec stop ( ec , true ) ;
list del init ( & auxtrace index - > list ) ;
client - > irq = client - > init irq ;
static int schizo ino to pil ( struct pci dev * pdev , unsigned int ino )
static int fragmentation index ( unsigned int order , struct contig page info * info )
unsigned int hint = hwirq % nr irqs ;
err = bus register ( & host1x bus type ) ;
op = is global init ( current ) ? op_set : op and ;
return mp map gsi to irq ( gsi , flags ) ;
s - > timer = qemu new timer ns ( vm clock , ptimer tick , s ) ;
if ( enable geqo & & levels needed > = geqo threshold )
if ( ! acomp | | ! acomp - > ops )
int level = sifive plic irqs pending ( plic , addrid ) ;
static int ebt log tg check ( const struct xt tgchk param * par )
cancel work sync ( & ifmgd - > beacon connection loss work ) ;
kvm x86 ops - > check nested events ( vcpu ) ;
bool is lower pipe tree visible ( struct pipe ctx * pipe ctx )
nvm rq dev to tgt ( tgt dev , rqd ) ;
addr wq = alloc ordered workqueue ( " STRINGLITERAL " , wq mem reclaim ) ;
return nfs file direct read ( iocb , iov , nr segs , pos , true ) ;
if ( ubi - > thread enabled & & ! ubi dbg is bgt disabled ( ) )
dim - > dim . mode = dim cq period mode start from eqe ;
mutex unlock ( & acm minors lock ) ;
uint32_t lm4549 read ( lm4549 state * s , hwaddr offset )
return - eproto ;
sock release ( icmpv6 sk [ i ] - > sk socket ) ;
struct kvm kernel irqfd * irqfd , * tmp ;
static void tau timeout smp ( struct timer list * unused )
static struct pstore * get info ( struct exception store * store )
unsigned long long block , rest = NUMLITERAL ;
static int uclogic input configured ( struct hid device * hdev ,
refund locked memory ( context - > mm , context - > size ) ;
input = ( xml parser input ptr ) xml malloc ( sizeof ( xml parser input ) ) ;
uint32_t offset = table data - > len ;
if ( ! intel connector - > hdcp . shim )
void cpuinit calibrate delay ( void )
static int rtp probe ( const av probe data * p )
struct dasd block * block = bdev - > bd disk - > private data ;
uobj put obj read ( srq ) ;
if ( ! efx channel try lock poll ( channel ) )
np = of get child by name ( nproot , " STRINGLITERAL " ) ;
ast sip push task wait servant ( null , system create resolver and set nameservers , null ) ;
set bit ( ixgbevf removing , & adapter - > state ) ;
if ( se nacl ) {
features & = ~ ( netif f tso | netif f sg | netif f csum mask ) ;
sd - > framerate = default frame rate ;
if ( strcmp ( condname , " STRINGLITERAL " ) = = NUMLITERAL )
static int mmc test area map ( struct mmc test card * test , unsigned long sz ,
if ( flag test exceptions & & exception tests ( float ) )
return nfs stat to errno ( status ) ;
uint64_t kvmppc vrma limit ( unsigned int hash shift )
struct cfg reset pkg request = { . header = tb cfg make header ( route ) } ;
list move ( & dp - > dl recall lru , list ) ;
printk ( kern info pfx " STRINGLITERAL \n " ,
mode = drm mode duplicate ( connector - > dev , & feiyang default mode ) ;
static void lockdep trace alloc ( gfp t gfp mask , unsigned long flags )
if ( page > NUMLITERAL )
struct tep event * event )
err = alua check vpd ( sdev , h ) ;
spu unschedule ( spu , ctx , new = = null ) ;
cpu exit ( cpu single env ) ;
pg free ( iter ) ;
static int init st clksrc of register ( struct device node * np )
nd print ( " STRINGLITERAL " , get le64addr string ( p ) ) ;
node = rcu dereference raw ( root - > rnode ) ;
nullproc ( const proc list * proc )
if ( d is dir ( path . dentry ) ) {
static void rr fail path ( struct path selector * ps , struct dm path * p )
int fscache wait for deferred lookup ( struct fscache cookie * cookie )
static bool crtc state is legacy gamma ( struct drm crtc state * state )
if ( cpumask available ( prof cpu mask ) )
if ( type = = tds login pkt ) {
refcount read ( & ds - > ds count ) , ds - > ds clp ,
return crypto memneq ( iauth tag , auth tag , authsize ) ? - ebadmsg : NUMLITERAL ;
extrapolate isf ( e isf ) ;
if ( test bit ( pg mapped , & req - > wb flags ) )
cur lcode result = curle ok ;
void curl auth cleanup spnego ( struct negotiatedata * nego )
pgprot t current prot , new prot ;
if ( ! pci is pcie ( dev ) )
qdisc qstats atomic qlen dec ( q ) ;
add all tests ( test certs , ( int ) n ) ;
return set trace data ( category , NUMLITERAL , null , & prefix , null ,
u32 * rules )
pcpu mem free ( chunk ) ;
static int string mt check ( const struct xt mtchk param * par )
void cpus write lock ( void )
static void rv40 v weak loop filter ( uint8_t * src , const ptrdiff_t stride ,
visit type int32 ( v , name , & value , errp ) ;
if ( ( env - > pcxi & mask pcxi ul ) ! = NUMLITERAL ) {
return i915 gem object wait rendering ( obj , true ) ;
mite free ( mite ) ;
static void cpuinit cpuid4 cache sysfs exit ( unsigned int cpu )
bug on ( ! clockevent state detached ( dev ) ) ;
ret = clock - > flags & clock source valid for hres ;
void per cpu trap init ( void )
static ssize_t module notes read ( struct file * filp , struct kobject * kobj ,
bdi start writeback ( bdi , nr pages , false ) ;
cx23885 irq add enable ( dev , HEXLITERAL ) ;
static int smcr link send delete ( struct smc link * lnk , bool orderly )
if ( omap 32k timer init ( ) ! = NUMLITERAL )
aoecmd wreset ( t ) ;
s2io card down ( sp , NUMLITERAL ) ;
return mt76 mcu send msg ( & dev - > mt76 , mcu cmd patch finish req ,
struct btrfs workqueue * ret = kzalloc ( sizeof ( * ret ) , gfp kernel ) ;
if ( ( unsigned long ) stack = = bp + sizeof ( long ) ) {
const struct pciserial board * board ,
delta = ( new raw count - prev raw count ) & max period ;
unsigned int page shift = ilog2 ( mem - > window . page size ) ;
mutex lock ( & ps2dev - > cmd mutex ) ;
test properties ( " STRINGLITERAL " , true ) ;
if ( ctx - > codec ops - > init )
ah - > debug . level ^ = dbg info [ i ] . level ;
spin unlock irq ( & bfqd - > lock ) ;
tcp update rtt min ( sk , ca rtt us , flag ) ;
mt76u stop tx ( & dev - > mt76 ) ;
obj = drm mode object find ( dev , null , id , drm mode object blob ) ;
asmlinkage void vsmp irq disable ( void )
static struct intel shared regs * allocate shared regs ( int cpu )
static int msf probe ( const av probe data * p )
static int sec send request ( struct sec request * sec req , struct sec queue * queue )
nouveau pmops runtime ( void )
static int init ip vs ftp init ( void )
adjust poll limit ( dev , dev - > last residency ns ) ;
pr debug ( " STRINGLITERAL \n " ,
struct metalinkfile * mlfile ,
int core kernel text ( unsigned long addr )
if ( ! is exclusive pmu ( pmu ) )
drm connector list iter begin ( dev , & conn iter ) ;
st kim complete ( st gdata - > kim data ) ;
ret = nfsd init socks ( net ) ;
pr warn ( " STRINGLITERAL \n " ) ;
refcount dec ( & skb - > users ) ;
pr err ( " STRINGLITERAL \n " ) ;
static int tg set rt bandwidth ( struct task group * tg ,
device reset ( device ( sphb - > tcet ) ) ;
if ( net client init ( device , opts ? opts : " " ) < NUMLITERAL ) {
void ttm bo add to lru ( struct ttm buffer object * bo )
static int ixgbe dcbnl getnumtcs ( struct net device * netdev , int tcid , u8 * num )
static void ttm bo global release ( void )
if ( handle out packet ( s , data blocks , cycle , syt ) < NUMLITERAL ) {
for ( qidx = NUMLITERAL ; qidx < vhost user bridge max queues ; qidx + + ) {
if ( length > NUMLITERAL )
sync mm rss ( mm ) ;
static uint32_t kbd mm readb ( void * opaque , hwaddr addr )
if ( list empty ( & req - > r linger osd item ) )
warn on ( ! blk rq is passthrough ( rq ) ) ;
return restore fbdev mode atomic ( fb helper , true ) ;
bind list - > port = snum ;
vcpu sys reg ( vcpu , pmovsset el0 ) | = bit ( i ) ;
private struct config * newconfig ( void ) {
return chan - > device - > owner ;
enable slot ( slot , true ) ;
pr err ( " STRINGLITERAL \n " , ret ) ;
phy stop ( priv - > phydev ) ;
if ( get dma ops ( & vmd - > dev - > dev ) )
void kprobe flush task ( struct task struct * tk )
if ( ! pmd none ( * pmd ) & & ! pmd huge ( * pmd ) )
while ( ( w = dgap getword ( in ) ) ) {
module put ( expr - > ops - > type - > owner ) ;
return nlk - > portid ! = x - > portid | |
if ( wal sender timeout > NUMLITERAL & & last processing > = timeout )
res - > hw destroy = vmw hw shader destroy ;
void klp free patch start ( struct klp patch * patch )
up write ( & sit i - > sentry lock ) ;
error = xfs vn setattr size ( dentry , iattr ) ;
static int gen8 engine reset prepare ( struct intel engine cs * engine )
efi . reset system = xen efi reset system ;
buckets = flex array alloc ( sizeof ( struct hlist head ) ,
if ( count > int max ) {
int omap1 set sossi rate ( struct clk * clk , unsigned long rate )
assert ( qemu is aligned ( size , virt flash sector size ) ) ;
ptl = ptlock ptr ( page ) ;
p dot11d info - > dot11d enabled = false ;
u16 slid = ib lid cpu16 ( in wc - > slid ) ;
for ( i = NUMLITERAL ; i < register usb busy count ; i + + ) {
uint32 flagbit = NUMLITERAL < < ( uint32 ) type ;
warn once ( refcount read ( & map - > refcnt ) ! = NUMLITERAL ,
return tep read number ( pevent , data + * offset , * size ) ;
int tracing alloc snapshot instance ( struct trace array * tr )
while ( cur ) {
( * function ) ( ( invalidation message ) & entry data p - > user data ) ;
if ( cpu has ( c , x86 feature pln ) & & int pln enable )
sprintf ( errortext , " STRINGLITERAL \n " , type ) ;
( void ) p qcancel ( cancel , errbuf , sizeof ( errbuf ) ) ;
static int maybe unused ucb1400 ts resume ( struct device * dev )
if ( refcount dec and test ( & asoc - > base . refcnt ) )
while ( ( rq = blk peek request ( q ) ) ! = null ) {
dma addr t pa ;
remove proc entry ( t - > tsk - > comm , pg proc dir ) ;
struct mwifiex bssdescriptor * bss desc )
return ff htmlmarkup to ass ( avctx , dst , in ) ;
incoming request = operation - > response . gbuf . transfer buffer = = null ;
if ( is hpet capable ( ) & & hpet virt address ) {
qatomic or ( p , mask to set ) ;
if ( intern - > pos = = ht invalid idx ) {
static int amd64 set scrub rate ( struct mem ctl info * mci , u32 bandwidth )
start = nla nest start noflag ( skb , ovs action attr clone ) ;
simple lru shmem size ( int nslots , int nlsns )
static void let transaction grow ( struct super block * sb , unsigned int trans id )
if ( seg same internal ( b1 , b2 ) )
if ( ! usbhs pipe type is ( pos , type ) )
if ( ! is blank ch ( * data ) )
prune dcache ( nr , null , NUMLITERAL ) ;
u32 remove hw knode ( tp , n ) ;
return dsa do sign int ( dgst , dlen , dsa ) ;
bool preload = ! ! ( gfp & gfp wait ) ;
fib free table ( local table ) ;
static int cq get mtt addr ( struct mlx4 cq context * cqc )
rec = g malloc0 ( sizeof ( child process record ) ) ;
if ( num test devs + NUMLITERAL = = int max ) {
cache1 elog ( log , " STRINGLITERAL " ) ;
rmsg . size = sizeof ( tempbuf ) ;
ad . a . u . ipc id = sma - > id ;
u32 tmp = i915 read ( port dft2 g4x ) ;
if ( strcmp ( lsm - > name , chosen major lsm ) ! = NUMLITERAL )
get e820 md5 ( e820 table firmware , buf ) ;
pblk err ( pblk , " STRINGLITERAL \n " , line - > id ) ;
filp - > f op = & simple dir operations ;
intel free flip work ( work ) ;
stasis forward cancel ( topic forwarder ) ;
raw spin unlock irqrestore ( & vga lock , flags ) ;
space offset = tvb find guint8 ( tvb , token 2 start , linelen , ' ' ) ;
ateoxact buffers ( false ) ;
mem cleanup ( input , sizeof ( html parser input ) ) ;
static void kobil read int callback ( struct urb * purb )
typentry = lookup type cache ( type id , typecache domain constr info ) ;
error = acpi pm pre suspend ( ) ;
kvm inject gp ( vcpu , NUMLITERAL ) ;
perf swevent event ( event , nr , nmi , data , regs ) ;
if ( map & & cs - > prioidx < map - > priomap len )
msleep ( NUMLITERAL ) ;
char * path , * dir = null ;
warn on ( inode - > i blocks ) ;
if ( cur cpu spec - > cpu features & cpu ftr altivec )
g free ( ioh ) ;
memcpy ( pos , & vht cap , sizeof ( vht cap ) ) ;
brcmf link down ( ifp - > vif , wlan reason unspecified ) ;
const unsigned sign = ffsign ( coeff ) ;
static int cavium init context ( struct arm smmu domain * smmu domain )
fprintf ( stderr , " STRINGLITERAL " , examples ) ;
static void hpdmc write ( void * opaque , hwaddr addr , uint64_t value ,
u16 * cp ;
lookup chain cache ( chain key , hlock - > class ) ) {
return access ok ( log base + a ,
int cpu , first cpu , error = NUMLITERAL ;
kernel execve ( init filename , argv init , envp init ) ;
struct task struct * ctx , unsigned long flags ,
i8042 interrupt ( NUMLITERAL , null ) ;
static unsigned int psp get capability ( struct psp device * psp )
error ( exit failure , errno , ( " STRINGLITERAL " ) ) ;
dmar free hwirq ( iommu - > irq ) ;
struct msdos partition * p ;
if ( reg request - > wiphy idx ! = wiphy idx invalid )
visit type onoffauto ( v , name , & smm , errp ) ;
acldefault ( acl id ownerid )
return nbd write ( ioc , buf , sizeof ( buf ) , null ) ;
zcomp strm free ( zstrm ) ;
int radeon bo list validate ( struct list head * head , int ring )
char * dup = pg strdup ( string ) ;
inflight = bbr quantization budget ( sk , inflight ) ;
static ssize_t prochot override duty cycle show ( struct device * dev ,
struct flow table * table = ovsl dereference ( dp - > table ) ;
for ( n = NUMLITERAL ; n < virtio ccw queue max ; n + + ) {
struct tomoyo gc * entry = kzalloc ( sizeof ( * entry ) , gfp atomic ) ;
static int fib6 nh remove exception ( const struct fib6 nh * nh , int plen ,
static inline void bmips nmi handler setup ( void )
size_t memsize = sizeof ( void * ) * entries + sizeof ( struct alien cache ) ;
static void bcm1480 smp finish ( void )
tuple desc srcdesc = srcslot - > tts tupledescriptor ;
f = g malloc0 ( sizeof ( qemu file ) ) ;
return scnprintf ( buf , page size , " STRINGLITERAL \n " , prng errorflag ) ;
jump label sort entries ( struct jump entry * start , struct jump entry * stop )
static void powermate config complete ( struct urb * urb )
refcount set ( & undo list - > refcnt , NUMLITERAL ) ;
int arch add memory ( u64 start , u64 size , bool for device )
void arc init irq ( void )
au1000 set ac97 recv slots ( au1000 t * au1000 , long recv slots )
if ( ! die nmi called & & ! is icru & & ! is uefi )
device for each child ( & indio dev - > dev , null ,
if ( ! has target ( ) ) {
for ( lf = NUMLITERAL ; lf < bufsize - NUMLITERAL ; lf + + )
struct ext4 crypt info * parent ci , * child ci ;
blocker = g new0 ( bdrv op blocker , NUMLITERAL ) ;
pid = run helper ( change pre exec , & pe data , argv ) ;
ph - > data0 = oph - > data [ NUMLITERAL ] ;
sk clear bit ( sockwq async nospace , sk ) ;
if ( ! insn complete ( insn ) )
vi os papr device * vty lookup ( s papr environment * spapr , target ulong reg )
static char options [ NUMLITERAL ] initdata ;
if ( eb - > lut mask > = NUMLITERAL )
void ipoib set dev features ( struct ipoib dev priv * priv , struct ib device * hca )
static ssize_t fw class show ( struct esre entry * entry , char * buf )
ret = serio - > drv - > interrupt ( serio , data , dfl ) ;
if ( x log needs flush ( commit lsn ) & & buffer is permanent ( buffer ) )
ubifs err ( c , " STRINGLITERAL " ,
warn on ( res = = NUMLITERAL ) ;
pr err ( " STRINGLITERAL \n " ) ;
if ( total phys segments > blk rq get max segments ( req ) )
threshold cpu callback = amd 64 threshold cpu callback ;
const gchar * intro text = (
static void destroy async ( struct usb dev state * ps , struct list head * list )
. gfp mask = ( current gfp context ( gfp mask ) & gfp reclaim mask ) |
regmap read ( regmap , HEXLITERAL , & val ) ;
return power supply get drvdata ( psy ) ;
pgd populate ( pgd , pa symbol ( kasan zero pud ) , pud type table ) ;
static void write and save comm ( struct tep format field * field ,
return icoll domain ? NUMLITERAL : - enodev ;
if ( substream - > number > = max ports )
ah - > slottime = ath9k slot time 9 ;
if ( likely ( chip - > chip select num < max ctrl cs ) ) {
int n = fdatasync ( fd ) ;
dquot free inode ( inode ) ;
if ( se - > weight > iter - > weight )
if ( d is symlink ( dentry ) )
result = transform expr ( pstate , result ) ;
static int s3c2443 add sub ( unsigned int base ,
lov = & obd - > u . lov ;
bool error is read = false ;
if ( local err ) {
g slice free ( mate max size , ( mate max size * ) gog ) ;
iwl debug eeprom ( priv ,
static void dcn20 program pipe (
av log ( ctx , av log error , " STRINGLITERAL " ) ;
tlb switch to guest ( kvm , & cxt ) ;
static int ramoops pstore erase ( enum pstore type id type , u64 id , int count ,
foreach ( l , pstate - > p lockedrels )
omap drm suspend all displays ( drm dev ) ;
static void slow bar writeb ( void * opaque , hwaddr addr , uint32_t val )
kmem cache free ( kmem cache , s ) ;
static inline int me4600 ai io stream read get value ( me4600 ai subdevice t *
sk store attr info free ( context - > search attributes ) ;
hisi sas write32 ( hisi hba , sas ecc intr msk , HEXLITERAL ) ;
void dahdi ec disable ( struct dahdi pvt * p )
deve = se nacl - > device list [ se cmd - > orig fe lun ] ;
int nullfd = open not cancel ( ( const char * ) path devnull , mode ) ;
return ata pci init one ( pdev , ppi , & oldpiix sht , null ) ;
n = req - > alignment & ( ubi - > min io size - NUMLITERAL ) ;
gfh = g malloc0 ( sizeof ( guest file handle ) ) ;
sk - > sk state = tcp established ;
static unsigned int nft nat do chain ( void * priv ,
entry = & palette - > pool [ palette - > size ] ;
static int get online core in package ( struct platform data * pdata )
res = flock ( lo fi fd ( req , fi ) , op ) ;
intel context unpin ( ce ) ;
swap max = read once ( memcg - > swap . max ) ;
if ( of device is compatible ( np , " STRINGLITERAL " ) )
if ( tpm emulator ctrlcmd ( tpm emu , cmd reset tpmestablished ,
static bool halbtc under ips ( struct btc coexist * btcoexist )
vm bug on ( new . frozen ) ;
if ( ! skb )
dev - > coverage class = max t ( s16 , coverage class , NUMLITERAL ) ;
slots = rcu dereference ( kvm - > memslots ) ;
struct tep record record ;
if ( type = = type 0 | | type = = type 1 )
ast register cleanup ( sounds cleanup ) ;
static void bxt display core uninit ( struct drm i915 private * dev priv )
cifs mid q entry release ( mid entry ) ;
if ( sc - > vif ! = vif ) {
ret = trace test buffer ( & tr - > trace buffer , & count ) ;
err = logfs write inode ( inode , null , NUMLITERAL ) ;
mutex lock ( & ubd lock ) ;
wl trace ( " STRINGLITERAL \n " , wlc hw - > unit , clk ) ;
msecs = real mode timeout ;
raii var ( struct ast sockaddr * , addrs , null , ast free ) ;
printk ( kern err " STRINGLITERAL " ) ;
kfree ( page buf ) ;
s = ( sh timer state * ) g malloc0 ( sizeof ( sh timer state ) ) ;
static void denali exec in8 ( struct denali controller * denali , u32 type ,
static void ivb load lut 10 max ( struct intel crtc * crtc )
hash = tuplehashtablehash internal ( hashtable - > hashtab , null ) ;
if ( unlikely ( gfs2 withdrawn ( sdp ) ) )
security skb extlbl sid ( skb , secinitsid unlabeled , & sksec - > peer sid ) ;
asmlinkage void init kasan early init ( void )
get entity debug ( void * ctx , const char * name )
struct brcmf cfg80211 info * cfg = iscan to cfg ( iscan ) ;
ringbuf - > space = intel ring space ( ringbuf ) ;
if ( ret < NUMLITERAL | | num < min | | num > max )
if ( mem fail ( ! trace instance dir , " STRINGLITERAL \n " ) )
pv ops . time . steal clock = xen steal clock ;
tegra fbdev free ( fbdev ) ;
warn on once ( wait & & irqs disabled ( ) & & ! oops in progress ) ;
if ( applid < NUMLITERAL | | applid - NUMLITERAL > = capi maxappl )
read nic dword ( dev , rcr , & reg ) ;
sdu = g malloc0 ( sizeof ( struct rlc sdu ) ) ;
struct afs read * req = call - > read request ;
static int statistic mt check ( const struct xt mtchk param * par )
if ( ret < NUMLITERAL )
return tab [ msgindex ] . doit ;
nd device unlock ( dev ) ;
struct in device * loopback idev = in dev get ( loopback dev ) ;
static void do syscall 32 irqs on ( struct pt regs * regs )
if ( ! is err ( ltq port - > clk ) )
refcount inc ( & bd - > ref count ) ;
hubport = opts - > u . hubport . data ;
ha = list first entry ( & gdth instances , gdth ha str , list ) ;
e = kmalloc ( sizeof ( * e ) + header length , gfp atomic ) ;
if ( amdgpu sriov vf ( adev ) )
if ( sc - > lumpy reclaim mode )
if ( serial = = null )
if ( error )
if ( ! is err ( dent ) )
if ( bridge - > lm callback [ i ] ) {
static void mips qemu write ( void * opaque , hwaddr addr ,
const guint num = tvb get letohl ( tvb , offset ) ;
ao2 global obj release ( parking provider ) ;
static le32 ext4 mmp csum ( struct super block * sb , struct mmp struct * mmp )
return onenand write oob nolock ( mtd , ofs , & ops ) ;
min size = ffmax ( min size + min size / NUMLITERAL + NUMLITERAL , min size ) ;
bridge frame free ( frame ) ;
if ( qp - > flags & ib qp create source qpn )
refcount set ( & rc - > ref count , NUMLITERAL ) ;
const be32 * my index ;
ide unregister ( hwif - > index ) ;
bitmap clear ( iommu gart bitmap , offset , size ) ;
if ( evtstrm enable )
int kprobe post handler ( struct pt regs * regs )
void ast module reload ( const char * name )
if ( ! pcapng write if descr block ( wdh , idb , err ) ) {
if ( ! soc is omap44xx ( ) )
params - > dsbs growing = wth - > dsbs ;
static void arcmsr enable outbound ints ( struct adapter control block * acb ,
if ( rc ! = opal success & & rc ! = opal unsupported )
if ( addr < wm8766 reg count )
void * rvu cgx pdata ( u8 cgx id , struct rvu * rvu )
return nid list [ curve id NUMLITERAL ] . nid ;
if ( notes - > src = = null )
mlxsw sp fdb notify work schedule ( mlxsw sp , false ) ;
set sta flags ( sta , wlan sta ps sta ) ;
static void release maps ( struct bpf verifier env * env )
free ( list event ) ;
ssp - > smk in = skp ;
static int mpbios polarity ( int idx )
static uint64_t tc6393xb readb ( void * opaque , hwaddr addr ,
intel ring reset ( ring , ring - > emit ) ;
if ( vcpu - > cr4 & x86 cr4 de ) {
efw - > playback substreams + + ;
if ( nb sectors > bdrv request max sectors ) {
static int selinux inode follow link ( struct dentry * dentry )
unsigned char * options = data ;
if ( sort need collapse | | threaded )
assert ( len > = NUMLITERAL ) ;
d = muldiv64 ( qemu get clock ns ( vm clock ) - s - > load time ,
visit type str ( v , name , & value , & local err ) ;
memblock free ( pa symbol ( swapper pg dir ) + page size ,
phba - > ep array = kzalloc ( sizeof ( struct iscsi endpoint * ) *
val = ch341 get divisor ( priv ) ;
pf buf = bio data ( pf req - > bio ) ;
return may access ( parent , ex , childcg - > behavior ) ;
if ( clk - > parent )
power supply changed ( di - > fg psy ) ;
if ( ! sk | | ! sk fullsock ( sk ) )
if ( rdata - > rp state = = rport st delete ) {
rdma nl unregister ( rdma nl iwcm ) ;
cfs hash hlist for each ( struct cfs hash * hs , unsigned hindex ,
void iscsit handle nopin timeout ( unsigned long data )
if ( lock - > slock ! = lock value )
ctx = openssl malloc ( sizeof ( * ctx ) ) ;
vmci handle arr get entry ( const struct vmci handle arr * array , u32 index )
if ( cx88 detect nicam ( core ) = = NUMLITERAL ) {
release mem region ( tc - > iomem - > start , atmel tc iomem size ) ;
ares strncasecmp ( const char * a , const char * b , size_t n )
i915 gem object flush frontbuffer ( obj , origin cpu ) ;
void free txq ( struct adapter * adap , struct sge txq * q )
addr = align vdso addr ( addr ) ;
dom set old ns ( doc , nodep - > ns def ) ;
int rc = NUMLITERAL , res ;
uid = mlx5 ib devx create ( dev , false ) ;
ret = iwl trans send cmd pdu ( trans ( priv ) ,
cc - > contended = true ;
if ( tty port initialized ( port ) ) {
unsigned int blocknr ,
new = memblock alloc ( sizeof ( * new ) , smp cache bytes ) ;
return local - > ops - > set frag threshold (
int status = nand status fail , state = this - > state ;
return call fib4 notifiers ( net , event type , & info . info ) ;
ssl cipher * ssl23 get cipher by char ( const unsigned char * p )
percpu counter dec ( & nr inodes unused ) ;
dev dbg ( pcdev - > soc host . icd - > parent ,
wake up ( & iscan - > waitq ) ;
if ( pnfs layoutgets blocked ( lo , NUMLITERAL ) ) {
return pci device iommu address space ( dev ) ;
static int alps passthrough mode v2 ( struct psmouse * psmouse , bool enable )
b43 leds unregister ( wl ) ;
if ( ! pud none ( * pud ) )
serial8250 handle port ( up ) ;
static rom * find rom ( hwaddr addr , size_t size )
wait iff congested ( preferred zone , blk rw async , hz / NUMLITERAL ) ;
rfkill destroy ( bluetooth rfkill ) ;
assert ( bp - > b transp = = tp ) ;
spi prepare plan ( src , & plan , NUMLITERAL ) ;
umount tree ( real mount ( mnt ) , NUMLITERAL ) ;
ctx = alloc nfs open dir context ( inode , cred ) ;
if ( lmp ssp capable ( hdev ) )
warn once ( new > val , " STRINGLITERAL \n " ) ;
mlx5 wq destroy ( & cq - > wq ctrl ) ;
i915 gem clflush object ( obj , obj - > pin display ) ;
st - > dma flags = efx tx buf map single ;
ram addr t vga ram offset , int vga ram size )
qemu coroutine enter ( coroutine , & coroutine ) ;
u64 event id = p event - > attr . config ;
module put ( nft base chain ( chain ) - > type - > owner ) ;
free pages ( page , compound order ( page ) ) ;
if ( status & ath9k int mci )
if ( destroy unmap eq ( dev , & eq - > core ) )
static int devinit serial pnp guess board ( struct pnp dev * dev )
ret = memblock alloc ( size , smp cache bytes ) ;
atomic set ( & ps - > reinject , reinject ) ;
static unsigned int ip6table nat do chain ( void * priv ,
io remove watch poll ( s - > fd in tag ) ;
g free ( ov ) ;
zend ulong put cnt = NUMLITERAL , rem cnt ;
if ( tipc own addr )
dquot initialize ( dir ) ;
spin unlock irq ( & qdio - > req q lock ) ;
q vector = & adapter - > q vectors [ q idx ] ;
zend api zend bool zend is valid class name ( zend string * name ) {
return err code ;
virtio device start ioeventfd ( vdev ) ;
if ( ! f - > subclass . format ) {
ret = restore fbdev mode force ( helper ) ;
int rtw enqueue recvframe ( struct recv frame * precvframe , struct queue * queue )
exynos drm unregister dma ( scaler - > drm dev , scaler - > dev ) ;
vsc - > unrealize ( dev ) ;
list add tail ( & msg - > list , & msg queue - > head ) ;
reg fld mod ( dss , dss control , b , pos , pos ) ;
vfree ( memdump buf ) ;
be32 * tmp ;
static void ath10k fw stats pdevs free ( struct list head * head )
struct dentry * real ;
struct vmbus channel * chan
return drm encoder find ( connector - > dev , null , enc id ) ;
if ( data - > new proto ) {
return ! ste - > refcount ;
memset ( optptr , NUMLITERAL , optlen ) ;
void ext4 da release space ( struct inode * inode , int to free )
uint32_t omap badwidth read16 ( void * opaque , hwaddr addr )
kthread stop ( ir - > raw - > thread ) ;
ret = intel engine idle ( engine , true ) ;
rcu init pointer ( proxy - > label , ( struct aa label * ) proxy poison ) ;
d lustre invalidate ( dentry , NUMLITERAL ) ;
cancel delayed work sync ( & dbs info - > work ) ;
kfree ( cmd blk p ) ;
ret = request irq ( port - > irq , altera uart interrupt , NUMLITERAL ,
raw nsecs = ( u64 ) tk - > raw interval < < shift ;
if ( ! qemu cpu is self ( env ) ) {
g vsnprintf ( error msg buf , sizeof error msg buf , format , args ) ;
static int bfin spi transfer ( struct spi device * spi , struct spi message * msg )
return - enoent ;
return pread64 ( fd , buf , nbytes , offset ) ;
if ( acpi gpe dispatch type ( gpe event info - > flags ) ! =
ch = sunrpc cache lookup rcu ( cd , & item - > h , hash ) ;
return generic permission ( inode , mask , flags ) ;
addr = alloc pages exact nid ( nid , size , gfp kernel | gfp nowarn ) ;
if ( port - > ops - > dtr rts )
void drop inmem pages all ( struct f2fs sb info * sbi , bool gc failure )
static ssize_t in illuminance0 integration time store ( struct device * dev ,
if ( ! smu feature is supported ( smu , smu feature fan control bit ) )
loff t * ppos , int type , int flags )
ast debug ( NUMLITERAL , " STRINGLITERAL \n " , condition ) ;
key ref = lookup user key ( id , NUMLITERAL , key need setsec ) ;
struct dc state * old context , struct dc stream state * stream )
wmem map insert ( mmdb ipv6 map , chunkify v6 addr ( addr ) , result ) ;
case sensor_ov7630 : {
ret = intel logical ring begin ( req , NUMLITERAL ) ;
if ( ! queue is mq ( q ) | | ! elv support iosched ( q ) )
gistfindnext ( index scan desc scan , offset number n )
cfs hash find or add ( struct cfs hash * hs , const void * key ,
snd soc update bits ( codec , sg sl1 , pmmp | mgain0 , pmmp | mgain0 ) ;
watermark = zone - > watermark [ alloc flags & alloc wmark mask ] ;
* flags | = sb nodiratime ;
if ( ! tp - > retransmit skb hint | |
u32 cr cdw get crc32 ( u8 * pby data , unsigned int cb byte )
static int ptrace signal ( int signr , kernel siginfo t * info )
static int trie flush leaf ( struct tnode * l )
err = nla get labels ( newdst , max labels ,
void init s3c2410 init irq ( void )
if ( group fn ( j , cpu map , null ) ! = group )
u32 start , u32 end , gfp t gfp )
unsigned long kvm nr mmu pages )
u8 * tag = tag buf ;
int fd , int is connected , const char * mc )
g free ( qobject to qfloat ( obj ) ) ;
iommu range free ( iommu , dvma , npages ) ;
xen hvm resume shared info ( ) ;
acpi wakeup address = virt to phys ( ( void * ) acpi realmode ) ;
ret = qemu savevm state begin ( f , NUMLITERAL , NUMLITERAL ) ;
ret = btrfs del orphan item ( trans , root , btrfs ino ( inode ) ) ;
static bool flatview access valid ( flat view * fv , hwaddr addr , hwaddr len ,
static vm fault t ocxlflash mmap fault ( struct vm fault * vmf )
u32 mesh plink deactivate ( struct sta info * sta )
pci cfg access unlock ( pdev ) ;
ioasid free ( domain - > default pasid ) ;
static int init fpu ( struct task struct * tsk )
g free ( req ) ;
write once ( dev - > fill delay , NUMLITERAL ) ;
truncate commit ts ( transaction id oldest xact , bool do wal )
if ( ! cpumask subset ( cpu possible mask , cpumask ) ) {
ring buffer read prepare ( struct ring buffer * buffer , int cpu , gfp t flags )
} while ( ret > NUMLITERAL & & iocb - > ki left > NUMLITERAL & &
if ( ! ret ) {
mutex lock ( & port - > port . mutex ) ;
ksocknal data ready ( struct sock * sk )
int ret = NUMLITERAL ;
clk mgr - > clks . pwr state = dcn pwr state unknown ;
if ( page & & ( highmem | | ! page high mem ( page ) ) ) {
addr = ftrace find rec direct ( ip ) ;
static u32 blackfin gettimeoffset ( void )
ret = gfs2 qa get ( ip ) ;
nla = nla nest start noflag ( skb , ovs key attr tunnel ) ;
if ( unlikely ( ( * pkt ) = = null ) )
buffer desc * buf hdr = get buffer descriptor ( i ) ;
msleep ( wait time ) ;
int pitch = state - > color plane [ plane ] . stride ;
xpcs32 iowrite ( pdata , pdata - > xpcs window sel reg , index ) ;
warn on ( ! in interrupt ( ) & & ! irqs disabled ( ) ) ;
static void audio print settings ( struct audsettings * as )
if ( int events & ( fec enet rxf | fec enet txf ) ) {
static int vmci check host caps ( struct pci dev * pdev )
uuid export get ( struct cfs hash * hs , struct hlist node * hnode )
released + + ;
iser free ib conn res ( iser conn , destroy ) ;
block complete data * blkdata = g malloc0 ( sizeof ( block complete data ) ) ;
void hfsplus cat set perms ( struct inode * inode , struct hfsplus perm * perms )
inb ( io port + pas16 offset [ reset parity interrupt reg ] ) ;
static void cnl combo phys uninit ( struct drm i915 private * dev priv )
ret = - eacces ;
static uint64_t axidma read ( void * opaque , hwaddr addr ,
input unregister device ( atkbd - > dev ) ;
* bss hotplug slot = & slot - > hotplug slot ;
data = kzalloc ( count + NUMLITERAL , gfp kernel ) ;
return mlx5 cqwq get size ( wq ) < < wq - > fbc . log stride ;
flexcop usb process frame ( fc usb ,
machine check print event info ( & evt , user mode ( regs ) ) ;
cursor - > resid = min ( length , data - > bio length ) ;
int is empty ;
for ( i = mutex id ; i < acpi num mutex ; i + + ) {
qemu mod timer ( xen poll , qemu get clock ms ( rt clock ) + NUMLITERAL ) ;
if ( * pdm odm - > pb power saving )
if ( ! pp funcs | | ! pp funcs - > get clock by type with latency )
wait event timeout ( cfg - > limbo waitq ,
if ( drm edid is valid ( ( struct edid * ) buf ) )
if ( ! pevtpriv - > evt allocated buf )
new = dl open ( dl loaded , file ? : " " , mode ) ;
disk = bdev get gendisk ( bdev , & partno ) ;
pr debug ( " STRINGLITERAL " , dev - > name ) ;
const u16 wm [ NUMLITERAL ] )
exynos drm unregister dma ( mixer ctx - > drm dev , mixer ctx - > dev ) ;
unsigned long amdgpu ras query error count ( struct amdgpu device * adev ,
raw parsetree list = raw parser ( query string ) ;
new = kvmalloc node ( sizeof ( * new ) + size , gfp kernel , nid ) ;
centaur get free region ( unsigned long base , unsigned long size , int replace reg )
zend api void zend llist add element ( zend llist * l , const void * element )
rblist remove node ( & slist - > rblist , & snode - > rb node ) ;
struct gssx name attr dummy = { . attr = { . len = NUMLITERAL } } ;
sub = tipc subscrp create ( srv , s , conid , swap ) ;
const struct genl family * family ;
signal safe free ( dtv [ NUMLITERAL + cnt ] . pointer . val ) ;
rec = kzalloc ( sizeof ( * rec ) , gfp kernel ) ;
sli4 hba - > sli4 eq clr intr ( fpeq ) ;
context - > target uid = task uid ( t ) ;
static int switch cmp ( struct work atoms * l , struct work atoms * r )
txt = ast alloca ( txtsize ) ;
ast register cleanup ( acl stasis cleanup ) ;
void dispc mgr disable sync ( enum omap channel channel )
struct net * net = dest - > net ;
if ( watchdog active ( wddev ) ) {
blk mq request bypass insert ( rq , true ) ;
int sysctl ms jiffies ( struct ctl table * table , int user * name , int nlen ,
if ( warn on once ( num < NUMLITERAL | | num > = nr syscalls ) )
* rflags = kvm get rflags ( vcpu ) ;
par = info - > par ;
kvfree ( q - > hh flows ) ;
static void hdmi mode set ( void * ctx , struct drm display mode * mode )
if ( ! list empty ( & bond - > slave list ) )
drm dbg core ( dev , " STRINGLITERAL \n " , pipe ) ;
static void cnic chk pkt rings ( struct cnic local * cp )
void init of core init ( void )
char * prom firstprop ( phandle node , char * buffer )
nor - > params . set 4byte addr mode = spi nor set 4byte addr mode ;
bios = bioset create ( NUMLITERAL , NUMLITERAL ) ;
dma addr t pte dma = smmu pde to dma ( smmu , pd [ pde ] ) ;
static unsigned long rcu bh torture completed ( void )
struct p80211msg lnxreq autojoin msg join ;
static int init = NUMLITERAL ;
struct snd dmaengine dai dma data * dma ;
nvme poll irqdisable ( nvmeq ) ;
mutex lock ( & ide floppy ioctl mutex ) ;
void configtable init ( void ) {
config | = bit ( NUMLITERAL ) ;
offset = f confirmed private transfer error ( tvb , pinfo , tree , offset ) ;
intel panel set backlight acpi ( intel connector , bclp , NUMLITERAL ) ;
switch ( uniphier pin get drv type ( desc - > drv data ) ) {
u16 hw status bits )
if ( ! wfi drv ) {
security add hooks ( tomoyo hooks , array size ( tomoyo hooks ) , " STRINGLITERAL " ) ;
if ( ! ch - > locked & & ! ch - > serving ) {
bug on ( reg > = array size ( wm8990 reg ) ) ;
static irqreturn t pasintr ( int irq , void * dev id )
g free ( vec ) ;
mutex lock ( & chip - > mutex ) ;
struct ath5k statistics * stats = & ah - > stats ;
if ( ! cookies | | ! cookies - > cookies )
stack sg . ds addr = map ;
srcu read unlock ( & wakeup srcu , srcuidx ) ;
return call int hook ( inode getattr , NUMLITERAL , path ) ;
pci setup phb io ( phb , pci io base = = NUMLITERAL ) ;
if ( ! test bit ( hcd flag hw accessible , & hcd - > flags ) )
ret = x86 pmu . schedule events ( cpuc , n , assign ) ;
opp np = dev pm opp of get opp desc node ( dev ) ;
gb buffer free ( hd , message - > buffer ) ;
return * ( const uint32_t * ) p1 - * ( const uint32_t * ) p2 ;
decon handle vblank ( ctx ) ;
static ssize_t php zip ops read ( php stream * stream , char * buf , size_t count )
void do trace rcu torture read ( const char * rcutorturename , struct rcu head * rhp ,
static ssize_t beep mask show ( struct device * dev ,
dev = k8 northbridges [ NUMLITERAL ] ;
void ast udptl get us ( const struct ast udptl * udptl , struct sockaddr in * us )
if ( need watchdog p & & new qdisc ! = & noqueue qdisc )
phy start ( priv - > phydev ) ;
dev info ( & pci - > dev , " STRINGLITERAL \n " , func ) ;
g assert ( qobject to ( q string , qobject ( qstring ) ) = = qstring ) ;
down ( & cpuset sem ) ;
warn once ( refcount read ( & threads - > refcnt ) ! = NUMLITERAL ,
range - > mem emergency max = ( pptable - > tmem limit + ctf offset mem ) *
d set d op ( dentry , & xattr lookup poison ops ) ;
fscache relinquish cookie ( netfs - > primary index , null , false ) ;
buf = read buffer extended ( rel , main forknum , blkno , rbm zero , null ) ;
int qib verbs send ( struct rvt qp * qp , struct ib header * hdr ,
acpi status retval = ae not found ;
wmem free ( null , wmem chunk to block ( chunk ) ) ;
struct sctp chunk * ack ;
ret = readn ( fd , buf , len ) ;
info ( " STRINGLITERAL \n " , p slot - > name ) ;
void monitor init hmp ( chardev * chr , bool use readline , error * * errp )
return ctx - > key size ;
if ( ! data | | ! data - > tmu read )
if ( ! test bit ( hci le enabled , & hdev - > dev flags ) )
static int sh cpufreq verify ( struct cpufreq policy data * policy )
static int mkdir ( struct inode * dir , struct dentry * dentry , umode t mode )
if ( unlikely ( time status & sta freqhold ) )
static ssize_t in5 min show ( struct device * dev , struct device attribute * attr ,
old dissector add ( " STRINGLITERAL " , ip proto icmpv6 , dissect icmpv6 ) ;
mutex lock ( & list mutex ) ;
void srp user pwd free ( srp user pwd * user pwd )
dispc mgr enable ( channel , false ) ;
if ( cpu is omap34xx ( ) | | cpu is omap44xx ( ) ) {
qatomic store release ( & buffer - > used , NUMLITERAL ) ;
if ( is vmalloc addr ( pg vec [ i ] . buffer ) )
dev - > mphy . vif mask & = ~ bit ( mvif - > idx ) ;
ast mutex unlock ( & iaxsl [ callno ] ) ;
return ffurl closep ( & c - > h ) ;
if ( hw - > conf . ht . enabled ) {
static int xen allocate irq dynamic ( void )
static void filter0 ( suint32 * dst , const int32_t * src , int32_t coeff , ptrdiff_t len )
static void sb1250 smp finish ( void )
for each tunnel rcu ( tunnel4 handlers , handler )
skb put u8 ( skb , digital sel res nfc dep ) ;
static void maintenance mode update ( struct ipmi smi * intf )
unsigned int irq = irq create mapping ( null , ist ) ;
strlcpy ( of ids [ NUMLITERAL ] . compatible , soc info . compatible , len ) ;
const char * pptp msg name ( u int16 t msg )
static inline int match bss wpa2 ( struct lbs 802 11 security * secinfo ,
kvm put kvm ( vcpu - > kvm ) ;
if ( ret & notify stop mask )
se tree create non persistent ( int type , const char * name )
dev - > dev attrib . block size = block size ;
unsigned long index = vma - > vm pgoff ;
static int flac probe ( const av probe data * p )
static enum fault type get fault type ( struct pt regs * regs )
return refcount inc not zero ( & policy - > refcnt ) ;
uint8_t buffer [ max len + NUMLITERAL ] ;
static void perf event enable ( struct perf event * event )
if ( daifmt )
dwc3 remove requests ( dwc , dep ) ;
osq lock init ( & sem - > osq ) ;
clocksource of init ( ) ;
def elem action defaction , int location )
kfree ( intel sdvo connector ) ;
unsigned int children , struct nfp qdisc * * qdisc )
struct cpuidle driver * drv = cpuidle get cpu driver ( dev ) ;
printk ( " STRINGLITERAL \n " , ahd name ( ahd ) , fifo ) ;
netdev err ( ndev , " STRINGLITERAL \n " ) ;
rt2x00queue start queue ( rt2x00dev - > rx ) ;
static void intcp flash set vpp ( struct platform device * pdev , int on )
if ( ! nm i - > free nid bitmap [ i ] )
if ( new mtu > br min mtu ( br ) )
net close ( dev ) ;
rblock = ( void * ) get zeroed page ( gfp kernel ) ;
tty wakeup ( state - > info - > port . tty ) ;
return ( ( offset + latch / NUMLITERAL ) / latch ) * NUMLITERAL ;
if ( is err or null ( comp ) )
tg3 interrupt ( tp - > pdev - > irq , dev ) ;
struct nfs fh * fh , const struct nfs server * server )
if ( value = = pg int64 min )
int fuse inode eq ( struct inode * inode , void * nodeidp )
if ( sdvo - > port = = port b ) {
u8 * id = nor - > bouncebuf ;
strlcpy ( buf , ssl passphrase , size ) ;
nfs4 schedule lease recovery ( clp ) ;
struct page * d = ttm - > pages [ page ] ;
conf - > reshape progress = max sector ;
if ( minor number )
mutex lock ( & cpuset mutex ) ;
ret = pcmcia register driver ( & lbs driver ) ;
static inline void hrtimer peek ahead timers ( void )
static int debugfs remove ( struct dentry * dentry , struct dentry * parent )
static void noreturn linkstation halt ( void )
if ( mtd )
static int next opcode uc ( struct rxe qp * qp , u32 opcode , int fits )
exynos iommu set pte ( sent , mk lv1ent sect ( paddr , prot ) ) ;
switch ( key - > conf . alg ) {
list for each entry ( dev , head , close list ) {
ast log ( log debug , " STRINGLITERAL \n " , con - > name , con ) ;
dissect sccp reset cause param ( tvbuff t * tvb , proto tree * tree , guint length )
mutex unlock ( & acpi device lock ) ;
void meminit calculate zone inactive ratio ( struct zone * zone )
return msr build context ( bdw msr id , array size ( bdw msr id ) ) ;
fmtstr ( char * value , int leftjust , int minlen , int maxwidth , char * end ,
ipc rcu putref ( & shp - > shm perm , shm rcu free ) ;
i - > key = ( zend ulong ) NUMLITERAL ;
void * qemu anon ram alloc ( size_t size , uint64_t * align )
struct lpfc io buf * lpfc cmd ;
if ( ! dm suspended ( md ) )
cifsfileinfo put ( file - > private data , true , false ) ;
static u32 mvpp2 txq desc csum ( int l3 offs , be16 l3 proto ,
write once ( ic - > suspending , NUMLITERAL ) ;
static void free func handle ( struct tep function handler * func )
if ( record - > event ! = ib event port err & &
static int change page attr noflush ( struct page * page , pgprot t prot )
esw vport disable qos ( esw , vport ) ;
if ( ! is ttbr0 addr ( instruction pointer ( regs ) ) )
if ( locks in grace ( ) & & ! argp - > reclaim ) {
char * c , * d ;
loff t pos = page offset ( page ) + from ;
audit info . secid = smack to secid ( current - > cred - > security ) ;
warn on ( page aligned ( end ) ) ;
struct sms msg hdr * phdr = ( struct sms msg hdr * ) buffer ;
u8 apicid = x86 cpu to apicid init [ i ] ;
syscall define2 ( getgroups16 , int , gidsetsize , old gid t user * , grouplist )
if ( stsi ( info , NUMLITERAL , NUMLITERAL , NUMLITERAL ) = = NUMLITERAL ) {
static uint64_t eepro100 read ( void * opaque , hwaddr addr ,
qtailq foreach ( wp , & env - > watchpoints , entry ) {
* period = p - > se . avg . avg period ;
return blocking notifier call chain ( & fb notifier list , event , & evnt ) ;
static service user * startp ;
if ( cpuid4 info [ cpu ] = = null )
status = lookup ( uidstr , " STRINGLITERAL " , pwd , buffer , buflen , errnop ) ;
u8 oldvalues [ NUMLITERAL ] ;
lockbufhdr noholdoff ( buf ) ;
ret = f2fs map blocks ( inode , & map , create , flag ) ;
struct hfa384x rridresult * result )
static void usb d out complete ( struct urb * urb )
struct nfs4 sessionid * sid )
return kzalloc node ( sizeof ( struct irq pin list ) , gfp kernel , node ) ;
domain = msi create irq domain ( fwnode , info , parent ) ;
cat cache * cache ;
gen bx excret ( s , var ) ;
if ( ! ast debug rtcp packet is allowed ) {
used + = sizeof ( * p ) ;
g free ( drv ) ;
b = ( short ) ( raw readl ( iomem ( HEXLITERAL ) ) ^ HEXLITERAL ) ;
mlx4 unload one ( pdev ) ;
xdrstdio putlong ( xdr * xdrs , const long * lp )
return ata pci init one ( pdev , ppi , & cs5530 sht , null ) ;
static void init tomoyo create entry ( const char * name , const umode t mode ,
if ( resource - > type ! = acpi resource type io ) {
rxrpc queue work ( & peer - > destroyer ) ;
void noreturn mpc83xx restart ( char * cmd )
ring lock test with return ( dev , file priv ) ;
static int alac set info ( alac context * alac )
e1000 intr ( adapter - > pdev - > irq , netdev ) ;
if ( ! tb ) {
return crypto memneq ( ihash , ohash , authsize ) ? - ebadmsg : NUMLITERAL ;
memory region init ( system memory , " STRINGLITERAL " , int64 max ) ;
usb unlink urb ( dev - > adev - > urb [ i ] ) ;
if ( call - > flags & trace event fl enabled )
return async dma find channel ( tx type ) ;
enum compact priority prio , enum compact result * compact result )
if ( ! rdma addr size kss ( & cmd . addr ) )
if ( len < sizeof ( sctp assoc t ) )
static void * tipc subscrb connect cb ( int conid )
gen helper debug ( ) ;
down write ( & snd pcm link rwsem ) ;
struct snd soc codec * codec = rtd - > codec ;
u16 osl readw ( struct osl info * osh , volatile u16 * r )
void mlx5 ib destroy srq ( struct ib srq * srq , struct ib udata * udata )
struct gb function * function )
tag = percpu ida alloc ( & se sess - > sess tag pool , task running ) ;
void kasan poison kfree ( void * ptr )
struct ib device * device = r xprt - > rx ia . ri device ;
struct symbol * * symbol arrayof ( void )
res = rdma is upper dev rcu ( rdma ndev , event ndev ) ;
return nvif rd32 ( & chan - > user , HEXLITERAL ) ;
size_t align , unsigned long flags , const char * name ,
if ( raw spin is locked ( & logbuf lock ) ) {
if ( bio has allocated vec ( bio ) )
ret = register memory resource ( start , size ) ;
void register smp ops ( struct plat smp ops * ops )
return g strerror ( err ) ;
if ( monitor thread ! = ast pthreadt null ) {
if ( ! adap - > fe adap [ NUMLITERAL ] . fe )
return virtscsi init ( vdev , vscsi ) ;
mutex unlock ( & nf ct cache mutex ) ;
blkdev issue flush ( buftarg - > bt bdev , gfp nofs , null ) ;
u32 sig , int ecc size )
updates [ i ] . surface - > update flags . raw = HEXLITERAL ;
int low , high ;
drbd err ( device , " STRINGLITERAL \n " , p - > encoding ) ;
for ( index = NUMLITERAL ; index < phba - > cfg hdw queue ; index + + )
drm fb helper remove conflicting framebuffers ( ap , " STRINGLITERAL " , false ) ;
static void alc fixup bass chmap ( struct hda codec * codec ,
return div round closest ( dev priv - > cdclk . hw . cdclk , NUMLITERAL ) ;
for each netdev safe ( & init net , dev , nxt )
page counter uncharge ( & memcg - > memsw , NUMLITERAL ) ;
regs - > svcnr = NUMLITERAL ;
ast log ( ast log warning , " STRINGLITERAL \n " , msgnum , message num ) ;
size_t size = max ( zlib deflate workspacesize ( max wbits , max mem level ) ,
r = vscnprintf ( buf , sizeof ( buf ) , fmt , args ) ;
void cpu unassigned access ( cpumips state * env , hwaddr addr ,
guint16 number of ids ;
ubh mark buffer dirty ( uspi ubh ( uspi ) ) ;
assert ( target ) ;
static void virtio crypto device unrealize ( device state * dev )
static void hrz kfree skb ( struct sk buff * skb ) {
if ( result )
if ( comedi buf is mmapped ( async ) ) {
if ( ftmac100 alloc rx page ( priv , rxdes , gfp kernel ) )
current - > thread . load vec = NUMLITERAL ;
if ( acpi sleep no ec events ( ) & & ec freeze events )
iov . iov len = nb sectors * bdrv sector size ;
pci set irq ( & pci - > dev , pending ) ;
return sprintf ( buf , " STRINGLITERAL \n " , data - > name ) ;
return errno to nvme status ( req , ret ) ;
log checkpoint end ( bool restartpoint )
const struct svc serv ops * ops )
. group info = current - > cred - > group info ,
struct ast bridge channel * bridge channel = data ;
struct ast string field pool * * pool head , int size )
int err load ec strings ( void )
global storehistory = NUMLITERAL ;
new pampd = tmem pampd replace in obj ( obj , index , new pampd , NUMLITERAL ) ;
hash del ( & req - > hash node ) ;
wil6210 unmask irq misc ( wil , false ) ;
static int init cpu psci cpu init ( unsigned int cpu )
static int elevator change ( struct request queue * q , const char * name )
if ( ! xen have vector callback | | ! xen feature ( xenfeat hvm pirqs ) )
rcu trace ( reset cpu stall ticks ( rcp ) ) ;
cfq shutdown timer wq ( cfqd ) ;
const bool bypass ,
static void report probe ( struct seq file * pi , struct kprobe * p ,
static int lbs auth to authtype ( enum nl80211 auth type auth type )
cp . type = get adv type ( hdev ) ;
vsnprintf ( s , sizeof ( s ) , fmt , ap ) ;
on each cpu ( cr4 update pce , null , NUMLITERAL ) ;
static ssize_t ipr read trace ( struct file * filp , struct kobject * kobj ,
if ( be physfn ( adapter ) & & adapter - > sriov enabled )
if ( ! addrrange )
if ( ! ( ldev & & mlx5 lag is roce ( ldev ) ) )
static unsigned init or module vsmp patch ( u8 type , u16 clobbers , void * ibuf ,
static unsigned int dspram load tag ( unsigned int offset )
cmpxchg ( & sdp - > sd log error , NUMLITERAL , error ) ;
if ( ! bp - > hw . target )
if ( fcport - > drport & &
static void mce device remove ( unsigned int cpu )
engine - > emit fini breadcrumb dw = ret ;
tks = qemu get clock ns ( vm clock ) - ohci - > sof time ;
if ( ( len + strlen ( buf ) > = page size ) )
struct dma attrs * attrs , bool rm )
int atr = isl1208 i2c get atr ( to i2c client ( dev - > parent ) ) ;
spin unlock irq ( & b - > rb lock ) ;
static int tomoyo path rmdir ( const struct path * parent , struct dentry * dentry )
wait for ap thread ( st , st - > bringup ) ;
macb init rx ring ( & bp - > queues [ NUMLITERAL ] ) ;
if ( v - > priv flags & br vlflag per port stats )
for ( i = NUMLITERAL ; i < data - > channels ; i + + ) {
if ( ptr ! = page address ( page ) ) {
ieee80211 rx bss add ( struct net device * dev , u8 * bssid , int channel )
static int iwm generic open ( struct inode * inode , struct file * filp )
i915 add request ( ring , null , so . obj ) ;
static int alloc commit idr uobject ( struct ib uobject * uobj )
cfqg = blkg to cfqg ( blkg ) ;
sg - > length = buflen ;
return ( ctrl & pci rebar ctrl bar size ) > > pci rebar ctrl bar shift ;
static void update cfs shares ( struct cfs rq * cfs rq , long weight delta )
bnx2x acquire hw lock ( bp , hw lock resource spio ) ;
return pci restore state ( pci dev ) ;
while ( os read file k ( fd , & c , NUMLITERAL ) = = NUMLITERAL ) {
return ! ( vmx get rflags ( vcpu ) & x86 eflags if ) | |
imx ssi set next poll ( iprtd ) ;
set latch ( & proc - > proc latch ) ;
compare node field ( type name ) ;
mmu rb remove ( handler , node , true ) ;
dss mgr disable ( dssdev - > manager ) ;
rif = mlxsw sp rif create ( mlxsw sp , & lb params . common , null ) ;
getopt clean environment ( envp ) ;
struct nf generic net * gn = nf generic pernet ( net ) ;
static int zero area ( struct pstore * ps , chunk t area )
static int maybe unused mx27 config ( struct spi imx data * spi imx ,
usb remove ep files ( & udev - > ep0 ) ;
static int get trip temp ( int trip , int * temp )
olsr handle = new create dissector handle ( dissect olsr , proto olsr ) ;
int rec size = NUMLITERAL , is tx = NUMLITERAL , log mode = NUMLITERAL ;
struct rsxx card cfg * cfg = config ;
if ( ensoniq - > ctrl & es 1371 gpio out ( NUMLITERAL ) )
return sw irq ;
for ( i = NUMLITERAL ; i < afu - > num hwqs ; i + + ) {
* diff len + = lv - > lv bytes ;
else av assert0 ( NUMLITERAL ) ;
u8 data [ info - > regs - > regs count ] ;
skb put ( skb , NUMLITERAL ) ;
pr debug ( " STRINGLITERAL \n " , dev ) ;
if ( g hash table lookup ( ifaces , ifname ) = = null )
if ( ri - > type & arm cp no raw ) {
idx buf idx , end idx ;
assert ( ! bs - > dev ) ;
return ( p ener - f ener ) / ( p ener + f ener + NUMLITERAL ) ;
static ssize_t c2port read flash data ( struct file * filp , struct kobject * kobj ,
syscall define1 ( brk , unsigned long , brk )
machine check poll ( mcp timestamp ) ;
list del init ( & driver - > pending ) ;
static char * latm context2config ( av format context * s , av codec parameters * par )
setup apic lvtt ( lapic timer frequency ,
if ( uses ppgtt ( ctx - > obj - > base . dev ) )
int e1000e rar set generic ( struct e1000 hw * hw , u8 * addr , u32 index )
context = audit context ( ) ;
asmlinkage protect ( NUMLITERAL , ret , fd , length ) ;
ring = g new0 ( desc ring , NUMLITERAL ) ;
static int fits probe ( const av probe data * p )
r = radeon bo wait ( robj , & cur placement , true ) ;
if ( get user ( clipcount , & p32 - > fmt . win . clipcount ) )
if ( mtd can have bb ( mtd ) )
process hex common ( struct tep event format * event , struct tep print arg * arg ,
ret = smum send msg to smc ( hwmgr , ppsmc msg disallowgfxoff , null ) ;
domain flush tlb pde ( domain ) ;
void do signal ( struct pt regs * regs )
kobject put ( & device - > dev . kobj ) ;
int loop = dbgp loops ;
if ( gigaset get channels ( cs ) < NUMLITERAL )
err = mutex lock interruptible ( & db9 - > mutex ) ;
return queue is rq based ( md - > queue ) ;
static struct ffs data * ffs data new ( const char * dev name )
ast mutex unlock ( & agentlock ) ;
vfio platform get reset ( vdev ) ;
int init devtmpfs mount ( void )
static uint64_t slavio diag mem readb ( void * opaque , hwaddr addr ,
return ! cmp ? cmp_match : NUMLITERAL ;
static int setkeycode ( unsigned int scancode , unsigned int keycode )
if ( request - > engine - > class = = video decode class )
struct quad8 iio * const priv = counter - > priv ;
file truncate ( file file , off_t offset , uint32 wait event info )
kfree ( le ) ;
static unsigned long cpuinit setup trampoline ( void )
call rcu ( & scmd - > rcu , scsi eh inc host failed ) ;
if ( ! dst ) {
if ( begin = = null )
void iwl op mode dvm stop ( struct iwl op mode * op mode )
void nfs4 test session trunk ( struct rpc clnt * clnt , struct rpc xprt * xprt ,
kfree ( dd - > dummy netdev ) ;
dec nr running ( p , rq ) ;
return rds rdma map ( rs , & new args , null , null , null ) ;
int pevent register comm ( struct tep handle * pevent , const char * comm , int pid )
for each node state ( n , n high memory ) {
long double w ;
blk get geometry ( s - > blk , & total sectors ) ;
bug on ( ! smp ) ;
page = alloc page ( gfp user | gfp dma32 ) ;
if ( val . vu32 > max val ) {
blk end request all ( rq , blk sts ioerr ) ;
kvfree ( runtime - > buffer ) ;
static u32 gen8 get seqno ( struct intel engine cs * engine )
vhost user opts = opts - > u . vhost user . data ;
if ( ! is isp2401 )
page = f2fs get new data page ( inode , null , index , false ) ;
if ( ! tg pt gp - > tg pt gp valid id )
compare scalar field ( multidims ) ;
p = cma alloc ( cma , count , NUMLITERAL , false ) ;
if ( test bit ( device state initialized , & rt2x00dev - > flags ) )
buf - > attrs = sca3000 ring attributes ;
bool kvm arch can dequeue async page present ( struct kvm vcpu * vcpu )
s = ( ssys state * ) g malloc0 ( sizeof ( ssys state ) ) ;
static uint64_t xen pt bar read ( void * o , hwaddr addr ,
static int max77686 pmic dt parse pdata ( struct platform device * pdev ,
vm bug on ( phys & ~ pud mask ) ;
kfree sensitive ( peer ) ;
int log = ilog2 ( bs ) ;
rockchip rk3036 pll wait lock ( pll ) ;
static uint64_t cirrus linear read ( void * opaque , hwaddr addr ,
if ( qe - > parent - > autopause & & pause ) {
if ( del timer sync ( & s - > timer ) )
if ( ! no stf barrier & & ! cpu mitigations off ( ) )
spin unlock ( & blocked lock lock ) ;
struct nouveau drm * drm = nouveau drm ( dev ) ;
if ( group > = array len ( hfp - > cind state ) ) {
void * * freelist , void * nextfree )
err = sock has perm ( sock - > sk , socket accept ) ;
return sprintf ( buf , " STRINGLITERAL \n " , & guid ) ;
int init f2fs create node manager caches ( void )
if ( ! sort has socket | | socket id < NUMLITERAL )
uint8_t iomem * bios , val [ NUMLITERAL ] ;
err = mlxsw sp inetaddr event ( dev , event , null ) ;
static void icp reset ( device state * dev )
stat = per cpu ( cpufreq stats table , cpu ) ;
class = mohclass unref ( class , " STRINGLITERAL " ) ;
ret = openssl malloc ( sizeof ( buf mem ) ) ;
poll wait ( file , sk sleep ( sk ) , wait ) ;
if ( gpiod get value ( data - > gpio trigger ) ) {
i915 reg t reg = pipeconf ( cpu transcoder ) ;
struct inode * dir = & to - > i inode ;
s - > timer = qemu new timer ns ( vm clock , apic timer , s ) ;
cb pcidas trimpot 8402 write ( dev , chan , val ) ;
clear bit ( rtw flag leisure ps , rtwdev - > flags ) ;
page = zero page ( NUMLITERAL ) ;
r = radeon bo create ( rdev , rdev - > gart . table size ,
return remote rcs [ i ] ;
const char * host key check , error * * errp )
void dcn20 disable plane ( struct dc * dc , struct pipe ctx * pipe ctx )
return bdrv flush ( bs - > file - > bs ) ;
if ( ! tc can offload ( dev , tp ) )
int nilfs palloc init blockgroup ( struct inode * inode , unsigned int entry size )
static void cpuinit mxcsr feature mask init ( void )
chan interrupt ( line , line - > driver - > read irq ) ;
pv = nbp get vlan info ( br port get rtnl ( dev ) ) ;
if ( unlikely ( crng init = = NUMLITERAL ) ) {
if ( ! c - > write header | | ! c - > updated streaminfo )
trace gfs2 block alloc ( ip , rgd , blkno , NUMLITERAL , gfs2 blkst unlinked ) ;
av log ( ac - > avctx , av log error , " STRINGLITERAL " overread err ) ;
add vars to targetlist ( root , vars , eval at , false ) ;
warn on once ( ! workqueue freezing ) ;
ext4 lblk t needed ;
spin lock ( & rnet - > tx lock ) ;
sd = sysfs get dirent ( dir sd , grp - > name ) ;
result = usb serial generic write start ( port , gfp atomic ) ;
ticnt save = readb ( s3c rtc base + s3c2410 ticnt ) ;
return analogix dp send psr spd ( dp , & psr vsc , false ) ;
obj desc - > mutex . owner thread = null ;
selinux skb extlbl sid ( skb , & sksec - > peer sid ) ;
static int lbs cmd 802 11 reset ( lbs private * priv ,
static maybe unused int e1000e pm runtime resume ( struct device * dev )
if ( ! strncasecmp ( name , pos - > name , thermal name length ) )
disable timeout ( statement timeout , false ) ;
return ast custom function register escalating ( & shell function , ast cfe read ) ;
static bool ebt limit check ( const char * tablename , unsigned int hookmask ,
hhd = & stat - > hash [ key ] ;
static void intel ring advance ( struct intel engine cs * ring )
atomic64 inc ( & aq - > card - > total request count ) ;
static int tmp102 read temp ( void * dev , int * temp )
xpage = f2fs get node page ( sbi , xnid ) ;
for ( ep = NUMLITERAL ; ep < hsotg - > num of eps ; ep + + )
bool fw ps ;
if ( st - > codecpar - > format = = av pix fmt yuv422p )
void bio release pages ( struct bio * bio )
void wakeup softirqd ( void )
cmd = mgmt pending find ( mgmt op pin code neg reply , hdev ) ;
static struct page * kvm pfn to page ( kvm pfn t pfn )
skb = skb array consume ( q ) ;
unsigned long flags = HEXLITERAL | md sps16k | page sh | page dirty ;
const struct mpx bndcsr * bndcsr ;
static uint64_t subpage ram read ( void * opaque , hwaddr addr ,
ret = iwl mvm mac ctxt changed ( mvm , vif , false ) ;
struct sem * sem = & sma - > sems [ locknum ] ;
if ( prom strcmp ( type , " STRINGLITERAL " ) )
struct key * mkey = err ptr ( - einval ) ;
void object property allow set link ( const object * obj , const char * name ,
txq - > len , txq - > head , txq - > tail ,
drm bridge attach ( encoder , ext bridge , int bridge , NUMLITERAL ) ;
dissector handle t eth handle , eth maybefcs handle ;
ipvlan ht addr del ( addr ) ;
mutex lock ( & hw - > open mutex ) ;
if ( ! buf )
static uint64_t i82378 mem read ( void * opaque , hwaddr addr ,
ext = kmem cache zalloc ( osc extent kmem , gfp nofs ) ;
if ( unlikely ( ftrace disabled ) )
spin unlock ( & inode - > i lock ) ;
dma ops = & swiotlb dma ops ;
if ( p - > mm & & ! is init ( p ) )
list for each entry rcu ( cfg , & pci mmcfg list , list )
init hlist node ( & fl - > fl link ) ;
nfsd4 free file ( fi ) ;
acpi gbl mutex info [ mutex id ] . thread id = acpi mutex not acquired ;
static ssize_t twl sysfs compat info ( struct file * filp , struct kobject * kobj ,
netlink run queue ( sk , & qlen , genl rcv msg ) ;
ring - > init hw = gen8 init render ring ;
if ( asic is dce41 ( rdev ) | | asic is dce61 ( rdev ) ) {
kfree skb ( nskb ) ;
cancel delayed work sync ( & atkbd - > event work ) ;
if ( ! refcount dec and test ( & cset - > refcount ) )
static int gb lights create all ( struct gb lights * glights )
if ( qemu chr replay ( s ) & & replay mode = = replay mode record ) {
if ( ret > ( ssize_t ) total len ) {
page head = compound head by tail ( page ) ;
return tegra bpmp post request ( channel ) ;
eeh rmv from parent pe ( edev , purge pe ) ;
static void bfqg and blkg get ( struct bfq group * bfqg )
visit complete ( data - > ov , & data - > obj ) ;
writel ( goldfish tty cmd int disable , qtty - > base + goldfish tty reg cmd ) ;
mem cgroup move lists ( page , lru ) ;
error = f2fs set acl ( inode , acl type access , acl , null ) ;
static int configfs init file ( struct inode * inode )
static void reset rx ts entry ( struct rx ts record * p ts )
gchar * raw wstring ;
static void qt202x phy remove ( struct efx nic * efx )
hash relbuf ( rel , * bufp ) ;
phandle prom getchild ( phandle node )
mark matching lsegs invalid ( lo , & tmp list , null ) ;
clk hw set clk ( gate hw , hw ) ;
ret = i915 gem object pin ( obj , NUMLITERAL , true ) ;
if ( ! is vma resv set ( vma , hpage resv owner ) )
if ( atomic read ( & dev - > empress users ) )
watchdog enable all cpus ( false ) ;
if ( scsi host in recovery ( sdev - > host ) )
if ( sh . map result ! = map failed & & sh . map size )
nft set elem destroy ( set , rbe , true ) ;
pwm2 enable show ( struct device * dev , struct device attribute * da , char * buf )
static void die header ( const char * str , struct pt regs * regs , long err )
mutex lock ( & hdaps mutex ) ;
if ( ib umem start ( & odp - > umem ) > start + length )
static void wmi dump wdg ( const struct guid block * g )
if ( ! rtc ) {
kill ( my proc pid , sigint ) ;
static int release extent buffer ( struct extent buffer * eb , gfp t mask )
unsigned long start pfn , end pfn , memmapsize , limit ;
refcount inc ( & gss msg - > count ) ;
pr debug ( " STRINGLITERAL \n " , prim ) ;
qbus set hotplug handler ( bus , object ( dev ) ) ;
static void dispc mgr set lcd divisor ( enum omap channel channel , u16 lck div ,
mlx5dr domain unlock ( tbl - > dmn ) ;
proto tree free node ( g node * node , gpointer data u )
list for each entry ( data , & event file - > triggers , list ) {
bd - > bd ops - > send break ( ch , msec ) ;
struct vmw buffer object * dx query mob ;
q test state * s = qtest init without qmp handshake ( false , extra args ) ;
ret = phy init eee ( priv - > phydev , NUMLITERAL ) ;
if ( data & & size ) {
static void exit vfio virqfd exit ( void )
if ( ! test bit ( rfkill state allocated , & rt2x00dev - > rfkill state ) )
return fuse update get attr ( inode , file , null , statx basic stats , NUMLITERAL ) ;
if ( ! lis3 - > pdata | | ! lis3 - > pdata - > wakeup flags )
handle callback ( gl , lm st unlocked , NUMLITERAL ) ;
int page to nid ( struct page * page )
if ( i & & ( ( i % stackslots per line ) = = NUMLITERAL ) )
crypto drop cipher ( & ictx - > blockcipher spawn ) ;
blocking notifier call chain ( & dev - > bus - > p - > bus notifier ,
if ( dev - > num crtcs > NUMLITERAL ) {
if ( mlx4 en prepare rx desc ( priv , ring , index , gfp atomic ) )
u32 len , u8 proto , wsum sum )
static void rx bus master complete handler ( hrz dev * dev ) {
write once ( cfp - > read subdev , s new ) ;
mutex lock ( & pm devs lock ) ;
hs socket t * sp = dev ;
set errno ( einval ) ;
static inline void clk debug register ( struct clk core * core ) { }
pr info ( prefix " STRINGLITERAL \n " ,
load mm cr4 irqsoff ( this cpu read ( cpu tlbstate . loaded mm ) ) ;
release perfctr nmi ( NUMLITERAL , perfctr msr ) ;
if ( nv device ( drm - > device ) - > chipset = = HEXLITERAL ) {
data = nfs commitdata alloc ( false ) ;
int groups search ( struct group info * group info , gid_t grp )
sg mark end ( & sg [ nsg - NUMLITERAL ] ) ;
static void vlv disable dsi pll ( struct intel encoder * encoder )
void helper sysexit ( int dflag )
qatomic dec ( & req - > bs - > serialising in flight ) ;
pm power off = rtas power off ;
void drm vblank put ( struct drm device * dev , unsigned int pipe )
anon mapping = ( unsigned long ) access once ( page - > mapping ) ;
cmp = data - > page - pstat - > page ;
dentry = dentry kill ( dentry ) ;
refcount inc ( & btf - > refcnt ) ;
return max ( xmit size goal , mss now ) ;
snd hdac display power ( azx bus ( chip ) , true ) ;
struct ba record * p ba = & p ts - > tx pending ba record ;
if ( unlikely ( size > ip tunnel opts max ) )
arpt unregister table ( net , table ) ;
return zd iowrite16 locked ( chip , value & HEXLITERAL , zd cr47 ) ;
kmem cache destroy ( flush entry cache ) ;
request = i915 gem find active request ( ring ) ;
* tv = current time ( inode ) ;
char * buf = kzalloc ( sizeof ( struct tomoyo page buffer ) , gfp nofs ) ;
size_t size = rpcrdma hdrbuf size ;
wq - > single cpu = work cpu none ;
void nvdimm init acpi state ( nvdimm state * state , memory region * io ,
return netif f csum mask | netif f fcoe crc |
ib dma unmap page ( xprt - > sc cm id - > device ,
if ( ! dsa slave dev check ( dev ) )
static void nvdimm build fit buffer ( nvdimm state * state )
pm wakeup event ( adev - > wakeup . ws , NUMLITERAL ) ;
static void funcc ( pred4x4 vertical add ) ( uint8_t * pix , int16_t * block ,
mutex lock ( & dev - > master mutex ) ;
pages = min t ( unsigned long long , l1tf limit , pages ) ;
rc = ide dev read id ( drive , ata cmd id ata , id , NUMLITERAL ) ;
kfree sensitive ( blk key ) ;
ret = wait event lock irq timeout (
scsi adjust queue depth ( sdev , NUMLITERAL , queue depth ) ;
if ( st . st blksize > NUMLITERAL & & st . st blksize < io bufsiz )
ret = vmalloc ( size , gfp vmalloc32 | gfp zero , page kernel ) ;
ps - > disccontext . sival int = ds . context ;
pr info ( " STRINGLITERAL \n " , id - > ident ) ;
dev dbg ( dev - > hw dev , " STRINGLITERAL \n " ) ;
dbg ( " STRINGLITERAL " , connector - > name ) ;
return has newer microcode ( mc intel , csig , cpf , crev ) ;
tcl setresult ( interp , " STRINGLITERAL " , tcl static ) ;
rcu barrier sched ( ) ;
if ( dev = = sitn - > fb tunnel dev ) {
req - > errors = - eio ;
smk ad init ( & ad , func , lsm audit data inode ) ;
fprintf ( stderr , " STRINGLITERAL \n " ) ;
build bug on ( align ( offsetof ( struct blk mq hw ctx , srcu ) ,
static inline u32 periph clk source shift ( struct clk tegra * c )
if ( ! napi disable pending ( napi ) & &
void pmem * * kaddr , unsigned long * pfn )
static int enable irq window ( struct kvm vcpu * vcpu )
static void psci idle init cpuhp ( void )
snprintf ( todo , NUMLITERAL , " STRINGLITERAL " , oid ) ;
if ( non swap entry ( entry ) )
check mappings rmap ( vcpu ) ;
return msnprintf ( buffer , size , ossl package ) ;
len = NUMLITERAL ;
struct dsa port * port ,
if ( ! smc link active ( link ) )
pm power off = null ;
session = l2tp nl session get ( info ) ;
struct nvme ns * ns , * found = null ;
clk disable ( i2c imx - > clk ) ;
return scnprintf ( buf , page size , " STRINGLITERAL \n " , prng chunk size ) ;
static void vgacon scrolldelta ( struct vc data * c , int lines )
tracing generic entry update ( & entry - > ent , NUMLITERAL , preempt count ( ) ) ;
return ata pci init one ( pdev , ppi , & pacpi sht , null ) ;
struct page * page , unsigned long pfn )
if ( ! acpi lapic & & ! smp found config )
if ( unlikely ( kvm x86 ops - > hwapic isr update ) )
kfree ( per cpu ( nr task bp pinned [ i ] , err cpu ) ) ;
if ( ! kvm - > arch . threads indep )
static int cmp pkt sub ts pos ( const void * a , const void * b )
return tc attr - > store ( se dev , page , count ) ;
void dispc mgr set lcd display type ( enum omap channel channel ,
sa - > util sum = sa - > util avg * load avg max ;
static void icl display core uninit ( struct drm i915 private * dev priv )
if ( caps & ( ac ampcap mute | ac ampcap min mute ) ) {
struct stfsm seq * seq = & fsm - > stfsm seq en 32bit addr ;
static int tsi148 slot get ( struct vme bridge * tsi148 bridge )
long pages = atomic long read ( & cli - > cl lru in list ) ;
if ( warn on ( copy fpstate to fpregs ( fpu ) ) )
static inline u16 analog trig low threshold bits ( u16 threshold )
void cpu unassigned access ( cpu alpha state * env , hwaddr addr ,
proc = kzalloc ( sizeof ( struct dlm user proc ) , gfp nofs ) ;
int hpfs add pos ( struct inode * inode , loff t * pos )
instance id = vmstate instance id any ;
mlx5 accel ipsec build fs cmds ( ) ;
static void pl050 write ( void * opaque , hwaddr offset ,
for ( i = NUMLITERAL ; i < hist entries ; i + + )
blockdev class - > unrealize ( blockdev ) ;
intuse ( svc getreq poll ) ( my pollfd , i ) ;
static int dmar pci device match ( struct pci dev rcu * devices [ ] , int cnt ,
ixgbe clean tx ring ( adapter , adapter - > tx ring [ i ] ) ;
i915 gem cleanup engines ( struct drm device * dev )
void ref move pfn range to zone ( struct zone * zone ,
i = values - > threads ;
. flags = cmd sync | cmd send in rfkill ,
dprintk ( NUMLITERAL , " STRINGLITERAL \n " , func ) ;
static int first field ( const struct video data * s , int fd )
f2fs do read inline data ( page , ipage ) ;
if ( len - - < = NUMLITERAL )
struct intel encoder * intel encoder = to intel encoder ( encoder ) ;
u64 btrfs csum bytes to leaves ( struct btrfs root * root , u64 csum bytes )
static void free gpio ( struct pi433 device * device )
atomic inc ( & plane state - > ref count ) ;
register shrinker ( & icache shrinker ) ;
int smp call function single async ( int cpu , call single data t * csd )
void init samsung clk register fixed rate ( struct samsung clk provider * ctx ,
return uint32 ( interrupt handled ) ;
if ( acpi handle ( & ap - > tdev ) = = null )
warn on ( ! hlist nulls empty ( & sap - > sk list ) ) ;
set bit ( dev initialized , & dev - > dev state ) ;
if ( ! ( avctx - > pb - > seekable & avio seekable normal ) )
read ptr = tx queue - > read count & tx queue - > ptr mask ;
if ( rdev - > gart . robj ) {
if ( ! bridge - > irq set ) {
void ath10k drain tx ( struct ath10k * ar )
seq set overflow ( m ) ;
queue work ( system nrt wq , & key gc work ) ;
if ( in entry stack ( stack , info ) )
cp interrupt ( dev - > irq , dev ) ;
ieee80211 queue work ( sc - > hw , & sc - > reset work ) ;
if ( ! i915 - > params . disable power well )
void btrfs put block group ( struct btrfs block group cache * cache )
void noreturn pq2 restart ( char * cmd )
complete ( & cpu running ) ;
lockdep assert held ( & freezer mutex ) ;
encode attrs ( xdr , arg - > iap , arg - > label , server ) ;
const struct cred * cred )
s lock memory id = ipc memory id get ( key , slockmemorysize ) ;
ep - > desc = null ;
addr wq = alloc ordered workqueue ( " STRINGLITERAL " , NUMLITERAL ) ;
call single data t * data = & rq - > csd ;
mutex lock ( & gameport mutex ) ;
init list head ( & di - > lease list ) ;
if ( crashk low res . end )
struct acpi cpufreq data * data = policy - > driver data ;
pgd = kvm - > arch . pgd + stage2 pgd index ( kvm , addr ) ;
return ret < NUMLITERAL ? ret : NUMLITERAL ;
static int cpufreq gx verify ( struct cpufreq policy data * policy )
if ( mthca is memfree ( mdev ) ) {
if ( ! raw pci ops & & ! raw pci ext ops ) {
guint16 vendor id u ) {
if ( new delay > = dev priv - > rps . max freq softlimit ) {
unsigned int inet addr type table ( struct net * net , be32 addr , u32 tb id )
data = read part sector ( state , offset , & sect ) ;
static void set rate ( slmp info * info , u32 data rate )
if ( ! ( sb - > s flags & sb active ) )
static void localtime 3 ( struct xtm * r , time64 t time )
char * filename ;
struct switchdev trans * trans ,
if ( ci - > speed unverified ) {
switch ( cinfo - > columns [ col ] . col fmt ) {
if ( ! seg6 validate srh ( srh , len , true ) )
unsigned long align ;
free irq ( boardp - > irq , shost ) ;
if ( hdev - > nic client & & client - > ops - > uninit instance ) {
if ( buf - > ino = = ino & & len < = name max ) {
if ( ! slab is available ( ) ) {
if ( hdw - > input dirty | | hdw - > force dirty ) {
next f = sugov next freq shared ( sg cpu , util , max ) ;
fc rport state enter ( rdata , rport st delete ) ;
static void cpuinit start secondary ( void * unused )
static bool rtl8821ae get btc status ( void )
kvm mmu reset all pte masks ( ) ;
be16 ox id , enum bfa lport role role )
nv50 sor disable ( struct drm encoder * encoder )
const int64_t inc , void * y tab )
struct kretprobe instance kprobes * get free rp inst ( struct kretprobe * rp )
struct curl llist * list = & data - > state . timeoutlist ;
del timer sync ( & moxa empty timer [ ch - > port ] ) ;
ast bridge channel queue control data ( bridge channel , ast control ringing , null , NUMLITERAL ) ;
if ( is enabled ( config of address ) & & of chosen ) {
oldcxt = memory context switch to ( deftrig cxt ) ;
if ( drv - > probe ) {
if ( ssl - > alpn client proto list = = null )
if ( ret = = - eopnotsupp ) {
timetype = hpet use timer ? " STRINGLITERAL " : " STRINGLITERAL " ;
ifp - > if u1 . if extents = kmem alloc ( new size , km nofs ) ;
return soc component ret ( component , ret ) ;
const struct imx pinctrl soc info * info = ipctl - > info ;
if ( safe hardlink source ( inode ) | | inode owner or capable ( inode ) )
label size out . func ret status = cpu to le32 ( nvdimm dsm ret status success ) ;
skb = mt76 mcu msg alloc ( dev , data , len ) ;
xfs trans cancel ( tp ) ;
if ( tvb captured length ( tvb ) < NUMLITERAL )
lv dead tuples * dead tuples , lv rel stats * vacrelstats )
unsigned char poll reg ;
void f2fs move node page ( struct page * node page , int gc type )
return vfio platform write mmio ( & vdev - > regions [ index ] ,
fsync fname ext ( fname , isdir , false , data sync elevel ( error ) ) ;
int tcf hash search ( struct tc action * a , u32 index )
xwrite ( wfd , victim , count ) ;
static int siff probe ( const av probe data * p )
cr4 = read cr4 safe ( ) ;
if ( ! count | | count > lustre jobid size )
dissect q2931 endpoint reference ie ( tvbuff t * tvb , int offset , int len ,
register sysctl table ( debug root table2 ) ;
pr info ( " STRINGLITERAL " ) ;
ret = - einval ;
me - > data allocated = ! data ptr ;
if ( ! ssl cipher disabled ( s , c , ssl secop cipher supported ) )
struct mipi dbi dev * dbidev = drm to mipi dbi dev ( connector - > dev ) ;
ao2 global obj replace unref ( parking provider , wrapper ) ;
if ( kstrtol ( buf , NUMLITERAL , & val ) ! = NUMLITERAL )
if ( ! dwc3 ver is prior ( dwc3 , NUMLITERAL a ) ) {
static inline int match bss wpa ( struct lbs 802 11 security * secinfo ,
static void rs400 mc init ( struct radeon device * rdev )
crash smp send stop ( ) ;
bool direct valid , bool indirect valid )
tlbiel pwc ( pid ) ;
proc release locks ( false ) ;
return sprintf ( buf , " STRINGLITERAL \n " , addr ) ;
warn on fpu ( ! irq fpu usable ( ) ) ;
sta id = iwl sta id ( sta ) ;
uint i , flags = km sleep | km mayfail | km large ;
static bool tcg cpu exec ( void )
nd print ( " STRINGLITERAL " , get ipaddr string ( atmspa ( ap ) ) ) ;
vgic dist irq clear pending ( vcpu , irq ) ;
int parse events add pmu ( struct list head * list , int * idx ,
umask ( s irwxg | s irwxo ) ;
pgtable t token ;
imx35 add imx2 wdt ( null ) ;
init proc global ( key , max backends ) ;
return pgdat - > kcompactd max order > NUMLITERAL | | kthread should stop ( ) ;
cifsfileinfo get ( open file ) ;
void arch cpu pre online ( void * arg )
dm unprepare ioctl ( md , srcu idx ) ;
static ssize_t handle aiocb ioctl ( struct qemu paiocb * aiocb )
if ( ! has pid permissions ( pid , task , hidepid invisible ) ) {
av buffer unref ( & context - > palette ) ;
ret = arizona request irq ( arizona , arizona irq spk overheat warn ,
tcx set dirty ( s , addr , NUMLITERAL ) ;
static void rtl8723e deinit sw vars ( struct ieee80211 hw * hw )
gen6 ggtt invalidate ( ppgtt - > vm . i915 ) ;
type mask | = ioresource type bits ;
omap clk soc init = omap4xxx clk init ;
jump label transform ( entry , type , NUMLITERAL ) ;
if ( ! out | | ! in | | len < aes block size )
p = kzalloc ( sizeof ( struct ucode patch ) , gfp kernel ) ;
if ( unlikely ( raw cpu read ( rcu dynticks . rcu need heavy qs ) ) )
void verify local cpu errata workarounds ( void )
ch - > max combined = i40evf max req queues ;
mutex unlock ( & wm8731 - > lock ) ;
if ( ! pwrdm ) {
if ( ! nvs nosave )
xstate bv & = xstate extend mask ;
int allocate irqno ( void )
aa clear task ctx trans ( current task ctx ( ) ) ;
if ( ! board info - > board info )
bridge = pci alloc host bridge ( NUMLITERAL ) ;
if ( test bit ( require dma , & rt2x00dev - > cap flags ) )
mei io cb free ( cb pos ) ;
return ( test bit ( rfkill - > type , seen ) ) ? NUMLITERAL : NUMLITERAL ;
cursor - > last piece = cursor - > resid < = page size ;
hardif free ref ( batman if ) ;
cc - > unrealize = emulated unrealize ;
ip vs scheduler err ( svc , " STRINGLITERAL " ) ;
int tty ldisc lock ( struct tty struct * tty , unsigned long timeout )
struct capiminor * mp = tty - > driver data ;
if ( ec = = null )
static void svc tcp data ready ( struct sock * sk )
ida remove ( & proc inum ida , i ) ;
gen set pc im ( dc , dc - > base . pc next ) ;
btrfs debug ( fs info , " STRINGLITERAL " , root - > objectid ) ;
if ( ! ( g resolv flags & resolv transport ) ) {
get const expr ( ( const * ) arg , context , NUMLITERAL ) ;
pgoff t page index ;
if ( ! is fat12 ( sbi ) ) {
static struct vmcs * alloc vmcs cpu ( bool shadow , int cpu )
rc - > strength = max ( rc - > strength , strength ) ;
if ( value < NUMLITERAL | | value > NUMLITERAL ) {
paramspace = shm toc lookup ( toc , parallel key paramlistinfo , false ) ;
int sas ioctl ( struct scsi device * sdev , unsigned int cmd , void user * arg )
journal write superblock ( journal , write fua ) ;
static int exit s3c24xx spi remove ( struct platform device * dev )
mem cgroup put ( mem cgroup from cont ( cont ) ) ;
str = match strval idx ( msg type , rev msg type strings , & idx ) ;
bxt verify ddi phy power wells ( dev priv ) ;
cfg80211 scan done ( rdev ) ;
if ( ! nvmet check transfer len ( req , nvme identify data size ) )
void dax unlock mapping entry ( struct address space * mapping , pgoff t index )
idx = ndo dflt fdb dump ( skb , cb , dev , idx ) ;
void clk free clk ( struct clk * clk )
i915 request add ( cache - > rq ) ;
static int of mdio bus match ( struct device * dev , const void * mdio bus np )
free bootmem node ( pgdat list [ node ] , start , len ) ;
power supply unregister ( di - > bat ) ;
void * crypto secure malloc ( size_t num , const char * file , int line )
int ret = smp boot one cpu ( cpu , tidle ) ;
sg free table chained ( & req - > sg table , nvme inline sg cnt ) ;
void flush and reload slb ( void )
lockdep assert held ( & nfs i ( cinfo - > inode ) - > commit mutex ) ;
visit type userdefoptions ( opts get visitor ( ov ) , null , & f - > userdef ,
ctx - > wmem = kmalloc ( driver - > workmem size , gfp kernel ) ;
if ( compat get timespec ( & ts , tp ) )
static unsigned int inorder next ( unsigned int j , unsigned int size )
tape - > merge bh = ide tape kmalloc buffer ( tape , NUMLITERAL ) ;
static int arm smmu match node ( struct device * dev , const void * data )
ret = crw register handler ( crw rsc css , chsc process crw ) ;
static void sw i2c scl ( unsigned char value )
vc - > receive ( vc , buf , len ) ;
init get bits ( & s - > gb , buf , buf size * NUMLITERAL ) ;
if ( ! has rc6 ( dev priv ) )
llist for each entry safe ( node , tmp , head , llnode ) {
knew - > subdevice = hda subdev nid flag | get amp nid ( val ) ;
if ( ieee - > state = = rtllib linked ) {
static unsigned int get rr interval fair ( struct rq * rq , struct task struct * task )
proto tree add text ( pt , * offset , length , " STRINGLITERAL " ) ;
if ( dev is dma coherent ( hwdev ) )
struct mlxsw sp * mlxsw sp lower get ( struct net device * dev )
dio - > io error = - eio ;
port - > slave = null ;
data len = be16 to cpu ( tag - > tag len ) + tag hdr len ;
struct nlattr * bc , bool net admin )
if ( up & & pdata ) {
u8 buffer [ max xfer size ] ;
omap2 gp clocksource init ( NUMLITERAL , omap4 mpu source ) ;
clk prepare enable ( phy ref clk ) ;
page = pfn to page ( stable node - > kpfn ) ;
omap mbox disable irq ( mbox , irq tx ) ;
static int set op prio ( struct tep print arg * arg )
u32 * val ,
return uint32 ( length ) ;
return ( ! pci probe reset slot ( pdev - > slot ) ) ?
irq set chip data ( irq , bank + hwirq / sirfsoc gpio bank size ) ;
u32 iomem * baddr ;
drm atomic state put ( old state ) ;
kvfree ( shp ) ;
static struct mansession * find session ( uint32_t ident , int incinuse )
kmem zone free ( xfs qm dqtrxzone , tp - > t dqinfo ) ;
struct cfs hash bd tmp ;
if ( ! has ddi ( dev priv ) )
res = curl open ( ( curl * * ) & data ) ;
dc - > writeback rate update seconds = writeback rate update secs default ;
static int add zone ( struct zone * zone , unsigned long phys start pfn )
kfree ( & e - > base ) ;
mutex unlock ( & ufsi - > truncate mutex ) ;
return gsm mult ( coded , factor ) * NUMLITERAL ;
acpi status rv ;
static void hsmmc2 select input clk src ( struct omap hsmmc platform data * mmc )
zval copy or dup ( zv , & c - > value ) ;
for ( bar = NUMLITERAL ; bar < pci std num bars ; bar + + ) {
if ( ! mark held locks ( curr , softirq ) )
bool pi enable , struct fast reg descriptor * desc )
nd snprintf ( str , siz , " STRINGLITERAL " , area , node ) ;
void kvm mmu change mmu pages ( struct kvm * kvm , unsigned long goal nr mmu pages )
xen pcibk release pci dev ( pdev , dev , true ) ;
static void sm501 system config write ( void * opaque , hwaddr addr ,
kthread queue work ( & lo - > worker , & cmd - > work ) ;
static unsigned long global dirtyable memory ( void )
siu dai stop ( port info ) ;
card - > dev - > coherent dma mask = dma bit mask ( NUMLITERAL ) ;
sabre state * s = sabre ( d ) ;
static uint32_t omap synctimer readh ( void * opaque , hwaddr addr )
if ( builtin expect ( ! finitef ( z ) | | z = = NUMLITERAL , NUMLITERAL )
i915 gem object flush cpu write domain ( obj ) ;
client - > bios = bioset create ( min ios , NUMLITERAL , bioset need bvecs ) ;
max bitflips = field get ( ecc cor info max errors , ecc cor ) ;
index = this cpu inc return ( mce queue count ) - NUMLITERAL ;
const enum surface pixel format format ,
if ( dsa is user port ( ds , port ) )
mediatek gpio get ( struct gpio chip * chip , unsigned int offset )
if ( ! shost - > ehandler )
static void bitband writew ( void * opaque , hwaddr offset ,
* sumlen + = in - > valnode - > qoperand . length + NUMLITERAL ;
void versatile secondary init ( unsigned int cpu )
cap pipe err str = g strerror ( errno ) ;
if ( sdmac - > event id0 > = NUMLITERAL ) {
return ast alloc region ( size , func malloc , file , lineno , func , NUMLITERAL ) ;
if ( data - > soc ! = soc arch exynos4210 )
struct s comet reg * comet ;
if ( is err or null ( snd soc debugfs root ) ) {
tm recheckpoint ( & current - > thread ) ;
init deferrable work ( & devfreq work , devfreq monitor ) ;
if ( intel gmbus is valid pin ( dev priv , child - > i2c pin ) )
l + = NUMLITERAL l < < av log2 ( h > > NUMLITERAL ) ;
printk ( kern warning " STRINGLITERAL "
if ( is valleyview ( dev ) | | is cherryview ( dev ) )
cf0 io base = ( u32 ) p3 ioremap ( paddrbase , psize , prot ) ;
pdevice extension t s ;
adpt - > phydev - > irq = phy poll ;
tipc topsrv stop ( net ) ;
static int read display ( struct asus laptop * asus )
static void rtas get time of day ( power pccpu * cpu , s papr environment * spapr ,
schedule ( ) ;
u64 offset = dso - > data . eh frame hdr offset ;
p - > code bitmap = g malloc0 ( target page size / NUMLITERAL ) ;
raw spin unlock irqrestore ( & irq 2 ir lock , flags ) ;
memcpy ( nx ctx - > priv . ctr . nonce ,
if ( tipc port unreliable ( p ptr ) ) {
err = ubifs jnl write inode ( c , inode ) ;
if ( of - > kn - > s flags & sysfs flag has seq show )
if ( ! is err or null ( reg ) & &
static void i usx2y usbpcm subs startup ( struct urb * urb )
if ( rcu access pointer ( ioc - > icq hint ) = = icq )
int i915 resume ( struct drm device * dev )
snd azf3328 dbgcodec ( " STRINGLITERAL \n " ,
track - > stack = kasan save stack ( flags ) ;
static int devexit ab3550 remove ( struct i2c client * client )
update user asce ( mm , NUMLITERAL ) ;
skb - > data [ NUMLITERAL ] = x25 iface data ;
ret = iss pipeline disable ( pipe , null ) ;
return do pselect ( n , inp , outp , exp , tsp , up , sigsetsize ) ;
list cell * curr = lnext ( list , prev ) ;
static void iwch deallocate pd ( struct ib pd * pd )
struct rsnd mod ops * ops ;
static int tcm loop check stop free ( struct se cmd * se cmd )
r = set regdom ( rd , lr ) ;
static char * try config ( char * s , const char * opt )
void r8712 set chplan cmd ( struct adapter * padapter , int chplan )
capture atm ( const guchar * pd , int offset ,
static inline u64 of read addr ( const u32 * cell , int size )
if ( ! dev )
isp = kmem cache zalloc ( smack inode cache , gfp nofs ) ;
struct lock list * target entry ;
sprintf ( str - > name , " STRINGLITERAL " , lockname - > ln type ,
return numa no node ;
static int mmc test map sg ( struct mmc test mem * mem , unsigned long sz ,
struct swnode * swnode = to swnode ( fwnode ) ;
if ( smp ltk sec level ( key ) < sec level )
superio interrupt ( int parent irq , void * devp )
const size_t memsize = sizeof ( struct kmem cache node ) ;
drm dbg kms ( & dev priv - > drm , " STRINGLITERAL \n " , adpa ) ;
static void flush iotlb all ( struct omap iommu * obj )
if ( icsk - > icsk af ops - > compat setsockopt )
void ( * cb ) ( void * user , void * ptr ) )
static int s3c2410 pm add ( struct device * dev , struct subsys interface * sif )
u32 * ipaddrs = null ;
int cpu up ( unsigned int cpu , struct task struct * idle )
while ( cur & & isdigit ( * cur ) & & i < maxha ) {
return cmd line ;
void vmbus initiate unload ( bool crash )
apply alternatives ( & region , false ) ;
percpu init rwsem ( & hu - > proto lock ) ;
static int of phy match ( struct device * dev , const void * phy np )
refcount inc ( & map - > users ) ;
new = dl open ( file ? : " " , mode ) ;
if ( cmpxchg ( pp , p2m missing , p ) ! = p2m missing )
if ( warn on ( ! intel gmbus is valid pin ( dev priv , pin ) ) )
u8 iwl mvm get channel width ( struct cfg80211 chan def * chandef )
return genlmsg reply ( msg , info ) ;
u32 convert counter = NUMLITERAL , scan counter = NUMLITERAL ;
rdmsrl ( msr nhm turbo ratio limit , value ) ;
int ext4 inode block valid ( struct inode * inode , ext4 fsblk t start blk ,
w5100 enable intr ( priv ) ;
for ( i = NUMLITERAL ; i < = NUMLITERAL ; i + + ) {
pmsr = nla nest start noflag ( msg , nl80211 attr peer measurements ) ;
struct i915 power domains * power domains ;
return nf ? nf - > nf_modname : null ;
static int vgic ioaddr overlap ( struct kvm * kvm )
return g strdup ( fname clean ) ;
t - > vtime snap = jiffies ;
static uint64_t msix pba mmio read ( void * opaque , hwaddr addr ,
netdev err ( dev , " STRINGLITERAL \n " ) ;
encoding = mbfl identify encoding ( string , elist , eliztsz , NUMLITERAL tsrmls cc ) ;
dev - > features | = netif f hw vlan ctag filter | netif f netns local ;
if ( prefs . name resolve & prefs resolv network ) {
sema init ( & rdma - > rq sem , rdma - > rq depth ) ;
dev = dev get by index ( net , ifr . ifr ifindex ) ;
nd tcheck 1 ( ptr - > reason ) ;
map = bpf map inc ( map , true ) ;
if ( ! xchk xattr set map ( sc , freemap ,
if ( device iommu mapped ( dev ) )
static time_t make unix date ( const void * date ptr )
static u32 filenametr hash ( const void * k )
if ( ! esw | | ! mlx5 eswitch manager ( esw - > dev ) )
omap3 init irq ( ) ;
device - > timer . function = dasd device timeout ;
if ( ( dev is pci ( dev ) ) & &
if ( ret = = null ) {
int f2fs need dentry mark ( struct f2fs sb info * sbi , nid t nid )
smp 85xx ops . message pass = doorbell message pass ;
s = ( spice char driver * ) chr ;
tg = p - > cred - > user - > tg ;
static void hci init1 req ( struct hci dev * hdev , unsigned long opt )
static int nforce2 verify ( struct cpufreq policy data * policy )
blk run queue ( cfqd - > queue ) ;
if ( flags & ( cflgs objfreelist slab | cflgs off slab ) ) {
mutex unlock ( & ide floppy ioctl mutex ) ;
inc nr running ( p , rq ) ;
hash netport6 data next ( struct hash netport6 elem * next ,
unpin buffer ( get buffer descriptor ( buffer - NUMLITERAL ) , true ) ;
if ( * mpage ret )
if ( ! pointer is valid ( str ) )
static int ea probe ( const av probe data * p )
sysctl header = register sysctl table ( sh64 root ) ;
ops - > flags | = ftrace ops fl per cpu | ftrace ops fl rcu ;
if ( channel & & ( channel - > onchannel callback ! = null ) ) {
dell fill request ( & buffer , HEXLITERAL , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
fpriv - > is master = NUMLITERAL ;
queue delayed work on ( smp processor id ( ) , vmstat wq ,
enable mgr out ( channel , enable ) ;
return scnprintf ( buf , size ,
static inline size_t audit pack string ( void * * bufp , const char * str )
skb = alloc skb ( urb - > actual length , gfp atomic ) ;
free swap slot ( entry ) ;
port - > sysrq = jiffies + sysrq timeout ;
bitmap clear ( tbl - > it map , entry , npages ) ;
local irq save ( flags ) ;
if ( refcount dec and test ( & ep - > base . refcnt ) )
if ( can be granted ( r , lkb , NUMLITERAL , NUMLITERAL , null ) ) {
pg free ( msg ) ;
ret = kstrtouint ( name , NUMLITERAL , id ) ;
+ + efw - > substreams counter ;
static ssize_t w1 default write ( struct file * filp , struct kobject * kobj ,
static int rtl8192 close ( struct net device * dev )
bool use lock ;
static void tcg temp free internal ( int idx )
if ( test bit ( mwifiex is suspended , & adapter - > work flags ) ) {
mutex lock ( & userspace mutex ) ;
device destroy ( & uio class , mkdev ( uio major , idev - > minor ) ) ;
static void init nsc ( struct cpuinfo x86 * c )
strncpy ( rcipher . type , " STRINGLITERAL " , sizeof ( rcipher . type ) ) ;
if ( mlx5e is eswitch vport mngr ( priv - > mdev ) )
intel runtime pm put unchecked ( dev priv ) ;
if ( ret > = NUMLITERAL )
while ( last node index - - > NUMLITERAL ) {
anon vma = page lock anon vma read ( page ) ;
aggr txq - > descs = dma zalloc coherent ( & pdev - > dev ,
void pm8001 tag free ( struct pm8001 hba info * pm8001 ha , u32 tag )
ret = dst cache init ( & t - > dst cache , gfp kernel ) ;
supplies - > supply = kcalloc ( supplies - > supplies count ,
void wl intrsrestore ( struct wl info * wl , u32 macintmask )
if ( index > = dcb max num i2c entries )
clistitem = lnext ( coltypelist , clistitem ) ;
struct matrox fb info * minfo = m2info - > primary dev ;
if ( tls1 get version ( s ) > = tls1 2 version & &
void * targinfo , unsigned int hook mask )
xclose ( client socket ) ;
pxa ssp get dma params ( struct ssp device * ssp , int width4 , int out )
ctx = i915 gem create context ( dev , file priv , false ) ;
hlist del init rcu ( & h - > cache list ) ;
kfree rcu ( file priv , rcu ) ;
hcall ( lhcall shutdown , pa ( " STRINGLITERAL " ) , lguest shutdown poweroff , NUMLITERAL ) ;
int parse common flags ( void * data )
hlist del init ( & epb - > node ) ;
void acpi rs dump io ( union acpi resource data * resource )
xfrm state put sync ( t ) ;
integrity audit msg ( audit integrity metadata , d backing inode ( dentry ) ,
if ( tbinfo - > dobj . dump )
snd soc dapm widget for each sink path ( w , p ) {
static void release metapath ( struct metapath * mp )
if ( vma & & is vm hugetlb page ( vma ) )
walk system ram res ( NUMLITERAL , NUMLITERAL , & nr ranges ,
static void usblp bulk read ( struct urb * urb )
bool managing = pool - > flags & pool manager active ;
blk aio cancel async ( req - > aiocb ) ;
if ( ! bond slave has mac rcu ( bond , arp - > mac src ) )
timer setup ( & btci - > timer , brcmf btcoex timerfunc , NUMLITERAL ) ;
* perrno = - esrch ;
spin lock init ( & queue - > index lock ) ;
unsigned bits = t - > bits per word ? : spi - > bits per word ;
bool cik sdma semaphore ring emit ( struct radeon device * rdev ,
static struct namespaces * thread namespaces ( const struct thread * thread )
int rvu alloc rsrc contig ( struct rsrc bmap * rsrc , int nrsrc )
if ( ceph get mds session ( s ) )
bool intel engines are idle ( struct intel gt * gt )
mutex lock ( & em28xx sysfs lock ) ;
if ( ! pic - > f . buf [ NUMLITERAL ] )
min mask = dma bit mask ( zone dma bits ) ;
phys count = virt to phys or null ( count ) ;
scsi kick queue ( current sdev - > request queue ) ;
namelen = cell - > name len ;
node * innerhashkey ;
page = ( void * ) get free page ( gfp pgtable user ) ;
static void pci host config write ( void * opaque , hwaddr addr ,
pr err ( " STRINGLITERAL \n " ) ;
proto sibling node = g node next sibling ( ptree node ) ;
raw spin unlock irqrestore ( & pkg temp lock , flags ) ;
return ( rc = = - eintr ) ? - erestartsys : rc ;
v64 = atomic64 read ( & alg - > rng err cnt ) ;
pci bridge emul init ( bridge , pci bridge emul no prefetchable bar ) ;
static unsigned int g4x tlb miss wa ( int fifo size , int width , int cpp )
qdict = qobject to ( q dict , obj ) ;
old dissector add ( " STRINGLITERAL " , tcp port bgp , dissect bgp ) ;
absorb sync requests ( void )
process client read interrupt ( bool blocked )
perror ( " STRINGLITERAL " ) ;
fcpci2 irq ( int intno , void * dev )
slots = rx - > mask + NUMLITERAL ;
if ( mp - > shadow info dirty | | mp - > shadow extra info dirty )
assert reg lock ( ps ) ;
if ( rtlpci - > int clear )
int err load dso strings ( void )
pevent find event by record ( struct tep handle * pevent , struct tep record * record )
data - > usage count = undeletable ;
u32 elem size , array size ;
if ( ! state - > visible ) {
static void hists decay entries ( struct hists * hists , bool threaded )
if ( intel gt is wedged ( & i915 - > gt ) )
* pos = ht - > n num used ;
call - > flags & = ~ trace event fl filtered ;
rrb = clp alloc block ( gfp atomic ) ;
req - > rq real sent = ktime get real seconds ( ) ;
set union ( list * l1 , list * l2 )
scan = table beginscan catalog ( class rel , NUMLITERAL , key ) ;
struct hfa384x * hw = null ;
dinfo = blk legacy dinfo ( conf - > blk ) ;
static int wlcore probe of ( struct device * dev , int * irq , int * wakeirq ,
if ( use skbuffs in hw & & pool = = cvmx fpa packet pool )
struct device * dev = file - > private data ;
int ret , enabled = NUMLITERAL ;
obj desc - > mutex . owner thread id = acpi mutex not acquired ;
error = locks verify locked ( filp ) ;
qemu unregister reset ( icp reset handler , dev ) ;
struct page * * pages = dma common find pages ( cpu addr ) ;
for ( i = NUMLITERAL ; i < seg p - > last backend ; i + + )
static ether t * get ethbyaddr ( const u char * addr )
result = dc commit state no check ( dc , context ) ;
fsf req - > timer . expires = jiffies + timeout ;
if ( locks in grace ( ) ) {
usleep range ( len , len + NUMLITERAL ) ;
atomic dec ( & q - > buffers ) ;
refcount set ( & state - > refs , NUMLITERAL ) ;
static int chunk usage filter ( struct btrfs fs info * fs info ,
static void handle del beacon ( struct wilc vif * vif )
kernfs remove ( root - > kn ) ;
return write data page ( page , null , wbc , fs data io ) ;
return inline syscall ( ustat , NUMLITERAL , k dev , ubuf ) ;
return err ptr ( ( int ) flavor ) ;
stt expire list ( struct list head * slot , time64 t now )
uint8_t * eeprom buf = g malloc0 ( NUMLITERAL * NUMLITERAL ) ;
raw write lock wait ( raw rwlock t * rw )
allocated unsafe pages + + ;
softusb write ( void * opaque , hwaddr addr , uint64_t value ,
ptr = coverity alloc ( sz ) ;
struct svc export * rqst find fsidzero export ( struct svc rqst * rqstp )
static void tm6010 set volume adc ( struct tm6000 core * dev , int vol )
xml char * values [ NUMLITERAL ] ;
dissector add ( " STRINGLITERAL " , ip proto vrrp , dissect vrrp ) ;
if ( i915 request is active ( rq ) ) {
mwi event cb ( null , null , msg ) ;
kfree ( buf ) ;
struct kyrofb info * par = info - > par ;
if ( unlikely ( is private ( d backing inode ( dir - > dentry ) ) ) )
ixp2000 reg wrb ( ixp2000 irq enable clr , ( NUMLITERAL < < irq ) ) ;
connc - > hash = curl hash alloc ( size , curl hash str ,
unsigned long ssp clk = drv data - > master - > max speed hz ;
out gistxlogpageupdate ( string info buf , gistxlog page update * xlrec )
void cpu exec unrealizefn ( cpu state * cpu )
atomic long set ( & ret - > refcount , NUMLITERAL ) ;
evlist for each ( evsel list , counter )
struct uart pxa port * up = dev id ;
static void bmdma addr write ( void * opaque , dma addr t addr ,
nft unregister expr ( & nft nat type ) ;
do test ( " STRINGLITERAL " , null ) ;
static u32 igb hash mc addr ( struct e1000 hw * hw , u8 * mc addr )
unlink ( outfiles [ i ] ) ;
if ( fh len < NUMLITERAL | | fh type ! = NUMLITERAL )
time64 t * limit = iterator data ;
static int kill ioctx ( struct mm struct * mm , struct kioctx * ctx ,
rdma destroy id ( ia - > ri id ) ;
static void cros ec xfer high pri work ( struct kthread work * work )
return iommu alloc coherent ( null , & vio iommu table , size , dma handle ,
dprintk ( fh - > dev , NUMLITERAL , " STRINGLITERAL \n " , func ) ;
bool dce80 validate bandwidth (
preempt schedule common ( ) ;
static struct rpc clnt * nsm create ( struct net * net , const char * nodename )
gasket log debug (
struct xfrm state * x = sp - > xvec [ i ] ;
static int nfnetlink bind ( int group )
ffurl closep ( & c - > h ) ;
shadow = alloc pages node ( node , flags , order ) ;
if ( ! chip - > info - > max vid )
cache . cred = cred ;
return kvm x86 ops . get segment base ( vcpu , seg ) ;
cap file input cb ( ( gpointer ) & cfile , NUMLITERAL , NUMLITERAL ) ;
while ( trace events [ iter - > event ] ! = null ) {
unsigned long zap page range ( struct vm area struct * vma , unsigned long address ,
nand read page op ( chip , page , NUMLITERAL , buf , mtd - > writesize ) ;
if ( e - > refcnt = = NUMLITERAL ) {
if ( uc fw - > path & & * uc fw - > path )
if ( page trans compound map ( pfn to page ( pfn ) ) ) {
for ( reg = NUMLITERAL ; reg < = tlv320aic23 active ; reg + + ) {
sl82c105 tune pio ( drive , speed - xfer pio 0 ) ;
cancel delayed work sync ( & kaweth - > lowmem work ) ;
netif receive skb ( skb ) ;
pevent parse event ( struct tep handle * pevent ,
if ( ! sriov - > is going down & & ! id - > scheduled delete ) {
if ( evoice ) {
its acpi probe ( ) ;
if ( fscrypt is direct key policy ( & ci - > ci policy ) )
dev err ( dev - > class dev , " STRINGLITERAL \n " , func ) ;
u8 rts51x get lun card ( struct rts51x chip * chip , unsigned int lun )
static void r100 gpu wait for vsync2 ( struct radeon device * rdev )
struct i40e ring * ring = & adapter - > rx rings [ i ] ;
mv chan - > pending + + ;
if ( ret < NUMLITERAL | | ! card - > name ) {
return pte alloc map ( mm , null , pmd , addr ) ;
tcp ctask - > xmstate = NUMLITERAL < < xmstate bit cmd hdr init ;
if ( nla len ( a ) ! = sizeof ( struct in6 addr ) )
void tep free format field ( struct format field * field )
int kmem cache shrink ( struct kmem cache * d , bool deactivate )
if ( ! nvme reset ( dev ) )
add to kill ( t , page , vma , to kill ) ;
kfree sensitive ( chain ) ;
rcu lockdep warn ( rcu scheduler active = = rcu scheduler inactive ,
warn on ( pctx addr ! = dev priv - > dsm . start +
if ( i915 gem context is default ( ctx ) )
if ( be32 to cpu ( footer - > type ) = = vhd fixed ) {
static void noinline btrfs drop pages ( struct page * * pages , size_t num pages )
mutex unlock ( & loop mutex ) ;
ipoib ib dev flush ( priv , ipoib flush normal , NUMLITERAL ) ;
exec parallel setup tuple queues ( parallel context * pcxt , bool reinitialize )
accel class * accel find ( const char * opt name )
iio free device ( indio dev ) ;
if ( i > = nr irqs )
static int nft delset ( const struct nft ctx * ctx , struct nft set * set )
declare completion onstack ( done ) ;
if ( ! cgroup is descendant ( cgroup , current ) )
sense = kmalloc ( scsi sense buffersize , gfp noio ) ;
dma addr t * descpa )
ib uverbs release uevent ( & uqp - > uevent ) ;
int cpu = smp processor id ( ) ;
static int journal submit data buffers ( journal t * journal ,
if ( ! ctl - > ops . trigger flush ) {
warn on ( op is write ( bio op ( bio ) ) ) ;
sys bus esp state * sysbus = esp ( opaque ) ;
bnx2x panic dump ( bp , false ) ;
static int added atexit handler ;
else if ( pcmcia dev present ( link ) )
void kvm guest cpu init ( void )
mutex lock ( & frontend mutex ) ;
lassert ( seq & & dentry ) ;
static int internal find ( openssl stack * st , void * data , int ret val options )
atomic set ( & req - > rsk refcnt , NUMLITERAL + NUMLITERAL ) ;
if ( ctx - > model & & ctx - > model - > end )
if ( ! intel uc fw is available ( uc fw ) )
hdr - > completion ops - > completion ( hdr ) ;
if ( test bit ( ixgbe ptp running , & adapter - > state ) ) {
struct controller * ctrl = to ctrl ( hotplug slot ) ;
transaction log update ( transaction id , transaction status committed ) ;
unsigned int input ;
status - > time = snd seq timer get cur time ( tmr , true ) ;
read unlock irq ( & tree - > lock ) ;
pte t ref * pte alloc one kernel ( struct mm struct * mm ,
void set handler ( unsigned long offset , void * addr , unsigned long size )
bno = args - > geo - > leafblk ;
u16 buffer [ ads8688 max channels + sizeof ( s64 ) / sizeof ( u16 ) ] ;
priv - > correction = NUMLITERAL ;
if ( kvm vm check extension ( kvm state , kvm cap ppc alloc htab ) ) {
if ( len > ( q - > max hw sectors < < NUMLITERAL ) )
proto tree set string ( field info * fi , const char * value )
get dwords ( ehci , nlptr get ( entry ) , ( uint32_t * ) & sitd ,
slave = rcu dereference ( bond - > curr active slave ) ;
sysbus = esp ( d ) ;
switch ( evsel - > core . attr . type ) {
page nidpid reset last ( page ) ;
return arpt do table ( skb , hook , in , out , packet filter ) ;
bool refcount sub and test ( int i , refcount t * r )
if ( ret < NUMLITERAL & & errno = = epipe ) {
msix vnic synchronize irq ( dd ) ;
sta = sta info get rx ( sdata , addr ) ;
free tables ( h , NUMLITERAL ) ;
if ( ! ip6 header )
edid = intel crt get edid ( connector , i2c ) ;
xmlraiseerror ( null , null , null , catal , node , xml from catalog ,
err = dso load kernel ( kernel dso , vmlinux name , null , verbose , modules ) ;
i915 ggtt invalidate ( dev priv ) ;
rpcrdma mrs create ( r xprt ) ;
bool has ns = kernfs ns enabled ( parent sd ) ;
short ad * udf get fileshortad ( uint8_t * ptr , int maxoffset , uint32_t * offset ,
list for each entry safe ( entry , tmp , & devices , list ) {
cred = nfs4 get clid cred ( clp ) ;
u32 bnx2x get pretend reg ( struct bnx2x * bp )
managed pages + = zone managed pages ( lower zone ) ;
end pg = pfn to page ( end pfn - NUMLITERAL ) + NUMLITERAL ;
ide set max pio ( drive ) ;
if ( size > bdrv request max sectors < < bdrv sector bits ) {
result = ctrl sig quality ( demod , & sig quality ) ;
gather merge clear tuples ( gm state ) ;
void * meminit vmemmap alloc block buf ( unsigned long size , int node )
return ptrace may access ( task , ptrace mode read fscreds ) ;
unsigned int access = get mmio spte access ( spte ) ;
if ( data & & gpio is valid ( data - > vbus pin ) ) {
wait online = jiffies + ( hba online tov * hz ) ;
struct operation config * config ;
g free ( dev - > log ) ;
refcount set ( & call - > a count , NUMLITERAL ) ;
struct device node * ep ;
list for each entry ( comp , & comp list , list ) {
kmem cache free ( ioat3 sed cache , sed ) ;
p = kmalloc track caller ( len , gfp user | gfp nowarn ) ;
tasklet schedule ( & ah - > ani tasklet ) ;
qpci bar bmdma bar , ide bar ;
jrel = make join rel ( root , old rel , other rel ) ;
static void intel tlb flushall shift set ( struct cpuinfo x86 * c )
mem cleanup ( nota , sizeof ( xml notation ) ) ;
void ide requeue and plug ( ide drive t * drive , struct request * rq )
dev priv - > skl vco freq = skl cdclk get vco ( cdclk freq ) ;
return swiotlb virt to bus ( io tlb end - NUMLITERAL ) < = mask ;
if ( offset > = num )
pages = alloc pages node ( node , gfp kernel , vmcs config . order ) ;
ret = safexcel invalidate cache ( async , ctx - > priv ,
static void simplelsf q (
static const struct tree descr bm files [ ] = {
register cpu notifier ( & cpu pmu hotplug notifier ) ;
pc render get seqno ( struct intel engine cs * engine )
map - > unlock ( map ) ;
err = vfs fsync ( file , NUMLITERAL ) ;
return NUMLITERAL = = strcmp ( cr1 - > cr principal , cr2 - > cr principal ) ;
obj = kmem cache zalloc ( base cache , gfp kernel account ) ;
hugetlb unregister node ( node devices [ nid ] ) ;
struct cpuidle state * new state = next valid state ( dev , state ) ;
tx skb = alloc skb ( lmp max header , gfp atomic ) ;
static struct cache dir * cache create cache dir ( int cpu )
static cpumask_t cpu coregroup map ( int cpu )
* hp cipher mode = gcry cipher mode stream ;
ctx - > found data = kmemdup ( data , data len , gfp kernel ) ;
return sizeof ( struct fc els cmd s ) ;
void rfcomm cleanup sockets ( void )
mlx5e modify admin state ( priv - > mdev , mlx5 port down ) ;
struct tty driver * driver = null ;
static int pdc2027x cable detect ( struct ata port * ap )
ast sip unregister endpoint formatter ( & endpoint auth formatter ) ;
if ( ! strcasecmp ( argv [ NUMLITERAL ] , " STRINGLITERAL " ) )
rxrpc put call ( call , rxrpc call put kernel ) ;
dissector assert not reached ( ) ;
res = invalidate device ( bdev , true ) ;
get private domain for dev ( dev ) ;
snb get count ( tsc , & tsc at measure end , base cpu ) ;
static int wl1271 build basic rates ( u8 * rates , u8 band )
if ( likely ( page - > mapping ) )
spi prepare plan ( src , & plan ) ;
type oid = typename type id ( null , typename , null ) ;
static void rfbi uninit output ( struct platform device * pdev )
if ( ! inode )
int present = ! gpio get value ( irq to gpio ( irq ) ) ;
if ( r8712 xmit classifier ( padapter , pxmitframe ) ) {
static void btc8821a2ant set fw dac swing lvl ( struct btc coexist * btcoexist ,
strlcpy ( name , t - > rx . buf , scmi max str size ) ;
mutex unlock ( & dev - > lock ) ;
struct osl info * osh = bus - > dhd - > osh ;
struct user fpsimd state * fst = & task - > thread . fpsimd state ;
if ( ah - > curchan & & reg - > power limit ! = new txpow )
mutex unlock ( & vcs - > mutex ) ;
send vblank event ( dev , e , seq , now ) ;
flush data cache page = sb1 flush cache data page ;
result = imap state capability ( conn ) ;
return ! proc tref ( dentry - > d inode ) - > task ;
checkpointer request * request ;
if ( ret ) {
queue work ( nvme workq , & ndev - > reset work ) ;
cfq mark cfqq must dispatch ( cfqq ) ;
static init int psci cpu init idle ( unsigned int cpu , unsigned int state count )
dmadbg dumpregs ( const char * fname , int line , s3c2410 dma chan t * chan ,
unsigned int n = min t ( unsigned int , srclen , sz 4k ) ;
struct net device * dev = mp - > dev ;
unsigned short * keymap = input dev - > keycode ;
new = ftrace nop replace ( ip ) ;
this cpu inc ( sp - > sda - > srcu unlock count [ idx ] ) ;
aio dispatch ( ctx ) ;
rcu init pointer ( f - > vdev , vxlan ) ;
tipc link xmit skb ( sock net ( sk ) , skb , dnode , NUMLITERAL ) ;
static unsigned int swiotlb max size ( void )
ia64 mca cmc int handler ( cmc irq , arg ) ;
register char * fakedata = av malloc ( NUMLITERAL ) ;
root = ( struct root entry * ) alloc pgtable page ( iommu - > node ) ;
struct pmem device * pmem = bdev - > bd disk - > private data ;
kvmppc free hpt ( & kvm - > arch . hpt ) ;
if ( op is write ( bio op ( bio ) ) ) {
vchan terminate vdesc ( & s3cchan - > at - > vd ) ;
return ff thread get format ( s - > avctx , pix fmts ) ;
if ( padapter - > b surprise removed | | padapter - > driver stopped )
end = dma csac ( ep - > lch ) ;
dev priv - > cdclk . hw . vco = NUMLITERAL ;
rdmsrl ( msr ia32 feat ctl , msr ) ;
enum mdp5 intf mode intf mode , struct mdp5 ctl * ctl )
syscall define0 ( gettid )
return readl be ( addr ) ;
unsigned long addr , int node , bool hugepage )
if ( nest = = null | | ! act )
int ret = NUMLITERAL ;
thread event handler * curr , * prev = null , * tmp ;
cpu set feature ( cap - > hwcap ) ;
tcg label * label = gen new label ( ) ;
abort on misalignment ( char * ebuf u , size_t ebufsiz u )
if ( ! refcount inc not zero ( & rb - > refcount ) )
free filter ( filter ) ;
static u32 current desc hdr ( struct device * dev , int ch )
area - > vm buf = kmalloc ( zs max alloc size , gfp kernel ) ;
atomic long add ( size , & chunk - > avail ) ;
static int jbd2 journal init journal head cache ( void )
simple heap delete ( description , & searchtuple - > t self ) ;
rcu init pointer ( port - > peer , null ) ;
msg sig post ( hurd msgport , sigtrap , mach task self ( ) ) ;
wm hubs update class w ( codec ) ;
kvm make request ( kvm req report tpr access , vcpu ) ;
if ( ! dev - > platform data ) {
ret = ath6kl wmi set keepalive cmd ( ar - > wmi , NUMLITERAL , val ) ;
void reg dtor ( void )
if ( ! ( spi sr & ( spi sr eoqf | spi sr cmdtcf ) ) )
xenfb init shared page ( info , info - > fb info ) ;
munmap ( shobj - > symbol map , shobj - > symbol mapsize ) ;
is 32bit user mode = in compat syscall ( ) ;
ncpus = cpu map nr ( evlist - > cpus ) ;
struct osl info * osh = pi - > osh ;
usb free streams ( devinfo - > intf , eps , NUMLITERAL , gfp noio ) ;
int ovs nla copy actions ( struct net * net , const struct nlattr * attr ,
mutex unlock ( & tty mutex ) ;
audit log exit ( context , tsk , gfp kernel ) ;
static void devstate cleanup ( void )
statusbar cf file read started cb ( capture file * cf , const char * action )
phys addr t * paddr , size_t sz , u32 sig )
if ( sock - > wq - > fasync list & &
bios linker * linker , nvdimm state * state ,
return fdt setprop ( fdt , fdt offset , name , vec , vec len + NUMLITERAL ) ;
static inline unsigned int fdt data size ( void * fdt )
level = stsi ( null , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
static int wc3 probe ( const av probe data * p )
proto tree * cip tree = null ;
static int test num ( struct tep event format * event , struct filter arg * arg ,
void dump logs ( void )
goto free map nouncharge ;
load = weighted cpuload ( i ) ;
bool smc ib is valid local systemid ( void )
if ( nc - > info - > type = = net client driver nic ) {
struct mtk gc * rg = & gpio data - > gc map [ bank ] ;
syscall define1 ( newuname , struct new utsname user * , name )
if ( refcount dec and test ( & vxlanp - > refcount ) ) {
dec nr running ( p , rq ) ;
u8 dma stat = hwif - > dma ops - > dma sff read status ( hwif ) ;
if ( cmd - > se cmd flags & scf bidi ) {
ret = iwl dvm send cmd ( priv , & hcmd ) ;
struct mlx5 wq ctrl * wq ctrl )
void init pci mmcfg init ( int early )
ret = des ekey ( tmp , key ) ;
set multi xact id limit ( oldest multi , oldest multi db , false ) ;
if ( ! end | | ( end - start > = NUMLITERAL ) ) {
char * sample fmt = null , * filters = null ; ;
void vchiq debugfs remove instance ( struct vchiq instance * instance )
s paprtce table * spapr tce find by liobn ( target ulong liobn )
env - > insn aux data [ idx ] . prune point = true ;
int jffs2 check acl ( struct inode * inode , int mask )
if ( hours > = hoursperday * daysperweek ) {
if ( ! rx ring - > cq base ) {
return evp pkcs82pkey with libctx ( p8 , null , null ) ;
destroy delegation ( dp ) ;
void bl cpufreq unregister ( const struct cpufreq arm bl ops * ops )
entry = g malloc ( sizeof ( struct pcmcia socket entry s ) ) ;
pdict = qobject to ( q dict , props ) ;
static const struct tree descr trace files [ ] = { { " " } } ;
kmem cache free ( dtl cache , dtl - > buf ) ;
int avail slots = NUMLITERAL , payload count = NUMLITERAL ;
ret = ast app has voicemail ( mailbox , null ) ;
if ( r < NUMLITERAL | | r = = dm mapio requeue )
stack t as , oas ;
sk mem reclaim ( sk ) ;
if ( queue delayed work ( sbp2 wq , & lu - > work , NUMLITERAL ) )
if ( nouveau fence update ( chan , fctx ) )
xchk btree set corrupt ( bs - > sc , bs - > cur , level ) ;
read once ( memcg - > swap . max ) -
if ( early cpu to node ( from ) = = early cpu to node ( to ) )
if ( ! regp )
return kvm x86 ops . set msr ( vcpu , & msr ) ;
mutex unlock ( & resource - > devices lock ) ;
dial - > state = ast dial result trying ;
mac hid sysctl header = register sysctl table ( mac hid root dir ) ;
nvdimm - > sec . flags = nvdimm security flags ( nvdimm , nvdimm user ) ;
mbfl memory device output ( ' \0 ' , device ) ;
ast mutex unlock ( & listlock ) ;
dissector assert ( tvb - > initialized ) ;
return dm bio prison alloc cell v2 ( cache - > prison , gfp noio ) ;
static void check for bios corruption ( void )
return write node page ( page , false , wbc ) ;
ether addr copy ( arg - > addr , sta - > addr ) ;
i = ( g guint64 constant ( NUMLITERAL ) < < ( bit len - NUMLITERAL ) ) ;
ret = nbd read ( ioc , buf , sizeof ( buf ) , null ) ;
static void tipc purge publications ( struct net * net , struct name seq * seq )
gfp t gfp mask , enum migrate mode mode , int * contended )
raw cpu write ( mod - > refptr - > incs , NUMLITERAL ) ;
* endptr = any ? s - NUMLITERAL : str ;
return ast waitfordigit full ( c , ms , null , NUMLITERAL , NUMLITERAL ) ;
int extract port ( const char * str , unsigned short * port ptr )
return copy from realmem ( dest + copied , src + copied , count - copied ) ;
qemu file socket * s ;
unsigned int curr core = current cpu data . core ;
struct mlx5 flow handle * flow rule = null ;
pf end request ( blk sts ioerr ) ;
if ( encoder = = intel attached encoder ( connector ) )
svc proc register ( struct svc stat * statp , const struct file operations * fops )
status = acpi ec query ( ec , & value ) ;
static int app control silence stop ( struct stasis app control * control ,
if ( irq id )
rcu read unlock ( ) ;
vfprintf ( stderr , gettext ( fmt ) , ap ) ;
cfs hash lock setup ( struct cfs hash * hs )
if ( peer )
size = tbnet frame size ;
count = atomic read ( & task css set ( current ) - > refcount ) ;
spin unlock ( & swap lock ) ;
eco = kmem cache zalloc ( echo object kmem , gfp nofs ) ;
return exec eval expr ( case expr - > defresult ,
if ( ! ( sclp vt220 register . sclp receive mask & evtyp vt220msg mask ) ) {
static int ftrace modify code ( unsigned long ip , unsigned char * old code ,
int flags , match ;
up = xml mem strdup ( upper ) ;
int npages for summary flush ( struct f2fs sb info * sbi , bool for ra )
static int sm scsi inquiry ( struct us data * us , struct scsi cmnd * srb )
zval null ( & intern - > array . elements [ index ] ) ;
if ( ieee80211 wep weak iv ( iv , key - > conf . keylen ) )
if ( btcoexist - > initialized ) {
device remove file ( dev , & mce bank devs [ i ] . attr ) ;
rts51x ms delay write ( chip ) ;
static bool ff layout has available ds ( struct pnfs layout segment * lseg )
key - > security = smk of task ( cred - > security ) ;
ip vs reply4 ( void * priv , struct sk buff * skb ,
static void poke swift ( void )
refcount inc ( & ctx - > refcount ) ;
struct nvme queue * nvmeq = & dev - > queues [ NUMLITERAL ] ;
if ( ! is support sw smu ( adev ) )
devm kfree ( ring to dev ( ring ) , ring - > desc cb ) ;
skb - > fclone = skb fclone free ;
indextable [ cur max index ] = codec - > id ;
static bool probe bpf syscall ( const char * define prefix )
retry bios on resume ( pool , cell ) ;
task - > tk action = call refresh ;
if ( driver - > attach adapter ) {
struct card ir * ir = btv - > remote ;
u8 * const iv = walk - > iv ;
free pd ( vm , pdp ) ;
static inline int get max meta blks ( struct f2fs sb info * sbi , int type )
static void usb net unrealize ( usb device * dev )
panic ( pr fmt ( " STRINGLITERAL \n " ) ) ;
g free ( wdh ) ;
if ( cpu arch < = cpu arch armv5tej )
kvm x86 ops . pmu ops - > init ( vcpu ) ;
smsc warn ( pdata , hw , " STRINGLITERAL " ) ;
uint32_t instance id = s - > id ;
q - > limits . max discard sectors = drbd max discard sectors ( connection ) ;
int drm vblank get ( struct drm device * dev , unsigned int pipe )
if ( offset > = NUMLITERAL & & offset < = mtd - > size )
fdata = cap file find fdata ( cf , cf - > first displayed ) ;
static int init bfin bf54x driver init ( void )
field = tep find any field ( evsel - > tp format , field name ) ;
static inline void lpar cppr info ( u8 value )
get online cpus ( ) ;
lpj fine = ( ( unsigned long ) tsc khz * NUMLITERAL ) / hz ;
if ( ( tdma - > flags & cesa tdma type msk ) = = cesa tdma op )
pci scan bus with sysdata ( busno ) ;
set errno ( esrch ) ;
gred destroy vq ( table - > tab [ i ] ) ;
if ( format )
schedule work ( & node devices [ nid ] - > node work ) ;
weak alias ( pthread mutex lock , pthread mutex lock )
skb put u8 ( skb , HEXLITERAL ) ;
guint offset , guint length ,
for ( i = NUMLITERAL ; i < = rm max id ; i + + )
stop atmel card ( dev ) ;
ret = gen8 configure all contexts ( stream , oa config ) ;
static ssize_t w1 f23 read bin ( struct file * filp , struct kobject * kobj ,
if ( idx = = biovec max idx )
int ocrdma get irq ( struct ocrdma dev * dev , struct ocrdma eq * eq )
hrtick update ( rq ) ;
if ( ! container - > msc finalizers ) {
enum port intel ddi get encoder port ( struct intel encoder * intel encoder )
drm warn on ( & dev priv - > drm , ddb size = = NUMLITERAL ) ;
qemu system wakeup request ( qemu wakeup reason rtc , null ) ;
cp . reason = hci error rej limited resources ;
atomic inc ( & group - > fanotify data . bypass perm ) ;
user = get uid ( task cred ( t ) - > user ) ;
ktime get real ts64 ( & crash data - > timestamp ) ;
scp - > underflow = gdth magic ;
fw init cmdline ( ) ;
int rc = - enxio , power ;
be portalinit ( void )
static void devstate event ( const char * device , enum ast device state state , int cachable )
asmlinkage protect ( NUMLITERAL , ret , filename , user , group ) ;
free s390 insn slot ( p - > ainsn . insn , NUMLITERAL ) ;
if ( ! k - > ioeventfd assign ) {
if ( ! atomic read ( & cmd - > t transport timeout ) ) {
static gint ospf ls type to filter ( guint8 ls type )
e1 = rb entry ( p , struct ubi wl entry , u . rb ) ;
if ( rsp & & rsp - > ring fx00 )
hws = i915 gem object pin map ( dctx obj , i915 map wb ) ;
return i915 read ( ring acthd ( ring - > mmio base ) ) ;
err raise data ( err lib none , err r internal error ,
warn on once ( ! refcount inc not zero ( & pi state - > refcount ) ) ;
return bdrv co truncate ( bs - > file , offset , prealloc , errp ) ;
unsigned int hook mask )
table = rcu dereference ( mm - > ioctx table ) ;
eth zero addr ( aggregator - > partner system . mac addr value ) ;
data [ NUMLITERAL ] = i8254 osc base 1mhz ;
if ( lbk - > vf id > = nic - > num vf en )
renew client locked ( clp ) ;
static ssize_t ibm read apci table ( struct file * filp , struct kobject * kobj ,
ret = lbs prepare and send command ( priv ,
if ( disk & & unlikely ( disk - > flags & genhd fl hidden ) ) {
hrtimer init ( & timer - > timer , clock monotonic , hrtimer mode abs ) ;
err = stream open ( inode , file ) ;
asmlinkage void notrace stackleak erase ( void )
asmlinkage protect ( NUMLITERAL , ret , ruid , euid , suid ) ;
ast mutex lock ( & atexitslock ) ;
free pmu context ( pmu - > pmu cpu context ) ;
schedule timeout ( timeout ) ;
panic ( " STRINGLITERAL \n " , function ) ;
llist for each entry safe ( cl , t , reverse , list ) {
reg & = ( pvt - > model > = HEXLITERAL ) ? ~ NUMLITERAL : ~ NUMLITERAL ;
if ( bdi congested ( bdi , bdi bits ) ) {
u32 seqno , int state , unsigned long timeout us )
kfree ( m ) ;
gchar * loname = g strdup ( proto - > name ) ;
init sexpr ( func - > funcid , func - > inputcollid , expr , state , parent ,
if ( func - > old func = = old func )
can rx offload disable ( & priv - > offload ) ;
unsigned int offset = ctx - > reg bytes + ctx - > pad bytes ;
c overpaid ( tuple table slot * t ,
int ata qc complete noop ( struct ata queued cmd * qc )
skp = smk of task struct ( ctp ) ;
err = sdei reregister event llocked ( event ) ;
visit type int ( v , null , & res , & err ) ;
static void gl interrupt complete ( struct urb * urb )
prz - > buffer = prz - > vaddr ;
return map and check smb error ( mid , log error ) ;
int omap hwmod get context loss count ( struct omap hwmod * oh )
arch jump label transform ( iter , jump label disable ) ;
static void cpu copy el2regs ( const struct arm64 cpu capabilities * unused )
old dissector add ( " STRINGLITERAL " , ip proto gre , dissect gre ) ;
tzset internal ( NUMLITERAL ) ;
result = nan ( " " ) ;
attr = ast alloca ( sizeof ( * attr ) ) ;
if ( ! crtc - > config - > gmch pfit . control )
av log ( ac - > avctx , av log error ,
if ( system state > = system running )
drm dp aux unregister ( & dpaux - > aux ) ;
image size = pci get rom size ( dev , addr , size ) ;
ret = cgroup bpf detach ( cgrp , prog , attr - > attach type ) ;
return node & & delete node ( root , node , null ) ;
error = sysfs create groups ( power kobj , attr groups ) ;
scic sds phy set base state handlers ( sci phy ,
current - > flags | = pf nofreeze | pf freezer nosig ;
static int unload module ( void )
return ip6t do table ( skb , hook , in , out , packet raw ) ;
void cpuidle acpi processor ffh cstate enter ( struct acpi processor cx * cx )
if ( ! time left )
set document locator ( void * ctx unused , xml sax locator ptr loc unused )
if ( trigdesc & & trigdesc - > trig truncate after statement )
struct saa7164 user buffer * ubuf = null ;
force sig fault ( sigsegv , si code , ( void user * ) address , current ) ;
keymgmt from dispatch , null ,
memory context reset and delete children ( event trigger cache context ) ;
if ( buf - > sglen = = NUMLITERAL ) {
u32 usec = req - > rq arrival time . tv nsec / nsec per usec / NUMLITERAL ;
res = local queue frame ( p , isoutbound , & answer , ast , NUMLITERAL ) ;
if ( ! analogix dp psr enabled ( dp - > adp ) )
scan = table beginscan catalog ( rel , NUMLITERAL , key ) ;
asmlinkage long sys pipe ( int user * fildes )
block sz = pseries memory block size ( ) ;
size_t size , unsigned long attrs )
} while ( qemu bh poll ( ) | | ret > NUMLITERAL ) ;
uregs = & target - > thread . fpsimd state ;
if ( of irq to resource ( dev , i , res ) < = NUMLITERAL )
static void analyze config ( void ) {
core dev del lun ( tpg , lun - > unpacked lun ) ;
spin lock irq ( & efivars lock ) ;
parent id = rcu dereference protected ( parent css - > id , true ) ;
noinline for stack i40e status i40e update link info ( struct i40e hw * hw )
if ( ( ret = openssl malloc ( sizeof ( * ret ) ) ) ! = null )
if ( device iommu mapped ( dev ) ) {
void tep ref ( struct tep handle * pevent )
get dirty limits ( & background thresh , & dirty thresh , null , null ) ;
if ( params - > src ) {
return wdt timer reload ( pbpctl dev ) ;
ret = ( u64 ) parent rate * m ;
p = ceph msg new ( NUMLITERAL , pool - > front len , gfp mask ) ;
const struct cfg80211 chan def * chandef )
bool kasan slab free ( struct kmem cache * cache , void * object , unsigned long ip )
void rcu * * slot = null ;
if ( - - pos < = NUMLITERAL )
tcf block offload inc ( block , & head - > flags ) ;
struct fib6 nh * nh = ifa - > rt - > fib6 nh ;
release predicate locks ( is commit , false ) ;
return top . next ;
btrfs mod outstanding extents ( btrfs i ( inode ) , NUMLITERAL ) ;
update load sum ( u64 now , struct sched avg * sa ,
return ( xml schema check cosst derived ok ( actxt , type - > base type ,
return drbg master ;
pin free ( pctldev , pins [ i ] , false ) ;
if ( ! drm debug enabled ( category ) )
rc = stl getportstats ( null , null , argp ) ;
} else if ( count < NUMLITERAL | | count > guest file read count max ) {
mutex lock ( & power well - > lock ) ;
if ( rcu access pointer ( proto tab [ proto ] ) ) {
void device links read unlock ( int idx ) releases ( & device links srcu )
if ( ! test bit ( device state present , & rt2x00dev - > flags ) )
sector t zone sectors = blk queue zone sectors ( q ) ;
return phy mii ioctl ( ugeth - > phydev , rq , cmd ) ;
remaining = hrtimer expires remaining adjusted ( & ctx - > t . tmr ) ;
if ( b43 is mode ( dev - > wl , ieee80211 if type ibss ) ) {
memcpy ( pcpudst + per cpu offset ( i ) , src , size ) ;
f2fs unlock all ( sbi ) ;
struct tep record * record , enum pevent errno * err )
struct pci bus * bus = slot - > hotplug slot . pci slot - > bus ;
qdisc qstats atomic qlen inc ( q ) ;
max pfn = max low pfn ;
scdrv event interrupt ( int irq , void * subch data )
return readl ( tp - > regs + off ) ;
void snd sof pcm period elapsed work ( struct work struct * work )
if ( sdvo priv - > is tv | | sdvo priv - > is lvds )
if ( caplen < slip hdrlen | | length < slip hdrlen ) {
g assert ( vector len < = ov maxbytes ) ;
if ( ! bond has slaves ( bond ) ) {
if ( ! mcbsp - > pdata - > mux signal )
if ( pdev & & pdev - > dev . driver )
size + = chunk size ( chunk ) ;
i7core xeon pci fixup ( pci dev descr i7core [ NUMLITERAL ] . dev id ) ;
return irq create mapping ( chip - > irq sim domain , offset ) ;
int init ar7 gpio init ( void )
buf = zend string alloc ( z strlen p ( value ) , NUMLITERAL ) ;
complete signal ( sig , p , NUMLITERAL ) ;
struct osl info * osh ;
if ( state = = mv88e6185 g1 sts ppu state disabled )
static void pcm3724 detach ( struct comedi device * dev )
static int already called ;
ret = wait event timeout ( tty - > ldisc - > wq idle ,
bool explicit = ! ! ( submit - > flags & etna submit no implicit ) ;
error = xfs init security ( inode , dir , & dentry - > d name ) ;
if ( pwr state ) {
fscache relinquish cookie ( clp - > fscache , null , false ) ;
ast mutex unlock ( & g729 lock ) ;
ret = dax mkwrite ( vma , vmf , xfs get blocks dax fault ,
vport = kzalloc ( sizeof ( struct bfad vport s ) , gfp atomic ) ;
static int restore fbdev mode force ( struct drm fb helper * fb helper )
alloc chromo ( planner info * root , int string length )
warn on ( i915 verify lists ( dev ) ) ;
acpi tb generate checksum (
profile = aa get newest profile ( ns - > unconfined ) ;
static void acpi battery init async ( void * unused , async cookie t cookie )
struct phy * phy ;
struct bio vec bvec , bvprv = { null } ;
int irq , new , vector = NUMLITERAL ;
cur = ( xml attr ptr ) xml malloc ( sizeof ( xml attr ) ) ;
. index = rtd - > num ,
q data = get q data ( ctx , f - > type ) ;
nfs drop nlink ( inode ) ;
report bug ( regs - > rip , regs ) ;
if ( fifo size ! = HEXLITERAL & & fifo size ! = HEXLITERAL )
desc - > b nbr ports = vhci hc ports ;
dma addr t uninitialized var ( bus addr ) ;
vortex vort3d disable ( vortex ) ;
if ( ! off | | ( * off ) - - = = NUMLITERAL ) {
struct ethtool fecparam fecparam = { . cmd = ethtool gfecparam } ;
ce = mocs context create ( engine ) ;
ide unregister ( hwif ) ;
node = kmem cache zalloc ( ldlm interval slab , gfp nofs ) ;
hwaddr addr = qdict get int ( qdict , " STRINGLITERAL " ) ;
int i915 suspend ( struct drm device * dev , pm message t state )
genradix free node ( n ) ;
smum send msg to smc ( hwmgr , ppsmc msg dpm disable , null ) ;
result = inline syscall ( fstat , NUMLITERAL , fd , & kbuf ) ;
spin lock irqsave ( & priv - > txlock , flags ) ;
fsnotify create ( dir , dentry - > d name . name ) ;
pr debug ( " STRINGLITERAL \n " , n - > start , n - > end ) ;
if ( in interrupt ( ) | | irqs disabled ( ) )
cant sleep ( ) ;
int postcopy ram incoming init ( migration incoming state * mis )
if ( skb - > ip summed = = checksum hw )
security delete hooks ( selinux hooks , array size ( selinux hooks ) ) ;
static bool check sr ( disas context * dc , uint32_t sr , unsigned access )
extern const struct plat smp ops * mp ops ;
ata bmdma post internal cmd ( qc ) ;
vdc - > unrealize = virtio blk device unrealize ;
memblock x86 reserve range ( addr , addr + size , " STRINGLITERAL " ) ;
regcache rbtree exit ( map ) ;
if ( ! seg6 validate srh ( srh , len , false ) )
struct zap details * details )
copy scalar field ( relpersistence ) ;
static void noreturn pas restart ( char * cmd )
sg free table chained ( & iod - > sg table , sg chunk size ) ;
refcount set ( & delayed node - > refs , NUMLITERAL ) ;
if ( pmboxq - > context1 )
int cycle time , use dma info = NUMLITERAL ;
cfs hash hd hnode add ( struct cfs hash * hs , struct cfs hash bd * bd ,
file t fh ;
struct cls fl head * head = fl head dereference ( tp ) ;
int register sound special ( const struct file operations * fops , int unit )
ret = rtl read byte ( rtlpriv , read addr ) ;
if ( ! has feature ( ctx , tricore feature 131 ) ) {
static int test default ct policy eval ctx time is now ( void )
if ( unlikely ( ! ata dev enabled ( dev ) ) )
static void * jb create adaptive ( struct ast jb conf * general config )
pci clear master ( pdev ) ;
if ( ! rcrtc - > crtc . state - > active )
ret = ov6650 reg write ( client , reg clkrc , clkrc ) ;
rpcauth init credcache ( struct rpc auth * auth )
vbg req free ( req , sizeof ( * req ) ) ;
pg semaphore lock ( pg semaphore sema )
kvm x86 ops . tlb flush ( vcpu ) ;
show opcodes ( regs , loglvl ) ;
nilfs ioctl do delete checkpoints ( struct the nilfs * nilfs , u64 * posp ,
uint32_t msk = uint32 max , tmp ;
static void ppc set irq ( cpu state * env , int n irq , int level )
ipx table header = register sysctl table ( ipx root table ) ;
static int codec ast2skinny ( const struct ast format * astcodec )
ff format io close ( s , & oc - > pb ) ;
capture llc ( pd , offset , len , ld ) ;
if ( last processing > = ping time )
write page ( bitmap , bitmap - > sb page , NUMLITERAL ) ;
if ( cpu pmu - > reset )
mutex unlock ( & hvt - > lock ) ;
return ringbuf wtap dump close ( & cfile . save file , err close ) ;
slice = calc delta ( slice , se - > load . weight , load ) ;
int headroom , gfp t gfp mask )
page counter set low ( & memcg - > memory , low ) ;
cfield = get column custom fields ( col ) ;
if ( multissl init ( null ) )
if ( uart console ( port ) )
for each tunnel rcu ( tunnel64 handlers , handler )
if ( value > bright maxlvl )
migrate set state ( s , s - > state , mig state cancelled ) ;
else if ( power supply am i supplied ( di - > bat ) > NUMLITERAL )
nv50 instobj wr32 ( struct nouveau object * object , u64 offset , u32 data )
av free packet ( pkt ) ;
struct intel uncore box * box ;
static int pm8001 get phy settings info ( struct pm8001 hba info * pm8001 ha )
if ( warn on once ( ! test bit ( n , system vectors ) ) )
if ( is huge zero pmd ( pmd ) )
kfree sensitive ( payload ) ;
struct rsp que * rsp = ha - > rsp q map [ NUMLITERAL ] ;
static u32 power2 ( u32 x )
tg = td - > root tg ;
trace nowake buffer unlock commit ( event , flags , pc ) ;
return notify ok ;
error = gfs2 dir search ( dip - > i vnode , name , null , null ) ;
vt1708 update hp work ( spec ) ;
raw printk ( " STRINGLITERAL \n " , str , err & HEXLITERAL ) ;
mutex init ( & entry - > access ) ;
if ( ata id lba48 enabled ( id ) ) {
digest ctx - > init called = NUMLITERAL ;
if ( likely ( state - > idev ) )
if ( mpsc rx intr ( pi , & iflags ) )
struct tep record * record , bool use trace clock )
printk ( kern err " STRINGLITERAL \n " ) ;
kfree ( cert - > sig . s ) ;
nest parms = nla nest start ( skb , cta tuple ip ) ;
if ( ! slot valid ( ndd , nd label , slot ) )
chardev hostdev * parallel = backend - > u . parallel . data ;
if ( ! rb )
static int microdvd probe ( const av probe data * p )
static int hevc probe ( const av probe data * p )
void r8712 construct txaggr cmd desc ( struct xmit buf * pxmitbuf )
return register filesystem ( & hppfs type ) ;
blk aio cancel ( bus - > dma - > aiocb ) ;
if ( gpio is valid ( eoc gpio ) )
tcp enter frto loss ( sk , tp - > frto counter + NUMLITERAL , flag ) ;
qemu coroutine enter ( opaque ) ;
void init kirkwood timer init ( void )
if ( data - > rpc status ! = NUMLITERAL | | ! data - > rpc done )
if ( bus - > sdiodev - > state ! = brcmf state data )
xfs log ticket put ( ticket ) ;
if ( trigdesc & & trigdesc - > trig delete after statement )
if ( state - > config . led cfg )
if ( encoder - > crtc ! = crtc )
int bmp085 probe ( struct device * dev , struct regmap * regmap , int irq )
item label new ( pnode pool ( pi ) , fi - > rep ) ;
cpu restore state ( cs , retaddr , true ) ;
ahci = ahci boot and enable ( null ) ;
struct task group * tgi , * parent = tg ? tg - > parent : null ;
copied = ptrace access vm ( child , addr , & tmp , sizeof ( tmp ) ,
kfree ( gdev ) ;
static int node update ( struct unit directory * ud )
irq = get cpu var ( vector irq ) [ vector ] ;
if ( connection & & connection - > is open ) {
ttwu do wakeup ( rq , p , wake flags , & rf ) ;
static void cxgb down ( struct adapter * adapter , int on wq )
static void setup qbman paace ( struct paace * ppaace , int paace type )
del timer sync ( & local - > sta cleanup ) ;
static int console cpu notify ( struct notifier block * self ,
struct dw pcie * pci = pcie - > pci ;
if ( host - > dbclk )
static int spitz mci setpower ( struct device * dev , unsigned int vdd )
if ( cpu pmu - > set event filter | | idx ! = armv7 idx cycle counter )
if ( ! evdev - > exist | | client - > revoked )
static int read probe ( const av probe data * pd )
pfree ( ptr ) ;
void * crypto dequeue request ( struct crypto queue * queue , unsigned int offset )
err = pipe generate pipe num ( me , & me - > pipe num ) ;
if ( adapter - > state ! = i40evf down | | adapter - > aq required )
struct gaih servtuple * st )
static int init jbd2 journal init handle cache ( void )
return slpte & vtd sl pt base addr mask ( vtd host address width ) ;
static uint64_t ppc4xx gpt read ( void * opaque , hwaddr addr , unsigned size )
netdev dbg ( ieee - > dev , " STRINGLITERAL "
cancel delayed work sync ( & pdata - > carrier check ) ;
gvt vgpu err ( " STRINGLITERAL \n " , gfn ) ;
syscall define0 ( execve )
static int tmv probe ( const av probe data * p )
err = start this handle ( journal , handle , gfp mask ) ;
struct posix acl * acl = err ptr ( - einval ) ;
task - > tk action = call allocate ;
event = cpuhw - > limited counter [ i ] ;
struct rvt dev info * rdi ;
list for each entry rcu ( v , & vg - > vlan list , vlist ) {
struct dw pcie * pci ;
rds conn path drop ( tc - > t cpath , false ) ;
static int hp100 eisa probe ( struct device * gendev )
if ( atomic read ( & mce panicked ) )
if ( capng updatev ( capng add , capng permitted | capng effective ,
if ( vga switcheroo pwr state ( new client ) = = vga switcheroo off )
const enum vchi callback reason reason ,
if ( iwl trans send cmd pdu ( trans ( priv ) , reply bt config ,
static bool is any core online ( struct platform data * pdata )
rfkill toggle radio ( rfkill , rfkill state soft blocked , NUMLITERAL ) ;
struct mace data * mp = netdev priv ( dev ) ;
free expr context ( node - > biss runtimecontext , true ) ;
return scnprintf ( buf , NUMLITERAL , " STRINGLITERAL \n " , mode ) ;
ne - > type = type ;
flush workqueue ( nvme delete wq ) ;
turbo override | = turbo tdc ovr en | turbo tdp ovr en ;
qla2x00 check reg32 for disconnect ( scsi qla host t * vha , uint32_t reg )
error = pci raw set power state ( dev , state , true ) ;
bus = pci get bus ( pci dev ) ;
if ( ppd - > host link state & hls down ) {
unsigned long cci event = hw event - > config base ;
struct can dev rcv lists * d )
counter = time interpolator get counter ( NUMLITERAL ) ;
be32 t = cpu to be32 ( val ) ;
struct inode security struct * isec = inode security novalidate ( inode ) ;
static void journal abort soft ( journal t * journal , int errno )
console flush on panic ( console flush pending ) ;
rtc update irq ( cmos - > rtc , NUMLITERAL , tmp ) ;
batadv tvlv container remove ( bat priv , tvlv ) ;
if ( cmkey = = null )
size_t nfit size = sizeof ( struct acpi nfit system address ) * NUMLITERAL
g free ( io mem opaque [ io index ] ) ;
static int dvbtxt probe ( const av probe data * p )
padapter - > suspended = true ;
static void * tsi148 alloc consistent ( struct device * parent , size_t size ,
if ( id < NUMLITERAL | | id > = pcc mbox ctrl . num chans )
mutex lock ( & ops mutex ) ;
bt unlockbuf ( scan - > index relation , sp - > buf ) ;
xsd test case ( cur ) ;
static void blk trace free ( struct blk trace * bt )
nidstats put locked ( struct cfs hash * hs , struct hlist node * hnode )
if ( s - > s3 . renegotiate )
if ( sta - > bandwidth > = ieee80211 sta rx bw 40 ) {
hwaddr addr = channel reg ( ctrl , c , rw saved data ) ;
static bool hns nic tx fini pro ( struct hns nic ring data * ring data )
ldlm export lock hash ( struct cfs hash * hs , const void * key , unsigned mask )
bool aborted reclaim = false ;
static void maybe unused mx27 intctrl ( struct spi imx data * spi imx , int enable )
return add pages ( nid , zone , start pfn , nr pages ) ;
rc = lpfc sli issue mbox ( phba , pmb , flag ) ;
receive chars ( up , & status ) ;
int perf event query prog array ( struct perf event * event , void user * info )
mgmt index added ( hdev ) ;
struct page * page = ext2 get page ( dir , NUMLITERAL , NUMLITERAL ) ;
int result = NUMLITERAL ;
complete ( & ctx - > ref comp ) ;
static int if usb get int status ( struct lbs private * priv , u8 * ireg )
memcg = get mem cgroup from current ( ) ;
if ( ! has merged page ( io , inode , ino , idx ) )
iomem u32 * spir = & port regs - > common regs . serial port interface reg ;
up ( & h wait response ) ;
s - > smtab [ i ] . refcnt = NUMLITERAL ;
kvm lapic reg write ( apic , offset , val ) ;
return drm atomic crtc needs modeset ( state ) ;
inet sk ( sk ) - > inet id = prandom u32 ( ) ;
ksys close ( wfd ) ;
fvalue set byte array ( & fi - > value , bytes ) ;
mparam = ( mime param * ) openssl malloc ( sizeof ( mime param ) ) ;
static void pktgen mark device ( const struct pktgen net * pn , const char * ifname )
struct panel drv data * ddata = dev get drvdata ( dssdev - > dev ) ;
static int fan watchdog active ;
printk ( kern err " STRINGLITERAL \n " , dev - > minor ) ;
asn1 subid decode ( asn1 sck * asn1 , subid t * subid )
if ( drm connector is unregistered ( connector ) )
atomic long inc ( & obd dirty pages ) ;
int intr status , stopping = vpfe - > stopping ;
wlcore free hw ( wl ) ;
if ( is err or null ( reg ) )
void init mmp2 timer init ( void )
static void poll one napi ( struct napi struct * napi )
static void * ref mca bootmem ( void )
static int bcm umi bch write page hwecc ( struct mtd info * mtd ,
nvmet req execute ( & iod - > req ) ;
mutex unlock ( & counter - > child mutex ) ;
return qmp memory device list ( ) ;
static inline void q ( u32 * block , const u8 * kr , const u32 * km )
ixgbe raise i2c clk ( hw , & i2cctl ) ;
if ( ! clhash - > hash )
wake up process ( shost - > ehandler ) ;
if ( in interrupt ( ) | | ( flags & gfp thisnode ) )
static int lvf probe ( const av probe data * p )
static void start ice ( struct ast rtp instance * instance , int offer )
if ( orion5x pci disabled | | bus < orion5x pci local bus nr ( ) )
vhost dev cleanup ( & n - > dev , false ) ;
return dev - > dax dev & & dax synchronous ( dev - > dax dev ) ;
size_t ielen , u8 keymgmt , u8 ucipher , u8 auth )
static int ldlm resource complain ( cfs hash t * hs , struct cfs hash bd * bd ,
int temp , temp hi , temp lo , adc hi , adc lo ;
bug on ( refcount read ( & entry - > refcnt ) < NUMLITERAL ) ;
r = pm runtime put sync ( & dss . pdev - > dev ) ;
if ( machine is ( powermac ) & & blank )
void engine load afalg internal ( void )
return sizeof ( struct fc rscn pl s ) ;
ntb transport link cleanup ( nt ) ;
memset ( inverse , NUMLITERAL , sizeof ( * inverse ) ) ;
if ( kvm emulate instruction ( vcpu , NUMLITERAL ) = = emulate done ) {
err | = ffurl closep ( & nodes [ i ] . uc ) ;
encode seqid op tail ( resp , save , nfserr ) ;
struct tspec body * p tspec , union qos tclas * p tclas , u8 tclas num ,
ret = fiemap prep ( inode , fieinfo , start , & len , btrfs fiemap flags ) ;
if ( ast pthread create background ( & t , & attr , changethread , sc ) ) {
error * err ;
static int btf parse str sec ( struct btf * btf )
block t f2fs start bidx of node ( unsigned int node ofs , struct inode * inode )
if ( ! irq idxs | | ! irq count ) {
if ( stream )
static struct arm pmu * devinit armv7 a5 pmu init ( void )
rcu do batch ( rsp , rdp ) ;
ctx list pool = memblock alloc ( size , smp cache bytes ) ;
struct ad774x chip info * chip = iio priv ( dev info ) ;
mutex unlock ( & dvb - > lock ) ;
nest = nla nest start noflag ( skb , type ) ;
if ( wport - > write urb busy )
assert ( io ctl - > index < io ctl - > num pages ) ;
apic write ( apic lvtt , v & ~ apic lvt masked ) ;
inode = ext2 new inode ( dir , mode , & dentry - > d name ) ;
if ( ( ret ! = NUMLITERAL ) | | ( * count = = NUMLITERAL ) )
void * trace find next entry inc ( struct trace iterator * iter )
unsigned char * data = wacom - > data ;
ff cbs fragment uninit ( priv - > cbc , frag ) ;
apicid = uvhub to first apicid ( uvhub ) | uv apicid hibits ;
smp rmb ( ) ;
get msr ( base cpu , msr nhm turbo ratio limit , & msr ) ;
static int avs probe ( const av probe data * p )
cpus read lock ( ) ;
key = ima hash key ( entry - > digests [ ima sha1 idx ] . digest ) ;
mptcp token destroy ( msk ) ;
semcheck ( dfw , dfw - > st root , deprecated ) ;
static int add supported ( struct sip pvt * pvt , struct sip request * req )
snd soc write ( codec , wm8753 hifi , hifi ) ;
pde free ( ent ) ;
return & smack known invalid ;
unsigned int clkout idx ;
int * temperature )
dentry = debugfs create file ( fn , 0444 , dentry , entry ,
rcu assign pointer ( dev queue - > qdisc , & noop qdisc ) ;
void internal sip register supplement ( struct ast sip supplement * supplement )
void btrfs init work ( struct btrfs work * work , btrfs work func t uniq func ,
serial8250 clear and reinit fifos ( p ) ;
val = core < < ffs ( cm gcr cx other corenum ) ;
virt = acpi os map iomem ( addr , gas - > bit width / NUMLITERAL ) ;
lpj fine = lpj ;
if ( name = = null )
maciisi input ( unsigned char * buf , int nb )
error * err = null ;
cpumask var t * mask ;
int test sw clock freq ( struct test * test maybe unused , int subtest maybe unused )
static int quota getxstatev ( struct super block * sb , int type , void user * addr )
unsigned relts print ( ndo , extract 32bits ( bp ) ) ;
if ( ! order )
init active fence ( & timeline - > last request , & timeline - > mutex ) ;
enter pgmcheck ( cpu , pgm specification ) ;
tty port set active ( & info - > port , NUMLITERAL ) ;
commit ts shared - > data last commit . nodeid = invalid rep origin id ;
static int maybe unused navpoint resume ( struct device * dev )
if ( ! obd )
int esas2r ioctl ( struct scsi device * sd , unsigned int cmd , void user * arg )
struct net device * dev = skb - > dev ;
static int setup iomem ( void )
* secid = isp - > smk inode - > smk secid ;
qdisc hash add ( dev - > qdisc , false ) ;
if ( np & & of id ) {
scsi put host cmd pool ( shost ) ;
ret = i915 gem object sync ( obj , req ) ;
hwaddr pa = vq - > pa ;
p = reserve space ( xdr , NUMLITERAL + nfs4 stateid size + NUMLITERAL ) ;
static int freeze go sync ( struct gfs2 glock * gl )
static struct mansession * find session ( uint32_t ident )
cpumask copy ( top cpuset . cpus allowed , cpu active mask ) ;
priv - > irq mask | = pipe2vbl ( crtc ) ;
const char * label = pbx builtin getvar helper ( chan , stackvar ) ;
int sched clock suspend ( void )
if ( opt )
if ( has modified stack frame ( insn , state ) ) {
marvell set page ( phydev , oldpage ) ;
return ata pci init one ( dev , ppi ) ;
module put ( vdev - > parent module ) ;
set reipl block actual ( reipl block fcp ) ;
free memcg kmem pages ( page , order ) ;
void radix tree node rcu free ( struct rcu head * head )
const struct i915 gem context * ctx ;
g warning ( " STRINGLITERAL " ,
if ( tvb captured length ( tvb ) < frame header length )
if ( unlikely ( skb orphan frags rx ( skb , gfp atomic ) ) )
writeb ( HEXLITERAL , devpriv - > mmio + master interrupt control ) ;
static void free inst ( struct skcipher instance * inst )
if ( of machine is compatible ( " STRINGLITERAL " ) & &
replay state . has unread data = NUMLITERAL ;
static void finish atl transfers ( struct isp116x * isp116x )
needs modeset ( const struct drm crtc state * state )
static ssize_t prochot override duty cycle store ( struct device * dev ,
g free ( timer ) ;
u8 port , struct ib wc * in wc , struct ib grh * in grh ,
( ( form pg class ) getstruct ( tuple ) ) - > relrowsecurity = false ;
err add error data ( NUMLITERAL , buf ) ;
return st - > state & & st - > state - > use timer ;
static int init l2tp nl init ( void )
const struct net device * dev ,
if ( hwcaps - > matches ( hwcaps , hwcaps - > def scope ) )
if ( ! ast strlen zero ( c - > dst ) )
i915 reg t ch ctl = intel dp - > aux ch ctl reg ;
if ( bh - > b assoc map ) {
ata bmdma error handler ( ap ) ;
int err load ts strings ( void )
kfree rcu ( dest , rcu head ) ;
struct device * dev = & h - > drv [ drv index ] - > dev ;
rcu init pointer ( net - > nfnl , nfnl ) ;
clear local apic ( ) ;
return rb prev ( & iovad - > anchor . node ) ;
ocelot port block create ( struct ocelot port private * priv )
ovs lock ( ) ;
s = ( m5208 timer state * ) g malloc0 ( sizeof ( m5208 timer state ) ) ;
s16 dacdata = ( s16 ) data [ i ] ;
vgpu vreg t ( vgpu , status reg ) | = ( NUMLITERAL < < NUMLITERAL ) ;
static uint32_t bonito spciconf readl ( void * opaque , hwaddr addr )
kasan krealloc ( objp , size , gfp nowait ) ;
const struct mlx5 flow spec * spec ,
cpumask clear cpu ( rq - > cpu , rq - > rd - > online ) ;
dispc mgr enable ( omap dss channel digit , NUMLITERAL ) ;
if ( c < NUMLITERAL | | c > NUMLITERAL | | c = = eof )
spin unlock ( & dev - > kvm - > ring lock ) ;
void refrigerator ( void )
if ( ret )
struct vhci device * vdev = & vhci hcd - > vdev [ rhport ] ;
err = ext4 handle dirty metadata ( handle , inode , path - > p bh ) ;
atomic set ( & scsi id - > state , sbp2lu state in shutdown ) ;
openssl assert ( v3 addr is canonical ( addr ) ) ;
return ! tegra pm enter lp2 ( ) ;
be32 * map ;
program interrupt ( env , pgm specification , ilen auto ) ;
struct gnet stats rate est64 * rate est ,
ipr log hex data ( ioa cfg , hostrcb - > hcam . u . raw . data ,
if ( ! access ok ( verify read , from , n ) )
static bool ironlake fbc enabled ( struct drm device * dev )
mounted = lookup mnt ( path - > mnt , path - > dentry ) ;
priv - > tx skb = null ;
debugfs create file ( " STRINGLITERAL " , s ifreg | 0444 , device root , qca ,
get block t get block , dax iodone t complete unwritten )
static bool cpucheck firmware ready ( struct net device * dev )
unsigned long flags ;
if ( ! ep - > udc ) {
enum v4l2 buf type type )
mutex lock ( & nf ct proto mutex ) ;
free page ( ( unsigned long ) cb4 ) ;
ret = iio device register ( indio dev ) ;
struct hlist node * tmp ;
static uint64_t icp pit read ( void * opaque , hwaddr offset ,
show stack loglvl ( null , null , kern err ) ;
kvm x86 ops . nested ops - > check events ( vcpu ) ;
static uint32_t ppc4xx gpt readb ( void * opaque , hwaddr addr )
stac issue unsol event ( codec , nid ) ;
mutex lock nested ( & root - > lock , root - > level ) ;
memcg = mem cgroup from id ( id ) ;
static int get sample rate v2v3 ( struct snd usb audio * chip , int iface ,
static int decode pic timing ( hevc context * s , int size )
static int fsb probe ( const av probe data * p )
dqm unlock ( dqm ) ;
rb erase init ( & pos - > rb node , root ) ;
static int omap rfbihw remove ( struct platform device * pdev )
mutex unlock ( & pinctrldev list mutex ) ;
queue work ( irqfd cleanup wq , & irqfd - > shutdown ) ;
tcg out ldsta ( s , ret , arg1 , arg2 , ld , ldx ) ;
while ( fc - > active background < fc - > max background & &
static int split symbol offset ( char * symbol , unsigned long * offset )
fscache relinquish cookie ( volume - > cache , null ,
assert ( stage ) ;
value = ( ~ g guint64 constant ( NUMLITERAL ) < < NUMLITERAL ) | data ;
static int mmc test area io ( struct mmc test card * test , unsigned long sz ,
int set unmaskirq ( ide drive t * drive , int arg )
add path ( rel , create seqscan path ( root , rel , null ) ) ;
lock limit = rlimit ( rlimit memlock ) ;
sclp max = sclp . max cores * sclp max ? : nr cpu ids ;
explain indent text ( es ) ;
size_t memsize = sizeof ( void * ) * nr node ids ;
void l2cap sock kill ( struct sock * sk )
free ( identity ) ;
g free ( fidp ) ;
static int mpjpeg read probe ( const av probe data * p )
result = ps3 alloc irq ( cpu , outlet , virq ) ;
kfree sensitive ( req ctx - > iv ) ;
if ( is idle task ( current ) )
return ovl dentry lower ( oe ) ;
drm debug kms ( " STRINGLITERAL \n " , i , ret ) ;
ret = openssl malloc ( sizeof ( * ret ) ) ;
struct hfa384x infframe * inf )
lo - > lo pending = NUMLITERAL ;
void mac enable irq ( unsigned int irq )
spte | = spte ad disabled mask ;
unsigned int pipe ;
print ip sym ( kern default , pc ) ;
link = of parse phandle ( port - > dn , " STRINGLITERAL " , index ) ;
return ! ! tz1090 gpio read bit ( bank , reg gpio din , offset ) ;
dbg info ( " STRINGLITERAL \n " , mode ) ;
for ( i = NUMLITERAL ; i < s - > num ports ; i + + ) {
struct nfs page * p = kmem cache zalloc ( nfs page cachep , gfp noio ) ;
return from < nr irqs base ? nr_irqs_base : from ;
j + = scnprintf ( buf + j , buflen - j , " STRINGLITERAL " ,
init single pfn ( pfn , zid , nid , true ) ;
facilities = ( unsigned long long * ) get zeroed page ( gfp kernel | gfp dma ) ;
bp = xfs buf get ( target , ioff , isize , flags ) ;
kfree rcu ( upayload , rcu ) ;
ret = addrconf fixup forwarding ( ctl , valp , val ) ;
return sprintf ( buf , " STRINGLITERAL \n " , target - > ch . req lim ) ;
static int init init queue ( struct driver data * drv data )
r = qemu get clock ns ( vm clock ) / NUMLITERAL ;
err clear ( es , es - > top , NUMLITERAL ) ;
return hmc5843 read measurement ( data , chan - > scan index , val ) ;
uat key record update cb ( void * r , char * * err )
reg | = en age port | en age dynamic | fast age str done ;
struct nft counter percpu priv * priv = nft expr priv ( expr ) ;
chain - > nid = numa no node ;
aname - > ino = audit ino unset ;
return p > = t & & p < t + thread size - size ;
if ( zfcp qdio open ( adapter - > qdio ) ) {
mutex lock ( & smc ib devices . mutex ) ;
struct query * query , * next ;
dev err ( w - > dapm - > dev , " STRINGLITERAL \n " , ret ) ;
goto err cleanup ;
pci set irq ( pci dev , level ) ;
intel gt queue hangcheck ( gt ) ;
if ( ! vif & & ar - > state ! = ath6kl state recovery ) {
atomic inc ( & worker - > pool - > nr running ) ;
set page links ( page , zone , nid ) ;
nmi shootdown cpus ( kdump nmi callback ) ;
domain - > nid = numa no node ;
* cs reloc = & p - > relocs [ idx ] ;
if ( dlm is lockres migratable ( dlm , res ) )
i915 reg t drbreg = gen8 drbregl ( client - > doorbell id ) ;
int irqval = request irq ( dev - > irq , ni65 interrupt , NUMLITERAL ,
void iomem * addr ;
char * buf , * guid str ;
kfree sensitive ( buf to free - > password ) ;
pr debug ( " STRINGLITERAL "
struct dm mpath io * mpio ;
return rio get did ( port - > sys size , result ) ;
msdc clr fifo ( host ) ;
obj = old state - > fb - > obj [ NUMLITERAL ] ;
return ( u32 ) mdc * fcx max data factor ;
if ( is enabled ( config ath10k dfs certified ) & & ar - > dfs detector )
blkdev put ( bdev , mode ) ;
static void omap tcmi init ( memory region * memory , hwaddr base ,
static int switch asic ( struct echoaudio * chip , short asic )
if ( drive > = swd - > floppy count )
stats cpu = this cpu ptr ( tg - > stats cpu ) ;
int iwl get free ucode key offset ( struct iwl priv * priv )
sixpack decode ( struct sixpack * sp , const unsigned char * pre rbuff , int count )
* transfer fnc = compat keys . kcvimagebuffertransferfunction itu r 2020 ;
mlx5dr domain lock ( dmn ) ;
kfree ( client ) ;
if ( ! kdump in progress ( ) )
if ( unlikely ( i - > count < bytes ) )
xfs buf mark corrupt ( agibp ) ;
hwaddr start addr , ram addr t size )
if ( is err ( sgt ) ) {
struct mem cgroup * mem ;
ip vs service find ( int af , u16 protocol , const union nf inet addr * vaddr ,
return min t ( u16 , power limit , max rate power ) ;
return bdi - > dev name ;
unsigned long pfn = bfn to pfn ( pfn down ( baddr ) ) ;
int ptrace may attach ( struct task struct * task )
teehbr write ( NUMLITERAL ) ;
pg data t * pdp = pgdat list [ node ] ;
if ( btrfs ino ( btrfs i ( inode ) ) ! = btrfs free ino objectid )
tc gv tmp = tcg temp new ( ) ;
count = trace seq used ( & iter - > seq ) - save len ;
dma free coherent ( & cdev - > pdev - > dev , chain - > page size ,
unsigned char * data mode )
dev - > valid = false ;
cfq slice expired ( cfqd , NUMLITERAL ) ;
return ! ! atsecure ;
if ( sh chan - > shdma chan . slave id > = NUMLITERAL ) {
g free ( oss - > pcm buf ) ;
ptr = fill cpu elf notes ( ptr , sa , null ) ;
notrace void arch touch nmi watchdog ( void )
int xhci start ( struct xhci hcd * xhci )
set cpu online ( cpu id , false ) ;
if ( state - > state = = NUMLITERAL )
port self = nla nest start noflag ( skb , ifla port self ) ;
set bit ( ath stat invalid , ah - > status ) ;
ast mutex lock ( & peerl . lock ) ;
const struct cal fmt * fmt ;
return ib umem start ( & umem odp - > umem ) ;
gimme edge ( planner info * root , gene gene1 , gene gene2 , edge * edge table )
if ( ! padapter - > driver stopped & &
text window tw = to text window ( l , NUMLITERAL ) ;
r = dss get dispc clk rate ( ) ;
value = deci kelvin to celsius ( ( value & HEXLITERAL ) ) * NUMLITERAL ;
if ( ! rc | | ! have reloc root ( root ) )
struct kmap * kernel kmap = kernel map ? map kmap ( kernel map ) : null ;
c - > decomp buf = av malloc ( c - > dsize + decomp buf padding ) ;
fprintf ( stderr , " STRINGLITERAL \n " , value , len ) ;
if ( intel engine signaled ( signaller , seqno ) )
if ( ! ah - > curchan )
vhost scsi get tag ( struct vhost virtqueue * vq ,
pr info ( prefix
struct max517 data * data = iio priv ( dev info ) ;
gem bug on ( ! list empty ( & pt - > link ) ) ;
if ( s - > dataplane & & ! s - > dataplane started ) {
gasket log debug ( gasket dev , " STRINGLITERAL " ,
snr offset = ( snr offset - NUMLITERAL ) * NUMLITERAL ;
int sisusb setidxregandor ( struct sisusb usb data * sisusb , u32 port , u8 idx ,
ptr = vmalloc ( size , lflags , page kernel ) ;
static void slow bar writel ( void * opaque , hwaddr addr , uint32_t val )
static void cyrix identify ( struct cpuinfo x86 * c )
if ( ! shirq - > irq chip )
fan1 target show ( struct device * dev , struct device attribute * da , char * buf )
fib table flush ( net , tb , true ) ;
int pevent unregister print function ( struct tep handle * pevent ,
if ( getpeercon raw ( port - > sock , & client label peer ) < NUMLITERAL )
static const unsigned char map [ NUMLITERAL ] = " STRINGLITERAL " ;
xchk btree cur fsbno (
guint32 val = NUMLITERAL , length ;
void cgroup rstat updated ( struct cgroup * cgrp , int cpu )
bool init memblock memblock overlaps region ( struct memblock type * type ,
ha - > synced - - ;
return platform driver probe ( & omap mmc driver , omap mmc probe ) ;
void sm750 hw i2c close ( void )
if ( ! raw capacity )
if ( fpu - > fpstate active ) {
ret = ( bn ctx * ) openssl malloc ( sizeof ( bn ctx ) ) ;
void hl set max power ( struct hl device * hdev )
priv - > workqueue = alloc ordered workqueue ( drv name , NUMLITERAL ) ;
free uid ( ns - > creator ) ;
vxh - > vx flags | = vxlan hf gbp ;
tx = kvzalloc ( sz , gfp kernel | gfp retry mayfail ) ;
struct tnode * chi = tnode get child ( tn , i ) ;
x86 init . timers . setup percpu clockev ( ) ;
static ssize_t alarms temp show ( struct device * dev , struct device attribute
if ( amdgpu sriov vf ( adev ) ) {
static bool intel breadcrumbs enable irq ( struct intel breadcrumbs * b )
bio integrity free ( bio ) ;
if ( za - > ch comment ) free ( za - > ch comment ) ;
if ( ! rb empty node ( & cfqg - > rb node ) )
visit type str ( v , name , & ptr , errp ) ;
return single open net ( inode , file , ip vs stats show ) ;
static void * test listener pvt alloc ( void )
return nr free zone pages ( gfp zone ( gfp user ) ) ;
pci dev id = kmalloc ( sizeof ( * pci dev id ) , gfp kernel ) ;
plpgsql yylval . row = plpgsql build rowtype ( class oid ) ;
mem cleanup ( entity , sizeof ( xml entity ) ) ;
return xfs showargs ( xfs m ( root - > d sb ) , m ) ;
cfq blkiocg update io remove stats ( cfqg to blkg ( rq cfqg ( rq ) ) ,
if ( precision > NUMLITERAL )
ret = ( dso * ) openssl malloc ( sizeof ( dso ) ) ;
flush workqueue ( system wq ) ;
return tep find event ( pevent , type ) ;
bp = g malloc ( sizeof ( * bp ) ) ;
if ( id > idr max ( p - > layer + NUMLITERAL ) )
if ( ! table )
cifs dbg ( fyi , " STRINGLITERAL \n " , rc ) ;
bool polarity = par - > polarity ;
int toshiba open ( wtap * wth , int * err , gchar * * err info u )
r = omap dsi update ( dssdev , td - > channel ,
desc = irq to desc ( irq ) ;
if ( ( int ) res . a0 < NUMLITERAL )
mpi free ( sinfo - > sig . mpi [ NUMLITERAL ] ) ;
rcu init pointer ( netlbl unlhsh def , null ) ;
struct dm snap exception * ex , * next ;
tcg gen exit tb ( ( uintptr_t ) s - > base . tb ) ;
ret = target register template ( & loop ops ) ;
if ( ! ch - > st | | ! ch - > st - > layer1 )
else if ( ! tx | | ! tx - > tx lnetmsg )
err = rocker flow tbl term mac ( rocker port , trans ,
armsse class * asc = arm sse class ( klass ) ;
ast log ( log debug , " STRINGLITERAL \n " , outdigit ) ;
dma free coherent ( & dev - > pcidev - > dev , cnic page size ,
mutex lock ( & register mutex ) ;
ret = i915 gem object wait rendering ( obj , true ) ;
smum send msg to smc with parameter ( hwmgr , msg , clk freq , null ) ;
ret = run delayed data ref ( trans , node , extent op ,
state = rwsem owner state ( new , new flags , nonspinnable ) ;
if ( num > max ) {
static int mwl8k init firmware ( struct ieee80211 hw * hw , char * fw image )
if ( q ) {
valid = nfs4 validate stateid ( & si ) ;
bio for each segment ( bvec , bio , iter ) {
wakeup source free ( ws ) ;
static void tcp mtup probe success ( struct sock * sk )
if ( ! usable hole addr ( rb , size ) )
kfree ( priv ) ;
unsigned long load = get rq runnable load ( this rq ) ;
bp - > len = cpu to be32 ( nbytes ) ;
sockfd put ( tcp conn - > sock ) ;
master - > ste . assigned = false ;
armpmu free irqs ( cpu pmu ) ;
qlist remove ( client , link ) ;
help ( state ? state - > root_argp : NUMLITERAL , state , stream , flags ,
ret = add port ( coredev , port ) ;
struct kernfs open file * of = s - > private ;
u32 cd = NUMLITERAL , bdiv = NUMLITERAL ;
cgroup rm cftypes ( pol - > cftypes ) ;
xml buf content ( const xml buf * buf )
complete ( & drive - > gendev rel comp ) ;
count = nfp vnic get hw stats count ( NUMLITERAL ) ;
for each cpu and ( cpu , cfg - > domain , cpu online mask )
if ( id . timeout < = sctp event timeout max )
read lock bh ( & local - > sta lock ) ;
strncpy ( data + i * eth gstring len ,
free page ( ( unsigned long ) hvcs pi buff ) ;
rc = smk curacc ( skp - > smk known , mode , & ad ) ;
if ( ! access ok ( dst , NUMLITERAL ) )
g free ( fdt ) ;
set irq chip ( irq , & i8259a irq type ) ;
dc - > unrealize = spapr cpu core unrealize ;
set sta flags ( sta , wlan sta ps ) ;
} else if ( * err ! = NUMLITERAL ) {
toggle branch cache flush ( enable ) ;
rrc ciph info tree = g tree new full ( rrc key cmp ,
result = NUMLITERAL ;
swreg dst , u8 bmask , swreg src , bool zero )
nch = mlx5e get max num channels ( mdev ) ;
mirror wait for free in flight slot ( s , null ) ;
char fullkey [ max db field ] ;
int err load conf strings ( void )
unsigned short ext1 ee len , ext2 ee len ;
sysfs hash and remove ( kobj - > sd , null , attr - > name ) ;
i len = strlen ( ( const char * ) path ) ;
if ( sdata & & sdata - > vif . type = = ieee80211 if type ibss ) {
memcpy ( & erp - > er extbuf [ erp - > er extcount ] ,
syscall define2 ( sethostname , char user * , name , int , len )
static int must check deliver ckc interrupt ( struct kvm vcpu * vcpu )
phys addr t * base , unsigned long * size )
le16 wpwd [ NUMLITERAL ] ;
work = kmalloc ( sizeof ( * work ) , gfp nofs ) ;
static ssize_t php glob stream read ( php stream * stream , char * buf , size_t count )
static void p6 disable pmc ( unsigned int pmc , unsigned long mmcr [ ] )
update stats ( relation get relid ( heap ) , NUMLITERAL ) ;
vhost dev cleanup ( & n - > dev ) ;
void mem cgroup update file mapped ( struct page * page , int val )
explain one query ( ( query * ) lfirst ( l ) , NUMLITERAL ,
batadv hash remove ( bat priv - > bla . claim hash , batadv compare claim ,
cred = rpc lookup cred ( ) ;
intel sanitize gt powersave ( dev priv ) ;
if ( arr ndim ( query ) > NUMLITERAL )
fib free table ( tb ) ;
return security ptrace access check ( task , mode ) ;
bool qemu wakeup suspend enabled ( void )
ret = ptr err ( pwrseq ) ;
lw lock acquire ( two phase state lock , lw exclusive ) ;
debugfs create u64 ( " STRINGLITERAL " , 0444 , dir , & nbd - > blksize ) ;
static void kvm mmu zap mmio sptes ( struct kvm * kvm )
bool has ns = kernfs ns enabled ( parent ) ;
if ( cpu has pkeys ( ) ) {
kvfree ( n ) ;
drm info ( & i915 - > drm , " STRINGLITERAL \n " ) ;
if ( s390 facilities & facility ext imm ) {
xen device unrealize ( device ( xendev ) ) ;
static int bfin spi flush ( struct driver data * drv data )
static inline int ubd file size ( struct ubd * ubd dev , u64 * size out )
diff = next - qemu get clock ns ( vm clock ) ;
assert ( new size > ip - > i size ) ;
heap close ( reldesc , no lock ) ;
llist for each entry safe ( work , tmp , llnode , llnode ) {
if ( afs begin vnode operation ( & fc , vnode , key , true ) ) {
blocking notifier call chain ( & reboot notifier list , sys restart , cmd ) ;
len = seq buf used ( s ) - s - > readpos ;
hash by src ( const struct net * net , const struct nf conntrack tuple * tuple )
spin unlock ( & ci - > i ceph lock ) ;
return ! ! s - > regs [ enet rdar ] ;
schedule hrtimeout range clock ( ktime t * expires , u64 delta ,
tfr ( fd = qemu open ( filename , o rdwr ) ) ;
pthread mutex lock ( & threadstoragelock ) ;
if ( pol - > cpd free fn ) {
char fs id buf [ sizeof ( sdp - > sd fsname ) + NUMLITERAL ] ;
if ( ! err & & ( iattr - > ia valid & attr uid ) ) {
if ( ! g ascii isdigit ( outhdr string [ n ] ) ) {
return bfa pport get stats ( bfa , stats , cbfn , cbarg ) ;
line6 pcm release ( line6pcm , line6 bits pcm monitor ) ;
ret = ath10k send key ( arvif , key , cmd , macaddr , def idx ) ;
exit nicely ( NUMLITERAL ) ;
set irq chip ( i , & i8259 irq type ) ;
memcpy ( x86 boot params , real mode data , boot param size ) ;
if ( drm - > client . device . info . chipset = = HEXLITERAL )
spin lock nested ( & request - > timeline - > lock , single depth nesting ) ;
ret = - erofs ;
mutex unlock ( & dvbdmx - > mutex ) ;
static void octeon irq ciu1 ack v2 ( unsigned int irq )
if ( tracing check open get tr ( tr ) )
return wm coeff read ctrl ( ctl , buf , len ) ;
* number = ebml unknown length ;
if ( ! is err ( clk ) ) {
wh [ NUMLITERAL ] = sema ;
pm wakeup clear ( true ) ;
uint8_t * buf , int len , int write )
put packet ( " STRINGLITERAL " ) ;
gem bug on ( intel context is pinned ( ce ) ) ;
msr b = filter - > size + msr a - NUMLITERAL ;
if ( dai - > ops & & dai - > ops - > set pll )
fip serr ( fips f fips drbg cprng test , fips r drbg stuck ) ;
bpath . path . pathtarget = rel - > reltarget ;
static void musicpal lcd write ( void * opaque , hwaddr offset ,
mutex unlock ( & queue - > timer mutex ) ;
btrfs fdatawrite range ( inode - > i mapping , start , end , wb sync all ) ;
incomplete splits = nil ;
pdata - > pkg id = pdev - > id ;
if ( is reachable ( config input ) & & info - > input ) {
return div64 long ( offset64 < < ( ntp scale shift - shift fll ) , secs ) ;
if ( nlp chk node act ( ndlp ) & & ndlp - > rport )
txtid - > paused = false ;
translate = ! ! * ( extra ) ;
struct dso * dso new ( const char * name )
end = iova pfn ( region - > start + region - > length - NUMLITERAL ) ;
if ( unlikely ( strp - > stopped ) | | strp - > paused )
for ( ; b < b max ; b + + )
char * template = ast alloca ( NUMLITERAL + strlen ( data ) ) ;
if ( ! is cow mapping ( vma - > vm flags ) )
if ( likely ( ! in nmi ( ) ) )
static struct btrfs root * btrfs alloc root ( struct btrfs fs info * fs info )
bool radeon ddc probe ( struct radeon connector * radeon connector )
static u64 dma iommu get required mask ( struct device * dev )
u32 * bytes , u32 * * pointer )
static noinline int build verbs ulp payload (
hw - > port = ctrl - > port ;
if ( ! ssl in init ( s ) )
return enable signals ( p info , task pid ( current ) , arg ) ;
error = security file mmap ( null , NUMLITERAL , NUMLITERAL , NUMLITERAL , address , NUMLITERAL ) ;
request = operation - > request - > payload ;
vfio ccw put device ( vcdev ) ;
void zd op stop ( struct ieee80211 hw * hw )
label = idr find ( & aa secids , secid ) ;
rds ib flush mr pool ( pool , NUMLITERAL , null ) ;
pac = pauth computepac ( x , y , env - > keys . apga ) ;
bool retransmit = false ;
void f2fs ra meta pages cond ( struct f2fs sb info * sbi , pgoff t index )
nf ct tmpl free ( ct ) ;
ret = try or set cluster ( fh , master , true ) ;
vmx cache reg ( vcpu , vcpu exreg cr3 ) ;
* seqno = i915 gem next request seqno ( ring ) ;
list * newstuff ;
ptr = memblock alloc ( page size , page size ) ;
int was dirty , jlist ;
printk stack address ( addr , reliable ) ;
ret = pd - > device - > dereg mr ( pd - > internal mr ) ;
if ( size ! = sizeof ( u32 ) )
unsigned int flags = fault flag remote ;
packet = g malloc ( sizeof ( net packet ) + size ) ;
buf - > state = uvc buf state ready ;
u32 cmd table sz , enum sw chnl cmd id cmd id ,
return qeth set real num tx queues ( card , channels - > tx count ) ;
kvm hv vm deactivated ( ) ;
if ( validate timer rate ( ) )
user = t - > cred - > user ;
reg fld mod ( dss , dss pll control , NUMLITERAL , NUMLITERAL , NUMLITERAL ) ;
struct device node * np ;
( * do ops ) ( mmu , ops , last filled ) ;
if ( refcount dec not one ( & nf - > nf ref ) )
static int cap key alloc ( struct key * key , const struct cred * cred ,
obd slab alloc ptr gfp ( res , ldlm resource slab , gfp nofs ) ;
pps unlock ( intel dp ) ;
struct stat64 st ;
ret = rv8803 read reg ( client , rv8803 ram ) ;
ep = fc exch em alloc ( lport , ema - > mp ) ;
nouveau fence context free ( & fctx - > base ) ;
ir raw event set idle ( input dev , false ) ;
static int snd timer check slave ( struct snd timer instance * slave )
netdev err ( dev , " STRINGLITERAL \n " , dev - > name ) ;
mempool free ( rq - > special vec . bv page , sd page pool ) ;
struct hists * leader hists = evsel hists ( pos - > leader ) ;
void xgi reg init ( struct vb device info * xgi pr , unsigned long base addr )
page = alloc pages node ( node , flags , order ) ;
if ( cur - > type = = chan - > tech - > type )
tipc msg init ( msg , link config , type , dsc h size , dest domain ) ;
if ( argp - > help filter )
static void redrat3 handle async ( struct urb * urb )
kvfree ( adev - > vce . saved bo ) ;
if ( ! ( how & autofs exp immediate ) ) {
static struct cache * cache do one devnode ( struct device node * node , int level )
max mtu = skb max head ( net skb pad + net ip align ) ;
cmci storm disable banks ( ) ;
void kvm load guest xcr0 ( struct kvm vcpu * vcpu )
static void slavio led mem writew ( void * opaque , hwaddr addr ,
int i , idx = hwc - > idx ;
if ( iov iter rw ( iter ) = = write ) {
if ( ! size | | ( size > > page shift ) > totalram pages ( ) )
if ( debug atleast ( NUMLITERAL ) ) {
comedi pci detach ( dev ) ;
if ( per cpu ( cpuid4 info , cpu ) = = null )
struct inet6 ifaddr * ifp ;
line wrap stream ( file * stream , size_t lmargin , size_t rmargin , ssize_t wmargin )
g free ( bs - > opaque ) ;
return genpd start dev ( genpd , dev , true ) ;
error = xfs scrub setup fs ( sc , ip ) ;
align = pci resource alignment ( dev , res ) ;
static ssize_t m48t59 nvram write ( struct file * filp , struct kobject * kobj ,
struct sched atom * event , * wakee event ;
static int s3c2412 pm add ( struct device * dev , struct subsys interface * sif )
ftp alloc ( ftpbuf t * ftp , const long size , zend string * * response )
struct page * page ;
unistim set owner ( p , newchan ) ;
uint8_t buf [ read buf len ] ;
for each watchdog cpu ( cpu )
static long get offset ( unsigned int * size , elf shdr * sechdr )
else if ( family = = HEXLITERAL | | family = = HEXLITERAL )
if ( spk serial wait for xmitr ( synth ) )
if ( s - > tlsext session ticket = = null ) {
read events ( true , null ) ;
static void prepare cold cpu ( unsigned int cpu )
if ( dummy prog id = = curr prog id )
if ( ast strlen zero ( callerid ) )
pr debug ( " STRINGLITERAL " , func ) ;
static void early init amd ( struct cpuinfo x86 * c )
eeh add flag ( eeh force disabled ) ;
if ( dev - > is open [ ch rx ] & & scan rate )
mutex lock ( & bus - > devnum next mutex ) ;
float8 infinity = get float8 infinity ( ) ;
int nvec , struct irq affinity * affd )
struct iwl txq * txq = trans pcie - > txq [ txq id ] ;
unsigned int current bits ;
page = alloc pages ( gfp kernel , NUMLITERAL ) ;
open archive ( & ah , false ) ;
pci hp del ( & ctrl - > hotplug slot ) ;
static int unlocked usbctlx cancel async ( struct hfa384x * hw ,
mp3 f . format = ast format slin ;
static unsigned int ipv6 defrag ( void * priv ,
kvm inject page fault ( vcpu , addr , err code ) ;
if ( test bit ( unix gc maybe cycle , & u - > gc flags ) )
ch - > regs [ dbdma status ] | = bt ;
set vecs + = affd - > set size [ i ] ;
result = setresuid ( NUMLITERAL , uid , NUMLITERAL ) ;
int delay , sample type = dbs info - > sample type ;
loops * = arm delay ops . ticks per jiffy ;
static int set d phyfmtvalue ( struct us data * us )
* err = g strdup ( " STRINGLITERAL " ) ;
fpscr = current - > thread . fpscr . val ;
static void wdt diag288 unrealize ( device state * dev )
int riow flush mark ( unsigned long i port p , struct cmd blk * cmd blk p )
do db ( elog ( log , " STRINGLITERAL " , nfile ) ) ;
blocking notifier call chain ( & netdev chain , netdev down , dev ) ;
hw error ( " STRINGLITERAL \n " , func , len ) ;
for ( u = NUMLITERAL ; u < dst height ; u + + ) {
m - > t . pagelist = null ;
const struct hash ipmark6 * h = set - > data ;
struct scsi host * shpnt = ( struct scsi host * ) dev id ;
bug on ( obj - > write domain ) ;
oid constraint oid , oid index oid , bool on insert )
em - > ops - > destroy ( em ) ;
if ( ia5casecmp ( baseptr , emlptr ) = = NUMLITERAL )
int attribute align arg av buffersink poll frame ( av filter context * ctx )
nor - > params . set 4byte addr mode ( nor , true ) ;
cic = cfq cic lookup ( cfqd , tsk - > io context ) ;
struct device id result device id = { NUMLITERAL } ;
int ret = NUMLITERAL , i = NUMLITERAL , idx ;
mutex lock ( & sound oss mutex ) ;
bug on ( mapping gfp constraint ( mapping , gfp fs ) ) ;
if ( dev priv - > psr . psr2 enabled )
if ( ! ossl prov is running ( ) | | key = = null )
slcompress * comp = wmem new0 ( wmem file scope ( ) , slcompress ) ;
void f2fs release discard addrs ( struct f2fs sb info * sbi )
u16 remaining steps = NUMLITERAL ;
g slice free ( any avp type , ( any avp type * ) node ) ;
atomic dec ( & clobj - > vob transient pages ) ;
pcie write cmd nowait ( ctrl , slot cmd , pci exp sltctl aic ) ;
static inline uint64_t cvmx usb read csr64 ( struct cvmx usb state * usb ,
wait event cmd ( conf - > wait for quiescent ,
struct dst entry * dst = rcu dereference bh ( sk - > sk dst cache ) ;
struct acpi pci device * list head ;
c - > cpu index = nr cpu ids ;
while ( cpu thread is idle ( cpu ) ) {
if ( i2c check addr busy ( adap , addr list [ i ] ) ) {
if ( ovl already copied up ( dentry , flags ) )
evo kick ( push , nvd0 mast ( crtc - > dev ) ) ;
return in task ( ) & & task - > make it fail ;
if ( is immutable ( & ip - > i inode ) )
res = tipc bcast init ( net ) ;
wl trace ( " STRINGLITERAL \n " , wlc hw - > unit ) ;
count vm event ( pgfault ) ;
lockdep assert held ( & wq pool mutex ) ;
if ( level < NUMLITERAL | | level > = array size ( val ) ) {
build bug on ( is rwsem owner spinnable ( rwsem owner unknown ) ) ;
struct ipoib mcast * ipoib mcast find ( struct net device * dev , void * mgid )
if ( ! pr reg ) {
err = setattr prepare ( dentry , attr ) ;
void svc tcp prep reply hdr ( struct svc rqst * rqstp )
static void catc tx done ( struct urb * urb )
assert ( relation - > rd isnailed ) ;
static void edge bulk out data callback ( struct urb * urb )
acpi status acpi hw legacy wake prep ( u8 sleep state , u8 flags )
qrtr local enqueue ( null , skb , type , from , to ) ;
slotno = simple lru zero page ( xact ctl , pageno ) ;
struct virtblk req * vbr = blk mq rq to pdu ( rq ) ;
sched fork ( NUMLITERAL , idle ) ;
int lprocfs exp print hash ( cfs hash t * hs , struct cfs hash bd * bd ,
bug on ( irq init percpu irqstack ( smp processor id ( ) ) ) ;
} else if ( intel pipe will have type ( crtc , intel output lvds ) & &
skb = dpaa cleanup tx fd ( priv , fd , false ) ;
u32 rt cookie = NUMLITERAL ;
logbuf unlock irq ( ) ;
refcount set ( & req - > count , NUMLITERAL ) ;
struct net device * dev , struct qdisc * sch , void * data ,
cfs hash full bkts ( struct cfs hash * hs )
error report ( " STRINGLITERAL " , func ) ;
static int xfrm skb check space ( struct sk buff * skb )
lru add drain cpu ( get cpu ( ) ) ;
mark page accessed ( eb - > pages [ NUMLITERAL ] ) ;
create arg cmp ( enum tep filter cmp type ctype )
u8 fw status ;
thread pool submit co ( pool , worker cb , data ) ;
if ( address + sigframe max size > = uregs - > gpr [ NUMLITERAL ] )
if ( ! total profile count ) {
pm request autosuspend ( dev - > dev ) ;
if ( ! clockevent state oneshot ( bc ) )
clear bit ( page abs , unsentmap ) ;
return init generic compat pmu ( ) ;
void ocfs2 free ac resource ( struct ocfs2 alloc context * ac )
static int ipt dnat checkentry ( const struct xt tgchk param * par )
if ( is support sw smu ( adev ) )
se = qemu mallocz ( sizeof ( save state entry ) ) ;
pr info ( " STRINGLITERAL \n " , path nm ) ;
int pevent data flags ( struct tep handle * pevent , struct tep record * rec )
vdd = voltdm - > vdd ;
static void ps3av cnv chstat ( u8 * chstat , const u8 * cs info )
qemu aio wait all ( ) ;
unlock page cgroup ( pc ) ;
heur dissector add ( " STRINGLITERAL " , dissect jxta udp heur , proto udp jxta ) ;
void iomem * ioaddr = gc - > base + gpio pin direction ;
static uint64_t invalid read ( void * opaque , hwaddr addr ,
int r = internal vsyscall ( clock gettime , err , NUMLITERAL , clock id , tp ) ;
int icv stashing , bool encrypt )
if ( ! refcount inc not zero ( & cur - > refcnt ) ) {
if ( ! lump )
height = node - > path & radix tree height mask ;
writel ( data , ( void iomem * ) ( ( unsigned long ) ofs ) ) ;
static int syscall enter define fields ( struct ftrace event call * call )
block allocator = wmem new ( null , wmem block allocator t ) ;
dj report = kzalloc ( sizeof ( struct dj report ) , gfp kernel ) ;
static uint64_t nvic sysreg read ( void * opaque , hwaddr addr ,
list for each entry ( nfit spa , & acpi desc - > spas , list ) {
bool f2fs should update inplace ( struct inode * inode , struct f2fs io info * fio )
if ( ! dev | | ifp - > idev - > dev = = dev )
int pevent data flags ( struct tep handle * pevent , struct pevent record * rec )
return enable ? true : false ;
struct vlan entry * vlan ;
} while ( - - i ) ;
const static usb mixer elem resume func t resume funcs [ ] = {
lockdep assert held once ( & br - > hash lock ) ;
drop rel file nodes all buffers ( & rnode , NUMLITERAL ) ;
spin lock ( & pids lock ) ;
unsigned int i = NUMLITERAL ;
if ( snd hda jack detect state ( codec , pin ) = = hda jack present ) {
bfa mem kva curp ( fcp ) = ( u8 * ) iotag ;
if ( unlikely ( generation & & inode - > i generation ! = generation ) ) {
zval bool ( tmp , b ) ;
fd = get unused fd flags ( o cloexec ) ;
return nt init name ( ptr , NUMLITERAL , vmcoreinfo , size , " STRINGLITERAL " ) ;
int from phy , bool update )
static void mts transfer done ( struct urb * transfer )
submit queue ( engine , request ) ;
void iotlb lock get ( struct omap iommu * obj , struct iotlb lock * l )
if ( ! mrt ) {
s390 idle check ( ) ;
if ( domain & & irq domain is hierarchy ( domain ) )
if ( qatomic dec fetch ( & mon - > suspend cnt ) = = NUMLITERAL ) {
sas eh finish cmd ( cmd ) ;
int64_t tag = NUMLITERAL ;
if ( gpio is valid ( priv - > config . reset n io ) )
em28xx isocdbg ( " STRINGLITERAL \n " , func ) ;
void init bcm63xx nvram init ( void * addr )
pm runtime disable ( & pdev - > dev ) ;
return sprintf ( buf , " STRINGLITERAL \n " , NUMLITERAL ) ;
static int ecn mt check ( const struct xt mtchk param * par )
vchiq bulk receive ( unsigned int handle , void * data ,
virtio add feature ( & features , virtio console f multiport ) ;
xen blkif put ( pending req - > blkif ) ;
if ( ! str wid . val )
static bool match mc ( struct cpuinfo x86 * c , struct cpuinfo x86 * o )
smp scan config ( address , HEXLITERAL ) ;
gpd pocket fan set speed ( fan , gpd pocket fan min speed ( ) ) ;
static int devinit acer led init ( struct device * dev )
static void puv3 dma write ( void * opaque , hwaddr offset ,
return phy read mmd indirect ( phydev , mdio pcs eee wk err ,
monitor read bdrv key ( bs ) ;
if ( is enabled ( config migration ) & & ( flags & ttu migration ) & &
ptep ipte ( addr , ptep ) ;
int q = rx ring - > reg idx ;
return percpu counter init ( & pl - > events , NUMLITERAL , gfp kernel ) ;
ipoib mcast stop thread ( dev ) ;
long num idx = NUMLITERAL ;
static void visor read int callback ( struct urb * urb )
unsigned int get power mode ( void )
static struct pmu hw events * cpu pmu get cpu events ( void )
termios = & port - > state - > port . tty - > termios ;
int i , j , k = az - NUMLITERAL , nr range = az ;
int core tmr alloc req (
spin unlock bh ( & enic - > rfs h . lock ) ;
result = curl write ( conn , firstsocket , conn - > data - > state . ulbuf ,
data = kmalloc ( msg . len , gfp kernel ) ;
res = sas find bcast phy ( dev , & phy id , i , true ) ;
put packet ( " STRINGLITERAL " ) ;
logical chip type t sm750 get chip type ( void )
bnx2x nic unload ( bp , unload close ) ;
if ( & cx - > streams [ i ] . video dev )
call = malloc ( sizeof ( * call ) ) ;
return buf - > vaddr ? buf - > vaddr + pgnum * page_size : null ;
inline void * fixup red left ( struct kmem cache * s , void * p )
static int virtnet reset ( struct virtnet info * vi , int curr qp , int xdp qp )
struct cl client cache * cache = sbi - > ll cache ;
static void check cx686 slop ( struct cpuinfo x86 * c )
clk disable unprepare ( fpc - > clk [ fpc - > period . clk select ] ) ;
e100 hardware send packet ( np , buf , skb - > len ) ;
static int omap dispchw remove ( struct platform device * pdev )
gen update nip ( ctx , ctx - > nip ) ;
curl slist free all ( new item ) ;
g free ( ctx ) ;
k12 update cb ( void * r , char * * err )
if ( ! pci ats supported ( dev ) )
val & = ~ ( divider - > mask < < divider - > shift ) ;
struct host if msg * msg ;
if ( pmu state = = uninitialized ) {
unsigned int ip6 dst mtu forward ( const struct dst entry * dst )
create hostcache id ( char * server , int port , ssize_t * entry len )
if ( libbpf get error ( link ) ) {
if ( unlikely ( kthread should stop ( ) | | try to freeze ( ) ) )
return ptr err ( obj - > filp ) ;
if ( idx > = mt7615 wtbl size )
if ( ! netif device present ( netdev ) )
if ( ! queue - > nsrq ) {
return dissect dcm main ( tvb , pinfo , tree , false ) ;
struct kmem cache * memcg kmem get cache ( struct kmem cache * cachep , gfp t gfp )
ibx assert pch refclk enabled ( dev priv ) ;
s - > next event = qemu get clock ns ( vm clock ) ;
drm vblank put ( dev , pipe ) ;
curr - > node stamp + = period ;
err = seg6 do srh encap ( skb , slwt - > srh , ipproto ipv6 ) ;
if ( ! have full constraints ( ) )
for each possible cpu ( cpu ) {
t - > mempools = dm alloc md mempools ( type , t - > integrity supported ) ;
cpu loop exit noexc ( cpu ) ;
notrace void arch local irq restore ( unsigned long flags )
qemu free ( ( void * ) hci - > device . lmp name ) ;
maybe move osd to lru ( req - > r osd ) ;
s = ( malta fpga state * ) g malloc0 ( sizeof ( malta fpga state ) ) ;
xfs defer init ( tp , & dfops ) ;
return nfs4 stat to errno ( nfserr ) ;
return tn - > bcbase - > retransmit to ;
f2fs remove dirty inode ( inode ) ;
int cifs calculate session key ( struct session key * key , const char * rn ,
rep origin id nodeid , int slotno )
ret = wait event timeout ( pca wait ,
static uint64_t l2x0 priv read ( void * opaque , hwaddr offset ,
static int mlx4 qp alloc icm ( struct mlx4 dev * dev , int qpn , int gfp )
i915 add request ( ring , file , so . obj ) ;
void arc chk ccms ( void )
struct irq cfg * cfg = desc - > chip data ;
outb ( unsigned char b , unsigned long int port )
zfree ( & cs - > str ) ;
spin unlock ( & swap lock ) ;
if ( ! is logical device ( dev [ i ] ) )
warn once ( true , " STRINGLITERAL \n " ) ;
elog ( commerror , " STRINGLITERAL " , b ) ;
if ( pointer is valid ( result ) )
sysfs remove link ( & port - > dev . kobj , dev name ( parent ) ) ;
ast register cleanup ( aoc shutdown ) ;
qiov - > iov = g malloc ( alloc hint * sizeof ( struct iovec ) ) ;
exp = rqst find fsidzero export ( rqstp ) ;
mpol put ( pvma . vm policy ) ;
if ( unlikely ( wq has sleeper ( & md - > wait ) ) )
static void efi call phys epilog ( void ) releases ( efi rt lock )
kobject uevent ( & bus - > p - > subsys . kobj , action ) ;
ast autochan channel lock ( autochan ) ;
if ( ! dev - > raw | | ! dev - > raw - > thread )
static inline void dquot decr inodes ( struct dquot * dquot , qsize t number )
if ( req )
if ( pt regs rc ( ctx ) & NUMLITERAL )
brcmf sdbrcm download firmware ( struct dhd bus * bus , void * card )
send ipi mask ( f - > flush cpumask , invalidate tlb vector start + sender ) ;
if ( wl - > state = = wlcore state off )
mutex lock ( & journal - > j checkpoint mutex ) ;
return ( cmd & cmd root off ) = = NUMLITERAL ;
char * prom nextprop ( phandle node , const char * oprop , char * buffer )
enum usb role cur role = renesas usb3 role switch get ( usb3 - > role sw ) ;
void init footbridge timer init ( void )
if ( dwc3 ver is prior ( dwc3 , NUMLITERAL a ) )
warn on ( con - > state ! = con state negotiating ) ;
ide complete rq ( drive , blk sts ioerr , blk rq bytes ( rq ) ) ;
static int multiport mt6 check ( const struct xt mtchk param * par )
struct rcu fwd * rfp = rcu fwds ;
int order = ( page size < = NUMLITERAL ) ? page_alloc_costly_order : NUMLITERAL ;
after trigger invoke events ( NUMLITERAL , firing id , null , true ) ;
atmel tasklet schedule ( atmel port , & atmel port - > tasklet tx ) ;
static uint64_t omap ulpd pm read ( void * opaque , hwaddr addr ,
if ( ksoftirqd running ( local softirq pending ( ) ) )
rt mutex adjust prio chain ( task , NUMLITERAL , null , null , task ) ;
if ( de - > d count > NUMLITERAL )
rt trace ( comp sec , " STRINGLITERAL \n " , func , \<slash_n>
printk ( kern info drvname " STRINGLITERAL "
refcount inc ( & sp - > refcnt ) ;
return find deepest state ( drv , dev , u64 max , NUMLITERAL , false ) ;
if ( stage2 pte table empty ( kvm , start pte ) )
if ( ! rec - > rec lh hash ) {
bool kvm arm reg syncs via cpreg list ( uint64_t regidx )
assert ( ov - > list mode = = lm none ) ;
list del init ( & user - > list ) ;
r = uml kmalloc ( sizeof ( struct uml pt regs ) , um gfp atomic ) ;
ext3 fsblk t start = rsv - > rsv start ;
if ( ! probe kernel read allowed ( unsafe addr , count ) )
tlb flush local ( ) ;
intel fbc post update ( crtc ) ;
raw spin lock irqsave ( & ixp4xx pci lock , flags ) ;
if ( test bit ( flags final , & ctx - > flags ) )
syscall define1 ( setuid16 , old uid t , uid )
for ( pd = deps ; pd - > pwrdm name ; pd + + ) {
struct device * dev = & dock device - > dev ;
return bswab16 ( tsum ) ;
object = find and remove object ( ptr , NUMLITERAL ) ;
tcp init tso segs ( sk , skb , cur mss ) ;
void bl cleanup pipefs ( void )
return schedule erase ( ubi , e , vol id , lnum , torture , true ) ;
u - > ptr = virt to machine ( ptep ) . maddr ;
if ( ( smp align ( size ) > > page shift ) + NUMLITERAL > totalram pages )
skb put u8 ( skb , cmd ) ;
uhci async * async = g malloc ( sizeof ( uhci async ) ) ;
static uint64_t strongarm rtc read ( void * opaque , hwaddr addr ,
sd - > received rps + + ;
nilfs inode sub blocks ( bmap - > b inode , NUMLITERAL ) ;
u32 val , val2 = NUMLITERAL ;
while ( ! kthread should stop ( ) & & fullstop ! = fullstop shutdown )
if ( ast mutex lock ( & chlock ) ) {
if ( app methods = = null )
int pkgid = topology logical die id ( cpu ) ;
func , value , offset ) ;
add address to hash ( hash val , key - > addr ) ;
warn on ( ! hwdev - > hw - > in config mode ( hwdev ) ) ;
tsrm mutex free ( ht - > mx writer ) ;
cfs hash dh hhead ( cfs hash t * hs , struct cfs hash bd * bd )
clear retrans timer ( chan ) ;
void noreturn rtas halt ( void )
xml hash free ( table , ( xml hash deallocator ) xml free ref list ) ;
drm dbg ( & dev priv - > drm , " STRINGLITERAL \n " ) ;
new rec - > ueid = old rec - > ueid ;
static int w5100 spi write ( struct net device * ndev , u32 addr , u8 data )
if ( is gen9 lp ( dev priv ) ) {
err = visor memregion read ( & channel - > memregion ,
if ( rq data dir ( drive - > hwif - > rq ) )
checksum = csum and copy from user ( ( force const void user * ) src ,
return register client ( pdev , ops , id | id bit audio , false , true ) ;
c4iw wake up ( ep - > com . wr waitp , - econnreset ) ;
char * buf = g malloc ( NUMLITERAL ) ;
lb = kzalloc ( sizeof ( struct gfs2 log buf ) , gfp nofs | gfp nofail ) ;
hci req update adv data ( hdev , hci adv current ) ;
acpi os unmap generic address ( & entry - > register region ) ;
if ( ! gpio is valid ( gpio ) )
ibmasm handle mouse interrupt ( sp ) ;
if ( attrs & dma attr write combine ) {
queue = g malloc0 ( sizeof ( net queue ) ) ;
struct net * net = xs net ( * src ) ;
struct operation config * config = outs - > config ;
crt - > setkey = hash setkey ;
return ( xml x path equal node set string ( arg , bad cast buf ) ) ;
void ast mark lock acquired ( void * lock addr )
tp = xfs trans alloc ( mp , xfs trans dummy1 , km sleep , false ) ;
ironlake edp panel off ( dev ) ;
static bool socket is dead ( struct connectdata * conn , int sock )
schid = * ( struct subchannel id * ) & s390 lowcore . subchannel id ;
signal power supply changed ( test power supplies [ test battery ] ) ;
if ( ! is isp2401 ) {
eat ( char const * name , lineno num )
add header ( & resp , " STRINGLITERAL " , allowed methods ) ;
static struct raid type * get raid type ( const char * name )
qemu co queue next ( & s - > allocating write reqs ) ;
static int et131x change mtu ( struct net device * netdev , int new mtu )
return scnprintf ( buf , cpufreq name plen , " STRINGLITERAL \n " ,
tsec - > osid = tsec - > sid = secinitsid unlabeled ;
bool is nvdimm ( struct device * dev )
nfp net netdev clean ( nn - > dp . netdev ) ;
if ( warn on ( lq - > sta id = = iwl mvm invalid sta ) )
ret = run delayed extent op ( trans , head , extent op ) ;
static int pcmcia requery callback ( struct device * dev , void * data )
if ( ! css | | ! css tryget online ( css ) )
alc88x simple mic automute ( codec ) ;
raw writel ( gc - > mask cache , gc - > reg base + irqen ) ;
if ( new type id > btf max nr types )
static gboolean empty line ( const gchar * line )
cport count = kzalloc ( sizeof ( * cport count ) , gfp kernel ) ;
if ( ! ( lport - > service params & fcp sppf init fcn ) )
static u8 reg r i ( struct gspca dev * gspca dev ,
dma info - > page = page pool dev alloc pages ( rq - > page pool ) ;
memory listener unregister ( & hdev - > memory listener ) ;
if ( cmd - > se dev - > dev reservation flags & drf spc2 reservations ) {
const struct drm i915 gem exec object2 * entry = exec entry ( eb , vma ) ;
static u32 devinit armv7 read num pmnc events ( void )
free netdev ( dev wds ) ;
if ( p ll2 conn - > conn . conn type = = qed ll2 type iscsi ooo )
s - > count load time = qemu get clock ns ( vm clock ) ;
u32 hwirq = fls ( stat ) ;
i915 gem drain freed objects ( dev priv ) ;
static int trace flush events ( struct trace * trace )
batadv tt global size inc ( orig node , tt global - > common . vid ) ;
int cpu = m - > extcpu ;
if ( ! intel gmbus is valid pin ( dev priv , pin ) )
translation block * orig tb , bool ignore icount )
strlcpy ( filename + len , suffix , maxpgpath - len ) ;
set errno ( save error ) ;
gem bug on ( ! intel uc fw supported ( & guc - > fw ) ) ;
qobject decref ( ret ) ;
if ( ! dsi - > drm | | ! dsi - > drm - > registered )
for ( i = NUMLITERAL ; i < = last irq ; i + + )
static int hisi add pcie port ( struct pcie port * pp ,
return pm generic resume ( dev ) ;
avctx - > initial padding = avctx - > frame size ;
ce - > path = kstrndup ( path , strlen ( path ) , gfp kernel ) ;
mutex lock ( & nfs callback mutex ) ;
wl none ( " STRINGLITERAL \n " , func ) ;
while ( ! ( prm read mod reg ( wkup mod , pm wken ) &
static int cx231xx media device init ( struct cx231xx * dev ,
set nat flag ( e , has fsync mark , false ) ;
static int gcmaes wrapper decrypt ( struct aead request * req )
return trans send cmd ( & priv - > trans , & cmd ) ;
static void lpt enable backlight ( struct intel connector * connector )
if ( id - > callback & & ! id - > callback ( id ) )
wmem tree foreach ( prefs modules , call apply cb , null ) ;
bitmap & = domain - > domain - > pgsize bitmap ;
memset ( str , NUMLITERAL , max apn length + NUMLITERAL ) ;
struct futex hash bucket * hb ;
static struct videobuf buffer * videobuf alloc vb ( size_t size )
if ( ebt invalid target ( tmp ) )
if ( xlogreader ! = null & & xlogreader - > seg . ws file > = NUMLITERAL )
put anon vma ( anon vma ) ;
status = do open permission ( rqstp , current fh , open , may owner override ) ;
return line6 probe ( interface , id , & podhd - > line6 ,
assert ( pipe ) ;
if ( ! x2apic mode )
static int proc reapurb ( struct usb dev state * ps , void user * arg )
kvm mmu new cr3 ( vcpu , cr3 , skip tlb flush , skip tlb flush ) ;
if ( ! refcount read ( & dev net ( ndev ) - > count ) )
if ( video is registered ( dev - > mpeg dev ) )
static struct platform device * coretemp get pdev ( unsigned int cpu )
if ( new gwflags = = no flags ) {
new page t get new page , unsigned long private , int offlining )
static void vring unmap element ( virt queue element * elem )
if ( ( buf = = null ) | | ( buf - > error ) )
pfree ( pkt ) ;
process hex common ( struct tep event * event , struct tep print arg * arg ,
ext4 fsblk t ext4 new meta block ( handle t * handle , struct inode * inode ,
int retval = command - > callback ( control , chan , command - > data ) ;
cancel dirty page ( page , NUMLITERAL ) ;
unsigned int pending = read c0 cause ( ) & read c0 status ( ) & st0 im ;
struct brcmf cfg80211 info * cfg = wiphy to cfg ( wiphy ) ;
static int leaf space used ( struct leaf * l , int start , int nr )
spin lock irq ( & topology lock ) ;
pr err ( " STRINGLITERAL \n " , func , err ) ;
invalidate dcache range ( start , end ) ;
if ( timer - > enabled ) {
return container of ( encoder , struct intel tv , base . base ) ;
nlm sysctl table = register sysctl table ( nlm sysctl root ) ;
static void rt2x00lib uninitialize ( struct rt2x00 dev * rt2x00dev )
static void native stop other cpus ( int wait )
static void usb host unrealize ( usb device * udev , error * * errp )
struct mlx5e priv * priv = netdev priv ( rpriv - > netdev ) ;
static int fdctrl connect drives ( fd ctrl * fdctrl )
u64 * ret count , unsigned int * extent flags )
unsigned int flags , nis cb * cb )
else if ( ctx - > context . ohci - > use dualbuffer )
dissector assert ( size > = NUMLITERAL ) ;
exofs dbgmsg2 ( " STRINGLITERAL "
sysfs remove mount point ( fuse kobj , " STRINGLITERAL " ) ;
void task clear jobctl pending ( struct task struct * task , unsigned long mask )
struct page * read swap cache async ( swp entry t entry , gfp t gfp mask ,
f - > type = fh - > radio ? v4l2_tuner_radio : v4l2 tuner analog tv ;
call rcu sched ( & old rd - > rcu , free rootdomain ) ;
srp gn cache * newg n = openssl malloc ( sizeof ( * newg n ) ) ;
static void l2cap send ack ( struct l2cap pinfo * pi )
strlcpy ( clk - > name , attr - > name , scmi max str size ) ;
intel dp dump link status ( const u8 link status [ dp link status size ] )
nv50 fifo playlist update locked ( priv ) ;
media pipeline stop ( & vc - > ve . vdev . entity ) ;
static void php local infile end ( void * ptr )
enqueue hrtimer ( timer , new base ) ;
u32 mask = d - > mask ;
if ( ! kfifo get ( & conn - > session - > cmdpool . queue ,
bh - > cmdq = & ndev - > pkt inq [ i ] ;
dev - > dev attrib . emulate rest reord = flag ;
static void strongarm ppc write ( void * opaque , hwaddr offset ,
cmd - > trc flags | = trc flush ;
register composite ( & cclk - > hw , node ) ;
ret = check csum item ( leaf , key , slot ) ;
dump capabilities | = dump type fcp ;
switch ( info & ~ xlr info mask )
pp assert with code ( NUMLITERAL = = tonga is dpm running ( hwmgr ) ,
syscall define1 ( setgid16 , old gid t , gid )
lip = xfs ail min ( & mp - > m ail ) ;
ret = ni tio arm ( counter , true , ni gpct arm immediate ) ;
if ( vga - > ddc )
static uint64_t lance mem read ( void * opaque , hwaddr addr ,
struct curl addrinfo * ai = conn - > tempaddr [ tempindex ] ;
wait event ( sched - > job scheduled , amd sched entity is idle ( entity ) ) ;
if ( ecmd . base . speed & & ecmd . base . speed ! = speed unknown )
if ( pnp dev - > protocol - > suspend )
static void enable loopback ( slmp info * info , int enable )
nilfs ioctl do free vblocknrs ( struct the nilfs * nilfs , u64 * posp , int flags ,
int32_t vchi service open ( struct vchi instance handle * instance handle ,
if ( is enabled ( config mach jz4780 ) )
phys reset ( pa symbol ( mcpm entry point ) , false ) ;
int hdr space = nlmsg space ( genl hdrlen + tipc genl hdrlen ) ;
cfs hash rehash cancel locked ( struct cfs hash * hs )
if ( wdev & & wdev - > iftype = = nl80211 iftype monitor )
d drop ( dentry ) ;
text insert msg ( ( " STRINGLITERAL " ) , ( " STRINGLITERAL " ) ) ;
sh sync dma for device ( ret , size , dma bidirectional ) ;
xchk xattr set map (
void * t = task stack page ( task ) ;
if ( ldata - > canon head = = ldata - > read tail )
unsigned long rate , unsigned long now , unsigned long best )
security filter rule free ( entry - > lsm [ i ] . rule ) ;
struct i596 private * lp = dev - > ml priv ;
guint offset , guint length u ,
bool uvd v1 0 semaphore emit ( struct radeon device * rdev ,
n = atomic read ( & zv cumul dist counts [ i ] ) ;
address space dispatch * d = qatomic rcu read ( & cpuas - > memory dispatch ) ;
for ( i = NUMLITERAL ; i < nr node ids ; i + + ) {
queue work ( rt2x00dev - > hw - > workqueue , & rt2x00dev - > filter work ) ;
if ( ! ossl prov is running ( ) | | dsa = = null )
blocking notifier call chain ( & reboot notifier list ,
serial8250 handle port ( struct uart 8250 port * up )
if ( sdp - > sd log commited revoke > NUMLITERAL )
rc = ptr err ( pd - > net ) ;
if ( bio data dir ( bio ) ! = write )
ext2 check acl ( struct inode * inode , int mask )
if ( devid < NUMLITERAL )
ide set max pio ( drive ) ;
xml hash free ( table , xml free id table entry ) ;
u32 s id , be16 ox id , u32 data format ,
assert spin locked ( & event - > list lock ) ;
int page mapped in vma ( struct page * page , struct vm area struct * vma )
read enum field ( strength , lock clause strength ) ;
return ll set cpu coherent ( hw cpu id ) ;
if ( ! state ) {
wreg32 ( mmgrbm gfx index , get vce instance ( idx ) ) ;
range - > user range = null ;
mutex unlock ( & smcd dev list . mutex ) ;
out target ( buf , xlrec - > node ) ;
( void ) rndis signal connect ( dev - > rndis config ) ;
comedi buf memcpy from ( s , data , nbytes ) ;
void kprobes add rp inst ( struct kretprobe instance * ri )
enter ( " STRINGLITERAL " , page - > index , offset ) ;
if ( ! bank num | | bank num > = kvm max mce banks )
put fs excl ( ) ;
g warning ( " STRINGLITERAL \n " , frame num ) ;
platform device unregister ( & vimc pdev ) ;
return kmem cache alloc ( iommu iova cache , gfp atomic ) ;
throttle on drops ( root ) ;
ret = sport set multichannel ( sport , NUMLITERAL , HEXLITERAL , HEXLITERAL , NUMLITERAL ) ;
edma stop ( echan ) ;
return test bit ( pirq from irq ( irq ) , pirq eoi map ) ;
void single step exception ( struct pt regs * regs )
gb hd put ( es1 - > hd ) ;
its free pending table ( vpt page ) ;
pthread unlock ( & cond - > c lock ) ;
static int lbs ethtool get sset count ( struct net device * dev , int sset )
spin unlock irq ( & stats - > lock ) ;
printk ( " STRINGLITERAL \n " ,
xchk agblock cmp (
receive chars ( info ) ;
err = kstrtoul ( buf , NUMLITERAL , & val ) ; \<slash_n>
static bool dsa slave dev check ( const struct net device * dev )
if ( ! * resource )
if ( * state p = = state )
if ( dwc2 readl ( hsotg - > regs + gsnpsid ) = = HEXLITERAL )
gdb process * p = gdb get cpu process ( cpu ) ;
err = line6 pcm release ( line6pcm , line6 bit pcm alsa capture stream ) ;
len = cpu to be32 ( len ) ;
u32 vblank count inc ,
base64 to tvb ( const char * base64 )
qdisc skb cb ( skb ) - > bond queue mapping = skb - > queue mapping ;
cfq clear cfqq idle window ( cfqq ) ;
void pevent print event ( struct tep handle * pevent , struct trace seq * s ,
up read ( & dev replace - > rwsem ) ;
static noinline int cpuidle cpu idle poll ( void )
static void timerblock write ( void * opaque , hwaddr addr ,
void update exception bitmap ( struct kvm vcpu * vcpu )
static int get bypass wd ( int if index , int * ms timeout set )
be16 port = inet sk ( sk ) - > inet sport ;
wil6210 disconnect ( wil , mac , false ) ;
return sizeof ( struct drm i915 gem exec object2 ) ;
struct irq chip * chip = desc - > irq data . chip ;
desc smp init ( desc , node , affinity ) ;
ret = parse events parse ( & list , & idx ) ;
msnprintf ( msg , sizeof ( msg ) , " STRINGLITERAL " , seconds ) ;
struct rpc cred * nfs4 get machine cred locked ( struct nfs client * clp )
return find next bit ( addr , null , size , offset , NUMLITERAL ) ;
static int vm test destroy user ( const char * context , const char * mailbox )
if ( count > pit latch ) {
ath5k dbg ( ah , ath5k debug dma ,
rs - > seg boundary mask = blk seg boundary mask ;
return mei cl is connected ( cldev - > cl ) ;
list del ( & q - > tag set list ) ;
exynos drm unregister dma ( ctx - > drm dev , ctx - > dev ) ;
do trap no signal ( struct task struct * tsk , int trapnr , const char * str ,
struct tep record rec = {
goto err unref ;
return bdrv co preadv ( child , sector num < < bdrv sector bits ,
if ( load < = NUMLITERAL )
while ( bnxt drv busy ( bp ) )
unsigned q = get unary ( gb , NUMLITERAL , max ) ;
nl page = nla nest start noflag ( msg , nl802154 attr channels supported ) ;
unlink from pool ( p , peer to base ( p ) , stack ) ;
mutex lock ( & text mutex ) ;
static int dpu debugfs init ( struct dpu kms * dpu kms , struct drm minor * minor )
x - > repl - > notify ( x , xfrm replay update ) ;
static void sh pmu disable ( struct pmu * pmu )
ao2 unlock ( session ) ;
e - > valid = mmu cam v ;
if ( ! am checkpointer process ( ) )
void setup secondary apic clock ( void )
int hfa384x cmd monitor ( struct hfa384x * hw , u16 enable )
bdrv do drained begin ( bs , true , null , true ) ;
if ( fabs ( d ) > int max + NUMLITERAL l )
const struct cpu operations * init cpu get ops ( const char * name )
static int maybe unused hda tegra suspend ( struct device * dev )
return & priv - > stats ;
status = acpi ev add gpe reference ( gpe event info , true ) ;
dev - > destructor = free netdev ;
ret = get cpu info ( & cpu info ) ;
static uint64_t pci host config read ( void * opaque , hwaddr addr ,
const struct earlycon id * match )
dev dbg ( vfe - > camss - > dev ,
outw ( unsigned short b , unsigned long int port )
if ( get cvt ( spec , cvt idx ) - > cvt nid = = cvt nid )
raw spin unlock irqrestore ( & cputimer - > lock , flags ) ;
hash netnet6 data next ( struct hash netnet6 elem * next ,
res = transmit register ( r , " STRINGLITERAL " , null , null ) ;
unsigned long addr , unsigned long end , nodemask t * nodes )
port - > enabled = NUMLITERAL ;
snprintf ( name , sizeof ( name ) , " STRINGLITERAL " , size ) ;
} while ( ! process filter & & thresh & & count < proc num ) ;
static int pci hp diva init ( struct pci dev * dev )
struct i2o message iomem * msg = i2o msg in to virt ( c , m ) ;
ipmr free table ( mrt ) ;
klist iter init node ( & bus - > p - > klist devices , & i ,
void * per cpu init ( void )
pgoff t pgoff ;
int rts51x enable card clock ( struct rts51x chip * chip , u8 card )
static int ipv6header mt6 check ( const struct xt mtchk param * par )
void fscache update cookie ( struct fscache cookie * cookie , const void * aux data )
kvm x86 ops . set rflags ( vcpu , rflags ) ;
rcu init pointer ( nf loggers [ i ] , null ) ;
d - > wall base ns = qemu get clock ns ( vm clock ) ;
if ( ! pci aer available ( ) | | aer acpi firmware first ( ) )
if ( cpu is omap7xx ( ) ) {
const char * filter = null ;
static void noreturn mvme5100 restart ( char * cmd )
if ( tty - > driver & & tty - > driver - > flush buffer )
pmd = pmd off ( mm , start ) ;
syscall define1 ( getpgid , pid_t , pid )
static int subviewer probe ( const av probe data * p )
if ( i915 gem object is readonly ( vma - > obj ) )
vcpu - > arch . guest fpu . state . xsave . header . xcomp bv =
for each engine masked ( engine , gt - > i915 , engine mask , tmp ) {
static const struct ata port info info sata = {
lpfc printf log ( phba , kern info , log nvme abts ,
info = kmalloc ( sizeof ( struct page info * ) , gfp kernel ) ;
if ( show key params )
if ( ! sn | | sn - > sn timeout = = NUMLITERAL )
perf sw event ( perf count sw cpu migrations , NUMLITERAL , null , NUMLITERAL ) ;
raw = kmalloc ( size , sti lowmem ) ;
if ( qatomic fetch inc ( & bs - > io plugged ) = = NUMLITERAL ) {
else if ( locks in grace ( ) ) {
bool trace backend init ( const char * file )
static void adjust total allocated ( unsigned char data mode , long diff )
if ( key is positive ( key ) & &
if ( out end - out buf < = pixelstride * ( count - NUMLITERAL ) )
page = alloc pages ( gfp flags , order ) ;
void intel runtime pm enable ( struct drm i915 private * dev priv )
mutex unlock ( & module kaslr mutex ) ;
return selinux inode ( inode ) ;
ide complete rq ( drive , blk sts ok , nr bytes ) ;
static uint64_t dbdma read ( void * opaque , hwaddr addr ,
if ( machine is vm & & ipl block valid & &
return setup page dma ( vm , p , gfp highmem ) ;
status = lookup clientid ( clid , cstate , nn , false ) ;
switch mm skas ( & current - > mm - > context . skas . id ) ;
return scpi send message ( cmd set device pwr state , & dev set ,
static void preparetrimprefix ( char * prefix name )
postquel end ( execution state * es )
struct ddb ci * ci ;
long temp = simple strtol ( buf , null , NUMLITERAL ) ;
srp user pwd * ret = openssl malloc ( sizeof ( * ret ) ) ;
if ( fail )
i915 gem chipset flush ( dev ) ;
if ( tb cflags ( s - > base . tb ) & cf use icount ) {
struct inode * inode = d backing inode ( file - > f path . dentry ) ;
return inline syscall ( lstat64 , NUMLITERAL , name , buf ) ;
urb - > actual length = urb - > error count = NUMLITERAL ;
guc disable interrupts ( guc ) ;
if ( ! rtw end of queue search ( xmitframe phead , xmitframe plist ) ) {
buffer [ i ] < < = s - > bitshift ;
sound class - > devnode = sound devnode ;
stdoff = gethms ( field , ( " STRINGLITERAL " ) ) ;
static int cpcap charger voltage to regval ( int voltage )
clip freq = cpufreq cdev - > freq table [ state ] . frequency ;
static void send ring ( struct unistimsession * pte , signed char volume , signed char style )
if ( libbpf needs btf ( obj ) ) {
struct uart port * port ;
. u . blockdev snapshot . data = & snapshot data ,
rpcauth init module ( ) ;
timespan pl ( time span * span1 , time span * span2 )
if ( is writable pte ( pt [ i ] ) )
zend api const zend object handlers * zend fastcall zend get std object handlers ( void )
if ( rdma is zero gid ( gid ) )
if ( len < no disk inquiry result len )
buf [ NUMLITERAL ] = acpi pdc est capability smp ;
int fuse allow task ( struct fuse conn * fc , struct task struct * task )
void i915 request reset ( struct i915 request * rq , bool guilty )
tipc nametbl - > local publ count + + ;
activate etd ( imx21 , etd num , dir ) ;
if ( goal = = bfitnoent )
lun = tpg - > tpg lun list [ i ] ;
static void intel pin eld notify ( void * audio ptr , int port , int pipe )
return x509 verify param get depth ( s - > param ) ;
if ( wbk & & refcount dec and test ( & wbk - > usage ) ) {
mvneta txq bufs free ( pp , txq , tx done , nq ) ;
nvkm event fini ( & i2c - > event ) ;
if ( sc - > memcg ) {
char * str = g strdup printf ( " STRINGLITERAL " , ullong max ) ;
dma addr t dma addr , unsigned long attrs )
unsigned int channel = oxygen substream channel ( substream ) ;
static int dsa signverify init ( void * vpdsactx , void * vdsa , int operation )
ret = p qgetline ( conn , copybuf , copybufsiz ) ;
ao2 cleanup ( media cache ) ;
xenevtchn unmask ( state - > xce handle , state - > bufioreq local port ) ;
ptr = vm map ram ( pages , npages , NUMLITERAL , page kernel ) ;
bug on ( system state < system running ) ;
cancel delayed work sync ( & twl - > get status work ) ;
bool sop = false ;
cpu idle poll ctrl ( false ) ;
struct device * dev ;
ret = dax iomap fault ( vmf , pe size pte , & ext2 iomap ops ) ;
flush micro tlb ( ) ;
list del init ( & node - > list ) ;
bool ixgbe check reset blocked ( struct ixgbe hw * hw )
if ( handle - > overflow & & wakeup events ) {
vm bug on ( page count ( buddy ) ! = NUMLITERAL ) ;
intel device info dump runtime ( runtime info ( dev priv ) , & p ) ;
guint8 ii , contactcount ;
amd sched select context ( struct amd gpu scheduler * sched )
if ( ! machine is ( powermac ) )
struct rdma cm event event = { } ;
cfs hash peek ( struct cfs hash * hs , struct cfs hash bd * bd ,
create shared memory and semaphores ( true , NUMLITERAL ) ;
static unsigned long kvm vm ioctl get nr mmu pages ( struct kvm * kvm )
curl safefree ( session - > name ) ;
spin unlock irq ( & topology lock ) ;
if ( devs [ NUMLITERAL ] = = ' * ' ) {
int ubi io sync erase ( struct ubi device * ubi , int pnum , int torture )
s - > base . is jmp = disas hvc ;
if ( tick nohz full enabled ( ) ) {
if ( ret < = NUMLITERAL )
void * g malloc ( size_t size )
int test bitmap print ( struct test * test maybe unused , int subtest maybe unused )
if ( res - > flags & pci base address mem type 64 )
void iomem * read address =
xml free pattern internal ( cur ) ;
static void init acpi reserve resources ( void )
return ( " STRINGLITERAL " ) ;
if ( ttrace = = null | | trace - > fd path disabled )
if ( iwl have debug level ( iwl dl tx ) ) {
if ( ! ath9k hw setpower nolock ( ah , ath9k pm awake ) )
printk ( kern debug " STRINGLITERAL \n " , phm - > version ,
int lvl = data - > start level ;
static inline int rng create sh desc ( struct caam rng ctx * ctx )
unsigned long ftrace find rec direct ( unsigned long ip )
static void vxge close vpaths ( struct vxgedev * vdev , int index )
if ( is err value ( ( unsigned long long ) offset ) ) {
stream = & chunk - > asoc - > stream ;
free page ( ( unsigned long ) cb ) ;
if ( ! crash )
write pen release ( cpu logical map ( cpu ) ) ;
list del ( & mirror - > list ) ;
do gettimeofday ( tv ) ;
p = kasan krealloc ( ( void * ) p , new size , flags ) ;
add partial ( n , page , NUMLITERAL ) ;
rpcrdma max hdr segs ) ;
ering - > tx max pending = cpsw - > descs pool size - cpsw max queues ;
return qatomic read ( & ctx - > notified ) ;
vsock core unregister ( & vhost transport . transport ) ;
nvt set cir iren ( nvt ) ;
static int p9mode2unixmode ( struct v9fs session info * v9ses , int mode )
dso - > data . debug frame offset = ofs ;
ubifs err ( c , " STRINGLITERAL " , lnum ) ;
while ( - - i > = NUMLITERAL ) {
if ( ! ie ptr )
static irqreturn t pxamci irq ( int irq , void * devid )
rc = ipc alloc security ( & msq - > q perm , secclass msgq ) ;
sha1 ( ( unsigned char * ) msg , msglen , digest ) ;
char buf [ dbl dig + NUMLITERAL ] ;
if ( ! strncasecmp ( pos - > governor - > name , governor - > name ,
if ( ! btf type id valid ( t - > type ) ) {
u16 mr targetidtoldget ( u32 ld tgt id , struct mr drv raid map all * map )
void dma schedule ( void ) { }
void kvm arch free vm ( struct kvm * kvm )
uint32_t cur placement = NUMLITERAL ;
in pstring arg )
sec - > section buf = av mallocz ( max section size ) ;
pic read ( void * opaque , hwaddr addr , unsigned int size )
might sleep if ( gfpflags allow blocking ( flags ) ) ;
power well = lookup power well ( dev priv , bxt disp pw dpio cmn a ) ;
static void calc fps ( struct v4l2 subdev * sd , u32 * numerator , u32 * denominator )
static int ub state stat ( struct ub dev * sc , struct ub scsi cmd * cmd )
void update fp status ( cpux86state * env )
queue index = skb tx hash ( dev , skb ) ;
int test pmu ( struct test * test maybe unused , int subtest maybe unused )
qapi free socketaddressflat ( s - > saddr ) ;
schedule work ( & pdata - > restart work ) ;
proc = f nullvalue ;
kfree ( ff - > release args ) ;
const char * ftype name = null ;
if ( strncasecmp ( p , " STRINGLITERAL " , NUMLITERAL ) = = NUMLITERAL )
lpfc rcv logo ( phba , ndlp , cmdiocb , els cmd prlo ) ;
return match [ strlen ( name ) ] = = ' \0 ' ;
return d materialise unique ( dentry , inode ) ;
const struct ib recv wr * wr , u8 * len16 )
init single page ( page , pfn , zid , nid ) ;
static blk qc t submit bio ( struct bio * bio )
( * parg ) - > type = tep filter arg boolean ;
new = zalloc ( sizeof ( * new ) ) ;
int spi nor xread sr ( struct spi nor * nor , u8 * sr )
iommu free table ( tbl , " STRINGLITERAL " ) ;
ath5k rxbuf free ( sc , bf ) ;
struct rpc clnt * clnt , int machine cred )
qemu system guest panicked ( ) ;
