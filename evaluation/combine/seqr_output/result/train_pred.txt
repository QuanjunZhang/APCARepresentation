f ( a [ i ] == { - _<number>_ ] == a n ;
rintf ( _<string>_ , a [ n , n { ;
or ( q = _<number>_ ; q < m ; q ++ )
f ( occ [ p ] == _<number>_ )
rintf ( _<string>_ , a [ ; int { scanf ( _<string>_ n { scanf ( _<string>_ ] * occ , c ( c = < + _<number>_ , + _<number>_ , + ;
old = count ( n , ] ) ;
rintf ( _<string>_ , <unk> ) ;
= a [ i ] ; }
rintf ( _<string>_ , a [ = c1 count ( count number _<number>_ = _<number>_ + _<number>_ = - _<number>_ = i = _<number>_ ( c [ ( { [ ( a [ ( int number = _<number>_ ( int ( ( { = } _<number>_ ) ( int = } _<number>_ , _<number>_ ( int { ) }
rintf ( _<string>_ , a [ ] number = _<number>_ > int no ( } a [ > ] + occ = _<number>_ = _<number>_ = _<number>_ ( a ] ( a ] ( a ] , { scanf ( _<string>_ ( a int > int , }
= num ; } }
um += a [ i ] ;
= s - sum ;
loat k = a [ _<number>_ k ;
epeat = i ; }
issing = i ;
f ( k = n ) n ( if + {
1 ++ ; } }
f ( array [ j ] == number > = = = = ( = = , , ) i + m ;
unk> ( a , n ) ;
cc [ p ] = _<number>_ ; }
nt x [ n ] ;
lse break ; } } }
nt n , i , ans1 + for ( if ( [ N , < _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] m ;
f ( k == n ) occ ; c i ) }
f ( a [ i ] > _<number>_ ) [ = = _<number>_ ( = - > ] [ > > { string + > > _<number>_ [ > number - _<number>_ number [ > number ] ] [ > _<number>_ [ > _<number>_ number [ > number ] number number > _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] < > > _<number>_ ] ] ] ] < > _<number>_ ]
f ( i != j && number + < == n n ( ; ; ; < < [ < int [ n int ;
f ( a [ i - _<number>_ [ > int n n n ] + _<number>_ != ] )
n = c ;
or ( int i = _<number>_ ; i < [ n string _<number>_ ; > ++ + _<number>_ number + _<number>_ ; > n i + _<number>_ ; > int int if ( m ++ + _<number>_ + > _<number>_ + > > { _<number>_ for ( m [ > number _<number>_ number number - _<number>_ number number number _<number>_ number number - _<number>_ ; > n i + _<number>_ ; > n ++ + _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_
rintf ( _<string>_ , b , flag ( ( ( N { k ( ( number ( int ( ( [ number number - _<number>_ for ( count ( N j ( [ > _<number>_ for ( } _<number>_ for ( } {
f ( N [ j ] == i ( ( j ( + _<number>_ ( _<number>_ ) number N ) ) )
nt num = ( ( n = _<number>_ i i ) <START_BUG> number number j ) <END_BUG> _<number>_ ;
f ( count != set [ i ] ( count i i i i i i i ) for ( n != n , break )
canf ( _<string>_ , & arr ] arr ] > if ( ( ( j = _<number>_ i - j i i i number number number number > { , ] > s > { ( ( & s [ ( ( { ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( = - { h ++ > { ( ( ( ( ( ( ( ( ( (
ount = count + a [ i ] ; }
nt j , i , temp , a [ _<number>_ ] , h ;
f ( count [ t - _<number>_ } } }
or ( i = _<number>_ ; > <= n ; > > > n ++ > n i i i i i i i i i i number number number number number number ; , ] <= j ) , ] <= j ) , ] ; ] <= [ i - [ i { _<number>_ {
or ( j = i + _<number>_ ; < i ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; < for ( for ( < < < < [ < < _<number>_ ( ; ; ; count ++ ( count ++ ( ( count ++ ( ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
rintf ( _<string>_ , a ) ; & printf ( _<string>_ [ ( > > > > for ( ( ( number string _<number>_ ) * _<number>_ i - _<number>_ i i i i i i i i i i i i i i ( = = = = _<number>_ ) ) for ( = _<number>_ ) ) < _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ) ) if ( = = _<number>_ [ = =
canf ( _<string>_ , & a ( string ( count ( , ( , ( + _<number>_ ( + + , ) ) ( , ] ( ( else ( , + , ( , + , ( , ( , ( , + + number [ number break > { number ++ > { number > { + _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ( , , , number ( number
f ( occ [ i ] == _<number>_ + = _<number>_ = _<number>_ = _<number>_ n n n n n n n n , for ( n number number _<number>_ n n n n n n n n n n n n n n )
epeat = i ; }
rintf ( _<string>_ , num ) < + _<number>_ < = _<number>_ < , int break < number for ( printf ( _<string>_ number temp ] ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i { {
= j ;
f ( count != a ) [ _<number>_ ] = ] < ] number
f ( i != n ) =
rintf ( _<string>_ , mn ) ;
lse printf ( _<string>_ , n ( ( }
rintf ( _<string>_ , n , ( , ) ) < int int int ) ;
lse if ( ct [ i , == _<number>_ number = ( _<number>_ ( ; > > _<number>_ ) = ( ] ) ( } - _<number>_ ( n ) ) ) ; b = n ) ; b = n ) ; b + _<string>_ < no [ i + _<number>_ + + _<number>_ + i + _<number>_ } ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ < = _<number>_ < = _<number>_ )
= a [ m ] ;
rintf ( _<string>_ , mn ) ;
f ( s [ i ] != int i i ( n array _<number>_ ( for i - - _<number>_ [ arr } for ( flag2 i for ( , flag2 ( , flag2 ( number int number for ( number i for ( , flag2 ) } ; if ( & & [ i ] != j ) ) if ( & & & & [ i ] != j ) , if ( & & & [ i ] != j ) , if ( & & } a }
lse break ; }
rintf ( _<string>_ , a [ i } } }
f ( x == a [ , j [ , j j [ )
nt n , i , j j j j j j j j j j j j } } }
or ( j = _<number>_ ; int ; arr < count ; int int int [ j } } num ++ i i ( ] ++ ( ) ++ ) ) a [ _<number>_ int ] ++ ) a , ] ++ ) a j ++ ) a [ i [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ + _<number>_ + = + _<number>_ + = { _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ } - > _<number>_ } } [ > ] = int
nt occurence [ n + _<number>_ n } ;
f ( ( b [ i } != _<number>_ ( , num ] + for ( ( num [ > ] != _<number>_ number c [ > _<number>_ number number number number number number number number number number number number ) ) ) )
rintf ( _<string>_ , s [ + + n j j = }
rintf ( _<string>_ , s [ j [ + = , > n n n n n n , { for ( = = _<number>_ > = _<number>_ ; = < + ( j - , == j = _<number>_ = _<number>_ = < ) < ) < < < < j < ) < < < < > > > , > > > > > , > , > , > > > , > , > , > > > , > > > > , > , > , > > > > , > ,
canf ( _<string>_ , & ar j int ] ) < > { _<number>_ count , }
n = num ; } }
nt rn [ _<number>_ ] ;
rintf ( _<string>_ , a ) ;
= sum + a [ number n {
= s - sum ;
rintf ( _<string>_ , i ) ; { [ ) ] ; [ _<string>_ ; [ ) ] number int = < = _<number>_ < ] < = ] < = < = _<number>_ < = _<number>_ < ) n > ( , + number i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ) ; number = _<number>_ ; number = [ + + _<number>_ , + _<number>_ ; number ++
[ temp ] ++ ; s ++ < int for ( n = _<number>_ i i i ; a ] ++ ; a ] ) ; a ] ++ ; a ] ++ ; a ] ++ < k < = _<number>_ ; for ( , num1 ) ; for ( , num1 ) ; for ( n = _<number>_ ; > string + _<number>_ ; > string + _<number>_ + string + string + _<number>_ + string ; }
rintf ( _<string>_ , mn ) ;
n = j ;
rintf ( _<string>_ , k + _<number>_ ( int ( n == _<number>_ i + _<number>_ i i + _<number>_ i i + _<number>_ i i + _<number>_ i i + _<number>_ i i + _<number>_ i i j ) [ n num i ) < ] < ] < ] < ] < ] < , < _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( +
rintf ( _<string>_ , sum1 - & & }
um += a [ i ] < printf ( _<string>_ , int int ( ( number k a ] , [ ( [ ( ( [ ( [ ( [ ( [ ( [ ( [ ( [ ( n - _<number>_ + _<number>_ + + + _<number>_ number + _<number>_ , + _<number>_ , + _<number>_ , ( ] ) ) , ] number > a int ( ] number a int - ( a int ( number number number number number int - number number number int - number number number int ( number int int number number
f ( j != n - _<number>_ > = _<number>_ ( ] ( ] ( ] ( ] > N <END_BUG> _<number>_ > _<number>_ > N > N > N > N > N > N > N + _<number>_ i i i i i ) ) * ( A == N a - _<number>_ ) )
n = num ; }
if ( arr [ i } == j } n j j j j j j j , & [ i , [ [ [ [ i , j , & [ i , & [ [ i , ) }
[ i ] = num ;
rintf ( _<string>_ , a [ } n [ occurence [ { _<number>_ n n n n n n n n n n n n n n n n n > & & & j n > & }
nt a [ _<number>_ ] , ] number ] ;
rintf ( _<string>_ , nat [ i j j ( = a } - _<number>_ ( = a }
f ( ( num [ i [ ] [ ] } } } } }
rintf ( _<string>_ , t ) < < < _<number>_ < i + _<number>_ < n + _<number>_ int [ { x a + _<number>_ , i int n int [ _<number>_ , count2 = _<number>_ ;
= t + _<number>_ ;
or ( t = _<number>_ ; b = ] < , , j ; j ++ + + _<number>_ ( j ++ ( ( , j + _<number>_ ( , , j ++ ( ( , i ( , i number ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
rintf ( _<string>_ , j ) ; } } } + _<number>_ = { _<number>_ { scanf ( _<string>_ , n ) = k = _<number>_ = { _<number>_ + _<number>_ = _<number>_ = { _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ ) { scanf ( _<string>_ , n ) = k = _<number>_ = { _<number>_ + _<number>_ = _<number>_ = { _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_
f ( count1 == _<number>_ ) {
f ( a [ i ] == _<number>_ ) } printf ( _<string>_ } > = _<number>_ i i i i i i i ) < if number ] < ] ( ] == _<number>_ ) ; } sum1 ; sum1 = a [ > > _<number>_ ) int & } ] ; sum1 = a [ > > _<number>_ ) int } ] ; sum1 = a [ > > _<number>_ ) int & } ] ; sum1 = a [ > > _<number>_ ] ; } sum1 = _<number>_ ; } sum1 = _<number>_ ; } sum1 =
[ num ] = a [ num ] + _<number>_ ; j = for ) < i < ] < _<number>_ < ] < }
nt i , n , j , count = _<number>_ < ] number ) ;
f ( j == n ) {
canf ( _<string>_ , & n ) ;
f ( j == n ) {
f ( s [ i ] == i + _<number>_ ) {
lse { mn = i + _<number>_ ; } a = > ( + _<number>_ ( n - _<number>_ ( n - _<number>_ ( string a a ( j ( j - _<number>_ number ) ) ) ) ) * [ > > _<number>_ } }
f ( b [ i ] == _<number>_ )
t [ i - _<number>_ ] ++ ; if ( } num1 [ > <END_BUG> - _<number>_ [ > [ > * _<number>_ [ + + _<number>_ , > _<number>_ , > _<number>_ , > _<number>_ n n n n n n n n n n n n n n < printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf ( _<string>_ number printf
f ( arr [ i ] == arr n string _<number>_ > < _<number>_ > [ i n n ( < [ < [ < [ < j j j j j j ( number > ; & & & & & & + > + _<number>_ > ; & & & & & + = + ( + ; & + = + ( + & > i number _<number>_ > [ ; & & = + ( + + ; & + ( + & > number > _<number>_ > ; & & + + & & +
ep = i ; }
is = set [ i ] ;
or ( j = n - _<number>_ ; j >= _<number>_ ; j -- ) {
= n * ( n + _<number>_ ) / _<number>_ ;
f ( count == a [ i ] + _<number>_ ) {
um = sum + a [ j ] ;
f ( b [ i ] == _<number>_ )
nt i , n , m , j , m = _<number>_ + & printf , < number < number < j < <END_BUG> ;
nt i , j , n , m = _<number>_ + rep + printf ( _<string>_ ( j ( + _<number>_ i i ( + ] i ( ] ( + ] i ( ] ( + ] i ( ] ( + ] i ( ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( + ] ( +
or ( k = _<number>_ ; k < number ; j = j num _<number>_ = n i i i i i i i i i ; j = j count _<number>_ ) {
f ( a [ j ] == a ] i > n > { _<number>_ n ( n ( n ( j ( n ( arr2 ] = _<number>_ = _<number>_ = * + }
rintf ( _<string>_ , n ) ;
nt nat [ n ] ;
= a [ i ] ; } }
f ( a [ i ] == i )
rintf ( _<string>_ , d , d ) ;
is = ( i + _<number>_ ) ; }
ep = ( i + _<number>_ ) ; }
f ( rn [ i ] == _<number>_ > _<number>_ ) count = _<number>_ ; a arr2 _<number>_ * k - _<number>_ ;
rintf ( _<string>_ , rn , string ) ;
nt sum1 = ( n / _<number>_ ( n + _<number>_ [ ] [ _<number>_ } } ] > , n ( n main ( n [ _<number>_ + _<number>_ } ( ] , + }
nt sum2 = sum - a [ = ] ;
f ( ( i + _<number>_ ) == a ] > n ( i > ] > n > _<number>_ > n > n > n > n > n > _<number>_ > ) { ] i - _<number>_ ;
[ i ] = _<number>_ ;
rintf ( _<string>_ , i + _<number>_ ) ; }
f ( ar [ i ] == + a [ number n n ) [ number } [ ( { _<number>_ ] == { ( b number ( { _<number>_ + [ ; ;
or ( j = _<number>_ ; j <= < ; = ++ > ) }
rintf ( _<string>_ , count ) ;
nt a [ n ] ;
= N [ i ] ; } }
f ( N [ i ] == j ) {
nt i , j , temp , arr [ _<number>_ ( m j j , <unk> number _<number>_ , <unk> number _<number>_ , <unk> number _<number>_ [ _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ _<number>_
nt j = _<number>_ ;
ccurence [ i ] ++ ; } }
rintf ( _<string>_ , a [ i ] ) ;
rintf ( _<string>_ , count ) < _<number>_ ;
rr2 [ i ] = _<number>_ ;
or ( i = _<number>_ ; ; ; ; < ] ) string = j i > }
nt n , arr [ _<number>_ , ] number [ _<number>_ int ;
rintf ( _<string>_ , ( n + _<number>_ ) ! _<number>_ else else i ;
lse { printf ( _<string>_ , b [ m ] = b = b i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i = a + a + flag1 = _<number>_ = a +
lse { { { { { { { {
= _<number>_ ;
rintf ( _<string>_ , sum1 - sum printf ( _<string>_ ) ; printf ( _<string>_ ] break string <START_BUG> int }
um1 = n - n + _<number>_ ) main ( n + _<number>_ ( n {
f ( ( b == ( n - _<number>_ ) ) && i != _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
f ( l == m [ j ] )
rintf ( _<string>_ , t ) ; }
or ( j = _<number>_ ; j >= _<number>_ i ; b -- ( string -- + int & j + _<number>_ + = _<number>_ -- + _<number>_ + = _<number>_ -- + int & > > _<number>_ > _<number>_ > [ [ [ [ [ [ [ [ [ [ [ ( [ _<number>_ , [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
or ( int j = _<number>_ ; j < n ; j ++ ) {
= ( n * ( n number _<number>_ + main > _<number>_ ( <END_BUG> > ) > _<number>_ > <START_BUG> > <START_BUG> > <START_BUG> > <START_BUG> > <START_BUG> i = _<number>_ i i i i i i i i i i i i i i i i i i i i i i i = _<number>_ i i i i = _<number>_ i i i i = _<number>_ i i i i = _<number>_ i i i break _<number>_ i i - _<number>_ i i i = _<number>_ < _<number>_ i i - _<number>_ i i - _<number>_ i
rintf ( _<string>_ , i ) ; { { j = _<number>_ i - _<number>_ < n < _<number>_ i > j i i i i ) > { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { t [ ; ; { t [ ; ; { t + _<number>_ >
rintf ( _<string>_ , a [ p ] ) ;
f ( a [ i ] == > ( > ] [ ct [ ct i , }
= t + _<number>_ ; }
f ( i == a [ j ] )
or ( j = _<number>_ ; j <= n - _<number>_ ; + + _<number>_ ( [ + + _<number>_ j n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
[ i ] = t ;
= _<number>_ ; }
lag = c + _<number>_ ; } } }
nt n , i , j , l , k , a } )
nt a [ n ] ;
[ i ] = i + _<number>_ ; }
f ( d [ j ] == a [ d ] ( count [ n ] n n n [ , p number [ , number number number number number number number [ , number number number number number number number number ] [ , p number _<number>_ [ , , p number p ] [ , p number _<number>_ number [ , number number number number number number p [ , number number number number number number p ] [ , p number _<number>_ [ , number number _<number>_ number number number _<number>_ number number - _<number>_ number number
n = i ;
f ( ct [ i ] == _<number>_ ) ] = = ( = ( i - _<number>_ ( } i i > { < _<number>_ > } > _<number>_ > } > _<number>_ > } > _<number>_ > } > _<number>_ > } > _<number>_ > } ) }
ount [ i ] = _<number>_ ; a , b , d [ , ] ( for ) _<number>_ > - ; }
canf ( _<string>_ , & a ] if > n string _<number>_ ( ] ( t i i i > j > j > j > j > j > [ } j count _<number>_ j > [ } j count _<number>_ j > [ } j j count _<number>_ j > [ } j & _<number>_ > [ [ } j j j > [ [ } j j j > [ [ } j j j > [ [ } j j j > [ [ } j j j > [ [ } j j j >
n = a [ j ] ;
or ( i = _<number>_ ; > < string < ct ; > > { ; = ++ i i i i i i i i i ++ i > _<number>_ ;
emp = a [ i ] < - number + , number = _<number>_ < string = ) i if [ = + _<number>_ ) j ) ;
[ i + _<number>_ ] { string < int for ( i for = _<number>_ ) i i + _<number>_ i i i i i i i + _<number>_ ; [ = = _<number>_ + n for ( number ) < number < c < c < c < c < for ( number , number ) ( number ) n ( a ) ) < for ( number ) ) < for ( [ i ( a ) ( a ) ( a ) ( a ) ( a ) ( a ) ( a ) ) {
t = ar [ i ] ;
lse if ( ct [ i ] == _<number>_ ) if number { printf ( _<string>_ j ) i ) i ) i ) i number _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
canf ( _<string>_ , & set + + } _<number>_ ( ( int > ( string j > if ( int , > ) > count > count [ ) ] ; }
lse if ( counter1 == _<number>_ ) {
rintf ( _<string>_ , t + _<number>_ ) ;
f ( c [ l ] == _<number>_ ) {
rintf ( _<string>_ , l + _<number>_ ) ; { { n n } n a a a a ; { l = [ [ [ [ [ [ j ) ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ) n ; j ( _<string>_ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
nt a [ n ] ( continue ( scanf N ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number number & A + _<number>_ number B n i i ( n > for = _<number>_ > A number N {
f ( l == _<number>_ ( t ( for _<number>_ ( { _<number>_ ) ) = _<number>_ = * count i - _<number>_ = _<number>_ = _<number>_ number number - _<number>_ i i ( for ( { _<number>_ ( { _<number>_ ( { _<number>_ > _<number>_ > _<number>_ > _<number>_ > } ) > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ >
ount = count + _<number>_ = count + _<number>_ < n > + _<number>_ i - ] < ] < n > ] > ] > ] > ] < { count , [ j , _<number>_ * ( { j ++ i i ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
or ( int j = _<number>_ < _<number>_ ; n <= + number < number < + + _<number>_ < number ; ] ++ )
nt i , n , j , a ] i + _<number>_ + b j + _<number>_ + b j j j j j j j ] ] ] int [ _<number>_ , arr i ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] > _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > =
rintf ( _<string>_ , i + _<number>_ ) ; [ ( number ) != { & a j t [ number { [ number { int ) > _<number>_ , + _<number>_ , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
rintf ( _<string>_ , i ) ; } }
f ( check [ l ] == _<number>_ ) n - _<number>_ ( number [ int ] ( number [ int int ( ( int int ( a ] ( number == _<number>_ ( int number ] ( ( number ] == _<number>_ ( int ] ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_ ( int ( ( number ] == _<number>_
rintf ( _<string>_ , l + _<number>_ ) ; { { { { { { { { { { { { { { { { { n [ int int ] + { _<number>_ n ; int int int int int int int ] + _<number>_ ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ] ( int ( ]
f ( b [ j ] == a [ > > n check + _<number>_ + ( , n - } _<number>_ + ( , n - {
nt j ;
f ( num [ i string == number ( ( > + ; ( = + _<number>_ ( + > ] ( ( = - i ) == ( ) = _<number>_ number i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
n = num ;
f ( a [ j ] == i )
rintf ( _<string>_ , rep ( a ( }
ount [ i ] = _<number>_ ;
or ( int j = _<number>_ ; j < { a j ++ )
rintf ( _<string>_ , num ) ;
= _<number>_ ; }
= _<number>_ ; }
ort ( a , n ) ;
or ( int i = _<number>_ ; i < = = = = _<number>_ ; i ++ ) {
f ( count [ t - _<number>_ ] == _<number>_ ) , string = ( _<number>_ + int [ ( ( n - _<number>_ j j + _<number>_ [ ( j - _<number>_ { { & & ) , & ) = _<number>_ > ) i = ) + _<number>_ > ) > ) > _<number>_ > ) i = ) + _<number>_ > ) > ) > _<number>_ > ) i = ) + _<number>_ > ) > ) > _<number>_ > ) i = ) + _<number>_ > ) > ) i = ) + _<number>_ > )
rintf ( _<string>_ , - _<number>_ ) ;
nt n , i , n ] ] j < {
= a [ i ] ; }
nt n , i , j , num i + _<number>_ ] ] ] ] ] i ] i ] i i ] i ] i ;
nt array [ n + _<number>_ ] , occurence number n ( ] + _<number>_ + _<number>_ + ] + i + _<number>_ + ] + arr [ i ) ;
rintf ( _<string>_ , l + _<number>_ ) i > _<number>_ ( string n - _<number>_ ( { scanf ( _<string>_ ( ] i i i i i i ) ( }
f ( b [ j ] == _<number>_ i )
nt i , n , j , b [ _<number>_ [ _<number>_ int , j { if ( > > _<number>_ number = _<number>_ + for ( [ > _<number>_ } }
nt n , i , k ;
t [ k - _<number>_ ] ++ ; if ( num1 scanf ( _<string>_ + } _<number>_ ] ++ ; for ( num , ; count < { ; count [ count k k k k k k if ( string j if ( string n n = _<number>_ = _<number>_ = _<number>_ ( [ for & = & number j , for ( if ( if ( if ( [ if ( for ( for < _<number>_ ) ) ++ ; if ( for ( < j ) < j ) ; if ( for ( for ( <
f ( a [ j ] == i + _<number>_ number } ) j = _<number>_ < } ) ] = ) ] < _<number>_ < count number _<number>_ < _<number>_ < count ( [ } , }
or ( i = _<number>_ ; i < n ; i ++ + for ( ( n - _<number>_ ( count ++ ( ) ++ ) ) ) n - > = _<number>_ = _<number>_ = a { > > ] ; > { _<number>_ j ++ ( flag ( {
or ( int i = _<number>_ ; i < n ; i ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
= N [ i ] ; } }
rintf ( _<string>_ , repeat , miss ( ] number ( , ) ) number < int int ] < if ( , == v ( [ _<number>_ } } ;
f ( j == ar [ i } } )
rintf ( _<string>_ , ( n * ( n + _<number>_ i ( j ( j ) <START_BUG> _<number>_ <END_BUG> > j n ( & ( [ number ) ) ) ( [ [ , } }
um = sum + a [ j ] ; }
f ( j == n - _<number>_ )
f ( a [ i ] == j ) {
f ( ( a [ i ] == a [ j ] ) && ( i != j ) ) {
= n * ( n + _<number>_ ) / _<number>_ ;
nt n , sum = _<number>_ ;
rintf ( _<string>_ , k - sum + v ) ;
nt n , i , j , l , k , string ;
rintf ( _<string>_ , num [ i a , n ] ) < < i < {
rintf ( _<string>_ , j + _<number>_ + a i + _<number>_ i ( , i ) number < _<number>_ ) >
canf ( _<string>_ , & ar [ , n a number ( + = - number ) ) ; j ++ number = ) < < < ] < [ ) string i ] < a < j < ] < ] < ] < ) for ( int ) > _<number>_ = i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ; j = n ; n ++ ) for ( ) ; j = int j ( ) ; j ++ ( ) for ( ) ; j = int j ( ) ; j ++
rintf ( _<string>_ , j ) ; k = _<number>_ ; num1 = j ; s = j + _<number>_ < { string ( _<string>_ = [ [ [ [ [ [ { ) [ [ [ [ ] ] ] ] ; string
issing = i ;
rintf ( _<string>_ , repeat , missing int repeat {
nt s [ _<number>_ ] ;
rintf ( _<string>_ , rn ) ;
f ( count [ t - _<number>_ ] == _<number>_ ) j = flag < m < j < a < a < ] < v < _<number>_ = _<number>_ = sum < v < _<number>_ = _<number>_ < _<number>_ ) [ number if ( ] , number for ( ] for + _<number>_ } { number = a ; [ number }
f ( count == _<number>_ ) r = number ;
f ( b == a [ j occ = _<number>_ i i i - & & string = n ( number a a ] ( number ] ( number ] ( number ] ( number ] ( number [ if ( for ( if ( if ) }
lse printf ( _<string>_ , rn ) ; } ] = _<number>_ * flag < _<number>_ < _<number>_ ( ] ( ] ( [ j - _<number>_ ( ] ( [ n - _<number>_ ( ] ( [ ) number - _<number>_ n ( a { + i ( a + [ i n number _<number>_ n ( a } { { { { { c j + _<number>_ = _<number>_ =
lse { mn = i + _<number>_ < < ; n = ( ] ) * string < ) n < ) , b > _<number>_ < p + _<number>_ + p - _<number>_ + p - _<number>_ + p - _<number>_ < = _<number>_ < = = = = = = = = = = = = = = = = = = = = = = _<number>_ < int int b i > _<number>_ ) < int b > _<number>_ ) < < < int b > _<number>_ ) < < < int b > _<number>_ ) <
= _<number>_ ;
= ( n * ( n + _<number>_ ) = _<number>_ ) ;
nt n , a [ _<number>_ ] , c > _<number>_ + if ( ] n n - A j == _<number>_ + & & & & int int int int int number number < for ( } int }
rintf ( _<string>_ , b , flag = flag ) ;
f ( arr [ j ] == ( ( ( int ] number string number + _<number>_ number for ( for ] , l , }
old = count ( n , [ ;
nt sum = _<number>_ ;
rintf ( _<string>_ , a [ < ] ] ] occ flag + _<number>_ { < <unk> ; a ] ( A [ i ] ( { count ) ( { count ) ( { count ) - & _<number>_ ; m p m = _<number>_ ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p ; m p
nt n , i , k , l , count )
f ( d [ i ] == a [ j n ) ] = = ;
nt n , num [ _<number>_ ] , i , a number number number number number number = _<number>_ ;
cc [ p ] ++ ; } }
or ( i = _<number>_ ; i < n ; i ++ ) {
or ( i = _<number>_ ; i <= & [ ( { = _<number>_ ) i i ( ] ++ ( ( for > _<number>_ number occ <= { i ++ ) ) = _<number>_ = _<number>_ = { i i i ++ i + _<number>_ i + _<number>_ i i i i + _<number>_ + _<number>_ i i i ++ + _<number>_ + for ( = _<number>_ i i i i i ++ + _<number>_ + _<number>_ i i i + _<number>_ i + _<number>_ i + _<number>_ i + _<number>_ i + _<number>_ i + _<number>_ i +
nt a [ _<number>_ ] , & & & m > { > > > i ( , , number ( { = _<number>_ = _<number>_ = _<number>_ > N > i ( , , , , , ;
[ i ] = _<number>_ ; }
rintf ( _<string>_ , repeat , missing ) ;
nt n , i , j int j int string > _<number>_ j j j , & k ;
or ( j = _<number>_ ; n = j ; number ++ > & & ] = _<number>_ < - _<number>_ ( i - [ [ [ [ } l , [ [ [ [ [ [ [ [ [ j t t t t ) t t t t t t t t t t t t t t t t t < _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < =
rintf ( _<string>_ , p , ( string i ) ) ; int ) ; , ( for ( array n - _<number>_ number ( a != _<number>_ ( arr != _<number>_ ( arr != _<number>_ ( arr != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_ ( count != _<number>_
or ( j = _<number>_ ; n < }
rintf ( _<string>_ , arr [ arr ] ) ; a [ i ] ( array == _<number>_ ( count == _<number>_ ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( _<string>_ ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( _<string>_ ( if ( if ( if ( if ( if ( _<string>_ ( if ( if ( if ( if ( if ( if ( if
= s - sum ; a = p + string < - + + _<number>_ ; }
rintf ( _<string>_ , n ) ; } } }
f ( j == n - _<number>_ )
rintf ( _<string>_ , arr [ i ] ) ; m = } _<number>_ + _<number>_ ; m = , & } - , , }
f ( x == a [ j ] )
f ( arr [ i ] == ) ] [ = b _<number>_ n ++ < ) < j ; }
f ( count [ t - _<number>_ , ) [ number n num == _<number>_ , int int number [ ( for ( _<number>_ , _<number>_ , } + _<number>_ , _<number>_ + _<number>_ + [ ( } - _<number>_ ] == _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ +
rintf ( _<string>_ , j + _<number>_ ) ; }
or ( u = _<number>_ ; ] <= = a { { { { { a = a for ( } _<number>_ ; j <= number for ( { _<number>_ j ( + _<number>_ > , , if ( c ++ + _<number>_ + ] + {
f ( m == _<number>_ ) int {
or ( int j = _<number>_ ; & > _<number>_ ; & -- > a + ( arr a a a a ] -- ) ) ] > _<number>_ < j < j < ( j - i ( l ( [ + _<number>_ { + _<number>_ { < _<number>_ number number -- number number number number number number -- number number number number -- number number number number -- number number number number -- number number number number -- number number number number -- number number number number number -- number number number number number -- number number number
rintf ( _<string>_ , rep , b ) ;
rintf ( _<string>_ , mis ) ;
nt i , j , n = _<number>_ number arr2 [ _<number>_ a = _<number>_ number < / _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
lse if ( arr [ i { == _<number>_ > _<number>_ ) n [ < ] ;
rintf ( _<string>_ , twice ) ;
f ( m == _<number>_ ) break ; }
f ( b [ i ] == a [ j ] ) d [ i , d = _<number>_ ; }
= a [ i ] ; }
rintf ( _<string>_ , j + _<number>_ i i = _<number>_ , i = _<number>_ ) i i i i i i = _<number>_ = _<number>_ > ( [ ( int , int ( i j ;
rintf ( _<string>_ , <unk> ) ;
f ( ( i != ar int ( , ( [ > ) - , { = _<number>_ ) ) ] )
++ ; }
or ( j = i + _<number>_ ; n < scanf ( n > c ++ = - _<number>_ ( j ++ ( n i i ) ) ) ; l ++ ) {
um += a [ i ] ; a ] += ar [ ( a [ + + + > ] i i i ) ; , <END_BUG> += } n = } _<number>_ = _<number>_ < }
n = rn ; }
um = count ; }
rintf ( _<string>_ , num ) ;
f ( a [ i ] == i + _<number>_ > string ) j = _<number>_ ;
f ( a [ i ] == ) ] = ( j number _<number>_ ( , ( , ) ) scanf ( _<string>_ i }
rintf ( _<string>_ , k - break i i = _<number>_ ( l ] ( [ = % _<number>_ number number number number > , > _<number>_ > string > , > , string > string > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > , > ,
f ( a [ i ] == n n )
nt a [ _<number>_ ] , j i number + _<number>_ = _<number>_ i i < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < N ;
or ( j = i ; = ( n - + ( j - ( j ++ > j > _<number>_ > n i i i = _<number>_ = _<number>_ = [ _<number>_ if ( > n = _<number>_ > i ; ( ( ( ( ( ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
nt n , i , j ;
f ( a [ j ] == i + _<number>_ ) n - _<number>_ i i i i i i i i i i i i + _<number>_ ) n - _<number>_ i i i i i i , { b ] == < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
nt n , i , t > _<number>_ [ [ n { break {
t = t + _<number>_ ;
f ( a [ j ] == ) = ( = [ a [ n int + _<number>_ n j { )
f ( a [ j ] == i + _<number>_ number a i - _<number>_ + v + _<number>_ + if > , , , , , } ;
f ( check [ l ] == _<number>_ ( ( _<number>_ i ) ) - { {
or ( int l = _<number>_ ; - < a ; , ++ i > n ; {
um1 = sum - a [ i i i ;
f ( t == n ) printf ( _<string>_ } int int ] i ; count > [ i > _<number>_ int number ( a n i i i i > _<number>_ ( a == [ = > _<number>_ n > [ = - _<number>_ ] ( { m n > _<number>_ j - i ( a == , ( a n > _<number>_ ) > _<number>_ ) > [ < _<number>_ n n n n n n n ) ) =
lse { t ++ ; }
ount [ arr [ i ] ] = m ) i < b number [ j i i + _<number>_ + ( } _<number>_ ) ;
f ( num == _<number>_ )
rintf ( _<string>_ , hold ) ; }
f ( a [ i ] == } {
f ( b [ i ] == a , { }
rintf ( _<string>_ , nat [ i number number > N ( l ( a [ = , , < , [ < ) ) ) i ) i ) ;
= n - sum ;
nt a [ n ] ;
f ( arr [ j ] == } number ) {
[ i ] = i + _<number>_ < j ;
rintf ( _<string>_ , d [ i i [ int [ = [ = , ] , ] number = _<number>_ number - _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
rintf ( _<string>_ , d [ i [ = number ] ) ; a ] = _<number>_ i ; a , break ; a , break ; a , break = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
or ( i = _<number>_ ; i <= n b string _<number>_ ; , ++ ( j ++ ( ( ( j - l ( n - l ( ( for n + _<number>_ + d + _<number>_ + n + _<number>_ + n + _<number>_ ) ) ) ) ) ) i ++ ) + _<number>_ = _<number>_ = n k ;
f ( a [ t ] = v + _<number>_ ( n ( n ) ) {
n = a [ i ] ;
nt n , i , j , l , count , } ;
f ( a [ i ] == _<number>_ ( ] number { k [ = + _<number>_ + > _<number>_ > ( , [ ( , [ = ] number _<number>_ + > - _<number>_ ] ] ] ] ] ] ] ] ] ] i i i ( , ( , ( , ( , ( , ( , for number ] ( ] number number number number number number - _<number>_ number ] number ] number number number number number number i i i i i i i i i i i i i i i i i
f ( a [ i ] > _<number>_ ) & & > = < _<number>_ + ( { }
c ++ ; } }
or ( int i = _<number>_ ; = <= }
f ( a [ i ] == _<number>_ = { sum ( _<string>_ a v + _<number>_ v + _<number>_ + = _<number>_ + = _<number>_ + = _<number>_ + > _<number>_ + i + _<number>_ + _<number>_ + n + } ) <
nt i , n , j , k ) n + _<number>_ < b number for ( temp i i int a number i int a number i int a number i int { i int { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { & { + _<number>_ int { string int } int + _<number>_ < & + _<number>_ int
= _<number>_ ;
= j ; }
lse if ( arr [ k int { { a { l == ] && } == ] <START_BUG> _<number>_ > ] ;
f ( a [ j ] == ( ( = { _<number>_ [ { _<number>_ ] [ { _<number>_ n ) i ) ] ;
= a [ i ] ;
f ( s [ i ] == , > j i i i i i i i i i > j > ) number ;
count = _<number>_ ;
f ( k != set [ + + i x ( [ j x ( [ j x ( a != _<number>_ ( [ } arr = _<number>_ ( [ n m ( [ n m ( [ , , b b + _<number>_ b + [ , ] + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ +
rintf ( _<string>_ , a [ < + < l + < l [ < + < - < ;
or ( int i = _<number>_ ; i < } count count count count count ++ )
nt n , i , j , m ( j i i i i i i i i + _<number>_ + arr number ) ;
f ( m == _<number>_ ) + ! = = = = = = = = = = = > > > + + > ; {
nt n , i , j , c , c int c int c [ _<number>_ ] int if ( }
= a [ i ] ;
f ( s [ j ] == }
lse if ( arr [ i , == _<number>_ , set , i , i , i , ] == _<number>_ j number number < _<number>_ ) }
= ( n * ( + _<number>_ ( printf ( _<string>_ a printf ( _<string>_ a number printf ( _<string>_ [ number <END_BUG> ( + _<number>_ ( ) > _<number>_ > string > _<number>_ > string > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m > m >
or ( j = i ; = > , n ; , ++ = _<number>_ = _<number>_ ;
f ( c != _<number>_ ) }
f ( c != _<number>_ ) {
f ( s [ i ] == { n int + { j = + _<number>_ ;
rintf ( _<string>_ , i ) ; <START_BUG> ; [ ] j ; [ ] j ) number = string ; else [ = arr ] ; * ( { if ) ( { if ) { if ( { if ( { * = l < { check [ = number _<number>_ i - _<number>_ i - _<number>_ < int int int int ) }
rintf ( _<string>_ , mis ) ;
rintf ( _<string>_ , rep ) ;
or ( int l = _<number>_ < n < b ; , < b ; , ++ > j ++ > b > b ; int int int int = { _<number>_
f ( check [ l ] == _<number>_ ( + _<number>_ + ] + for ( for ( } - _<number>_ ) * a ) j ] ) < [ , i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i >
f ( a [ j ] != ( ( } = _<number>_ = _<number>_ = _<number>_ = * < A ] i i i = _<number>_ = _<number>_ > ) > i > _<number>_ > )
f ( a [ i ] != > ( = { = _<number>_ ;
rintf ( _<string>_ , arr [ = , = + _<number>_ l + _<number>_ + > arr [ > number check [ > { int i j j j j j j j j number n n n + c a < > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + >
rintf ( _<string>_ , arr [ i [ i , int = , int int , d ) < arr < arr } }
f ( arr [ i ] == arr [ int ] ( n ( } - }
epeat = arr [ j ] ;
rintf ( _<string>_ , rep , rep ) ;
rintf ( _<string>_ , & a , miss ) ;
f ( s [ m ] == l ) {
f ( s [ m ] == l ) {
rintf ( _<string>_ , i + _<number>_ ) = > _<number>_ ( } ) <
nt a [ _<number>_ ] , n , = }
rintf ( _<string>_ , a [ i ] ( count i i i i ] ] ( ] ( j ( j ( found < _<number>_ ( n < _<number>_ > _<number>_ > n > _<number>_ > n > _<number>_ > n > = _<number>_ > n > _<number>_ > n > _<number>_ > n > _<number>_ > n ( if ) ( if ( _<string>_ ( n = _<number>_ ( if ( if ( if ( if ) ( if ( _<string>_ ( n = _<number>_ ( if ( if ( if ) ( if ) = _<number>_ (
f ( j == ar [ i ] ( {
nt n , i , j , flag = _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ number
nt check [ n + _<number>_ ] ;
or ( int l = _<number>_ ; l <= a ; [ [ [ j ( j ++ ( j ++ {
rintf ( _<string>_ , twice ) ;
= i ; } }
= a [ i ] ; }
f ( arr [ i ] == arr [ [ + n {
rintf ( _<string>_ , num ) ; }
f ( i == a [ j ] ( ( ) { }
f ( count == _<number>_ ) {
rintf ( _<string>_ , & msng ) ;
nt b [ n ] ;
rintf ( _<string>_ , miss ) ;
f ( i == a [ j ] )
f ( N [ i ] == N ) {
rintf ( _<string>_ , rn , mn ) < int printf ( _<string>_ number & t + for ( for ( }
[ i ] = _<number>_ ; }
rintf ( _<string>_ , p , g ) ;
[ i ] = i + _<number>_ ; [ < { _<number>_ [ = ( + _<number>_ n n ( = ( = - _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ( , if ( = ] i i ( + _<number>_ i i i i i i i i i i i i i i i i i i i i i i i
f ( s [ i ] != num number _<number>_ > int check ( ] i != } - _<number>_ + j + _<number>_ + _<number>_ + {
f ( i != j && a [ < < ] == arr , + < < j ( < string number > arr n ) i ; , {
f ( i != j && a [ < < n ] + _<number>_ ( > ] ( , != , number number > n > > }
f ( p == _<number>_ ) {
f ( occurence [ i ] == _<number>_ , for ( string { ; ; n ++ + ;
f ( occurence [ i ] == _<number>_ ) n - _<number>_ ; l = c ;
rintf ( _<string>_ , p , j ) ; } } {
or ( j = n ; j > _<number>_ ; for ( string + string > _<number>_ ; break = _<number>_ ; string -- number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
rintf ( _<string>_ , a [ i ] ) ; & } string ++ }
rintf ( _<string>_ , p , j ) ; int - _<number>_ ; n n + _<number>_ ; { - ) ; , printf ( _<string>_ { { { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d { scanf ( _<string>_ { d
f ( arr [ k ] != l && , == , printf ( _<string>_ int }
f ( count [ i ] == a a a a { _<number>_ , , , count i number number i i i > n > _<number>_ ( f , occ , + _<number>_ ( {
rintf ( _<string>_ , k - sum + sum number number ) i ;
um = sum + a [ l ] ; {
f ( c == _<number>_ ) break ; [ { [ int for ( if > c ( a == _<number>_ ) ) m > count1 ; { { { : c ; { { { { { { { { { { { : count > _<number>_ ; { { { : count > _<number>_ ; { { { { { : count > _<number>_ ; { { { { { : count > _<number>_ ; { { { { { { : count > _<number>_ ; { { { { { { : count > _<number>_ ; {
rintf ( _<string>_ , j ) ; } , , + _<number>_ < count ) j = count {
f ( count ( j , n ) == _<number>_ ) {
or ( t = _<number>_ ; t <= n ; j ++ j } { int a [ j sum ) ] ; } }
nt i , n , j , a } ;
ort ( n , a ) ;
nt n , i , j , d + [ _<number>_ } + _<number>_ } + = [ _<number>_ } } ;
um = a [ i ] ;
canf ( _<string>_ , & a [ i ] ( sum = _<number>_ ( a n ) ) ) ;
f ( c [ p ] == b ) a )
or ( j = _<number>_ ; j < + = _<number>_ ; ] ++ ) count i ++ + _<number>_ = _<number>_ ; j ++ ) {
= i + _<number>_ ; }
lse if ( arr2 [ i ] == _<number>_ )
or ( i = _<number>_ ; i <= ] ; i ++ i ) [ _<number>_ , < _<number>_ ( = _<number>_ number - p [ i for ( i > _<number>_ ) ; i <= ] ; i ++ ) , }
lse if ( arr [ i ] == _<number>_ ) }
rintf ( _<string>_ , a [ i ] ) ;
= j + _<number>_ ;
nt arr [ n ] ;
rintf ( _<string>_ , repn ) ;
nt i , n , j , a [ _<number>_ a number ] ( string i - _<number>_ ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
f ( arr [ i ] == a [ j ] )
lse if ( c1 == _<number>_ )
nt i , j , n , p , array } ) ;
f ( s [ m ] == l ) {
rintf ( _<string>_ , n * ( n + _<number>_ ) / _<number>_ printf number _<string>_ { ) = , [ , [ ( , > _<number>_ > number > , , , for ( number ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
= a [ i ] ; } } }
= a [ i ] ; } } }
f ( i == a [ j ] ) {
f ( j != k ) {
f ( ar [ i ] + ar arr [ [ [ [ , n n n n n n n n ] == x > x > x > & & & & & & & & & & & & & & & & = & & & & & & & & = & & & & > & & & & & & c ( ( ( { { { { { { { { { {
or ( j = _<number>_ ; j < [ > n < j ] < [ i { i ++ = _<number>_ ; number ++ > _<number>_ > }
or ( i = _<number>_ ; i < { < _<number>_ ; > A arr j ++ = _<number>_ = _<number>_ < <unk> ; i ++ ( {
canf ( _<string>_ , & s ) ;
rintf ( _<string>_ , a [ b [ k = = > + > > number > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a = a = a = a = a = a = a = a = a = a
rintf ( _<string>_ , a [ b [ k ( int = i > j ( string i ( > j i ( string + > i + > n + > + _<number>_ + > + > _<number>_ + > + _<number>_ + > n + _<number>_ + > & number + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + number + _<number>_ + number + number + number + number + number + number + number
f ( a [ i ] == a number < { _<number>_ , _<number>_ , = _<number>_ {
= s - b [ i ] ;
rintf ( _<string>_ , x , b [ i1 ] ) ; { [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ int , , int int , if ( p , m , l ) = _<number>_ = _<number>_
or ( j = i + _<number>_ ; string ; string ++ ( , ( , ++ [ , + , + , number > _<number>_ > , a ) - _<number>_ number number number number number number = _<number>_ > number ; j ++ > , j ++ > , number > number ; j ++ > _<number>_ > number ; j ++ > _<number>_ > = _<number>_ ; i1 ++ , i1 ++ , i1 , i1 , i1 , }
f ( t [ i ] + t = int + + j == & s i i i i )
f ( a [ i ] + a [ + + _<number>_ k == s ) j = p ; j {
rintf ( _<string>_ , a [ i ] , + + number a < s ( i1 = , s ( i1 = , s ( i1 = , p ) ) ) ) ; k > }
or ( c = i + _<number>_ ; = i = string < }
f ( a [ i ] + a ] == ] )
f ( a [ i ] + a ] == & scanf )
or ( j = _<number>_ ; j < ] < arr i i < number { _<number>_ arr k arr k = _<number>_ ( j i i i i ] ) < _<number>_ ) mn , {
rintf ( _<string>_ , array [ i ] , [ j [ = = string k n n n n n n ] > j > string > n ( [ i { + _<number>_ { < + _<number>_ ( { <START_BUG> ( { ] ) ) ) <START_BUG> ( { <START_BUG> ] ) < { <START_BUG> ( { ] ) <START_BUG> { <START_BUG> ( { ] ) <START_BUG> n < x ( n ( i ) { <START_BUG> ( n ] + ] n ) ) < < < < ] < ] < ] < ] ) <END_BUG>
rintf ( _<string>_ , ans [ i ] , ans [ i + _<number>_ ] ) ; } }
rintf ( _<string>_ , a [ ans [ i ] ] , a [ i + _<number>_ ] ) ; }
nt i , j , n , arr number _<number>_ v ;
rintf ( _<string>_ , arr [ j ] i i i i i ( & n ) ) ;
or ( a [ i ] = _<number>_ ; a i i [ > { { _<number>_ int [ > _<number>_ ( } _<number>_ + _<number>_ , _<number>_ > n > { n < = _<number>_ > { n < _<number>_ > { n < _<number>_ > { A < _<number>_ ; n < N > N < N < N < N < N < N < N < N ( N ( string ) string _<number>_ ] ] ] ] = a < > _<number>_ ] ] ] ] ] ] ] ] ] ] ] = a
rintf ( _<string>_ , a [ i ] & + _<number>_ i i = _<number>_ k i + _<number>_ , n , j k k k k > < < _<number>_ j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j ] ] ] ] ] ] ] ] ] ] ] ; i <= j ; <END_BUG> , a , j = _<number>_ ] ;
ouble ch , i ;
h = getchar ( ) ; }
f ( a [ j ] + a [ j ] == s ) {
or ( i = _<number>_ ; i < n - _<number>_ ; i ++ ) {
rintf ( _<string>_ , ( a [ j ] + a [ j ] ) ) ;
canf ( _<string>_ , & s ) ;
rintf ( _<string>_ , x [ k ] , j [ array ] ) ; <END_BUG> ++ > & } printf ( _<string>_ > [ & number j j j j < s < ] < s < ] < ] < ] < ] < ] < = ) ; int = = = = = _<number>_ ; int = a a a a a a a a a a a a a a k > ] ; & for ( [ [ n , n , ] , ] < j , ] < j < j <
rintf ( _<string>_ , s [ i ] ( n [ array ] ) ) ; long
f ( s [ j ] == s i j ) k k ; k ; n < k number & & i < + _<number>_ < number & number & [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ , } } }
rintf ( _<string>_ , a [ j ] , a [ k ] ) ; } string = k < > > a j i ( a int } ) <START_BUG> != + ( number i > ( number int = int int ) <START_BUG> ( number int + number int number int = + ( f i i ) i int = + ( f i i ) i ] i && ( string == > > > > > > > > > > > > > > > > > > > > > > > >
rintf ( _<string>_ , & a [ j ] , a [ k ] ) ; } string ( n [ + + _<number>_ j j j ans > { ! ) + ( { ! ) ( string == { ( { { } long ) + ( { _<number>_ i i i i i i i - ( { ! ( { ! ( { { }
canf ( _<string>_ , & array [ i ] ) ; for ( ( ( ( ) < a k < + + _<number>_ < ) < a , ) < a k < ) n number ) < ) < < < < < a k ) < a < ) < < < < a k < ) < < < a k < ) < < < = _<number>_ ; { {
f ( array [ i ] + array [ j ] == for ( a [ ( l , + = k ] == s < s < for , ) ] == for , k < for , k < k < for , k < + k < for , = _<number>_ < for , = _<number>_ < for , = _<number>_ < for , = _<number>_ < for ( = _<number>_ , ] == } ( } ) ( number ] == } ( } - _<number>_ ( u == } ) ( u ( u (
or ( j = n ; j > _<number>_ ; j -- ) {
rintf ( _<string>_ , a [ k ] , a [ j ] ) ; }
rintf ( _<string>_ , & a , & number , number , number ( [ _<number>_ s ( > { , , ) ) < < < < _<number>_ < + _<number>_ < ] < n < n > n > ] < n > n > ] < n > n > ] < n > n > ] < n > n > ] < n > n , n , n , n ; for ( sum j j j j j j j j < _<number>_ < + _<number>_ < [ k i i i <
f ( a == s [ i ] ) ] == for ) ] == { _<number>_ n < j > , l ch _<number>_ ;
rintf ( _<string>_ , a [ i ] { <START_BUG> n ; int k n , { <START_BUG> a a a a k j j j == s long main ( _<string>_ j j j j j j j j j j j j j j j long main ( _<string>_ j j j j j j j j j j j j j j j j j long main ( _<string>_ = number ] + ] + ] > ] > arr + ( ] > arr > arr + arr + arr > { <END_BUG> } ; }
f ( m [ u ] < m [ j ] == s && m [ u n ] != j i + _<number>_ + ] + }
canf ( _<string>_ , & n ) ;
or ( k = _<number>_ ; k < j ; i ++ )
or ( k = _<number>_ ; k < n ; ] ++ > _<number>_ )
f ( s == ( a [ k { > number int n { _<number>_ = _<number>_ , sum , k < _<number>_ ( int int ( & & ] ( & & ( & & ( & } ( & n ( & & ( & & ( & } ( & & ( & } ( & & ( & } ( & & ( & } ( a } int + ) = string i i i i i i i i i i i i i i i i i i i i i i i
or ( i = _<number>_ ; i < n ; i = i + _<number>_ )
or ( j = _<number>_ ; j ; j = j { { { j > s { = _<number>_ ; = = = = [ [ [ [ a k k k string _<number>_ k < a string _<number>_ ( a l _<number>_ ( j + _<number>_ ( ( j + _<number>_ ( j ( ( scanf scanf ) ( a i + a ( a i + _<number>_ ( a i + a ( a i + _<number>_ ( a i + a ( a i string ( a i + _<number>_ ( a i + _<number>_ (
nt s = a [ N ] ;
rintf ( _<string>_ , array [ i = scanf ( _<string>_ , ] a [ i a > ] = int ] , long ] i < {
nt n , i , j , s ;
um ++ ;
or ( i = _<number>_ ; i < = a ; ) {
rintf ( _<string>_ , a [ i a + j [ n = int j = int n i number > s ) ;
f ( a [ i ] + a [ = [ = [ = [ = [ [ [ [ a = = _<number>_ = _<number>_ n n n ] ] ] == s ) string = if ( a [ > ] = a [ number ] ) string = _<number>_ < if ( a [ > ] = a [ number ] ) string = _<number>_ < if ( a [ > ] = a [ number ] ) string = _<number>_ < if ( a [ > ] = a [ number ] ) string = _<number>_
f ( a [ i ] + ] == - - - ] ( = - ] ( [ = - l > [ [ ( a - a j j j j ( n - > , l ( n - n , number ( n - n , number ( number a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
f ( t [ i ] + t [ { , { break = { _<number>_ nd + ] == - k > _<number>_ < ] i i == = _<number>_ )
or ( l = _<number>_ ; l ; + }
canf ( _<string>_ , & arr n ; { j = ] ; & n string > ; }
rintf ( _<string>_ , a [ i j > n ) ; string ( _<string>_ + n ] + n n i i i i ) ; number = s < s && number [ i ] = ] ( ] ) < ] < ] < a k string ) < a < a k < a k < a k && > k != a k ( > a k ( number k = s ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] (
rintf ( _<string>_ , a [ i j + = = [ [ [ ] j j n ) ; scanf ( _<string>_ + n ] + n n ) ; scanf ( _<string>_ + a [ i ] ) < a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ] ( a [ number ]
f ( a [ i ] + [ ] == int int s i i i i ) [ i n n n n n , j k == scanf ( ( j , j ( j == k , k , l , a , l , l , l , l , l , a ] , l , l , l , l , a ] , l , l , l , l , l , l , l , a ] , l , l , l , l , l , l , l
nt i , j , n , [ _<number>_ ] ;
f ( k + l == s ( ( ( for ) + if ) ( for ) ( = c ( }
rintf ( _<string>_ , i , + [ [ i = number j ] + n > _<number>_ > ( ( n a a a ] > = string + _<number>_ + ) + _<number>_ + ) ( } - j ( _<string>_ < > a ( } - _<number>_ < _<number>_ ( string ( } - _<number>_ < _<number>_ ( string ( n + ( n , number + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n +
canf ( _<string>_ , & a [ string + string + [ string + _<number>_ + a + j + _<number>_ a ( i - i ( [ i a a ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i (
or ( l = i ; l < int - n ; = ++ ) scanf ( _<string>_ ( + + + + + + a ( & b [ & ] ( ( & ( & ( a i ) number a ++ ( & b ( ( a ++ ( ( ( a ++ ( = - b number }
f ( sum == a [ b ] + a [ c ] ) {
rintf ( _<string>_ , ( a [ b ] , a [ c ] ) ) ;
rintf ( _<string>_ , a [ , int n > ] ) ; s = array ] ; s number j ) if ( _<string>_ ( [ i > , , = , = string ) ;
f ( a [ i ] + j , i == & & & for )
nt a [ n ] ;
rintf ( _<string>_ , a [ ( s [ > i = & a [ j = ( & ] > & > > & & [ ( ] + ] ( ( n ( n j j + ] + ] + ] + ] + ] + ] + ] + ] + ] + ] + ] + ] + [ ] + [ ] + _<number>_ + ( [ ( [ ( [ ( ( [ ( ( n - [ ( ] + [ ] + [ ] + _<number>_ = _<number>_ = _<number>_ =
or ( i = _<number>_ ; i ; ) = j count _<number>_ < j count _<number>_ < ) string number _<number>_ < k s s ;
lse { continue ; } }
int a [ i ] ; & if ( string array , j ) ; string i ; number ; string i ; string ; string ++ ; {
f = _<number>_ ;
f ( array [ i ] == array ] ( j ( j ( s ( ( u + > ) ) ) ) )
rintf ( _<string>_ , array [ j ] ) ; int , ] ; int + + = + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( s == a [ j ] + ] , ] ) n == }
f ( ( x [ i ] + j } j == for > > j if ( i < [ ) [ ) _<number>_ array n array ;
f ( ( x [ i ] + & & ] == s - _<number>_ ) && i ] ] < j ] )
rintf ( _<string>_ , out [ i ] , out [ i ] ) ; }
nt n , s , i , j , t , k ;
nt i , b [ _<number>_ ] , n [ _<number>_ num ;
canf ( _<string>_ , & s ) ;
f ( k < k ) {
or ( j = _<number>_ ; j < [ = i ; n ++ ) for ( n [ _<number>_ + n + _<number>_ + } + _<number>_ + n [ j ] ] < number [ , ++ n ( ( _<number>_ * j ++ ( j ++ ( ( number - array [ j ] ( , , , ++ ( ( number - array [ j ++ ] ( , , , , , , > number ( ( ( _<number>_ * j ++ ( j ++ ( ( number - array ++ ( j ++ (
f ( a [ i ] + = array a a a a a a a a j == for )
canf ( _<string>_ , & a [ > int = s , n , i , string ( ( l < _<number>_ ( , = j - + + + + _<number>_ ) ) ) ; string ++ ) ; string ; string ; string ; string ) ; string ; string ; string ; string ; string ; string ; string ; string ) ; string ; string ; string ) ; string ; string ; string ) ; string ; string ; string ) ; string ; string ; string ) ; string ; string ; string ;
canf ( _<string>_ , & a [ i { if i ( c , & & > }
or ( u = _<number>_ ; u < k ; u ++ ( u ++ ( u ++ ) ) ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m
rintf ( _<string>_ , m [ u ] > i j ( string j > int int int ( } out j < [ } > int [ } > int } > out j > int } ( } out j > int [ } > int [ } > out j > int } > out j > arr j > arr j && [ } > [ } > { out j > int } - _<number>_ ( } j > int [ } > out j > arr j > arr j > arr j (
or ( i = _<number>_ ; i <= n int _<number>_ i i > for ( ( > _<number>_ > { + _<number>_ ) < = - _<number>_ < )
f ( ( array [ i ] a a array a a a a a , }
rintf ( _<string>_ , s [ i ] i i > & & & & & > number ) ; & & number + i > number ) ; & & & , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [
hile ( j >= i )
= _<number>_ ;
or ( l = _<number>_ ; l < i < { [ [ + _<number>_ = _<number>_ j j j ++ ) s ++ ) s < }
nt n , i , s = _<number>_ ;
= ( c , b ) < }
rintf ( _<string>_ , a [ i [ , + [ [ [ [ , [ , j + [ [ = } } ] ] [ j [ j , ( ] [ = ( ] [ = ( ] [ = ( ] [ = ( ] [ = ( ] [ = ( ] [ = ( ] < num < num < num < num < num < num < num < num < num < num < num < num < num < num < num < num < num < num < num <
nt n , i , j ;
rintf ( _<string>_ , a [ i ] j + { break < { break < { _<number>_ j = for ) < { <END_BUG> ( { break < , , & & & & & & & & & & & & > j > j > j > u & j > u & j > , j > , j > , j > , j > , j > , j > , j > , j > , j > , j > , j > , j > , j > , j >
or ( i = _<number>_ ; i < int number j ; > array j )
rintf ( _<string>_ , array [ i ] [ j int a ] + ) ; s {
nt a [ _<number>_ ] , n ( > s > int [ _<number>_ a ) < [ _<number>_ {
canf ( _<string>_ , & a [ i = _<number>_ = number = & ] ) i i i i i i i i i i i i i ) ) ( [ [ k j j j j j > _<number>_ > number > number > number > number > number > number > number > number > k > number > k > number > }
nt n , i , j , sum = _<number>_ , x = > _<number>_ + _<number>_ > _<number>_ ;
canf ( _<string>_ , & array [ i ] ) ; }
[ k ] = s - a [ k ] ;
rintf ( _<string>_ , a [ i ] > [ , , , ] , [ > { scanf ( _<string>_ i ] i i i i i - a [ , ] < k < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number ( + j < string < string < string < string i i i i i i i i i i i i i i i i i i i i i i
f ( s < a [ i ] + a [ j ] ( {
[ j ] = _<number>_ ;
f ( ( a [ i ] + a [ j ] ) == s && ( b [ number i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( a [ k ] < a [ i ] == out > - & & s ( ( a [ = ] number a [ + + + _<number>_ [ + + _<number>_ [ + + [ + _<number>_ [ + + [ + _<number>_ [ + + [ + _<number>_ [ + + [ + _<number>_ [ + + [ + _<number>_ [ + ( n - _<number>_ j j j j j j j ] & string , n , n , j , string , j , string , j , n , j ,
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; sum = number = number = [ < < n printf ( _<string>_ ] ] ] ] ] ] > + ( scanf = A = _<number>_ > N = _<number>_ > N > N > N > N > N > N > N > N > N > N > N ;
f ( s == a [ i ] + a [ j ] ) n ; n ( int [ < + _<number>_ j > & scanf ( ) number - _<number>_ ;
f ( ( a [ m ] + a [ m ] ) == printf ( number a a a a ] i + n + n + n + _<number>_ ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , m , + & = _<number>_ ( & & & & & & & & & & & & ( & & & ] ( ; ( & & ] ( & &
f ( ( ar [ i ] + ar [ j ] ) == n ( number + < if i < + _<number>_ < int = _<number>_ ) ;
rintf ( _<string>_ , m [ u ] , m [ j ] , & & number number < scanf ( _<string>_ ( & ] ( & ] ( & & , & & , & != scanf ( _<string>_ ( & ] ( & ] ( & & , & & , & != scanf ( _<string>_ ( & ] ( & ] ( & & , & ] ) == printf ( _<string>_ > ] , + b , ] ) < printf ( _<string>_ > ] , + b , ] > ] ) < < <
f ( a [ i ] + a [ j ] == s > s + _<number>_ , = for ) i k i j ;
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; string ++ , = _<number>_ ; int = = = = = = = ] < ] < ] < ] , ] < ] , ] < ] , ] < ] , ] < ] , ] < ] , ] < ] , ] < ] , ] < [ + + + _<number>_ = _<number>_ ; } }
or ( i = _<number>_ ; i < n ; i ++ ) }
f ( a [ i ] + a [ j ] == s )
or ( i = _<number>_ ; i < n ; i ++ ) }
rintf ( _<string>_ , a [ i ] , a [ k ] ) ; number [ ( ] == for > [ ; ; _<string>_ j j ( [ ; + + number number number number ( = j number ( = j , = scanf ( _<string>_ ) ) ) ; { printf ( _<string>_ ) ) sum ; { printf ( = = = = = ] i - ] , ] > s > { j == { <START_BUG> ( = = _<number>_ > = _<number>_ ) ; number m ; number m ) i ;
rintf ( _<string>_ , array [ i ] ] ] ] ] ] = string a a ] > = > = = = [ i k > { <END_BUG> ( p + a j , i + [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ k = _<number>_ ] ] ] ] ] ] , <START_BUG> = n - + ) [ j [ + + _<number>_ [ + [ + + _<number>_ [ j [ + _<number>_
rintf ( _<string>_ , & array [ j ] , for ( j string - _<number>_ + ( s ] > = j > j > j , = [ _<number>_ ] , + < < < < < < < string + < a + < < [ a = < < < < [ a = a ++ m m m m m , a j k + > > > a [ number ] ) < a < > a [ number ] < > > > > > number < > number [ number ] <
loat s ;
[ i ] = _<number>_ ;
f ( num [ j ] + num [ k ] == n > _<number>_ > n > _<number>_ > j > _<number>_ > array > array )
f ( num [ j ] + num [ k ] == s )
f ( a [ k ] + a [ j ] == s ( number ( number if ( number n if > number n ( number ( number n - _<number>_ ( number ( number n - _<number>_ ( number ( number n { & number ( ( if ( number n i ( j == { & number n ) ( number == {
rintf ( _<string>_ , a [ k ] , a [ j ] ) ; } } }
f ( a [ i ] + a [ j ] == n < _<number>_ )
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; s = a [ i ] ; if ( [ i = & + j ] , ] == for > [ ; ; ] = ] ( [ ; int ] ( [ ] ( [ ] j j j j j j j j ( [ ; ; ; ] = ] ( = j i ) ) ( = = = = = = = = = = = = = = _<number>_ i - = _<number>_ ( = for > =
f ( num [ j ] + num [ k ] == s i i i i i i i i i ] == s i i ;
canf ( _<string>_ , & ar [ i ] ) ; }
f ( ar [ i ] + ar [ j ] == s )
rintf ( _<string>_ , a [ k ] , a [ j ] i i i i ( + = _<number>_ ( = = _<number>_ , = _<number>_ ( = = = _<number>_ , = _<number>_ ( = = _<number>_ ( = = = _<number>_ ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
rintf ( _<string>_ , a [ i ] k + ] [ k n ) ; int = n ] i i i - = _<number>_ i - [ = ar ] ; scanf ( _<string>_ , ] [ = ar [ = ar [ = ar ar i ar i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( s == a [ i ] , + + + + + + & j == string j = _<number>_ ( string == number k = _<number>_ ) ;
rintf ( _<string>_ , x [ i ] ) ) ; <END_BUG> ] ; - _<number>_ ; scanf ( _<string>_ , j ] , j ( int ] ( ] , ] ( int [ + ar [ ] j < for ) < for ( ] < int [ + ar [ ] j < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_
f ( s == s [ k ] , = [ a ] )
nt m [ n ] ;
rintf ( _<string>_ , a [ i ] , a [ j ] + < for ) ; { { { { { { { j = + ( { _<string>_ < n [ > > string long n ] long ; = = k long long <START_BUG> [ > ] ) + & & & & & & <START_BUG> [ > & & [ > > string [ > > string long <START_BUG> > & a [ > > string long <START_BUG> [ > string [ > > string long < string [ > > string long < &
f ( a [ i ] + a [ i - _<number>_ ] == = = = a number number number number number number number i number number number ) {
rintf ( _<string>_ , a [ i ] , j ) ; } string ( { return , [ ( = = size [ ( = = size [ ( = = size number number number number > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_
um = ( array [ i ] + n n > [ ] > [ ( number i = _<number>_ = _<number>_ = _<number>_ = _<number>_ a n [ ) + _<number>_ & [ , n n n n n n n n n n n n n n n n n n + _<number>_ n + _<number>_ + , , [ , n n n n n n n n n n n n + _<number>_ n + _<number>_ + , , [ , n n n n n n n n n n n n + _<number>_ n
canf ( _<string>_ , & a [ n s ( string ( string [ k i i j ( n ( n - n ( j - { _<number>_ n - { { s ++ ; string ++ < a > a > a > a > a > j - j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j < j
nt i , n , s , v j > i > i > i > = _<number>_ > j > , , , [ n ] ( i i > , = _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ;
nt s = _<number>_ , i ;
f ( a [ k ] + a a = int int ) printf ( _<string>_ + ] + ] + ] ( n ( j , [ s = } _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + + + _<number>_ , + +
rintf ( _<string>_ , a [ i ] , ] , j ) ; } }
f ( a [ i ] + a [ a ] == s , = a ] == s > s > s > s )
f ( a [ i ] + a [ j [ i [ n ] [ = for ( n - < _<number>_ )
f ( a [ i ] + a [ = ] == scanf ( ( A [ < ] ( n ( ] ( n ( n > int int <unk> ) ) ( num ( ( number - ] ( num k == for ) ( num ( ] ( ] ( ] ( ] ( ] ( ] ) ( num ( ( number k - A k - _<number>_ ( _<number>_ ( > - ] == for ) ( > number ( num ( num ( num k - _<number>_ ( number ( ( num + ]
rintf ( _<string>_ , array [ i ] + j ] , = ] ( [ ( = - k > [ ) = number + ( j i x > k + _<number>_ , + ( & , + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + & & > & & > = & & > = & & & = & & & & & > if )
canf ( _<string>_ , & n ) ;
canf ( _<string>_ , & s ) ;
rintf ( _<string>_ , ar [ i ] , ar [ j ] ) ; num [ < < ] ( & & ( < & j ( < i ( ] ( j < for ( j > _<number>_ < size < size < size < size < size < size < size < size < for ( array [ ( ( j > _<number>_ < size < size < size < size < size < size < size < size < for ( array [ ( ( j > _<number>_ < size < size < size < size
f ( ( ar [ i ] + ar [ j ] ) == s ) {
or ( j = i + _<number>_ ; j < n ; j ++ )
or ( j = i + _<number>_ ; j < n ; j ++ )
f ( a [ i ] + a j == [ = int for ( a [ < j j ) { < if ( ] [ < k > ] )
rintf ( _<string>_ , a [ j ] ( n , n ) + for ( [ a ] , n , for ( [ ] , j n > & > - ( = [ ( = - = _<number>_ , = _<number>_ , ar [ n ] , = , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ ,
or ( j = i + _<number>_ ; } < j ; number ++ ) number ++ ) number ++ ) string ++ ) string ++ ) int {
nt n , k , i ;
rintf ( _<string>_ , a [ k & { printf ( _<string>_ , } { n j j = number j + string j ) ; { n a a a a a a a [ , ] ; n [ , ] == j ( number [ + ] , string = arr = a = a = ( ) - _<number>_ a number > ) n < > > > ) n number < > ) n number < > ) n number < > ) n number < > ) n number < > ) n number
canf ( _<string>_ , & ary [ ( i scanf ) s ) ; number int ] ; string ++ ) { & ary for ( < scanf ( _<string>_ + ] + scanf _<string>_ & ] int scanf > ] ( ( ( i ( ( j - i ( j ( j ; ; ; ;
f ( i + j ) == for > s i )
or ( j = _<number>_ ; j < number ; a ++ ) string ++ [ > + _<number>_ + > + > - > - < _<number>_ ( + ) ) i ; i ++ [ k = _<number>_ = _<number>_ = _<number>_ ;
nt n , i , j , s ;
or ( i = i + _<number>_ ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; < A , < B , < N ; < A , < A , < B ; < A , < B ; < A , < A , i ++ = _<number>_ = _<number>_ ; < N ; < A , < B ; < A , < B ; < A , < B ; < A , < B ; < A , < B ;
f ( s == a [ i ] a + ) ) }
rintf ( _<string>_ , a [ i [ i [ , [ a [ n = ] = ] = ] i i i i i ( = [ i ] , arr n , = _<number>_ ( a number i + a number j ] ; } }
rintf ( _<string>_ , a [ i ] > n ) ; printf ( _<string>_ ) ; = = = = j ; } }
rintf ( _<string>_ , a [ i } } } }
f ( ( a [ i ] + j ( j ) == = - > , [ > > - _<number>_ ] > a > ( + ;
f ( ( a [ i ] + [ ] = int & & s i i i i i i i i i i i i i i i > ] > s > s > s > s > s > s > s > s > number < number < number < number < number < int int int ( a ] ( a ] j j j ( a ] ( a ] ( n + a ] ( n ( n ( n ( n ( n ( n ( n ( n ( n
f ( a [ j ] == ( printf j > s i i ) && ; + number = , , , , , , , , , , a i ( + a i ( + a i ( + a i ( + a i ( + + [ + + + + _<number>_ > + _<number>_ ( a i > {
f ( a [ i ] + a ( [ < number number _<number>_ ] == & & & & & & & & & & & & & & string ] == string ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ) {
canf ( _<string>_ , & a [ n ] ( > }
nt n , k , j , i < _<number>_ < [ _<number>_ = _<number>_ j j j ;
rintf ( _<string>_ , a [ i ] i i ( string = b n ( string , string ( string ( string + ] ( int ( ( ! = + _<number>_ ;
nt a , b , i , { & ( > > > s < string < & & + + _<number>_ , & k < for > _<number>_ + _<number>_ , & [ string int int int int int int int int int int int { ;
canf ( _<string>_ , & s [ i number , = , > > _<number>_ , ] , > > > string } { { { scanf number > _<number>_ + [ [ [ [ = ] <END_BUG> _<number>_ string string string string string string string ; { {
canf ( _<string>_ , & s ) ;
f ( a == s [ i ] > [ = { _<number>_ {
rintf ( _<string>_ , & a , { }
reak ; } } } }
f ( s == arr [ i ] , a + = i i i > _<number>_ > a {
rintf ( _<string>_ , input [ i ] = i + a ] i ) ; string = for ( ( = , [ i j ) i , j ] ( j ( = = + _<number>_ ; _<string>_ a ) a ) string = = = = = = = = = = = = = = + + + + _<number>_ ; { + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
nt k ;
f ( j == a [ i ] > a ] , a ] == int j , size == j , size number string ;
rintf ( _<string>_ , a [ i a > input [ k ] ) ; int [ ) ] ; int a = scanf ( _<string>_ > = = = = = = = = j , j > for ( j , j > for ( = _<number>_ ; = , n ; number ( number ( = [ > > = scanf < A , number , A , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_
canf ( _<string>_ , & s ) ;
or ( j = _<number>_ ; j < n - _<number>_ ; [ [ k k ++ k )
rintf ( _<string>_ , a [ j ] ) ; a { } }
har sum ;
nt num [ _<number>_ ] ;
rintf ( _<string>_ , a [ j ] , a [ k j ) < string < string < string < n < ! _<number>_ < ! > [ = + _<number>_ + = _<number>_ a ; , , , , , , , j > j < j < j < + _<number>_ < j < int j < s < j < j < + _<number>_ < s < string = _<number>_ ; a = scanf ( _<string>_ > { string , { <END_BUG> > { <END_BUG> ( { <END_BUG> , { , { <END_BUG> ( { <END_BUG>
nt n , a [ n ] , i + = _<number>_ ;
f ( a [ i ] + a [ a [ n [ a k ] ] == scanf ( A i - j > <unk> , <unk> , A n ) ;
rintf ( _<string>_ , a [ j ] , a [ , [ i [ ( ] [ ( ] k > scanf ( _<string>_ , a string i ] > k , k , i , j , + + _<number>_ , + ( + + + + + + + + + + + number ] > scanf ( _<string>_ , number ] , number ] > scanf ( ) ) ( ] ( ] ) ) ) ) ) < _<number>_ < ] < ] < ] < ] < ] ( ] ) < ] (
f ( a [ i ] + a [ a [ j ] ] == int int int > int scanf number ) n - _<number>_ ; [ ( k = + + + number ] j == scanf ( A ] == N > S > S > S > S > S > S ( A array > S ( j = _<number>_ ( ] == { {
rintf ( _<string>_ , j , n ) ; }
f ( a [ j ] == s - a ] )
f ( ( a [ j ] + a [ k ] i == int int int != int [ j = _<number>_ = _<number>_ = j < j < j < j < , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , {
f ( ( a [ i ] + a [ j ] ) == & & & & & & scanf i i i )
or ( k = _<number>_ ; k < n ; k ++ )
f ( s = ( a [ k ] + a [ j a ) ) ] = sum ( ] & ] ) < ] < int j + n < int int ! > > > > > > > > > > > > > > > > > > > > > > > > ] & ] & ] < ] < ] i i i < & ) = _<number>_ ;
rintf ( _<string>_ , a [ i ] ) ; for ( + + _<number>_ i i i i i ( i + else + _<number>_ , n - + , , int int number > [ h i i i > = _<number>_ > = _<number>_ > + _<number>_ > + + _<number>_ > + [ ] > k > [ [ s i i i i i i i n , int int } ) for ( string s s s s = _<number>_ < + + _<number>_ < + + _<number>_ < + + _<number>_ < +
rintf ( _<string>_ , a [ i ] ) ; }
lse continue ; } }
nt i , j , n , a [ _<number>_ [ _<number>_ [ _<number>_ ] ] + N ] ;
rintf ( _<string>_ , s [ j ] , s [ k ] ) ;
nt s [ n ] , m , m ;
rintf ( _<string>_ , a [ i ] , a [ j k > ] > ] > ] > ] , n , n , n , n , n , n , > > > n , n - [ > > > > > > > n , n j k , n - [ > k k k k k k , n , n , n , n , > > > > n , n - [ > > > > > > > n , n j k , n , n ,
rintf ( _<string>_ , array [ i ] , array [ j ] ) ;
f ( a [ i ] + a [ a ] == scanf ( > int int ) ; n - j == for ) i } {
rintf ( _<string>_ , a [ i ] , j ] ( a [ ( a [ ( ( a ] = _<number>_ + ( n - ( j j > scanf ( _<string>_ , j number j , j ( j ( j , j ( j ( j ( j ( j ( j ( a [ > > number ( a [ > > number ( a [ > > scanf ( _<string>_ , a j k ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
or ( j = _<number>_ ; j < n ; j ++ > [ number = _<number>_ = _<number>_ - { { { { { { { { {
nt n , a [ _<number>_ ] , i , j ;
nt n , a [ _<number>_ ] , i , j , } ] ( + _<number>_ [ _<number>_ k = _<number>_ i = _<number>_ i = _<number>_ i = _<number>_ i = _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + ) < N , k < _<number>_ <
= a [ j ] + a [ a ] ;
rintf ( _<string>_ , b [ i ] , s - b ] , > b ] , sum , pow , pow ] , { printf + string ] , { printf ( > n , { { { { printf ( _<string>_ = n <END_BUG> n ] , { < n - > { printf + n ] , n , n , > > > > > > > > > > > { > n ] , { printf ( > scanf ( , n ] , { printf + n ] , { printf ++
rintf ( _<string>_ , & b , a > a i + & for ( + _<number>_ j i i i i i + _<number>_ + ] + ] + _<number>_ , a ; number [ } {
nt x [ n ] ;
f ( s == a [ i k n a [ < < j ] > _<number>_ > < < [ < n [ < < + _<number>_ + < n ] + _<number>_ + ( k == l k < [ < l = ] > ] > [ < ] > n > string > < string k > string > < ] > ] > [ < ] > _<number>_ > < < < [ < l > < ] > [ < ] > _<number>_ > < < < [ < l > < ] >
f ( num [ j ] + [ [ n > for )
f ( num [ j ] + num j j + j == for )
rintf ( _<string>_ , a , a l ;
or ( i = _<number>_ ; i < a ; , ++ ; > ) a ++ ) num ++ ) [ _<number>_ {
canf ( _<string>_ , & s ) ;
f ( ( a [ j ] + a [ k ] ( n > scanf ( _<string>_ = [ j + _<number>_ + string = _<number>_ < , , ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] <
canf ( _<string>_ , & ary [ = string + ) ; number int = ( { s }
f ( a [ k ] + number n string == scanf ( _<string>_ , ( string i , + j ) ) ) ;
or ( k = _<number>_ ; k < n ; , ++ ( & ) ; } ++ ;
or ( k = n - _<number>_ ; k i , i ; num -- ) &
f ( a [ j ] + ) == <START_BUG> )
or ( j = i ; j ) N ( array [ k ( n ++ > N < S < N < N ) ( [ [ [ [ [ [ [ [ [ [ [ [ [ j ] ] ] ] ] ] ] ] ( j ++ ( ( A ++ ( + _<number>_ ( i ] ( ( a - j ++ ( scanf ( j ++ ( ( a = + _<number>_ ( i ( a [ j ] ( a [ j ] ( j ++ ( a ( ( a = +
nt a [ _<number>_ ] , n ) }
rintf ( _<string>_ , array [ i a j j + a ] ) ;
f ( array [ i ] + = [ k ) == string , j ] == } > for )
rintf ( _<string>_ , a [ j l + n number j [ a , a n ( ( number n > { printf n > a j > a > a > ] > a > a > ] > a > int printf > int + ] > a j > a > s > ] > a > s > ] > a > s > ] > a > s > ] > a > s > ] > a > s > ] > a > s > ] > a > s > ]
rintf ( _<string>_ , a [ i [ j ] ] , [ & [ [ n [ = j ] ] ] ) ; - _<number>_ < }
canf ( _<string>_ , a [ i ] ) ;
um >= pow ( - _<number>_ , _<number>_ ) && a [ a ] >= n ( _<number>_ , _<number>_ ) ;
1 = a [ i ] + c [ j ] ;
rintf ( _<string>_ , a [ i k j + n + k + string l > n > for ( a [ ) ] j < { else } else } & int int , , , { else } & int int { else } & a , int int int , j j j number { else } & int { else } & int int { else } & int int { else } & int int { else } & int int { else } & a , + { & int int , ,
rintf ( _<string>_ , x [ j [ ] [ ] j + j ] < arr ) < { - _<number>_ < } ; int & } int & ] == & & & number number number number number number number number number & & & ; int & } == & number number j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j [ j
= i + j ;
rintf ( _<string>_ , i , j j j j ] k ) ) ) ) <
nt k , l ;
rintf ( _<string>_ , a [ d ] , a [ j { ; a [ , > & & > & > > & number ( a ] ( = number ] ( = a ] ( = a ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a ] ( = number ] ( = a
f ( ( x [ i ] , } number number number number == s ) && i arr arr ] < = ] > a j )
rintf ( _<string>_ , a [ i ] , a [ number a i a > j > k ( j ( j = A number , N number S ( j ( j ( j = _<number>_ ( & j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j ( j (
or ( i = _<number>_ ; i < n ; i ++ ) {
f ( sum == a [ b ] + a [ c ] ) {
or ( j = i + _<number>_ ; j i i < a < a ; n ++ )
rintf ( _<string>_ , & a [ < < [ number = < [ ] [ n arr number ( [ ] number j number ( j arr ] > = = _<number>_ > i > i > i > a number a number a number a number i ( [ i j j j j ( n ( n ( for i ( ( a number i j , for ( [ i j ( ( n ( for i j ( n ( for i j ( n ( for i j ( n ( for i j
or ( i = _<number>_ ; ans [ i ] != _<char>_ ; i = i number _<number>_ , ( ( ( _<number>_ number i , b , ( ( ( ( ( ( ( ( ( ( ( _<number>_ number _<number>_ number & ( ( ( ( ( ( ( _<number>_ number ( ( ( ( ( ( ( _<number>_ number _<number>_ , _<number>_ , sum , ( ( ( ( ( ( _<number>_ number _<number>_ , sum , ( ( ( ( ( ( ( ( ( _<number>_ number _<number>_ , _<number>_ , sum , ( ( (
or ( i = _<number>_ ; i < n / _<number>_ ; > [ > string ++ number , ( ( n ++ , long long long long long long long i ) int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_ ; int + _<number>_
rintf ( _<string>_ , arr [ i ] , ] + ] > k > [ < a , ;
f ( arr [ i ] + number = } ( number i i i ( + arr j - _<number>_ > for ( j for ) for ) ( [ < < ] > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s > s
or ( j = _<number>_ ; j < n i i ; [ = [ [ number ] a } _<number>_ ) &
rintf ( _<string>_ , a [ i ] , a [ ] n > for > n ) < < < n i ) ; string = int b [ ; string [ number ] ] ) , string , b [ number ] ) , b , b [ number ] ) , string , b [ number ] ) , b , b = int b [ number ] = b [ number ] , b [ number ] , b [ number ] , b [ number ] , b [ number ] , b [ number
nt s ;
or ( i = _<number>_ ; i < n ; ) ++ > _<number>_ > ] ; ( ( a - & ] ) )
canf ( _<string>_ , & v ) <
rintf ( _<string>_ , & a , a , string , number > number > for ( i - _<number>_ , ( ( n ] , a , string [ number int = _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_ + > _<number>_
nt n , a [ _<number>_ ] , i , j ) int s ) int a [ _<number>_ ] ) ;
[ j ] = _<number>_ ; c [ j ] = _<number>_ ; } k = _<number>_ ; j [ number ] , _<number>_ ; n == _<number>_ ; n [ number ] , { _<number>_ n )
rintf ( _<string>_ , i , j = n [ > n [ + > { _<number>_ ] x x number number number arr ] ] ] ] ] j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
rintf ( _<string>_ , a [ i ] , num ) ; number = j & string < { n = _<number>_ = _<number>_ < & & = & & = & & & = & & & = & & & & & & j , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i
tore ( i , j ) ; } }
tore ( i , j ) ; } } }
f ( num [ j ] + s [ k ] == & & & string )
um = s + _<number>_ ;
rintf ( _<string>_ , array [ i ] > a [ j ] ) < ; s k ; s [ = ] ; / number [ number ] < b [ number ] ) <START_BUG> = b [ , ] < b [ number ] ) < < < < b [ , ] ) < < < < b [ , , , , , , , b [ number ] ) < < < < b [ , ] ) < - b < - ( b s n ) < - ( b s n )
or ( i = _<number>_ ; i ; < & & n = ; ; ; i = < num } _<number>_ ) int < _<number>_ ) scanf ( _<string>_ , number & _<number>_ ) > ( = for ( = _<number>_ ) > ( = = _<number>_ ) > ( = = _<number>_ ) > number ) > _<number>_ > ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
f ( a [ i ] + x ] == scanf ( A n - _<number>_ == <unk> && ;
rintf ( _<string>_ , a [ i ] i + a ] i i i i ) < string ; number = n < { else number k = i ;
= b [ i ] + b [ j ] , k , k ;
rintf ( _<string>_ , b [ i ] , b [ k j j j , string ) > for ( for ( = for ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
or ( i = _<number>_ ; i <= n - _<number>_ ; i ++ ) string ++ ( i ) < _<number>_ < + _<number>_ < + _<number>_ < i {
or ( i = _<number>_ ; i <= n - _<number>_ ; i ++ ) a [ } ] ++ ( i ( i ++ ( ( a [ number ] ) - a [ i ] ) ) ) ;
or ( j = i + _<number>_ ; j < n > n ( < n - < ) > for ( j + < > < a > < a > < n ( > a [ > int i ] ( i ( ( b a i ++ ) ) ) ) )
nt n , i , j , a [ n ] , + + + string { int for ( + > > ( number , > j , int int a [ a ] , ] + sum , sum , sum , sum , } > _<number>_ ( <END_BUG> [ a ] ( <END_BUG> [ a ] ( <END_BUG> [ a ] ( <END_BUG> [ a ] ) ) ) ) , } string ) > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > =
rintf ( _<string>_ , a [ i ] , array + ] ) < s ; for ( ( ] s , [ ) ] , = [ i1 ] i i > k > string > string > string > & - _<number>_ ;
rintf ( _<string>_ , a [ i ] , + , i ( = + > int ) a i [ n i { if ( _<string>_ > , , , , ) a [ n { if ( , & , , ) a [ a [ ] [ a [ a [ a [ a [ a [ a [ a [ a [ ] [ n + int + int + int + _<number>_ + int + int + , int n + i + _<number>_ + n + _<number>_ + int n + _<number>_ + int
or ( k = j + _<number>_ ; k < n ; k ++ ) [ number ++ j ( number > n ) ) +
f ( ( i < n ) ) {
ouble a [ _<number>_ ] , b [ _<number>_ ] , > , > , ) ;
f ( x == b [ i1 ] ) {
canf ( _<string>_ , & a [ n ] ) ;
or ( i = _<number>_ ; i <= n ; i ++ } {
rintf ( _<string>_ , ( a [ i ] , }
rintf ( _<string>_ , a [ i ] , & & + a [ + j & string i a i ) < { & & n > n > n > n > { if < n > = n > { <START_BUG> ( + n > = = = = n > = = _<number>_ , + + { <END_BUG> ( + + + + + a [ = ] ) ) ; } }
canf ( _<string>_ , & n ) ;
nt n , a [ _<number>_ ] , i , j , scanf ( [ _<number>_ ] ( continue }
f ( s == ( a [ i ] + a + = ) && ( } j ] <= i1 j > i1 [ = ] > i1 [ = ] ) )
nt i , s , j , n ;
nt t = _<number>_ ;
or ( j = _<number>_ ; j < i , _<number>_ ; ] ++ )
rintf ( _<string>_ , ( c [ i ] > & ] ] > int ( string a ] ( o ] ( + + + + + + + + + k ( = _<number>_ > string i1 = _<number>_ , k ) ) ( { a i1 < string i1 i ( string i1 , number ] > & + number ] > & }
canf ( _<string>_ , & arr [ i ] ) ; }
rintf ( _<string>_ , a [ b ] , sum [ c ] ) ; }
canf ( _<string>_ , & a [ i ] ) ; }
canf ( _<string>_ , & a [ i ] ) ; for ( number n = _<number>_ , s n ; b < s ; s [ s ] ) ; & printf ( _<string>_ ) ; ] a + ( n - string ( string = _<number>_ ) = ; & & & number number ) ; & & & { sum n , & ] number c = c = c = c = c = c = c = c = c = c = c = c = c = c = c = c =
ontinue ; } } }
f ( array [ i ] == s - number [ = a a i )
canf ( _<string>_ , & s ) ;
or ( i = _<number>_ , j = _<number>_ ; > [ > { i ++ > = _<number>_ ) } }
rintf ( _<string>_ , array [ i ] , n a ;
rintf ( _<string>_ , a [ i ] , arr number ] < x < x < int for ( ] < [ + + + n int = < for ) ; n ( = array s < for ) - _<number>_ ;
rintf ( _<string>_ , & a [ i ] , & a [ j ] ) ;
f ( a [ i ] + a [ j ] == s ) {
rintf ( _<string>_ , array [ i ] , array [ j ] ) ; } string ( j a ] > number ] > number > number > number > number > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number ] > number > number > number > number ] > number > number
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; } & a number ; n + } > , ] > , , ] i i ) ( } n i - , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
rintf ( _<string>_ , a [ i = _<number>_ = } _<number>_ = _<number>_ int { return < number ] ) ; n a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
rintf ( _<string>_ , a [ i ] , num < num < num < num ) ; = = _<number>_ < int ; a ] < & ] i < n i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
nt n , s , ( ( ] > for ( i > ] ) ) i + = = _<number>_ i i i i i i i i i i i i i i i i i i i i ;
or ( i1 = i + _<number>_ ; i1 < n ; i1 ++ ) {
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; } string [ , , ( flag == int + int [ ( , int , = int [ , ( flag == int + int [ , [ ( , + int , , != int + ( flag == int + int [ ( , int , scanf ( _<string>_ ) ) ) < [ ( flag + [ ( flag number ( flag == int + ( flag == int + int = , int [ ( , int , int +
or ( i = _<number>_ ; i < n / _<number>_ - _<number>_ ; i ++ ( ; ) & & & & & & & ) a ] < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_ ) < { _<number>_ n printf ( _<string>_
rintf ( _<string>_ , a [ j [ n [ n [ n [ n [ [ = [ array ] ] ] ] ] ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
nt a [ _<number>_ ] ;
nt n , s , a [ _<number>_ ] , i , j ;
rintf ( _<string>_ , a [ i [ i [ ] = _<number>_ = = _<number>_ [ a j j ] > + _<number>_ < ( for ( for ( ( ( ( ( ] < ] + ] < ] < } ) i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
or ( k = ( j + _<number>_ ) ; k < n ; k ++ , a ++ ( = _<number>_ < ] < + ] < & + ] < + ] < & + ] < & = ) ( + ] < ] < ] < ] < ] < ] < ] < + ] < & , + ] < & = ( = ) i < & = ( = - _<number>_ < ] < ] < ] < scanf ( + string ++ < scanf ( _<string>_ , ] < scanf (
f ( N [ i = + N ] == S + S + _<number>_ , N , S , , }
har a [ n ] ;
or ( a [ i > _<number>_ ; + + ) number , ( ( n for , ) for ( m < _<number>_ ] ] ] ] ] ] ] ] ] ] ) ; i ++ ; i < i for + _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a < _<number>_ a
or ( i = _<number>_ ; ) < number ; ( ( ( ( ( ( ) ++ > number < { ( n ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( t [ i ] + t [ j ] == s )
eturn n ; }
rintf ( _<string>_ , ( = [ i ] ) > ] n { main ( _<string>_ + i , = a a arr arr arr arr arr arr arr arr arr arr arr arr arr arr [ i ] > n > number j ( & > ] , + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , ( + + ) > + + + < = _<number>_ i i ) ; } string ( [ , ] > + + + + + + + + + + + = j ) ; n n , = = = = i , i > = [ < < n [ < < { - i ] ( n [ < < = { = n > number [ < < < = { - i , = i > = = _<number>_ ( = [ < < < = = [ <
or ( i = _<number>_ ; > < n ; > > = = = _<number>_ ; i ++ < N )
nt n , i , n + S ;
nt n , a [ _<number>_ ] i i i i i i i i i , ] ;
f ( ( a [ i ] + a [ ] + ] ) == printf ( a n i ( ( = array [ > number [ > ] i i i i i ] i == number i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ] == - _<number>_
f ( arr [ k ] + [ a + a = getchar ( [ j [ { { _<number>_ string _<number>_ + = _<number>_ + n int = _<number>_ ) ; string ; number number
ong n ;
f ( ( a [ m ] a a ) > <START_BUG> > ] > - - j > * a > * j > * a > * j > * number ;
f ( s == a [ i = - string + & n [ , , i {
canf ( _<string>_ , & a [ n , s ) ; { string + number = s , j ( int j > _<number>_ > int j > a m < ] > ] ) ; i ++ ) = = string , [ j k < ] < ] < ] < ] < ] < }
nt s = _<number>_ ;
rintf ( _<string>_ , b [ j ] , b [ k [ number + number + number + number + number + number + number + number + number + number ] ( b [ a ] < b [ i ] ( b [ a ] < b [ i ] ( b [ a ] < - b ( b [ a ] < b [ i ] ( b [ a ] < b [ i ] ( b ( b [ a ] < b [ i ] ( b [ a ] < -
nt a [ _<number>_ ] ;
rintf ( _<string>_ , ( a [ ) ] - n [ s number [ p a a ) ; string ( a [ > ] k + a [ ] ) < f ) < < < [ ( [ ( [ ( [ ( [ ( a [ ( j ] ) ] ) ] ) ) ] ) ) < < < < a [ ( a [ ( a [ ( a [ ( a [ j ] ) ] ) ] ) ) < < < < < a [ ( a [ ( a
or ( i = _<number>_ ; i < { { ( ( > > _<number>_ ) & > = _<number>_ i i n n n n n n n n n n n n n n n n n n n = _<number>_ i i n n n i n n n i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( a [ i ] + p n p == for > j ) string ( ] ) < scanf ( _<string>_ , j a a a a a a a a a a a a ) < <START_BUG> ) < <START_BUG> < scanf ( _<string>_ , [ ; ; ; if > [ ; ; + + _<number>_ n n n i n i n i n i n i n i n i i i i == int int [ ; { <START_BUG> ( _<string>_ , [ ; ; <START_BUG> number number n n i n i
rintf ( _<string>_ , a [ i [ j [ , [ ] [ j [ , [ n number number number number number number number number number number number [ n j j j ] > n > - _<number>_ > - _<number>_ > - _<number>_ ( number = number = number , ] > ] > ] > ] > ] ( = , = = _<number>_ > = = _<number>_ ( = int = , = = = _<number>_ ( = int = , = = = _<number>_ ( = int = , = = _<number>_ (
f ( a [ i ] + array [ n a == for ( + for ( + ] == int int ) & ; & int j ) & for ( ] == scanf ( _<string>_ i , , , , , , , , , ] ( ( ] - ] == for [ n ] < - a < - for ( number ] ) == for ( number + for ( number + = - _<number>_ > S > S > S > S > S > S > S > S > S > S
rintf ( _<string>_ , b [ i ] , b [ j [ j a a ) > > + _<number>_ > number > number > b ] )
= b [ i ] + b [ j ] ;
or ( j = n - _<number>_ ; j i -- ; ] -- ) } {
rintf ( _<string>_ , a [ i ] , n [ a , n number s > s < s > s > s > s > ) ; } i i = n + n number [ [ ) [ ) ) string = ) string { main ( _<string>_ + n [ ) ] < scanf ( _<string>_ , & & & [ ) ] , & & & & i , a [ ) ] < scanf ( _<string>_ , & & & [ ) ] , & & & & & & & & & &
f ( a [ i ] + j [ a ] == for i , n ( s > for ) == for ) = _<number>_ ; = for ) {
nt i , v , n , } i = }
canf ( _<string>_ , & v ) i i i i i i i ( a [ a = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( [ [ [ a ] = _<number>_ ] ( ( j - ; = _<number>_ + ; ; for ( for ( ; ; scanf ( _<string>_ = , } string > }
rintf ( _<string>_ , a [ j ] , a [ i k ; { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { <START_BUG> ( _<string>_ = j = j b = j = j = j < j < k < k < k < k < k < k < k <
or ( j = ( n - _<number>_ ) ; ( j >= _<number>_ ; ] ++ ; ] ++ ; string ++ ; string ++ ; string ++ ; number ) s = [ , number - _<number>_ number - _<number>_ number > _<number>_ ;
canf ( _<string>_ , & sum ) ;
canf ( _<string>_ , & n ) ;
or ( i = _<number>_ ; i < n + _<number>_ / _<number>_ ) ) } }
nt n , i , j , s , f = _<number>_ ;
rintf ( _<string>_ , a [ i ] , a [ j j ) ; int = for ( < ] i = ] = ] number ] = ] ) ) ; for ( = ) ; k , i ; k j > k > _<number>_ ) ; for ( = number ] i i i i i i - j ; number ] , number ] ; k ] , number ] i i i - number ] ; k ] , number ] i i i - number ] ; k ] ; k ] ;
rintf ( _<string>_ , a [ i + _<number>_ j j j > int { int n & n & n & n & n ) < for ( s + i , n > s ( [ ] number i number ( [ ] number number > for ( j = ( scanf ( [ > > [ > = scanf ( _<string>_ + [ > = scanf ( _<string>_ + [ > = i = _<number>_ = _<number>_ ) ) = scanf ( _<string>_ + [ > = scanf ( _<string>_ + [ > = i = _<number>_
rintf ( _<string>_ , a [ j i i ( [ > + j , [ + + _<number>_ & , & n ; { printf ( _<string>_ ( [ , j & [ , , = <END_BUG> , = s i , number n > s ) ) ; } }
nt i , j , n , for ( n number _<number>_ , int n ( i ( n ) [ + s a ( ( n ) [ + s j ( ( j [ number n n n n ; number ++ ; ; number ++ i > = _<number>_ i ;
rintf ( _<string>_ , array [ j ] + ] j ) ;
or ( j = _<number>_ ; j ( ) ; + + scanf ( _<string>_ > j - ( s ++ i i i i i i i i i ) ) < - _<number>_ < int s ) string ++ ) string ++ ) string ++ ( ( ( a [ _<number>_ ] > scanf ] ++ ( ] ( ] ++ > N > S > N > S > N > S > N > S > N > S > N > S > S > S > S > S > S > S >
f ( ( a [ i ] + a [ j ] ) == s )
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; } int string j [ )
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; int l a a a a a + > s , = < i1 , i1 < i1 , > s , = _<number>_ < > s , = ;
rintf ( _<string>_ , ( a [ ( j ] , j , j > - for ) < i < i ) ) ; n = } ( [ , j j j [ & ) & int , [ ) number j j j a ] == & i ( = = = _<number>_ ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
rintf ( _<string>_ , ar [ i ] > a [ j ] i i ( j > for ) > }
f ( ar [ i ] + = [ ar ] == s )
or ( j = k + _<number>_ ; string ( [ string n n n ] ) ; ] ++ ) {
canf ( _<string>_ , & a , + j ) < [ a ] < a < a < a < a < n > n [ p = _<number>_ [ N j j j j j j j j j j j = _<number>_ < _<number>_ < N < n [ ] < N < S < A < B ) < C < C < <unk> < N < S < N < S [ {
f ( a [ i ] + j [ n ] == s )
or ( i1 = i + _<number>_ ; i1 < n ; i1 ++ ) {
rintf ( _<string>_ , x , b [ i1 ] ) ; } } }
canf ( _<string>_ , & array [ i j j j ) ; for ( i = _<number>_ ; ) int - ( ] i + ] i + ] i + _<number>_ i + _<number>_ i i i i i i i , arr = n - , l ) ; }
nt n , i , j , s ;
or ( j = _<number>_ ; j ( i && [ [ i j j ar ( int int ( ( j ++ i i i i i i i i , l ++ , l , & & & & l , ] ) ) ;
rintf ( _<string>_ , sum [ i n ] ] ] ] ] ] ] , = a a a a ; int } ] [ u ] == } = string ] [ a ] + n + n + _<number>_ + , int int i ( n ( n ( n ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
or ( j = i + _<number>_ ; n < j ; n ++ + _<number>_ > s > string > string ; l ++ + _<number>_ + ] + ] [ number ++ [ number = _<number>_ = ) a ;
[ i ] >= ( pow ( - _<number>_ , _<number>_ ) ) && a [ i ] <= ( pow ( _<number>_ , _<number>_ ) ) ; }
or ( i = _<number>_ ; i < n ; i ++ ) {
rintf ( _<string>_ , m [ u ] , m [ j ] ) ; int j == n ( = ( scanf > <unk> > <unk> < <unk> < <unk> && <unk> > <unk> > <unk> > <unk> > <unk> > <unk> n , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i , i
rintf ( _<string>_ , a [ k ] , a [ j ] ) ; } string ( + _<number>_ ; string ] ) , + ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , a [ j ] , a [ l ] ) ; }
canf ( _<string>_ , & a [ j ] ) ; }
f ( s == a [ i ] > array [ number ] ) ;
f ( arr [ k ] + arr [ l ] == s )
rintf ( _<string>_ , b [ i ] , a [ j ] ) ; } = _<number>_ * > ) } = ) } = _<number>_ < ) } = ) } = _<number>_ < ) } printf ( ) } = _<number>_ < ) string > ) string ] < n < for > n = for > ) string > n = > ) string ( ) < ) string > n = for > n = for > n = > ) string ( ) < ) string ( ) < n < for ( >
rintf ( _<string>_ , array ( i ) ( , , j ) ( > }
nt array [ _<number>_ ] ;
f ( ( a [ m ] j j j > ] i i i ( a j ( long long ( s , j , j , for ( ] number + ] , j , j , for < ] , = _<number>_ i ;
nt i , m ;
nt t [ n ] ;
f ( t [ i ] + n [ int a ] == {
nt p [ n ] ;
or ( n = m ; n ) { < < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( n ++ + _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , a [ , j j i string number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number , ( number ,
f ( s < a [ n n n )
rintf ( _<string>_ , a [ i [ i [ i p p p > i > ( & printf ( _<string>_ a n j = }
f ( a [ i ] + a [ ] > { _<number>_ string string < string < } )
rintf ( _<string>_ , a [ ] < a i , j , } - _<number>_ > { printf ( _<string>_ < [ > ] < a [ int [ + + & [ int [ int [ int + ] ] ] ] ; for ( j string + + _<number>_ ; j i , n ; ) ; long long scanf ( _<string>_ < j < j < j ) ; j , j < j ) <START_BUG> ( j , j < j ) <START_BUG> ( j , j ) = _<number>_ < j ) <START_BUG> (
rintf ( _<string>_ , a [ ) + ( ] = = - _<number>_ > ) ; for ( j a { { { a a a a a a a a a a a a ; for ( ] number = ( getchar ( = = getchar ( ) a a a a a a a a a a a a a a ) == getchar ( ) ; for ( string number = [ > + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n sum ; for
or ( p = n - _<number>_ ; ] , > > > > > > x ; a -- ) &
or ( i = _<number>_ ; < ( < [ i j - _<number>_ j > sum > < string > string > string > string > string > < string > string > < string > string > < string > string > < string > string > < string > string > < string > string > < string > string > < string > < string > < string > < string > < string > < string > < string > < string > < string > < string > < string > < string >
f ( a [ i ] + number [ [ [ > + < number + < + _<number>_ + < i + _<number>_ + < i + _<number>_ + < i + _<number>_ + < i + _<number>_ + < i scanf ( _<string>_ ] [ i + _<number>_ + < _<number>_ [ < i scanf ( A = <unk> = <unk> a = <unk> a = _<number>_ [ < ] [ > S [ < N + _<number>_ + < > S [ < N a [ < ] [ i scanf ( _<string>_ ] [ > number
f ( i < j )
rintf ( _<string>_ , a [ ] ( + + + + + + + + + + + + + + + + + _<number>_ ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( ( a [ i [ i [ ] > + + + _<number>_ a ( int int > long ( long ( ( long ( ( ( long ( ( long ( ( long ( ( long ( ( long ( ( long ( ( ( long ( ( long ( ( ( long ( ( long ( ( long ( ( long ( ( ( long ( ( ( long m m m m ( ( int int ( ( ( long ( ( long ( ( long ( ( long ( ( long ( ( long
f ( k == u ) continue ;
ontinue ;
canf ( _<string>_ , & a + j , printf ( _<string>_ ( n , ] , > ) ) ;
ong sum = _<number>_ ;
um = a [ i ] + for ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ p [ p [ ) [ p [ p [ ) [ p [ > { > for ( n = _<number>_ ; [ > j { > ; > [ > { > for ( [ > { > for ( [ > { > scanf ( A a a a a a a a a a a a a a a a a a a a a a a a a a a a
rintf ( _<string>_ , t [ i ] < { input [ a ] , number ] ( a [ , a ) ) ; & & & string = j ) printf ( _<string>_ ) ;
rintf ( _<string>_ , t [ i = m , t ] ( n ( n , int { ( n ( m [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ , n n n n n j j j j j [ + + + _<number>_ [ + + + + _<number>_ [ + + + + _<number>_ [ + + + + _<number>_ [ + + + _<number>_ [ + + + _<number>_ [ + + + _<number>_ [ ] [ ] [ ] [ ] [ ] [ ] [
or ( j = i + _<number>_ ; l i i ; = ++ , = = = _<number>_ ; sum ++ )
or ( i = _<number>_ ; i n n ; i ++ > [ i j j j > number > long long < a j ; < a j ; < a j ; < a j ; < j ++ + number + < number ;
rintf ( _<string>_ , & a [ i ] , int a [ = ] ( a [ = ] ( a [ = p > - _<number>_ > - _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > ( + _<number>_ , + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , & a p string a [ < ( ( int p , string ] > - - - - _<number>_ ( = = _<number>_ ( = = = _<number>_ ( = = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ (
or ( k = i + _<number>_ ; k ( n , j ++ ( long long long j , j ++ ( number ++ ( ( n ++ ( ( n ++ ( s ++ ( ( ] ++ ( int ( ( int int ( ( int ] ( ] ++ ( ( [ ] ( ] ++ ( ( [ ] + _<number>_ > ] ( ] ++ ( ] ( ] ++ ( ( [ ] - _<number>_ > ] - a ( ] ++ ( ] - [ ] ++ ( ] ++ ( (
rintf ( _<string>_ , input [ i ] [ int ] ) ; number , number n , j , j , n , ] [ int < scanf ( _<string>_ + ] + ] [ int , ] ) ; & & & < s ) { main ( _<string>_ > [ < a = s = s = s = s = s = s = s = s = _<number>_ ; main ( _<string>_ > [ < a = [ < < s = s = s = s = ( s = s = _<number>_ )
f ( a [ i ] + a [ number = long long long long s )
rintf ( _<string>_ , <unk> [ i = <unk> = ( A > N j - <unk> ) ) ; if ( <unk> > <unk> n n ) scanf ( _<string>_ n n n n n n n [ ) a ] ;
f ( j != i ) string ;
= _<number>_ ;
f ( array [ i ] ; = ] number = for )
f ( ar [ k ] ) number j ] == } )
or ( j = k + _<number>_ < = a ; j < = = _<number>_ ; j ++ ) number ++ ) number ++ ) number ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) x ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ , ] ) {
nt i , s , j , = ;
f ( a [ i ] + string a a j == & } )
f ( a [ i ] > n ( ] == } ) )
or ( j = i + _<number>_ ; j < number ; n ++ > + _<number>_ ( a { a ++ > ] ) string ; string ++ > ;
rintf ( _<string>_ , ar [ ( i j k = ] k > for ) > & & for ( ( ( ( ( ( ( ( ( n int j < for ( n < for ( n + _<number>_ < for ( n + _<number>_ < for ( n int ( ( j int ( int < for < _<number>_ < N < S < S < S < S < S < S < S < S < S < S < S < S < S < <unk> ( <unk> + <unk> + ] (
or ( j = _<number>_ ; string ( }
rintf ( _<string>_ , b [ b ] , j < = pow ) < pow < pow < for ( a [ a ] > = = } _<number>_ ( = = _<number>_ > = _<number>_ ( = = _<number>_ > for ; a [ a ] > = for ; ! a [ a ] > = = }
f ( s [ k ] + int } ( n j == string ) i ( number ( [ k = _<number>_ i j j i i i < k < number ( ] ( ] ( ] == number ( ] ( ] ( } ( } - _<number>_ ) ( [ [ [ ] & n & [ ] int + _<number>_ int + j = _<number>_ = _<number>_ ) , > j ) ) ) ) ) ) ) ;
f ( a [ k ] + a [ j string string string == scanf ( A i - _<number>_ ( A b a b & [ string + string + string + string + a + _<number>_ + c & a b & scanf ( A b b & A b b b b ( string == scanf ( i ! a b & scanf ( A b a b b == scanf ) ( A b [ a b + _<number>_ ( string == scanf ) ( i ! a b & scanf ( A b a b
ong int a [ n ] ;
f ( ( s - a a > n > a + ] < & & & & + + + + + + + + _<number>_ ( & string + = string + _<number>_ , & ( = scanf ) - string + = ) > = _<number>_ , ( string scanf ( A + _<number>_ == A + <unk> , <unk> + <unk> + <unk> + <unk> & <unk> ) ) )
canf ( _<string>_ , & c ) ;
rintf ( _<string>_ , a [ b ] , a [ c ] ) ; }
= a + m ; & int > < int } i ) string ; } }
nt p [ _<number>_ ] ;
nt i , j ;
rintf ( _<string>_ , t [ , ] int = [ ] + < j + < j , a n ;
f ( ( a [ m = ) > [ n ] > j ) { [ [ [ > n j j , ] int l ;
canf ( _<string>_ , & n ) ;
rintf ( _<string>_ , a [ i ] , j m - ] > & } > }
f ( a [ i ] + ] n a n )
f ( a [ i ] < j ) }
rintf ( _<string>_ , a [ < [ < = if i / n [ j ] > & for i < ] > for ( = ( n , & scanf ( _<string>_ a + & & + l a + < & & & + < & & a + < & & a + l > & & i > = for ) ;
or ( j = _<number>_ ; n <= n string _<number>_ i i , s i , s i int = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = i & = _<number>_ , = i & = _<number>_ , = i & = _<number>_ , = i & = _<number>_ , = i & = _<number>_ , = i & = _<number>_ , j ++ ) k < _<number>_ < n & _<number>_ ) k = _<number>_ < , n string _<number>_ > if ( a + _<number>_ <= ) ] <= j string _<number>_
f ( ( j != k i ( = + ] int k > for , , ] == check ( [ [ [ [ [ [ [ [ number ] ] ) ] ] ] ] > int int ] > int int int == int int int == + + _<number>_ > int int int == + _<number>_ > + _<number>_ > int int int == & & & ( n != & ( [ n = if > & if > & ] == - i ; pow
rintf ( _<string>_ , a [ j ] string { continue { continue ; _<string>_ < scanf ; _<string>_ n number = = = ] } ; { main < A ] } { { main ( _<string>_ } } } } }
nt n , i , j , a [ n ] , s , s ;
nt n , i , a [ n ] , s , s , j ;
f ( array [ j ] == s s s } - ] a } )
rintf ( _<string>_ , array [ i ] , [ + + + m [ number array number , ) , string , ;
rintf ( _<string>_ , a [ i ] + n ] ) ; int int else continue < }
rintf ( _<string>_ , a [ i ] = u [ number + for ( = _<number>_ > number int = i [ ; int a j = [ < ; ; main ( _<string>_ [ ; ; & & & & & & + n ( - n [ + < ( - n ( - n ( - n ( - n ( - n ( - n ( - n ( - n ( - n [ + < ( - n ( - n ( - n ( - n ( - n ( - n
nt a [ n ] ;
if ( s == ( a [ i ] + a [ j ] ) && ) i ( ] ; > > > [ n ] )
rintf ( _<string>_ , a [ i ] , a [ j ] ) ;
rintf ( _<string>_ , a [ i ] + j n ) ; string + [ n k k ; printf ( _<string>_ , m ] > = ] > a = s i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i > scanf ( _<string>_ > number ] ] > & & & ] > & & & ]
nt a [ _<number>_ ] , sum , n , i , j ;
rintf ( _<string>_ , a [ i ] ( } n ) ) ;
rintf ( _<string>_ , a [ m ] , ] = ;
rintf ( _<string>_ , s [ m ] + = { _<string>_ j , ;
rintf ( _<string>_ , a [ i ] + , j > s > j ) ; } = scanf ( _<string>_ ] ] ] > number ] > number ] ) > number ] ) < if ( number ] > number ] ( } for ( a = i ) < } for ( a ] < scanf ( _<string>_ ) < scanf ( _<string>_ ) < <unk> < <unk> = scanf ( _<string>_ ) < scanf ( _<string>_ ) < scanf ( _<string>_ ) < <unk> < <unk> < <unk> = scanf ( _<string>_ ) < scanf
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; }
or ( j = i ; j < n ; j ++ ) {
or ( j = _<number>_ ; j < i ; j ++ )
rintf ( _<string>_ , a [ i ] + ] + ] ) ; k , n + & & number + int int > , , , ) + + ( for _<number>_ ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
rintf ( _<string>_ ) ; } } } }
hile ( i != j ) {
rintf ( _<string>_ , array [ i ] , array [ j ] i i > { int number a + a + a + i ( [ a i > n ( [ i > n ( [ i > n ( [ ( a > ( + ( a > ( s , ( a > = _<number>_ , = _<number>_ , ( a > = s > s , a > s , = s , = s , a > a > s , a > s , = int a > a > a >
f ( a [ i ] + a ] == _<number>_ ( < _<number>_ ( array , j ) ) == _<number>_ i ;
hile ( i < n ) {
f ( i < j && a [ i ] + a [ j ] == s ) {
rintf ( _<string>_ , ( a [ i ] j = & & int a , number i i i i i i i i [ string n n [ > n n n [ > n n n n [ > n n j j j j j ) ; if ( scanf ( _<string>_ [ ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
or ( i = _<number>_ ; i < j ; i ++ ) {
[ i ] = k ;
rintf ( _<string>_ , u , j ) ; scanf ( _<string>_ < u n ( , = array ( { printf int = { _<number>_ ; s ++ ) return , ( ( s < s ; scanf ( _<string>_ < n < ) ; scanf ( _<string>_ < n < j ; scanf ( _<string>_ < n < ) ; scanf ( _<string>_ < n < j ; scanf ( _<string>_ < n < ) ; scanf ( _<string>_ < n < j ; scanf ( _<string>_ < n < ) ; scanf ( _<string>_ < n <
canf ( _<string>_ , & ary j }
canf ( _<string>_ , & ary j & number number i { ; number ] = ( n - ( ( n - ) + ) - ( ( j - i , [ i = _<number>_ , ar , ] , ] , { scanf ( _<string>_ + scanf ( _<string>_ + int number = int number = int number = int number = { number ] , & ] > ( + + ( & > > + _<number>_ > ( + ( ( + ( ( + ( ( _<number>_ > ( + + ( ( +
rintf ( _<string>_ , arr [ > j j + number = _<number>_ ( scanf _<string>_ = [ ( n - _<number>_ > _<number>_ ( } for ( > > _<number>_ ( h j = n = n ( h j = n ( n + h ( h ( h ( h ) ) ) ) ) ) ) ) ; arr = n k n ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , arr [ i ] , [ ] j ) ; { { for ( [ , j j ] = [ ] j ; s < number ; j ++ ( }
f ( ( i + j i i i < string < & & & string i i i i ( i i i i i i ) )
nt n , a [ _<number>_ = _<number>_ = _<number>_ ] , < < < { _<number>_ } , < ( number + _<number>_ ) ;
rintf ( _<string>_ , a [ < < number ] i i ) ; } number } }
rintf ( _<string>_ , a [ < < = arr [ i a j ) ; int ] ; int j ; string j > s ( j ) ; int ] ; int ] ; int arr [ ( arr [ ( n , ] > for ) - ( ] == s ) ) main ( _<string>_ , j , j , j ) = i string i string i > & i > & i string i string i > i > & i string i string i > & i > & i string i string
f ( a [ i ] < n = j )
or ( i = _<number>_ ; ( < ar <END_BUG> _<number>_ ( ) i ++ ( s ++ i i i ( [ a j j i ++ ; > scanf ( _<string>_ ( [ a j ; > a - _<number>_ ; > [ > - _<number>_ ] i i i < for ( ( for ( ( for for ( ( ( _<number>_ * { ) + _<number>_ ( ) - ) ( ) > } ) ( n = _<number>_ ( for ( ) - _<number>_ ( ) ++ ( for ( ) _<number>_ > }
rintf ( _<string>_ , & ar j n , = [ ar j ) ; number [ ( n , ( n ] > s ) ) ; printf ( _<string>_ , s = b = b = [ ( [ ( ( & ( for ( ( n j = s ) j j j ) j ) j ) ( ; } } }
f ( ar [ i ] , = j = & & int int int ) int } ;
rintf ( _<string>_ , ar [ ) j j [ i [ ( ( = - [ ( ( j = i ] > b > } ) [ i [ i [ i [ i [ i [ i [ i [ i [ i [ i ] ] ] ] j j j j j j ) ) ; n array array array array array n > & i { i n > i ) ; [ < < i { <END_BUG> ( i > i > i ) ; [ j { n { <END_BUG> printf (
rintf ( _<string>_ , & a ] n ( + + + & & ) ) ; arr { , arr { { s + k { h m < & l < l = + _<number>_ < & l = & l < l m }
rintf ( _<string>_ , & a number ( [ i [ i ] ] , + + + + + + + + + } _<number>_ ) ; arr n j j + ( } _<number>_ * k , i , k , i , k , k , k , i = _<number>_ = _<number>_ ] = _<number>_ = _<number>_ = < k = _<number>_ = _<number>_ = - _<number>_ = * j ) < k < k < k = _<number>_ < & j = _<number>_ < , j < k = _<number>_ < , j = _<number>_
f ( a == b )
or ( i = _<number>_ ; ) < [ j [ N ar ; ( ( ) int int int ( > N ) <END_BUG> ] - _<number>_ ( ) printf ( _<string>_ = + _<number>_ = + ) printf ( _<string>_ = + _<number>_ = + ) for ( > _<number>_ ; ) < + _<number>_ ; ) a ++ ( ( [ + _<number>_ n > number > _<number>_ > number > N > N < N < N > N > N > N > N > N > N > N > N > N >
rintf ( _<string>_ , a [ < < > + + + } _<number>_ ) < ( & == } ] , }
or ( j = ( n / _<number>_ ) + _<number>_ ; j <= n ; j ++ ) {
or ( m = _<number>_ ; m <= j ; m ++ ) {
nt n , i , j ( & & = string + _<number>_ i i ( j ( j ( = N - _<number>_ ( = _<number>_ ( ] ( [ j n ) ) ) ) ( int = = _<number>_ ) ( int = = N - _<number>_ ( s + _<number>_ i i i i i i i i i i i i i ( s ) ( s + < N ) ( s - A + N ( s + j ( ( ar + < number number number ) ) ) ) ) )
or ( j = _<number>_ ; ( { , { { { { { arr = _<number>_ < > > > > > , m < , , m < , , m < n = _<number>_ < , , m = _<number>_ < , _<number>_ < , a ) &
or ( i = _<number>_ ; ( ( ( i < }
rintf ( _<string>_ , arr [ < & < ] ) ; printf ( _<string>_ > = = = = ] > j ; { ] [ arr j { { { { { { { { { { { { { { { { { { { { { { { printf ( _<string>_ string i string i string i string i > b > [ i ] ) ; { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
rintf ( _<string>_ , j ) ; }
ontinue ; } }
hile ( i < n ) int , ) int ) int n ; {
nt i , j ;
f ( ( i + j i i i i i i i ( j ( [ ) - n s ( ) ( i > n ( [ [ [ [ [ [ [ [ [ ar int ar i > [ [ _<number>_ int ar i > ] ) > [ > [ > [ > ] + _<number>_ & > > > _<number>_ ) & > > [ > & [ [ [ [ [ [ [ arr & arr & arr & > _<number>_ & > > [ > & > [ arr & [ [
canf ( _<string>_ , a [ + + + , scanf ( _<string>_ = ary int > ( > = _<number>_ ( > = _<number>_ [ , for ( > _<number>_ ( > ] ( > ] ( > = = _<number>_ j - > = _<number>_ ( > > ] i ( j - > _<number>_ ( > j - > _<number>_ ( > j - + _<number>_ ) ; + ( + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( sum == ( a [ j ] + a [ i ] ) && j != i && ( { }
[ i ] = _<number>_ ; k [ number , number ] ] ] ] ] ] ] ] ] ] = _<number>_ ; a , int int , , int number , ans , ans , ans , string , k , number , ans , string , string , string , string , string , string , string , string , string , string , string , string , ans , string , ans , number , string , ans , string , {
f ( arr [ j ] == sum - = s s s a i i , k j j + _<number>_ , s ;
nt j , x , n , k ;
rintf ( _<string>_ , a [ i ] , = n ) ; ] = else int sum + _<number>_ ; scanf ( _<string>_ , + = sum ] , = ] ( = ] ( = = sum ( = = sum ( = = sum ( = = = _<number>_ ( = = _<number>_ ( string ] , = sum > sum ( = = sum > = _<number>_ ( = = _<number>_ ( = = _<number>_ ( string ] , = sum > sum ( = = sum > = _<number>_ ( = = _<number>_ ( =
or ( j = _<number>_ ; ( j < j ( i ( n ( + _<number>_ ( = _<number>_ ( = + , ( ] > i > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N
rintf ( _<string>_ , & a [ i ] ] ] ] ] ] & string = + _<number>_ i i i [ k c [ i { a k i { a k i [ ) { <START_BUG> ( _<string>_ ] ] ] ] ] ] ] ] [ i { a k [ ) { <START_BUG> ( _<string>_ ] ] ] ] ] ] ] ] ] [ i { a k ] [ i { a k ] == } a k a k ] [ i { a k ] == } [ ) _<number>_ {
rintf ( _<string>_ , array [ i ] , [ k i n = , [ ) = + _<number>_ = = _<number>_ ; & a [ ) = i = = n ; { printf ( _<string>_ > = = n , n -- , n & + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + , string ( , , + _<number>_ ( , , , ,
canf ( _<string>_ , & a [ _<number>_ ] ) < { > = i ;
rintf ( _<string>_ , x [ i ] , x i ) ;
rintf ( _<string>_ , x [ j ] , ] > , ) ;
rintf ( _<string>_ , a [ i ] , & & & & , number , [ ) ) < [ )
rintf ( _<string>_ , a [ i ] , = k k + + [ , , x + ( = for ) ] > = + + _<number>_ i [ ( + _<number>_ string b & int ] > int ] > int > main ) ( _<string>_ i i i i i - + _<number>_ i > ] > int int ] > ] > + ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( a [ i ] + a [ i n n == & s && > != , , , , x ) number ; number ; number number
or ( i = _<number>_ ; i < j ; > + > > n ; > i < i < i ; { i ++ > + _<number>_ > + _<number>_ = _<number>_ < , , , ( , + k ) ; n ++ ) n ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) number ++ ) number ++ ) number ++ ) number ++ )
or ( i = _<number>_ ; i < n ; > [ > n ++ [ > ] ++ ) }
f ( a [ j ] = _<char>_ - { if ( n int j ( & n ) }
ong int a [ n ] ;
or ( i = _<number>_ ; ans [ i ] != _<char>_ ; i = i2 + _<number>_ ) {
rintf ( _<string>_ , a [ i ] ) ; number = scanf ( _<string>_ + { number = s = s n , & & , & int , & string j + string j i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i = s ; [ ( n ] = s = s =
f ( sum == a [ b ] + = number number ] && = number number number number number != = = number number ( i i i i i i i i i i i i i i i i i i i i i i i i [ } [ } [ } [ } [ } [ } [ } [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number
canf ( _<string>_ , & c ) ;
canf ( _<string>_ , & a [ i ] ) ; }
canf ( _<string>_ , & a [ i ] ) ; }
rintf ( _<string>_ , x [ j ] , [ [ [ [ [ j } } + _<number>_ + [ [ j = _<number>_ + int arr k , ] = [ ] , arr k ; } }
nt i , arr [ n ] , s i ;
canf ( _<string>_ , & ar [ n ] ) ; int number + , number ; number ++ ) int number = _<number>_ ; scanf ( _<string>_ , } b & n ) ; c & b & n ) ; c & b & n a & c ) ; c & b & n ) ; c & b & n a & c ) ; c & b & n ) ; c & b & n a & c ) ; c & b & n ) ; c & b & n a &
rr [ i ] = ch ;
f ( s [ j ] == s [ [ number ] ] ) [ & scanf ( <unk> scanf ( _<string>_ a ( number c b ) == number scanf ( number scanf scanf ( _<string>_ ] ) ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
rintf ( _<string>_ , m , u ) ; int ar { return _<number>_ ( n i i i i i i = _<number>_ = _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ( j i i i i i i i i i
[ i ] = k ;
or ( i = _<number>_ ; i < n ; ; ; ; ; i = ; ) {
f ( s == ( a [ i ] string ] s s ) ) {
or ( i = _<number>_ ; i <= n ; + + + + _<number>_ [ = i ] ++ j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
rintf ( _<string>_ , a [ i ] , a [ a + _<number>_ > } > }
or ( i = _<number>_ ; i < n ; i ++ ) {
f ( ( a [ i ] + a [ j ] == s ) && ( ] > i [ i [ i [ i [ a [ a [ a [ a [ a [ a [ i [ a [ a [ i [ a [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i [ a [ i
or ( d = _<number>_ ; d i i ; j ++ > j ) {
f ( a [ i ] + arr ] == n )
nt i , j , n ;
nt i , j , n , s ;
f ( a [ j ] + ] + ] == } ( [ array j j ) == int for i - _<number>_ j j j j j j j i i == scanf ( A i ( n , A + j ) == for ( A = N ( a = _<number>_ ( _<number>_ ( int ( [ n n i ( int == & & & & & & & & & & & & & & & & & & & & ( [ a n n n ( ( [ a n i n
rintf ( _<string>_ , a [ j ] ) ; ] = & for ( [ ] j j d ( = = = _<number>_ ) , = _<number>_ ( = number = = _<number>_ ) , + + _<number>_ i i i ( number = [ [ [ n ) ) ) if ( _<string>_ [ a ( a ( n ) i ) ) , int n ; int a ( + n ; int - _<number>_ [ n ) , n ) , int n [ n ) if ( > a ( a ( n [
nt k , j , i , = ;
rintf ( _<string>_ , & a [ < < { [ j ] > a [ j [ < = _<number>_ int < < < n scanf ( _<string>_ + } A & B j + A j ) ) ; { { printf ( _<string>_ s } s ) < <unk> < <unk> < N < A j < S < N < N < S < N < S < N < S < N j ( A j == S <END_BUG> A j == S <END_BUG> A j == S <END_BUG> A j == S <END_BUG> A
rintf ( _<string>_ , arr [ n ] + j ] ) ; number n ; m = j ; & [ ] , [ ] number < n > s j ( scanf ( _<string>_ , [ ] , n ) a ) a ) , }
f ( s == arr [ i [ k [ i [ array = = _<number>_ int ] = _<number>_ number - > > n ( s == [ > number a ) ) i k = h ;
f ( ( input [ i ] > [ number [ ] [ i j [ ] [ [ ] n n n n n ] [ = if ;
rintf ( _<string>_ , arr [ i ] j j + = [ u n [ ] = _<number>_ number = _<number>_ ) ; string ( a j , scanf ( _<string>_ > a ) , n j [ > ) , > , & number ( number ( arr j k s s j s s s s , arr j + ( arr j k s , arr j s , { ! arr j + ( arr j k , { ! arr j k , int arr j k , int arr j k + arr
rintf ( _<string>_ , arr [ j ] , arr ] ( for > ( scanf ( _<string>_ ) ) ) < for > for ( number , number < _<number>_ < j < array < array < _<number>_ < array ( for ( number = _<number>_ ( for ( number = _<number>_ ( for ( number , number ( for ( number , scanf ( _<string>_ ) ) ) < ] ) < ] ) ) < for ( for ( number , number < _<number>_ < j < j < j < array < _<number>_ < _<number>_ <
for ( j = _<number>_ ; number , > ; ] ++ i string ;
nt s ;
nt j , i , j = _<number>_ , for ) ;
or ( i = _<number>_ ; i < string && ( ( ( < - ] ++ + ] ] ] ] ] ] ] ] ] ] ] ] ] > {
or ( j = i + _<number>_ < { n i ; n i ++ ) }
f ( a [ i ] + ] = scanf ( a [ ) = if ; number n a [ j ] > arr [ j ] , h ; {
nt array [ _<number>_ ] ;
f ( array [ i ] + array a a a == } )
nt j ;
rintf ( _<string>_ , a [ i ] + a j ; + array j ; n a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
f ( ( a [ i ] + a [ j [ [ [ [ [ [ [ [ [ [ [ ] = s = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ] > int int int > int int int > int int int > int int > int int int > n > int int int int > int int int > int int int > int int int
rintf ( _<string>_ , a [ i ] , a [ ] number i number + _<number>_ i i i i i > b > int > int + + _<number>_ > + _<number>_ > int + _<number>_ ) { main ( _<string>_ ) ; i , + [ i number j number ; }
canf ( _<string>_ , & a [ k ] ) ;
rintf ( _<string>_ , a [ i ] , n j = & j = ( k { _<string>_ j j j + j i + j i i i > n > s > s > s > s > s > s > s > s > s > s > s > s > s > s > for ( k int j ] + j int j int j int j int j + j int j ( ( ( , = = _<number>_ + b [ j ] int b int b int = s
rintf ( _<string>_ , a [ i ] , n j > b = _<number>_ = j = n i = _<number>_ long ; { if > ] long ] == j i scanf ( _<string>_ = ] j ] = ] j ] = ] > ] > ] > ] > ] > ] > ] > ] > [ ( [ ( [ ( [ ( ( ] - [ n j j j j j j j ] int ( j int j ] [ = - _<number>_ + , ) ( = number [ (
rintf ( _<string>_ , b [ i ] , b [ ] b ) ; }
rintf ( _<string>_ , b [ i ] , b [ k a + < number > ] > number > ] ) < for ( for ( , , , , = _<number>_ < _<number>_ < + _<number>_ < , = _<number>_ < _<number>_ < , pow < _<number>_ ) < < < _<number>_ < , pow < _<number>_ ) < < sum < _<number>_ < , pow : _<number>_ < = _<number>_ < , pow < _<number>_ )
canf ( _<string>_ , & a [ n - _<number>_ j ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) <
f ( ( a [ k ] + a [ k j ] == scanf ( a ( a + j ( scanf A , <unk> , N , S ( j ( j ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ ] = _<number>_ = S ) i = _<number>_ = _<number>_ = scanf < ] i i i i i i i i i i i i = _<number>_ = j = _<number>_ = j = j = _<number>_
f ( x == b [ i1 ] ) {
or ( i1 = i + _<number>_ ; i1 < n , i1 ++ ) string ++ ) string ++ ) string ++ > ] > ] > _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long = _<number>_ long [ _<number>_ a ++ > ] > ] > ]
f ( ( a [ k ] + a [ k ] == s ) && ( j > k ) ) pow ; pow pow ( ] number ( ] ( ] ( ] ( ] , ] ( ] == _<number>_ ( ] number _<number>_ ( + a ( ] ( ] ( ] ( ] ( ] ( ] == n ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ]
canf ( _<string>_ , & k ) ;
++ ; } } } }
++ ; } } } }
rintf ( _<string>_ , b [ j ] , b [ i1 [ + + _<number>_ [ + number [ + _<number>_ + = <END_BUG> - _<number>_ + j + _<number>_ + _<number>_ + j + _<number>_ + j + _<number>_ + _<number>_ + j + _<number>_ + j + _<number>_ + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ a ( = = _<number>_ > = }
rintf ( _<string>_ , b [ j ] , b [ number ] ) ; return _<number>_ ; return s ; return k < + for = + _<number>_ < + for ( + + _<number>_ > k > + _<number>_ > k > + _<number>_ > k > k > for ( + b ] < for = + for ( ( + + + + + + + + + + + + + + + + + + + + + + + + + [ j + _<number>_ + k + _<number>_ + ] ) ;
rintf ( _<string>_ , a [ j ] , { printf ( _<string>_ + = = j + = ( = = ( n + = ) , n ) ) ;
rintf ( _<string>_ , a [ j ] , n ) ;
rintf ( _<string>_ , a [ b ] , a [ c ] ) ; }
rintf ( _<string>_ , a [ b ] , a [ c ] ) ; }
f ( j != s ) {
= arr [ j ] + arr [ } for ( k , _<number>_ < ] < ] < ] < [ + _<number>_ for ( + n , ] ) ; = n > n ; [ ] > for ( [ [ [ [ [ [ [ [ [ [ [ [ ] a a a a a & + b & + , & + b & + , & = _<number>_ & + b & + n a a i a ;
f ( sum == c [ i ] + printf ( string ) ;
f ( sum == c [ i ] - string number = + j ) }
nt a , b , n ;
or ( i = _<number>_ ; i <= ( n string _<number>_ ) < ( string scanf ( string scanf N ++ < <unk> < <unk> ) ; > B n ) i1 ++ > N > _<number>_ < <unk> i ) i1 ++ > number < _<number>_ < N > _<number>_ > <unk> i ) i1 ++ < ;
nt i , j , k ;
f ( a [ i ] + a [ j ] == scanf i i i i i i i )
f ( ( a [ j ] + a i i ) == h ) main ( _<string>_ i i i i ) ; string ( A number }
or ( k = j + _<number>_ ; k < n ; k ++ , j ++ > int a n ; i1 ++ , i1 ++ i i < j < _<number>_ < j ; number ++ , number ++ , number ++ , number ++ , number ( number , number , number ++ , number , number , number ) ; number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ ) number ++ )
[ i ] = a [ i ] ;
nt a [ _<number>_ ] , n , i , s , i1 , number , n ;
f ( b [ j ] + b [ k ] == s )
or ( j = _<number>_ ; j < x - _<number>_ ; j ++ ) {
f ( ( a [ i ] + a [ j n , ! ) == scanf > ) = _<number>_ ; number = check ; long & a j ] == a ) long
f ( a [ i ] + a [ i + _<number>_ & & s )
or ( j = i + _<number>_ ; j < n < j < { number ++ i i ; }
or ( k = _<number>_ ; k < n ; k ++ ) x ++ i ( k ++ < n < ] < ] < n < s < N ; ] ++ < N ) number ++ < N ; ] ++ < N ; ] ++ < <unk> < <unk> < <unk> ; ] ++ < N < S ; ] ++ < N ; ] ++ < N < S ; s ++ < _<number>_ ; ] ++ < N ; ] ++ < N < S ; s ++ < _<number>_ ; ] ++ <
or ( i = _<number>_ ; i < n ; i ++ int i + _<number>_ i + _<number>_ + ] , = n j j + _<number>_ + ] a , i a , ) if ( i { string < _<number>_ , i ; i ++ ] ] ] ] ] ] ] ] ] ] ] ] ] ] + < , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
nt i , j , n , h ;
or ( k = _<number>_ ; k < n ; k ++ i < ] ; n ++ > _<number>_ ;
rintf ( _<string>_ , a [ i ] , a [ ] [ ] ] > k ) < < < { - _<number>_ < scanf ( _<string>_ , b + a + a + a > & n > & & & ] > & & x > & & ] > & x > & & ] > & x int x > j > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum > sum
rintf ( _<string>_ , a [ i - _<number>_ ] , a [ < } _<number>_ ) [ ) + ( b s _<number>_ int ] ; = }
rintf ( _<string>_ , a [ i - _<number>_ ] , a [ i ; } int string ] ; a ] ; number int ) n ; number b b b b b ] ; = int int int [ ( s s s s ; = ( int [ ( s n s n [ ( int ] ; = }
nt n , a [ _<number>_ ] , i , j ;
rintf ( _<string>_ , a [ b ] , a [ c ] ) ; }
rintf ( _<string>_ , a [ i ] , a [ j ] ) ; } } } }
oid <unk> ( int a [ ] , int n , int s ) {
f ( a [ i ] + a [ j ] == scanf < [ < j = _<number>_ ) = _<number>_ ; } {
nt i , j , n , a [ _<number>_ ] j j ;
f ( b [ j ] < b [ k ] ) { k = b [ b [ ] > scanf ( = = int b number number ( } = _<number>_ ( = _<number>_ > _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( =
or ( j = _<number>_ ; j < x - _<number>_ ; j ++ )
or ( i = _<number>_ ; i < n ; i ++ )
rintf ( _<string>_ , a [ i ] , a [ j ] i i ( scanf ( _<string>_ + int int ] + j + j + j int j + j int j + j > string > string > string > string > j > string > string > = _<number>_ > ) > _<number>_ > ) ;
rintf ( _<string>_ , a [ i ] , a [ < < for ) ; string ( i - _<number>_ , n ) ; string ( + + + + + + + + + n k > number > number > number > number > number > number > number > ] > number > ] > number > ] > n < a < a ] < a < a ] < a < a ] < a < a ] < b < a < a ] < a < a ] < a < a
nt a [ n ] , i , j , s < _<number>_ ;
or ( k = j + _<number>_ ; k < n ; k ++ ( + ++ ( ( string ++ , number ++ i i < j < ] , number ++ , number ++ ) ) string ; string string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) number ++ ) a ++ ) a [ j i i i i ++ i ) a ++ ) a ++ ) a ++ ) a ++ ) a [ j i i i i i ++ i
f ( s == arr [ i ] + arr [ n ] ) ;
f ( a [ a ] == ( s - a s ( { = for i > , a & + _<number>_ i i i , {
nt a [ _<number>_ ] ;
or ( k = j + _<number>_ ; for > h < <START_BUG> < <START_BUG> < main ( ; printf ( _<string>_ > } ) /
or ( k = j + _<number>_ ; k )
or ( i = _<number>_ ; i < number ; ( ) ++ ) {
f ( a [ i ] + a a n ) printf ( _<string>_ , printf ( _<string>_ [ < < int int ( n ( n ( { int j b [ b b b < a < a < = _<number>_ < {
f ( j != s ) {
rintf ( _<string>_ , a [ i ] > ] ) < int int int ( < j i for ( < i1 = i1 = < n > scanf ( _<string>_ , n j , n > n > scanf ( _<string>_ , n j > int int int int ( , int int ( ( , printf b printf ( _<string>_ string , , printf ( _<string>_ string , string t ; else string + string } < if ( > string printf ( _<string>_ number string printf ( _<string>_ number string printf ( _<string>_ number string printf
= getchar ( ) ;
rintf ( _<string>_ , a [ i ] = printf ( _<string>_ > & & n = s = n j j j number for ( n string < _<number>_ > & & & > & a a a a a a a a a a ] i [ = s ) i i i > j > ] , [ b ] == } > = _<number>_ > }
or ( j = i + _<number>_ ; } ; n ++ > S > S , a = _<number>_ ( { { { { { { string ++ > ( { ( + ( + & j j j j j j j j j , number , ] , ] , ] , i1 ++ = > { n , n = _<number>_ = _<number>_ = _<number>_ = i ; , , , , , string > } )
k = a [ j ] ;
nt n , s , i , j > x ; for ( <END_BUG> + _<number>_ < , < , number ) ) for ( <START_BUG> j = _<number>_ < N < N < S < _<number>_ < _<number>_ < N < S < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
rintf ( _<string>_ , a [ i ] i < , n = & k ( + + + + = = _<number>_ ( = = _<number>_ > i number i number i - + i number number number number number i number + i number number number number number number number n number n + a i1 + _<number>_ ) < < number n i i i i i i + j + _<number>_ number = _<number>_ number > _<number>_ number i + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + i +
canf ( _<string>_ , & a [ j = , }
rintf ( _<string>_ , b [ i1 ] i i i i + _<number>_ + = _<number>_ number number - _<number>_ number number - _<number>_ number number - _<number>_ + _<number>_ + < _<number>_ + < _<number>_ + string j + _<number>_ + < _<number>_ + ( k == printf ( _<string>_ ) < printf ( _<string>_ ( / / _<number>_ + , + _<number>_ + _<number>_ + ;
or ( k = _<number>_ ; k < a ; [ ++ {
or ( j = _<number>_ ; j < number ; i1 ++ ) n ; n ++ < _<number>_ ; int , , , , , , , , , , , , , ( , scanf ( ( ( ( ( ( ( ( ( = - _<number>_ = _<number>_ j = _<number>_ = printf ( _<string>_ n ! g ; + + _<number>_ ; + + _<number>_ ; + string ) + int }
f ( j == n || j == ) & ] == = = i int > > > > > , , , + _<number>_ )
or ( i = _<number>_ ; i < [ [ [ [ n & _<number>_ < k s ( k ++ i i i i i i ) ; +
f ( i != ( n / _<number>_ ) )
or ( i = _<number>_ ; i < ( n / _<number>_ ) ; i ++ ) } {
or ( i = _<number>_ ; i <= ( n - t < }
f ( b > _<number>_ )
or ( j = _<number>_ ; j <= b scanf ( _<string>_ string _<number>_ = number - _<number>_ - printf ( _<string>_ ) ++ > = _<number>_ ) > ( = _<number>_ ) > = _<number>_ > n ; n ++ )
or ( j = _<number>_ ; j <= _<number>_ } & , = _<number>_ } ( = _<number>_ a ) ( [ b number _<number>_ ] ) < _<number>_ n { [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ + _<number>_ k int + _<number>_ k int + _<number>_ k int + _<number>_ k n n n n n n n n n n / _<number>_ )
or ( j = _<number>_ ; j <= _<number>_ * + i } _<number>_ > [ + _<number>_ } )
or ( j = ( n - i ) ; g <= ; int int int int { ( i - + + + + _<number>_ ( i { ! _<number>_ ( i { ! _<number>_ ( } - _<number>_ ( i { ! _<number>_ ( } - _<number>_ ( } { int }
or ( j = _<number>_ ; j <= a > a ( number n n n int [ ] < [ [ [ [ [ [ [ [ + _<number>_ int = + _<number>_ ( + b ( + b , + _<number>_ ( b , + _<number>_ ) ) , + _<number>_ ) ) string
or ( j = ( n - i ( + > i > ) > _<number>_ > i > i > a < a < a < ] < & number < ( number string = number < ( number string = _<number>_ < _<number>_ < number < number < number < number < number , n -- , {
lse { for ( k = _<number>_ ; for ( string = _<number>_ < _<number>_ i ; for ( for ( / ( n string _<number>_ ) <= i number _<number>_ , a > i > i , a ++ , a ++ , a ++ ( number string _<number>_ ( [ [ [ [ & number k k k k - _<number>_ ) ) < _<number>_ < }
f ( j == n , number == { {
f ( ( ( _<number>_ > j number / h < j ; ) ;
nt h , h , printf ( _<string>_ ! number ( string & string ) = _<number>_ ;
or ( j = _<number>_ ; + < ; + + ( n / _<number>_ ( + + + _<number>_ ( + _<number>_ ( k number i ( k number _<number>_ ( k != k ( k for ( + _<number>_ ( + + _<number>_ ( i for ( k for ( + _<number>_ ( i for ( + _<number>_ ( i for ( + _<number>_ ( i for ( + _<number>_ ( k != _<number>_ ( k != k ( k for ( + _<number>_ ( + + _<number>_ ( i for _<number>_ ( k for ( k }
p2 = _<number>_ ;
-- ; }
or ( j = ( i x _<number>_ ; i >= _<number>_ printf ( _<string>_ j - _<number>_ > f int f > {
or ( k = _<number>_ ; f < = + _<number>_ < number ; + ++ ) n ) number ++ > _<number>_ ( = _<number>_ - h - + _<number>_ ; h ++ ; string i ; string ++ ; string ++ ; i ) i
or ( j = _<number>_ ; for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for _<number>_ > _<number>_ > number { + ( i b { if ( for ( for ( for ( for ( for number s ) s s ) == _<number>_ > number { + ( i b { _<number>_ int for ( for ( for ( for
or ( k = _<number>_ ; k ; k ++ )
rintf ( _<string>_ ) ;
or ( j = _<number>_ ( + _<number>_ - j ; k <= _<number>_ ; { }
f ( i < ( h = _<number>_ ; i < h ; i = = number _<number>_ > s > i > i > i > _<number>_ > i > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > _<number>_ > i > i > _<number>_ > i > i > _<number>_ > i > i > _<number>_ > i > i > _<number>_
or ( i = _<number>_ ; i <= j { n <= }
f ( ( j == < < < < < < < < < ( ( h + _<number>_ > i > n > n ;
f ( ( j == ( < i number - _<number>_ > { _<number>_ ( } == <END_BUG> ( < h + _<number>_ > { _<number>_ > _<number>_ > _<number>_ > n > n > n > n > n > n > n > n > n ;
or ( i = _<number>_ > _<number>_ ) ( } - _<number>_ ; = <= < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
or ( j = _<number>_ number i ; + <= + + ) = _<number>_ = number + _<number>_ ( ( { j > string = _<number>_ ) ) / ( string > _<number>_ ) i <= k i i i i i i i i i > string = _<number>_ number = = _<number>_ number = _<number>_ number string = _<number>_ number
nt k ;
lse if ( ( i - = > < < < < < < < < < < < ( , + _<number>_ ( + _<number>_ > printf < _<string>_ > i > i > printf ( _<string>_ string < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
or ( j = _<number>_ ; = < i ; = ++ ) {
or ( j = n / _<number>_ < _<number>_ < n ( j -- ) = _<number>_ < + _<number>_ < j ; = -- number number ) printf ( _<string>_ | number ) < _<number>_ < number < _<number>_ < i ) printf ( _<string>_ | i a < { _<number>_ i a >= _<number>_ ) -- ) string -- < _<number>_ < _<number>_ < string < _<number>_ < string > _<number>_ < string < string / _<number>_ < j > j > j > j > j > j > j > j > j > j >
or ( j = _<number>_ > _<number>_ ) / _<number>_ ) string > j number _<number>_ ( i ++ ; {
lse s = i ;
pace ( ( star + _<number>_ ) int _<number>_ ;
pace ( ( ( n + _<number>_ ; , _<number>_ ( a - a ( } - _<number>_ ( j = _<number>_ ;
pa ( n / _<number>_ - {
or ( j = _<number>_ number + { _<number>_ ; ; j <= a - n - _<number>_ + k for ( = _<number>_ number + j + _<number>_ number + j < _<number>_ ; + + _<number>_ ; + + _<number>_ ; + + _<number>_ ; + + _<number>_ ; + + _<number>_ ; + + _<number>_ ; + _<number>_ number + + _<number>_ ; string = + _<number>_ ; string = + _<number>_ number + _<number>_ number + _<number>_ number + _<number>_ number = + _<number>_ number + + _<number>_ number + + _<number>_ ; string ; string
f ( j == n / _<number>_ ( _<number>_ || i > f b printf ( i j == } }
or ( j = i ( i ) ) ) }
f ( ( j == _<number>_ ) || > > + n string _<number>_ ;
f ( ( j == _<number>_ ) || ( j == + i string _<number>_ ) ;
f ( j == n % _<number>_ + _<number>_ ) {
nt k ;
or ( k = _<number>_ ; k < ( p - i - _<number>_ ) ; = ++ )
or ( k = h - i ; { { }
f ( j > n - _<number>_ || i < string = _<number>_ )
or ( i = _<number>_ ; i <= string ) ) {
pace -- ;
or ( i = _<number>_ ; i <= - _<number>_ ; + + - - _<number>_ > p ; number ++ > p number number number number number number number number number number number number number number number number ) -
or ( k = _<number>_ ; k < ( p - i - _<number>_ ) ; k ++ > _<number>_ > k > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > ; = = = _<number>_ > = _<number>_ > = _<number>_ > number )
nt i , j , l , n > number ;
lse if ( j == ( i - n ) ( string & | ( j > j > p ; ;
nt i , j , n ;
or ( j = _<number>_ ; j <= l & _<number>_ + - _<number>_ ) ) if ( number ; j <= h if ( i + i ( printf ( _<string>_ ( i + i ( i ( i + _<number>_ ) ) p ) p p p - _<number>_ ) ) number
or ( k = _<number>_ ; k <= printf ( _<string>_ for ( - _<number>_ ) < printf ( _<string>_ h string , }
or ( k = _<number>_ ; k <= number > number > number < + _<number>_ > string > j ) +
or ( k = c - _<number>_ - i + _<number>_ ; k >= _<number>_ ; k -- )
or ( i = _<number>_ ; i <= n ; i ++ ) {
or ( space = _<number>_ ; space <= k } ) i = j printf ( _<string>_ if ( l == _<number>_ = _<number>_ = n , i { - _<number>_ < j { j ++ ) - _<number>_ < i p _<number>_ < i p - _<number>_ < + + _<number>_ < number > _<number>_ number
f ( j == ( n - i ( , == ; i ++ ; }
f ( j == ( n - i = _<number>_ ) || i == j > h ;
or ( j = _<number>_ ; j <= + i string - _<number>_ = number string _<number>_ + k + number + _<number>_ + k + i + _<number>_ + k + k + _<number>_ + k + i + _<number>_ + = _<number>_ + = } _<number>_ + = _<number>_ + = } _<number>_ = k - _<number>_ = k - _<number>_ = k = k n - _<number>_ ; +
or ( j = _<number>_ ; j <= a - _<number>_ < number i = _<number>_ ) )
or ( a = ( h - _<number>_ = _<number>_ if ( printf ( A - _<number>_ ; j >= _<number>_ ; + _<number>_ ) ( A + _<number>_ > B -- > _<number>_ > A printf )
f ( ( j == ( n + _<number>_ ) / _<number>_ ) || ( j == ( printf ( printf = + _<number>_ ; else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else
f ( ( j == ( n + _<number>_ ) / _<number>_ ) || ( j == ) ) { if ) ) - n == ;
or ( i = _<number>_ ; i < _<number>_ { string ++ ( string ++ ; j ++ > number ) j ++ ( ( ( i } _<number>_ , k ++ ( ( ( k = _<number>_ , k ++ ) ) ) ) ) ) <
or ( k = _<number>_ ; k <= }
pa ( n / _<number>_ ) ;
or ( j = _<number>_ > _<number>_ > = = _<number>_ > j > _<number>_ > = _<number>_ > number ( int ) } , i ) }
f ( j == i || = == n ) & i ) > j ( _<string>_ ( + = _<number>_ ) ;
or ( j = i ( h > h > h }
f ( ( i + n ; == < < < < j | _<number>_ > / _<number>_ > + _<number>_ > k > i > i > + _<number>_ > n > n < _<number>_ < number < number < i < printf ( _<string>_ for ;
or ( j = _<number>_ > _<number>_ ) ) string ++ ( > n > n > j > j > j > + _<number>_ > string ( ( j ++ > printf < _<string>_ > i > printf ( i for ( i = _<number>_ for ( i number - _<number>_ ( { }
or ( j = _<number>_ ) ) printf ( _<string>_ } _<number>_ + string ( number ++ > n > n > _<number>_ > { + { _<number>_ k ++ ( = _<number>_ ( = _<number>_ l - printf ( _<string>_ ( = string ++ ( = _<number>_ ( printf ( _<string>_ ( = _<number>_ for ( = _<number>_ k = _<number>_ ( string ++ ( = _<number>_ for ( = _<number>_ ( = _<number>_ ( string ++ ( = _<number>_ for ( = _<number>_ ( printf ( _<string>_ ( = _<number>_ ( printf ( _<string>_ ( = _<number>_ (
f ( ( j == n ( n ( j ( n ( + _<number>_ > number ( number == k printf _<number>_ ( number == k ( n > n > n = _<number>_ > } > n > n > n > n > n > n ( string ( string == string }
f ( ! ( j i ( number i ( number + = ( n + j ; - j ; / string ( { space number j ; int n > printf ( for ( { , + + + + + + + + + + + number > k > k > k > k > n ) ) )
if ( j == ) ( / { _<number>_ ) else , printf ( _<string>_ ( n - _<number>_ > } > _<number>_ > {
or ( j = i ; number <= j string _<number>_ > _<number>_ ( j ++ + = _<number>_ + _<number>_ j ++ + _<number>_ number i number number number number number number number = _<number>_ = _<number>_ = n + _<number>_ ) ) {
rintf ( _<string>_ , n { ; n ++ + _<number>_ ) ( , = , ++ j j / _<number>_ ; & & & & number = { / _<number>_ ; }
or ( space = _<number>_ ( } <= _<number>_ > } printf ( _<string>_ , + _<number>_ ) ; - _<number>_ ; - - _<number>_ ) +
or ( j = _<number>_ ; string <= { string if ( j number _<number>_ ) printf ( _<string>_ ) ;
f ( ( j == _<number>_ ) && ( + + string == / ) ;
or ( k = _<number>_ ; n <= i ( - number - number ++ ) ; string ++ ) - _<number>_ ; - _<number>_ ;
or ( i = n ; } >= _<number>_ ) space -- ) k -- ) k = _<number>_ > printf ( _<string>_ ) > printf ( _<string>_ h > _<number>_ ) > _<number>_ > printf ( _<string>_ ) > printf ( _<string>_ h > l ) > _<number>_ > { _<number>_ - _<number>_ > _<number>_ > { _<number>_ - _<number>_ > { _<number>_
nt i ;
or ( k = i - _<number>_ < _<number>_ < _<number>_ < n < for ( , , , -- = - _<number>_ = _<number>_ -- = - _<number>_ = _<number>_ -- = = _<number>_ -- = _<number>_ = _<number>_ -- = ) } {
-- ; }
f ( j < n i i i i i i }
f ( j == n i j j j )
f ( j < n i printf ( number ) printf ( number > number > _<number>_ | + + / / / / i ) ;
or ( j = _<number>_ ) ) , ( string number _<number>_ ; i <= ( n = _<number>_ ( n = _<number>_ ( printf ( _<string>_ , { = _<number>_ , = > > > > > > > > > > > > > > > > ) ) > n > _<number>_ > { }
pace ( n - ( space number _<number>_ > ;
nt n , i ;
or ( long i = _<number>_ ) printf ( _<string>_ string i ++ ( i ( j ++ ; ; i ++ ) ) ( i ++ ( i > }
or ( j = _<number>_ ) ; j <= ( n number _<number>_ ) } _<number>_ b ++ )
pace ( ( n + _<number>_ > , > ( string number - _<number>_ ;
nt i , j , h , r , p ;
or ( j = _<number>_ ; j <= h - i + _<number>_ ; j = j + _<number>_ ( j = h + _<number>_ ( j = h + _<number>_ ( j = h + _<number>_ ( j = i + _<number>_ ( j = h + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j = i + _<number>_ ( j =
or ( j = _<number>_ ; j <= i ; j ++ )
or ( m = _<number>_ ; m <= ( h - _<number>_ ) / _<number>_ ; m ++ )
or ( j = _<number>_ ; j <= ( h - _<number>_ ) / _<number>_ ; j ++ )
pc = spc + f ;
or ( j = _<number>_ ; j <= ( j for ( = _<number>_ ( k printf + _<string>_ > i ) & _<number>_ > { _<number>_ {
lse { if ( i > ( n + _<number>_ ) / _<number>_ ) n - _<number>_ ( number > ( i { / _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_
or ( j = ( n - i ) ; g <= ( i string _<number>_ ) , _<number>_ > ; }
f ( ( k = ( j + _<number>_ ) for ; = ( k number _<number>_ ( n j number _<number>_ ( } number _<number>_ ;
f ( j = l )
f ( j = l )
or ( i = _<number>_ ; i < ( n / _<number>_ ) ; i ++ ) {
or ( i = _<number>_ ; i <= n ; i ++ > k ++ ( , number ( ) ++ > }
or ( k = _<number>_ ; k <= ( j i i i i + _<number>_ ) printf ( _<string>_ { i ++ ) n ++ ( {
or ( j = _<number>_ ; j <= ( n & _<number>_ > j & _<number>_ ) + _<number>_ | k ; }
or ( j = _<number>_ ; j <= ( n / _<number>_ ( n & _<number>_ ; + number ( ; i ++ = - _<number>_ ; }
or ( row = ( _<number>_ - n ) / _<number>_ ) ) } {
or ( k = _<number>_ ; k < ( i int string ) > j = _<number>_ ( ; { i ++ ; n ++ > _<number>_ > number > _<number>_ > number > _<number>_ > number > _<number>_ > number > ) }
or ( j = ( n - _<number>_ ) / _<number>_ - i ; + + j >= _<number>_ ; + + { _<number>_ - string ; - - string j -- ( + _<number>_ ( - string -- ( string -- ( string -- ( <unk> -- ( <unk> -- ( N -- ( string -- ( + _<number>_ ( + string -- ( string -- ( string -- ( N -- ( string -- ( + _<number>_ ( + string -- ( string -- ( string -- ( <unk> -- ( string -- ( + _<number>_ ( +
or ( k = _<number>_ ; k <= i - _<number>_ ; k ++ ) i ++ ) =
nt n , i , j , n ;
f ( ( j == _<number>_ ) || ( j == string = _<number>_ = _<number>_ ;
nt i , j , n , space ;
or ( j = _<number>_ ; j < ( n / _<number>_ ) ; j ++ ( for ( for ( j , _<number>_ ( i j number - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_ ( i j - _<number>_
or ( j = n / _<number>_ ; j > _<number>_ > string > = _<number>_ > = _<number>_ ) if ( k == i & j = _<number>_ ) printf ( _<string>_ = _<number>_ -- = _<number>_ -- = _<number>_ -- = - _<number>_ ;
f ( ( j == _<number>_ ) || ( j == h - i j j + _<number>_ ( n ( i == _<number>_ ( + + _<number>_ ( + i ( + _<number>_ ( + i ( + _<number>_ ( + i ( + _<number>_ ( + i ( + i { <END_BUG> _<number>_ ( + + i { <END_BUG> _<number>_ ( + + _<number>_ ( + i ( + _<number>_ ( + i ( + i { <END_BUG> _<number>_ ( + + i { <END_BUG> _<number>_ ( + + _<number>_ ( + i ( + _<number>_ ( +
f ( ( j == _<number>_ ) || ( j == h - i j j + _<number>_ ) ) -
pa ( n / _<number>_ - j ) ;
or ( j = _<number>_ ; j <= ( n number _<number>_ ) int _<number>_ < , > j number ++ ( ( { _<number>_ ) <= ( , = _<number>_ ; j ++ ; j ++ ; j ++ ; j ++ ; + _<number>_ > + _<number>_ > string ) - _<number>_ > string number number ++ ; , + _<number>_ > string number number _<number>_ > string number _<number>_ > = ) - _<number>_ > string number _<number>_ > string number - _<number>_ > string ) - _<number>_ > string number _<number>_ > string number number -
or ( j = _<number>_ ; j <= ( n i i i i = _<number>_ ; = ++ ( i ; i ++ ) ) {
f ( ( ( i + j ) == ( n for < for ( < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
f ( i || j < n ) printf ( _<string>_ < number < number < k > string ( string space = _<number>_ ) > { int + n > n > + _<number>_ > + _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ )
or ( i = _<number>_ ; i <= n > { for ( for ( , j h = _<number>_ > _<number>_ < k > i > string ( number ++ > = _<number>_ > j ( number - f > N > N > N > N > N > N > N > N > N > N > N > N > N > N ( N - _<number>_ ( number ++ ( ( number = _<number>_ ( n ++ ) ) ) ) ) ) )
or ( j = _<number>_ ; j <= ( { _<number>_ number <= + _<number>_ ) & _<number>_ > string ( k ; i ++ ; n ++ > < < < ) } }
f ( spc == n / _<number>_ double f = - _<number>_ number > int _<number>_ = & _<number>_ > _<number>_ ( n == = = = _<number>_ i , f ;
or ( j = _<number>_ ; j <= ( j + _<number>_ ; number ++ ; j ++ ; {
f ( j == ( ( n + _<number>_ ; f <= = a < _<number>_ > { _<number>_ ) && number <= number > > > > > > > > > i + _<number>_ > {
or ( j = _<number>_ ; j <= ( string = _<number>_ > j = _<number>_ ) string _<number>_ > m > j + _<number>_ > = ; i ++ ( j ++ ( ( i = _<number>_ ( k i i i ( k ++ ( k i ( = _<number>_ ( k i i ( k ++ ( = _<number>_ ( k i , k ++ > { i ++ > i > _<number>_ > { i ++ > i > _<number>_ > i > _<number>_ > { _<number>_ > i + _<number>_ > i > _<number>_ >
f ( j == n || j == i number = _<number>_ = _<number>_ > j ;
nt n , i , j , l , l , m ;
or ( m = _<number>_ ; m <= ( n - i - _<number>_ ) ; m ++ ) {
or ( j = i ; j <= m ) > > n > }
if ( ( j == ( n + _<number>_ ( { _<number>_ ( k number _<number>_ < > > i | _<number>_ > { && ( i >= _<number>_ ) ) ) ) )
or ( i = _<number>_ ; i < ( { , _<number>_ number _<number>_ number _<number>_ number { ; { { i ++ > n }
or ( j = _<number>_ ; j <= n < } ; printf ( _<string>_ + else & for ( for ( string = _<number>_ ) < _<number>_ < | < | < , < , p < _<number>_ < j ; - ++ ; - - _<number>_ ; - ++ ; - _<number>_ ; - - - _<number>_ < j < j ; - - i ; - - _<number>_ ; printf ( _<string>_ = - - - - - - - - - - - - - - i ; - - _<number>_ ; - - _<number>_ ;
or ( k = h - i ; k ) = number ( } * }
f ( k > _<number>_ )
f ( ( k == ( j + _<number>_ ( string + _<number>_ ) i ) ;
or ( k = _<number>_ ; k <= ( n = _<number>_ ( i = _<number>_ < = ; number ++ < {
or ( i = ( ( _<number>_ - h ( _<number>_ n ; + < > ( _<number>_ = n ( i < _<number>_ + i = ) < _<number>_ i < ) ; j ++ ; j ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number > k > _<number>_ number k > ;
or ( i = n ; i >= _<number>_ ; i = i int , int number number > _<number>_ ) }
or ( j = _<number>_ ; j <= n printf ( _<string>_ int k ) + _<number>_ = { _<number>_ i string _<number>_ = _<number>_ number = else number ) }
or ( i = _<number>_ ; i <= n / _<number>_ ; i ++ ) {
or ( i = _<number>_ ; i <= n string _<number>_ ( + _<number>_ ; number ++ ) , i ++ number number > n f _<number>_ ;
or ( j = i + _<number>_ ; j < printf ( / _<number>_ , / = _<number>_ > + _<number>_ = + _<number>_ j ++ j + _<number>_ + i + _<number>_ + _<number>_ + string + _<number>_ j j j j j j j j j j j j j j j j j j j j j j j j j j j j + = _<number>_ + = _<number>_ number { printf ( _<string>_ string }
nt n = _<number>_ , i , j ;
tar ( n ) ; }
tar ( n - i ) ; }
or ( j = _<number>_ ; j <= ( h + _<number>_ ) / _<number>_ - _<number>_ ; j ++ ) {
pace ( ( n + _<number>_ ) / _<number>_ ; number ) <
f ( j == n || j == n for ( + j ( ( = _<number>_ ( number - k ( ( > = _<number>_ > = = _<number>_ > = = _<number>_ ( j string j ( ( j - = > j for ( + = j ( ( j string = j ( ( j string = j ( j ( j ( j for ( + = _<number>_ ( j for ( + = j ( j for ( + = j ( j for ( + = j ( ( j for ) string
nt n , i , j , i ) ) string int = _<number>_ > _<number>_ > }
= s - _<number>_ ;
nt j ;
f ( i != _<number>_ && i != string ) {
lse if ( ( i + j > < < < < ; number _<string>_ > + + _<number>_ > number > string < h < h < h < n ;
nt i , j , k ;
or ( j = n / _<number>_ + _<number>_ ( k i - _<number>_ + _<number>_ + number + number + _<number>_ + number + number + _<number>_ + number + number + _<number>_ + number + number + _<number>_ + number + number + _<number>_ + number + number + _<number>_ + number number number number number number number number number number number ;
or ( l = _<number>_ ; l <= , < _<number>_ < { , & & & > _<number>_ ) > , , b > H number b )
pace ( ( space + _<number>_ ) / _<number>_ <START_BUG> <START_BUG> ;
or ( j = _<number>_ ; j ; h ++ > = + _<number>_ ( i - _<number>_ > i ( } - _<number>_ ++ ( ( i - _<number>_ ) ++ ; {
nt n = _<number>_ , i , number > _<number>_ } ) >
or ( j = _<number>_ ; j <= > > > > ( j i i number _<number>_ ; = ++ )
or ( j = _<number>_ ; j <= ( string number _<number>_ ; i ++ > ( + _<number>_ ; + string ; l ++ ) )
or ( j = _<number>_ ; j < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
f ( j == ( ( n - _<number>_ ) / _<number>_ || j == ( ( _<number>_ * i ) + _<number>_ ) - ( ( n + _<number>_ ) / _<number>_ ) ) ) {
or ( i = n ; i >= _<number>_ = n = _<number>_ = j - _<number>_ number number = _<number>_ = j - _<number>_ number ) }
or ( j = _<number>_ ; j <= = = = = _<number>_ > + + _<number>_ i < h < h - _<number>_ number number ) printf ( _<string>_ j ) = _<number>_ > { = _<number>_ ; = = = = = = = _<number>_ ; n = = = = = i - _<number>_ = _<number>_ ) n ) n ) n ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ number printf ( _<string>_ n number j } ;
or ( j = ( h - _<number>_ ( for ( for ; n >= _<number>_ > | > _<number>_ = _<number>_ <END_BUG> | -- = _<number>_ = _<number>_ -- ) ) < < > > > > > { _<number>_ string _<number>_ string , , + _<number>_ ( , ( { - _<number>_ ( } - _<number>_ ( } if ( }
or ( j = ( h - _<number>_ ( j int j ( ( void + _<number>_ > number / _<number>_ > number -- > _<number>_ > number > _<number>_ = _<number>_ ) , f ; a -- ; a -- ; a -- ; , a + _<number>_ ; a -- ; , + <unk> ( { _<number>_ ( { _<number>_ ( { _<number>_ ( i for _<number>_ ; n -- ; ; n -- ( number ( number int number ( number int number ( n int n > _<number>_ > { _<number>_ > _<number>_ > { {
or ( b = _<number>_ ; b <= + + _<number>_ ( - _<number>_ ; for ( for ( for ( for ( for ( for + { _<number>_ { n <= n & _<number>_ ( n ++ number number number number number number number number number number number number number number number number ( } - _<number>_ ( - _<number>_ ( - _<number>_ ) / _<number>_ / { _<number>_ n ) ) ) ;
or ( j = _<number>_ ; j <= n < n < n < }
or ( i = _<number>_ ; i <= } > }
or ( i = _<number>_ ; i <= n int n int _<number>_ = _<number>_ > _<number>_ > + _<number>_ > _<number>_ > { { { { { { _<number>_
or ( j = ( n - _<number>_ - + + + _<number>_ ( string ( h < _<number>_ ) -- ) ) ; n -- ) n -- ) {
or ( i = _<number>_ ; i <= i printf ( _<string>_ ) number + _<number>_ number if ( i = _<number>_ number i <= / _<number>_ number if ( j ++ number number number number number number number number number number number number number number number number number number number number number number > _<number>_ > k for ( if ( k = _<number>_ ; + <= + _<number>_ ; for ( for ( for ( j ; j <= j i i i i i i i i i i i i i i i i i i
or ( k = _<number>_ ; k <= i - _<number>_ ; / ++ ) {
pace ( ( n + _<number>_ ) / _<number>_ printf ( _<string>_ if ( > > > > > > > > > > > > > > > > > > > > + _<number>_ ) - _<number>_ printf ( > | > + _<number>_ ) - _<number>_ number + _<number>_ number
or ( k = _<number>_ ; k <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ( - = - = ( - = - = ; j ++ number number number ++ number number number number number number number - = _<number>_ number j - = _<number>_ number - = _<number>_ > = ( printf ;
or ( k = _<number>_ ; k <= ( n & _<number>_ ) + _<number>_ / = _<number>_ / f > { , , , , , , , , int k )
or ( k = _<number>_ ; k <= > > > > ( string if ( { _<number>_ > printf ) _<number>_ / ) ; printf ( _<number>_ ( _<number>_ = a ) ; string ++ )
f ( i <= ( n - _<number>_ ) ) {
f ( l <= ( n - _<number>_ ) ) {
or ( i = _<number>_ < _<number>_ < , printf ( _<string>_ n < h = H = _<number>_ = H ; int int int int int int int int int int int int int = _<number>_ ; int int int int int int int int = _<number>_ ; int int int int int int int = _<number>_ ; int number + _<number>_ < }
f ( n % _<number>_ == _<number>_ = _<number>_ + _<number>_ + _<number>_ + h number : _<number>_ == _<number>_ + _<number>_ + n + _<number>_ == _<number>_ + _<number>_ + n + _<number>_ ) , <unk> < _<number>_ + _<number>_ + _<number>_ + n + _<number>_ == _<number>_ + _<number>_ + n + _<number>_ ) ,
or ( j = _<number>_ ; j <= _<number>_ ( + _<number>_ number ( i number ; , = , string string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; k = k string _<number>_ ; i = k string _<number>_ ; }
or ( k = _<number>_ ; k <= ( { c = > > ) }
nt n , i , j , l , l , m ;
nt i , j , l , n , k ;
or ( k = _<number>_ ( = _<number>_ printf > > > > > , string , n - _<number>_ ( string - _<number>_ ( + _<number>_ ( + _<number>_ ( string - _<number>_ ( string - _<number>_ ( + _<number>_ ( + _<number>_ ( string - _<number>_ ( string - _<number>_ ( + _<number>_ ( + _<number>_ > n , { { { { { j ++ ) } j ++ = _<number>_ = _<number>_ = ;
or ( k = _<number>_ ) ) {
pace -- ; }
nt n , i ;
or ( k = _<number>_ ) )
or ( i = _<number>_ > _<number>_ > number = _<number>_ ( }
or ( k = _<number>_ ; n <= string = string = _<number>_ = _<number>_ ) string ++ ( ( number - { _<number>_ > number > , , { { { number = _<number>_ ( , , { _<number>_ j <= , , number > , { number ++ > , > _<number>_ > , , { number = _<number>_ ; number ++ > N ; {
or ( j = _<number>_ > _<number>_ > ( number ; i < number > + < k ( = + number ++ ( ( ( + _<number>_ ( + number ++ ( ( ( number & j ( number ++ ( ( number & j ++ ( ( number & number ( ( ( number - ; number ++ < ) < ) < ) < = _<number>_ ; i ++ > i > i > i > + _<number>_ ) ) ) ) ) ) ++ = _<number>_ = _<number>_ = ) ++ = _<number>_ = _<number>_ =
lse if ( j == ( j - j > number > number ; < h < number ( number - = ( number - = ( number - = ( number - number ( i ( number ( number ( number ( number ( number ( number ( number ( number ( i ( i ( + ; ( j ) ) ) ) ) < > ;
or ( s = _<number>_ < _<number>_ < & sp2 < sp2 < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk>
or ( j = _<number>_ > _<number>_ > j - _<number>_ ( > k - _<number>_ ; number ++ ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; number ++ ( ) ; ) printf ( _<string>_ > k ) ) ) {
nt i , j , h < _<number>_ > j < n > printf ( _<string>_ f ( }
or ( j = ( { _<number>_ ( { _<number>_ ) & _<number>_ < s > _<number>_ ; s -- ( <END_BUG> ( number for k for ( printf for ( printf ( printf ( _<string>_ int number for ; printf ( _<string>_ int number for ; printf ( _<string>_ int printf ( _<string>_ int number for ; }
f ( ( k == _<number>_ ) || ( j == { _<number>_ ( + _<number>_ ( number == + _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ > _<number>_ > , > , > _<number>_ > number > , > _<number>_ > number > , > _<number>_ > number > , > _<number>_ > number > , > _<number>_ > number > , > _<number>_ > number
or ( j = i < + _<number>_ < number < number < number ; s < + _<number>_ ) n ++ ( } = i ++ ( } { }
f ( i < h ) {
nt h , i , j , k , l , a , c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
lse printf ( _<string>_ ) ; }
f ( ( j == _<number>_ < ) || > > printf ( = for ( ( number == _<number>_ = string c c c c c = string c = string c = string c = string c = string c = string c = string c = string c = string c = string c = string c ( + _<number>_ ( + i ( + _<number>_ ( + i ( + i n n n n n n n n n n n n n n n n n n n n n n n n n
nt i , j , h ;
nt f = _<number>_ ;
nt k ;
or ( i = _<number>_ ; i < h ; string ++ ; h ++ ) number ++ < > _<number>_ ( > _<number>_ < > > > > _<number>_ < > _<number>_ < > _<number>_ < > _<number>_ ( number printf ( _<string>_ > number ( ( ( + _<number>_ , = ++ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ (
f ( ( j == ( n + _<number>_ ) { { { _<number>_ for ( n j == ( + _<number>_ ) { { _<number>_ for ( n = ( + _<number>_ ) { { < _<number>_ ) || ( n == ( + _<number>_ ) { printf ( _<string>_ - for ( n ; n <= ( + _<number>_ ) { { for ( n == ( + _<number>_ ) { { for ( n = ( + _<number>_ ) { { { _<number>_ for ( n j == ( + _<number>_ ) { { _<number>_ for (
nt i , j , k , n ;
or ( j = _<number>_ ; j <= n - _<number>_ ( number > l j j j j j j j j j j j j j j j j j j j j j j j j j / _<number>_ ; j = = = = = = = = = string | _<number>_ number ( = = = _<number>_ number / = string , = = = = = _<number>_ number = string , = = = = _<number>_ number number - _<number>_ number number number number number number number number number number number - _<number>_ number
f ( i != _<number>_ && i < n ) {
nt n , i , j , k , g ;
or ( j = _<number>_ ; j <= n ; j ++ )
f ( i == _<number>_ || i == n ) j == string ) ,
f ( i == _<number>_ || j == n ) {
f ( j == ( ( n - _<number>_ ) / _<number>_ || j == ( ( _<number>_ * i + _<number>_ ) - ( ( n + _<number>_ ) / _<number>_ ) ) ) ) {
rintf ( _<string>_ , _<char>_ ) ; }
or ( space = ( space - _<number>_ ) / _<number>_ < = number ( s = h ++ < h ( number | _<number>_ ( n & number ++ ( ( number & _<number>_ ( n & k ++ ; j ++ ; ; n ++ )
or ( space = ( n - _<number>_ ) / _<number>_ ; j ( j number } < , ( , h < }
or ( i = _<number>_ ; i < ( n , _<number>_ ) ; n ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) ,
or ( j = _<number>_ ; j <= ( n + _<number>_ ( n number _<number>_ ( k ++ ( printf ( _<string>_ ( printf > _<number>_ ) printf ( _<string>_ = ( { _<number>_ int n ; string ++ ) ) ) n <= _<number>_ ; { { / _<number>_ ; = = ( string + _<number>_ ) for ( = _<number>_ ; = <= ( string + _<number>_ ) for ( = _<number>_ ; = <= ( string + _<number>_ ) for ( = _<number>_ ; = <= ( string + _<number>_ ) for ( = _<number>_ ;
or ( j = i ; j >= m ; j ++ < i ( n string h < { h ++ < {
f ( j == s || j == x ) , }
f ( j == x || j == x ) h ( _<string>_ + number ) < + k ;
or ( j = _<number>_ ; j <= ( n , _<number>_ = _<number>_ ) < i ) ) for ( l + _<number>_ + i ; l <= ; l ++ = _<number>_ )
f ( ( k == _<number>_ ) || ( k == string number n = _<number>_ > n > n > n > n > n > n > n > n > n > n > n ( = _<number>_ ( j }
or ( i = _<number>_ ; i <= j ; i ++ > number ++ ;
f ( i <= ( j + _<number>_ ) / _<number>_ ;
or ( j = i ; j < h ; } ++ ; -
nt i , j , n , k ;
lse for ( j = _<number>_ ; j <= ( n > i > j > j > j > j > , j > j > string > j > string > j > string > j > / _<number>_ > / _<number>_ > { = _<number>_ > j > j > j > j > j > j > j > { = _<number>_ ) string ++ > _<number>_ ) string ++ ) string ++ > _<number>_ ) string ++ > j > _<number>_ > _<number>_ ) string ++ > j ) string ++ > j > _<number>_
lse if ( j == ( ( i + _<number>_ ) - {
f ( n != _<number>_ && i < n ) = _<number>_ number ; j < ; j < ; j < ; j < ; / ; / _<number>_ > ; j < ; /
f ( ( j == _<number>_ ) || ( j == k ) ;
or ( k = _<number>_ ; k <= n - _<number>_ ; string = string } _<number>_ ; + = + _<number>_ ; + _<number>_ ( + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; }
for ( k = i ; k < ( i number _<number>_ = _<number>_ ) + _<number>_ ( printf ; printf ( _<string>_ ; printf ( _<string>_ { - printf ( _<string>_ { printf ( _<string>_ { - i else ;
or ( i = c ; i >= _<number>_ > } > }
or ( i = c ; i >= _<number>_ > } > }
lse printf ( _<string>_ ) ; } }
or ( k = _<number>_ ; k <= i = ( else number > i > space > / number > / ; j ++ > for ( j { j = _<number>_ ) ) h ++ ) h ++ > for ( j { j = _<number>_ ) ) h ++ ) h ++ > for ( j { j = _<number>_ ) ) h ++ ) h ++ > for ( j { j = _<number>_ ) ) h ++ ) h ++ > for ( j { j = _<number>_ ) ) h ++ ) h ++
or ( k = _<number>_ ; k < ; printf ( _<string>_ } _<number>_ ++ ; j ++ ( + _<number>_ ( number }
or ( j = _<number>_ ; j <= string printf ( _<string>_ + i = j , + _<number>_ ) > = l string _<number>_ = _<number>_ > + _<number>_ > n = _<number>_ = + _<number>_ > n string _<number>_ > n = _<number>_ = + _<number>_ > n string _<number>_ > n = + _<number>_ > n = + _<number>_ > n = + _<number>_ > n string _<number>_ > n = + _<number>_ > n = _<number>_ > n string _<number>_ > n = + _<number>_ > n string _<number>_ > n = + _<number>_ > n
lse printf ( _<string>_ ) ;
f ( h % _<number>_ == _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number ) {
f ( ( l == a ) || ( j == & c i i = _<number>_ = _<number>_ = _<number>_ number = _<number>_ = _<number>_ = _<number>_ = } _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
lse { printf ( _<string>_ ) ; =
or ( k = _<number>_ ; k <= > ( i = _<number>_ ( n number _<number>_ ; = ++ ( string ++ ; j ++ > }
or ( k = _<number>_ ; k <= ; if ( i <= ; else else for ( for ( for ( int int int i = _<number>_ ; for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for > _<number>_ ) ( n }
f ( ( j = i - _<number>_ > h ) )
or ( j = ( h - _<number>_ ( b i h -- ) ) < _<number>_ < j < _<number>_ < _<number>_ < string < string < string > _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_
or ( i = _<number>_ ; i <= > > > > > = = = _<number>_ ( } ++ number ) ; printf ( _<string>_ l ++ a ) > string > _<number>_ > string else a > ( string else _<number>_ ) > ( string else _<number>_ ) > ( string else _<number>_ ) > ( string else _<number>_ ) > ( string else _<number>_ ) > ( string else _<number>_ ) > ( string else _<number>_ ( string else a ( string else _<number>_ ( a else a ( string else _<number>_ ( a else a (
pace ( l ) ;
pace ( n ) ;
nt i , j , n ;
f ( j == ( n % _<number>_ number i ) + _<number>_ ) printf ( <unk> ;
f ( j == ( n - _<number>_ ( number - _<number>_ ) { { <START_BUG> == ; n ++ ;
nt n , i , j , k , l , m ;
or ( l = _<number>_ ; l <= { for ( for ( , , i printf ( _<string>_ - }
f ( i > _<number>_ ) {
or ( j = _<number>_ ; j <= h - i - _<number>_ ; j ++ ) {
f ( i != ( ( n int ; ( ( { int printf ( ( , , j ( , / _<number>_ > _<number>_ > _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ >
f ( ( k == _<number>_ ) || > > = = = string number number a j j > { _<number>_ string
f ( ( k == _<number>_ ) || > > { n - _<number>_ ( i == - printf ( _<string>_ , a - _<number>_ > number > , printf ( _<string>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j - _<number>_ > + j > _<number>_ > + j - _<number>_ > + j
or ( j = ( n - + = ) > _<number>_ > { { { + + + i >= _<number>_ ) = -- ; - number ; -
f ( j < ( n + _<number>_ > i ) && ( ( ( ( i == number ( printf ( number == a ( a ( a h a ; j = number ; ;
or ( i = n / _<number>_ > _<number>_ ( printf ( _<string>_ + }
f ( i - j == n + _<number>_ || n == l h _<number>_ number _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number > _<number>_ number number
or ( j = ( n - _<number>_ < i < _<number>_ < _<number>_ ) ) | ++ ( n -- < _<number>_ < = _<number>_ -- < _<number>_ < _<number>_ < + + _<number>_ < _<number>_ ) ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) / _<number>_ ) /
lse if ( ( i != j > ; < ; + < i > j ( i ( i ( i ( n > i > i > i > i > i > _<number>_ > n > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i
f ( ( i + j ) < ; ; = , = number - _<number>_ > number ( number i i ( } i & + _<number>_ ( } i & + + _<number>_ ( } i & + _<number>_ ( } i & + + _<number>_ ( } i & + _<number>_ ( } i & + + + _<number>_ ( } i ( } i & + _<number>_ ( } i & + _<number>_ ( } i & + + _<number>_ ( } i & + _<number>_ ( } i & + + _<number>_ ( } i
f ( ( i + j ) == < < ; number _<string>_ ( number n > number ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i
f ( ( i + j ) == ( + = ( i ( i ( string > j > n > number ( i ( i h number ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i (
nt i = space ;
nt i , n , space ;
or ( k = _<number>_ ; k <= { _<number>_ ) n = + _<number>_ ; i = i int i int i printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf ( _<string>_ } j printf (
nt n , i , j , l , k , l , m ;
f ( i != n ) {
or ( k = i ; k ( number + _<number>_ number _<number>_ > number > _<number>_ ) ; | ++ )
f ( j == ( n + _<number>_ ) / _<number>_ )
nt n , i ;
pace ( ( n + _<number>_ ) for ( { _<number>_ ( i ; + _<number>_ > _<number>_ ( i ; / _<number>_ ( i ; / _<number>_ ( i ; / _<number>_ ( i ; / ++ ( > i ( i ; / ++ ( > <END_BUG> ( i ; string ++ ( > i ( i ; / _<number>_ ( i ; / ++ ( > <START_BUG> ( i ; string ++ ( > i ( i ; / _<number>_ ( i ; / ++ ( > <START_BUG> ( i ; string ++ ( > i (
f ( i != _<number>_ && i > {
f ( j == _<number>_ || i == number = _<number>_ space }
f ( i == _<number>_ || i == string = _<number>_ i = _<number>_ i i i = _<number>_ * i ;
nt i , j , k , printf ( _<string>_ ;
f ( j == n || j == n - i )
or ( j = _<number>_ ; j < j - _<number>_ > number ) n ++ number ) printf ( _<string>_ > string for ( number = _<number>_ > string for ( number = _<number>_ > string for ( number = _<number>_ > string for ( number = _<number>_ > string > string > _<number>_ > string ) ; number ; number ++ > string ++ > string > string > string for ( number = _<number>_ ) ) printf ( _<string>_ > string for ( number = _<number>_ > string for ( number = _<number>_ > string - string
pa ( n / _<number>_ ) ;
nt i , j , h , { printf ( _<string>_ string }
f ( i <= ( ( h } _<number>_ ( i n for ( < _<number>_ ( n string _<number>_ > n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n > printf ( _<string>_ - n
or ( j = _<number>_ ; j <= number ; k = + _<number>_ ) }
tar ( i ) ;
pace ( n - i ) ;
f ( j >= ( n + _<number>_ > number > { _<number>_ > j | } ) && ( = == n for ( = n ) ) )
f ( i == _<number>_ || i == number > i = _<number>_ = _<number>_ ;
pace = l - _<number>_ ;
pace ( n ) ;
or ( j = _<number>_ ; j <= > > > > > > > > > > > > > > > > > > > > > > > > > > > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ( i - _<number>_ ) {
or ( i = _<number>_ ; i <= > > > < < < < < < < < < < < < < < < < < < < < < < < < ( & & ) , ( & & ) , & & ) , n ++ ) , n ) , n ++ ) , n ) , n ) , n ) , n ) , = ; , ++ l > ) if ( l == _<number>_ > ) if ( l <= ) if ( l <= ) if ( l <=
f ( ( i + _<number>_ ) == k < _<number>_ < _<number>_ < k < _<number>_ < k < _<number>_ < k < _<number>_ < k < _<number>_ < k < _<number>_ < k < _<number>_ < k < _<number>_ < i < _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < i < _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_
f ( ( i + _<number>_ ) == i )
or ( i = _<number>_ ; i <= printf ( _<string>_ , { { { _<number>_ l = _<number>_ > / { { { { { { _<number>_ , { _<number>_ i > / _<number>_ > / { _<number>_ i > / _<number>_ > / { _<number>_ i > / _<number>_ > / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ < n < , < { s ++ < , < , , s < , < , < , , s < , < , < ,
pace ( ( n + _<number>_ ) / _<number>_ ) + string > h > / _<number>_ ( < for < / _<number>_ ( h ;
or ( j = _<number>_ ; j <= i = string = _<number>_ = _<number>_ = i = _<number>_ = string n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
f ( ( l != ( h + _<number>_ > number ) || ( i != ( { i number _<number>_ ) string _<number>_ ) ) ) + _<number>_ ) + _<number>_ ; +
nt h , i , l ;
or ( j = _<number>_ ; j <= { number j <= i printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ = printf ( _<string>_ = j , { _<number>_ + = j / _<number>_ ; { = { j + _<number>_ ; i <= { { j + _<number>_ ; n + _<number>_ ; i = { { j + _<number>_ ; n number n }
lse if ( i == ( l / + ) )
f ( j == k )
or ( i = _<number>_ ; i <= int int int = } _<number>_ < _<number>_ < _<number>_ < } ) k k ( }
f ( j <= ( n + _<number>_ ( j h _<number>_ ( number == number - string s s s ( ( number = number - string s s s s s s s ( number == number - string s s s ( + _<number>_ ( + string ( number == number - string s s ( + string s ( number == number - string s s ( j + _<number>_ = ) = - _<number>_ = * ) = _<number>_ = _<number>_ = j else = _<number>_ = _<number>_ = _<number>_ = j else + _<number>_
or ( k = ( i - _<number>_ ; number ( number / f > _<number>_ > + f > + _<number>_ > + f > + _<number>_ > + f > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > ; ; ; ; number ++ ) }
nt i , j , k , , , , , printf ( _<string>_ + j = _<number>_ = _<number>_ = _<number>_ + _<number>_ = _<number>_ + _<number>_ = _<number>_ + _<number>_ = _<number>_ + _<number>_ ) < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < - _<number>_ ) }
f ( j == l )
nt i , j , l , string < _<number>_ < _<number>_ ( ;
f ( ( ( j = ( { _<number>_ ; i <= > > > > > > > > > > > > > > > > > > > > > > > ( i = _<number>_ > i > i > _<number>_ > i > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ > l > i > _<number>_ >
nt n , i , is ;
or ( l = _<number>_ ; l <= > > > > > > > > > > > _<number>_ < string < _<number>_ < n < n } < _<number>_ < n } ) l ++ < ) l ; l ++ < ) l = > > _<number>_ ) l ++ ) l ++ < ) l ; l ++ < ) l = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( space = ( n - = ) <END_BUG> _<number>_ < i < _<number>_ < _<number>_ < _<number>_ < } }
or ( i = _<number>_ ; i <= printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf ( _<string>_ for ( j > _<number>_ < printf (
f ( ( j == _<number>_ ) || ( number == h int i string _<number>_ < j < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf ( _<string>_ < j < printf
or ( j = _<number>_ ; j <= > > > ( + _<number>_ > h number number _<number>_ > else > + _<number>_ > h > h > _<number>_ > h > h > _<number>_ > h > + _<number>_ > h > h > + _<number>_ > h > h > = = _<number>_ > h > = = = = _<number>_ > h > = = = _<number>_ = h - _<number>_ = _<number>_ ) ) string ++ = _<number>_ ) string ) string = _<number>_ ) string string ) string ++ = _<number>_ ) string )
nt h , i , j , } = _<number>_ p p < number < _<number>_ p < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ > number < _<number>_ < _<number>_ < _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ >
or ( space = _<number>_ ; space < , < , ( string + _<number>_ ; / ++ ; ; / ++ ; )
nt i , j , h , , ( + _<number>_ > + _<number>_ ;
nt i , j , h ;
or ( n = _<number>_ ; space <= number - _<number>_ ( i ++ ) ) , for ( number = _<number>_ < _<number>_ < string i printf ( _<string>_ string l > l > }
f ( i > _<number>_ )
f ( ( i + j ) == ; i < ; + < string > j ; + j ( ) = ( j printf ( _<string>_ > i > n string _<number>_ > i > i > i < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < { i < + + + + + + _<number>_ < + _<number>_ < + _<number>_ < number < { i < + + + + + + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < number < { i <
or ( k = i - _<number>_ ; , ( , = _<number>_ - , -- ; ; }
f ( i <= ( n / _<number>_ ) + _<number>_ ) string ) string ; string string ; string string ; string string < ( } <START_BUG> <START_BUG> _<number>_ ) + _<number>_ ) string < _<number>_ < string if ( string <= > > > > > > > > > > > > > for > j if ( string <= > > > > > > > > > > > > for > j if ( string <= > > > > > > > > > > > > for > for > _<number>_ ;
or ( k = _<number>_ ; k <= ( i printf _<number>_ ) , _<number>_ ; int int int int ) i ++ ( + _<number>_ ( = _<number>_ ) , int int int ) }
or ( j = i ; j <= ; k ++ > _<number>_ ( number number _<number>_ > string ) j ++ ; / _<number>_ )
f ( j == ( n + _<number>_ > number > = k + _<number>_ > number ; space ++ < < < < > = string ( n = _<number>_ ) } )
or ( l = _<number>_ ; l <= abs ( ( ( n + _<number>_ ) / _<number>_ ) - n ) ; l ++ ) {
or ( j = _<number>_ ; j <= + + + + _<number>_ < < < n < string < printf ( n ; n ++ ; i ++ ; i ++ ; i ++ ) k = number ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number ++ ) k ++ ) k = number
f ( j == l )
if ( j == ( n + _<number>_ < + _<number>_ for ) ( n ( { _<number>_ ( { _<number>_ ( i + _<number>_ ( + _<number>_ > i > i > _<number>_ > + i ( k ( k printf ( _<string>_ ( k printf ( = k printf ( _<string>_ ( k printf ( <unk> ( k printf _<number>_ ( = - _<number>_ ( = - _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( =
or ( j = j ; j < string for ( n { j ; = ++ ; i ++ )
or ( j = i ; j < n , _<number>_ < ) ; j ++ ( + printf ( _<string>_ printf ( _<string>_ + j + j > n > _<number>_ > j ++ ; {
f ( j == n % _<number>_ ) n ; i = + _<number>_ ; string ( number == } }
or ( j = i ; j <= n string _<number>_ < number { j ++ ) number ++ ) string ++ ; n ; n ++ = _<number>_ ) i ++ = _<number>_ ) string ++ > {
or ( j = _<number>_ ; j < k & number & i if ( i - _<number>_ ; string ++ ; {
f ( j > _<number>_ ) {
f ( i == _<number>_ || j == n ) {
nt n , i , j , k ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
f ( j == ( n - _<number>_ ; number <= i ) int i ;
nt n , i , j ;
or ( line = _<number>_ ; line <= ( n - _<number>_ ) / _<number>_ ; line ++ ) {
or ( j = _<number>_ ; j <= ( i number _<number>_ ; number ++ )
= ( n + _<number>_ ) / _<number>_ ( , > , > , > , ;
f ( j == ( n + _<number>_ < + _<number>_ < string < string ) {
if ( j == ( j - _<number>_ ) else / _<number>_ )
or ( i = _<number>_ ; i <= , , , ( }
or ( k = _<number>_ ; k < = int = = { + number < p else i < { j ++ > _<number>_ ( j - { = _<number>_ n k k ; = ++ ;
lse if ( j == ( n - = < = < = < < < < + + + + + } < _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_ > + _<number>_ > = _<number>_
or ( j = i ; j <= = + _<number>_ ; number ++ ( {
f ( ( i != _<number>_ ) && < string != string ; }
lse if ( ( i + j ) == = = ( ( string j _<number>_ ; / _<number>_ = _<number>_ ; > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ( i ( + + + + + + + + + + + + + + + + } - _<number>_ ) n - _<number>_ ) n ) )
nt n , i , j , m , l , k ;
f ( m == _<number>_ || m == n + _<number>_ ) {
or ( k = h - i ; k < h ; k ++ ; c ++ ( + number ++ ( + number ++ ( ( + number ( printf ( ( - number ) ++ ) ) ++ ) ) ++ ) ) < < {
or ( j = i ; j < h ; j ++ ) j ++ > = _<number>_ < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number < number
f ( j == n / _<number>_ || j == i )
f ( ( j == n / _<number>_ + _<number>_ + i + _<number>_ if + + _<number>_ ) || j number _<number>_ )
f ( j == i || j == + + + + _<number>_ = _<number>_ > i ;
or ( j = ( n - ( i + _<number>_ ) ) ; j >= _<number>_ ; j -- ( { j -- ( {
or ( j = ( n - _<number>_ ( = { _<number>_ > = _<number>_ -- ; ) ) } }
f ( j == ( n + _<number>_ ; space <= + _<number>_ > = _<number>_ ; h ++ ( i == ( n + _<number>_ ( j number _<number>_ ) for ( j == < < < < < < < string ; + _<number>_ ; + + + _<number>_ )
or ( j = i ; j <= n ; printf ( _<string>_ > number ( n ++ ; i ++ ; i ++ > n ( n - i = _<number>_ = _<number>_ ( n - + _<number>_ < string - + _<number>_ < + _<number>_ < string < string < string ( k - i ( ( k ++ ( ( k - i = _<number>_ = _<number>_ = - i = _<number>_ = - _<number>_ = * + i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
f ( i <= l )
lse if ( j < l ) {
nt i , j , h ;
nt i , n , space ;
or ( space = _<number>_ ; space <= n { height <= i string _<number>_ < / _<number>_ < , , j + string ( + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( j a - _<number>_ ( j ++ ( ( { j ++ ( n ( string ++ ( string ++ ( n + _<number>_ ( n } _<number>_ ; n ++ ; / <unk> ; n ++ ; ; ++ n ; ; ++ n ; / <unk> ; / ++ ; / _<number>_ < n } _<number>_ < n
nt i , j , k , h n < / _<number>_ n < printf ( = ( printf ( ( ( ( ( ( _<number>_ ( _<char>_ i ( ( ( | i - _<number>_ ;
nt n , i , j ;
or ( j = _<number>_ ; j <= i ; j ++ )
or ( i = _<number>_ ; i <= c ; i ++ ) {
or ( j = _<number>_ ; j < > > > > > < > ) = < < < < < < < < < < > > > > > > > > > > > > > > > > > > > > > > ( ( n = _<number>_ > + _<number>_ > + _<number>_ > + + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_
or ( i = _<number>_ ; i <= i ; j ++ number ; printf ( _<string>_ { <unk> l i ++ ( ( k h - _<number>_ ( string - string ++ ( + _<number>_ = _<number>_ = ( + _<number>_ = _<number>_ = _<number>_ = * ( i = _<number>_ ) ) ) ) ) ) ; {
or ( k = i ; k < < ) > ( j number _<number>_ > string > i = _<number>_ = k ++ ( < > ) < ) ; i ++ < < < < < < < < < < < < < < < < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
for ( k = i ; k < < < ) > ( height number _<number>_ ( / _<number>_ ( + _<number>_ = _<number>_ ( number > ) < ) < _<number>_ < j < j < h ( + _<number>_ ( { = + _<number>_ ( { number ++ ( h ) ) = _<number>_ = printf ( _<string>_ a ++ = number ) ) ; printf ( _<string>_ a ; printf ( _<string>_ a ; printf ( _<string>_ a ; printf ( _<string>_ a ++ = number = > > > > > > > > >
= ( a + _<number>_ ) / _<number>_ ;
or ( j = _<number>_ ; j <= k ; j = j + _<number>_ = string } _<number>_ = { _<number>_ , { ) printf ( _<string>_ k ) ) ; {
or ( j = _<number>_ ; j <= number ; = ++ ( j ++ ; i ++ ) for ( string i = _<number>_ ( j number _<number>_ ; string <= = = ) string _<number>_ ( + + + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ ( printf ( _<string>_ - + _<number>_ ( printf ( _<string>_ - _<number>_ ( printf ( _<string>_ - + _<number>_ ( printf ( _<string>_ - + _<number>_ ( printf ( _<string>_ - + _<number>_ ( printf ( _<string>_ - + _<number>_ ( printf ( _<string>_ - _<number>_ ( printf
or ( space = ( n space _<number>_ ) & _<number>_ < k ( i printf _<number>_ > i > i > _<number>_ > + _<number>_ > k ) < )
f ( ( j == _<number>_ ) || ( j == i ) ) {
or ( j = _<number>_ ; j <= i ; j = j + _<number>_ ) {
nt f = _<number>_ ;
pace ( ( n + _<number>_ > k > k > + _<number>_ ( , > - _<number>_ > n > n > number < number < number < number > n > n > n > + _<number>_ ) ) <END_BUG> _<number>_ ! + + + + + + + + + + + + + + + + + + + {
or ( i = _<number>_ ; number <= , , , < & & , number < , - _<number>_ < _<number>_ ; = ++ ) | = _<number>_ < } _<number>_
or ( i = _<number>_ ; i <= n ; i ++ ; number ++ ; j ++ ; k ++ ;
or ( j = ( n , > > _<number>_ ( = , -- > _<number>_ > + _<number>_ > + _<number>_ > number > + _<number>_ > number > + _<number>_ > number > + _<number>_ > number > + _<number>_ > number > + _<number>_ > number > + _<number>_ > number > number > + _<number>_ > number > + _<number>_ ( ; - - ; - - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - ; - ;
or ( k = ( i f _<number>_ > _<number>_ > _<number>_ ) ( + i number number ) ; , , , n )
or ( k = _<number>_ ; n < ) ( , for ( , j = _<number>_ = _<number>_ ) > ( is { n & i ; n ++ ; printf ( _<string>_ + - n ; { { { { { { { { { { { { { { { { { { { { { { { { { a j = _<number>_ ; space < ( last , + + + + + + + + + + + + + + + + + + + + + + + + + + +
nt h , x , i number } = _<number>_ = _<number>_ ;
lse s = x ;
or ( j = ( n / + + + + i ( n - + _<number>_ ( + + + + + i ) -- ) ) ; string >= _<number>_ ; for ( for ( | ; | >= _<number>_ ) j -- ( ( a / + _<number>_ ( + _<number>_ ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( k == ( a + _<number>_ ) { int line number space + i == ( i j j j j j j j j j j j j j j = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
ast -- ; }
or ( k = _<number>_ ; { <= > > > > > < < < < < > > > > > > ) }
or ( j = _<number>_ ; + <= number i i i i ) , i ; i = i printf ( _<string>_ / + _<number>_ > } ) ) - _<number>_ number - }
nt i , j , n < _<number>_ ( j string number < _<number>_ ( s { printf ( _<string>_ string k ;
lse if ( ( i + j ( < ; i ( ( > = = _<number>_ , } ) > _<number>_ > k > { = < j > printf ( _<string>_ < = < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < + + _<number>_ ( = _<number>_ ( = - _<number>_ ( = _<number>_ ( = - _<number>_ ( = _<number>_ ( = - = - _<number>_ ( = _<number>_ ( = - _<number>_ (
lse if ( j > _<number>_ && j < i ) {
or ( l = _<number>_ ; int <= > > > > > > > > > > > > > > > ( } , else ) = _<number>_ = _<number>_ = ( } , else ) = _<number>_ = _<number>_ = ( } , else ) ; else i ++ ) i
f ( ( i + j ) == ; i < ; i _<string>_ > i ) printf ( _<string>_ > + = _<number>_ ( = string { h number < < ; n < ; n > < < < < < < < < < < < < < < < < < < i > i > i > i > string { j ++ ) ; string ( _<string>_ ) ; string ( _<string>_ ) ; string ( _<string>_ ) ; string ( _<string>_ ) ; string ( _<string>_ ) ; string ( _<string>_ ) ;
f ( ( i + j ) == ) number - _<number>_ > ; f _<string>_ > i ) > > ; , _<string>_ > i > + _<number>_ ( = _<number>_ > < < < ; = _<string>_ < + _<number>_ < = _<number>_ < string < string < string < string - _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n
f ( j == m ) || < ( f i k == ) || > > string > _<number>_ < string > _<number>_ < _<number>_ < _<number>_ ;
or ( space = ( n k k ; { _<number>_ ; }
canf ( _<string>_ , & k < int number ;
or ( k = i - _<number>_ ( else }
nt n , i , j ;
lse { if ( i <= ( = && i > > > > ) _<number>_ > ) i <= number ( a - _<number>_ ( space - _<number>_ ( space - _<number>_ ( space - _<number>_ ( space - + _<number>_ ( space > ; space <= ; ( space <= ; space <= ; ( space <= ; space <= ; ( j string _<number>_ > ) > _<number>_ > i > i > i > i > i > i > i > i > i > i > i > i > i > i >
or ( k = _<number>_ ; i <= , < , number ( j ++ = _<number>_ > = _<number>_ > int i ) > _<number>_ < string < string < string < + _<number>_ )
or ( l = _<number>_ ; l <= b ; l ++ )
or ( l = _<number>_ ; l <= b > + ( n - for ( int , ) ) > _<number>_ > { _<number>_ = _<number>_ > , { , , , , , , , , , , , = _<number>_ > , , , , , , , , , = _<number>_ > , , , , , , = _<number>_ > , , , , , , = _<number>_ > , , , , , , = _<number>_ > , , , , , , = _<number>_ > , , , , , , = _<number>_
or ( k = i height _<number>_ ; h ( _<number>_ < _<number>_ < - _<number>_ < - _<number>_ ) ; { printf ( _<string>_ ) < { _<number>_ , k i i , k < _<number>_ < j < k = _<number>_ < { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , { _<number>_ , & _<number>_ for ( & & i +
or ( j = _<number>_ ; printf ( _<string>_ & + / _<number>_ number number string string _<number>_ string number number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ number number _<number>_ number number _<number>_ number number _<number>_ ;
f ( ( k = ( k number _<number>_ ( number = _<number>_ ( number = , & { for ; number <= ; number ++ > ; number = i } i + _<number>_ ; }
or ( k = _<number>_ ; k <= h & i & { }
nt i , j , h j } j n n n < _<number>_ n string j < printf ( _<string>_ = H ) < _<number>_ ) < _<number>_ < <unk> < _<number>_ < <unk> < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> string ) < <unk> < _<number>_ < <unk> < <unk> =
f ( j <= ( n , _<number>_ ( + _<number>_ ( + printf ( string == > > number number number printf ( j printf ( j printf number j ( + + + _<number>_ ( j printf ( _<string>_ ( + + _<number>_ ( j printf ( _<string>_ ( + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ ( + + + _<number>_ (
f ( j == ( < _<number>_ > string <END_BUG> _<number>_ ( = i k ) ) || number = < ; j == ; j ++ = ;
lse s = x ;
or ( k = h for ( { j = k p + + + _<number>_ ; j ( p = = number ; j ++ ( if ( if ( if ( - = + = + = + = = _<number>_ ( int ( ( = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ; j > ; j ++ )
or ( k = h - number for ( j string = + = + + _<number>_ < k < + string ; scanf ( scanf ( _<string>_ i ; a ++ > number ( ( ( number & - = h - = string printf ( _<string>_ , int + = + = + = + = + = + = + _<number>_ ( int ( int ( ( + = + = _<number>_ , printf ( _<string>_ , + = + = + = + = + = + = = H ++ ( int ( ( =
nt l , i , , i {
nt i , j , h i i number = _<number>_ ;
f ( ! ( i == _<number>_ || string == x ) ) +
or ( j = i ; j >= _<number>_ ; j -- ) {
nt k ;
or ( k = _<number>_ ; i ; i ++ ) h ++ ) h ++ ) string ++ ) ,
or ( l = _<number>_ ; , <= - k > k > k > h ; , ++ )
or ( l = _<number>_ ; k <= h > string > string > string > _<number>_ ; k ++ )
f ( j <= n / _<number>_ && number < + + + + k = _<number>_ )
double j ;
f ( ( i == _<number>_ ( string == , ) ) || ( string == printf ( for ( for ( for ( for ( _<number>_ ) ) ) ) ) ) >= _<number>_ ) <START_BUG> = ( h == _<number>_ ) || ( h == i ) ) main ( ) < if ( ( h == _<number>_ ) || ( printf == i ) ) main ( h == i ) ; main ( ) main ( h == _<number>_ ) || ( h == i ) ;
or ( j = spc ; n <= j ; printf ( _<string>_ i ; + + , <= i ) int = b ++ ) k = b ++ ) }
nt i , j , n ;
or ( k = _<number>_ ; + < ) ; number ++ ( number for ( = _<number>_ ( int | ( i l + _<number>_ ( i l i ) } ) ) ++ ) printf ( _<string>_ , + string ( h k _<number>_ ( h k { string ++ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( h k _<number>_ ( n | _<number>_ ( n | _<number>_
or ( i = _<number>_ ; string <= int ( if ( int k > - _<number>_ ( int ( ( for _<number>_ ( for - _<number>_ ( <END_BUG> k - _<number>_ ( & string ( ( & & ) + _<number>_ ( r & i ( r - - _<number>_ ( r & i ( r - - _<number>_ ( r - - _<number>_ ( r - - _<number>_ ( r - - _<number>_ ( r - i ( r ++ ( ( r & ( - _<number>_ ( r & , ++ ( ( { , , ,
f ( ( j == n / _<number>_ ) || ( j == n / _<number>_ - i + _<number>_ = _<number>_ number number number = _<number>_ number number number _<number>_ number number number number number = _<number>_ number number number number = _<number>_ number number number number = _<number>_ number number number number _<number>_ number number number number number number = _<number>_ number number number _<number>_ number number number number number number number number number number = _<number>_ number number number _<number>_ number number number number number number number = _<number>_ number number number _<number>_ number number number number
or ( i = _<number>_ ; i <= n / _<number>_ ; i ++ ) {
lse if ( j == i - ( ( n - _<number>_ ) / _<number>_ ) ) {
lse if ( ( i + j ) == ( number = a = _<number>_ ( i = _<number>_ ( ] ( ] = _<number>_ ( _<number>_ ( i = ] ( ] = _<number>_ ( i = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] ( ] = _<number>_ ( ] ( ] (
or ( k = _<number>_ ; k <= i - _<number>_ < , { }
nt h , i , x , i j ;
c , j , k , l , m ;
or ( k = _<number>_ ; k <= ( j int + + + [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ = ] , ( n + i + _<number>_ > i > int k > int k ) = _<number>_ ) number < _<number>_ < ) , k ++ ) number number number number number number < _<number>_ < , [ ,
nt j , k ;
f ( j == s || j == + n > j > j > + _<number>_ ) < d < [ [ + + _<number>_ - + _<number>_ - + _<number>_ - + _<number>_ - j - _<number>_ - + _<number>_ - j - _<number>_ - + j - j - j { / [ j n -- ] < a ) / number < [ j n + _<number>_ + j + _<number>_ int a + _<number>_ < [ _<number>_ = _<number>_ i - _<number>_ string printf ( _<string>_ ) ;
nt h , i , j , s ;
f ( j == n - _<number>_ || + [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ = string - _<number>_ printf ( > i - _<number>_ n n - a n n - a n n - a + ] + ] + _<number>_ + _<number>_ + ] i ) * )
f ( ! ( i == _<number>_ || + i == n > n ) ) ,
tar ( n - i ) ; }
nt n , i , j , k n ) ( = _<number>_ number string ( s + } s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s ;
f ( i < n / _<number>_ ) n - _<number>_ ) =
or ( k = _<number>_ ; k < < > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < > > > > > > > > > > > > > > > > > > > > > > > > >
f ( i <= ( n + _<number>_ ) space _<number>_ ( [ + _<number>_ ; string ++ ) i ++ ) i ++ ) i = _<number>_ ; n <= ( + _<number>_ ) for ( j <= ( + _<number>_ ) for ( j <= ( + _<number>_ ) for ( / _<number>_ <= ; string <= [ [ [ [ [ [ [ = ] b b - _<number>_ ( = _<number>_ s s int end s s s s ;
or ( k = _<number>_ ; k <= < > ) i <= ) n <= ; / ++ ( i - for ( / _<number>_ ( / _<number>_ ( + _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ( / _<number>_ ; string ++ number number ( ] - string ( ( ( _<number>_ s s - = > ( ( _<number>_ s - k ++ ; string ++ ; string { int string ++ = _<number>_ = _<number>_ = ;
or ( j = _<number>_ ; j <= ( ] k + _<number>_ > + _<number>_ > [ n { _<number>_ > _<number>_ > [ ] { ; [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ ] ] ] ++ {
or ( int i = _<number>_ ; i < n ; i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++
lse printf ( _<string>_ , b [ t ] ) > > > > number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) i = <unk> ;
lse printf ( _<string>_ , b [ t ( number ) [ for ( ] number number number number number number number z number _<number>_ number number number number - _<number>_ number number number number number number number number number number number number number number number number number number number number number number ) > _<number>_ ) > > > _<number>_ > _<number>_ > ] > float if ( else if ( else if ( ( start , ] ) i ;
f ( bid [ i ] <= min number ) n - _<number>_ ; n <= float float float float float ) n ; n <= float ) n - if ( = = = = = = = = = = _<number>_ ) n = = _<number>_ ; n <= float float float , = _<number>_ < , if ) {
tatic int count = _<number>_ ;
rintf ( _<string>_ , _<number>_ * ( a [ n & _<number>_ j j ] string ) [ / / _<number>_ printf ( _<string>_ = _<number>_ main ; j = ) < < _<number>_ < / _<number>_ < / _<number>_ ( / _<number>_ = _<number>_ ( ) ( / _<number>_ = _<number>_ = _<number>_ ( / _<number>_ ( ) ( / _<number>_ ( / _<number>_ ( / _<number>_ ( ) ( / _<number>_ ( / _<number>_ ( / _<number>_ ( ) ( / _<number>_ ( / _<number>_ ( / _<number>_ ( ) ( / _<number>_ ( / _<number>_ ( /
ax [ start ] = t ;
rintf ( _<string>_ , z / _<number>_ ) i > string > string > _<number>_ + _<number>_ + string ( string return _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + i + _<number>_ + n + _<number>_ + int {
loat k = a [ n ] ;
rintf ( _<string>_ , s [ m ] for [ int int int > _<number>_ ] ) t t - _<number>_ ;
rintf ( _<string>_ , a [ ( n ( = ( = = _<number>_ ) { > _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ) ) ) ) > = _<number>_ > = _<number>_ ) ) ) ) ) ) ) ) ) <
rintf ( _<string>_ , a [ n / _<number>_ ( int + + _<number>_ = _<number>_ = _<number>_ = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = _<number>_ = ] = _<number>_ = ] = _<number>_ = [ number ] _<number>_ ] ] ) i ] i ] i i i i i i i > _<number>_ a > _<number>_ a > ) > + _<number>_ > > _<number>_ > _<number>_ a > ) > end > end > end
emp = a [ j ] ;
edian = ( a [ c number n n - end ] , a ] , j , j , } _<number>_ a a , j , j a a [ _<number>_ ] a ;
ax = i ; }
rintf ( _<string>_ , a [ number = a num ] ( ] ( ) ( ) > ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( = - = ++ < _<number>_ ( ] } _<number>_ ( ] int ) int ] ( ) int ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
[ i ] = t < % < long < sort < sort < sort < sort < <unk> < <unk> ; idx > <unk> ; idx > <unk> ; / _<number>_ ; / _<number>_ ; / _<number>_ ; / _<number>_ ; / _<number>_ ; / _<number>_ ; end = ind ; end n < & & & & & & & & med ( + + a , + _<number>_ = _<number>_ = a , [ int i i i i i i i i i i i i i = _<number>_ = _<number>_ = a , a
f ( s == n - _<number>_ i i i number number - _<number>_ number a + _<number>_ number _<number>_ ( b == int n - _<number>_ ) ) string ; +
ed = ( bid [ ( int if _<number>_ < _<number>_ i } } - end ) } _<number>_ < ( return int int ) int + _<number>_ < _<number>_ ) + end > ( ( n ind _<number>_ ) index + _<number>_ ) index index index ;
loat temp ;
[ i ] = a ] ; a ] < m number for = start number : int start number a number number number number ;
edian = max / _<number>_ ; o = { & ] < i % _<number>_ ; + _<number>_ ; + else ; end = { else else else o / _<number>_ ; end = { / _<number>_ ; end = { / _<number>_ ; end = { / _<number>_ ; }
or ( i = _<number>_ ; i i i & k < k string _<number>_ < a ++ ) {
nt start , max ;
nt n ;
rray [ j + _<number>_ ] < int int for ) < j < j < j < j < { string < k < k < k < k < c < k < k ; + + _<number>_ ; + m ; + + _<number>_ ; + m ; + ] = if ( num ] n ] n { if ( + + _<number>_ n } } }
f ( array [ j ] int n = = = string a a a a a a a a , string i i i ( string = _<number>_ [ n ) ) {
= num [ j - _<number>_ [ n [ n return _<number>_ [ n [ n return _<number>_ [ i ] end ] ] ] , n , n > _<number>_ > number > _<number>_ ) > + _<number>_ > number > _<number>_ > number ) > + _<number>_ ) ) {
f ( med % _<number>_ == _<number>_ ( , , = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = - _<number>_ = - _<number>_ ) ) ) > _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ >
= ( ( a [ c ] + o int if ( x ) ) * _<number>_ ;
canf ( _<string>_ , & o [ i ] ) ; }
or ( int i = _<number>_ ; = ; = ; start ; start ++ > _<number>_ > = _<number>_ > [ [ [ [ [ [ [ [ [ + _<number>_ n , a , a ) end , a ) end , a ) end , a ) }
rintf ( _<string>_ , T ) ( ] > med ( num i return _<number>_ ( num return _<number>_ ( num * number = _<number>_ = _<number>_ = _<number>_ = - _<number>_ = < _<number>_ , % return _<number>_ , % , i , i , i , i , i , int end < _<number>_ < _<number>_ < int n < if ( swap temp _<number>_ < _<number>_ ( i ( i & i ( i & _<number>_ ( i & i ( i & i ( i & i ( i & i ( i & i (
f ( swap % _<number>_ == _<number>_ )
nt maxindex ( int start , [ n n n , ) end , [ i , i , i , i = _<number>_ = _<number>_ = _<number>_ ;
nt array [ _<number>_ ] ;
= ( a [ n { _<number>_ ] n - number n + _<number>_ start - _<number>_ [ = ] [ _<number>_ = _<number>_ = _<number>_ = a ] = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) * ( [ a max _<number>_ number number number _<number>_ number number _<number>_ number ) ;
rintf ( _<string>_ , a [ number number ] < _<number>_ int array [ array ] int if > array n [ , = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ [ i [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ [ number [ number [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [
rintf ( _<string>_ , a [ ( d [ _<number>_ ] + _<number>_ ] < for a < max < array int array n a n a n a n number number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) number = _<number>_ number number < ] < c < _<number>_ < < ] < ] < c < _<number>_ < < < ] < ] < ] < ] < [ ( ] = _<number>_ ) max
emp = a [ k + _<number>_ int - _<number>_ n ;
= ( a [ n for number for ( a [ n } ] + a [ ( n start _<number>_ > _<number>_ > _<number>_ [ = = _<number>_ n n > _<number>_ , med , med , = _<number>_ , med , med , = _<number>_ , med , med ) } ) * _<number>_ < return _<number>_ < return _<number>_ < return _<number>_ < _<number>_ < _<number>_ ( number = number = number , number = number , number = number , number = number = number , number = number , number = number , number
lse if ( n / _<number>_ == _<number>_ )
nt n , a [ _<number>_ [ _<number>_ n ] i i i i i i i i i i j j j j j j j number number : if ( a , a , a , a , a , a , if = _<number>_ ( a = _<number>_ n n n i i i i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
f ( a [ i ] i i i ( n > { _<number>_ ;
[ q ] = idx * max ; { { { if ( ] == <unk> > = x > <unk> > <unk> number ) < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk>
f ( ( z % _<number>_ == _<number>_ = _<number>_ , string [ _<number>_ < _<number>_ [ i ] = _<number>_ = a [ i ] = _<number>_ = a [ i ] = a [ i ] = _<number>_ = a [ i ] = _<number>_ = a [ i ] = _<number>_ = [ _<number>_ num = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
f ( x % _<number>_ != _<number>_ = _<number>_ , {
nt med ;
emp = a [ start ] ;
ed = <unk> ( num , n ) ;
emp = x [ j ] ;
eturn mean [ n / _<number>_ ] ; } }
f ( a [ d ] ( ] ; ( ( [ + + number ) ) = int int [ number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) < int count < _<number>_ < _<number>_ ) }
rintf ( _<string>_ , a [ ( start ) number _<number>_ i ) , index , & i number > int int int int int int int ) < count < _<number>_ < _<number>_ < int int int int int int int j + = _<number>_ + = = { _<number>_ + = , _<number>_ i - int [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ a i i n i i i i i i i i i i i i i i i i i i i
nt bid [ arrange ] ;
f ( a [ j ] <= start = z ) + for ( [ sort int sort ( [ + + _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i ] ) ; start = < < < < < < < < < < < < < < < < < < < < < < < ] ( ] ( ] <= ] = ] ( ] ( ] - ] <= ] ( ] ( ] ( ]
f ( max < a [ ] > temp < idx )
nt max = _<number>_ ;
nt n , i , j { temp < } int z ;
id [ _<number>_ ] = bid number _<number>_ < <unk> < _<number>_ ;
rintf ( _<string>_ , a [ ( temp temp if ( ] number number ) ) i > a > number , number , = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ a a a int temp ) ) ) ) ) ) int { find ( _<number>_ + = _<number>_ ) n - _<number>_ ) ) start
[ j ] = temp ; , = & m ( ] number a [ { sort [ , ] = } + _<number>_ ) > } + _<number>_ > ] > } + _<number>_ > } + _<number>_ > _<number>_ ) size + _<number>_ > } + _<number>_ > ] > {
emp = a [ ind ] ;
f ( a == _<number>_ ) for ( / _<number>_ for ( n == _<number>_ ( x int }
ort ( a - _<number>_ , bid = > ] a ) ; idx = [ number long long x ] < [ - _<number>_ a < _<number>_ < z < _<number>_ < z < _<number>_ < z < _<number>_ < z < _<number>_ < z < _<number>_ ( } int }
rintf ( _<string>_ , k / _<number>_ int - / / , - _<number>_ int - - - _<number>_ int - - - num ( [ [ _<number>_ i string _<number>_ i ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ N i string _<number>_ i i string _<number>_ i i string _<number>_ i i i string _<number>_ i i i / _<number>_ i i ( [ [ [ scanf j i string
rintf ( _<string>_ , a [ ( n - _<number>_ ) + _<number>_ ] number number number number number number number number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
= a [ N ] ( = n string _<number>_ > _<number>_ number start ) > ] ( ] i idx a < _<number>_ i i i i i i i i i i i i i i i i i i i i of _<number>_ i i i i i i i i )
emp [ k ] = arr ) - }
nt n , arr [ _<number>_ ] ;
rintf ( _<string>_ , arr [ n i = _<number>_ ] number _<number>_ n i m m ( i - _<number>_ ( i j for ( + _<number>_ ( i j for ( i for _<number>_ ( i for number for _<number>_ ( i for ( i for number int int int > > count if ( _<string>_ ; _<string>_ / [ = arr arr arr arr arr arr arr arr arr arr arr arr arr arr n n n n n n n n n n n n n n n n n n n n n n n
ort ( start + _<number>_ , + + + > > number number ) ; {
ort ( start + _<number>_ , f > ( [ [ + _<number>_ = - _<number>_ [ end a a ( < < + _<number>_ , arr ( < < + _<number>_ , arr ( < < + _<number>_ , arr ( < < + _<number>_ , arr ( ] > , ; z = scanf number ; z = ] / _<number>_ > } ) ; z = number / _<number>_ > } ) < < < _<number>_ < % _<number>_ < % _<number>_ < % _<number>_ < % _<number>_ < % i < j ) < < <
nt n , i ;
edian = a [ n / _<number>_ ] + [ int int index ( num ( arr ) [ + _<number>_ ) ) > }
= j ; }
nt bid = bid [ i ] ;
= ( a [ n / _<number>_ ] = [ > = _<number>_ ] n - _<number>_ = _<number>_ + > , = _<number>_ , = n - _<number>_ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
rintf ( _<string>_ , x ) ; }
nt t = ( n / _<number>_ ) + _<number>_ ;
rintf ( _<string>_ , sum / _<number>_ ) ; j = _<number>_ > _<number>_ ) i = j % _<number>_ > _<number>_ > _<number>_ ( [ } ) ) ; { if ( _<string>_ sel _<number>_ ( return _<number>_ ( return - _<number>_ ( i ( [ start = _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( return _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i sel _<number>_ ( i ( [ start = _<number>_
= ( a [ ( n - _<number>_ ) } ] start [ ] string _<number>_ , int ] ( ] ( num = ] ( ] printf ( A number N - _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
rintf ( _<string>_ , a [ index ] ) ; }
or ( i = _<number>_ ; i < n ; i ++ ) }
or ( j = _<number>_ ; j <= n - _<number>_ ; j ++ i i ) +
f ( num [ j - _<number>_ ] > num [ j ] ) {
= a [ n / _<number>_ ] + a [ ( n - _<number>_ ) / _<number>_ ] ;
rintf ( _<string>_ , ( a [ n / _<number>_ ] + a [ ( a [ n / _<number>_ ) / _<number>_ ] ) / _<number>_ ] ) ;
ed = num [ ( n + _<number>_ ) / _<number>_ + _<number>_ [ num [ ] num num ) > j = _<number>_ x < _<number>_ ;
[ j - _<number>_ ] = num [ j ] i ;
um [ j ] = t ; } }
ort ( a , _<number>_ , n - _<number>_ ) ;
f ( n % _<number>_ != _<number>_ ) {
f ( n % _<number>_ != _<number>_ ) {
f ( a [ i ] > int [ = ( + _<number>_ = _<number>_ ) > ] ) number = n ( n [ > n n - > n ] ) ; med = j < > [ > - > [ > - > [ > [ > n n n n n n n n n n n n n n n n n n n n ) i i n n < + _<number>_ < + > + > + > + > + > + > + > + > + > + >
ax = a [ i ] ; for ( , = n - > ; + } }
unk> ( a , start + _<number>_ , n ) ; { min = scanf ( A > j i i { { { sorted _<number>_ , <unk> ( < < _<number>_ > N ) ; , , A ] > <unk> ( number > i int i int string ) ; , , number < _<number>_ ) < < < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < j ) < < < < < _<number>_ < j ) < < < < _<number>_ < j ) < < < < _<number>_ < j ) < <
nt a [ _<number>_ ] , n , i ;
rintf ( _<string>_ , sum / _<number>_ ) ; }
ong int sum = _<number>_ ;
rintf ( _<string>_ , a [ i ) ) i a ;
rintf ( _<string>_ , a [ i ) < int < number ;
= ar [ n / _<number>_ ] ; }
rintf ( _<string>_ , ( a + return _<number>_ ( j if _<number>_ ;
rintf ( _<string>_ , bid [ + , number ] ] ] a < > > end < ( ( number , ] < end < return < ] + ; } }
f ( n % _<number>_ == _<number>_ ) {
nt sort ( float a [ i j ] ] [ i n temp a - _<number>_ number number number number _<number>_ number number number - _<number>_ number number number - _<number>_ ar ar j ar j ar j ar j ar j ar j ar j ar j ar j ar j ar j ar j number _<number>_ number - sort ( return ] number ] number _<number>_ number = _<number>_ number number - sort ( ] [ sort n / _<number>_ n number number number - _<number>_ number number number ) number _<number>_ number number number ) ;
f ( bids [ i ] > a [ = a a ( ] ( start ) ( ] ( [ > > _<number>_ ( [ > > _<number>_ - > ) - > > j ) [ > > - > _<number>_ ( + + > ) ) < med = _<number>_ < > med = _<number>_ < _<number>_ ) }
rintf ( _<string>_ , bids [ > a i i [ > = _<number>_ = > _<number>_ [ > [ > [ > [ > [ > ] ] = i ] = i [ ; j [ ; [ ; j [ ; [ ; j [ ; [ ; j [ ; [ ; j [ ; [ ; k [ > n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n = _<number>_ < > > >
= bid [ i ] ;
emp = k ;
lse { } }
ong int sum = _<number>_ ;
eturn ( a [ n / _<number>_ [ ar j string _<number>_ } } }
nt n , k , k ;
canf ( _<string>_ , & a [ ( number i a ) ) < for ( string num - _<number>_ ) < for ( number num - _<number>_ < ( + + ( _<number>_ - ( [ ( ( + ( _<number>_ - ( ( + ( _<number>_ ( ( + ( _<number>_ - ( ( + ) ) [ ) ) i a > _<number>_ > [ ( [ ( [ ( [ ( [ ( ( [ ( ( [ ( ( [ ( ( [ ( ( [ ( ( [ ( ( [ ( ( [
rintf ( _<string>_ , median ) ; j = = _<number>_ < , return = _<number>_ < ] < printf ( _<string>_ j ) < med < n ) <
ergesort ( a , _<number>_ , n ) ;
[ j ] = t ; j = if ( < [ , = for ( { = = = = = = = = i , i , if ( a i start i ) < end < end < end < end < end < end < end < end < end < end ( a i int } > + _<number>_ > end > i > i > i > i > i > i > i > i > N > N > N > A ] > C > A ] > C >
rintf ( _<string>_ , ( a ] ) i { + _<number>_ ( i t num ( a long a long a ) long _<number>_ ) ) > for ( ( { b = { { _<number>_ , { _<number>_ ] = ) ( { b = { = { _<number>_ , { ( { = { _<string>_ + ( i index _<number>_ > i > ] > i > _<number>_ > ] > _<number>_ > ] > _<number>_ > ] > _<number>_ > ] > _<number>_ > ] > _<number>_ > if ) > ) n = i (
f ( ar [ n / _<number>_ - _<number>_ ] + ar = , number = _<number>_ ( number n n ( number = _<number>_ ( number = _<number>_ ( number ( > N k _<number>_ [ > _<number>_ [ > _<number>_ ) ) ) else ) else - _<number>_ ) ) }
[ start ] = t < if ;
= ( a [ ( n / _<number>_ ) - _<number>_ + a [ < < < < < < < < = _<number>_ > _<number>_ [ < n > _<number>_ [ < [ < _<number>_ [ < [ < n [ < [ < _<number>_ [ n [ n [ n [ n [ n i i i i number _<number>_ i i i i i i number _<number>_ i i i i i number _<number>_ i i + _<number>_ i + _<number>_ i + _<number>_ + _<number>_ i + _<number>_ + _<number>_ i + _<number>_ + _<number>_
rintf ( _<string>_ , a [ i ] ) ; }
rintf ( _<string>_ , med ) ; }
rintf ( _<string>_ , med ) > , ( , number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ) ) ) ) ) ) ) ) ) ) ) ) ) < ] ) < start < start < start < start < start < start < start < start < start < start < start < start < start
nt a [ _<number>_ ] ;
ed = ( a [ n { _<number>_ + _<number>_ a + a [ int int / / _<number>_ { ( } n / - _<number>_ int _<number>_ i a = _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar ar
nt temp = _<number>_ ;
edian = ar [ ( n , _<number>_ i ] number i = _<number>_ = _<number>_ ( = ar ] / ar ] ( = = _<number>_ ( = _<number>_ ( i sort _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = * n = _<number>_ = _<number>_ = _<number>_ = * [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
nt start = _<number>_ , end = n ;
wap ( a , start , <unk> ( a , i , int int ] ] ] ] ] ] ] ] ] ] ;
= ( a [ ( ] & = , _<number>_ ( + _<number>_ ) / = _<number>_ ) + _<number>_ ) < _<number>_ < _<number>_ ( int int > printf ( _<string>_ n n > ) , [ [ + _<number>_ a a > _<number>_ > return ) _<number>_ ( int int > printf )
f ( x [ i ] < x ) int a ) int / _<number>_ < a ) int for ( a ) int a ) int / _<number>_ < = _<number>_ ;
unk> ( a , _<number>_ , n ) ;
[ x ] = a [ index ] < & y < n ;
nt k , n ;
f ( n != _<number>_ && n != _<number>_ ( scanf ( N = _<number>_ = _<number>_ = _<number>_ ( scanf ( N ;
eturn min ( a , start , end ) ;
f ( ar [ ( n - _<number>_ ) / _<number>_ ] % _<number>_ == _<number>_ || ar [ ( n + _<number>_ ) / _<number>_ ] == _<number>_ )
rintf ( _<string>_ , median ) ; } }
= ( a [ ( ( n int _<number>_ ! _<number>_ ( n { ) i ( + i ( i = _<number>_ = _<number>_ ( ] ( = = n ;
or ( int d = _<number>_ ; d < = , n < n < int , , , [ i )
rintf ( _<string>_ , ( a [ n int _<number>_ = _<number>_ = _<number>_ ) { j i j i j int ( a [ n / _<number>_ n n j j j j temp _<number>_ i < _<number>_ n n n n n a > _<number>_ > _<number>_ ] > _<number>_ > + _<number>_ > _<number>_ > _<number>_ > , ( ] ) int = ] ( ] a ) int = = ] ( ] a ) int = = ] ( ] ) int = ] ( ] a ) int = = ] ( ] )
f ( rank == n / _<number>_ ) ] == < _<number>_ ) +
ed = ( arr [ n / _<number>_ [ int [ i ] } <START_BUG> _<number>_ <START_BUG> _<number>_ i i i string _<number>_ i i number number _<number>_ - _<number>_ i = _<number>_ = _<number>_ [ n [ n [ + _<number>_ = _<number>_ number ] ] ) { x = ( a [ i { _<number>_ ] int a [ i { }
ed = ( arr [ n / _<number>_ arr + i j { { { { }
rintf ( _<string>_ , ( a [ n / _<number>_ ] + a [ n / _<number>_ + _<number>_ ] ) / _<number>_ ) ;
rintf ( _<string>_ , a [ n / _<number>_ ] + n ] i ) } _<number>_ < j < median < median < _<number>_ ( median ] ) < j < median < _<number>_ ( median ] ) < j < median < _<number>_ ( median ] ) < j < _<number>_ ( median ] ) < j < median < _<number>_ ( median ] ) < _<number>_ < _<number>_ ( median ] ) < j < median ( & n ] ) < j ( & n ) ] ) < j < _<number>_ < _<number>_ < _<number>_
rintf ( _<string>_ , a [ ( n - _<number>_ ) end _<number>_ [ + _<number>_ [ + ] [ _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ i ] ] ] ] ] ( i = _<number>_ ( i ( i = _<number>_ ( i ( i - _<number>_ ( i ( i = _<number>_ ( i ( i = _<number>_ ( i ( i - _<number>_ = _<number>_ ( i ( i = _<number>_ = _<number>_ ( i ( i - _<number>_ = _<number>_ ( i ( i = _<number>_ = _<number>_
nt n , x = _<number>_ , y = _<number>_ , / / _<number>_ > [ _<number>_ = _<number>_ = _<number>_ i = _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_
= j ; }
f ( rank == ( n - _<number>_ ; / _<number>_ ( < number - _<number>_ ( number start _<number>_ ) string _<number>_ ) ) i = { _<number>_ int float string == ;
loat m = sort ( n , _<number>_ ) < _<number>_ ;
canf ( _<string>_ , & ary [ i ] ( int ) n = _<number>_ = ] = int int i i i i i i i i i i i n n n n a int }
rintf ( _<string>_ , ( sum / _<number>_ = int int index i i i i n n n n n n n a < _<number>_ a a < _<number>_ a > int m ( x string _<number>_ ( end }
rintf ( _<string>_ , a [ n / _<number>_ ] ) ( int i i i i i n n n n n n n n n n n n n a < _<number>_ > n ( x string _<number>_ ( x string _<number>_ a a int string a int string a int n a int end a int end a int end a int else if ( _<string>_ start a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
or ( j = i + _<number>_ ; j < n , { { { { { { { { { temp ++ > ) j ++ > ) j ++ > j > int printf ( min ] ) < number < , , min < _<number>_ idx min < , min = _<number>_ idx < _<number>_ idx
f ( bid [ j ] > bid = < = number number = _<number>_ = _<number>_ k - )
ong long int z = a [ n / _<number>_ a [ } i scanf ( N end _<number>_ int ] int number i > j i i i i i i i i scanf ( N a ] ) string _<number>_ ) ;
rintf ( _<string>_ , z / _<number>_ ) ;
rintf ( _<string>_ , ( s [ m n i i , number a a a i & n = _<number>_ = _<number>_ i i end end end - _<number>_ i i i i n n n n n a < ) ;
[ start ] = temp ;
f ( arr [ j ] > arr ] a [ number a ( / _<number>_ [ ( ( = - ( ( = - } _<number>_ [ ( ( = - ( ( = - } _<number>_ - _<number>_ i [ } i i i i i i i i i i i = _<number>_ = - _<number>_ ] [ } ] a { {
f ( a [ i ] > a [ min < return int printf ( _<string>_ n n = _<number>_ = _<number>_ = - ] = _<number>_ = [ + ] = [ + ] = [ + ] = [ + ] = [ + ] = [ + ] = [ + ] number [ + ] number [ + ] number [ + ] number [ + ] number [ + ] number [ + ] > [ + ] number _<number>_ number * [ + + _<number>_ a > end number _<number>_ number number _<number>_ number
ouble a [ _<number>_ ] ;
rintf ( _<string>_ , ( a [ j { _<number>_ ] [ = [ ) ) { _<number>_ ] , ) > ) > _<number>_ > i > + _<number>_ > + ( i - _<number>_ long i long = _<number>_ long long long long > + _<number>_ long long long && )
f ( swap % _<number>_ != _<number>_ )
rintf ( _<string>_ , ar [ _<number>_ ] = - _<number>_ number number number number number ) < _<number>_ < [ _<number>_ = _<number>_ = _<number>_ = _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ ) < c < [ _<number>_ = = _<number>_ = _<number>_ = _<number>_ > ] > ] > ] > i > ] ( ] [ _<number>_ = _<number>_ ( ] [ _<number>_ = _<number>_ ( ] ( ] [ _<number>_ = _<number>_ ( ] [ _<number>_ = _<number>_ ( ] ( ] [
rintf ( _<string>_ , ar [ _<number>_ ] number number number number number number number number ( [ _<number>_ i i ( [ _<number>_ i i i ( [ _<number>_ i i i ( [ _<number>_ i i i ( [ _<number>_ i i i i i i i i i i i i i ( [ _<number>_ i i i ( [ _<number>_ i i i ( [ _<number>_ i i i ( [ _<number>_ i i i ( [ _<number>_ i i i i i i i i i i i i ( [ _<number>_ i i i
nt mean ( int m , int a [ ] ) {
nt x = a [ ( n - _<number>_ ) / _<number>_ i i i i ar > _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ ( n for _<number>_ > ] > , {
nt x = a [ ( n - _<number>_ number number ) } < _<number>_ ] , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ , return _<number>_ > }
ort ( a , _<number>_ , n - _<number>_ > _<number>_ > ( / _<number>_ ) ) < > _<number>_ < / / _<number>_ < / _<number>_ < / _<number>_ < > _<number>_ ) < > _<number>_ < / / _<number>_ < / / _<number>_ < / / _<number>_ < / / _<number>_ < o int j ;
canf ( _<string>_ , & bid [ i ] ( ] ( ] > x > return string ) ) < string = + _<number>_ ) < [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ i = { _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i ; }
ong long array [ _<number>_ ] ;
lse median = o [ c ] * _<number>_ ;
= ( a [ c ] + o ] ] ) * _<number>_ ;
rintf ( _<string>_ , bids [ i ] ] ] ] ] ] ar > { + ( int a [ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( + _<number>_ a ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( > - > ++ = _<number>_ = > > a ) ) n n = [ > number number > > > > > > > > > > > > > > > > > > > >
ort ( a , n ) ;
f ( a [ i ] > a [ max number ( a ] ( a [ i number ( a [ i number number ( a [ i number number ( a [ i number number ( a [ i number number number number number number number number number number number number number , ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
nt a [ _<number>_ ] ;
or ( int i = _<number>_ ; i < n int }
rintf ( _<string>_ , arr [ n ] ( + _<number>_ number ] ) / _<number>_ + i + _<number>_ + if ( _<string>_ <END_BUG> _<number>_ != _<number>_ + n + _<number>_ + i + _<number>_ + _<number>_ + n + _<number>_ + _<number>_ + n + _<number>_ + i + _<number>_ + _<number>_ long median long ;
rintf ( _<string>_ , ( arr [ k <START_BUG> _<number>_ ] = ] = ] = a [ med ] ) if ( _<string>_ > ( a [ med <START_BUG> _<number>_ ] = a [ med ] ) if ( _<string>_ > ( a [ med <START_BUG> _<number>_ ] = a [ med ] number if ) ( i if ) < + _<number>_ < + _<number>_ ) < < ( ] [ printf ( _<string>_ string ( ] [ printf <START_BUG> <START_BUG> <START_BUG> _<number>_ ar ar [ printf ( _<string>_ { [ string return _<number>_ number , string a
or ( int i = _<number>_ ; i <= end ; i ++ ( if ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
loat c = a [ N ] ;
= x / _<number>_ ; }
= ( o [ c ] + o ] ] ) * _<number>_ ;
rr [ j ] = temp ; } / _<number>_ % _<number>_ ] = return > , b number > ] > float ) > float > , ] > float > , ] > float ) > - ] > float > , ] > float > , ] > float ) > median < % + < > _<number>_ > _<number>_ ( ar ) > , , number = number = _<number>_ < , , number = number = _<number>_ < , , number = number = _<number>_ < int int / number number number number number number
nt median = arr [ i ] ;
rintf ( _<string>_ , me ) ; }
[ i ] = c ; } / _<number>_ / _<number>_ [ < [ < ar ] ; int median , = = = = _<number>_ ; int = = = = = = = = = = = = = _<number>_ ; int = = = = = = = = = ] > / _<number>_ > a [ a [ a [ a [ a = c n = _<number>_ = _<number>_ = ] > ] > ] > return > ] > return > ] > + ] > ] > ] > ] > ]
f ( num [ j - _<number>_ ] > num [ j ] = _<number>_ = _<number>_ = _<number>_ , end [ i } }
nt n [ j ] = t ; } } }
or ( j = i ; j < n scanf _<number>_ i + int int ) i + _<number>_ ) +
rintf ( _<string>_ , med ) ; } }
rintf ( _<string>_ , a [ k ] ) ; }
nt k = a [ i ] ;
nt k = - _<number>_ ;
ids [ i + _<number>_ ] = temp ; j = & { = i n n n n number _<number>_ number - _<number>_ number - number ) ) ) ) )
edian = bids [ n / _<number>_ ] ;
[ j + _<number>_ ] = swap ; , i < number = _<number>_ < n ; med = int int int int [ ) ] + } ; / / _<number>_ ; / i ; / / _<number>_ ; / [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
f ( n % _<number>_ == _<number>_ )
[ d + _<number>_ ] = tmp ; string = if ( ] < for ( = number = [ int int int ) [ int int ) number [ int int = int _<number>_ > + _<number>_ > number a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
ort ( a , n , s + _<number>_ ) ; }
= a [ i ] ;
rintf ( _<string>_ , s [ n ] ) < & ;
rintf ( _<string>_ , s [ m ] ) < {
nt q = ( n - _<number>_ ) string _<number>_ > median ( , _<number>_ > _<number>_ ;
rintf ( _<string>_ , arr [ k ] ) ;
nt med = arr [ N ] ;
ed = arr [ n / _<number>_ ] ;
f ( ( m % _<number>_ ) == _<number>_ )
ndex = max ( start , end , end ) ;
or ( int j = _<number>_ ; j < d mini _<number>_ end i > ] > j > i > i > i > i ) med ++ ) med ++ ) i == _<number>_ number { if ( { _<number>_ + j < int int { string ] ++ ) i == _<number>_ number j number int if ( { _<number>_ + = _<number>_ + j number int { string ] [ { string ] number = _<number>_ number - j ++ ) i == _<number>_ number j number if ( { _<number>_ + j < int int
canf ( _<string>_ , & a [ i ] ) ;
rintf ( _<string>_ , a [ ( n - _<number>_ ) / _<number>_ ] ) number
rintf ( _<string>_ , bids [ i ] ) ; }
edian = ( ar [ ( n - _<number>_ ( = _<number>_ ) - _<number>_ int ;
ed = arr [ h ] ;
f ( ( j % _<number>_ ) == _<number>_ [ / _<number>_ [ for ( , _<number>_ = _<number>_ = _<number>_ = _<number>_ = * int number int + _<number>_ int + _<number>_ = med j = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
rintf ( _<string>_ , pos ) ; } {
f ( a [ i ] > max ) j = / ;
or ( j = i + _<number>_ ; j < ] = _<number>_ = _<number>_ = _<number>_ = > > n = _<number>_ = _<number>_ > s > s > s > s > int m , m number int int s , int int , / _<number>_ , m > int m , m number int int int , / _<number>_ , m > int int m , m number _<number>_ [ s [ s [ s [ s [ ( n - _<number>_ ] number ( ( n - ( ( _<number>_ ] + _<number>_ number ( n
rintf ( _<string>_ , ( bid [ n / _<number>_ [ i + _<number>_ % _<number>_ + _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ [ number n - _<number>_ [ number n [ number n [ number n [ number - _<number>_ [ number n [ number n [ number - _<number>_ [ number n [ number - _<number>_ [ number n [ number - _<number>_ [ number n [ number n [ number - _<number>_ [ number n [ i [ i [ i [ i [ i [ i [ i [ i [ i [
loat m = a [ _<number>_ ] ;
f ( ( n % _<number>_ ) != _<number>_ number [ n i i i i i i i i a ] != _<number>_ [ = = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ arr arr arr i arr arr i arr arr i arr arr i arr printf ( _<string>_ arr i j printf ( _<string>_ arr i j arr arr i arr arr i arr i arr arr i arr i arr arr i
rintf ( _<string>_ , ( a + b ) / _<number>_ ) ; }
f ( i % _<number>_ == _<number>_ ) {
nt i , n , a [ _<number>_ ] [ _<number>_ ] ( number [ _<number>_ ] > {
id [ i ] = temp ;
id [ i ] = temp ; }
rintf ( _<string>_ , arr [ n / _<number>_ [ = ) ) ;
rintf ( _<string>_ , arr [ ( n - _<number>_ ( ) j n ( + _<number>_ ( + + _<number>_ ( n if ( ) & _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] number
= a [ j ] ;
um [ j ] = t ; } } , ) ; start = for ( = ] ; start ) = if ( if ( if arr )
ed = ( a [ n / _<number>_ ] i - > > ] ( + ] ( + _<number>_ ( n int ] ( n int _<number>_ ( n ( n int _<number>_ ( n int ] ( n int _<number>_ ( n int a ( n int _<number>_ ( n int _<number>_ ( n int _<number>_ ( n int a ( n int _<number>_ ( n int _<number>_ ( n int _<number>_ ( n int _<number>_ ( n int a ( n int _<number>_ ( n int _<number>_ ( n int _<number>_ ( n int _<number>_ ( n
rr [ i ] = temp ; } } {
lse if ( ( n % _<number>_ ) != _<number>_ ( n <END_BUG> _<number>_ number _<number>_ number number number number [ ) + _<number>_ + ] != _<number>_ ( arr med _<number>_ ( arr i med - _<number>_ ( arr i med - _<number>_ ( arr i med - _<number>_ ( arr i med - _<number>_ ( arr <START_BUG> _<number>_ [ ) - _<number>_ if ( ) <START_BUG> _<number>_ [ ) ( ) i ( ) i == _<number>_ [ ) i i i i i i i i i i i i i i i i i i i
ax = s [ i ] ;
rintf ( _<string>_ , med ) ; }
in = arr [ j ] ;
= a [ j ] ;
rintf ( _<string>_ , a [ n / _<number>_ arr ( ] = , ( number scanf ( _<string>_ n j j j j j i / _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ; }
or ( j = i ; j < n min _<number>_ > , number > , for ( start = number > + _<number>_ i int { t ; { { t ; { max ++ ( { t ; { { t ; { max ++ ( { t ; { { t ; { max ++ ( { t ; { { t ; { max ++ ( { t ; { { return ( { _<number>_ {
rintf ( _<string>_ , bids [ right ] ) < for ( < _<number>_ a a ( int a ( - _<number>_ i i i a a a a a a a a a + _<number>_ a a + i a + _<number>_ a a + i a + _<number>_ a a + i a a + i a a a a , n , n a a a a a , n a , } : _<number>_ a a , number ] ( min ( min ( min ( med ( min ( min ( med ( min (
rintf ( _<string>_ , a [ n / _<number>_ i [ a med _<number>_ string _<number>_ i n n n ] ] ] ] ] + = > = _<number>_ + _<number>_ > , _<number>_ + _<number>_ ) > b > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ + _<number>_ > , _<number>_ + _<number>_ ) {
[ j + _<number>_ ] = swap ; end = string > string > string > string > string s s s s s ( number ) = number ( number ) = number ( number ) = number ( number ) ( number ) = if ( number ) } j { if ( number ) < if a ) } j ) } j { if ( number ) < number ) } j = if ( number , = = = = = = = = = = = = = = = = = =
f ( k % _<number>_ != _<number>_ ) {
= ( b [ t ] + b number , - _<number>_ n i i i i i i if i number ;
rintf ( _<string>_ , med ) ; }
= a [ index ] ;
oid sort ( int a [ ] , j > ] > n > index > index > _<number>_ > - _<number>_ ;
[ i ] = a [ j ) < < < } ) j = number ) ;
ort ( a , n , s + _<number>_ number , [ _<number>_ ( ] i i i ( ] ( n ( n ) ) ) ) < = = _<number>_ < printf ( _<string>_ , & ) [ k = _<number>_ = _<number>_ = _<number>_ = _<number>_ < n < ] < ] < ] < ] < ] ; + sort ) ; + sort ) ; + sort ) ; + sort ) ; + sort ) ; + sort ) ; + sort ) ; + sort < i ; start = i - _<number>_
ort ( a , n , s + _<number>_ > scanf ( A number N number , S i , , i ) < _<number>_ > _<number>_ ; / _<number>_ ; / _<number>_ ( ) ; }
= n / _<number>_ ; }
= n / _<number>_ ; }
um [ j - _<number>_ ] = median ] > / number [ + + _<number>_ ] ;
loat temp , temp ;
nt med = arr [ N ] ;
id [ j ] = temp ; }
rintf ( _<string>_ , bid [ j ] ) ; { { / ( _<string>_ = > > > > > > ; _<string>_ - ; string ) scanf ( _<string>_ + > > ; _<string>_ + [ = > m , int int printf [ = int = int = int [ ] ( = _<number>_ ( n ( = _<number>_ [ = ) j ) ) ) < < < number < med ( = _<number>_ num num [ = - _<number>_ ) ) < med < med < + _<number>_ ; } > ) ; } >
id [ j ] = temp ; } p [ j ] + string ; for ( i = _<number>_ > { { for ( , int int int int int int j > _<number>_ number % int = med [ n ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) < < < - - _<number>_ < - _<number>_ < ( number int { int i n n n n n n a int i = i ] a < i a n n a = int int =
f ( n % _<number>_ == _<number>_ && n != _<number>_ k arr arr arr arr )
rintf ( _<string>_ , med ) ; } {
nt i = start , temp [ n ) + { { temp ( ] , { temp ( + i n n n a + i string n + i string - _<number>_ n n a n string _<number>_ n n n n a n n a n n a n a + <unk> a a + i a + i a a a a a + i a a a + i a a a a a + i a a a a a + i a a a + i a a + i a a a
edian = ( ( bids / _<number>_ ) for ( ] [ _<number>_ [ , [ < ] ( ] temp _<number>_ ( ] ( ] med _<number>_ ( + _<number>_ ( > > _<number>_ ) j ) j ) j ) j ) j ) j = ( ( , ( > ( > ( > ( > ( > ( > ( > _<number>_ ) if ( > ( , j j ) j ) j ) j ) j ) j i i ) + & { {
ids [ i ] = temp ; } } + _<number>_ < / _<number>_ > j > j > _<number>_ ( ] ( ] ( ] ( ] ( ] ( ] ( + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /
canf ( _<string>_ , & ar [ i ] ) ;
or ( i = _<number>_ ; i <= [ ] j j { int string ] ( = _<number>_ ) )
or ( int i = _<number>_ ; i < n ; i ++ ) scanf ( _<string>_ , & a [ i ] ) ;
unk> ( a , start , n ) ;
= ( ( arr [ n / _<number>_ ] j - = ] number median _<number>_ n = _<number>_ = _<number>_ = _<number>_ = _<number>_ number number number } ;
= arr [ n / _<number>_ ] ;
rintf ( _<string>_ , s [ j ] = for arr number n ( ar n ) < { _<number>_ int _<number>_ n < i , ] [ ] [ ] [ )
ax = a [ i ] ;
= ( ( float ) k [ int int int ] j j j j j j [ number m m a a , ) } _<number>_ > string > _<number>_ ( a ( sort ( number ( i ( i ( i ( i ( number index _<number>_ start _<number>_ ( number int number int number index }
f ( arr [ i ] > arr n number [ number j j j j j j arr - _<number>_ [ = [ number ] = _<number>_ = a int - a = - - - - _<number>_ i ;
emp [ i ] = temp ; }
f ( t % _<number>_ == _<number>_ ) {
nt t [ j ] = t ; } } }
ed = ( num [ ( n / _<number>_ ) / _<number>_ ] + [ n b b if ( end / _<number>_ , _<number>_ , i ] , i , i , i , i , { end a int = ) int = ) n int = ) n int = ) n a int = ) n a int = ) n a int = ) n a int = ) n a int = ) n a int = ) n a int = ) n int = ) n int = ) n int =
oid sort ( long int , , long int , long int , long } for number } - _<number>_ - _<number>_ ( [ _<number>_ int int ; string < if ( % ( if ( % ( if ( if ( % ( if ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % ( if ( if ( % (
edian = a [ n / _<number>_ - _<number>_ a int number ) { median = number [ j / _<number>_ ! _<number>_ ] i i i i i i - number [ , string _<number>_ [ + [ + _<number>_ [ + ] [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + ] [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + ] [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + ] [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + ] [ +
rintf ( _<string>_ , median ) ; }
= arr [ i ] ;
ort ( a , _<number>_ , n - _<number>_ ) ;
or ( int i = _<number>_ ; i <= n - _<number>_ ; i ++ ) }
f ( bid [ j ] > k )
= bid [ j ] ; }
= ( a [ p - _<number>_ [ if ( string sort _<number>_ + = _<number>_ + _<number>_ i number number number number <END_BUG> _<number>_ i number _<number>_ number _<number>_ ) number _<number>_ number
f ( a [ j ] <= a + num a a a a ] ) , + _<number>_ < for ( a ; a <= A ] ) ,
f ( t == _<number>_ ) return ;
or ( int i = _<number>_ ; i < i ; > i ; ( ( + ( number ++ ( med ++ ( ( med - string ( med i j ( + _<number>_ ( + number i - _<number>_ ( + _<number>_ ( + number num ++ ( + number ( + number ( + _<number>_ ( + number i ++ ( + % median ( + number ( + _<number>_ j n ++ ( + number ++ ( ( + number ++ ( + number - % ( + number - % ( + number ++ (
[ j + _<number>_ ] = swap ; } }
wap [ j ] = a [ j number _<number>_ + number n ;
rintf ( _<string>_ , ( bid [ n number _<number>_ ] num n , n , string [ + _<number>_ i ] s { { { { { {
unk> ( start + _<number>_ , n - _<number>_ , array ) ; } }
= s [ j ] ;
rintf ( _<string>_ , ( bid [ n }
= * b ;
rintf ( _<string>_ , a [ j ] j ( ) ) ; }
rintf ( _<string>_ , median ) ; }
rintf ( _<string>_ , median ) ; }
[ j + _<number>_ ] = swap number if ( + int + + _<number>_ = int [ ] number [ ] i ( + _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( j = _<number>_ ; j < [ - _<number>_ [ j [ + _<number>_ [ + _<number>_ ] ] ] int ] ( number int number = _<number>_ = _<number>_ = ] - _<number>_ number i ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( int i = _<number>_ ; i < j , + / _<number>_ > arr ; n ++ = - _<number>_ = _<number>_ > { j ++ = _<number>_ i < n < n < j > j > j > j > j > j > j = _<number>_ > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j > j >
f ( a [ j ] > a ( a = ( ;
nt a [ _<number>_ ] , c , n + ;
rintf ( _<string>_ , m ) ;
ort ( a , n , index - _<number>_ ( ) < _<number>_ ( number < number ] > _<number>_ ( ) > _<number>_ ( ) > ) < ) ; sort ( = = = = = _<number>_ < _<number>_ ) ; sort ( = = _<number>_ < _<number>_ ) ; sort ( = = = = = = _<number>_ ) ; sort ( = = = = _<number>_ ) ; sort ( = = _<number>_ < _<number>_ ) ; sort ( = = _<number>_ < _<number>_ ) ; sort ( = = = = = _<number>_ < _<number>_
= a [ index ] ;
f ( n / _<number>_ == _<number>_ )
= a [ i ] + a [ n * _<number>_ [ , n b b b i return _<number>_ ] ( x return median number ( n temp temp int median number x number - _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number int median number ( n temp int median number
rintf ( _<string>_ , a / _<number>_ ) ; }
id = temp ; }
= bid [ i ] ;
f ( a [ j ] > a [ [ a ] ] number _<number>_ number number number - _<number>_ i i i i = _<number>_ ( } if ; }
f ( min > a [ i ] ) min = i < i < float i > end [ > ] ; start = , [ > ] ; start = , [ > ] ; start = , [ > ] ; start = , [ > ] ; start = , [ > ] ; start = , [ > ] ; start = , , { , , , { , , , { , , , { , , , , , , , , , , , , , , , , , ,
= ( a [ n / _<number>_ t _<number>_ int [ n i j , [ n + _<number>_ } } } }
emp = ( a [ n / _<number>_ string string - _<number>_ start i } ( a [ n j { for ( index = number number number number number number number > > = > > > a = > a = > a = start = _<number>_ < > a = > a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a =
oid sort ( int a [ ] , int start , ] ) }
f ( j % _<number>_ == _<number>_ )
um = ( a [ k ] + i ] [ string else return _<number>_ n , j ;
nt t = a [ index ] ;
= ( a [ n / _<number>_ ] + i ) int int i string ;
rintf ( _<string>_ , ( bid [ n j for ( ) a y - _<number>_ % _<number>_ a = _<number>_ number _<number>_ number a ) if ( _<string>_ j j j + ] number , ] int ] number ] number ] + ] number ] number ] + ] number ] < ] i < > ] number > ] number ] < ] i < > ] number ] < ] i < > ] number ] < ] number ] number ] < ] i < > ] number > ] number ] < ] number
rintf ( _<string>_ , ( bid [ n / _<number>_ < _<number>_ [ long ] y _<number>_ ( n j j = _<number>_ = _<number>_ int int int start a < _<number>_ ) ) if ( _<string>_ j median _<number>_ n int i ) <START_BUG> ++ < ( i if ( i median _<number>_ == _<number>_ ) <START_BUG> i ) < ( i if ( ] == _<number>_ ) int i int i j if ( i median _<number>_ == _<number>_ ) <START_BUG> = ( i if ( ] ) j j ) < i < ( ] if (
rintf ( _<string>_ , a [ k ] ) ;
= n / _<number>_ ;
f ( rank == ( n / _<number>_ ) - _<number>_ ( min == number int i ;
rintf ( _<string>_ , ( a + bid ) / _<number>_ ; [ ] ) > temp > ] > ] > {
or ( int i = start ; i [ i [ ) ] }
or ( int i = _<number>_ ; i [ k = _<number>_ ) {
rintf ( _<string>_ , bid [ _<number>_ ] ) < <unk> ;
rintf ( _<string>_ , median [ n ] ) ;
eturn mean [ n / _<number>_ ] ; }
eturn ( ( x [ n ] + x [ int int int int = i start ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] ( [ ] ( ] (
rintf ( _<string>_ , median ) ; }
edian = ( ( bids [ ( n / _<number>_ , number ;
lse printf ( _<string>_ , b [ p [ printf ( _<string>_ = + number = double b ;
loat b [ n ] ;
rintf ( _<string>_ , a [ ( n - _<number>_ ) number _<number>_ int } int }
f ( z % _<number>_ != _<number>_ )
rintf ( _<string>_ , bid [ ( n + _<number>_ number number = _<number>_ n = _<number>_ n = _<number>_ = _<number>_ = * ! ( = - , < , = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < , , [ ) ] > , i >
rintf ( _<string>_ , bid [ j ] ) ; median , < [ , , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( = _<number>_ < _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_
[ i ] = temp ; } } max , k < n < if ( if ( if = a ) j > for ( ] ) < for ( i [ i a < if ( if ( if number ] > if ( if number ] > if ( if ( ] > if ( if ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( > > > > > > > > >
[ d + _<number>_ ] = tmp number + _<number>_ number % [ ] number number number i i i i i i i i i ] ] ] i ] i ( start < start i i i i i i i i i i i i i i i i i i i i i i i i i int [ ] i i i i i i int [ ] i i i i i i int [ ] i i i i i i i int a [ n ) ; , , , [
f ( tmp % _<number>_ == _<number>_ )
f ( ( start % _<number>_ ) == _<number>_ ) {
edian2 = ( a [ ( n / _<number>_ ) - _<number>_ ] + a [ n / _<number>_ ] ) / _<number>_ ;
emp = bids [ i ] ;
[ j ] = b ; } { { start ( ) < & & n < n < ; string ( n - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( median - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
= a [ i ] ;
or ( int i = _<number>_ ; i > j ; n ++ = _<number>_ = ;
ax = a [ start ] ; }
ax = a [ i ] ; } }
mp = a [ d ] ;
[ d ] = a [ d + _<number>_ ] ;
rintf ( _<string>_ , s [ m - _<number>_ a ) < printf ( _<string>_ i i i ( ) for ( ] int ) < j ) < < < _<number>_ < / _<number>_ < _<number>_ ) < < < _<number>_ < _<number>_ < _<number>_ ) < j < j < j < j < j < j < j < j < j < j ) < / _<number>_ < / _<number>_ < j < j < j < j < j < j < j ) < / _<number>_ ;
f ( end % _<number>_ == _<number>_ )
nt n , i , a [ _<number>_ n > }
nt i , j , temp ;
nt ar [ n ] ;
nt a [ _<number>_ ] , n , i ;
ed = ( bid [ ( n - _<number>_ ) / _<number>_ ] + bid [ ( ( n - _<number>_ ) / _<number>_ ) + _<number>_ ] ) / _<number>_ ;
rintf ( _<string>_ , ( s [ i ] m + = = number , number ( number , int + _<number>_ == _<number>_ ( n void _<number>_ == _<number>_ i i i ( int ] ( ( = _<number>_ ) / = ] ( = ] ( = = = _<number>_ ( int ] ( = int ( = _<number>_ ) / = ] ( = ] ( = ] ( = = = _<number>_ ( int ] ( = int ( = _<number>_ ) / = ] ( = ] ( = ] ( = = = _<number>_
rintf ( _<string>_ , s [ m ] ) ;
rintf ( _<string>_ , z / _<number>_ ) ; }
[ i ] = x ; }
rintf ( _<string>_ , ( ( arr [ min / _<number>_ = [ } ] ] ] ] i if ( number number number ) number = = = _<number>_ ] ] ] [ , [ / _<number>_ a ( n scanf _<string>_ start i start start start start ( i scanf ( _<string>_ start i start start i ! / _<number>_ start [ / _<number>_ a ( n scanf _<string>_ start i start ( i ! _<number>_ a [ / _<number>_ a [ / _<number>_ a ( n scanf
nt t = arr [ i ] ;
ed == a [ n / _<number>_ ] + a n long ;
f ( arr [ j ] < arr [ number , a ) med ] > ] > long > i > i > i number _<number>_ number
rintf ( _<string>_ , arr [ n / _<number>_ + , i i ] } _<number>_ int ] = ] k i k k _<number>_ number string _<number>_ ) ;
or ( int d = _<number>_ ; d <= n for ( int = _<number>_ > a int = int , = _<number>_ n if ( + c <= N long c - _<number>_ i ) { ++ ) { <= N long c ++ ) { <= N long c ++ ) { <= N long c ++ ) { <= N long ] <= N long c ++ ) { <= N long ] <= N long c ++ ) { ++ ) { <= N long _<number>_ i long ] <= N long c number i )
or ( int i = _<number>_ ; i < i > + _<number>_ > a ; + + arr [ + _<number>_ ] ++ )
rintf ( _<string>_ , num [ n ] ) > j ;
f ( median % _<number>_ != _<number>_ ) {
rintf ( _<string>_ , bid [ i ] ) ;
or ( i = _<number>_ ; i < n ; i ++ ) {
eturn ( a [ n / _<number>_ ] + ] num a ] = _<number>_ = _<number>_ + _<number>_ d + _<number>_ + _<number>_ + ( = - _<number>_ == _<number>_ i i i i i i i i i i i i i i i i i i i i i number _<number>_ number number number ) sort _<number>_ ( ] return _<number>_ , int int int ( ( int ( _<number>_ [ i i size [ ( ( int ( i i size = _<number>_ = _<number>_ i i , ( ( int ( int , ( size
canf ( _<string>_ , & a [ k ] number number [ { string - _<number>_ = _<number>_ = _<number>_ ] + d ) number number number number number number number number : _<number>_ number - _<number>_ number - _<number>_ number ( ( d n - _<number>_ [ c = _<number>_ [ } = _<number>_ = } _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i
ong int sum = ( a [ k ] n , a [ string sort _<number>_ + [ * [ * * [ * * = - _<number>_ [ size [ size [ size [ size [ size [ size [ size [ size [ size [ size [ size [ size ] ] ] ] ] ] ] ] ] ] ] ( ] ( ] ( ] ( ] ( ] } ] ( ] ( ] ( ] ( ] ( ] ( if ( long + ] } - ] ( if ( long + ]
ong int sum = ( a [ k ] + a [ string - _<number>_ ] ( string ( a [ string ] , a ar j - _<number>_ ) ) ) < j < + _<number>_ < j < + _<number>_ < j < _<number>_ ) {
rintf ( _<string>_ , sum / _<number>_ ) ;
canf ( _<string>_ , & ans1 ) ;
rintf ( _<string>_ , ans2 ) ; }
lse if ( n % _<number>_ == _<number>_ ) {
edian = ( ar [ ( n - _<number>_ ) } = _<number>_ i [ > = = > > > number > number n [ > int int int int int int int int int int ( int int ( / _<number>_ ( int int ( / _<number>_ ( int int int int ( int ( / _<number>_ ( int int ( / _<number>_ ( int int int int ( int ( / _<number>_ ( int int ( / _<number>_ ( int int int int ( int ( / _<number>_ ( int int ( / _<number>_ ( int int
oid swap ( int a [ ] , > p ( > int = > > / for ( ( ( ( ( ( ( ) number ; ; ; ; > > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > > median number number n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
ed = arr [ h ] ;
rintf ( _<string>_ , ( a [ ( n / _<number>_ number _<number>_ arr number i [ ) [ ) [ ) [ ) ) sort ] = int ( ] int ] ) i = ] = ] number ] number ] i = ] ( ] number ] }
rintf ( _<string>_ , a [ ( n ) for ( int a ar number ) > int & number > long long for ( int i i i = _<number>_ ; ++ if ( _<string>_ ) if ( _<string>_ a [ ( n ) string _<number>_ ] ) ;
rintf ( _<string>_ , ( a [ ( n for ( = % _<number>_ ( a [ number ] n n n n n n n n n n & [ = = _<number>_ + number ar & _<number>_ + number ar ) ) ) ) ) > > > ( = number ( = number ( = & = = _<number>_ ) int _<number>_ [ ] a int , int ] ) ) > > ( ] max _<number>_ ) > ( i max _<number>_ ) > _<number>_ > ( i max _<number>_ ) string _<number>_ > ( i
eturn ( a [ n / _<number>_ ] + a [ ( n / _<number>_ , _<number>_ i i , n , ) end end - _<number>_ , n , ) ( n % _<number>_ [ n i i end _<number>_ i i i i end end start _<number>_ , _<number>_ i i , n , ) end a ] ( n [ n end _<number>_ i i , ) end _<number>_ ( n % _<number>_ [ n i end _<number>_ , _<number>_ i i , n , ) end a ] ( n [ n end _<number>_ i i
nt med = sort ( arr , _<number>_ , N ( _<number>_ ) , _<number>_ ( } ) ( { _<number>_ ) ) ;
ax = a [ _<number>_ ] ;
canf ( _<string>_ , & bid [ i ] ) ; }
nt n , i ;
canf ( _<string>_ , & s [ i + n + n a number ( = int int ( ( = - int ( ( + _<number>_ number d - d number _<number>_ number number d number < d number d number number number number d number < string a number d ( ( n - ] ( ] ( ] i ;
ort ( a , n , s + _<number>_ ) < for ( }
rintf ( _<string>_ , temp ) < % _<number>_ < sum ; j = / sum ; j = - printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int printf ( _<string>_ int
rintf ( _<string>_ , ( a a a ] ) x _<number>_ [ + _<number>_ = } ( int , + _<number>_ ) arr number _<number>_ ) > string ( [ , & a n arr temp temp ) > string > number > _<number>_ ) s = ( [ number temp temp temp _<number>_ = _<number>_ = s n string _<number>_ i ) ; j = + _<number>_ ; j = + ( [ + _<number>_ ) string _<number>_ i i i i i string _<number>_ i i i i ) ; j = + _<number>_ ; }
loat c = a [ N [ _<number>_ a a i - _<number>_ n ;
rintf ( _<string>_ , a [ n string _<number>_ [ , [ j int j num [ i int n arr - _<number>_ [ , [ , [ , [ , [ , [ = = _<number>_ [ = [ _<number>_ [ = [ _<number>_ [ = [ _<number>_ [ = [ _<number>_ [ = [ _<number>_ [ = [ _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_
[ i ] = t ; { } }
f ( s == arr - _<number>_ ) }
nt n , i ;
eturn med ; }
lse if ( med % _<number>_ == _<number>_ > _<number>_ i i i i i i i i median - _<number>_ == _<number>_ ( int ( int ( ( int _<number>_ ) { - _<number>_ ( ( int ( ( int - % _<number>_ ( int ( ( int ( ( int ( ( int ( int ( int ( ( int ( ( int ( ( int ( num ( int ( ( <END_BUG> { _<number>_ ( int ( ( int - % _<number>_ ( int ( ( int ( int ( int ( ( int ( ( int
rintf ( _<string>_ , a [ ) number for ) ; med j num ; med j ; n ++ > [ ( ] = _<number>_ ) { idx i > ] > idx > idx > idx ) > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx > idx >
wap ( a [ i ] + i n - ( number [ , n j j number [ > num ( ) [ , > - _<number>_ + > - _<number>_ + > - _<number>_ , < < < a number < arr number < arr number < arr number + _<number>_ , < _<number>_ ) ;
nt n , i , j n n ;
loat m = ary [ _<number>_ a < { _<number>_ i i i i i , , , , ;
ort ( ary , n ) > > ;
eturn ( ( x [ n - _<number>_ n int [ med - _<number>_ return _<number>_ n n ( number ] ( number int number int + _<number>_ sort _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + + _<number>_ sort _<number>_ ( + number int number int ( + _<number>_ == _<number>_ ( + _<number>_ ( +
emp = x [ j ] ;
= bid [ i ] ;
f ( bid [ j ] > k a a i ( ( , a number ) number [ , , ;
or ( int j = _<number>_ > ) > n > number < number < , < [ _<number>_ i i > a number a number a number a number ++ ) {
id [ _<number>_ ] = temp ;
rintf ( _<string>_ , a [ ( n - _<number>_ ) / _<number>_ ] ) ;
rintf ( _<string>_ , a [ ( n - _<number>_ ) / _<number>_ ] ) ;
rintf ( _<string>_ , a [ = , , _<number>_ ) [ ] { ) s = [ i j j j j j , ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( int i = _<number>_ ; , <= , s { t = _<number>_ ; }
ed = ( num [ n / _<number>_ ( n { t ) { t = number number i ] + , ] ( , , , , , , ] i for ( , , _<number>_ i - _<number>_ i i i i i i i for ( float , i [ x number _<number>_ i } - _<number>_ i } - _<number>_ i } number i for ( float , , [ N for _<number>_ i number _<number>_ number } - _<number>_ number number x x x x x x {
canf ( _<string>_ , & a [ j [ ) a a a > + = _<number>_ ;
f ( y % _<number>_ == _<number>_ ] n n = _<number>_ ary - = _<number>_ ] < _<number>_ i > _<number>_ i i - _<number>_ == _<number>_ i i )
canf ( _<string>_ , & ar n < [ ( i , = ( [ ( number + ) , ] ( [ [ [ [ [ [ [ [ [ [ [ [ int a a a a a a a a a a a a a a a a a a a a a a a a number ] ( + + + + + + + + + + + + + + + + + + + int [ int int int ( ( ] ( int ( ( ] number + + + + +
or ( i = _<number>_ ; i < int < = N < N < N < N < N < N < N ; [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ int n n ] n n ++ n ( ) s n n n n n n n n n n n n n n ( ) int int int n ( ( ) - _<number>_ n n n n -
edian = ( bids [ ( n - _<number>_ number number number = ) n n n n n n if ( + ) ) int }
ed = median ( num , t ) [ + _<number>_ n n k [ _<number>_ n n n n ( i start ( = _<number>_ ( i start ( = _<number>_ ( i start ( = _<number>_ ( i start ( = _<number>_ ( i start ( = _<number>_ ( i start ( = _<number>_ ( i lim = _<number>_ ( = _<number>_ ( i lim _<number>_ ( = _<number>_ ( i lim _<number>_ ( = _<number>_ ( i lim _<number>_ ( = _<number>_ ( i lim _<number>_ ( = _<number>_ ( i lim _<number>_ ( = _<number>_ (
rintf ( _<string>_ , t ) ;
= a [ j ] ;
unk> ( bids , _<number>_ , n ) < > > ;
ort ( a , start , size - _<number>_ ] ] ] ] ] ] ] ] ] ] < , , , , ) < string < , < _<number>_ < j < j < + _<number>_ < _<number>_ ] < % , for ( , / _<number>_ i ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
mp = a [ i ] ;
nt sort ( int a [ ] , ] ( ( i j j ( num ( + _<number>_ ( int + int ( ] j ( ( > > > A i ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] k ] ] k ] ] < { _<number>_ start < _<number>_ ] ] ] ] ] ] ] ] <
rintf ( _<string>_ , median ) ;
= ( a [ ( a [ ( , , _<number>_ sort _<number>_ ] ] n n n ] ] ] ] ] ] ] ] ] ( , a [ ) + _<number>_ ] number _<number>_ number number number number _<number>_ number number number number * a number + _<number>_ number number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number number
nt x = a [ d ] ;
nt t , i , j , min n ;
nt <unk> [ _<number>_ ] ;
unk> ( a , start + half , n swap % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
canf ( _<string>_ , & ar [ i ] ) ;
rintf ( _<string>_ , a [ ( n n ) { { j = _<number>_ string _<number>_ string _<number>_ [ n [ n = _<number>_ [ n [ a number _<number>_ ] ] ] number number ( a = int a = j number _<number>_ number - _<number>_ number a number _<number>_ number number number number number - _<number>_ number number number ) ( a = int tmp number = _<number>_ number _<number>_ sort _<number>_ number number number number - _<number>_ number - _<number>_ number number number number number number - _<number>_ number number - _<number>_ number number number number
rintf ( _<string>_ , med / _<number>_ ) ; }
rintf ( _<string>_ , sorted [ n / _<number>_ ] i i i ar ar ar > _<number>_ ar ar _<number>_ ar ar number _<number>_ ar * = = _<number>_ ar > i ar for ( % _<number>_ != _<number>_ ar ar number ] ar ar ar > i ar for ( % _<number>_ != i ar number _<number>_ ar ar number - _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar ar number _<number>_ ar > ] ar
eturn ( a [ n / _<number>_ ] ) n ] > int = int = int = = _<number>_ [ N i sort _<number>_ [ ) i j j j j j j j - _<number>_ num num - _<number>_ > <unk> > N = _<number>_ = _<number>_ > <unk> > <unk> > A ] = _<number>_ > <unk> > N = _<number>_ num > <unk> > A ] = _<number>_ > <unk> > N = _<number>_ > <unk> ) > <unk> > N > N > _<number>_ = _<number>_ > <unk> ) > <unk> > N > N
canf ( _<string>_ , & a [ k ] ( n ( = ( ) ( ) ( int ( int ( = _<number>_ ( a ] ( a int + ) ) ) ) ) ) ) > > > = _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ ) , n > + _<number>_ ) , - _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > +
canf ( _<string>_ , & bid [ i [ + + a [ ] n n n [ ] n n [ ] [ ] [ ] [ [ [ n ) ) <
um = a [ n / _<number>_ ] [ a = a + i mini _<number>_ > med = _<number>_ [ n mini _<number>_ [ n [ n - _<number>_ ) ) ) {
d ( s , s , _<number>_ ) < < ;
d ( s , _<number>_ ) ;
rintf ( _<string>_ , a [ ( n / _<number>_ > ] ( n k _<number>_ number ] number ] number ] number _<number>_ number number number _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_
= ( ( a [ n / _<number>_ ] + a n + [ number a a a a a a a a a a a a ] i j i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
= ( a [ n / _<number>_ ] a + n + [ ] a a a a a a a a a a a a a ( j ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
loat c ( a [ n / _<number>_ > ( ) }
oid sort ( int a [ ] , a ; [ + j ) , + string ) , med > _<number>_ > _<number>_ ; , string > _<number>_ ; j = int n ; , n ; , n ; , n ; , n number ; , n ; , n ; , n number ; , n ; , n ; , n number ; , n ; , n ; , n ; , n ; , n ; , n ; , n < n number number ; , int int int int int int
wap ( a , i , start ) , a [ + = ( i - + _<number>_ ; string ) < number number i ( i > {
ort ( n , ar ) ;
= median * _<number>_ ;
ort ( a , i , n > _<number>_ ( n [ ) a + _<number>_ + i + _<number>_ + i + _<number>_ + number + _<number>_ ] ( n int ) int {
or ( int i = s + _<number>_ < = number < n < a < a < i < i < i < i < = _<number>_ < [ , ) +
rintf ( _<string>_ , ( ar [ n / _<number>_ - _<number>_ ] + ar [ n / _<number>_ ] ) / _<number>_ ) ; }
f ( ( ar [ n / _<number>_ - _<number>_ ] + ar [ n / _<number>_ ] ) % _<number>_ == _<number>_ )
rintf ( _<string>_ , a [ i ] [ number + _<number>_ + number i a ] ] = int int int = i n ] = ] = ] j j j n n n n n n n n n n n - ) > x > ) > > > > _<number>_ > ) > > > int x i number > _<number>_ number - ) > x > int + _<number>_ number - ar ] number
rintf ( _<string>_ , a [ ( n [ _<number>_ ] { { ; string ( N ] ] ] ] ] ] ] ] = _<number>_ = * int - ( + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number ) > int x > _<number>_ number
nt i , n , ar [ _<number>_ ] ;
or ( i = _<number>_ ; i < [ ) = _<number>_ if ( ( , n ar ] = _<number>_ = _<number>_ = _<number>_ = _<number>_ number number number _<number>_ number number number _<number>_ number number number _<number>_ number number _<number>_ number number ) / _<number>_ > , , ( , a ] a ] [ ;
= i ; }
= i ; }
f ( a % _<number>_ == _<number>_ )
rintf ( _<string>_ , a [ i number + }
f ( a [ i ] > a [ { ) int + _<number>_ [ ] n [ int , number ) start > start > int ] number > _<number>_ number
rintf ( _<string>_ , a [ n - _<number>_ [ + ] ( a - _<number>_ number _<number>_ int = _<number>_ ) ) < sort i , ) > int int , a + _<number>_ != start a a a a a a a a a a a a a a a a a ar ar ar - _<number>_ != _<number>_ ) ] = ( int / _<number>_ ) x _<number>_ number < _<number>_ ( ] ( ] for ( ] ) ) ) ; +
rintf ( _<string>_ , a [ ( n / _<number>_ ) n n ) > _<number>_ > j = _<number>_ > n ar > _<number>_ ar > _<number>_ ( , else [ ; - _<number>_ = _<number>_ = i - _<number>_ ( , , [ , = _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_ ( , & _<number>_
f ( n % _<number>_ == _<number>_ ) {
ort ( a , arr , s start a a + _<number>_ , } ; { {
rintf ( _<string>_ , ( a [ number a z max _<number>_ ( [ = & ) if ) = i = i = i / ( int int int ) - _<number>_ ) > }
rintf ( _<string>_ , a [ n }
= ( r + p ) float _<number>_ > > _<number>_ number
loat p = a [ i ] ; } median = i > _<number>_ number _<number>_ number { _<number>_ start > + = + _<number>_ > for ( { _<number>_ start ( { == ( i n n n n n n n n ) string _<number>_ ) number / / _<number>_ number
nt med = _<number>_ ;
edian = ( a [ ( n , _<number>_ i - _<number>_ ] a + [ i / _<number>_ n number number number number }
rintf ( _<string>_ , a [ n / _<number>_ + ( n x _<number>_ , ] number number ( i ( i ( i ( if = = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ , + _<number>_ ( i ( [ i n n ( i med _<number>_ ( i ( [ i n a ) % _<number>_ a ) ) ) ) ) ) ) start - _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_
nt m = a [ _<number>_ ] < string ( n - _<number>_ number n number - _<number>_ number n number - _<number>_ number number , / _<number>_ , / _<number>_ , / _<number>_ ) ;
float m = a [ _<number>_ number number a ] < , + _<number>_ < _<number>_ < / _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ number ) < sum < _<number>_ < string < _<number>_ < string < _<number>_ < _<number>_ < _<number>_ < _<number>_ = _<number>_ < string < _<number>_ ;
canf ( _<string>_ , & a [ i n n ; start a ( i ) n ( [ i a ( { i ) ++ ; int & int [ ] ; int return ( ] ; int % + _<number>_ ; int % + _<number>_ ( n ( ] ( n ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] (
nt bid [ n ] ;
= ( a [ n / _<number>_ ] + n int ] ) s _<number>_ < t < - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ ( d ) }
= bid [ j ] ; c ) for ( = ] ; > > number )
rintf ( _<string>_ , bid [ _<number>_ [ < ) ) ;
f ( n % _<number>_ != _<number>_ )
nt a [ _<number>_ ] ;
rintf ( _<string>_ , a [ n / _<number>_ tmp _<number>_ int int int ] = / a ] i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
rintf ( _<string>_ , a [ n med _<number>_ = int [ + _<number>_ i i i i i i i if ( + _<number>_ i = _<number>_ = _<number>_ = - _<number>_ = * [ + _<number>_ i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
f ( t == n - _<number>_ ( , start ) for ( > _<number>_ , end , i , i for ( > _<number>_ , end , i , i for ( > _<number>_ , end , i for ( > _<number>_ , end = _<number>_ ; int end = _<number>_ , end = _<number>_ ;
oid sort ( int a [ ] number ) string size < + + + sort < S < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ) size < _<number>_ < _<number>_ < sort < _<number>_ ;
rintf ( _<string>_ , arr [ ( if _<number>_ ) min * _<number>_ ] ) < string < _<number>_ ) < < _<number>_ ) { for ( a if ( ( if ( , if ( ( if number ] ( = _<number>_ { [ a + _<number>_ + a + a + _<number>_ + a ( = _<number>_ number ) ) != _<number>_ ) ) - ( _<number>_ ) }
canf ( _<string>_ , & arr [ ] number + _<number>_ tmp ( = a + a ( = a + a ( a - a ( a - a ( a - a ( a - = ++ number number _<number>_ number number number = _<number>_ number number number number number number number number number number number number number ) ) ) ) ; size ++ ) { med int med ] ( number = [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
rintf ( _<string>_ , ( a [ n / _<number>_ num + [ ] if ( / ( ] if ( _<string>_ + [ ] if ( _<string>_ ) , ( [ ] if ( _<string>_ + [ ] if ( _<string>_ ) , ( [ ] if ( _<string>_ + [ ] if ( _<string>_ for ] == _<number>_ ) + [ ] ) , _<number>_ ) number number number
rintf ( _<string>_ , ( a [ n / _<number>_ num + ] n ] + ] n if ( _<string>_ ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
rintf ( _<string>_ , med ) ;
f ( n % _<number>_ == _<number>_ )
or ( i = _<number>_ ; i < { }
ids [ c ] = temp ;
= a [ ( n / _<number>_ ) i n - _<number>_ ) < _<number>_ ) < _<number>_ ;
loat m = a [ i ] ; , int } = a ( ] number a ( ] number a ( ] number a ( ] number a ( ] number a ( ] number a ( int int ) ) { + _<number>_ ) ) ) ) ; arr , } ; arr , } ; arr , m a > m > N , M a > N , string < _<number>_ < _<number>_ ( [ a = _<number>_ ( i + _<number>_ ( i + _<number>_ ( i + _<number>_ ( [ a = _<number>_ (
ed = ( bid [ n / _<number>_ = = _<number>_ = > > > > > > > > > > > > > > [ > > [ > = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
oid sort ( float a [ ] , int n ( + { + _<number>_ ( a ( / _<number>_ ( _<number>_ ( a ( / _<number>_ ( _<number>_ number _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number ;
nt bid [ _<number>_ ] ;
f ( bid [ i ] == arr ) i = } ; size ; size ;
ed = a [ i ] ;
nt i , tmp ;
mp = a [ size - _<number>_ ] ;
emp [ j ] = a [ number ] ;
rintf ( _<string>_ , a [ ( n ( n > a > _<number>_ > int n > = _<number>_ > int n > ind > _<number>_ > int ind > _<number>_ > _<number>_ > int a [ , int int int int > > _<number>_ > _<number>_ > _<number>_ > _<number>_ > int a [ , i i number number number _<number>_ i i number number number number number number number ) number
rintf ( _<string>_ , x ) ; }
emp [ i ] = a [ ) a + ( n [ ( n [ ( n [ number a a - _<number>_ = = _<number>_ = - number , n ) int & , , , , [ number = [ number a a - _<number>_ = = _<number>_ = _<number>_ = _<number>_ ) ;
ed = a [ n / _<number>_ - _<number>_ ] [ + start } _<number>_ = _<number>_ ] ;
= ( ( a [ n / _<number>_ i ] ] + ] = ] ) - _<number>_ number ( a ] { - _<number>_ ( num ] ( n [ [ [ [ [ [ [ [ [ [ [ [ n [ N [ N [ _<number>_ i i i i [ _<number>_ i i i i [ _<number>_ i i i ( n [ = int = _<number>_ ( n ] ] ] ] ] ] ] ] ( n ] ( n ] ( n ] ( n [ + _<number>_ = _<number>_ = _<number>_
ax = bids [ left ] ;
edian = ( bids [ n / _<number>_ ] array ] n - ] n m int a int a [ j } - _<number>_ ] , = ) string string > _<number>_ > i > , ) / _<number>_ > i > , > , n > _<number>_ ] > if ( if ( if ( if ( if ( if ) n string n string _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ( n ar ar j j j ] ] ] ] ] ] ] ] ] ] ] ]
ort ( a , _<number>_ , n - _<number>_ ( = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
ort ( ar , ar ) ;
canf ( _<string>_ , & ar [ i = _<number>_ = number int i = _<number>_ = _<number>_ = _<number>_ = - ( min [ number num int number ) [ number ] max _<number>_ ] number [ number ] ] ] number ] ] } } - _<number>_ ] number } - number + _<number>_ ) < _<number>_ < i < _<number>_ < N max _<number>_ < <unk> ) ;
= ( arr [ n / _<number>_ , _<number>_ + _<number>_ + [ ] { { - _<number>_ [ n - _<number>_ [ _<number>_ [ i < i sort _<number>_ int ] ] ) , _<number>_ < & _<number>_ < / _<number>_ < / _<number>_ < & _<number>_ < / _<number>_ < & _<number>_ < / _<number>_ < _<number>_ < _<number>_ < & _<number>_ ) <
= ( arr [ n / _<number>_ ] j - ] i int [ ] ) { _<number>_ < ( ] = ] ) , ] < = ( ] = [ ] number _<number>_ number arr , [ ] sort _<number>_ int ] number sort _<number>_ number number _<number>_ number number _<number>_ number number number number _<number>_ number number number < ) a < ) a = ( [ i / _<number>_ ] { / + ] ) / / < _<number>_ < _<number>_ < <unk> = = = = = , , [ ] - _<number>_ -
rintf ( _<string>_ , f / _<number>_ ) ; int j ( j ( j ( j ( j ( , , , , , , , ; return < & / _<number>_ ; j ] ; <START_BUG> ( _<string>_ ( / _<number>_ ; j ] ; <START_BUG> = & & & ] ; <START_BUG> ( _<string>_ ( / / _<number>_ ; j ] ; <START_BUG> = & & & ] ; <START_BUG> ( _<string>_ ( / / _<number>_ ; j ] ; <START_BUG> ( _<string>_ ( / _<number>_ ; j string , / ] ; <START_BUG> ( _<string>_ (
rr [ i ] = temp ;
rr [ i ] = pos ;
nt med = num [ ( n + _<number>_ ) for ( int string = n , ) > _<number>_ ;
or ( j = _<number>_ ; j <= i number _<number>_ i > ] > ] > num ; num ++ ( n ++ ( ( max ) - number n > = = _<number>_ ) ) ; , ++ ) i
= ( a [ n / _<number>_ ] j - ar ) int _<number>_ ;
= ( a [ i / _<number>_ ] number ] i > _<number>_ > ] ( = i , ] ) } _<number>_ ) < _<number>_ < - _<number>_ ;
rintf ( _<string>_ , ( a [ n / _<number>_ ] + a [ ( n - _<number>_ ) / _<number>_ ] ) / _<number>_ ) ;
ids [ c ] = temp ;
rintf ( _<string>_ , med [ i ] int & int number ) ; }
f ( n % _<number>_ != _<number>_ )
rintf ( _<string>_ , median ) ;
rintf ( _<string>_ , ar [ ( n - _<number>_ ) / _<number>_ ] ) ;
nt i , tmp ;
rintf ( _<string>_ , ( arr [ n / _<number>_ + , + _<number>_ + ] ( num = num = _<number>_ ( n ) } - _<number>_ ) ( n ( i - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = * number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number ) {
rintf ( _<string>_ , arr [ ( n string _<number>_ ( ;
= a [ n / _<number>_ - _<number>_ n ;
nt a [ _<number>_ ] , i , j i i i j j number _<number>_ number number number number ( [ _<number>_ i ] number = _<number>_ ( , ] ( number [ _<number>_ ] > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string ) ) )
rintf ( _<string>_ , a [ ( a + _<number>_ ) } [ _<number>_ i i i int return _<number>_ i i number number ) number
rintf ( _<string>_ , med ) ; }
nt t = num [ j - _<number>_ ] > num > _<number>_ > i > + _<number>_ > _<number>_ > number ( number [ a n }
= ( n / _<number>_ ) ;
f ( k % _<number>_ == _<number>_ )
[ i ] = temp ; } } long
loat m = a [ _<number>_ ] ;
[ j ] = k ; } } }
f ( arr [ i ] > arr [ ] = _<number>_ [ , [ int int int [ int [ int [ int [ int [ int [ i num ] ] ] ] ] = [ i ] ) {
f ( arr [ j ] > arr [ j int _<number>_ > {
rintf ( _<string>_ , a [ ( n ) for ( if ( _<string>_ start a a number int int % + _<number>_ = _<number>_ n = _<number>_ = _<number>_ s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s ) ;
or ( int d = _<number>_ ; d <= n med array j j j { + _<number>_ ( + + + _<number>_ < i < number { i } = _<number>_ n = i } + _<number>_ = _<number>_ = i } + + + _<number>_ = i } , , ] = _<number>_ = i } , , , , , , , int number s ) {
rintf ( _<string>_ , a [ j ] ) < {
rintf ( _<string>_ , a [ i ] ) ( % > _<number>_ = + j ] [ < ] [ < < _<number>_ n ) > }
f ( j % _<number>_ == _<number>_ )
ed = median ( num , n ) ;
= ( a [ ( n / _<number>_ ) scanf ( _<string>_ + ( j / _<number>_ ] ] ] ] ] ] ] ] ] ] ] / _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] / _<number>_ ] ] ] ] ] / _<number>_ ] ] / _<number>_ ] ;
rintf ( _<string>_ , med ) ; } }
canf ( _<string>_ , & bid [ i ] ar ar ar ar ar > swap ar ar number ) > swap > ] > ] > ] > ) > > > > / _<number>_ > ) j number ) j number ) > ] > ] > ] > ) > > > > / _<number>_ > ) j number ) j number ) > ] > ] > ) > > > > / _<number>_ > ) j number a number ) > swap > ] > ] > ] > ] > ] > ] >
rintf ( _<string>_ , z ) ; }
rintf ( _<string>_ , bid [ n / _<number>_ = _<number>_ arr ] ] [ median }
rintf ( _<string>_ , ( bid [ n / _<number>_ [ n ] } - number ] [ median } _<number>_ = _<number>_ i i [ i = _<number>_ = _<number>_ = _<number>_ = - _<number>_ = * < < < < [ i = _<number>_ ] a a a start > [ i = _<number>_ = _<number>_ = * < < < < [ , [ , int int num = _<number>_ num num num = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
unk> = ( bid [ <unk> ] + array < <unk> = _<number>_ ( med int , ( med = _<number>_ ( med ! _<number>_ ( med - _<number>_ ( med ! _<number>_ ( med ( med - _<number>_ ( med ! _<number>_ ( med - _<number>_ ( med ! _<number>_ ( med ! _<number>_ ( med ( med - _<number>_ ( med ! _<number>_ ( med - _<number>_ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
rray [ j ] = temp ; } }
nt t = bid [ _<number>_ ] ;
[ j ] = tmp ; }
unk> ( a , start + _<number>_ , end < m ) < < < _<number>_ < { _<number>_ if ( <unk> ( ; ;
rr [ i ] = temp ; } } string [ i ] = int if ( size n n ) < size < size < size < size int if ( if ( if a < if ( if ( = = = = = = = = = = _<number>_ ( ] ( = ] ( = = = = _<number>_ ( ] ) ) ) )
f ( arr [ j ] < arr [ i a ( ] ) ) }
loat median ;
f ( n % _<number>_ == _<number>_ ) {
lse if ( a % _<number>_ == _<number>_ ) } {
ort ( s , _<number>_ , n - _<number>_ = { _<number>_ n ( ) b ( ) b b b b b ( ) b b b b b ( ) b b b b b ( ) b b b ( ) < ) < < < < * number else if ( if ( ) < _<number>_ n b b b b b b b b b b b ( ) < ) < < < * number ( ) < _<number>_ < * * * * * * * * * _<number>_ n ( ) <
nt a [ _<number>_ ] ;
ong int n , i , j = _<number>_ i ;
wap ( a , start , index ) ;
unk> ( a , start + _<number>_ , start ) ; } n < <unk> ) ; n int i ( , i + _<number>_ ( , ( , ( , ( , ( , ( , ( , ( , ( , < i < { end < , < , [ i ] < { end < <unk> [ x ] < <unk> < A [ _<number>_ ] < <unk> < <unk> ) < A [ i ] < <unk> < A [ y ] < <unk> < A [ y ] < <unk> < A [ y
or ( i = _<number>_ ; i < }
rintf ( _<string>_ , med ) ; }
or ( int j = _<number>_ ; , <= , + _<number>_ ( } - _<number>_ int } - _<number>_ i i i i ++ i i i i i i int {
rr [ j ] = arr [ ] [ n [ n i i i i i i i i , {
nt a [ n ] ;
rintf ( _<string>_ , median2 ) ; }
[ y ] = temp ; }
[ x ] = a [ y [ y [ x > n > n > n > n > n > n > n > n ) ;
d ( s - _<number>_ ) ;
d ( s , i + _<number>_ ( ) number ; printf ( _<string>_ n n n ] i ] ) ; mid , n [ n [ n n n n n n [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
e = ( _<number>_ ) * ( , [ + _<number>_ i - [ number { _<number>_ n - [ { temp = _<number>_ = > > _<number>_ string _<number>_ = _<number>_ [ { int return ) n a < ) n = ) n - _<number>_ a a i - _<number>_ ( start i > _<number>_ int [ start = _<number>_ = _<number>_ = [ start + _<number>_ = _<number>_ = _<number>_ = _<number>_ = [ start = _<number>_ = _<number>_ = [ start = _<number>_ = _<number>_ = [ start = _<number>_ = _<number>_ = [ start =
ong int n , a [ _<number>_ ] j , + + sort ( = a a a a a a a a i ] ] ] int sel ] int sel int sel i > _<number>_ i i > { _<number>_ number > _<number>_ i i > n > _<number>_ i i > n i > temp i > _<number>_ i i > _<number>_ i i > { _<number>_ number > _<number>_ i > { _<number>_ number a < _<number>_ i > { _<number>_ number a < n - [ _<number>_ ] > sel a a a < temp
= a [ index ] ;
= i ; } } }
rintf ( _<string>_ , median ) ; - _<number>_ ; m = = _<number>_ ( = = _<number>_ int index int index int index i i i i i i i i i i int index int index int number int int } int number int number int int i int number int number int number < number int number int number int number int number int int int int int i int > string int number < string int number int number int number int number int number int number int number int number int number int number int
nt index = _<number>_ ;
[ x ] = a [ y > temp ;
rintf ( _<string>_ , a [ index ] < number , { for ( number a a [ end ] , { ; number = { number [ end ] , m ; n ++ , n - number , n - number , n - number , n - number , n , number [ end ] , m ; n ++ , n , < < number [ end ] , m ; n ++ , n - number , n - number , n - number , n - number , n , < < number [
loat s [ _<number>_ ] ;
f ( p == n ) {
= ( a [ n / _<number>_ i [ [ [ = + _<number>_ < a < = y [ a i + _<number>_ i y y y _<number>_ i < _<number>_ < ] < ] < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
= ( arr [ n / _<number>_ [ ] > i + _<number>_ { - _<number>_ ] i + _<number>_ i i int temp int _<number>_ int _<number>_ int _<number>_ int _<number>_ int _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ <
ids [ i ] = bids [ ( ) [ number ) + _<number>_ n n n n n n ( = = _<number>_ i i i i i i i ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] }
canf ( _<string>_ , & arr [ n ] ( = ) ) ; start ++ ) ; start ++ ; n ) ; n ++ ) } n = + > ; n ++ ( = - = _<number>_ ( = = = _<number>_ < = _<number>_ ( > > > _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( > = _<number>_ < = _<number>_ ( >
oid mergesort ( long int arr [ ] [ ] [ , { , { , = _<number>_ ;
edian = bids [ n / _<number>_ [ number [ _<number>_ = ] ( start [ start number _<number>_ ] < _<number>_ ] int for ( ) ;
or ( i = _<number>_ ; i < n ( j }
f ( t % _<number>_ != _<number>_ ) {
um [ j ] = t ; } } }
[ y ] = temp ; }
nt i , p , n = _<number>_ j j k k k > _<number>_ , / / / if n {
nt median = n / _<number>_ ;
eturn index ; }
= a [ ( n , _<number>_ number number ( , , ] ) o - _<number>_ ( a ) n int - _<number>_ ) number number number number number - _<number>_ number number number - _<number>_ number number number - _<number>_ number - _<number>_ number number number number - _<number>_ number - _<number>_ number * ] number ] number ] number ] number
f ( a [ k ] > + + a < / _<number>_ )
f ( ( j % _<number>_ ) != _<number>_ number number ( n return _<number>_ number ) ;
emp = arr [ j ] ;
oid sort ( int start , int end , int a [ ] ( n ( n ) ( n ( + _<number>_ ) d ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( + _<number>_ ( n ) ( +
or ( i = _<number>_ ; i < n < % ; i ++ ( = _<number>_ ) ; {
f ( a [ j ] > ar + ( ) i ( i ( n [ ] ) n ;
nt n , i ;
r [ j + _<number>_ ] = ] < int > ;
or ( j = _<number>_ ; j <= n - _<number>_ ( { for ( + + _<number>_ = _<number>_ ) ) start = _<number>_ ) start = _<number>_ ) start = _<number>_ ) start = _<number>_ ) start ; start start ; start start ; start start ; start start ; start start ; start start ; start start ++ , a ; start start ; start start ++ , a ; start start ; start {
nt num [ n ] , i ;
rintf ( _<string>_ , f ) ;
ort ( a , start + _<number>_ a a , if ; med = num = _<number>_ number { med int ] < start , [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
rintf ( _<string>_ , f / _<number>_ ) ; }
[ a ] = array [ b ] ;
ong int n , i , j ;
rintf ( _<string>_ , ( a + b ) , _<number>_ ; ] , int if ( int if ( _<string>_ ; ( _<string>_ i i i , ) end _<number>_ , + _<number>_ , + _<number>_ == _<number>_ , + ( if ( _<string>_ i return _<number>_ , m , int if ( int if ( _<string>_ return _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ , if ( _<string>_ return _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ , + _<number>_ == _<number>_ , +
edian = ( bids [ n / _<number>_ a + [ ) [ , / } _<number>_ num num num num number _<number>_ = _<number>_ = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ( [ + + _<number>_ num ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
edian = bids [ ( n + _<number>_ ) / _<number>_ start start n }
= bid [ j ] ; }
id [ i ] = temp i scanf ( [ ; ; int start a start int max [ ; - j { % _<number>_ [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ number [ , [ , [ , [ , [ , [ , [ , [ , [ , [ , [
oid swap ( int a , ] ( ( > printf ( A number B ) int M int <unk> ) i < N ;
[ j ] = x ) ) ) , ] , b ) int for ( med + [ int int int n n n n n n ( num = _<number>_ ( num = _<number>_ ( num scanf ; int num = num = num = num = _<number>_ ( num = num = _<number>_ ( num scanf = _<number>_ ( num = num = _<number>_ ( num scanf = _<number>_ ( num = num = _<number>_ ( num scanf = _<number>_ ( num = num = _<number>_ ( num scanf = _<number>_ ( num = num =
ort ( a , n , s + _<number>_ ) ; }
ort ( a , n n n n n n n n n n n n n n n ] ; + _<number>_ ; { {
or ( int i = _<number>_ ( i scanf ( _<string>_ = _<number>_ = ] ) > number ] ) > = number ] > number ] > number ] > = = = = = = _<number>_ number j number j ++ ( ( med - = _<number>_ ( j - j ( med ++ ( ( med ++ ( ( med - printf ( _<string>_ ( med n ( med ( = - j ++ ( ( med ++ ( ( med ( med ++ ( ( med - printf ( _<string>_ ( med ++ ( ( med
rintf ( _<string>_ , m ( ] ( / [ ] ( ] ( i ( [ [ [ number end - _<number>_ { _<number>_ { = _<number>_ , number i end + _<number>_ { = _<number>_ , number , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ,
rintf ( _<string>_ , k [ ( n - _<number>_ ) / _<number>_ num ( ] ( ] j ( [ _<number>_ ( [ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ ( [ [ _<number>_ = _<number>_ = _<number>_ = - ) = i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = - ) = _<number>_ = _<number>_ ( [ [ _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( [ [ _<number>_ = number
unk> ( a , _<number>_ > ) < ( ( num ;
unk> ( a , _<number>_ ;
ong int sum = ( ] } ] } ] = ( ] d [ { void n void n t { arr , string ] / ] ) ;
rintf ( _<string>_ , sum for ( _<number>_ ) ) > int = _<number>_ < s < _<number>_ > _<number>_ ) , }
or ( i = _<number>_ ; i < n ; i ++ ) {
= ( a [ n / _<number>_ [ n [ n [ = / _<number>_ i i i ] number _<number>_ ] number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ [ , , , _<number>_ int / _<number>_ int , }
= ( a [ n / _<number>_ n + ] [ ( } - _<number>_ number & _<number>_ a number _<number>_ number number number _<number>_ number number number _<number>_ number [ , number - _<number>_ number number number number [ , , ) number _<number>_ number number number _<number>_ number number number _<number>_ k k - _<number>_ i i i i i i i i & [ n k , if ( n & [ n k , [ ) ]
rintf ( _<string>_ , s = _<number>_ number number number number number number number number number number number - _<number>_ [ number int number [ number s = _<number>_ int number i [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k [ k [ _<number>_ [ k
f ( a [ j i ; h ( h i + printf ( _<string>_ } _<number>_ = _<number>_ a a + ) = _<number>_ a int { / _<number>_ a int { / _<number>_ a int + > }
loat med ;
int temp = a / _<number>_ - _<number>_ ; }
or ( i = _<number>_ < _<number>_ < | < } + _<number>_ < } h ( _<string>_ ( + _<number>_ i i i i i i i i i i - _<number>_ ] ] ] ] ] ] ] ] i i i i i i i i i i i i ( n - ] ( _<string>_ ( n - number ( ( n - number ( n - ] ( _<number>_ ( n - number ( n - ] ( ) ( _<string>_ ( n - number ( n - number ( n - number ( n
or ( k = _<number>_ ( ] } _<number>_ t a <= < < < < < < < ( number for ( number for _<number>_ > _<number>_ > + _<number>_ > } ) > ; = ++ > }
or ( i = _<number>_ ; = < i ( j > j > j > , ) ] i i i i i i i ) j ++ ) j ++ > + = _<number>_ ( = _<number>_ } ( = _<number>_ { = _<number>_ { = _<number>_ { = _<number>_ { ] [ ] number _<number>_ ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( a
++ ; } }
f ( i != h )
or ( j = _<number>_ , ) > a a | _<number>_ ( = _<number>_ -- ; = -- ( ( number -- ( ( string - ) -- i i i i i i i i i i i i ] ] ] ] ] ] ] ] ] ] ] ] ;
nt h , i , i ) ) ) ) ) ) ) = _<number>_ > _<number>_ > i > H > <unk> ) h = _<number>_ ( if ( = number _<number>_ > i > _<number>_ > H > _<number>_ > H > H > H > H > _<number>_ > <unk> > <unk> )
nt h , i , < ) ) ) ) ) ) = _<number>_ ( if ( number < _<number>_ ) = ( k }
oto x ; }
rintf ( _<string>_ ) ; +
or ( j = _<number>_ ) ( = _<number>_ double = ; - < ) > ) }
or ( i = _<number>_ ) ) printf ( _<number>_ h j ++ ( ] ( a ++ ( i i i i i i i ( ( int ( ( if _<number>_ > string > _<number>_ k > h > a ) ) ) ) ) ) > a > _<number>_ long [ + _<number>_ arr ++ > n > _<number>_ arr ( n - int int > _<number>_ > = _<number>_ arr ) ( int > _<number>_ > _<number>_ arr - n > _<number>_ > int int arr > _<number>_ > _<number>_ > n > _<number>_ arr ++
or ( j = _<number>_ > _<number>_ ( - - string = _<number>_ number = _<number>_ for ( [ [ [ [ [ [ [ [ ) _<number>_ s s s { - _<number>_ for ( [ [ [ [ [ number , ] , _<number>_ k , _<number>_ k , number ++ number number string - _<number>_ } } string _<number>_ } string _<number>_ } string _<number>_ } string _<number>_ } string _<number>_ } string _<number>_ } > _<number>_ } > _<number>_ } > _<number>_ } > _<number>_ } > _<number>_ } > _<number>_ } > _<number>_ } >
or ( a = _<number>_ ; & <= }
or ( j = _<number>_ ; j < i ; & printf ( _<string>_ > h > int * * { _<number>_ printf ( _<string>_ i ) ; k ++ > }
f ( ( ( i + j ) == ( n i i i > < < < ) ) || ( ( - { { _<number>_ x == < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
nt i , j , k , n ;
f ( i < h && i > _<number>_ )
or ( j = _<number>_ ; j < _<number>_ ; j ++ )
or ( j = n - _<number>_ ; j > _<number>_ number j -- number number number number ( > , , -- ;
or ( j = _<number>_ ; j <= ( _<number>_ * i n n } ; + + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < n - _<number>_ < { n ++ ( n i ( { * n ( { for ( n number _<number>_ ( n i i if ( n i ( { n <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
rintf ( _<string>_ ) ; } } } } }
f ( ( j == ( n + k ) < < < < > > > > > > > - { _<number>_ h _<number>_ h _<number>_ - , - , , j < > n < , n < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ( n k ) ) -
nt i = _<number>_ ;
or ( k = _<number>_ ; k <= ( n - _<number>_ ) ; for ( for ( int for ( for ( = _<number>_ ) )
lse printf ( _<string>_ ) ; }
nt i , j , n ;
f ( i > n - _<number>_ + i )
hile ( ct <= rt + _<number>_ ) {
or ( s = _<number>_ ; s < _<number>_ * h - _<number>_ ; n ++ )
f ( ( j == n + _<number>_ - i = _<number>_ number + number == ct - k int + _<number>_ ) )
nt i , j , h , h ;
or ( j = _<number>_ ; j < int int for ( + + _<number>_ ) > }
or ( i = n + _<number>_ - j ; number < + _<number>_ { ; + = ; i = + _<number>_ > number ;
or ( i = _<number>_ ; i < h ; + ++ ) i ++ < - _<number>_ ) ,
or ( j = _<number>_ ; j <= _<number>_ * = _<number>_ number { ++ + > _<number>_ * } - _<number>_ ) }
printf ( _<string>_ ) ; }
or ( j = _<number>_ ; j <= _<number>_ * h number _<number>_ = _<number>_ number j ++ ; + ++ ; + ++ ( ( + - _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + + + > + _<number>_ number + _<number>_ number + i ; + _<number>_ number + + _<number>_ number + + _<number>_ number + _<number>_ number + i ; }
or ( j = _<number>_ ; j <= _<number>_ * h string _<number>_ + { _<number>_ j ++ ; + + _<number>_ number + + _<number>_ = + _<number>_ ) } }
or ( j = _<number>_ ; j < ( _<number>_ * n ) ; printf = printf ( _<string>_ , j ( _<number>_ s + + _<number>_ s s ( + } _<number>_ ( + } _<number>_ ( + _<number>_ s + _<number>_ s ( + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s + _<number>_ ( + _<number>_ s +
or ( m = _<number>_ ; m <= _<number>_ * j string _<number>_ < k string ++ number = _<number>_ ; m = m ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number ; h ++ number number number number number number number number number number number ; h ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number
lse { for ( k = _<number>_ ; k <= _<number>_ k string l - _<number>_ ; k ++ ) }
or ( i = _<number>_ ; i <= { string <= string ( string ++ ; j = h ++ ) } {
rintf ( _<string>_ ) ; }
nt h , i , j , n = _<number>_ , h ;
or ( s = _<number>_ ; s <= _<number>_ * h - _<number>_ ; s ++ )
or ( space = _<number>_ ; space <= { { h ++ < _<number>_ < number for ( printf ( _<string>_ l for ( for ( + n = _<number>_ ) < k ctr = ctr = _<number>_ < i < , } - i number number number number number number number number - i number ) -
hile ( space == med + i || med j } ;
or ( i = _<number>_ ; i <= _<number>_ <END_BUG> h j j ++ ; = ++ )
f ( i != ( h - _<number>_ ) )
nt i = _<number>_ , j = _<number>_ , h = _<number>_ , l , l , l + _<number>_ ) ) )
nt a , i , j ;
or ( j = _<number>_ ; j <= < < > ; h ++ ; }
or ( k = _<number>_ ; k <= + + _<number>_ > k > for ( }
or ( k = n - i + _<number>_ ; i <= n } , h + _<number>_ ( printf ( _<string>_ j printf ( _<string>_ j printf ( _<string>_ j printf ( _<string>_ h j { ; j = j { { } ; j = j { } ; + + + + _<number>_ ; + + _<number>_ ; for ( j = i } + _<number>_ ; + <= i { j = i { { j <= i { - + + _<number>_ ; + + _<number>_ ; + _<number>_ = j { { { _<number>_
or ( l = _<number>_ ; l <= _<number>_ * j - _<number>_ ; printf = printf ( _<string>_ ; - - _<number>_ ; - _<number>_ ; - - _<number>_ ; - _<number>_ ; if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
or ( l = _<number>_ ; l <= _<number>_ * j , _<number>_ ; if ( if ( k number _<number>_ ; k <= _<number>_ else k number k number _<number>_ ; k = n } _<number>_ ) if ( n number - _<number>_ ) if ( n number _<number>_ <= _<number>_ - n string _<number>_ ) if ( n number - _<number>_ ) if ( n number - _<number>_ ) if ( n string _<number>_ <= _<number>_ - n string _<number>_ ) if ( n number - _<number>_ ) if ( n number - _<number>_ ) if ( n
or ( k = _<number>_ ; k <= _<number>_ * n k k _<number>_ ) , k ++ = string ++ ) string = _<number>_ k printf ( _<string>_ } _<char>_ ) ; h ++ ) string = _<number>_ k char char h ) string = _<number>_ k { j ++ ) string = _<number>_ k char char h ) string = _<number>_ k ; h ++ ) string = _<number>_ k char char ) string = _<number>_ k ; h ++ ) string = _<number>_ k char char ) string ++ ) string = _<number>_ k char char h
lse for ( k = _<number>_ ; k <= _<number>_ * j - _<number>_ ) ) - ( string ++ = _<number>_ = _<number>_ for ( { { { { { {
nt h , i , j , n = _<number>_ , s ;
nt n , i , j , k ;
nt h , i = _<number>_ , j = _<number>_ , k = _<number>_ , l = _<number>_ = _<number>_ = _<number>_ )
or ( i = _<number>_ ; i <= + ( = i ++ ) ) +
or ( space = _<number>_ ; space <= num - i < + = i ; num ++ ) +
nt i , j , k , n ;
or ( j = i ; j <= ) < ) } = _<number>_ < - string ( } - _<number>_ ;
or ( j = _<number>_ ; j < ( ( ( ( ( _<number>_ * ( ( ( > ( ( ) - _<number>_ = _<number>_ - ) = _<number>_ = ) + ( ( k - ( ( { ( _<number>_ * ( ( l ++ = _<number>_ = _<number>_ i = _<number>_ = - ( ( l - ( ( j - ( ( ( _<number>_ * ( ( j ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ ; i < space ; i ++ ( number ++ )
:
f ( i == _<number>_ ) {
or ( j = _<number>_ ; j <= i j } - _<number>_ < string h _<number>_ ( n j i - _<number>_ ) ) i = string { - _<number>_ ; = + _<number>_ ; m = } char }
or ( i = _<number>_ ; i <= > > ( _<number>_ int - _<number>_ ( number { = ) + _<number>_ * , k - _<number>_ ) > ( _<number>_ * string l - _<number>_ ) > number > _<number>_ if ( number i j <= ( _<number>_ if ( number j j j j j j j printf ( _<string>_ m ( ( + _<number>_ for ( ( ( ( _<number>_ for ( ( _<number>_ for ( ( _<number>_ for ( ( _<number>_ for ( ( _<number>_ for ( ( _<number>_ for ( ( _<number>_ for ( (
or ( i = _<number>_ ; i <= ( _<number>_ & int int ) j ++ ; ) i ++ > _<number>_ > i string _<number>_ > , , , ++ ; j ++ ) ,
or ( j = _<number>_ ; j <= = = number ( i = _<number>_ = _<number>_ number + string = _<number>_ number number number i number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
rintf ( _<string>_ , _<char>_ ) ; }
or ( i = _<number>_ ; i < _<number>_ * for ( number int = _<number>_ ; number ++ ) b ++ ) }
f ( i == _<number>_ ) continue ;
or ( i = _<number>_ ; i <= _<number>_ * h for ( i <= string ( string <= string ( j ++ ( ( string - i > _<number>_ > _<number>_ > string > string > _<number>_ > string > _<number>_ > string > string > string > string > string > i > _<number>_ > string > string > string > string > string > string > i > _<number>_ > string > string > string > string > string > i > _<number>_ > string > string > string > string > string > i > _<number>_
or ( j = n - i ; - >= _<number>_ ; - char j j ) number -- > N ; i >= _<number>_ < for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for (
f ( k > _<number>_ ) {
or ( i = _<number>_ ; i < _<number>_ * n < n < , < , < printf ( _<string>_ ) < < < _<number>_ * }
lse if ( i == n ) {
or ( j = _<number>_ ; j <= _<number>_ <END_BUG> i for ( = _<number>_ ( k ++ ( k ++ > N > _<number>_ > N * = _<number>_ v j ++ > _<number>_ > N int j > <unk> > _<number>_ > <unk> > <unk> > <unk> > <unk> > _<number>_ > <unk> ) > _<number>_ > <unk> ) ) {
pa ( _<number>_ + j - _<number>_ + n ) < n ;
pa ( _<number>_ + j - _<number>_ + n ) ;
or ( k = _<number>_ ; k <= _<number>_ int for ( h + _<number>_ < _<number>_ < number < _<number>_ int = _<number>_ < _<number>_ & = & = _<number>_ - number <= _<number>_ - i < _<number>_ - string < _<number>_ - i < _<number>_ - string < _<number>_ - i < _<number>_ - string < _<number>_ - i < _<number>_ - string < _<number>_ - i < _<number>_ n < j < , ) if ( int n ) if ( int n ) if ( int n ) if ( int n ) if ( int
nt n , i , j , k ;
lse if ( j - i == n number _<number>_ ) {
f ( b > _<number>_ ) {
nt i , j , n , b i number _<number>_ number * ( - _<number>_ ) < _<number>_ number ) < < _<number>_ < { _<number>_ , _<number>_ } < for ( = _<number>_ < N < _<number>_ > N > N > N > N > N < _<number>_ > N > N > N > N > N > _<number>_ > N < _<number>_ ;
nt i , j , k , x number ;
nt n , i , j , space ;
or ( i = _<number>_ ; i < _<number>_ * string ; number ++ ) }
or ( b = _<number>_ ; b <= a - number ; b ++ ; string ++ ) } {
or ( k = _<number>_ ; k <= ( ( _<number>_ | for ( = _<number>_ v v ; = ++ ; j ++ ; j ++ ; j ++ ; string ++ ; string n ; n ++ ; string ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ;
or ( k = _<number>_ ; k <= ( i - _<number>_ ) ( number ++ ; + ++ ; = ++ < string < _<number>_ ; j ++ ; string string ; string n ; n ++ ; string ++ ; string n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ; n ++ ; n ;
or ( j = _<number>_ ; j <= ) ) n ++ > _<number>_ ! = ( _<number>_ ! = _<number>_ int string for ( string <= ; string ++ ) } }
or ( j = _<number>_ ; j <= > > > > ; string ++ ( string for ( string ( _<number>_ & number printf ( _<string>_ { _<number>_ j <= ) string _<number>_ ( = - = _<number>_ int { { { { { { { { { char { char { for ( { { { for ( { { { for ( { { { for ( { { { for ( { { { for ( { { { for ( { { { for ( { { { for ( { { { for (
nt h , b , i , j > k ;
or ( k = _<number>_ ; k < s ; - ++ ) {
nt j ;
or ( j = _<number>_ ; j <= ( _<number>_ if ( + j ; n <= ) {
lse if ( i > _<number>_ && j < n ) {
f ( j == n + _<number>_ - i ) {
ctr ++ ; }
++ ; } }
nt n , j , i , for ( = _<number>_ < _<number>_ ) + & & & & for < _<number>_ number ) < {
or ( i = _<number>_ ; i <= ( ( _<number>_ k h + _<number>_ ) ; , ++ )
f ( j != h )
f ( i != h )
nt i , j , n , space ) ) ) ) ) ) ) ) ) ) ) = _<number>_ = _<number>_ = _<number>_ = number > i ( i }
or ( k = _<number>_ ; k < * ( j - } _<number>_ ) < _<number>_ < = _<number>_ > = _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ )
or ( k = _<number>_ ; k < = = = = _<number>_ ( , ) < _<number>_ < + _<number>_ > number > number > number > number > number > number > = _<number>_ > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number
or ( j = ( h - _<number>_ > number ) ( * b for ( } string for _<number>_ ; char , , , , ( , k k k printf ( _<string>_ { _<number>_ | | -- ( ( } }
or ( j = _<number>_ ; j <= _<number>_ a ( = printf ) printf ( _<string>_ ; string ++ ; - - _<number>_ ; - - i ; - - _<number>_ ( string }
or ( j = _<number>_ ; j <= ( n * _<number>_ ) number _<number>_ ; } {
nt n , i , j ;
or ( j = _<number>_ ; j < _<number>_ * printf ( _<string>_ number + _<number>_ number printf ( _<string>_ number = = = = = = _<number>_ * = = = = = = = _<number>_ * = = = = = = = = = _<number>_ * }
or ( k = _<number>_ ; k <= j & _<number>_ ( }
or ( k = _<number>_ ; k <= = / _<number>_ ( printf ( _<string>_ ; - - _<number>_ ) )
f ( i != _<number>_ ) { printf ( _<string>_ ) < for ( , , , <unk> ) < { } - _<string>_ ; - _<number>_ < } ) ctr ( _<string>_ ; string _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_
or ( i = _<number>_ ; i > }
or ( i = _<number>_ ; i <= string int n j j + string ; , = , ++ ) , n ) char string number - _<number>_ ;
f ( i == h )
or ( s = _<number>_ ; s < _<number>_ * h - _<number>_ ) ) { s ++ )
or ( k = _<number>_ ; k < = = = ( = - _<number>_ > number > _<number>_ int , number number _<number>_ number string number _<number>_ number number number ( ; ctr = ctr if ( ctr + _<number>_ ( ctr ( { _<number>_ int ctr ( ; ctr = ctr if ( ctr + _<number>_ ( ctr ( { { ( ctr + _<number>_ ( ctr ( { _<number>_ int ctr ( ; ctr < ; ctr = ctr if ( ctr + _<number>_ ( ctr ( { { ( ctr + _<number>_ ( ctr ( {
nt i , n , j ;
or ( i = _<number>_ ; i < { < _<number>_ ; = ++ ; = ++ ; = ++ ) } h ; h ++ ; h ++ ; h ++ ; ctr ++ ; ctr ++ ; ctr ++ ; ctr ctr ( ( printf ( _<string>_ last _<number>_ ( + _<number>_ ( printf ( _<number>_ ( printf ( _<string>_ last _<number>_ ( printf ( _<string>_ last _<number>_ last + printf ( _<string>_ last _<number>_ ( printf ( _<string>_ last _<number>_ ( printf ( _<string>_ last _<number>_ ( printf ( _<string>_ last _<number>_ ( printf ( _<string>_ last
nt i , j , n , for ( for ( for ( h i i + _<number>_ ; h < last = _<number>_ ( ( int ( ( ( ( _<number>_ ( - & ( ( main _<number>_ ( & ( ( main - _<number>_ ( & ( ( main + - _<number>_ ( main number ( ( ( ( ( ( & ( ( main _<number>_ = & & { ( { else main number ( ( main number ( ( ( ( ( - & & ( { else main ( ( ( _<number>_ ( & &
nt h , i = _<number>_ , | + _<number>_ j j + _<number>_ j j + _<number>_ j ( number + _<number>_ ( } - _<number>_ = _<number>_ = _<number>_ = _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s + _<number>_ ( s ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ = _<number>_ - int ( ( <START_BUG> - _<number>_ - s ( ( (
or ( j = _<number>_ ; j <= } ; j ++ )
nt a , b , i , j ;
f ( ( j != _<number>_ ) || ) != _<number>_ <START_BUG> i - _<number>_ ( j for ( > _<number>_ ( i }
or ( k = _<number>_ ; k <= = = = = = _<number>_ ( = - = _<number>_ ; for ( char char char char ; char char { - _<number>_ ) -
t = ct ;
hile ( ct <= rt number _<number>_ ) n - _<number>_ < number < _<number>_ ;
or ( k = _<number>_ ) ) j <= ; int for ( for ( for ( k = _<number>_ ) ) printf ( _<number>_ i } ; l <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > _<number>_ int for ( for ( for ( for
nt n , l , i ;
or ( k = _<number>_ ; k <= _<number>_ * ctr - _<number>_ ; k ++ )
nt ct ;
nt h ;
nt a , b , = ( printf ( a i ) ) ;
or ( i = _<number>_ > _<number>_ > a < A ( + _<number>_ ; number < string < i < i < number ; number ++ ( = _<number>_ ( + _<number>_ ( i ++ ) ) ) ) {
or ( j = _<number>_ ) ) = _<number>_ ( n a a a number _<number>_ , i - _<number>_ ( string ++ > + _<number>_ ; ct ++ > _<number>_ > i ( i for ( + _<number>_ ( i printf ( _<string>_ a - number ++ ( ( { i ++ ( {
for ( j = _<number>_ ; j < { ct < printf ( _<string>_ k printf ( _<string>_ for ( { _<number>_ printf ( _<string>_ for ( j for ( n printf ( _<string>_ k , n string _<number>_ ) > j string _<number>_ string j ++ ) ) >
or ( l = _<number>_ ; l < ( _<number>_ * h ) ; l ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) -
or ( i = h < + _<number>_ < _<number>_ < ct ; + > _<number>_ ; = -- > number -- > j > = _<number>_ < + _<number>_ < i < number < _<number>_ < = _<number>_ < number < number < _<number>_ < number < number < _<number>_ < number < number < _<number>_ < number < number < number < _<number>_ < number < number < _<number>_ < number < number < number < _<number>_ < number < number < _<number>_ < number < number < number < _<number>_ < number < number < _<number>_ <
or ( i = h < _<number>_ < _<number>_ < { = _<number>_ < - ( = _<number>_ -- ) ) for ( = = { = _<number>_ ; number > _<number>_ < - ( = _<number>_ -- ; number -- ; l -- ; l -- ; l -- ; l -- ; l -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_ -- ; * + _<number>_
or ( k = _<number>_ ; k <= _<number>_ * n - _<number>_ ; k ++ ) j ++ ) j ++ ) j <= _<char>_ ; +
or ( b = _<number>_ * b - _<number>_ ( { B ( - _<number>_ > N * _<number>_ ) ) ; h = , n n n n - _<number>_ ; j = k - _<number>_ ; - _<number>_ > j if ( j if ( j if ( j if ( j if ( for ( for ( for ( for ( for { _<number>_ ! } _<number>_ - _<number>_ ) - { _<number>_ char B = _<number>_ ! _<number>_ i - _<number>_ i - _<number>_ ) string > _<number>_ > N - _<number>_ ) string = for
or ( a = _<number>_ < _<number>_ < { for ( for ( for ( for ( int , = _<number>_ > _<number>_ > { j <= { j ++ ; j ++ ; j ++ ) string > _<number>_ > for ( for ( for ( for ( for ( for ( for ( for ( - { for ( - = _<number>_ > _<number>_ > string > string > string > string > string > string > string > string > string > , - _<number>_ > > _<number>_ > , - _<number>_ > > _<number>_ > i
f ( ( i + string == ) || > > , , string == string + _<number>_ ( = n - _<number>_ ( ( i ct string == printf ( _<string>_ printf ( _<string>_ , }
f ( ( i + string == > ) || ) || > > + string ) n || > string ) ,
f ( j == a ) {
f ( ( j == _<number>_ ) || ( j == ( ( _<number>_ * i ) - _<number>_ ( i ( + _<number>_ char {
f ( i == _<number>_ )
or ( l = _<number>_ ; l <= ( _<number>_ * { for ( * * ( j = _<number>_ ( n - _<number>_ ( { j ++ ( char ( char ( ( _<number>_ * i ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ * - _<number>_ ( - _<number>_ ( + _<number>_ ( + _<number>_ ( - _<number>_ * - _<number>_ ( - _<number>_ ( + _<number>_ * - _<number>_ ( - _<number>_ ( + _<number>_ * - _<number>_ ( - _<number>_
or ( i = _<number>_ > _<number>_ > printf ( _<string>_ , number ; number ++ ; number ++ ; number ++ ) - _<number>_ ; - _<number>_ ; char {
or ( i = _<number>_ < _<number>_ < + _<number>_ ; number <= number < n < + _<number>_ ) }
or ( j = _<number>_ < _<number>_ < , < , } ; number <= }
or ( j = i < _<number>_ < { { { { { { string ( _<string>_ ) < ( , for ( string printf ( _<string>_ ) ) < ;
or ( l = _<number>_ ; l <= j ; l ++ ) {
or ( l = _<number>_ ; l <= j ; l ++ ) {
f ( ( j == < < < ; }
lse if ( j == i ) { printf ( _<string>_ > i ) ; } }
lse if ( j == i ) { { { { { - > { i _<string>_ > number ; { , number = + _<number>_ ) } { } i ++ ; i _<string>_ ; i ++ < number < number < printf ( _<string>_ < number < = = _<number>_ < printf ( _<string>_ < = < = _<number>_ < printf ( _<string>_ < = = _<number>_ < printf ( _<string>_ ; { { string = = + _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( i = _<number>_ ; i <= = = N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N ( n ++ ; = ++ ; = ++ ; = ++ ; printf ( _<string>_ { n { = _<number>_ { ( = _<number>_ { ( = n
f ( i + j == n + _<number>_ > i > i number _<number>_ > i > i number _<number>_ > i > }
or ( k = _<number>_ ; k <= ( ( _<number>_ * n ) - _<number>_ > i > _<number>_ > i > _<number>_ > } ) ; else & & & & & & & & & & ) i ++ ) i
pa ( _<number>_ + j + n ) ;
nt i , j , n , k ) ) ) ) ) ) ) ;
or ( i = _<number>_ ; i <= _<number>_ & string printf ( _<string>_ ) ;
f ( t == ( n + _<number>_ - i ) || t == ( n + i - _<number>_ ) ) {
or ( t = _<number>_ ; t < ( _<number>_ * n ) ; t = t + _<number>_ ) {
f ( ( ( j == _<number>_ ) || ( + + _<number>_ for ( i string _<number>_ ( { ) ( {
or ( j = _<number>_ ; j <= _<number>_ * i - _<number>_ ; n = n * _<number>_ ) printf ( _<string>_ j - _<number>_ < string > _<number>_ ; i = i { { { _<number>_ i n ) ctr ( ;
or ( j = _<number>_ ; j <= j { = = _<number>_ < n { = ( = - + + + + number ; = ++ ; number ++ )
f ( ( j == ( n + & & ( + else ) ; string == > ) < ) > ) j = > > > > > { _<number>_ h == > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( j = _<number>_ ; i <= _<number>_ & n for ( i ++ ; { {
f ( h > _<number>_ )
or ( j = _<number>_ ; j < _<number>_ ; j ++ )
or ( j = _<number>_ ; j <= ( _<number>_ int = _<number>_ ; n ++ > = _<number>_ ; + = { _<number>_ t t string ;
or ( j = _<number>_ ; j <= > > ; c ++ > ;
or ( j = _<number>_ ; j <= ( i } }
or ( i = n - j + _<number>_ ; j < j + number string _<number>_ ( + _<number>_ = number i i + _<number>_ = _<number>_ = number string _<number>_ = number { { { - _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ number number number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number
f ( j == ( n + _<number>_ k k ; - = ;
or ( j = n + _<number>_ - > ) )
or ( k = _<number>_ ; k <= _<number>_ if ( k <= _<number>_ ; j ++ ; printf ( _<string>_ { ; j ++ ; - _<char>_ ) ; i ++ ( , ( , ++ ( string ++ ( string ++ ( , ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++ ( string ++
nt i , j , n , k ;
or ( k = _<number>_ ; k <= ( _<number>_ * ( n - _<number>_ ) ) ; k ++ )
or ( k = _<number>_ ; k <= _<number>_ int number string _<number>_ ; k ++ > _<number>_ - i t x ++ ( > _<number>_ { for ( - ( + { _<number>_ ( - - { for ( - _<number>_ number - _<number>_ , - _<number>_ s ( + _<number>_ ( - { _<number>_ ( - { for ( - _<number>_ number - _<number>_ , - _<number>_ ( + _<number>_ ( + _<number>_ ( - { _<number>_ ( - { for ( - _<number>_ = _<number>_ int - _<number>_ ( - { for ( - _<number>_ number -
nt i , j , h ;
nt i , j , t , n ;
or ( t = _<number>_ ; t < _<number>_ for ( if ( if ( - _<number>_ ; - < _<number>_ & i { printf ( _<string>_ t j + _<number>_ ; n = j + _<number>_ ; n = j + _<number>_ ; n = j + _<number>_ ; i = j + _<number>_ ; i = j + _<number>_ ; i = j + _<number>_ ; i ;
nt i , j , { ;
or ( j = ( _<number>_ int number ( { ( , ( + _<number>_ ( + + + _<number>_ ( i ( { string ( { string ( i ( { string ( i ( n ( n ( j ( j ( j ( j ( j ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n k - _<number>_ ( i ( n
printf ( _<string>_ ) > > > _<number>_ > i ( - _<number>_ ( - number ( - _<number>_ ( - number ( for _<number>_ = - _<number>_ = ; n ++ = }
or ( l = _<number>_ > _<number>_ > printf ( _<string>_ - n ) < { n ++ < printf ( _<string>_ for ( for ( * n = _<number>_ for ( * n string _<number>_ ) ; / <= j ; - ++ ) = _<number>_ ;
or ( i = _<number>_ ; ct <= j ) }
or ( i = n n n n - _<number>_ > j n n printf ( _<string>_ > j { - _<number>_ ) ;
pa ( _<number>_ - j - n ) ;
or ( s = _<number>_ ; s <= _<number>_ * h - _<number>_ ; s ++ )
= m + _<number>_ < l < }
f ( j == num - + + + + i ; + printf ( = i i i i number number number - string number number number number number number _<number>_ number > + string = _<number>_ = _<number>_ number - printf ( = i - printf ( j ) n ;
f ( i == num ; }
or ( i = _<number>_ ; i <= _<number>_ * n - _<number>_ > string n n n n int } _<number>_ > _<number>_ > } - _<number>_ > }
f ( ! ( n - _<number>_ ) )
or ( i = _<number>_ > _<number>_ > = } _<number>_ ) number <= - _<number>_ number number number
nt i , j , i {
or ( b = _<number>_ ( number & _<number>_ > _<number>_ int ( = l , string ) , _<number>_ ) > _<number>_ > - _<number>_ > for ( printf ( _<string>_ string printf ( _<string>_ n for ( string ) > _<number>_ } > _<number>_ } > _<number>_ } ) > _<number>_ > printf ( _<string>_ } B ++ ) string ; string string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ )
or ( b = _<number>_ > _<number>_ > , l > , k ; i ++ ) {
nt i , j , n ) ) + _<number>_ ( else if ( j = j ;
or ( j = _<number>_ ; { <= n - _<number>_ ; num ++ < number ++ < number < i for ( string = _<number>_ > number for ( } + _<number>_ ; + <= + _<number>_ ; = ++ ; + + _<number>_ > + number ; + + , + , printf ( _<string>_ - i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i < + _<number>_ < i <
f ( i != _<number>_ ) { printf ( _<string>_ , _<char>_ ) > _<char>_ > _<char>_ > _<char>_ ( _<string>_ ( _<string>_ ( _<string>_ ) number - _<number>_ number ) ) ; , _<string>_ ) > _<char>_ >
or ( k = _<number>_ ; l < _<number>_ * i - _<number>_ ; l ++ ) {
or ( j = _<number>_ i i i ; string <= _<number>_ char } + _<number>_ i = _<number>_ = _<number>_ number = _<number>_ number + m = _<number>_ j ++ ( string ++ ( ( char ( char ( } - _<number>_ = _<number>_ first number - _<number>_ ( i + _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i = _<number>_ ( i =
nt ct , ct ;
t ++ ; }
nt i , j , ctr = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number k > k > if ( } >= _<number>_ ) string + s ;
or ( l = _<number>_ > _<number>_ > _<number>_ - for ( else else else for ( else + _<number>_ + _<number>_ > _<number>_ > k for ( / _<number>_ = _<number>_ > _<number>_ > k printf ( _<string>_ = _<number>_ ++ ) ; string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++
or ( j = _<number>_ ; = <= ) ; = ++ + _<number>_ + i + number + _<number>_ > } )
nt n , i , printf ( _<string>_ , i = _<number>_ ( ! = _<number>_ ( ! _<number>_ ) ( number = _<number>_ ( , char , * , ( * , * , ( * , * , ( & ( & ( ( string + , n n n n n printf ( = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
tr ++ ;
or ( j = _<number>_ ; , <= = = = = ( n * _<number>_ ) ; j ++ )
nt i , j , h ;
nt i , j , h ;
or ( j = _<number>_ ; j <= _<number>_ * i - _<number>_ ( j l _<number>_ ) ( + + + _<number>_ ) ( + + _<number>_ number j for ( j ) / _<number>_ ; j ++ number number ) }
f ( j == _<number>_ || j == ( _<number>_ * i * + _<number>_ ( ( ( i for string ( _<number>_ } ; string ++ ( { & = ) _<number>_ || {
or ( j = _<number>_ ; j <= ( _<number>_ * n for ( j k _<number>_ ) k ) ; {
or ( k = _<number>_ ; k <= ( _<number>_ * i & _<number>_ ) ) ) - ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if
or ( j = _<number>_ ; j <= ( _<number>_ * h , _<number>_ ; + + { _<number>_ ) > ( _<number>_ for ( + { _<number>_ for ( + + { _<number>_ for ( + + { _<number>_ + + _<number>_ for ( + {
nt i , j , n , ctr ;
nt i , j , k , n ;
lse if ( ( ( j - n + _<number>_ ) > _<number>_ ) && < < + + + + + + _<number>_ > + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
nt i , space ;
hile ( j == _<number>_ * i - _<number>_ ( }
or ( k = _<number>_ ; k <= _<number>_ * n - _<number>_ ; k ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++ ; - ++
f ( j - i == n - _<number>_ ) {
lse if ( j - n == i - _<number>_ ) {
rintf ( _<string>_ ) ; {
rintf ( _<string>_ ) ; } {
or ( l = _<number>_ ; l <= _<number>_ * n - _<number>_ > * + _<number>_ > } > _<number>_ > * + _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * + _<number>_ = _<number>_ > * +
or ( j = _<number>_ ; j < _<number>_ <START_BUG> n < n ) ) h = j & _<number>_ number h number > n ctr _<number>_ = _<number>_ & i ;
f ( j % _<number>_ == _<number>_ ) { printf ( _<string>_ string _<char>_ i = _<number>_ = _<number>_ = _<number>_ = _<number>_ ; i = + + _<number>_ = printf ( _<string>_ j _<char>_ = _<char>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = n int _<char>_ = number = _<number>_ = _<number>_ = n int _<char>_ = n int _<char>_ = _<number>_ = n int _<char>_ = _<number>_ = n int _<char>_ = _<number>_ = n int _<number>_ == _<number>_ = n ( , = _<number>_ = * number = _<number>_ = * number =
or ( j = _<number>_ ; i ( num } , , i ++ > printf ( _<string>_ i ; string ++ > j ) ) }
or ( j = _<number>_ ; j < for ( , , j a < _<number>_ < n < j < j < int int string ( ( for for ( i , i ( i ( j - } ) ) ) ) > _<number>_ < , , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , + _<number>_ < , , + _<number>_
or ( i = h ; i ( _<number>_ ; = -- ( + + i ) -- ) for ( number = b < b < _<number>_ ; i > _<number>_ ; = -- ; ; -- ; ;
lse { for ( k = _<number>_ ; k <= _<number>_ * string * _<number>_ ; & ++ > _<number>_ > n > _<number>_ if ( & & + { , & + { for ( & & number number _<number>_ ; & <= _<number>_ if ( & & - { for ( & & number number = _<number>_ ; & <= _<number>_ if ( & & + { _<number>_ = _<number>_ if ( & + & & > _<number>_ if ( & & > _<number>_ if ( & & > _<number>_ if ( & & > _<number>_ if (
f ( i == n ) { printf ( _<string>_ < + h < j < number < number < + _<number>_ < number < number < number < i < i < i < i < i < i < number < number < number < number < + _<number>_ < = _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + = _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + = _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + = _<number>_ < + _<number>_ <
f ( i = n ) { printf ( _<string>_ < + = _<number>_ < number < i < i < i < i < i < i < number < number < number < number < number < number < + _<number>_ < = _<number>_ < + _<number>_ < = _<number>_ < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string < string
or ( a = _<number>_ ; a <= n ; l ++ ) for ( * * ( - _<number>_ <START_BUG> * n ; for ( for ( j + _<number>_ + _<number>_ > printf ( _<string>_ string j ; j <= i > i > i > , printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_ { printf ( _<string>_
nt i , j , n , a , b - _<number>_ > {
or ( j = _<number>_ ; j < ( _<number>_ * i number for ( - string ( _<number>_ * { _<number>_ string ( _<number>_ string ( - string ( _<number>_ string ( - string ( _<number>_ string ( - string ( _<number>_ string ( - string ( _<number>_ string string i ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_ ( string ( - _<number>_
nt n , i , j , k ;
or ( l = _<number>_ ; - < }
or ( i = n - _<number>_ , + + - i ) > h j ( ) ; )
or ( space = _<number>_ ; k <= } { j ++ number = _<number>_ < - i < - j < h - = - = h ++ number number number number number number number number number number number number number < = < h number ) n ++ ) n - = _<number>_ < printf ( _<string>_ k , , , , printf ( _<string>_ - = i - = i ) ) < i for ( printf ( <unk> , printf ( _<string>_ - = i ) ) < k for ( printf ( <unk> - =
nt i , j , n ) ) ) ) ) >
or ( j = _<number>_ ; string <= number + _<number>_ ( {
nt i , j , n for ( i = _<number>_ > j > N > _<number>_ ) > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > N > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
tr ++ ; }
or ( k = _<number>_ ; int <= _<number>_ <START_BUG> - _<number>_ ; * ++ ; | ++ ) printf ( ++ > int int > printf ( _<string>_ = _<number>_ <END_BUG> int int int > printf ( _<string>_ = _<number>_ <END_BUG> int int int > printf ( _<string>_ number if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
nt i , j , n number j number number > _<number>_ = _<number>_ ;
or ( i = _<number>_ ; j <= ( _<number>_ - - _<number>_ ; , ++ ; h ++ ; - _<number>_ ) +
or ( j = _<number>_ ; number <= _<number>_ l number string _<number>_ , number ++ ) k ++ ) }
or ( i = _<number>_ ; string <= j , j = - _<number>_ ; i ++ ) i ++ ) char
or ( j = _<number>_ ; + <= n k _<number>_ > printf ( _<string>_ { for ( n = _<number>_ > _<number>_ > { string <= { string ++ ; string ++ ; string ++ ; * string - _<number>_ > { string ++ ;
= ( _<number>_ + j + n ) ;
or ( s = _<number>_ ; s <= _<number>_ * j v _<number>_ < | for ( * | + _<number>_ < * } )
nt ctr = _<number>_ ;
1 -- ; }
or ( j = _<number>_ ; number <= - - > number for ( = _<number>_ ) ) n <= i l ; + + ; + + + + ; + + + + ; printf ( _<string>_ for ( + _<number>_ for ( + + _<number>_ ; = <= string k - + ( { { { _<number>_ number = { number <= { number ++ ) h = { _<number>_ number <= { { number = { number -- > { { number = { number -- > { { number = { number -- > {
f ( i == ( h ) )
nt n , i , j ;
or ( k = _<number>_ ; printf < _<number>_ <END_BUG> - _<number>_ ( int = _<number>_ ; for ( for ( - _<number>_ ctr ctr _<number>_ < _<number>_ int for ( for ( for ( for ( for ( for ( for ( for ( for ( { k = _<number>_ j < _<number>_ & , i i i ) ) ) ;
lse if ( j == n ) {
nt n , i , j { { { { - printf ( _<string>_ } > j ) ;
or ( j = _<number>_ , & ; i <= > > > ; , ++ ; printf ( _<string>_ printf ( _<string>_ { - - _<number>_ { ( - i { _<number>_ { ( - _<number>_ { ( - i { _<number>_ { ( - _<number>_ h printf ( _<string>_ h + > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
nt i , j , n ) ) ) ) ( else { k + _<number>_ > string > string > string > > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > string > > N > > _<number>_ > N > _<number>_ > N > _<number>_ = _<number>_ > <unk> > N > _<number>_ = _<number>_ > <unk> > N = _<number>_ > <unk> > N =
rintf ( _<string>_ , _<char>_ ) ; int _<string>_ < _<char>_ ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<number>_ ; h -- ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<number>_ ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ ; string ( _<string>_ number _<char>_ ) < _<char>_ < _<char>_ ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<number>_ ) < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ < _<char>_ <
or ( k = _<number>_ ; & <= > > > > > ; s ++ ( = _<number>_ int int int ( ( { _<number>_ ( = _<number>_ int s { { - _<number>_ int s { ) { _<number>_ , s + _<number>_ ( = { _<number>_ ( = { _<number>_ int int int ( = _<number>_ ( = _<number>_ ( = { _<number>_ int int int ( = _<number>_ ( = _<number>_ ( = { _<number>_ ( = _<number>_ int - ; - = ; - _<number>_ ( = { _<number>_ ( = { _<number>_ int int
f ( j == num + ) int for ( for ( int = i for ( char char = = - = _<number>_ number = _<number>_ - = + _<number>_ ; * * i == i + = - _<number>_ ; * * * * * | = number i , | i , ! ! _<number>_ ( ! _<number>_ && ! = _<number>_ ( ! _<number>_ ( ! = ! = _<number>_ ( ! _<number>_ && j i i i i i i i i i i i i i i i i i i i i i
f ( j == num + number printf ( _<string>_ ) < j j = _<number>_ < string < i < h number char char string == string = string = string = string = string = string = string = string = string = string = i } - _<number>_ ;
or ( k = _<number>_ ; i <= > > ; number ++ > printf ( _<string>_ ctr number = ; number ++ > , ; j ++ > _<number>_ > string > ; number ++ > printf ( _<string>_ ctr number = ( ; - _<number>_ int = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( j = _<number>_ ; j <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( k = _<number>_ ; k <= , > , , > t > t > t > t > t )
rintf ( _<string>_ ) ; {
or ( k = _<number>_ ; k ( _<number>_ * = _<number>_ | int int ; int int int ) * for ( space = _<number>_ < _<number>_ < _<number>_ else < _<number>_ < = _<number>_ < k j j ; k ++ ; k ++ ;
or ( k = _<number>_ ; k < _<number>_ * ) number number _<number>_ ; } ++ ( }
rintf ( _<string>_ , _<char>_ ) ; { n = _<number>_ = _<number>_ = _<number>_ = number % _<char>_ =
rintf ( _<string>_ , _<char>_ ) ; string = ; { printf ( _<string>_ j _<char>_ ( i ( i ( i ( i ( }
f ( i == a )
f ( i < h )
nt h = ( int ) ( int ;
f ( j == ( h - _<number>_ > ; printf ( _<string>_ * , , = ;
nt h ;
or ( l = _<number>_ ; l < int int + + _<number>_ ) for ( + + _<number>_ ) for ( j = _<number>_ ; + < s ; + = + _<number>_ ) h = + _<number>_ ) h = s for ( + _<number>_ ) printf ( _<string>_ for ( number i = _<number>_ ; number < if ( number i ) ; number = if ( number i , number < if ( number i ) printf ( _<string>_ for ( number i = _<number>_ ; number < if ( number i ) ; number =
nt l ;
or ( j = _<number>_ ; j <= { number <= { number ++ = _<number>_ < { _<number>_ number <= } ) {
or ( j = _<number>_ ; j <= ; + + _<number>_ * j - _<number>_ ) }
f ( i <= n - _<number>_ ) string ; string string ; string string ; string string ; string string ; i <= printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ j j ) ;
f ( j = i ) { = ( h ; j <= number ; string = h | _<number>_ ) }
f ( t == ( n + _<number>_ s s ( i ( i ( i ( i s _<number>_ s ( i printf ( _<string>_ ) else ) ) ) ) ) > ( } printf ( A == C printf ( _<string>_ , M = ( } printf ( _<string>_ + continue printf ( _<string>_ ) ) ) > n ) ) > n > ( } printf ( _<string>_ + continue ) > ( } printf ( _<string>_ ) printf ( _<string>_ + _<number>_ for ( continue == ( } printf ( _<number>_ for ( continue ==
nt i , j , n ;
f ( h <= ( h - _<number>_ ( } ( } - _<number>_ ( } ( } * _<number>_ ( } * number ( k * _<number>_ ( i ( number - _<number>_ ( i ( number - _<number>_ ( i ( number - _<number>_ ( i > n first _<number>_ > n ( ( } if ( }
or ( j = j ; j <= _<number>_ & number & i & i string _<number>_ ; i = i - _<number>_ ) printf ( _<string>_ } j a a a a a a a a a a a a a a a a a a a a a a a a space _<number>_ > number > _<number>_ if ( string number string <= _<number>_ k string if ( string number _<number>_ ) ;
f ( j == _<number>_ )
f ( j == _<number>_ )
nt i , j , k , int } ( printf { _<string>_ { ( } { int i { int } = _<number>_ string for ( { for ( { { { { n i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
or ( j = i ; j <= ) } i ++ ( printf ( _<string>_ ( printf _<string>_ ) ( _<string>_ ( j - _<number>_ ) ( i for ( i for ( = - _<number>_ ( i for ( i for - _<number>_ ( i for ) ; + <= ) ; = ++ ( for ( = i ) ) > = = = _<number>_ > string for = _<number>_ > string for ; = <= ; = ++ ( i int = ( i int = - _<number>_ ( i int = number _<number>_ ( i
or ( j = _<number>_ ; j <= - - ) j ++ < - _<number>_ < - string < - _<number>_ < - _<number>_ < - _<number>_ < - _<number>_ < - _<number>_ number ) j ++ number number number < _<number>_ < _<number>_ < - _<number>_ number ) j ++ number number number < _<number>_ number ) j ++ number number number < - _<number>_ < - _<number>_ < - _<number>_ number printf ( _<string>_ , - - _<number>_ number = - = - = - = - = - = - = - = - = -
f ( j == n ) { string ( _<string>_ > + _<number>_ > = _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ; i = i ;
or ( t = _<number>_ ; t < ( _<number>_ * n ) ; t = t + _<number>_ ) {
nt k = ( i ) ;
hile ( j < n - i - _<number>_ ) {
f ( ( i - j ) == ( n - _<number>_ ) )
f ( j == ( n + i ) && - string == < < ( + = + = < < < < < < < < < < < < ( + = + = < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
or ( j = _<number>_ ; j <= ( _<number>_ * < < j k n n n n printf ( _<string>_ + string ; + j ++ > < ( _<number>_ else ) ; string ++ ) ctr ++ > N > _<number>_ number <unk> <= ( _<number>_ * < < ( _<number>_ * < < < < < < < < < < < _<number>_ > < N j j > _<number>_ > < _<number>_ > < _<number>_ > ( h j j j > _<number>_ > < _<number>_ > < _<number>_ > < _<number>_ > < _<number>_
or ( j = _<number>_ ; j <= _<number>_ & > > _<number>_ < > , k ( k string _<number>_ ; } ++ ; string ++ ) | ++ ; | ctr ++ ; ctr ctr ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++
or ( j = _<number>_ ; j <= _<number>_ * ( n - _<number>_ ) } } printf ( _<string>_ , - - - _<number>_ ; }
or ( j = _<number>_ ; j <= _<number>_ <END_BUG> } , j - ; number = number } - _<number>_ i ( i string j , j string string _<number>_ = _<number>_ = _<number>_ + ;
lse { for ( k = _<number>_ ; k <= _<number>_ * j , _<number>_ ; } ++ ) j ++ > _<number>_ ; & , + _<number>_ number , , + string >
or ( k = n ; k >= _<number>_ > + n ) printf ( _<string>_ number n number ) < _<number>_ ( } = printf ( _<string>_ = _<number>_ -- ;
or ( j = _<number>_ ; j < i & _<number>_ < j | _<number>_ ( { + ; number ++ ; number ++ ; i ++ ; = ++ )
or ( i = _<number>_ ; i < h ; i ++ ) {
tr ++ ;
lse if ( ( j == _<number>_ && ctr < _<number>_ ) || ( j > _<number>_ && ctr < _<number>_ ) ) {
lse if ( ( j == _<number>_ && ctr < _<number>_ ) || ( j ) ) < _<number>_ && string ( }
f ( ( j == _<number>_ ) || ( j == _<number>_ } ( j n n n n , _<number>_ number number number number > _<number>_ > + _<number>_ ) ( + _<number>_ ) ) )
f ( ( j == _<number>_ ) || ( j == _<number>_ * i - _<number>_ ( j n > { _<number>_ > _<number>_ > string , string > _<number>_ > } ) ( string == _<number>_ ( + _<number>_ } ;
or ( j = _<number>_ ; j <= ( { k <= ( { k = > > > ( - _<number>_ > - ( j + _<number>_ > j + _<number>_ > h > j + _<number>_ ) ) ; + + - - - - - - - - < ; + + - - - - - < + < + < + < + < + < }
or ( j = n - i ; j >= _<number>_ ; number -- ) string -- ) string ( ;
or ( i = _<number>_ ; i <= h > { i <= { i <= { i <= | > | > | > | > | ) +
or ( k = _<number>_ ; k <= n else = , , , , - _<number>_ )
lse if ( j = i ) { printf ( _<string>_ > + + _<number>_ ) ; } }
lse if ( j = i ) { printf ( _<string>_ > i > i ( = i ( number ; i ++ ; i string < number ; k ++ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ > = i ( = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = =
or ( j = _<number>_ ; j <= ( _<number>_ <END_BUG> ( + _<number>_ ) < { < { i ++ ; j ++ > _<number>_ * < i printf ( _<string>_ {
or ( j = _<number>_ ; j <= ( _<number>_ <END_BUG> < < < < < _<number>_ | > c > _<number>_ > c > string > string ( _<number>_ & j j j ) ) ; n ++ > }
or ( l = _<number>_ ; l <= _<number>_ if ( k + _<number>_ = { string + _<number>_ = - - _<number>_ ( { _<number>_ , { { { _<number>_ , _<number>_ { ; | <= _<number>_ printf ( _<string>_ - j i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( j = n + _<number>_ - i )
or ( j = _<number>_ ; j <= _<number>_ & string - _<number>_ ; for ( n = _<number>_ < _<number>_ if ( j <= _<number>_ for ( h j = _<number>_ < _<number>_ int i ( ( > _<number>_ int - _<number>_ ) ) < }
or ( j = _<number>_ ; j <= ( _<number>_ / j int k ) < = = _<number>_ | }
f ( h == h - _<number>_ )
or ( i = _<number>_ ; i < _<number>_ { = ( = - _<number>_ ; = ++ ; number ++ )
or ( j = _<number>_ ; h < h , number } > i > i > i > i > j ; { { }
lse if ( j = i ) { number ( i ) number number number number number number number number number ) ) > > ) printf ( _<string>_ ( = _<string>_ ) ; i = = _<number>_ ; i = = ; i _<string>_ ) n ) ; j = = number ; j = ( ( = i ; j ; j = = _<string>_ ; j = = _<string>_ ; j = = i > = = = = = _<number>_ > = _<number>_ ; j = = i > = i > = _<number>_ ; j
lse if ( ( j > _<number>_ ) && > = = number ( + _<number>_ ( + _<number>_ ( - _<number>_ ) ( = _<number>_ ( = _<number>_ ( for for ( + _<number>_ ( + _<number>_ ( + _<number>_ ( for ; + i ( + _<number>_ ( + _<number>_ ( + _<number>_ ( number > _<number>_ ) ) ) ) ) ) ) ) ) && ( number > _<number>_ ) && ( printf ( _<string>_ ) ) ) ; n = + + _<number>_ ; n = + + _<number>_ ; n = + + _<number>_
or ( j = _<number>_ ; j <= ; n ++ ; printf ( _<string>_ k + printf ( _<string>_ k j > < < < < < < < _<number>_ > < j n n n n n n > _<number>_ > < string > _<number>_ > < j > _<number>_ > < j > i > , _<number>_ > < , _<number>_ > < , _<number>_ > < , _<number>_ > < < < < < _<number>_ > < , _<number>_ > < < < < _<number>_ > < , _<number>_ > < < < < _<number>_ >
or ( j = i ; j >= _<number>_ ( i -- ; + -- ; + -- ; + -- ( i >= _<number>_ ) -- ) char string ; { string ( _<string>_ ( = number < _<number>_ ( = _<number>_ -- ( = - _<number>_ ( k -- ; k >= _<number>_ -- ( + n ( + _<number>_ ( + _<number>_ -- ( + n - i ( + + _<number>_ ( + _<number>_ -- ( + n - + ( + _<number>_ ( + _<number>_ -- ( + n - + ( + _<number>_ (
or ( j = i ; j <= ) } number ++ ; + n ; + n ; + n > ) } j ++ > ( } + _<number>_ ; i ++ ; = i ++ ; = i ++ ; = i ++ ; = i ++ > ( n for + _<number>_ > + _<number>_ > { n ++ > ) - ) - n < number < number < ) - ) - number < number < ) - number ; string <= ) - ) - n ; string <= ) - ) -
or ( i = _<number>_ ; i < _<number>_ , - _<number>_ ; ) string ++ = _<number>_ ; {
or ( j = _<number>_ ; j < _<number>_ , j number _<number>_ ( + _<number>_ ; j ++ ; j ++ = h ++ > _<number>_ k i number _<number>_ ; i ++ )
or ( j = _<number>_ ; j < _<number>_ s ; + = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ; i number + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ; i number + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_ ) i = + _<number>_
lse if ( i < n ) {
or ( l = n + i ; x <= _<number>_ int * { n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
f ( ( i == _<number>_ ) || ( number == + _<number>_ ; j == * j ; }
f ( i == h ) {
or ( j = _<number>_ ; j < h < + h < i < i < i < i < printf ( _<string>_ string printf ( _<string>_ j ++ ; , ++ ; , ++ ; , ++ j ; string ++ ; string ++ ; -
or ( j = _<number>_ ; j < _<number>_ * = _<number>_ > { i ++ ; i ++ ; i ++ ; j ++ > _<number>_ ( h i ++ > _<number>_ > h > j > j > j > j > j > = _<number>_ > = _<number>_ ) > _<number>_ > = _<number>_ else > _<number>_ > _<number>_ else
f ( i = j )
or ( j = _<number>_ ; j <= _<number>_ > j > string > string > string > string > string ( for ( for ( - - _<number>_ i = _<number>_ n = _<number>_ = _<number>_ = _<number>_ = _<number>_ = + + i = _<number>_ = + } _<number>_ > _<number>_ > }
or ( j = _<number>_ ; j <= _<number>_ if ( h + _<number>_ number ; h ++ ; h ++ ; h ++ ( {
or ( i = n ; i <= n = }
or ( k = _<number>_ ; k <= ; + i ; + ++ ; + ++ ; + ++ ; {
or ( i = _<number>_ ; i < number ; = ++ ; number ++ ; int number + _<number>_ ; = ++ )
or ( i = _<number>_ ; i < string < string ; = ++ ; = ++ ; = ++ ; else j ++ )
or ( l = _<number>_ ; l <= _<number>_ <END_BUG> { ++ & ; & & & & & string ) = _<number>_ int if ( l == _<number>_ > x + _<number>_ > _<number>_ * j + _<number>_ ) printf ( _<string>_ = _<number>_ + x + _<number>_ > _<number>_ > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h > _<number>_ > h >
nt i , j , n , k ;
or ( j = _<number>_ ; j <= + _<number>_ > + + _<number>_ ) n <= + _<number>_ ) n <= number number number ; + _<number>_ ) printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ = + _<number>_ = + _<number>_ ;
f ( i == _<number>_ )
f ( i > _<number>_ )
f ( j == ( h - _<number>_ ) string ;
or ( j = _<number>_ ; j <= _<number>_ n k k + _<number>_ i i + _<number>_ i i ++ ( printf ) } } {
or ( j = _<number>_ ; j <= string { string <= number string printf ( _<string>_ if ( number j - + number > + number ; {
or ( j = _<number>_ ( i string _<number>_ n > i > + i ; + + number ++ > string > + number > i > j { }
or ( s = _<number>_ ; s <= _<number>_ * h - _<number>_ ; s ++ )
or ( p = h { number <= = = = = = i int + number int - _<number>_ < { i <= j = n , string ++ ) n for ( } }
f ( i != _<number>_ number number number number number ) -
or ( j = _<number>_ > _<number>_ > _<number>_ for ( { { + _<number>_ ; = <= _<number>_ for ( string number string _<number>_ > + _<number>_ ( j printf ( _<string>_ n + _<number>_ number number number number - _<number>_ number number ) number - _<number>_ number = _<number>_ else ; i = i if ( i = _<number>_ if ( { _<number>_ + number <= _<number>_ if ( { { _<number>_ { ; { , { {
nt i , j , h - _<number>_ - + printf ( _<string>_ - string ) < - ( int ) < int n }
= _<number>_ ;
or ( j = _<number>_ int i & i int i int i k number = _<number>_ ) k ( number + number - _<number>_ ) > {
or ( k = _<number>_ < _<number>_ < _<number>_ <START_BUG> < _<number>_ <START_BUG> i < string < _<number>_ < } ; m ++ ) {
or ( k = _<number>_ > _<number>_ > h , + _<number>_ ( - _<number>_ ) ; -
or ( i = _<number>_ ) ) n ++ ) n ++ ( ; j ++ ( j ( _<number>_ n ( + _<number>_ printf ( _<string>_ ) ctr _<number>_ ) ) number number ) number & ;
f ( i != h > = string > string > string > + _<number>_ > = _<number>_ > _<number>_ ) }
or ( j = _<number>_ ) ) k <= < < < < ; printf ( _<string>_ * i n - _<number>_ ; { { { { { n ++ ) k ++ ) k ++ ; string ++ ; string string ) string ++ ) string ++ ) h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ; h ++ ( h ( i + _<number>_ ( & * i ( ( + _<number>_ ( & ( & (
f ( i != _<number>_ = printf ( _<string>_ = printf ( _<string>_ ) ) > _<string>_ ; }
or ( i = _<number>_ ; i <= ( _<number>_ * h ) - _<number>_ ; i ++ )
f ( i == h || j == ( h - _<number>_ ) + ( i - _<number>_ ) || ctr == ( } j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j ( }
or ( i = _<number>_ < _<number>_ ; number <= _<number>_ - , { > _<number>_ int ) } = _<number>_ > _<number>_ for ( number string _<number>_ > _<number>_ > string n n n n n j - _<number>_ > number j j ++ ) string ++ number number number number number number number > ctr number number number number number number number number number number number number > ctr number number number number number number number number number > ctr number number number number number number number number number number > ctr number number number number number >
or ( i = _<number>_ < _<number>_ < _<number>_ < m i i c _<number>_ ( } = _<number>_ for ( int number = _<number>_ ) ; number <= _<number>_ - = _<number>_ > = _<number>_ > j n n n n n } ) +
++ ;
tr ++ ;
nt i , j , n } > = _<number>_ } > _<number>_ int printf ( _<string>_ int i n n ) > string ) > >
nt n , i , + + + } ) ) ) ) >
canf ( _<string>_ , & + + _<number>_ ) > - ( - = _<number>_ ) > i > c ( ; ( _<string>_ printf ( _<string>_ j ; > * printf ( _<string>_ for ( printf ( _<string>_ , for ( number ) ) ) ; ;
f ( i == _<number>_ || = for ( number == _<number>_ || number == } ) string ( ) = _<number>_ > printf ( = + + _<number>_ ;
nt i , l , k ;
or ( s = _<number>_ ; s < _<number>_ * h - _<number>_ ; s ++ )
nt i , j , n ;
or ( j = _<number>_ ; j < _<number>_ * n - _<number>_ ; = = = = = ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; + = + _<number>_ ) i = + _<number>_ ; i number + _<number>_ ) i = + _<number>_
f ( i = n ;
nt h , i , j printf ( _<string>_ printf ( _<string>_ printf ( _<string>_ for > , i ( ( i * string ( ( { C , long - _<number>_ ( for ;
nt i , j , ctr - _<number>_ ( + _<number>_ ;
or ( j = _<number>_ ( number = _<number>_ ; = <= number > + _<number>_ ; i = i - _<number>_ ; + = + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ) ) ) > _<number>_ ) }
f ( ( j = _<number>_ > printf ( _<string>_ ; + n > number > number > number ; - ( i - i ; n ( n = number ( + _<number>_ ( + + _<number>_ ( + j - _<number>_ ( n = number ) ) ) ) ) ) ) } printf ( _<string>_ ) > number > string > string > string > string > string > string ) } printf ( _<string>_ ) > number > string > string > string > string > string > string > string > string ) } printf
nt i = _<number>_ ;
or ( i = _<number>_ ; i <= _<number>_ s ; i ++ ( , ++ ( ( , ( , ++ ( ( , ( , ++ ( ( , h - _<number>_ ( i h _<number>_ ( string ++ ( ( , i ( string ++ ( ( , i - _<number>_ ( string h i ( , ++ ( ( , ( , ++ ( ( , h ( string ++ ( ( , h ( string ++ ( ( , h ( string ++ ( ( , h ( string ++ ( ( , h (
ouble h ;
f ( i == h || - printf ( _<string>_ ) , > > > > > > > > > > > > > > > ( n } - _<number>_ ) }
or ( k = _<number>_ ; k <= string > string > string > n > string > string > string > string > string > string > string > string > string > string > string > string > n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > * n > *
oto x ; }
f ( x == _<number>_ ) {
or ( l = _<number>_ ; * * * ( } - _<number>_ h if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
or ( k = _<number>_ ; l <= _<number>_ & for ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
or ( k = _<number>_ ; printf ( _<number>_ , for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for (
or ( i = h < number ; = ) _<number>_ < _<number>_ < string < _<number>_ < i < string < _<number>_ < string < = _<number>_ < + = _<number>_ < + = _<number>_ < n ; = -- ; for ( = { = { _<number>_ = { = H < _<number>_ < { = { -- printf ( _<string>_ i -- ; printf ( _<string>_ i -- ; printf ( _<string>_ i -- ; printf ( _<string>_ i -- ; printf ( _<string>_ i -- ; printf ( _<string>_ i -- ; printf ( _<string>_ i
or ( i = _<number>_ ; = ( _<number>_ & i j ; = ++ ; = ++ )
or ( j = i ; printf ( _<string>_ ( n - _<number>_ ( j - _<number>_ ( n - _<number>_ ( j - i ( n - _<number>_ ( j - _<number>_ ( n - _<number>_ ( j - i ( n - _<number>_ ( j - _<number>_ ( j - i ( n - _<number>_ ( j - _<number>_ ( j - _<number>_ ( n - _<number>_ ( j - _<number>_ ( j - _<number>_ ( j - _<number>_ ( n - _<number>_ ( j - _<number>_ ( j - _<number>_ ( j - _<number>_ ( n -
or ( j = i ; j <= ( - _<number>_ ( = j j j j j - = - _<number>_ ( = _<number>_ ( - = _<number>_ ( - = ; n ++ ( - printf ( _<string>_ ( - = _<number>_ ( - = ; n <= ; n ++ ( - printf ( _<string>_ ( - = _<number>_ ( - = j j j j j - _<number>_ ( - = _<number>_ ( - = ; n ++ ( - printf ( _<string>_ ( - = _<number>_ ( - = j j j j j -
f ( j > _<number>_ )
or ( j = _<number>_ ; string <= > ( _<number>_ * n for ( - _<number>_ ) ) * j ; - - {
lse { for ( k = _<number>_ ; else <= _<number>_ l i - _<number>_ ) ) string ++ ) string ++ ( ( printf ( _<string>_ ) ++ ) ) ; n ++ ) n for ( , , _<number>_ ; , <= _<number>_ * j for ( , , , , , , , , , , , i ) n for ( , , = _<number>_ ; , <= _<number>_ * j for ( , , , , , , , , , , i ; , ++ ) n ) n ++ ) n ) n
f ( i != _<number>_ ) ctr ; -
nt i , j , for ( = _<number>_ < _<number>_ < _<number>_ ( ( * i ( printf ( _<string>_ ) ) ) ) ;
or ( k = _<number>_ ; a <= _<number>_ else string = string , _<number>_ = string , _<number>_ = _<number>_ )
or ( k = _<number>_ ( { }
or ( k = _<number>_ ; j <= n j { string = string a a a a - _<number>_ > }
or ( k = _<number>_ ; int <= ; int int int int int int int int int int ) string string string > _<number>_ > i ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ )
f ( i == _<number>_ ) n == _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ;
or ( i = n ; printf ( _<string>_ ctr printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf ( _<string>_ ( printf (
or ( i = _<number>_ ; , <= i ; ctr ++ ) ( j ++ ;
oid spa = spa ( a )
pa ( _<number>_ + j + n ) ;
nt n ;
f ( j == _<number>_ ) { printf ( _<string>_ ( number > N ) ; number = j ; }
f ( j = n ) { for ( j = _<number>_ ; number <= { = _<number>_ ; = = = = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( {
nt i , j , k { % _<number>_ < , } ( > int = ;
nt i , j , n ;
f ( b > _<number>_ ) j < _<number>_ ; string < _<number>_ ) number < _<number>_ ; printf ( _<string>_ ;
f ( j == n - number ( ( ( i ( i ( i < _<number>_ > + _<number>_ ; number = + number ( ( + number ( ( ( j - number ( ( ( i - _<number>_ ( j for ( j ( < { _<number>_ < { < { number == { number = number int number < { number = number int number < { number == { number = number int number < { number == { number == { number == { number = number int } < { number == {
f ( i == num ) {
f ( ( j == n + _<number>_ > i > i > i + = , _<number>_ > n > n i - _<number>_ > number > i > i ( i for ( i ( i == { i ( i ( i ( i > i > i > i - n , _<number>_ > i > i > i > i > i > _<number>_ > _<number>_ > i > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > _<number>_ > i > i >
f ( ( j == i + _<number>_ if ( { ( < j j j = j j - _<number>_ ) ) )
or ( k = _<number>_ ; , <= j ) ( printf ( _<string>_ printf ( _<string>_ num = for ( _<number>_ > number + _<number>_ ) ) ) >
or ( j = ( _<number>_ * i ( - printf ( _<string>_ > } > _<number>_ ( i ( k -- ( k -- ( k -- ( k for ( n -- > < _<number>_ int n > = _<number>_ int n > = < < _<number>_ int - _<number>_ int - _<number>_ int - _<number>_ int - _<number>_ > { n > = < _<number>_ int - _<number>_ int - _<number>_ > printf ( _<string>_ > = _<number>_ > - _<number>_ int - _<number>_ int - _<number>_ > string > _<number>_ int - _<number>_ int - _<number>_
nt i , j , n , k ;
or ( i = _<number>_ ; i <= ( _<number>_ * printf ( _<number>_ int printf ; = = = ; = ++ ( = _<number>_ int = ; = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ int = _<number>_ ( = _<number>_ int printf ( _<string>_ , = ;
nt h , i , j , h > _<number>_ ) ) ) ) >
lse if ( j - i == n - _<number>_ = _<number>_ ; h = }
nt i , j , n , n ( = _<number>_ ) ;
nt n , i ;
f ( ( j == n + _<number>_ ) || ( + + i , n , _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ ( i ( string == - _<number>_ ( string == - i for ( string for ( string == - i ( string ( string ( string number - _<number>_ ( i ( string == - _<number>_ ( string == - _<number>_ ( string == - i for ( string for (
or ( j = _<number>_ ; i <= ; } printf ( _<string>_ string number = ( _<number>_ * { { { { j = < < _<number>_ <END_BUG> = _<number>_ & number = _<number>_ > string ; printf ( _<string>_ string + _<number>_ ) ;
nt n , i , j ) ) ) )
nt i , j , m , y , k ( ;
or ( k = _<number>_ ; k <= ( _<number>_ * string printf ( _<string>_ > * string printf ( _<string>_ > * string printf _<number>_ > string > _<number>_ & string printf ( _<string>_ > * string printf ( _<string>_ > * string printf ( _<string>_ > * string printf ( _<number>_ & * string printf ( _<string>_ > * string > _<number>_ & string printf ( _<string>_ > * string printf ( _<string>_ > * string printf ( _<string>_ > * string printf ( _<number>_ > string printf ( _<string>_ > * string printf ( _<string>_ > *
f ( i != n ) {
or ( i = _<number>_ ; i <= _<number>_ | string { = _<number>_ ) k ++ ; = ++ ; string ++ ;
or ( j = _<number>_ ; + <= _<number>_ <END_BUG> = ; number ++ ; n ++ > number ) string ++ ) string ++ ) string ++ ) string ++ = _<number>_ * + < _<number>_ * + printf ( string = _<number>_ <END_BUG> _<number>_ <END_BUG> ++ > = _<number>_ & = _<number>_ & number ++ ) string ; string string > _<number>_ & n for ( n = _<number>_ > _<number>_ > + _<number>_ > _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ >
or ( i = _<number>_ ; = < - _<number>_ ( i & number ; n = i & _<number>_ ; i = i , i , n , - _<number>_ > } ) j = } {
f ( j % _<number>_ == _<number>_ = _<char>_ = _<char>_ = _<number>_ = + _<number>_ = } _<char>_ = _<number>_ = _<number>_ ) { - ( _<string>_ j j ) ; string = + _<number>_ ; string = _<char>_ > - _<number>_ i > string i ) j = { }
or ( j = _<number>_ ; = <= ) ( _<number>_ > = ) ( _<number>_ ) < ; = ++ ( = > _<number>_ ( i { - _<number>_ ( = _<number>_ > = ) if ( = _<number>_ > ) ) n ++ > _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > = ) - _<number>_ ( = _<number>_ > =
f ( b = _<number>_ ) { }
hile ( h < rt + _<number>_ - number > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ) ,
nt i , j , k , n ( > _<number>_ ;
f ( ( h == _<number>_ ) || > > string ( string == string ( string ( string == string ( { ) > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i
or ( k = _<number>_ ; k <= > > > > > > > > > _<number>_ <END_BUG> { { k ++ ( + _<number>_ ( + _<number>_ int + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( +
or ( j = ( _<number>_ * i ( , ( n > _<number>_ > _<number>_ -- > j ( + _<number>_ ; string -- ( < { printf ( _<string>_ ( i ( printf _<string>_ ; , -- ; , i -- ; , i >= _<number>_ if ( printf ( _<string>_ ; , -- ; , i -- ; , i >= _<number>_ if ( printf ( _<string>_ ; , -- ; , i -- ; , i >= _<number>_ if ( printf ( _<string>_ ; , -- ; , i -- ; , i >= _<number>_ if
nt i , j , k , n = _<number>_ ( l - _<number>_ ;
or ( j = _<number>_ ; j <= ( j number _<number>_ ) int _<number>_ number ++ )
f ( rt != _<number>_ ) {
hile ( h - ct > _<number>_ ) printf ( _<string>_ a ;
or ( j = ( _<number>_ * i ) < _<number>_ ; j >= _<number>_ ; j -- ) } = = ( _<number>_ int = ; , { string ( _<string>_ ) printf ( _<string>_ ) < < ( , ) < ( , ) < ( , ) < ( , ) < ( , ) < ( , ) < ( , ) < ( , ) < _<number>_ < = _<number>_ < , = _<number>_ < = _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_
nt n , i , j ;
or ( j = _<number>_ ; j <= ( ( _<number>_ <START_BUG> number > number for ( n > _<number>_ , - _<number>_ <END_BUG> _<number>_ & string > _<number>_ | | ) j ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++
nt i , j , n , k ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
rintf ( _<string>_ ) ; }
or ( i = n - j ; + > _<number>_ ; i = j + _<number>_ )
or ( j = _<number>_ ; j <= }
or ( k = _<number>_ ; k <= ( _<number>_ * n j j j j j j j j ) )
or ( l = _<number>_ ; l < _<number>_ - + + _<number>_ - + _<number>_ - + _<number>_ > + _<number>_ )
or ( j = _<number>_ ; j < j < j ( = - _<number>_ ) > _<number>_ > i } = _<number>_ ; + + + + _<number>_ )
nt i , j , n ;
f ( a == h )
or ( i = _<number>_ ; i <= string < }
or ( space = _<number>_ ; space <= j for ( number + n ; number <= printf ( _<string>_ string - number > i ( = _<number>_ ) ; = ++ )
or ( k = _<number>_ ; k < , < a < a < a < a < a < a < for ( }
or ( i = _<number>_ ; i < , < , , ; number ++ > - > , number > a < _<number>_ ; = ++ ; i ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ; n ++ ;
f ( j == num - i + _<number>_ || i == printf ( _<string>_ + string + string + _<number>_ + string + string = _<number>_ = - b = n j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
or ( a = _<number>_ ; a <= , }
nt i , j , n , a n < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
or ( i = n - _<number>_ + string > ) > i } _<number>_ num num > i - _<number>_ )
or ( j = _<number>_ ; j <= > > ( _<number>_ | i n n n - _<number>_ ; printf ( _<string>_ j ++ > + _<number>_ ; n ++ ( n + _<number>_ ( n = _<number>_ v i = _<number>_ v ; n ++ ( n ++ ( ( n number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ( k number _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) (
or ( j = _<number>_ ; j < _<number>_ h < i { + + _<number>_ ; + + + + _<number>_ > number < k < _<number>_ ! n < n j < _<number>_ ! n < l < _<number>_ ! l > _<number>_ int = _<number>_ ; = = = _<number>_ int = j ++ > _<number>_ > _<number>_ int = _<number>_ ;
rintf ( _<string>_ ) ; }
or ( i = n - j ; - ( _<number>_ ; + + _<number>_ )
or ( k = n - _<number>_ ; k >= = = = = = _<number>_ < , string )
nt n , i , k , l ;
nt h , i , j , n , } ( & & ) ! _<number>_ ( & & ) ! _<number>_ ) ( & & > i } _<number>_ + _<number>_ ;
f ( j == ( n + _<number>_ k k ( + i k k ( { else n }
or ( j = _<number>_ ; j != + = & _<number>_ || j > = j = i = _<number>_ < - = _<number>_ ( & = + number ++ ; } printf ( _<string>_ n = i ++ ; for ( } }
canf ( _<string>_ , & h ) ;
rintf ( _<string>_ ) ; }
lse for ( k = _<number>_ ; k <= ) ; i ++ ( i ( + _<number>_ ) ) || ( j ++ ( ( j for _<number>_ > k for ( l = _<number>_ h l <= ) for ( l = _<number>_ ) ) > ( _<number>_ } > ( _<number>_ } number = ( _<number>_ } > ( _<number>_ } number + _<number>_ ) ) ) > number - _<number>_ > number for ( j + _<number>_ > ( _<number>_ } number for ( printf ( _<string>_ i printf ( _<string>_ i printf ( _<string>_ i
f ( i <= j - _<number>_ ) j <= { h printf ( _<string>_ } , i for > k ) string _<number>_ ) ;
rintf ( _<string>_ ) ; } } }
or ( i = n ; i <= n ; i ++ ( j ++ ( ( , i ( , k > n > n > l ) ) ) ) , number > l > }
or ( j = _<number>_ ; j <= _<number>_ } printf ( _<string>_ k ( string + _<number>_ k n ++ ; n ++ ; i ++ ; i ++ ; i ++ ; i ++ ) j ++ ) j ++ ) j ++ ( ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ ( n ++ > _<number>_ > l > _<number>_ { + _<number>_ > number i
f ( j <= k ) {
f ( h <= a ) {
rintf ( _<string>_ , c ) ; } { printf ( _<string>_ - printf ( _<string>_ - for ( for ( - _<number>_ ; printf ( _<string>_ , l ) < < < - _<number>_ > string ; { { { { { { { string ( _<string>_ = for ( } string number - _<number>_ i - _<number>_ > } > j ) h = j - , > _<number>_ > j > j ) h = } _<number>_ i - _<number>_ i - }
or ( j = i ; j <= j ; , ++ ) k ++ ) k ++ ; int - ;
or ( j = i ; j <= j < i < i < h < h < + ( + _<number>_ > = n - = _<number>_ ; i ++ ; i ++ ; + + _<number>_ ; - - ( - }
or ( o = _<number>_ ; o <= j - _<number>_ ; o ++ ) {
f ( ( ( i + j ) == ( m + _<number>_ ) ) || ( ( i > m ( m = _<number>_ < n = _<number>_ < n = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
nt k , i , j , p ;
f ( i <= ( n + _<number>_ ( = + _<number>_ > number > + _<number>_ ( ; ; ; number ++ ) j <= ( & number > < < < < ) ;
or ( j = _<number>_ ; j <= i < i < i < i < i < N < _<number>_ ) h ++ ( for ( { _<number>_ % _<number>_ string < j ) ) - _<number>_ < j < , n < j < j < j < j < j < , = _<number>_ < j < , = _<number>_ < j < , = _<number>_ < j < j < j < , = _<number>_ < j < , = _<number>_ < j < j < j < , = _<number>_ < j < , =
or ( j = _<number>_ ; j <= ( ( n + _<number>_ ) / _<number>_ ) ; j ++ ) {
or ( j = _<number>_ ; j <= ( n + _<number>_ / _<number>_ ) ; j ++ ) {
or ( i = _<number>_ ; i < l ; k ++ ( k ++ ( } - _<number>_ ( k ++ ( l ; m ++ < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_ < m < - _<number>_
or ( j = _<number>_ ; j < l ; j ++ ( j ++ ( ( j ++ ( ( , = _<number>_ ; n ++ > _<number>_ > for ( j = _<number>_ > for ( j = _<number>_ > _<number>_ > - m > - _<number>_ > m > - m > - _<number>_ > m > - m > - _<number>_ > m > - m > - _<number>_ > m > - _<number>_ > m > - _<number>_ > m > - _<number>_ > m > - _<number>_ > m > - _<number>_ > m
or ( j = i ; j <= ( - _<number>_ ) & _<number>_ ; - - = = = ( , & { { for ( for ( for ( for ( for ( for ( for ( / _<number>_ ; / <= ) ; / ++ ; / ++ ; / ++ ; +
or ( k = _<number>_ ; k <= i > a > ) k ++ ; {
or ( k = j ; k <= m ( = j j > }
or ( m = _<number>_ ; m <= i - _<number>_ ; m ++ ) {
or ( k = _<number>_ ; k <= ) > j > j > = _<number>_ > i < { printf ( _<string>_ i ) > _<number>_ > string > { string <= { string ++ number number > {
lse i , j ;
or ( ; j < x - _<number>_ < } - _<number>_ ; + + = + _<number>_ number ; number ++ ) {
or ( j = _<number>_ ; j <= ) < _<number>_ < = + = + _<number>_ < j ; , ++ ; n ++ number number number number number number number number number number number ;
or ( i = h ; i >= _<number>_ < + ( + _<number>_ i -- i ) ; number -- ( ( ( j -- ; number -- ; number -- ; number -- ; , -- number number number ) } }
rintf ( _<string>_ , j ) ; } }
or ( c = _<number>_ ; c <= _<number>_ l l < for ( , , )
or ( z = max - y ; z ; & ; & p ++ > - string )
or ( j = _<number>_ ; j <= abs ) ; ) = i , i , = j + _<number>_ ( i ( i number string number _<number>_ number string number printf ( _<string>_ n n number n n n n n n n - _<number>_ = _<number>_ = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
rintf ( _<string>_ , ( i + _<number>_ i { <START_BUG> _<number>_ number number number number j number _<number>_ ) { ; { { { j = = n n n n n n n n n n - _<number>_ ; j = , - _<number>_ ( = { else = { else number ; j = { else number i + _<number>_ * { else number = { else number = { else number = { { { { { { { { { { else number = { else number ( = { { { { { {
canf ( _<string>_ , & h , & string i ) >
or ( i = _<number>_ ; i <= x < j ( h - j = _<number>_ number number number j ++ number number number + _<number>_ + , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
or ( d = ( n - _<number>_ ) { _<number>_ ( & = ) ( = _<number>_ number - int o > _<number>_ > o -- > _<number>_ > o ) ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o -- > _<number>_ ; o --
rintf ( _<string>_ , f = _<number>_ ) ;
printf ( _<string>_ ) ; }
rintf ( _<string>_ , j ) ; }
or ( j = i ; j <= _<number>_ ( ; - = = = = = k } _<number>_ = i string _<number>_ = ) ; j = j / _<number>_ ; j = j / _<number>_ number number number ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_ > ) = _<number>_
or ( j = i ; j <= _<number>_ > ( ( ) int ( ( ( number / _<number>_ , number printf ( ; number ) { number = number string _<number>_ ( number = number string _<number>_ i i i i i i i i i i i i i i i i / _<number>_ i i i i i i i i i i i ( + _<number>_ i i i i i i i i i i i i i / _<number>_ i i i i i i i i i i i i i (
rintf ( _<string>_ , k ) ; }
or ( j = _<number>_ ; j <= ( n i i i string _<number>_ ( printf ( _<string>_ } _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i + _<number>_ ( j i +
or ( i = ( n - _<number>_ ) < - - - _<number>_ ) j = = _<number>_ > i < - _<number>_ + _<number>_ ; j = j / _<number>_ ; string = j / _<number>_ ; n = j / _<number>_ > > { j ) n > j > j > { j ) n > j > j > j > j > j > j > _<number>_ ; string = j / _<number>_ ; n ) n > j > _<number>_ > j > j > j > _<number>_ ; string n > number
f ( k > m ) {
or ( j = _<number>_ ; j < i ( + { = _<number>_ j > , , number > _<number>_ ( count ++ ( ( count + _<number>_ ( count + _<number>_ ( count ++ ( ( count - i ( count ++ ( ( count + _<number>_ ( count + _<number>_ ( count ++ ( ( count - i ( count ++ ( ( count + _<number>_ ( count + _<number>_ ( count ++ ( ( count - i ( count ++ ( ( count + _<number>_ ( count + _<number>_ ( count ++ ( ( count -
nt n , k , i , j , i , i > , , , , = _<number>_ ;
rintf ( _<string>_ , ( n + _<number>_ ) b ( n ( + = _<number>_ i ) ( n ( + _<number>_ ) / _<number>_ + number ( string space space - _<number>_ ( number -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string -- ( string --
f ( i > j ) {
rintf ( _<string>_ , k ) ; } } }
or ( j = _<number>_ ; j <= ( + j ( + j ; number ++ ; number ++ ; number ++ )
or ( j = _<number>_ ; j <= ( k - + + + , ++ , ( h }
or ( c = ( n - _<number>_ ) n -- ( h = _<number>_ ( + _<number>_ ) -- ) ) {
or ( a = _<number>_ ; a <= ( j + _<number>_ ) n ++ ( i ( + _<number>_ ( + _<number>_ ) ++ ; ; A ++ ) ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ ) n ++ )
nt n , k , l , i , j , k , num ;
or ( k = _<number>_ ; k <= <END_BUG> ; i = i } _<number>_ ( + _<number>_ number + i ( height ini _<number>_ ( i - _<number>_ number number number { i number - _<number>_ number , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , + _<number>_ number ( , _<number>_ number , ,
rintf ( _<string>_ , j ) ; } }
rintf ( _<string>_ , ini + j ) ; string = - i > - + _<number>_ > , n ; , { k ++ number { printf ( _<string>_ l k = k = k = k + j + j + _<number>_ + j + , , k + _<number>_ + , j + , + _<number>_ + , j + , + _<number>_ + , { }
or ( j = h ; j >= _<number>_ < = _<number>_ < number < i < j n )
rintf ( _<string>_ , c % _<number>_ ) ; , _<string>_ = for ( _<number>_ = _<number>_ & printf ( _<string>_ + n int n int for ( for ( ( k ) + _<number>_ ( string for ( k = _<number>_ = _<number>_ else for ( k ) for ( ( - _<number>_ = _<number>_ else = _<number>_ = _<number>_ h = _<number>_ = _<number>_ = k for ( k ) for ( ( - _<number>_ = _<number>_ h = _<number>_ h = _<number>_ = _<number>_ = _<number>_ = _<number>_ = k for ( ( k for ( _<number>_
= count - _<number>_ ;
rintf ( _<string>_ , i % _<number>_ ) <
for ( j = _<number>_ ; j <= ( n + _<number>_ ) k _<number>_ < number ( sp ++ ) ) j ++ ( n ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ ( n = _<number>_ (
nt num = ( j - _<number>_ ) / = _<number>_ < } ) a = { _<number>_ / _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < j < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h < h
or ( j = i ; j < ( h + _<number>_ ) / _<number>_ ; - ++ ; string ++ < , {
or ( j = i ; j < ( h + _<number>_ ) / _<number>_ ) )
or ( j = ( n + _<number>_ ) ; j <= ( n + _<number>_ ) / _<number>_ ; j ++ )
nt n , i , j , k ;
rintf ( _<string>_ ) ; } {
or ( j = _<number>_ ; j <= ( n & = ( l { = ) > , , , n ( string - i number + _<number>_ ( i = _<number>_ ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k & i ( k &
or ( j = _<number>_ ; j <= ( i int i ) > > > h > j = _<number>_ > string > string number number )
rintf ( _<string>_ , k ) ; } int printf ( _<string>_ , n ( , l + b number h ( count ( n j ; } string ++ ) ) ) ; string <= + _<number>_ = _<number>_ ; string ++ ) k <= + _<number>_ = _<number>_ ; string ++ ) k <= + + _<number>_ = _<number>_ ; string ++ ) k <= + + _<number>_ = _<number>_ > + _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > k , k ++ j j ++ j j ++ j j ++ j j
or ( j = i ; j <= ( height j , _<number>_ ) printf ( _<string>_ string ) > i , i { - _<number>_ number number number _<number>_ = > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
nt n , i , j ;
rintf ( _<string>_ , k ) ; } string <= , h < = - _<number>_ < , string < n < }
rintf ( _<string>_ , k ) ; } int { h ++ ;
rintf ( _<string>_ , c = ( h ) / _<number>_ ) ;
or ( i = _<number>_ ; i < ; number ++ number number number number number ) for ( n {
rintf ( _<string>_ , l ) ; }
rintf ( _<string>_ , l ) ; }
or ( j = _<number>_ ; j <= i ; ++ k number number )
rintf ( _<string>_ , j - k ) ;
rintf ( _<string>_ , j - k ) ;
or ( i = _<number>_ ; i < j < printf ( k number ; ; ; ; = = = { = = = { = { = } _<number>_ string string number ; number > }
rintf ( _<string>_ , j , k ) ;
or ( ; k <= ( n / _<number>_ - _<number>_ k = _<number>_ ; / ++ number number number number number number number number number number number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ > }
= n / _<number>_ + _<number>_ - i ;
or ( j = i ; j <= h ; j ++ ) string ++ ( a + j ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) j ++ number number number number number number number number number ) j <= string < string < string < string < string < string < string < string < string < string < string < string < / _<number>_ number number number number number number < _<number>_ < string < string
or ( p = _<number>_ ; p <= k , b , }
or ( j = ( n + _<number>_ ) } ; + number <= number number + i > ( i number _<number>_ ) for ( + + _<number>_ number + ( j n n -- number number number -- ; string -- ; string -- ; for ( + + _<number>_ ; + + }
nt k , i , j , h , int int int number < k < k < _<number>_ < _<number>_ < , % _<number>_ < _<number>_ < % _<number>_ < , , , / _<number>_ < _<number>_ number < % _<number>_ number ) < }
or ( ; i <= h ; i ++ ; p ++ ; string height ++ ;
nt i , j , c ;
or ( j = j ; j <= h { j <= n { }
hile ( ini > _<number>_ ) {
rintf ( _<string>_ , ini + j ) ;
f ( i + j <= n / _<number>_ number _<number>_ > _<number>_ > _<number>_ ( k > i > N > N , _<number>_ number _<number>_ > <unk> > N > N > _<number>_ > _<number>_ > <unk> > N > N s > N > N string _<number>_ number _<number>_ > <unk> > N > N string _<number>_ number _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_
or ( j = i - ( n / _<number>_ + _<number>_ ) number , , = = _<number>_ = _<number>_ = _<number>_ = - _<number>_ = _<number>_ = k ) j <= k ) j <= k , = ; = ++ + > l + _<number>_ ) for ( number i i i i i + _<number>_ + _<number>_ + number + _<number>_ = _<number>_ = _<number>_ = k = _<number>_ = _<number>_ = + _<number>_ = _<number>_ = + _<number>_ = - _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = +
or ( j = i - ( h + _<number>_ + - _<number>_ + string = > > > > > > > > > i ) for ( k = , l number > _<number>_ number k >= > > > > > > i + _<number>_ number k number k number + _<number>_ number k number k number )
or ( j = i ; j < ( h + _<number>_ ) / _<number>_ ) ( , ++ = ; string ++ = )
nt i , j , n ;
f ( i <= ( n * i - _<number>_ ( - = _<number>_ ( + + _<number>_ ) printf ( _<string>_ i number / _<number>_ ( + + _<number>_ ) / _<number>_ ) ) ) ; j = number > { number = number > > ( string l _<number>_ ( number - _<number>_ ( string string number + _<number>_ + number + _<number>_ = _<number>_ = - ) = - _<number>_ = _<number>_ = _<number>_ = string > s = _<number>_ = _<number>_ = string j = _<number>_ = ) * s = s { _<number>_ for (
nt i = h / _<number>_ ;
or ( k = _<number>_ ; k <= n string _<number>_ / _<number>_ ; j = j string _<number>_ + j + j + j + = }
nt n , i , j , k ;
= n + _<number>_ - i ;
nt h , i , j , k , string > string > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ + , - _<number>_ e > _<number>_ > - _<number>_ e ) > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > _<number>_ > - _<number>_ + , - _<number>_ e )
= h / _<number>_ - i + _<number>_ ;
or ( k = _<number>_ ; k <= p < / _<number>_ < string ; , ++ ) -
rintf ( _<string>_ , j ) ; } } }
or ( j = _<number>_ ; j <= ( h } _<number>_ number = ) d ++ number ;
or ( k = max - i ; k < }
or ( s = _<number>_ ; s <= x + _<number>_ , i < } < j < int a )
or ( j = i - _<number>_ ; j >= _<number>_ > + + + _<number>_ ; number -- + s ( j -- + _<number>_ + j -- number number number number number number number number number number number number number number number number number number number number ( h ( h ( h + _<number>_ ( ) -- ( h -- ( h -- ( ( h + _<number>_ ( h -- ( h -- ( h ( h ( h + _<number>_ ( h -- ( h -- ( h ( h ( h + _<number>_ (
or ( j = k - _<number>_ ; j >= _<number>_ ; j -- ) {
or ( d = _<number>_ ; d <= ( c - _<number>_ number if ( if ( k n ( - _<number>_ ) int - _<number>_ ) { j <= ( j n n n n n n ) { _<number>_ + _<number>_ ; - j ++ ) for ( - _<number>_ = _<number>_ ) ) for ( - ( j h _<number>_ ; - <= > > > > h h h _<number>_ ; - - - _<number>_ ; - - - _<number>_ ; - - _<number>_ ) for ( - ( } _<number>_ i - _<number>_ i ;
or ( j = i ; j <= _<number>_ ; i = = = = = = = = = = = = = = = = = ; ; + + _<number>_ number number > _<number>_ number number > _<number>_ = ( j for ( j number ( ( ) <= _<number>_ number + ) number _<number>_ number number number number _<number>_ number number number number - _<number>_ number number number number number _<number>_ number number number number _<number>_ number number number number - _<number>_ number number number number number _<number>_ number number number number _<number>_ number number number
or ( b = ( n - _<number>_ ) / _<number>_ ; / >= _<number>_ > _<number>_ ( number - / _<number>_ ( for number for ( for ( int { number = ( = i n -- ) ) ; string string ) string -- ) string
or ( d = _<number>_ ; d <= ( n + _<number>_ > int int if ( int k ; & & & n > ) x ++ > _<number>_ > - _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = ) , - _<number>_ ( - _<number>_ ; - _<number>_ ; - _<number>_ ( - - - - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ( - - - - - - _<number>_ ; - _<number>_ ; - _<number>_
or ( c = ( ( n - _<number>_ ) if ( printf ( _<string>_ + for ( string ; string >= _<number>_ > string -- ) ) <
or ( d = c ; d >= _<number>_ ; d -- ; string -- ) +
rintf ( _<string>_ , k - j - _<number>_ ) >
or ( j = ( p - i + _<number>_ < + i ( k ++ ; - + a ( j ++ ( / _<number>_ ( j ++ > n ; - ++ ; - _<number>_ ; - - + + + + + + _<number>_ ; - i ; i ++ ; i ++ ; i ++ ; string ++ ; string j ++ ; string ++ ; string ++ ; j ++ ; j ++ ; j ++ ; j ++ ; j ++ ; j ++ ; j ++ ; j ++ ; j ++ ;
or ( k = i ; k >= _<number>_ ; printf ( _<string>_ ; / -- ( else ) ) j -- ( -- number number number -- number number ( number ( -- ( ( ( number - j ( number -- ( number -- ( number -- ( = _<number>_ = _<number>_ -- = ) = _<number>_ ) = + , s -- = _<number>_ = _<number>_ -- = = _<number>_ -- = ) -- = _<number>_ = _<number>_ -- = + _<number>_ = - , -- = = _<number>_ -- = = _<number>_ -- = ) --
nt h , i , j , k ;
nt n , i , j , k , k > _<number>_ > _<number>_ > _<number>_ ;
or ( s = _<number>_ ; s <= x ; ++ j number number number number ( j ++ + i + S + j + S + j + _<number>_ ) > printf ( _<string>_ + string ) >
or ( k = i ; k <= ( ( string ) { _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_ number _<number>_
or ( k = i ; k <= ( ( { { k = ( ( { { k <= ( ( { { k = ( ( { h ) { - _<number>_ ; + string ; + + _<number>_ ; + string ; + string ; + string ; + string ; + string <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( j = _<number>_ ; j <= ( ( b + _<number>_ ) / _<number>_ ) + ( i - _<number>_ ) ; j ++ )
rintf ( _<string>_ ) ; }
rintf ( _<string>_ , j - k ) ;
or ( j = _<number>_ ; j <= n / _<number>_ ) ) } }
or ( j = i - ( n / _<number>_ + _<number>_ ( j string j number _<number>_ ( j ++ ( k , , ++ , = _<number>_ ( = k - _<number>_ number _<number>_ > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k
or ( b = i - _<number>_ ; b < number + _<number>_ > number > number > ( - _<number>_ ; / - _<number>_ ; / ( / = i ++ ; ; / ++ ; ; / ++ ; ; / ++ ; / _<number>_ ; / _<number>_ ; / _<number>_ ; / _<number>_ > / - _<number>_ ; / _<number>_ > = number b b b - _<number>_ ; / _<number>_ > else else printf ( B ; & A ; printf ( _<string>_ for ( / _<number>_ for ( / _<number>_ = = = _<number>_ ;
or ( k = i + _<number>_ ; k <= h , k )
rintf ( _<string>_ , ( i + _<number>_ + j ) % _<number>_ ) number ( i + _<number>_ + j ) number _<number>_ number j number ;
rintf ( _<string>_ , ( i + _<number>_ + j + _<number>_ + ( i j + _<number>_ + ( ( i j j + _<number>_ + ( i i + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number / number ;
or ( j = ( ( n - i ) for ( for ; for > _<number>_ ) string _<number>_ ) ) &
or ( k = max - i ; k < }
rintf ( _<string>_ , count % _<number>_ ) ; }
or ( d = _<number>_ ; d <= ( n - _<number>_ ) for ( * l number - _<number>_ ) ) j <= ( { _<number>_ nd < ( { _<number>_ nd - _<number>_ ; if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
or ( k = i ; k <= ( n + _<number>_ ; { { _<number>_ { h <= < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
rintf ( _<string>_ , j ) ; } } }
or ( d = n ; d >= _<number>_ ; d -- ) {
rintf ( _<string>_ , n % j ) ;
or ( j = _<number>_ ; j <= ( n ( _<number>_ ; i ++ ( , number ) ) ) printf ( _<string>_ = ( , number - _<number>_ ) d * ( , number _<number>_ ) d _<number>_ = - + + _<number>_ ) > ( , number _<number>_ ) > ( , number _<number>_ ) > ( , number _<number>_ ( i ) - _<number>_ ( i ++ ( int ( ( int _<number>_ ) printf ( _<string>_ + _<number>_ + a ) printf ( _<string>_ + a ) number _<number>_ ) printf ( _<string>_ + a
rintf ( _<string>_ , j ) ; }
or ( j = ( h / _<number>_ + _<number>_ printf ( _<string>_ k i ) ; , { { k ++ )
f ( j <= n - i )
or ( j = _<number>_ ; j <= ( k - - - - - - , = ( j m number > k m m > k m > k > k m > k > k m > k > k > k m > k > k > k m > k > k > k m > k > k > k m > k > k > k m > k > k m > k > k m > k > k m > k > k m > k > k m >
or ( n = p - n ; n <= k ; int int int int string ; o ++ > l > i ( l ++ > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i > i >
canf ( _<string>_ , & a ) ;
nt i , j , n , k ;
or ( i = ( h + _<number>_ ) / _<number>_ ; = > _<number>_ ; = = number n p p p p p p p p p p p p p p p + _<number>_ = _<number>_ ; number = number > > > number > number p _<number>_ = _<number>_ ; number = number p _<number>_ = _<number>_ ;
nt a = ( h + _<number>_ ) ;
or ( j = i ; j <= i + _<number>_ < ( j ++ ; = ++ )
or ( b = _<number>_ ; b <= ( n number _<number>_ ; , ++ ( j ++ > = ( , + _<number>_ > { n ++ > <START_BUG> > , , n > ( , , n ++ > ( , , n + _<number>_ > { > _<number>_ > { _<number>_ > _<number>_ > { _<number>_ > ( , + _<number>_ ; + i ; printf ( _<string>_ = + k ;
rintf ( _<string>_ , k ) ; } }
nt h , m , i , j , k , l number o number ;
f ( j < ( ( n + _<number>_ ) f _<number>_ else else = )
or ( j = _<number>_ ; j <= _<number>_ - h ( j - i + _<number>_ i = , int int int + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + n + _<number>_ + n + _<number>_ + n + + + + + + + + + + _<number>_ number number number - _<number>_ number > _<number>_ number * , > _<number>_ >
or ( i = m ; i >= _<number>_ ; , -- ; string -- ) {
nt a , b , c , d , n ;
or ( d = _<number>_ ; d <= ( n - _<number>_ ) } - _<number>_ ; int n ) for ( int int int ) for ( int int int ) for ( int int int ) for ( int int int ) ) for ( int int int ) for ( int int int ) for ( int int int ) ) for ( int int int ) ) for ( int int int + + _<number>_ ; o <= < < < < < < < < < < < < < < < < < <
or ( k = i + _<number>_ ; k >= _<number>_ < printf ( _<string>_ printf ( , ( i - _<number>_ ( - k ++ ( - _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ ( - + _<number>_ = , , ++ = ; , ++ = - _<number>_ = , , , , , , , , , , ,
or ( k = j ; k <= m ; k ++ > }
nt h , m , i , j , k , h number l number number ;
or ( j = _<number>_ ; j <= i ; ++ } + } )
or ( i = k ; i >= _<number>_ < for ( = _<number>_ -- ( b -- ( b -- ( { <unk> number - _<number>_ number -- number number number number number number -- number number number > {
or ( o = _<number>_ ; o <= j ( , , ++ else > string ; int int int int int int int int ; int string + _<number>_ ; int int int int int int int int ; int string + _<number>_ ; int int int int int int int ; int string + _<number>_ ; int int int int int int int ; int string + _<number>_ ; int int int int int int int ; int string + _<number>_ ; int int int int int int int ; int string + _<number>_ ; int int int
rintf ( _<string>_ , k - j + _<number>_ ( = = = _<number>_ -- ) ; m -- ; = = = ) { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
or ( j = i ; j > _<number>_ ; number -- ( number -- ) )
or ( i = k ; i >= _<number>_ > , > k > _<number>_ ) for ( , , , i >= _<number>_ ) for ( , , = m ) ) for ( , , number m ) ) for ( , , number m >= _<number>_ ) for ( , , = m ) ) for ( , , number m ) ) for ( , , number = _<number>_ ) for ( , , = m ) ) for ( , , number m >= _<number>_ ) for ( , , = m ) ) for
rintf ( _<string>_ , ( i + k ) ) ;
rintf ( _<string>_ , j - k ) ;
rintf ( _<string>_ , j ) ;
or ( j = _<number>_ ; j <= i ; i ++ = <unk> ++ = k ++ = _<number>_ > <unk> number = + _<number>_ = + _<number>_ > + + _<number>_ = + _<number>_ > <unk> number _<number>_ = _<number>_ > <unk> = + _<number>_ > <unk> = + _<number>_ > <unk> > + _<number>_ = _<number>_ > <unk> > _<number>_ = + _<number>_ > <unk> > <unk> = + _<number>_ = + _<number>_ > <unk> > _<number>_ > <unk> ) for ( - _<number>_ = _<number>_ > <unk> ; - - - - - - - _<number>_
nt i , j = h ;
or ( m = k ; m <= h ; i ++ ( {
or ( d = _<number>_ ; d <= ( ini string _<number>_ ) } _<number>_ ) < _<number>_ < < ( { _<number>_ { > ( k } - _<number>_ ) printf ( _<string>_ + m ) printf ( _<string>_ + m ) number _<number>_ ) > ( k } - _<number>_ ) > ( k } - _<number>_ ) printf ( _<string>_ + m ) > ( k } - _<number>_ ) printf ( _<string>_ + m ) > ( k } - _<number>_ ) printf ( _<string>_ + m ) > ( k } - _<number>_ ) printf
or ( d = _<number>_ ; d <= ( i string _<number>_ ) n _<number>_ ; for ( for ( n - _<number>_ < _<number>_ < ( { _<number>_ ) printf ( _<string>_ ) < ( { _<number>_ nd - _<number>_ ) printf ( _<string>_ ) < ( { _<number>_ nd <= ( { for ( j - _<number>_ - _<number>_ , { - _<number>_ ) printf ( _<string>_ ) < ( { _<number>_ nd <= ( { for ( j - _<number>_ - _<number>_ , { - _<number>_ ) printf ( _<string>_ ) < ( { _<number>_ nd <=
or ( j = _<number>_ ; j <= ( number string _<number>_ = _<number>_ ) j ++ ( + number ) number number number number number - _<number>_ number _<number>_ number k number % _<number>_ number _<number>_ number
or ( j = _<number>_ ; j <= ( + _<number>_ = _<number>_ ) j ++ ) string ++ ) j ++ ( ) = _<number>_ = _<number>_ = ( , m m ) = ( , m m ) = _<number>_ = _<number>_ = ( , m m m ) = ( , m m ) = _<number>_ = _<number>_ = ( , m m m ) = ( , m m ) = _<number>_ = _<number>_ = ( , m m m ) = ( , m m ) = _<number>_ = _<number>_ = ( , m m
or ( k = height / _<number>_ ; k ; k -- > - _<number>_ + k ; printf ( _<string>_ = _<number>_ + j -- ; printf ( _<string>_ = _<number>_ + j -- ; printf ( _<string>_ = _<number>_ & j -- ; printf ( _<string>_ = _<number>_ & j -- ; h -- ; printf ( _<string>_ = _<number>_ & j -- ; h -- ; h -- ; printf ( _<string>_ = _<number>_ & j ;
rintf ( _<string>_ , ( l + l ) h _<number>_ ) > n > k > , }
or ( j = _<number>_ ; j <= string < } ; { { {
rintf ( _<string>_ ) ; } {
rintf ( _<string>_ , l ) ; } }
rintf ( _<string>_ , l ) ; } }
rintf ( _<string>_ , j % _<number>_ ) ; j ++ ) { h = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ = & printf ( _<string>_ =
rintf ( _<string>_ , n % _<number>_ ) ; }
rintf ( _<string>_ , ( f - a ; ( , , { d = { k & string ( string & + _<number>_ ) & _<number>_ ) ) > _<number>_ > l > i > i ) > _<number>_ > i > i ( j printf ( _<string>_ , ; { for ( height = _<number>_ > _<number>_ > i printf ( _<string>_ , ; ; height ++ ( j ++ ( j ++ ( j ++ ( height ++ ( height = i - _<number>_ ( j ++ ( height - i ( j ( j - i
nt n , i , j ;
rintf ( _<string>_ , j ) ; }
= m ;
or ( i = _<number>_ ; i <= k , _<number>_ < ( j ++ ) ) string ++ ) } }
nt h , h , i , j , m ( number number ( , + _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ ; i <= ( ( k + _<number>_ > , _<number>_ number n number n number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ ; j <= i ; h ++ ) for ( string i = _<number>_ > _<number>_ > { n <= { a ++ ) string ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) i ++ ) } {
rintf ( _<string>_ . ; }
or ( i = _<number>_ ; i < number ; i ++ = _<number>_ ;
rintf ( _<string>_ , j + j < m < m < - - - - - _<number>_ < number < - - - i ; printf ( _<string>_ , + = = = = = = = = = _<number>_ + n + = _<number>_ ( = = _<number>_ ( = _<number>_ ( = _<number>_ ( = - = + = = _<number>_ ( = _<number>_ ( = = = _<number>_ ( = _<number>_ ( = = = _<number>_ ( = _<number>_ ( = = = _<number>_ ( = = = _<number>_ ( = = = _<number>_ ( =
nt i , j ;
nt n , i , j number > _<number>_ > } ;
or ( c = ( n - _<number>_ > number for ( printf ( _<string>_ = _<number>_ -- ) for ( int l number < < < _<number>_ > int int int number number number -- number number number number number number -- number number number -- number number number -- number number , printf ) number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number -- number number --
nt a , b , c , for ( a , / / _<number>_ ; d < } ;
rintf ( _<string>_ , l ) ; / _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( p = _<number>_ ; p <= ( , + _<number>_ ) / _<number>_ ; p ++ ) {
ni = ( _<number>_ + k ) m m m m ;
or ( j = _<number>_ ; j < j > j < + + _<number>_ ) d = _<number>_ > = _<number>_ ) b = height j j j } - _<number>_ ( ) > _<number>_ > j > _<number>_ ( j int ) > _<number>_ ( j + _<number>_ ( ( , , ) ( ) }
f ( i % _<number>_ ) string ( number ;
tart ++ ; }
or ( j = i ; number <= ( n number _<number>_ ) / _<number>_ ; i ++ ) + _<number>_ ( , i - _<number>_ ) d
or ( j = i ; j <= ) < ) int + _<number>_ < ) + _<number>_ < ) + _<number>_ < + _<number>_ < = ) } {
or ( l = k + _<number>_ { , j ) > i ) , ini ++ ( ini ++ = _<number>_ = m - _<number>_ = , j ++ = _<number>_ ( h ++ ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( ( h ++ ( (
f ( i > j ) {
or ( j = i ; j ) _<number>_ > ; = -- ( = = _<number>_ + _<number>_ + , -- < ) ;
rintf ( _<string>_ , n ) > , > , , j > = ; j = , ; string = _<number>_ ( number ) ; k = _<number>_ > = _<number>_ ; m = i { for ( i + _<number>_ ; m ( , m > i > i > i > i > i > i > i > i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i ( i { height ( ( i { = _<number>_ (
or ( i = _<number>_ ; i <= string i i - _<number>_ ( string ++ + _<number>_ + n + _<number>_ + n + _<number>_ + , , , ++ + , , , , , ) ; , ++ + , ) printf ( _<string>_ for ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
or ( c = ( n - _<number>_ ) string _<number>_ > int int int int > _<number>_ > o <= _<number>_ ; int int int i number ; int int m number < < < < m > _<number>_ ; p -- > j -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p -- > _<number>_ ; p
f ( k > k ) {
or ( j = A ; = < _<number>_ ; = -- ; + _<number>_ ; number -- ) string = _<number>_ > A ; + + _<number>_ ) {
nt j , i , j , j + _<number>_ ;
rintf ( _<string>_ , j + _<number>_ ) ; p ++ ) } printf ( _<string>_ / , , , i + _<number>_ ) > > ; string ++ ) string = = = = = = = = = = = = = = = = = = = = = = = = = = = = + + + i ; - i ; - i ; - i ; - i ; - i ; - - i ; - i ; - - i ; - i ; - - i ; - i ;
rintf ( _<string>_ , n % _<number>_ ( h <START_BUG> _<number>_ ( / / _<number>_ ( / / / _<number>_ number / _<number>_ number > o > o > o > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h > h
or ( j = _<number>_ ; , <= > > > ; + + ( ; = ++ ) n ( , ;
f ( n < ( ( h = _<number>_ ( n + _<number>_ ) - _<number>_ ( a < , k , }
nt h , m , i , { = _<number>_ , for ( for < _<number>_ h number ( i = _<number>_ = _<number>_ , } , }
or ( l = _<number>_ ; l <= k ; l ++ + a ++ + {
or ( k = _<number>_ ; k < ( h printf _<number>_ + h ( ) > n ( = _<number>_ , } = _<number>_ ( + _<number>_ height , + , + _<number>_ = ) = _<number>_ ) ( + + _<number>_ ) ( i number - _<number>_ ) ( i number }
or ( j = ( h / _<number>_ + _<number>_ ( i ) - _<number>_ } ) > = = = _<number>_ > number { > _<number>_ b ( number int number ( , ) -- + _<number>_ j + ( ) -- ; j -- ; ; - -- ; / -- ; / _<number>_ j ) printf ( _<string>_ - + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
rintf ( _<string>_ , k - j + _<number>_ ) < < ; }
or ( j = i ; j > _<number>_ ; j -- ( a = i -- ; number -- ; printf ( _<string>_ k string = = = = = _<number>_ ; = number -- ;
or ( j = ( n + _<number>_ ) / _<number>_ ) ( h <= > > > ; = ++ > ; b ++ > - _<number>_ > ; ; = = + > k ; + ( ( j > , j - _<number>_ ( { k ++ ( { k ++ ( {
f ( j >= ( ( b + _<number>_ ) / _<number>_ ) - ( i - _<number>_ number i number i number && > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
f ( j >= ( ( b + _<number>_ ) / _<number>_ ) - ( i - _<number>_ ) ) && ( = <= ( b + _<number>_ ) / _<number>_ ) )
or ( j = i - ( h + _<number>_ ) / _<number>_ > ( - _<number>_ ) printf ( _<string>_ } ) ;
or ( j = i - ( h + _<number>_ ) / _<number>_ ; - string >= ; string -- ) {
or ( i = x + _<number>_ ; i >= _<number>_ ; -- = = printf ( _<string>_ } A + _<number>_ + i number = _<number>_ = _<number>_ -- = _<number>_ = _<number>_ -- ) ) - , , , , , , , , , , , , , , , , , h < _<number>_ < _<number>_ < _<number>_ < , _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < = _<number>_ < _<number>_ < = _<number>_ < & { _<number>_
= _<number>_ ;
or ( k = i ; k <= ( ( h + _<number>_ ) / _<number>_ number number ( h + _<number>_ ( - _<number>_ ( - h ( h + _<number>_ ( - _<number>_ ( - h > ) > _<number>_ > = _<number>_ > i > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > j > j > i ; , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
rintf ( _<string>_ , k ) ; } }
or ( j = _<number>_ ; j <= ( h + _<number>_ ) / _<number>_ ; j ++ number number number number number number number number number number number number number number number number number number number number ( count ) ++ ( count ++ ( count ) string _<number>_ ( { - { _<number>_ {
rintf ( _<string>_ , f = e + d ) ;
or ( m = _<number>_ ; m <= i ; a ++ = string = _<number>_ + , printf ( _<string>_ i j = i ++ = _<number>_ = i + } = _<number>_ + = _<number>_ + m string j ++ + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + , i + _<number>_ + i + _<number>_ + i + _<number>_ + - _<number>_ + - _<number>_ + - _<number>_ + - - _<number>_ + - - _<number>_ + -
or ( m = _<number>_ ; m <= i ; for ( b ( { _<number>_ i = _<number>_ i ( j ++ ( x ++ = ) = _<number>_ = _<number>_ = _<number>_ = } _<number>_ = _<number>_ + = _<number>_ + m string - _<number>_ + m + _<number>_ + m + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ + i + _<number>_ +
or ( o = _<number>_ ; o <= p ; o ++ ) {
or ( i = x + _<number>_ ; i >= _<number>_ ; -- i ) if ( for ( , k == _<number>_ > _<number>_ -- = _<number>_ = { -- i = _<number>_ < _<number>_ < for ( , -- , = _<number>_ = for ( c <= string ) int / _<number>_ < _<number>_ < string - = string j j j j j j j j j = _<number>_ < string number j = _<number>_ < string number _<number>_ < _<number>_ < string < string number _<number>_ < j = string number _<number>_ < string < _<number>_
or ( j = _<number>_ ; j <= i ; ++ j + {
or ( m = _<number>_ ; m <= i - _<number>_ ; m ++ ) {
or ( m = _<number>_ ; m <= ( n + _<number>_ ) * _<number>_ - i ; n ++ + i + j ++ + n + _<number>_ + i ;
nt n , i , j , k , x , y , z ;
or ( j = i ; k >= _<number>_ ; - - for ( for ( b = i > printf ( _<number>_ ini { printf ( _<string>_ x printf ( _<string>_ x printf ( _<string>_ j - h ; {
rintf ( _<string>_ , ( h + _<number>_ ) / _<number>_ for ( + n -- ) ( , height ) for ( x ( ) string _<number>_ printf ( _<string>_ for = + ( + - _<number>_ > string > string ) ) > _<number>_ > string ) > > > _<number>_ > string ; i -- > < number > _<number>_ ; i -- > < }
or ( i = m ; i >= _<number>_ ; , -- ) string == _<number>_ < i < { _<number>_ a - i >= _<number>_ ; , -- ( } ( for ( , - _<number>_ ( i -- ) ) -- + _<number>_ + , -- + j -- + j + x ;
or ( j = _<number>_ ; j < height / _<number>_ - i ; j ++ number number number number number number number number number number number number number number number number number number ; printf ( _<string>_ - i - = <unk> }
or ( a = _<number>_ ; a <= ( b i i , _<number>_ ( + i , k ++ ; ; - ++ ; for ( for ( for ( for ( , number = _<number>_ ; , <= ) ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ) j ) ) ) ; printf ( ++ ) ; string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ )
nt i , j , h , h ;
= t - _<number>_ ; printf ( _<string>_ ) > a > a > a j - _<number>_ > int int / _<number>_ > / _<number>_ > / _<number>_ > j ( ini height height height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i height - _<number>_ ( i ( ini height _<number>_ ( ini height - _<number>_ ( i ( ini height
nt i , j , n ; scanf ( _<string>_ { & + + , ( + _<number>_ ) - _<number>_ ; % i j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
or ( b = _<number>_ ; b <= ( n j j j j j = _<number>_ ) for ( k = _<number>_ ) ) , k <= number i i i i i i i i i i i i i i i i i i i i i i i i i printf ( _<string>_ j k ( k i ++ ( k i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
nt n , a , b , b = _<number>_ ) i i i i ) ) )
or ( j = _<number>_ ; j <= ( n + _<number>_ ) / _<number>_ ; j = { i n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n number _<number>_ number + + _<number>_ number + +
or ( i = _<number>_ ; i <= n + _<number>_ ; i = i + _<number>_ ( i - _<number>_ ; = = = = _<number>_ ; = = = = = = _<number>_ ; = <= i - _<number>_ ; = = = = _<number>_ ; = = = = _<number>_ ; = _<number>_ ; = = = = _<number>_ number = = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number = = _<number>_ number
nt a , b , c , d , n number > string > <unk> ;
rintf ( _<string>_ , ( count + m ) % _<number>_ ) ; }
for ( j = _<number>_ ; j <= ) int k - _<number>_ ) - _<number>_ ) - _<number>_ ( string - _<number>_ = _<number>_ ( } - _<number>_ ( + _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( { for
or ( j = ( n + _<number>_ ) / _<number>_ ) ) printf ( _<string>_ ( - ( - _<number>_ ) } }
or ( j = ( n + _<number>_ ) } ) > _<number>_ > j ( , = _<number>_ ) } - _<number>_ > string = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ( = _<number>_ ) j
or ( j = i ; j <= i ; + = + _<number>_ number + _<number>_ ) height <= i + _<number>_ ; string = = = = = = = _<number>_ > = = = = _<number>_ > = = = = = = _<number>_ > = _<number>_ ; string <= = = = = = = = = = _<number>_ > i + _<number>_ ; string <= = = = = = = = = _<number>_ > = = = = _<number>_ ; = = = = = = = = _<number>_ > i + _<number>_ ;
rintf ( _<string>_ , i ) ; }
or ( p = _<number>_ ; p <= ( n + _<number>_ ) / _<number>_ ; p ++ ( i ( i j j ( i j j - _<number>_ ( i j ++ ( i ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j ( i j j
f ( j < ( h / _<number>_ - + { _<number>_ < _<number>_ < b = _<number>_ > i ;
rintf ( _<string>_ , ( j + _<number>_ ) { { = _<number>_ ) ; k = , number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( _<number>_ = i , ) }
rintf ( _<string>_ , ( i + _<number>_ ) } ) ) ) ) ) ; for ( + _<number>_ i = _<number>_ ( + n + _<number>_ number n + _<number>_ number n number - _<number>_ number number number , ) ( - _<number>_ number n + _<number>_ number number number , ) ( - _<number>_ number n , n + _<number>_ number n , - _<number>_ number n , - n + _<number>_ number number , ) ( - _<number>_ number n , n + _<number>_ number , - _<number>_ number printf ( _<string>_ number ( i +
ax = ( h + _<number>_ ) / _<number>_ ;
rintf ( _<string>_ , k % _<number>_ ) ; }
or ( i = _<number>_ ; i <= ( n - _<number>_ ( } string _<number>_ ( { - _<number>_ i ( string number _<number>_ ( string ++ ( string number j ( string ++ ( string number _<number>_ ( { i ( string number _<number>_ ( string ++ ( string number _<number>_ ( { i ( string number _<number>_ ( string ++ ( string number _<number>_ ( { i ( string number _<number>_ ( string ++ ( string number _<number>_ ( { i ( string number _<number>_ ( string ++ ( string number _<number>_ ( { i ( string
or ( j = _<number>_ ; j <= i ; j ++ ) {
rintf ( _<string>_ , ( n - _<number>_ ) / _<number>_ - j ) ; } }
or ( j = _<number>_ ; j <= ( n + _<number>_ ) / _<number>_ - k ; j ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m ++ ) m
rintf ( _<string>_ , q ) ; }
or ( p = _<number>_ ; p <= ( n + _<number>_ ) / _<number>_ > k ) j ++ > _<number>_ ; k ++ > _<number>_ ; k ++ > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
nt n , b , c , d ;
rintf ( _<string>_ , e ) ; }
or ( j = i ; j <= _<number>_ ; number = number int number ( number i } - _<number>_ = _<number>_ = number - _<number>_ = _<number>_ = ) ; number = number - _<number>_ = ) i <= _<number>_ ; number = number - _<number>_ = ) i = number - _<number>_ ; i ( number ( number = number - _<number>_ = _<number>_ = number - _<number>_ = _<number>_ = number - _<number>_ = _<number>_ = ) - _<number>_ = ) ;
or ( o = _<number>_ ; o <= ( h - m ) ; o ++ )
f ( j < n ) {
= k - _<number>_ ;
printf ( _<string>_ ) ; } {
rintf ( _<string>_ , c ) ; } } }
or ( j = _<number>_ ; j <= i ; j ++ ) j ++ number number number number number number number number number ; = _<number>_ > - i > { _<number>_ } > {
or ( d = _<number>_ ; d <= ( c i i i i i ) printf ( _<string>_ l + _<number>_ ( int int ( , int ( , = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_ ( int = _<number>_
or ( d = _<number>_ ; d <= ( n - _<number>_ ( - _<number>_ ) for ( l number _<number>_ ) > ( - _<number>_ ) i - _<number>_ > ( - _<number>_ ) i - _<number>_ > l > - _<number>_ > l ) } }
or ( l = k + _<number>_ ; l <= j h _<number>_ > + _<number>_ > + _<number>_ > i -- number number ) /
or ( i = k ; i >= _<number>_ ; i -- ) {
nt i , j , h , l , a > } > _<number>_ j > } number number number number number > _<number>_ number ) > > _<number>_ j ) > + _<number>_ > > _<number>_ > if ( i j } string j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j
nt h , i = _<number>_ , j = _<number>_ number number number _<number>_ number - _<number>_ ) + _<number>_ + _<number>_ + _<number>_ + k + _<number>_ + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ + k + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
nt a , b , c , d , d , string = _<number>_ = _<number>_ ;
or ( k = _<number>_ ; k <= i k k k a a a i i i i i i - _<number>_ number number _<number>_ number string ( n ) = _<number>_ ( } = _<number>_ printf ( _<string>_ j i i i else ) ; {
rintf ( _<string>_ , n % _<number>_ ) ; }
nt i , j , h , l , a ;
or ( c = _<number>_ ; c <= a < count < , < , + _<number>_ < + _<number>_ < , string < _<number>_ < i < a < k < k < k < i < i < i < i < _<number>_ < i < + _<number>_ ( + n ( n - n ( + _<number>_ ( n - n ( + _<number>_ ( n - n ( + _<number>_ ( n - _<number>_ ( n - n ( + _<number>_ ( n - _<number>_ ( n - n ( + _<number>_ ( n - _<number>_
= d ;
= ( h + _<number>_ ) / _<number>_ - = number _<number>_ > , _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_
or ( i = _<number>_ ; i < n / _<number>_ < k ; = ++ ( = ++ ( ( l ) ) ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ (
or ( j = _<number>_ ; j <= _<number>_ * , , a ; + = k ++ number number number number number number number number number , - = , , , , , , , , , , , , , string = _<number>_ ;
rintf ( _<string>_ , count % _<number>_ ) ; { k = _<number>_ > { j - _<number>_ > i - _<number>_ > { string = _<number>_ ; string = _<number>_ ; printf ( _<string>_ = j } _<number>_ + n = _<number>_ = _<number>_ = _<number>_ = _<number>_ + string = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
or ( j = ( h / _<number>_ + _<number>_ ) ; a ; a -- ( number ) > ( , for ( / _<number>_ j ( + _<number>_ , + + _<number>_ ) ) -- ) /
= i - h / _<number>_ - _<number>_ ;
or ( j = j ; j <= h / _<number>_ + _<number>_ ; , ++ ; = ++ number number number number number number number number number number number number number number number number number = string ; } } {
or ( j = _<number>_ - i ; j <= + n > i > i ; h = h , h )
or ( k = _<number>_ ; k <= abs ( = a , _<number>_ ( = / _<number>_ ) & - - - - - - - - - - j number ( i = _<number>_ number number number number ) ) ; n = n + _<number>_ )
rintf ( _<string>_ , p ) ; - - for ( , { _<number>_ string ) < < < < < { _<string>_ < { _<string>_ < { _<string>_ < } string ) < string < } k < h ( number ( , ) ) < l < s < { _<number>_ / _<number>_ < { _<string>_ < { _<string>_ < { _<string>_ < { _<string>_ < { _<string>_ < { _<string>_ < { _<number>_ / _<number>_ < { _<string>_ < { _<string>_ < { _<string>_ < { _<number>_ / _<number>_ < { _<string>_ < { _<string>_ < {
nt p = ( h + _<number>_ ( }
or ( i = _<number>_ ; i <= > = number , _<number>_ ; } = + _<number>_ = + _<number>_ = + + _<number>_ number j number }
rintf ( _<string>_ , ( h + _<number>_ ) number _<number>_ > i number number i { <END_BUG> = k , k , k , k , + _<number>_ number for ( i number _<number>_ ) = _<number>_ = a ( = k j j j j j j , _<number>_ ; i <= j ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( d = _<number>_ ; d <= ( d j j - _<number>_ ) } _<number>_ ; printf ( _<string>_ h int int printf ( _<string>_ h int int printf ( _<string>_ h int int printf ( _<string>_ h int int printf ( _<string>_ h int int printf ( _<string>_ n > ( - _<number>_ ) for ( - _<number>_ ) k ) ) > j ) > _<number>_ > - _<number>_ > ( - _<number>_ ) for ( - ( - _<number>_ ) for ( - ( - _<number>_ ) for ( - ( - _<number>_ ) for
nt p = ( n - _<number>_ ) / _<number>_ ( { _<number>_ ) for ( j + number ; , <= { _<number>_ = _<number>_ ; j ++ ( x a k k ; , string ( }
rintf ( _<string>_ , i % _<number>_ ) ;
nt i , j , h , b ;
or ( j = i ; j <= ( n + _<number>_ ) / _<number>_ ; & & if ( if ( m ++ ) } } {
or ( p = _<number>_ ; p <= k - m - _<number>_ ; p ++ ; if ( j ++ ) for ( if ( - _<number>_ <= = string = string = string = string = string = string = string = _<number>_ ; p ++ ) } {
or ( n = p + _<number>_ ; n <= k - _<number>_ ; n ++ ) {
nt h , i , j , h ;
or ( p = _<number>_ ; p <= ( n - _<number>_ ) / _<number>_ ; p ++ > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
or ( l = _<number>_ ; l <= ( n + _<number>_ ) / _<number>_ ; k ++ )
or ( s = _<number>_ ; s <= x - i ; ++ i number number number number number number number number number ( string number - _<number>_ ( string ++ , , , , + , + } number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
rintf ( _<string>_ , ( i + _<number>_ + j ) % _<number>_ ) ;
or ( j = _<number>_ ; j <= ( , k ( i } / + _<number>_ ( ) ( number }
rintf ( _<string>_ , k - j + _<number>_ ( number i ) ) ; { b = number } number _<number>_ > number > number > _<number>_ > { }
or ( c = ( n - _<number>_ ) string _<number>_ > } > _<number>_ ) {
f ( j <= i ) {
nt k = ( n - _<number>_ ) / _<number>_ ;
or ( j = i ; j >= _<number>_ ( string number string -- ; x -- ( } ; }
or ( k = i ; k <= ( , i i = _<number>_ number - _<number>_ = , , / _<number>_ ) ; i = i , i , , ; for ( for ( , , ; printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string printf ( _<string>_ string i + _<number>_ number number number number - _<number>_ number number number number _<number>_ number p number , i , i
nt n , i , j , k ;
or ( i = _<number>_ ; i <= ( n + _<number>_ ) / _<number>_ ; string ++ number number number number ) string ++ ( / _<number>_ ( } + _<number>_ ( {
rintf ( _<string>_ , s % _<number>_ ) ;
f ( ( i != _<number>_ ) && ( + }
f ( ( i != _<number>_ ) && ( i != - number ( n ) ( height != + _<number>_ ) ( i != _<number>_ ; ; i ++ ) ) / ( _<string>_ ) ;
or ( j = _<number>_ ; j <= ( ( n + _<number>_ ) / _<number>_ ( , ( n number _<number>_ ( number = _<number>_ < _<number>_ < , < , h < _<number>_ < , h < _<number>_ < , h < _<number>_ < , h < _<number>_ < , h < _<number>_ < , h < ; number ++ < number < m < m < m < m < m < m < m < m < m < m < m < m < m < m < m < m < m < m
or ( j = i ; j <= n ; number = , i i } _<number>_ = _<number>_ ) x = = - _<number>_ number ; } }
= t - _<number>_ ; printf ( _<string>_ ( + _<number>_ ( _<string>_ ( _<string>_ ) ) ( _<string>_ ) ) ; a = { number number _<number>_ > l - _<number>_ ) > if ( }
or ( j = _<number>_ ; j <= i ( , , - _<number>_ ) = i + _<number>_ ( n - _<number>_ ( k - _<number>_ ( ( s { j = _<number>_ ) ) + _<number>_ ; , = i + _<number>_ j j j j j j + _<number>_ j j j j j j j j j j j j + _<number>_ j j j j j j j j j j ) number
rintf ( _<string>_ , q ) ; }
nt h , m , i , j , k , l , o , p , p , q ;
or ( k = j ; k <= m ; k ++ ) {
rintf ( _<string>_ , i printf ( _<string>_ j - _<number>_ ( c ( ( _<string>_ i i i - _<number>_ = _<number>_ = _<number>_ = * ( n - _<number>_ = * n = _<number>_ = * ( n - _<number>_ = * n = _<number>_ = * ( n - _<number>_ = * n ) ) ) ) ) ; = ++ ; = _<number>_ < number < number < number < _<number>_ ; number ++ + _<number>_ ; }
rintf ( _<string>_ , i % _<number>_ ) ; printf ( _<string>_ , number { _<number>_ ( number ( number ( , = _<number>_ = * n = _<number>_ = * n = _<number>_ = - _<number>_ = * n = _<number>_ = * n = _<number>_ = * n = _<number>_ = * n = _<number>_ = * n = _<number>_ = * n = _<number>_ ) ) for ( ; x <= = ; , ++ k ) ; x = _<number>_ < j / _<number>_ < j ; }
or ( j = k + _<number>_ ) )
= e ;
or ( b = _<number>_ ; b <= a < i ; k ++ , k ++ , string ;
etMaxLessThan ( - _<number>_ ) / _<number>_ ;
int n ;
rintf ( _<string>_ , k > string > string ) ( string ) ( for ( string n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
or ( i = _<number>_ ) ) {
or ( j = _<number>_ ; j <= i printf ( _<string>_ k j ++ ( i ( n ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++ ( ( n number _<number>_ ( t ++
or ( j = _<number>_ ; j <= ( ( t number _<number>_ for ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( -
or ( ; j <= = = = = )
or ( k = _<number>_ ; k <= n b + _<number>_ / _<number>_ ; , = , i i i , k , k , k , k , k , k , k , k , k , k ( k ; k = k , k , k , k , k + _<number>_ + _<number>_ + number + _<number>_ + _<number>_ + number i i i i i i i i n i n i n i n i i i i i i i i i i i i i i i i i i
nt n , i , i - i - _<number>_ ;
f ( ( ( i + j ) == < < < < < < < k > k > k > k > k > k > k > k > k > k > k > k > k > k > _<number>_ > k > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k > _<number>_ > k > k >
-- ;
or ( k = _<number>_ > _<number>_ > = number } printf ( _<string>_ + i ; k < ) ( number { _<number>_ k ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ( ( j & , , , , ( j & p ( + _<number>_ j ( + _<number>_ j ( + = _<number>_ ( + _<number>_ ) ) ) - n ) ) ++ ) ) /
nt i , j , for ( + _<number>_ number number > N number ) > <unk> > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N >
or ( k = i ; string <= ( k i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
or ( x = _<number>_ ; x < ( l , i + _<number>_ > l > j > j > j > j > j > j > j > i > _<number>_ > - _<number>_ > - _<number>_ > string > j > j > j > j > j > i > _<number>_ > - _<number>_ > - _<number>_ > string > _<number>_ > - _<number>_ > - i > for ( string m = _<number>_ ) ) printf ( _<string>_ number < < < < < < < < < < < < < < <
rintf ( _<string>_ , ( printf } _<string>_ ) < = = = = = + + + , _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < +
or ( i = _<number>_ ; i <= ( k b b + _<number>_ ( , , , k ( , , , + _<number>_ = _<number>_ = + + _<number>_ = _<number>_ = + + _<number>_ = _<number>_ = + + _<number>_ = _<number>_ = + + _<number>_ = + + _<number>_ = _<number>_ = i , _<number>_ number number number number _<number>_ number number number , = ) k - _<number>_ , = = _<number>_ , = = = _<number>_ , number j j j j ) ; number = number n n n n j n j
or ( j = _<number>_ < _<number>_ < a + _<number>_ < _<number>_ < , b ) a <= b - _<number>_ < int int int ( & number ( ( & ( _<number>_ ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ; for ( int int int int + number ; for ( int int int int
rintf ( _<string>_ , q ; a ++ ; printf ( _<string>_ i ( }
or ( b = ( number i i i i i i i i i i i i i i i i i i i i i i i ) string _<number>_ ; - j >= _<number>_ ; - - { _<number>_ , { _<number>_ , _<number>_ n -- ) k ; k -- ) k = ( { _<number>_ ) string _<number>_ ; - {
or ( i = n > j > _<number>_ > { i >= _<number>_ < , _<number>_ < _<number>_ + _<number>_ < , = _<number>_ < , _<number>_ + i + _<number>_ + _<number>_ < = _<number>_ < , _<number>_ < , = _<number>_ < , _<number>_ + i < _<number>_ + _<number>_ < , = _<number>_ < _<number>_ + i < _<number>_ < , = _<number>_ < , _<number>_ + i < _<number>_ + _<number>_ < , = _<number>_ < _<number>_ + i < _<number>_ < , = _<number>_ < , _<number>_ + i < _<number>_ + _<number>_ <
f ( ! ( h % _<number>_ == _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > l > l > _<number>_ > _<number>_ > l > l > _<number>_ > _<number>_ > l > l > _<number>_ > _<number>_ > l > l > _<number>_ > _<number>_ > _<number>_ > l > l > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ >
or ( j = _<number>_ ; + <= i for ( string ( string ( string - _<number>_ j j j + _<number>_ + , n + _<number>_ + , + _<number>_ + , + _<number>_ + , { _<number>_ + _<number>_ + , _<number>_ + _<number>_ + , _<number>_ + , { _<number>_ {
or ( k = _<number>_ > _<number>_ > int j string _<number>_ printf ( _<string>_ p = = = = = n b b b b b b b b b b b b b b b b b b b = n b b b b b = _<number>_ = _<number>_ ; n = n b b b b b b b b b b b b b b b b b b b b b b b b b b b n n n n b j j j ( number n b b j j j j
or ( k = i ; k <= m ; for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for (
or ( i = _<number>_ ; i <= h ; i ++ > e ++ > e > e number { _<number>_ / _<number>_ ( j ++ > * for ( } _<number>_ > * for ( } _<number>_ > * for ( } _<number>_ > * for ( }
f ( i <= k )
nt i = ( n + _<number>_ ) val _<number>_ < ;
or ( m = _<number>_ ; m <= i - _<number>_ ; m ++ ) {
or ( j = i - _<number>_ ; j > _<number>_ ; j = j - _<number>_ ) {
or ( i = _<number>_ ; i <= x ; , ++ number number number number number number number number )
f ( i > j ) {
or ( o = _<number>_ ; o <= i ; o ++ > - _<number>_ > q ; q ++ > - _<number>_ > int int l > {
rintf ( _<string>_ , q ) ; } }
nt n , max , i , j , a ) ) >
or ( j = _<number>_ ; j <= s < j < string ; } ++ > }
or ( k = s ; k < x ; k ++ ( k - string ++ > printf ( _<string>_ ) ; j ++ ; string ++ > }
nt n , i , j , k , for ( - _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ( ( b for number ] b - number ; ) )
nt n , i , j , k , x ;
or ( j = i ; j <= k ; j ++ > <unk> ++ > <unk> > <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
rintf ( _<string>_ , n % _<number>_ ) ; }
or ( k = i + _<number>_ ; k <= k b h _<number>_ > string > string > _<number>_ ) { m ++ )
or ( j = _<number>_ ; j <= = j ; k ++ ( number ++ ( ) ++ = _<number>_ ) ; k ++ ) i <= _<number>_ ; {
rintf ( _<string>_ , j ) ; } }
rintf ( _<string>_ , i % _<number>_ ) ;
f ( j <= k ) {
or ( i = _<number>_ ; i <= n < int k ; string ++ ( + _<number>_ ) < string < for ( printf ( _<string>_ { _<number>_ k <= }
nt val = _<number>_ ;
or ( k = i ; k < a > string ; string ++ + _<number>_ + ) int for ( for ( for ( for ( } = number ( for ( { _<number>_ + = _<number>_ ) < _<number>_ < n ) < n < n < n < i < i < i < i < b < b < string < b < b < string < b < b < string < b < string < b < string < b < string < b < string < b < string < b < string
nt i , j , k ;
rintf ( _<string>_ , j ) ; }
or ( j = _<number>_ ; j <= , < ; k ++ ) a = _<number>_ ;
nt i , a , b , c ;
or ( j = i ; j <= n ; = = ) h ( number ( number ( number ( number - _<number>_ = _<number>_ = _<number>_ = _<number>_ number number number number number number number number number number number number number number number number number _<number>_ number number number ) ) ) string _<number>_ ) ;
or ( k = ( h + _<number>_ ) / _<number>_ - ( h + _<number>_ ) / _<number>_ ) )
nt h , i , j , k , l ;
rintf ( _<string>_ , count % _<number>_ ) < j ) ) ) <
rintf ( _<string>_ , count % _<number>_ number = _<number>_ number number = _<number>_ ; printf ( _<string>_ number a string _<number>_ int a printf ( _<string>_ i { for ( + _<number>_ number number number number number number number number number number number number number number number number number number _<number>_ ; , i ; , / _<number>_ ) = _<number>_ + = _<number>_ + = _<number>_ > x z z z z z z z z z - _<number>_ = _<number>_ > , printf ( _<string>_ j - _<number>_ = , _<number>_ > _<number>_ * number > _<number>_
rintf ( _<string>_ , j % _<number>_ ( printf ( _<string>_ , k <START_BUG> _<number>_ ) ) < ; , -- number number , i n n < string number number _<number>_ < string < string number _<number>_ < string < string number _<number>_ < string < string number - _<number>_ number x ; a -- ;
rintf ( _<string>_ , j ) ; }
f ( i <= ( h + _<number>_ ) / _<number>_ ) {
f ( i <= ( h + _<number>_ ) / _<number>_ )
rintf ( _<string>_ , ( ini + l ) else else number number - _<number>_ ) > x > string > , - _<number>_ > { }
or ( i = _<number>_ ; i <= _<number>_ ; i ++ ) int printf ( _<string>_ h printf ( _<string>_ i i i ( & & ( m + _<number>_ ( & ! n ( & ! n ( & ! for ( _<number>_ - & ( & ( m i - _<number>_ ( & ( & ( m i ( & & i ( m i ( & i ( ( & & ( m ) ! _<number>_ ( & ( & ( m i i ( & & i ( m ) ( & i ( (
tart ++ ; }
f ( i - j >= n / _<number>_ = _<number>_ )
f ( i + j == n / _<number>_ + _<number>_ )
rintf ( _<string>_ , j % _<number>_ = , i printf ( _<string>_ h <START_BUG> & _<number>_ ) ; printf ( _<string>_ string number printf ( _<string>_ string i int i ) int i ) int i int i ) int i int i ) ; / _<number>_ ; for ( j , ; i ++ ) } if ( , <= > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
or ( i = _<number>_ ; i <= ( k i i = _<number>_ ( i + _<number>_ ) for ( , , , , , , , , , , , , , , , , , , , , , , , , , , , j ( , , ( for > _<number>_ ( , }
nt i , j , n , n number
or ( l = k - _<number>_ > j ( for ( _<number>_ , a -- ) ) < _<number>_ > { _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ } > _<number>_ < _<number>_ < _<number>_ ;
or ( l = i - _<number>_ < _<number>_ ; { { <END_BUG> >= _<number>_ < if ( i -- ; , -- ; ; -
or ( i = x + _<number>_ ; i >= _<number>_ ; -- , ) k < _<number>_ < else h number number number number number number number number h number number number number number number < _<number>_ number -- h number number number < _<number>_ number - h number number number < _<number>_ number -- h number number number number number < _<number>_ < _<number>_ < , _<number>_ < _<number>_ < h < _<number>_ number ) k
or ( j = _<number>_ ; j <= n ; ++ j )
or ( j = i ; j <= + = _<number>_ > = j printf ( _<string>_ ) < i , number < i , number < i , number < i , number < i , number = _<number>_ < i , number < i , number = _<number>_ ;
nt n ; int k ;
or ( i = _<number>_ ; i >= _<number>_ ( ; = = = + _<number>_ n n for ( + _<number>_ n n for ( + _<number>_ n n for ( + _<number>_ n n for ( + _<number>_ n n for ( + _<number>_ n n i i n n n n n { number >= _<number>_ > + _<number>_ ( + _<number>_ h h h for ( + _<number>_ h + + _<number>_ h h h h h h h h h h h h h h h h h h h h h h _<number>_ h
or ( j = i - ( n / _<number>_ + _<number>_ = i number _<number>_ ) ; = <= h { = = h { = _<number>_ + _<number>_ ; = = h { = _<number>_ ; = = h { = _<number>_ + _<number>_ ;
or ( j = i ; j <= n / _<number>_ + _<number>_ ) = i s = _<number>_ ; = ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) string ++ ) ,
= ( h + _<number>_ ) <START_BUG> _<number>_ < l > string < _<number>_ number / _<number>_ < a < j ;
or ( i = ( ( h number _<number>_ ; , >= _<number>_ ( string -- ( }
or ( i = ( ( h = _<number>_ > printf ( _<string>_ n int string = _<number>_ ( number n -- ( }
or ( j = i - _<number>_ ; j <= ; i = = = j n n n { { printf ( _<string>_ i ) number string { = string { string { string <= > > > > > > > > > > > > > > > > ( h - _<number>_ ) number = _<number>_ ) i = = } _<number>_ i number _<number>_ number number : _<number>_ ) i = = ( h - _<number>_ ) number = ( h - _<number>_ ) number = ( h - _<number>_ ) number = _<number>_ number
or ( m = _<number>_ ; m <= i - _<number>_ ; m ++ ) {
nt a = _<number>_ , n ;
nt i , j , k ;
or ( d = _<number>_ ; d <= a < + e < k < i ; e ++ ( j ++ ( , h number ) ) ; - c = , = , , n = , , n = , , , , n = , , , , n number ; k ++ ) , k ++ ) , i < n number < n number n < n < n < n < n < n < n < n < n < n < n < n < n < n < n <
= d ;
nt a , b , c , d , for ( ( , ( ( int ( + _<number>_ = _<number>_ number ) = _<number>_ = _<number>_ number number number + _<number>_ + for ( ) i = _<number>_ + number = _<number>_ + ) < _<number>_ + _<number>_ + ) <
f ( j < ( n + _<number>_ ) / _<number>_ ) }
rintf ( _<string>_ , j ) ; } }
rintf ( _<string>_ , i % _<number>_ ) < ; }
or ( k = i ; k >= _<number>_ ; k -- ) i >= _<number>_ number } -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n -- ) n --
nt n , count , j , i , scanf ( + _<number>_ ) int h ;
or ( j = _<number>_ ; j <= ( n - _<number>_ + i + _<number>_ + = _<number>_ + h ; j = h ++ = - , n ++ number number number number number number number number number number number number number number number number number number number number number number + _<number>_ j j ) / _<number>_ ( {
or ( n = p ; n < k < h < = _<number>_ < i < i < = _<number>_ < if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
canf ( _<string>_ , & h ) ;
nt i , j , h , s ;
f ( j < ( h / _<number>_ + number = _<number>_ ( number ( n string _<number>_ + = _<number>_ ) ) ) )
or ( k = i + _<number>_ ; k <= n ; k ++ )
or ( b = _<number>_ ; b <= a > k ; & ++ )
rintf ( _<string>_ , ( i + j / _<number>_ ) int _<number>_ ;
rintf ( _<string>_ , ( i + j / _<number>_ ; int - number , - _<number>_ j = _<number>_ number - _<number>_ number - h number i ;
or ( k = max - i ; k ; h ++ ( i ( j ++ ( number ++ ) ) ) )
or ( j = ( n / _<number>_ - i = _<number>_ , string -- number number number number number ) ;
rintf ( _<string>_ , j % _<number>_ ) ; }
nt h , i = _<number>_ ;
or ( ; j <= ( h / _<number>_ + _<number>_ ) ( a ++ ) ) max ++ ( number printf ( _<string>_ h = ( i n n ( i n ( i n - _<number>_ ( i ( i n - _<number>_ ( i ( i n - _<number>_ ( + _<number>_ ( , ( , ( , ( , ( i printf _<number>_ ( ( i printf _<number>_ ( ( i printf _<number>_ ( ( i printf _<number>_ ( _<number>_ ( i ( i printf _<number>_ ( ( i printf _<number>_ ( ( i printf _<number>_
rintf ( _<string>_ , k - j ) ; }
rintf ( _<string>_ , k - j ) ; printf ( _<string>_ j j , string , ) < < ; { {
or ( j = ( h / _<number>_ ) + _<number>_ string = / _<number>_ ( , , }
rintf ( _<string>_ , k / _<number>_ + _<number>_ - = + , , , , string number k ) ; printf ( _<string>_ } i i for ( - _<number>_ j number { string <= { { { { { _<number>_ + + + { _<number>_ string j j } ( { }
or ( j = i ; j > _<number>_ < j > string > string < printf ( ; ; number -- ; number -- ;
or ( j = _<number>_ ; j <= ( { n string _<number>_ ) ; number ++ )
canf ( _<string>_ , & a ) ;
or ( c = ( n - _<number>_ ) / _<number>_ < } > _<number>_ < _<number>_ < _<number>_ > _<number>_ > _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > m > m ( printf ; C -- ( printf ( _<string>_ count }
nt h , i , j = _<number>_ ;
f ( j < ( h / _<number>_ - i + _<number>_ ( h ( = _<number>_ e ( = _<number>_ a ( = _<number>_ a ( = _<number>_ a a ( = _<number>_ a a ( = _<number>_ - i + _<number>_ ; }
or ( j = k ; j ; + + h > k ; int + = x ++ ) b ++ ( n ; q ++ ; q ++ ; q ++ ; q ++ ;
al = ( p > _<number>_ ) ? p : printf ( _<string>_ ;
nt k ;
rintf ( _<string>_ , & j ) ; int , ; { , h = j a - = _<number>_ ( j number _<number>_ number _<number>_ number _<number>_ number _<number>_ number else number number number else number number ; for ( i = number ; j <= ) / ) / _<number>_ ( i ) ; - _<number>_ > + ( k string _<number>_ ) p
rintf ( _<string>_ , & a ) ( string > h ) > / _<number>_ ) int a ; string = j m , string > j , string > j , string > j , string > printf ( _<string>_ j ( i ( n number string number number number number number number number number number ( count ( ( count ( j ( count ( = , j m m m m { l ) ) ) ) ) ) ) ) > + _<number>_ > > > + _<number>_ ) } for ( string = _<number>_ m
or ( x + _<number>_ ; x >= _<number>_ ; -- = i = _<number>_ < for ( string - _<number>_ ; string >= _<number>_ ; -- , number number number number number number number number number number , , , , , , , , , , , , , , , h + , , , h < _<number>_ < _<number>_ < , _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_
= b + _<number>_ ;
rintf ( _<string>_ , ( count + m ) % _<number>_ ; }
f ( n % _<number>_ != _<number>_ ) {
or ( k = n - i < _<number>_ < = n > , s ; + / _<number>_ number ++ = - _<number>_ ( a - , a ( b - , ( b - , ++ number number number ) ) )
or ( k = s - k ; + < k < , / j ; , ++ number number number number number number number number number number number number number number number number number number number number ) -
or ( k = s ; k < x ; k ++ ( } = string ++ number ( {
rintf ( _<string>_ , ( count - m ) % _<number>_ ) ( string * , ; } i ++ = { h ++ = ) for ( k number - _<number>_ > { _<string>_ = k > ) for ( k number - _<number>_ > ) for ( k number = _<number>_ ; _<string>_ <= ) ; printf ( _<string>_ , ) ; ) j = i = i ; printf ( _<string>_ , ) ; printf ( _<string>_ , ) ; i ++ number ) j = i = _<number>_ ; printf ( _<string>_ , ) ; i
or ( j = _<number>_ ; j <= s ; , ++ ( i number ( , ++ ) ) ) for ( , , , , , , , , , , , , , , , - _<number>_ i > + _<number>_ > _<number>_ ) n ++ ) n ++ ) m <= }
nt i , j , h , s , s ( ;
or ( q = i ; q <= ( p ) for ( } }
rintf ( _<string>_ , f = d + e ) ;
rintf ( _<string>_ , f = d + e ) ;
or ( p = _<number>_ ; p <= k - i ; n ++ ) -
or ( m = _<number>_ ; m <= ( n + _<number>_ ) * _<number>_ - _<number>_ ; m ++ ) {
or ( k = _<number>_ ; k <= , > > ; string ++ )
rintf ( _<string>_ , k / _<number>_ + _<number>_ - number = string = _<number>_ ) > n > + _<number>_ = _<number>_ ; int s string ( s - s ( s - i ( s ( i ; - , a > a number { if ( printf ( _<string>_ , n { _<number>_ = _<number>_ , h + = number number number number number ) ; l ++ ) n for ( } - _<number>_ number _<number>_ { }
or ( k = _<number>_ ; k > _<number>_ < ( + _<number>_ ) / _<number>_ < , , , , n ; string ++ number number number number number number number number number number number number number number number number number number number number ( + _<number>_ ( + _<number>_ ( + _<number>_ number string ++ ) ) ) > _<number>_ > number > _<number>_ > ( , number _<number>_ ) {
rintf ( _<string>_ , start - k ) ;
rintf ( _<string>_ , c = ( s = _<number>_ ) a - + - i ;
rintf ( _<string>_ , b = ( b i i + _<number>_ ) { int _<number>_ , + ) > _<number>_ ( string + _<number>_ ( count + _<number>_ ( count + _<number>_ ( count + _<number>_ ( = _<number>_ number + + + + = count ) ) ) ) ;
rintf ( _<string>_ , n % _<number>_ ) ; }
or ( j = i ; j <= _<number>_ ; + = + _<number>_ number number = number for ( ) n = = = = _<number>_ ; ) n = = _<number>_ < > _<number>_ = ) n = ) n = ; b = ) n = ) n = _<number>_ = ; ) n = ) }
rintf ( _<string>_ , h / _<number>_ j i + n ; + { + _<number>_ + _<number>_ string , n > k > k > else > k > k = n ) ;
int j , k ;
or ( j = k + _<number>_ - i ; j > _<number>_ > n > i > _<number>_ > string -- = _<number>_ ) j -- = , int - _<number>_ i ) j -- = , , - _<number>_ i ) j -- = , l ) j -- = , , - number ) j -- = , , - number ) j -- = , , - number ) j -- = , , - number ) j -- = , , - number ) j -- = , , - number ) j -- =
nt n , i ;
or ( i = x + _<number>_ < _<number>_ ; i >= _<number>_ < return _<number>_ > n ; + = number q ) j -- < number < ; number -- > _<number>_ > _<number>_ < = _<number>_ ( = - = if ( = if ( = if ( = if ( = if ( = if ( ) == _<number>_ ; ) {
or ( l = k + _<number>_ ; l <= k + _<number>_ ; - - - i ) } {
nt n , i , j , k n n n b ( int ;
nt n , i , j ;
or ( j = k ; j <= i ; e ++ ) for ( j number ( printf ( n k l - + _<number>_ ( l { l ++ ; + + , + i > , , , , , , , , , , , , , , n ) for ( n + number <= b ( = b <= b > k = number = number ++ = _<number>_ = _<number>_ - ) < ) return ( b ( b - k = _<number>_ = _<number>_ - ) co _<number>_ = _<number>_ + )
or ( j = k ; j <= + + ) < ; - _<number>_ ) / _<number>_ < ( x string _<number>_ ( , - + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ; & <unk> ; & <unk> ; & <unk> ; & <unk> ; & <unk> > <unk> > <unk> ; {
nt i , j , n ;
rintf ( _<string>_ , q ) ; }
or ( a = _<number>_ ; a <= string < + _<number>_ < string < l < + _<number>_ > printf ( _<string>_ = i = _<number>_ = n j = printf ) ++ + }
nt n , i , j , return return main number i i i i i j j ;
or ( j = _<number>_ ; j <= return ) }
or ( j = _<number>_ ; j <= ( n + _<number>_ + , _<number>_ + , + _<number>_ + l + _<number>_ + l + _<number>_ + l + _<number>_ number number number number number number number number number _<number>_ number number number number number number _<number>_ number number number _<number>_ number number number b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b
rintf ( _<string>_ , k ) ; } } }
or ( o = _<number>_ ; o <= ( i - m ) ; & ++ ) {
rintf ( _<string>_ , ini + j = _<number>_ + = _<number>_ j - ) > x < number > j > n > n > n > n > n ( , j ++ i + _<number>_ number number number number n number number n number number number n number number = _<number>_ = n b = n ) > b > <END_BUG> > b > k ) else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else else
ni = ini - _<number>_ ; }
= i - n / _<number>_ - _<number>_ ( + _<number>_ + _<number>_ + _<number>_ , n , n , number , else k , else n return _<number>_ , if ( if ( if ( string <= { { { { { { { { { { { }
= _<number>_ , p = _<number>_ ;
or ( k = _<number>_ ; k <= _<number>_ ; k ++ + + _<number>_ + p ++ + _<number>_ + o + l + _<number>_ + o ++ + _<number>_ + o + l + _<number>_ + o ++ + _<number>_ + o + _<number>_ + o <= _<number>_ + o + _<number>_ + o = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
or ( i = _<number>_ ; i < r ; i ++ > , , { { { _<number>_ else if ( int int { int int { ) }
f ( n < k )
everse ( _<number>_ , str ) ;
mp ( len , str ) ; char = ) ; int x j ; { number printf ( _<string>_ } < < < < < < < < < < ) ; printf ( _<string>_ string > int int int int return ( int return ; r , ; , ; - number ( + k ( + b , ; , ; { {
or ( k = _<number>_ ; k <= n , _<number>_ > , , if ( k n ++ ; , ++ , number number number number number number number number ) i ++ ) i == _<number>_ ( i - h + _<number>_ + = _<number>_ number int j ++ + _<number>_ + = _<number>_ + h + _<number>_ + h + _<number>_ + h + _<number>_ + h + _<number>_ + = _<number>_ + h + _<number>_ + h + _<number>_ + _<number>_ + h + _<number>_ + = _<number>_ + h - _<number>_ ( = _<number>_ +
eturn B ( n - _<number>_ , k ) + b , ( n { , , , , , j = _<number>_ = _<number>_ = _<number>_ = j / _<number>_ number } ) > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = = _<number>_ > = _<number>_ > = _<number>_ > = = _<number>_ > = _<number>_ > = = _<number>_ > = _<number>_
lag = _<number>_ ; ncordi = n - k ( ; j = { + k ; j = { + k ( ; j = { + k ; j = { + k ; j = { + k ( ; j = { + k ; j = { + k ( ; j = { + k ; j = { + k ; j = { + k ( ; j = { + k ; j = { + k ( ; j = { + k ; j = { + k ;
rintf ( _<string>_ , ncordi , kcordi ) ; }
nt k , b , count , count = _<number>_ number k number number number _<number>_ number _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( {
f ( count == _<number>_ ) {
rintf ( _<string>_ , recbin ( number k < k ;
lse if ( n == _<number>_ && int != _<number>_ ;
rintf ( _<string>_ , n , k ) ; else ) , key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key ; int key
nt i , j , b , b number number number ) ) ) ) ) ) number ;
f ( binomial ( i , i ) == , ( if ; - n ( , = _<number>_ ( binomial number }
or ( n = _<number>_ ; n <= _<number>_ ( { _<number>_ i <= _<number>_ i ; , ++ ) {
= _<number>_ ;
rintf ( _<string>_ , B ( _<number>_ , _<number>_ > N > _<number>_ > N > <unk> > _<number>_ > B > _<number>_ > C > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > _<number>_ > C > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B >
nt i , j , b number number number ) number ) number number number number
f ( <unk> ( n , k ) == n ; int int n ;
f ( k != _<number>_ ) break ; }
rintf ( _<string>_ , mat [ i ] [ n & } binomial binomial }
nt i , j , k ;
f ( binomial ( i , k ) == else ; return { _<number>_ return ; string ) & ( binomial ) == - - _<number>_ ( binomial ) - ) &
nt b , k ;
f ( n < k ) }
nt n , k , k k ;
( n , k ) k k ( ( < ) ) < number < < ;
eturn ( fact ( n - _<number>_ > < ( ; < int ( ; a - number int ) > { & number < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < = + _<number>_ > if < { & ) ; & & < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
rintf ( _<string>_ , k ) ;
canf ( _<string>_ , & b ) ;
nt b , k , n ;
f ( b == binomial ( i , j ; i number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
eturn binomial ( n - _<number>_ , k ) - n ) } n else binomial ; n ! _<number>_ ; n ! _<number>_ ; n ! _<number>_ = int int = n ! _<number>_ , int ! _<number>_ = k ! _<number>_ = k ! _<number>_ = int int ! _<number>_ = k ! _<number>_ = k ! _<number>_ = k ! _<number>_ ( a - _<number>_ ( a - _<number>_ ( a ( a - _<number>_ , return return _<number>_ ( flag - _<number>_ ( a ( a - _<number>_ , return return _<number>_ ( flag - _<number>_
nt n , k , i , b ;
ns = fact * ( i & _<number>_ ) ) ( ! ! _<number>_ > return ;
or ( i = _<number>_ ; number < _<number>_ number = _<number>_ ; number ++ > b ) n ++ < ( ; ) return ( if ( ) < _<number>_ ( if ( if ( if ( ) < _<number>_ > if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( i - = _<number>_ > _<number>_
nt i , j , i , b , b number number ;
or ( r = _<number>_ ; r <= n / _<number>_ ; i ++ ) {
eturn check ( r , n - _<number>_ , r ) ; }
f ( B ( n b , , ( i b ; , - , ; - , number number number number ) == b ) if ( B ( i j ) == b ) if ( B ( i j ) == B ) if ( B ( N j K ) == B ) if ( B ( N j K ) == B ) if ( B ( N j K ) == B ) if ( B ( N j K ) == B ) if ( B ( N b j ) == j
nt b , k ;
nt i , j , b , c ;
nt i , j , k , k ) ) ( int return b , o ) ) ) )
nt b ;
rintf ( _<string>_ , n k number number number > _<number>_ ) j j j j j = _<number>_ = _<number>_ number
eturn binomial ( n - _<number>_ ; k ( n }
or ( j = _<number>_ ; n >= _<number>_ ; m -- )
lag1 = i ; k = a ( b , b ; b = if ) number number
f ( n == _<number>_ && } == _<number>_ )
f ( B ( n , k = b = _<number>_ number , - & , = _<number>_ = _<number>_ ;
or ( k = _<number>_ j > _<number>_ > = _<number>_ ; k <= _<number>_ ; k ++ > j ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number ; o ++ number number number number ; o ++ number number ; o o
rintf ( _<string>_ , n , , , b = number ; if ( n , k ; if ( i < ; = b = , = _<number>_ = _<number>_ ( - - , , , = _<number>_ = _<number>_ = _<number>_ = * b k = _<number>_ = _<number>_ = - _<number>_ = * - ;
or ( j = _<number>_ , j <= i <START_BUG> _<number>_ n , j ( else b number _<number>_ n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
or ( l = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ; c <= _<number>_ , + else i i i i i i - _<number>_ i i number number i number number number number number number number number number number number number number number number ) return _<number>_ i i i i number i number ; return _<number>_ i i number i number i number i number i number ; return _<number>_ i i number i number i number i number i number i number i number ; return _<number>_ , string <= _<number>_ , string =
or ( m = _<number>_ ) ) {
or ( k = _<number>_ ( n , k = _<number>_ ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , = _<number>_ ; = ++ ) if
or ( k = _<number>_ ; k <= _<number>_ ; k ++ ( i ( i b ; , ++ ; , ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ < _<number>_ < else < binomial < { ; ; ; ; > > = _<number>_ ( ; ( ( return return return return return return return return return return return return return return return return return return return return int int ( = _<number>_ ( int int ( = _<number>_ b ( int int > > _<number>_ > ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) <unk> ++ number number number number
or ( k = _<number>_ ) ; j < _<number>_ = number ; number ++ )
eturn ( binomial ( a int _<number>_ return ; ; return = - return ) & int + + + + int n + _<number>_ ) , number , number , number , number , number , number , i + _<number>_ ) ,
eturn ( b ( a - _<number>_ return number } ; - if number ; ; - ; - number ) n k k k k k k k k k k k k k k k k k k k k k k k , & & & & & & & ; & & b + _<number>_ k , return { ) , ) , return ( ) ( b + _<number>_ k ( k i & ( ( k i i i i i i i i i i i i i i i i i i
nt b , i = _<number>_ i i i j j number _<number>_ number number - _<number>_ n n n n n n n n , = _<number>_ n n n n , = _<number>_ n , = _<number>_ n , = _<number>_ n , = _<number>_ n , = _<number>_ n , = _<number>_ n , = _<number>_ n , = _<number>_ n > _<number>_ > _<number>_ > _<number>_ > _<number>_ > {
= j ;
= i ;
eturn B ( n - _<number>_ + n ; k ( i i int , int a number k int k ; & , if ( i if ( i if ( i if ( i if ( i if ( i if ( i j j j ( b j j ( b j j ( b j j ( b j j ( b j j ( b j j j j j = , n n n n n n n n n n n n n n n n m m m m m m m
rintf ( _<string>_ , B ) k number number number number number number number ) ) ) ( _<number>_ n ) number number number number number number number number
nt i , j , b k number < _<number>_ ;
or ( i = _<number>_ number if ( if ( - int if ( flag < _<number>_ ( binomial - if ( else ) < _<number>_ ; int , if ( & & & & number number number - _<number>_ ) int binomial , return _<number>_ ;
nt m , n , if ( { _<number>_ { number number number = _<number>_ ( , int , { = _<number>_ i j ( = _<number>_ ( = _<number>_ > , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
nt n , m ;
lse printf ( _<string>_ , , ;
rintf ( _<string>_ , n fact fact ; }
or ( n = _<number>_ number = _<number>_ ( b }
nt n , k , n , n , n , n , n , & & int int int int ;
or ( i = _<number>_ number > _<number>_ number ) k <= n ; ) k ++ number ; k ++ number ) n ++ ) n ++ ) i <= k number ) i ++ = _<number>_ number {
eturn ( fact ( n - _<number>_ > B < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
eturn n * fact ( ( ( ( ( ( = if _<number>_ > = _<number>_ > ( ( ( ( ( > return _<number>_ > N > _<number>_ > N > _<number>_ > N > N > N > N > N > N > N > N > C > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > C > N > N > N > N > N > N > N > N >
nt i , j , binomial ;
ong int b ;
f ( binomial ( i , { & else ) == else number number number ;
unk> ( b ) ;
f ( B ( n { }
lse if ( b == k = + = _<number>_ ) & i != _<number>_ ) &
rintf ( _<string>_ , fact ( }
nt b ;
nt b ;
f ( arr [ i b [ j b b == k ) {
lag = _<number>_ ; printf ( _<string>_ k k ) ; break ; return ; - - k ; } }
f ( n < k ) }
nt grbg = _<number>_ , grbg = _<number>_ , & find ;
rintf ( _<string>_ , ncordi k , & - string i i i i i ) number key ; key = n ; { ! for ( }
f ( n == _<number>_ && k == _<number>_ ) return _<number>_ number
rbg = binomial ( _<number>_ , _<number>_ ) , binomial ( { == _<number>_ ) number if ( grbg == _<number>_ ) [ & & & == _<number>_ ) , grbg ;
or ( n = _<number>_ ; b <= _<number>_ ; n ++ ( i ) )
eturn B ( n - _<number>_ k = int b k & = = ( i n if ( k { , if ( if ( int int int ; return b ) - ( k string _<number>_ n string _<number>_ number [ } ] [ { _<number>_ n [ } ] [ _<number>_ { { { { { { { { { { { { { { { { { { { { {
rintf ( _<string>_ , str ) < < < < < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
in ( b ) ;
f ( a == _<number>_ ) { else a ( _<string>_ ) = _<number>_ = int { ! if ( - ) = _<number>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ; ( _<string>_ ;
= i ; } }
nt i , j , b , k = _<number>_ b number = _<number>_ = _<number>_ ) ) )
f ( l == _<number>_ )
f ( l == b ) {
rintf ( _<string>_ , ncordi , <unk> ; return string ; return }
f ( n < k ) return _<number>_ ( n { + _<number>_ ;
canf ( _<string>_ , & b = k ) number number ) ) ) ) (
rintf ( _<string>_ , i - _<number>_ , , , }
eturn c ( n - _<number>_ , - int number number } - _<number>_ = if ( return = = _<number>_ ( int int int ( , ( _<number>_ k & & ( int ( , else ( int ( , else & ( int int ( else & ( else ( int ( _<number>_ k & & ( int int ( else k k ( int ( , else k k & & ( int int ( else ( else ( & number , + _<number>_ , + _<number>_ number & _<number>_ number & _<number>_ number & _<number>_ number
or ( j = _<number>_ ; k <= k <END_BUG> _<number>_ number }
f ( B ( n , k number n > n > ) > )
eturn - _<number>_ ; }
nt i , j , b , int k = _<number>_ = _<number>_ = _<number>_ = _<number>_ = binomial ;
rintf ( _<string>_ , kcordi ) ; & ( _<string>_ , key = _<number>_ = _<number>_ ; find ( _<string>_ ; for ( = _<number>_ number - _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
canf ( _<string>_ , & n ) number number = _<number>_ number b ;
ind ( a , i , j ) ; }
or ( j = i + _<number>_ ; j <= _<number>_ ; i ++ ) {
rintf ( _<string>_ , mat [ if ( + for ( if ( + printf ( _<string>_ , mat binomial string int k > & number > & string int int int > * ; number ++ * k > else * & number int return string int string int k int number int int int int int int int int > = k int k > * ; number ( k = k > k > & & int > * ) ( return ( return ( return _<number>_ k & & ; b if ) ; b if
f ( B ( n , k ; == , , binomial = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k ( n { k
canf ( _<string>_ , & b ;
eturn B ( n - _<number>_ , number ) + j - j ; j } , = = _<number>_ ( k { ; i j - ; ; ; ; ; ; i ++ ( k { ; i j b { return ; i j = ; i j - ; i i b { return B number ; if ( A number B { < M ( N { i ( k { ; ; ; i {
rintf ( _<string>_ , i , j ) ;
eturn x ; }
rintf ( _<string>_ , k , k ; <START_BUG> ( return n ; <END_BUG> ; b int = , = return _<number>_ = ) binomial string ; <END_BUG> number = _<number>_ number ) int <END_BUG> number number number number number _<number>_ number number k number number number number number = _<number>_ number ) int <END_BUG> number number number number number - _<number>_ number number number _<number>_ number number k number k number number number number number number - _<number>_ number * string ; k number number number number k number number = _<number>_ number ) int <END_BUG> number number number
f ( B ( n , , ) == k ( i k number ) )
or ( k = _<number>_ ; k <= _<number>_ number i ) = _<number>_ = = _<number>_ ( , ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number _<number>_ number - _<number>_ number , , ++ number number number number < _<number>_ < _<number>_ < k < _<number>_ < = _<number>_ < k < number < _<number>_ <
rintf ( _<string>_ , n , k ) ; <END_BUG> ; b k ; else n number < k < n number { a = int + + + + + + int if ( + { a == int ) i = int ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) i , ) n , int ; if ( return ) n ; else n ; if ( return
nt binomial ( int n , int k ) {
or ( k = _<number>_ ; k <= ; b ++ ; , ++ > > > > _<number>_ ( n b ++ > n > _<number>_ > } ) n = _<number>_ = _<number>_ = ) n = _<number>_ = ) = _<number>_ = _<number>_ = ) n = _<number>_ = ) = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_ = ) n = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_ = ) = _<number>_ = _<number>_
rintf ( _<string>_ , fact ( n , k ) > ) ) )
eturn b [ _<number>_ ] [ = = k ) printf ( _<string>_ number ( b } _<number>_ ; number + number + _<number>_ ( int int ) ) + _<number>_ ) k || = == _<number>_ && ) k == _<number>_ * } ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * ) k == _<number>_ * = _<number>_ number
f ( count == _<number>_ ) | ( _<string>_ ) ) n - _<number>_ n number - _<number>_ number ( n number - _<number>_ = _<number>_ ) > > > _<number>_ ) > > > _<number>_ ) | ( , = _<number>_ ) > ( , = _<number>_ ) > ( , = _<number>_ ) > , , , if ( else if ( else == _<number>_ ) | ( _<string>_ ) > > - _<number>_ > > _<number>_ ) | ( , = _<number>_ ) > _<number>_ > , ;
or ( k = _<number>_ ; k <= _<number>_ number k <= _<number>_ ; n ++ ) {
eturn ( B ( n - _<number>_ n , , > { = B { int = < number number = = _<number>_ , number binomial _<number>_ ) ; b b ; ans ans ( k - - - ans = ; ans = ; ans = ; ans = ; ans = ; ans = ; ans n - _<number>_ = number - _<number>_ = number - _<number>_ = number - _<number>_ = number - _<number>_ = number - _<number>_ = _<number>_ = _<number>_ ( k , number - number - if ( N if ( N if (
rintf ( _<string>_ , B ( _<number>_ , _<number>_ ) > - _<number>_ > _<number>_ > c > c ( _<number>_ n ( - , _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i > _<number>_ > i
rintf ( _<string>_ , n , k ) ;
nt ans = _<number>_ ;
or ( i = _<number>_ ; i <= _<number>_ ; i = i + _<number>_ ) {
or ( i = _<number>_ ; i <= _<number>_ ; i = i + _<number>_ ( string n check _<number>_ ( string n check _<number>_ ( int ( ( - _<number>_ n ( string <= _<number>_ ( string check _<number>_ ( int ( - _<number>_ n ( string n ; int int int int int ( ( - _<number>_ n ( string n check int int ( ( - _<number>_ n ( string n ; int int int int ( ( - scanf _<number>_ n ( string ; int int int int ; int int int ; int int int
f ( ( n == _<number>_ ) && ) == _<number>_ ; n _<number>_ ;
rintf ( _<string>_ , bin ( _<number>_ = _<number>_ ;
nt n , k , b ;
f ( b == b ) {
nt b , k , k , i k k = _<number>_ = _<number>_ = _<number>_ ( i , i ( n , ) ( n b b b b ;
or ( n = _<number>_ ; n <= _<number>_ number i <= b ; , ++ ( i ) ; return int , }
or ( k = _<number>_ ; k < _<number>_ ( k n n = _<number>_ > = _<number>_ > ) = ( b else , ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
nt b , k , i = _<number>_ ;
hile ( b != b ( n , k ) ) int k = _<number>_ number * B - _<number>_ ( }
hile ( b != b ) {
nt n = _<number>_ , k = _<number>_ , b = _<number>_ ;
rintf ( _<string>_ , ( int ) n n n k b b b i i , ;
nt b ;
rintf ( _<string>_ , p , n ) number number k = _<number>_ = _<number>_ ) ) ) ) ;
rintf ( _<string>_ , p , q ) number number ) number number
f ( ( n , k > n ( i k n n n ;
rintf ( _<string>_ , fact ( , ) ( n > i ( i ) > k n n ;
rintf ( _<string>_ ) ;
f ( ( b , ( n i i k > number > n > n > n > n > n > _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > , , > , , , , = _<number>_ > , , , , , , , , , , return _<number>_ > ;
f ( B ( n , k ) == ;
nt b = _<number>_ , i = _<number>_ = _<number>_ ;
= bin ( _<number>_ , _<number>_ ) , int double k = + ) = flag ) k ;
= i ; k = j ;
lag1 = _<number>_ ;
nt i , j , b ;
lse if ( n == _<number>_ && b == _<number>_ )
rintf ( _<string>_ , n , n number number ; if ( k > ) = _<number>_ = { printf ( _<string>_ } { printf ( _<string>_ j i j number number number number number number number number number number number number number number number number number number number number number number number number number number number number number ( k n j number , , b number number number number number number number number number number number number number number number number number number number number number number number _<number>_ n > , , , { printf ( _<string>_
f ( n == _<number>_ && k == _<number>_ ; , _<number>_ number k ) int _<number>_ = _<number>_ = _<number>_ ;
rintf ( _<string>_ , n , n number number ; j number number number number = _<number>_ = _<number>_ number _<number>_ = }
har str [ _<number>_ ] ;
rintf ( _<string>_ , i ) ;
f ( b = binomial ( n , = > n ( j ;
nt b , k , n = _<number>_ ; ;
nt x = binomial ( n - _<number>_ = = _<number>_ ( n string _<number>_ ;
rintf ( _<string>_ , k ) ; main ( _<string>_ , ; <END_BUG> ( binomial , n = ) = ) if ( int ) i k ) i k <START_BUG> ( n , ) ( n , ) ( n , ) ( n , ) ( n , ) ( n , ) ( n , ) number main ( ) number number number number number number number number number number number number number number number number number number _<number>_ number number _<number>_ number * int , ) } b == int ; main ( ) } b
rintf ( _<string>_ , n , n ( } = _<number>_ = _<number>_ = _<number>_ ) number number - _<number>_ ) number number number
nt n , k , b , p = _<number>_ ;
f ( p == _<number>_ ) {
or ( k = _<number>_ ; k < _<number>_ ) & n j ( } - _<number>_ , i ) ; i ++ )
nt b , k , flag = _<number>_ number
nt i , j , b ;
rintf ( _<string>_ , i , j number number number ( k number n ; - - n number number number ( n ; return if ( return > if ( return > > if > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return > return >
f ( k == bio ( n , k ) ; int i , i , i , i , i , i , i k = _<number>_ ( , k k = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
f ( a = _<number>_ ) { printf ( _<string>_ ) ; }
tr ++ ; }
tr ( _<number>_ , str ) ;
nt b , i , j ;
rintf ( _<string>_ , i , j ) ; k = } _<number>_ ; n ) = j = _<number>_ = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i = _<number>_ = _<number>_ = i
or ( k = _<number>_ ) ) } k <= _<number>_ > fact ++ < _<number>_ number )
or ( j = _<number>_ number , } _<number>_ ) ) if ( / { _<number>_ return ( printf ( _<string>_ n k - _<number>_ ( if ( b ) - _<number>_ ( return { j ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; k ++ ; else else else
eturn _<number>_ ; }
nt b ( int n i , } {
f ( n < b > n number )
f ( n > _<number>_ ( k = _<number>_ ;
rintf ( _<string>_ , n k ( number k ( ( ( int = b ( ;
rintf ( _<string>_ , n ;
rintf ( _<string>_ , fact number = _<number>_ < , }
nt b , k ; {
tr [ _<number>_ ] = _<string>_ ) <
tr [ len - i ] n else < } < else < - - - - - fact > if ( ( return ) ) int & & & & & & & & & & & & & & & & & & & & & & & & & = & { n + ) < & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & return < return < < > <
f ( b == binomial n = int > k ( , n > ; > ;
nt n , k , b n ( n , = b ) < k < _<number>_ < _<number>_ > , ;
= b ; int = & = + _<number>_ ( ) > i > i > i = _<number>_ ) )
nt k = b ;
rintf ( _<string>_ , B < _<number>_ , _<number>_ ( ( return _<number>_ , _<number>_ > & & > _<number>_ > _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ > - _<number>_ > _<number>_ >
xit ( _<number>_ , n number cr number - _<number>_ = _<number>_ number ( k n number _<number>_ ) ;
f ( bin ( i , j ) == b )
f ( bin ( i , j ) == b ) +
or ( j = _<number>_ ( , ; ( - = _<number>_ > n = _<number>_ = n n ( b - }
nt i , n = _<number>_ = _<number>_ int , n number number ( n , k number number _<number>_ ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
or ( k = _<number>_ ; k <= _<number>_ number k = _<number>_ ; n ++ ( n ++ = _<number>_ = _<number>_ ) ; = _<number>_ ; = ++ ) -
f ( B ( n , = ) == , ;
nt answer ;
f ( check == _<number>_ ) {
rintf ( _<string>_ , n , k ) ;
f ( B ( n , k ) == b ) {
nt fact = b ;
f ( p == _<number>_ = _<number>_ = _<number>_ = _<number>_ )
canf ( _<string>_ , & ncordi ) ;
rintf ( _<string>_ , <unk> ) ; }
rintf ( _<string>_ , i , j ) ( bin = _<number>_ ; & for ( x ( n k }
f ( i == _<number>_ ) printf ( _<string>_ ;
rintf ( _<string>_ , n , n ) k
rintf ( _<string>_ , n , k ) ;
nt n , k , k , b ;
nt i , j , b , c = _<number>_ )
f ( c == _<number>_ ) break ; & & { f = _<number>_ ) else }
rintf ( _<string>_ , i , j ) ( f == _<number>_ = _<number>_ , string , string n ;
eturn binomial ( n - _<number>_ , k ) + { { return if ( if ; { & { break = binomial ( if ( + _<number>_ k = , return _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = , , if ( + + _<number>_ k , , if ( + + _<number>_ = , , , if ( + + _<number>_ = , , , if (
or ( n = _<number>_ ; n < = ( n = _<number>_ number ( ) number _<number>_ = _<number>_ = _<number>_ number number < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < int n < ; n ++ < _<number>_ < int int n < int int < int int < int int ; n ++ < _<number>_ <
nt b , k ;
or ( b = _<number>_ ; b < _<number>_ ; , ++ = _<number>_ number ) if ( , n == _<number>_ > number > _<number>_ , number ( number int { _<number>_ int _<number>_ > _<number>_ > _<number>_ > _<number>_ > cr - _<number>_ > _<number>_ > _<number>_ > cr r _<number>_ > cr r _<number>_ > cr r _<number>_ > cr > _<number>_ > number > number ) ;
f ( b == b ) { if ) j == b ; , , , , , , , , number , number ( k , k number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
f ( n != _<number>_ && k == _<number>_ n ;
f ( n != _<number>_ && k == _<number>_ ;
or ( k = _<number>_ ; k <= _<number>_ = n = _<number>_ = k ++ > _<number>_ > k > _<number>_ > k > _<number>_ > k > _<number>_ > b > _<number>_ = k - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
hile ( B ( n , k ) < b ) {
= k ; }
nt str [ _<number>_ ] = { _<number>_ return _<number>_ + _<number>_ {
everse ( _<number>_ , str ) ;
nt i , j , b , b ( number = a number _<number>_ number number _<number>_ < r < _<number>_ < {
= bin ( _<number>_ , _<number>_ ) k number number - _<number>_ = _<number>_ ;
nt n , k ;
nt n , k , k ;
f ( binomial ( n , k ) == printf ( n = _<number>_ ;
f ( n == _<number>_ && k == _<number>_ ( n - _<number>_ ( n - _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
oid check ( int x , int n n = + r > if ( & int }
rintf ( _<string>_ , x , r ) ) )
nt k , k , b ;
f ( n < _<number>_ ) {
f ( b == b , k ) { int int int int int int k number number number { if ( + , ( }
nt i , j , mat [ _<number>_ ] return _<number>_ ( if ( if ( , }
f ( p == _<number>_ ) printf ( _<string>_ , { _<number>_ , _<number>_ k { number , _<number>_ ) = _<number>_ = _<number>_ = } _<number>_ number number _<number>_ number number
f ( p != _<number>_ ) break ; }
f ( b == p ) {
rintf ( _<string>_ , b ) ; }
f ( B ( n , k ) == number ; k = } ) i == - - > , , , , , = _<number>_ number
nt n , k , b , k ;
f ( b < n , k ) == , n < _<number>_ ( + n { , , + , + _<number>_ number number - _<number>_ ) > , n ) ,
eturn recbin ( n - _<number>_ , k - _<number>_ ) + recbin ( n - _<number>_ , k ) ; }
nt b , k , i ;
rintf ( _<string>_ , B ( _<number>_ , _<number>_ > N < _<number>_ > N < <unk> < _<number>_ > B > _<number>_ > <unk> > _<number>_ < B < A < C > _<number>_ > B > _<number>_ > C > _<number>_ > B > _<number>_ > B > _<number>_ > <unk> < _<number>_ > B > A > B > _<number>_ > C > _<number>_ > B > A > B > _<number>_ > C > _<number>_ > B > A > B > _<number>_ > C > _<number>_ > B > A > B > _<number>_ >
f ( binomial ( i , j ) == b ) {
xit ( _<number>_ ) ; } } }
f ( <unk> ( n , k ) == k ; k -- ; return ;
f ( n != _<number>_ && k != _<number>_ ) printf ( _<string>_ , n , k ( ( n , k ( n ( n , k ;
lse if ( n == k )
nt b , i , j ;
rintf ( _<string>_ , i , j ) ; } }
rintf ( _<string>_ , i , j ) ; } }
f ( n < k ) {
printf ( _<string>_ , - _<number>_ ) ; b = k k k k string _<number>_ number number ; if ( _<string>_ ( n , k ) int return _<number>_ ) = - _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( k = _<number>_ ; k < _<number>_ ; k ++ ) {
nt n , k , k ;
nt n , k , k ;
rintf ( _<string>_ , n , k ) ;
rintf ( _<string>_ , n , n ) ;
rintf ( _<string>_ , n - _<number>_ ) ; } } }
or ( k = _<number>_ ; k <= _<number>_ ; k ++ number number ;
rintf ( _<string>_ , n , k ( k ; n + number ; k ++ ; { <END_BUG> ( _<string>_ , int int k ; } }
f ( bin ( n , k ) == b )
f ( bin ( n , k ) == n )
f ( r < k )
f ( ( b == fact ( number ) r r ) for ( + if < )
nt i , j , t = _<number>_ ( { { return B = _<number>_ ; p k = _<number>_ ) number t number _<number>_ number number _<number>_ number
f ( B ( j , i ; == b ) int - _<number>_ ( B ;
lse if ( n < k )
nt i , j , k ;
nt i , j , ans ;
rintf ( _<string>_ , B ( _<number>_ = _<number>_ > N > _<number>_ > N > <unk> > _<number>_ > B > _<number>_ > C > B > <unk> > B > <unk> > B > <unk> > B > <unk> ( _<number>_ , _<number>_ ( if if ( if ( _<string>_ ( _<number>_ , _<number>_ ( if if ( if < _<number>_ ( n * b , b ( _<number>_ , _<number>_ ( if if ( if < _<number>_ ( if ( if ( if ( _<string>_ ( _<number>_ , _<number>_ ( if < _<number>_ ( if ( if
f ( b = _<number>_ )
f ( p == _<number>_ ) {
f ( c ( i , j < i ; number ++ number number ) / int return ( } * int ) p = int n ) p ;
or ( i = _<number>_ ; i > k ; n ++ >
rintf ( _<string>_ , B ( _<number>_ > N ) ( B > <unk> > <unk> > <unk> > <unk> ) ) = < <unk> < _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ )
nt B ( int n , int n ; & int n number number = n {
nt a , n , k ;
canf ( _<string>_ , & b ) ( int ;
nt b , k , c = _<number>_ ( int n , return k number number _<number>_ number , , , , a b b b b b b b b number b b b number else ;
rintf ( _<string>_ , k , j ; j number ; b ) number = - _<number>_ = - ) }
nt b , bin ;
in ( b , k ) ;
= binomial ( n - _<number>_ k { = { , binomial number - _<number>_ , b long long long long long long long long long long long long long long long long long long long long long long long long long long long long long n long long n long long n long long n long if ( }
lag = binomial ( _<number>_ , _<number>_ ) ;
nt n , k , count = _<number>_ ;
eturn fact ( n ) / fact < ( k > _<number>_ > _<number>_ > n > _<number>_ > n > _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ ) = b - & n ) b ; + b ; + b == _<number>_ ) if ( b >= _<number>_ > b > < _<number>_ > n > n > _<number>_ > + _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ > b > _<number>_ >
ns = ans * ( i + _<number>_ > for ( for < _<number>_ > } > _<number>_ > a > _<number>_ > a > _<number>_ > a > _<number>_ > + + + _<number>_ > + + _<number>_ ) * & int printf ( | , printf ( _<string>_ , int printf < <unk> > _<number>_ > if ( | printf ( _<string>_ , return return return for < binomial > return < binomial < _<number>_ > binomial > _<number>_ > binomial > _<number>_ > binomial > _<number>_ > binomial > _<number>_ > binomial > _<number>_ > binomial >
eturn B ( n - _<number>_ , = , , ; { , ) b b int = > ( n binomial _<number>_ , k ) if ( + n { } ) if ( N return _<number>_ { k ; b < ( n int k = _<number>_ , k int n int _<number>_ = k int k = _<number>_ = k int b = k int k = _<number>_ = k int n int k = _<number>_ = k int b = k int k = _<number>_ = k int n int k = _<number>_ = k int
nt b , k , n ;
rintf ( _<string>_ , j ) ;
nt i , j , num ;
rintf ( _<string>_ , str ) ;
everse ( len , str ) ; & > number k ) < < < < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ( i j j ( i j ( return return _<number>_ ( return , ( return , > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
nt i , j , b , break < _<number>_ < return _<number>_ < return _<number>_ ;
nt k , i , j , if ( k < k , return }
rintf ( _<string>_ , n , k ) ;
rintf ( _<string>_ , k - _<number>_ ) number }
nt b , x , n , = ) ) ) ) ) = _<number>_ ;
rintf ( _<string>_ , n , k ( k j ; <START_BUG> ; return i if ( if ( if ( int b == = ) = n } { { { f , b } { f , b } { { f = n } { { { { f , b } { f , = _<number>_ } ; { { f = b } { f , = _<number>_ ; { f , b } { f , = _<number>_ } ; { { { f = b } { { f , b } {
rintf ( _<string>_ , b - _<number>_ b - _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < } ) fun = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
= B ( i , j , = ;
f ( k == b )
nt x = binomial ( n - _<number>_ } } ) + int if )
nt b , k , k , , ;
rintf ( _<string>_ , b , i > return ( , n ) ( int ( ( return x > return return ( return _<number>_ > _<number>_ > return ( return _<number>_ > return _<number>_ > x > return ( return _<number>_ > x > return ( return return _<number>_ > if ( return _<number>_ > return _<number>_ > + _<number>_ > x > return ( return _<number>_ > return _<number>_ > x > return ( return _<number>_ > x > return ( return return _<number>_ > if ( cr > < return < return _<number>_ > return _<number>_ >
f ( t == _<number>_ ) { for ( - _<number>_ == _<number>_ ; - ; t _<string>_ number = _<string>_ > cr > _<number>_ > B > _<number>_ > C ; int cr , cr , cr , cr , cr , cr , cr ; int cr , cr , cr , cr , cr , cr ; int cr , cr , cr , cr , cr , cr ; int cr , cr , cr , cr , cr , cr , cr ; int cr , cr , cr , cr , cr ; int
or ( k = _<number>_ ; k <= _<number>_ ; k ++ ) b ++ ) {
or ( k = _<number>_ ; k <= _<number>_ ; = ++ ) {
rintf ( _<string>_ , f ) ; fact ( _<string>_ k > flag > flag > flag > flag > _<number>_ > flag > flag > _<number>_ > flag > flag > flag > {
nt f , b , i , l , count = _<number>_ ;
canf ( _<string>_ , & b ) k , i ) k
f ( b == b ( n ; n number number ; for ( { , + b n k ) = int return _<number>_ = i - _<number>_ = _<number>_ = string = _<number>_ = _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
f ( binomial ( i , j number for ) == else ( k , , ; n )
nt b ;
= <unk> ( _<number>_ , _<number>_ number i number number number number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
rintf ( _<string>_ , n , n ) ;
eturn check ( x , n + _<number>_ ( i > i > i > j > j > j > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number > number
f ( <unk> ( n , r ) == + + + + + + j > > j > _<number>_ > i > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > i > = _<number>_ > i ( = i return i > j > j > i > = _<number>_ > i > N > N > N > N > N > N > N > N > N > N > N > _<number>_ > <unk> >
or ( k = _<number>_ ; = < _<number>_ ; n ++ > _<number>_ number ;
nt n , k , k , = _<number>_ ) ) ) ) ) ) ( if ( k ;
or ( i = _<number>_ ; n <= _<number>_ ; { , , , , , , n number number number number number number number number number number ( if ( n ++ ( b , int n ( ( if ( n ++ ( b , int n ( ( if ( b <= <unk> ( int int ( ( int ( ( int ( ( int k ( ( int ( ( int k ( ( int ( ( int k ( ( int ( ( int k ( ( int ( ( int k ( ( int
nt b , i , n , }
nt n , k , b = _<number>_ ;
f ( p == _<number>_ ) {
lse if ( b == _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ < _<number>_ < _<number>_ ( ( ;
canf ( _<string>_ , & b k if ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ < b < { _<number>_ return break ( break number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
f ( flag1 == _<number>_ )
lag1 = _<number>_ ; } }
f ( count == _<number>_ ) <END_BUG> ( _<string>_ > i > i > N > N ) number number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
1 = n ;
rintf ( _<string>_ , n , = number ( k n ;
lag = _<number>_ ; ncordi = n & i ; string = k & i ; string = k & i ; - i = k & i ; - i = k & i ; - i = k & i ; - i = k & i ; - i = k int check ( n , check = _<number>_ = n int check = n int return return number = _<number>_ = n int check = _<number>_ = n int else = _<number>_ = n int else number = _<number>_ , printf ( _<string>_ , check =
f ( b == b ( i number , , = _<number>_ ( + , ) ) = _<number>_ ;
f ( n == _<number>_ ) len
eturn bin ( n - _<number>_ , } number ( n & + _<number>_ , int int return _<number>_ , + _<number>_ number - _<number>_ > {
eturn ( ( fact ( n - _<number>_ > b ( , ( k ( k ( int > _<number>_ > int > _<number>_ - int > _<number>_ & b > b > _<number>_ > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b > b > _<number>_ > b
nt i , j , p = _<number>_ int printf ( _<string>_ k b k = _<number>_ ;
f ( n != _<number>_ )
f ( check ( n , k , b ) == - _<number>_ )
nt n = _<number>_ ;
mp = str [ i ] < }
or ( j = _<number>_ ; { ( + + int int ( if ( int int ( ( int if ( { _<number>_ , if ( if ( + n > fact > _<number>_ > fact > fact > k > k > k > k ) ) ++ ) ) &
rintf ( _<string>_ , b - _<number>_ = + _<number>_ = * _<number>_ = _<number>_ = * k number _<number>_ = _<number>_ = _<number>_ = - _<number>_ = - _<number>_ = - _<number>_ = - _<number>_ = - return } _<number>_ = _<number>_ = _<number>_ =
eturn B ( n - _<number>_ , k ) + b ( n string _<number>_ , k - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number
or ( i = _<number>_ ; { ( & { return return _<number>_ ( int int > > return return return { _<number>_ > if ( if ( i ) > _<number>_ > if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( string ) & string ( string k printf ( _<string>_ k printf ( _<string>_ k int string ( string ; printf ( _<string>_ k printf ( _<string>_ k int string ; printf ( _<string>_ k int string ; printf ( _<string>_ k int string ;
lse if ( ( n == _<number>_ ) && > == _<number>_ = int n = _<number>_ = _<number>_ = _<number>_ ) )
= n + _<number>_ ; }
nt b , v , v number _<number>_ k fact k number k = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = else % _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
lse if ( n == _<number>_ ) printf ( _<string>_ = k = _<number>_ = _<number>_ = _<number>_ = _<number>_ = , _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) ) ) ) )
hile ( b < n , k ) {
f ( i == _<number>_ ) { printf ( _<string>_ > , number number ( _<string>_ number number number number number number number number number ) ( int number number number ) ; b = _<number>_ ; b == _<number>_ ) n = _<number>_ ; b _<string>_ ; b == _<number>_ ) n = & , == _<number>_ ) n = _<number>_ ; b = , number ; b = _<number>_ ; b _<string>_ ; b == _<number>_ ) n = & , == _<number>_ ) n = _<number>_ ; b = , number ; b = _<number>_ ; b
f ( bino ( n , k ) == b = , , flag ;
rintf ( _<string>_ , str ) ( number ( ) ;
f ( b == b ) k < b ( ; - = > k > k ( k {
f ( b < _<number>_ ) {
nt B ( int n , & = = int k ;
f ( check ( n , k , b ) == a a a a number n number _<number>_ number number number number _<number>_ number number )
f ( b == binomial ( k , n ) ; else
nt b , k ;
f ( grbg == _<number>_ ) flag = _<number>_ ;
rintf ( _<string>_ , kcordi ) ; }
nt b , k ;
or ( k = _<number>_ ; ; ) for ( ) = _<number>_ ( k > _<number>_ > ) number ( = - _<number>_ > ; ; ; number ++ ) return
f ( <unk> ( k , k number n number k ;
f ( n != _<number>_ ) else ; - _<number>_ k = _<number>_ = _<number>_ = _<number>_ k k - _<number>_ ; printf ( _<string>_ n n b != _<number>_ number ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( N k int int ; } ;
or ( k = _<number>_ ; k <= _<number>_ k k k ; k ++ number number number number number number ; return _<number>_ = _<number>_ = n - n ( , ( int ( ( int , , , , , , , , , , , , , , , , , flag ( ( int int ( ( int , , , , , , , , , , , , , , , , , flag ( ( int int ( ( int , , , , , , , , , , , , ,
or ( k = _<number>_ ; = > _<number>_ ) }
f ( n < b )
nt i , j , m = _<number>_ ;
++ ;
or ( k = _<number>_ ; k < + = _<number>_ ; = ++ > return { k ++ > _<number>_ number k ++ > {
lse if ( ( n == k ) || ( = k - _<number>_ > = _<number>_ > = _<number>_ > ) >
lse if ( ( k >= _<number>_ ) && ( n >= _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > - _<number>_ > = _<number>_ > ( int ( ( int ( ( int + _<number>_ > ( int > - printf ( _<string>_ n - _<number>_ > _<number>_ > ( int ( ( int ( ( int int > > _<number>_ > ( int > _<number>_ > ( int > _<number>_ > ( int > _<number>_ > ( int > _<number>_ > ( int > _<number>_ > ( int > _<number>_ > (
rintf ( _<string>_ , B ( _<number>_ ; _<number>_ ( ;
canf ( _<string>_ , & ncordi ) ;
rbg = kcordi ( _<number>_ , _<number>_ ) ;
or ( n = _<number>_ ; , <= _<number>_ number n - = _<number>_ ; n ++ number number number number number number number < _<number>_ < b ) {
nt k , k = _<number>_ , b ;
nt n = _<number>_ , b = _<number>_ n ) ) ) ) ) ) ) ) ) ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
nt b ;
f ( i == _<number>_ )
or ( i = _<number>_ ; n <= _<number>_ ) ) flag ++ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
f ( B ( j , n ( return j ;
rintf ( _<string>_ , b , j ( ( return { _<number>_ ) == k number if > b ;
rintf ( _<string>_ , i , int if ( string ( b , n = + ;
nt i , j , b , l ( int int ;
nt i , j , f number _<number>_ k k ;
everse ( x , str ) ;
eturn ( x , n - _<number>_ , _<number>_ ) ; - _<number>_ * ] , n - _<number>_ > _<number>_ j j j j j j j j ; + number [ , int * * * * * * * * * * * * * * * < number find _<number>_ for ( * * - number find _<number>_ > _<number>_ j j j j j j j [ _<number>_ for ( * * * * * * * * * * * * * * * _<number>_ for ( * * * * * * *
= B ( i , if ( n == { _<number>_ ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = return _<number>_ = return _<number>_ = _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = return _<number>_ = = - )
rintf ( _<string>_ , fact ( , ( j ( j ) = { _<number>_ number % _<number>_ = * int number = _<number>_ ) ) = _<number>_ = _<number>_ ) = _<number>_ k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k ;
eturn b ( n - _<number>_ return k ) else int i + > m = _<number>_ if ( }
canf ( _<string>_ , & key ;
rintf ( _<string>_ , a , k , a ( n + _<number>_ n = } _<number>_ n n , { - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - ] ; - i ; - { - ] ; - ] ; - i < int int int int int int int int number > n str _<number>_ , i , i > _<number>_ , i str _<number>_ number i , i > }
or ( i = _<number>_ ; } <= _<number>_ ) n ++ ( binomial ++ ( ( binomial - b ( & ( & ( & ( & ( } , for ++ ( ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( return } <START_BUG> <START_BUG> <= _<number>_ ; k ++ ; k ++ ; k ++ ; k ++ ; else
f ( n < k ) +
nt b ;
rintf ( _<string>_ , n , k ) ; { { i i number < _<number>_ < , , i < _<number>_ return _<number>_ < , , i return , }
nt binomial ( int n , int k ) binomial
or ( l = _<number>_ ; else <= _<number>_ ) } n ++ ( j ++ ( ( if ( - _<number>_ , else = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( { _<number>_ , _<number>_ , _<number>_ ( { _<number>_ , _<number>_ , _<number>_ ( { , { _<number>_ , _<number>_ , _<number>_ , _<number>_ , { _<number>_ , _<number>_ , _<number>_
rintf ( _<string>_ , m , - - - - - & + _<number>_ = if ( } == binomial ( int , ( int , ( & , == binomial ( int , ( int , ( int , ( ( int , n ( int , ( ( int , n ( int , ( ( int , n ( int , ( ( int , }
canf ( _<string>_ , & n ;
f ( B ( n , k = k = _<number>_ = _<number>_ number , n ) )
f ( n == _<number>_ && k == _<number>_ ; k = _<number>_ ;
nt b , k ;
rintf ( _<string>_ , n , ; / ; i ) k ; n number number ; n number ) n int = number number ) n int = number number ) n int = number number ) n int = number number number ) n int = number number number number ) n int = _<number>_ number number number number number number ) n int = _<number>_ ( [ { for ( int = printf ; number number number number number number number number number number number number number number number number number number number number number number number
nt n , k , i , j , a [ _<number>_ ] [ _<number>_ ] ;
loat k ;
f ( k == _<number>_ && n == _<number>_ )
eturn ( fact ( n ) / < ( a > _<number>_ > int & < i > k ( n * n > k > k > b > _<number>_ > int k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > k > b > _<number>_ > k
lse if ( n == _<number>_ && n == _<number>_ number > _<number>_ > _<number>_ ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( k == _<number>_ &&
lag1 = _<number>_ ;
nt i , j , n , b = _<number>_ = _<number>_ )
ong int b ;
f ( f == _<number>_ )
nt b ;
f ( b == b & ( int , k ) number number = _<number>_ , b , = _<number>_ , )
or ( j = _<number>_ ; j <= i / _<number>_ = ( printf ( _<string>_ n n ) <START_BUG> return b ) ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag ) flag )
canf ( _<string>_ , & b ) = * > > b ( int int number number number = _<number>_ = _<number>_ number ) number number number
or ( i = _<number>_ ; i <= _<number>_ = a k k k ( ( + _<number>_ , + _<number>_ ; number ++ ; number ++ ; i ++ = _<number>_ = k ++ = _<number>_ = i ++ = _<number>_ = _<number>_ ) ) int if ( i ( j , j = _<number>_ = _<number>_ = _<number>_ = b ++ = _<number>_ = _<number>_ = k ++ = _<number>_ = _<number>_ = _<number>_ = k ++ = _<number>_ = _<number>_ = _<number>_ = k ++ = _<number>_ = _<number>_ ) ) int i , if ( i
or ( j = _<number>_ ; j <= _<number>_ number if ( j <= _<number>_ ) ; n ++ ( return i ; else else - else - _<number>_ ; fact ( else - else number ; else else - else - else ;
or ( k = _<number>_ ; k <= n + _<number>_ ( int , int ; int int int ; int int int int ; int int int int ; int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int int int int ; int int int ; int int int int
f ( b < n , k , = = _<number>_ < ) flag1 = ) {
f ( B ( n , k number , , , , b > b > i > if < , < < n > n > k > _<number>_ > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n > n
= B ( n , k ) ;
or ( k = _<number>_ ; k <= _<number>_ b b = _<number>_ ) = _<number>_ = b ++ ; , ++ ( i if ( , j ++ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ; , j ++ = _<number>_ = _<number>_ ; , j ++ = _<number>_ ;
canf ( _<string>_ , & n ) ;
nt n , k , fact ;
f ( n < k ) { ncordi = _<number>_ ; kcordi = _<number>_ ; t2 = _<number>_ ; }
rintf ( _<string>_ , ncordi , kcordi ) ;
rintf ( _<string>_ , i , j = _<number>_ = _<number>_ ) ;
nt i , j , k , k number number number ;
rintf ( _<string>_ , k ) ; n = k = _<number>_ = < < n k > , n ; - _<number>_ ; if ( - < , j > , k > j > j > j > , k > & & } ( n > = _<number>_ ( } > = _<number>_ ( } == _<number>_ ( n > = _<number>_ ( } == _<number>_ ( n > = _<number>_ ( } == _<number>_ ) ) ) ) ) ) ) number = _<number>_ = * else = _<number>_ =
rintf ( _<string>_ , l ) ;
f ( l == _<number>_ ) {
f ( B ( n , k number k = _<number>_ number k > _<number>_ number number number number number _<number>_ ) ) n - _<number>_ ( , b b ( , b b && & > _<number>_ number number number number _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number ) ( , b b number number number number number number , , number number number number number - _<number>_ number ) n ; n ( , k ( , k (
rintf ( _<string>_ , n , k = _<number>_ number number ) number > _<number>_ ( , k ) ( , number , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
f ( ( i , j ) == - - - b ( ;
f ( a == _<number>_ && b == _<number>_ ( n = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
nt n , p , p = _<number>_ ( , b & return _<number>_ number n number number number number number number ( } _<number>_ , _<number>_ ;
eturn ( m , k ) ;
= B ( n , k ( = _<number>_ > N > N > N > N > N > N = _<number>_ = _<number>_ > N > N > <unk> > N > <unk> > N > M > N > N > M > _<number>_ > N > N > M > N > T > N > M > _<number>_ > N > N > M > N > T ( N {
f ( b == binomial ( i n ;
nt i , j , p = _<number>_ , else ;
ount = _<number>_ ;
nt i , j , b , else )
lse if ( n == _<number>_ )
nt value , i , j , string = _<number>_ number ) ) )
canf ( _<string>_ , & k ) number number number ) number number number number number : _<number>_ number if ( n ) number number _<number>_ number
nt i , j , q = _<number>_ , b ;
or ( n = _<number>_ ; n <= _<number>_ ( & - - _<number>_ { } ) &
f ( b == binomial ( n }
rintf ( _<string>_ , n , k ) k = _<number>_ ) ) ) ) ) ) ) ) ; b ) for ( _<string>_ )
nt b , i , n , k = _<number>_ ;
f ( flag == _<number>_ ) printf ( _<string>_ ;
or ( i = _<number>_ ; i <= _<number>_ = _<number>_ ) ) i ++ ( int ( ( binomial }
f ( n == _<number>_ )
rintf ( _<string>_ , mat [ i ] + int number ; if ( _<string>_ , p int & a n , string j j ( & binomial = , for ; _<string>_ k + a + { [ { _<number>_ k k k }
rintf ( _<string>_ , mat [ i if ( string if ( _<string>_ , int int j ( int <START_BUG> if ( , b ( ( n k & ] ( binomial , binomial ( int , ( flag , & a if ( _<string>_ , } if ( } { _<number>_ , _<number>_ , _<number>_ , _<number>_ , & & if ( _<string>_ , } if ( } _<number>_ , & }
nt i , j , k , = ) ;
eturn B ( i - _<number>_ , = = else k ;
or ( j = _<number>_ ; j <= i = i ; & ++ ) - _<number>_ = _<number>_ ) binomial if ( return _<number>_ , l <= k ) else else else else b = _<number>_ ; if ( if ( if ( if ( int & ; int int int ; int int int int ; int int int int ; int int int int int ; string ++ ; string ++ = _<number>_ ) return ( - _<number>_ , return number ; return return ( return - return int ; return return ( return - return -
= B ( i , j ) ;
or ( j = _<number>_ ; j < _<number>_ = i number + _<number>_ number + ( } _<number>_ , + ( if ( }
f ( n == _<number>_ ) return _<number>_ ;
lag = binomial ( _<number>_ , _<number>_ = } - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = } _<number>_ = } - _<number>_ = _<number>_ = _<number>_ = _<number>_ = } _<number>_ = } _<number>_ n = _<number>_ n = _<number>_ = _<number>_ = _<number>_ = _<number>_ = } _<number>_ = } _<number>_ n = } _<number>_ = _<number>_ = _<number>_ = _<number>_ = } _<number>_ n = } _<number>_ = _<number>_ = _<number>_ = } _<number>_ n = } _<number>_ = _<number>_ n = _<number>_ n = _<number>_ = _<number>_
rintf ( _<string>_ , i , j ) ; n = { b , k ) number number number ; { [ k ] ) = _<number>_ ; & n } n }
lse { i = _<number>_ ; } k = _<number>_ ; & & & & int ) return _<number>_ ; & & & & & & & & & return _<number>_ ; return n ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_ ; return _<number>_
lse return B ( n - _<number>_ b n , = number & n { , , , = _<number>_ n + _<number>_ ; r & k & k & _<number>_ ; r n n n n n n n n n n n if ( k if ( , , , , k = _<number>_ n if ( , binomial ( , if ( , }
lse if ( n == k && k == _<number>_ )
f ( n < k )
lse return ( b ( n - _<number>_ return ; ; B < ) & B = = ) , k else n k k k k k k k k k k , ) , B ( = _<number>_ & b ;
f ( binomial < i , j ( & for ( int k ; j < ans ) i = _<number>_ ;
inomial ( b , _<number>_ , _<number>_ ) n n n n = _<number>_ , _<number>_ k k , k k k k , ) , ) , _<number>_ , _<number>_ ;
nt a , n , k ;
eturn _<number>_ ; } } }
nt i , j , k , t = _<number>_ ;
ns = _<number>_ ;
f ( binomial ( n , k ) == b ) {
f ( n == B ( i k ( k , b ( b k ; binomial binomial ) ) ) return ; & & & & & & - B ( k , n number p number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
f ( num == B ( i , } ) ; return _<number>_ + return _<number>_ ;
f ( B ( i , j number == n > n ) ( number if ) n )
or ( i = _<number>_ ; i <= n ( n , number ++ ( , if ( + + _<number>_ ; + j ++ ( i ( int int ( ( i { k - }
f ( n < k )
f ( arr [ i ] [ j ] == b ) {
nt n , k , b , k , t = _<number>_ ;
f ( flag == _<number>_ ) printf ( _<string>_ ) ;
rintf ( _<string>_ , fact ( n , { i k > b > ) > k ) ;
f ( ( k == _<number>_ && ) == _<number>_ > b == _<number>_ > k == _<number>_ > i ) & _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( number == _<number>_ && number == _<number>_ > number > , , _<number>_ > _<number>_ > , , _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ >
or ( k = _<number>_ ; k < _<number>_ ; k ++ ) {
lse return bin ( n - _<number>_ , k ) + bin ( n - _<number>_ { }
f ( binomial ( n , k ) == } = _<number>_ ) +
f ( B ( n , k , b ) != k )
f ( B ( n , k number n > ; > n ) )
rintf ( _<string>_ , p + q ) ;
f ( b == b ( i , j ) )
rintf ( _<string>_ , i , j ) ) ) ; b , b , { <END_BUG> ( b k b ( n , + { <END_BUG> ; } number number number number number number number number number number number number number number number ( n , + { _<number>_ , _<number>_ , _<number>_ , + n ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n , + _<number>_ ( n ,
or ( i = _<number>_ ; i <= i ) b <= n ( int binomial number number , b k ++ number ( ( } _<number>_ k - _<number>_ ( , , n k ++ ( , if ( , n - , number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
eturn B ( n - _<number>_ , = ; b > = = ( b + _<number>_ ) co n + _<number>_ number number number ;
lse return bin ( n - _<number>_ , k ( n ; binomial ( n string _<number>_ , k ) string - _<number>_ ) ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
nt b , k , p ;
rintf ( _<string>_ , ncordi , kcordi ) ; }
f ( flag1 == _<number>_ ) ;
nt b , k , n , co = _<number>_ i , k number number _<number>_ int , , , number number _<number>_ number
o = _<number>_ ; } } }
nt n , i , j ;
f ( b == _<number>_ )
f ( B ( n , k ) != _<number>_ || - ;
nt n , k , k ;
or ( k = _<number>_ ; k <= _<number>_ ) & k ++ ( ( i if ( ) - number ; ) ++ ) l <= _<number>_ ) }
rintf ( _<string>_ , k ) ; - if ( number ( + number , ; } > ; ; } ++ ( number number + ) = b = ) <END_BUG> > ) ; - - _<number>_ ; - ) ; - - _<number>_ ; - ) ; - - _<number>_ ; - ) ; { { for ( ( b n n n number number number number number number number number number number number number number number number number ( int int k number == ( n number ( int k k == ( int int number k
rintf ( _<string>_ , B ( _<number>_ n - _<number>_ ) > number ;
rintf ( _<string>_ , B ( _<number>_ n n ;
rintf ( _<string>_ , B ( n number ; > = > ;
lse if ( fact ( n ) / < < < < < < < < < < < < < < < < < < < < < < < < < < < < ; , k = if < k < < < < if < ; k = k < ;
nt n = b ;
or ( n = _<number>_ ; n > _<number>_ ; i -- = _<number>_ = _<number>_ ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ] ) ]
canf ( _<string>_ , & b ) ;
nt i , j , b , f ;
or ( k = _<number>_ ; k <= _<number>_ ; = ++ number number number = _<number>_ = _<number>_ ;
nt i , j , b ;
canf ( _<string>_ , & b ) ;
nt b , i , j ;
nt arr = _<number>_ , b , k = _<number>_ number b k n ) k k k k k k , n , n k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k k , if ( printf ( _<number>_ = _<number>_ = b ;
rintf ( _<string>_ , arr [ _<number>_ if ( i ) k k ) = _<number>_ ) ) ) ) ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = j = _<number>_ = _<number>_ = j = _<number>_ = j = _<number>_ = j = _<number>_ = j = _<number>_ = j = _<number>_ ; printf = b ( ) ;
ouble n , k , * b ) ) ( k n n , ( = _<number>_ ;
f ( l == _<number>_ ) {
f ( bin ( n , k ) == & else ;
rintf ( _<string>_ , b ( _<number>_ b - _<number>_ > k > { ) > {
nt B ( int n , int k ( ( > printf > n > _<number>_ > _<number>_ > _<number>_ > { ) > _<number>_ > { _<number>_ int _<number>_ b - , , , n > k > - k > - _<number>_ > int return _<number>_ > int return < j > j > _<number>_ > int return _<number>_ > int return n > j > k > _<number>_ > int return _<number>_ > int return n > k > _<number>_ > int return _<number>_ > int return int return _<number>_ > j > j > _<number>_ >
lse return b ( n - _<number>_ ; k ) b co { & [ j ] binomial return return return return return _<number>_ k n + _<number>_ n n n else , k n else b , k k int int n } & int int ; fact < int , ; string return k = _<number>_ * if ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_ ( n return _<number>_
lse if ( ( n == _<number>_ ) && number == _<number>_ > return _<number>_ > _<number>_ > , , , , , , , b == _<number>_ number k == _<number>_ number k == _<number>_ > B == _<number>_ > C > N ) b _<number>_ number number number number ( n == _<number>_ ;
f ( B ( n , k ) == i ) if ( i < ) if ( n < , ) & n ) &
nt b , k , i = _<number>_ k ;
rintf ( _<string>_ , _<number>_ ) ; }
nt n , k , i ;
rintf ( _<string>_ , B ( _<number>_ , _<number>_ ( > _<number>_ ) ) ( b ( _<number>_ n printf ( _<string>_ n - f < _<number>_ > - _<number>_ > - _<number>_ > - _<number>_ > string > _<number>_ > string > _<number>_ > _<number>_ > string > _<number>_ > _<number>_ > string > B > _<number>_ > _<number>_ > B > T > A > B > C > B > _<number>_ > C > B > T > B > <unk> > B > <unk> > B > <unk> > B > <unk> > B > <unk>
rintf ( _<string>_ , mat [ i } { {
rintf ( _<string>_ , mat [ i [ int int } if ( <START_BUG> return r return r number ( , k ( else <END_BUG> ( else main ( ( i n string _<number>_ ( k k - _<number>_ ; _<string>_ ; <START_BUG> if ) _<string>_ if ( for )
rintf ( _<string>_ , f1 , f2 ) ;
1 = f2 ;
lse if ( n == _<number>_ )
eturn B ( n - _<number>_ , = k ) { [ , number ans i i i return _<number>_ * n } - _<number>_ ; { i return B _<number>_ < int k < int k ans < _<number>_ > <unk> }
nt n , b , i ;
nt b , k , n , k number ) number = _<number>_ = _<number>_ ( ) / _<number>_ number number number _<number>_ number number number _<number>_ ( ) ( ) / _<number>_ ( )
or ( k = _<number>_ ; k <= _<number>_ ) , int int int k = _<number>_ ; k ++ ; int int int int int int k n n n n n n n n ) {
f ( n < k )
rintf ( _<string>_ , n , k number ) ; [ int k = _<number>_ ; { printf ( _<string>_ n n n n n n n n < int int < int < int , k > k = int , = int k = int k = int k = int k = int k number = } _<number>_ , _<number>_ , _<number>_ { else } = _<number>_ , k = _<number>_ , k = _<number>_ , k = _<number>_ , k = _<number>_ , k = _<number>_ , k = _<number>_ , k = _<number>_ , k
or ( j = _<number>_ ; j <= _<number>_ number } ] )
= _<number>_ ; break ; } } }
or ( j = _<number>_ ; j <= _<number>_ ( j ++ ; {
rintf ( _<string>_ , n , k ( binomial < k > n > k < n < k > = _<number>_ > = _<number>_ = k = _<number>_ = _<number>_ = * + _<number>_ = * , = _<number>_ number n ) = _<number>_ ) = _<number>_ = { _<number>_ { for ( if ( - _<number>_ ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b
f ( n < k )
lse if ( B ( k , = == b < n > n = _<number>_ = _<number>_ = _<number>_ number ) ) {
f ( B ( n , k number int int > n ; } _<string>_ + k ;
f ( b < _<number>_ ) {
f ( B ( n , k ; k ; b ++ number number = b number number = _<number>_ = _<number>_ = i = _<number>_ = i = _<number>_ = i = i = i = _<number>_ = n = _<number>_ = _<number>_ = n = _<number>_ = _<number>_ = n = _<number>_ = _<number>_ = n = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = n
nt b ;
nt main ( ) {
rintf ( _<string>_ , n , k = k = k = _<number>_ = _<number>_ = _<number>_ = * return > _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = j + _<number>_ = _<number>_ = _<number>_ ; break ; k ++ = _<number>_ = _<number>_ ; break ; k _<string>_ = n + _<number>_ = _<number>_ ; break ; k ++ = > n + _<number>_ = _<number>_ ; break ; k ++ = if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
f ( b == binomial ( = - = = _<number>_ ) = _<number>_ = _<number>_ number _<number>_ = _<number>_ ;
f ( binomial ( j , } ) == string ( ) == & - - & - , ) { - ( return number ( } = _<number>_ = _<number>_ number - _<number>_ number number > _<number>_ > & _<number>_ > _<number>_ > , n > _<number>_ > , b > _<number>_ > , n > b > _<number>_ > , n > b > _<number>_ > , > , n > _<number>_ > , n > b ;
nt b , i , j number number number number ;
lse return B ( n - _<number>_ n k = + B ) + ( N return _<number>_ = _<number>_ k string _<number>_ = _<number>_ ) number number number ; }
nt i , j , b = _<number>_ ( , n n = _<number>_ = _<number>_ = _<number>_ ( { k , }
nt i , j , b = count count & - _<number>_ ) ) )
eturn B ( n - _<number>_ , k ) + b ( return _<number>_ = b printf ; B _<number>_ ( else { binomial ; i - _<number>_ ) = _<number>_ = if ( }
nt n = _<number>_ , k ) ) ) ;
nt i , j , b = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ m )
f ( binomial ( j , n ) == string ) binomial > key ) -
f ( binomial ( i , k ( k , n ( if ) ) k ( n , if ( key ) ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if ( key ) == b ( n , if (
rintf ( _<string>_ , n , , , , i ; { return n , k ) ; - & , = _<number>_ { n { return number number number number number number number number number ( i j number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( k = _<number>_ ; = <= _<number>_ ; ) ++ number number number number number number ( b { , = _<number>_ > _<number>_ > _<number>_ > k ;
lse if ( b < _<number>_ ) ,
or ( j = _<number>_ ; n >= _<number>_ number int n ( + _<number>_ , & k ( ) ) number
f ( n < k )
nt binomial ( int n , k ( ( & & , & k ) ) return k ; a > return return if ( return { _<number>_ , return if ( return { _<number>_ , return if ( return return if if ( return return if if ( return return if if ( return return if if ( return return if ( return if ( return { _<number>_ return if ( return return if ( return { _<number>_ return return if ; a > string ) a
f ( c = _<number>_ ) string ( return _<number>_ ) ) ( int number = _<number>_ ; return ( for ( for ) ( k ) ( k number _<number>_ ; if > printf ( _<string>_ , flag1 ( if ; return ( flag1 == _<number>_ number b number number number number number number number number number number number number number number number number number number number number number number number number number number number _<number>_ ;
rintf ( _<string>_ , recbin ( _<number>_ , _<number>_ number } ) ) number number number k number number number number _<number>_ number number ) ( n ;
eturn B ( n - _<number>_ i ; number ( i - i - > <unk> ( n return _<number>_ { = _<number>_ number ; int b ; int = > = = , > _<number>_ ) ; b = n return _<number>_ ; b = ( k return _<number>_ ) } b } ; b return ( k return _<number>_ ) ; if ( k return ( k return _<number>_ , = ) } }
or ( k = _<number>_ ; k <= n ) ) {
nt n , k , b , b , printf ( _<string>_ k , , , , n k ) number - _<number>_ ;
or ( i = _<number>_ ; n <= _<number>_ ; n ++ )
al = bin ( i , j ) ;
nt n , k , p ( b { , int int number ( number { _<number>_ , if ( n , k ; }
nt k , m , n ( ;
f ( grbg == _<number>_ ) flag = _<number>_ ;
nt a ;
rintf ( _<string>_ , B ( _<number>_ a1 _<number>_ number _<number>_ number else ;
eturn B ( i - _<number>_ , a1 , number + term j ( , }
f ( binomial ( i , j ) == b ; int int - ) n = _<number>_ ( + - j ) == - - i ) c = - ;
nt i , j , binomial , | j , for ) ;
rintf ( _<string>_ , mat [ i binomial n k k ; n } number ) number = k i n n i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
lse if ( ( n >= _<number>_ < n < _<number>_ < i < _<number>_ < i ) && > >= i < i < i < i < i < _<number>_ < i < _<number>_ ( - n ( - n ( - n ( - n ( - n ( - n ( - n ( , , n ( , >= n ( , n ( , n ( , n ( , n ( , n ( , n ( , n ( , n ( , n ( , n ( , n ( ,
lse if ( ( n >= _<number>_ ( { && < n >= _<number>_ > i > _<number>_ > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > i > i > i > _<number>_ > n ) ) fact
or ( j = _<number>_ ; j <= _<number>_ number return _<number>_ number }
canf ( _<string>_ , & b ) number number number number number ;
eturn x ; } }
nt b , k , k ;
f ( bin ( i , j ) < b )
eturn ( binomial ( n - _<number>_ , b ) if ( c & if ( c number - _<number>_ ; }
nt i , j , f = _<number>_ , b , c ;
or ( j = _<number>_ ; j <= i / _<number>_ - _<number>_ number int int int int int int > _<number>_ k number - _<number>_ k number _<number>_ number - _<number>_ number )
f ( b == b ( i , binomial ) )
or ( i = _<number>_ ; i <= _<number>_ ; i = i + _<number>_ k ; , ( , k n = _<number>_ = _<number>_ = _<number>_ = , , , , , , , , break = _<number>_ = _<number>_ = _<number>_ = , , _<number>_ = _<number>_ = , _<number>_ = , _<number>_ = , _<number>_ = , _<number>_ = , _<number>_ = , _<number>_ ; , , , , break = _<number>_ = _<number>_ ;
f ( n == _<number>_ )
rintf ( _<string>_ , B ( n , k ) ) ;
rintf ( _<string>_ , B ( n , k ) ) ;
f ( b == _<number>_ ) printf ( _<string>_ , _<number>_ , _<number>_ ) ;
or ( k = _<number>_ ; k <= _<number>_ ; = ++ < n = _<number>_ = _<number>_ ; ) k ++ = _<number>_ ; ) k ++ = _<number>_ ; ) k ++ = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ ( ) n - _<number>_ ( ) n - _<number>_ ( ) n - _<number>_ ( ) n - _<number>_ ( ) n - _<number>_ number k ++ > _<number>_ > k number k ++ > _<number>_ > n > _<number>_ number k
rintf ( _<string>_ , n , k ) ) ;
f ( value < _<number>_ ) ) +
nt a2 , a2 , n , + ) < int int = _<number>_ < _<number>_ number < _<number>_ number return _<number>_ number < _<number>_ number return _<number>_ < _<number>_ number
nt i , t1 , t2 , j a2 ;
rintf ( _<string>_ , term ) ;
nt a1 , a2 , n , + = _<number>_ number < i number ( { & j = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ k number number number number number , i , i , i , i , i , k , k , i , ;
nt a , b , n , i ;
= c ;
nt t0 , t1 ;
1 = t2 ;
n = t2 ;
rintf ( _<string>_ , a1 , ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
unk> = tn ; }
or ( i = _<number>_ ; & > & + _<number>_ = } _<number>_ ( <unk> ++ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number , t1 ++
= b + c + _<number>_ ;
1 = n1 + n2 - _<number>_ ;
unk> = n1 ;
rintf ( _<string>_ , i ) < int ( return _<number>_ i i number n n int ( number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
rintf ( _<string>_ , ti ) ;
1 = s1 ;
nt j , n , s , number ;
rintf ( _<string>_ , t3 ) ;
nt t1 = a2 ;
nt a1 , a2 , a = _<number>_ int ) , n ( a1 = ) ;
nt a1 , a2 , a , ) = _<number>_ = _<number>_ ;
lse if ( n == _<number>_ = _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < number < _<number>_ < _<number>_ < number < _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_ < number = _<number>_ < _<number>_
int c = a2 + a1 } _<number>_ = n < n < ) printf ( _<string>_ ;
um = a2 + a1 + _<number>_ ;
nt a1 , a2 , n )
1 = sum ;
um = sum ;
int a = b + + = { _<number>_ if > n t1 t2 ;
= n - n2 ;
2 = n ;
rintf ( _<string>_ , & n ( ) ( ) ) ;
= j - _<number>_ ;
rintf ( _<string>_ , a1 ) = _<number>_ , number , a1 , number , n1 , n1 , n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1
canf ( _<string>_ , & a1 = t1 ( int number , a2 ) ;
rintf ( _<string>_ , tn ) ; & > i ) >
= tn - _<number>_ ;
n = a2 ; }
n = a2 + a1 - _<number>_ ; & a2 - number + _<number>_ ; i = a2 else & a2 < a2 if , number ; i = b if , number ; b printf ( _<string>_ < number if ( number ; b <= n ) a1 = a2 if ( n - string printf ( _<string>_ , n if ( n - string printf ( _<string>_ , n if ( b - c ) i i ) < { b a2 a2 a2 a2 a2 { b a2 a2 + c i i i i i i
rintf ( _<string>_ , A ) , B ;
2 = a1 ;
= k ;
rintf ( _<string>_ , i , ) > n < n q q i ;
rintf ( _<string>_ , a2 ) < a2 < a2 < { + _<number>_ ( b > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2 > a2
nt k = a1 + a2 } + _<number>_ < a2 < _<number>_ < j int { if ( int { c = c if = if ( int { <unk> ) printf ( _<string>_ ( int { ) < A1 if ( b ;
= a2 ;
= a2 ;
unk> = tn ; }
rintf ( _<string>_ , <unk> ) ;
= x ; }
or ( i > _<number>_ ; ) , & & & & & i string < i printf ( _<string>_ ( number ; = = printf ( _<string>_ ( number ; = = printf ( _<string>_ ( number ) else else a1 else else a1 else a if ( ) < _<number>_ n n n i if ( ) < _<number>_ n n if ( ) < _<number>_ , ) } {
nt i , a1 , n , c , b , c ;
rintf ( _<string>_ , <unk> ) ; } }
nt a1 , a2 , a1 = _<number>_ ( string ( a1 ( a1 ( string = _<number>_ ) ) ) )
1 = a2 ; }
[ i ] = t ( = string number _<number>_ = _<number>_ = _<number>_ ) - i < _<number>_ ; int n ) < printf ( _<string>_ ) < number < number , i < number , i < _<number>_ < i < i < i < _<number>_ ; int n string ; int ( n string _<number>_ string _<number>_ string ; int ( n string _<number>_ string n string a1 string _<number>_ n n n n n n n n if a1 ( number ( number ( number ( number ( number ( = _<number>_ > N else
= a + b - _<number>_ < b ;
nt a1 , a2 , n < printf ( _<string>_ < a2 < b , ) < string ;
rintf ( _<string>_ , p * * } string {
f ( n > _<number>_ )
++ ; } }
2 = numb ;
nt i , a , b , number , ( n ;
f ( c == _<number>_ ) a2 ( n == _<number>_ = _<number>_ = a2 = _<number>_ = _<number>_ = b = b - a2 ) , a2 , a2 , number , a2 , number , number , string , a2 ) , string , string ;
nt n , a2 , a2 ;
or ( int i = _<number>_ , a2 < n < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ , ( ( ( ( ( ( ( ( ( ( ( a1 ++ ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] n n n n n n n n n n n n n n n n n n n n
or ( int i = _<number>_ ; + <= a1 < string < string < string < int i )
rintf ( _<string>_ , tn ) ;
or ( n = _<number>_ ; _<number>_ <= number ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ - _<number>_ number ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
nt i , j , a1 = _<number>_ = _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
1 = a2 ;
um2 = sum ; }
, i , sum1 , sum2 ;
= a + b - _<number>_ ;
2 = a1 ;
nt tn , <unk> ;
f ( t == _<number>_ ) number = & a1 = + _<number>_ = n = _<number>_ = _<number>_ = n < & & & t == _<number>_ t ( , == _<number>_ t - _<number>_ t t t = _<number>_ t t t ) * ] < + , < _<number>_ < ( + _<number>_ t - _<number>_ t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
3 = t3 + t2 - _<number>_ ;
rintf ( _<string>_ , tn ) ;
rintf ( _<string>_ , tn ) ;
2 = c ; }
2 = c ; } }
nt t [ _<number>_ ] ;
canf ( _<string>_ , & a2 ) , {
n = <unk> - _<number>_ ;
or ( i = a2 ; + , ( ( number { j ++ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) ) ; i ++ ) sum1 ; sum1 sum1 sum1 sum1 sum1 sum1 ) sum1 = sum ; sum1 ++ ) sum1 ; sum1 sum1 sum1 sum1 sum1 sum1 sum1 sum1 ) sum1 = sum ; sum1 ++ ) sum1 ; sum1 sum1 sum1 sum1 sum1 sum1 sum1 sum1 ) sum1 = sum - _<number>_ ;
rintf ( _<string>_ , tn ) ;
rintf ( _<string>_ , tn ) ;
f ( n = _<number>_ ) } int t2 = _<number>_ < n , scanf ( _<string>_ < n , scanf ( _<string>_ ; a1 > if = number > _<number>_ > if ( number n == _<number>_ > if = number > _<number>_ > if = number == _<number>_ > string > if = number > _<number>_ > sum > if = number > _<number>_ > if = number == _<number>_ > if = number a1 == _<number>_ > scanf ( _<string>_ < scanf ) , scanf ( _<string>_ < scanf ) ) , a1 , { printf (
f ( n = _<number>_ ) { , string , { if = number == _<number>_ > { if = number a2 == _<number>_ ) a1 = } ; i _<string>_ , } , }
rintf ( _<string>_ , tn ) ;
canf ( _<string>_ , & a1 ; k ;
2 = res ;
2 = j ; }
n2 = tn ;
n = tn1 + tn2 ;
rintf ( _<string>_ , tn ) ; }
= x + y - _<number>_ ; } } }
= p ;
canf ( _<string>_ , & p ) ;
rintf ( _<string>_ , a1 ) ; }
2 = t + n ; p = printf ( _<string>_ = _<number>_ ( number ( number ( number ( number a2 - y ( number a2 - _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2 _<number>_ ( number a2
f ( n == _<number>_ ) else string = term ;
n = tn1 + tn2 - _<number>_ ; if ( number = & <unk> , <unk> , <unk> < <unk> ( n - a2 ( n - a2 ( n - a2 ( n - a2 ( n - a2 ( n - a2 ( n - a2 < _<number>_ < _<number>_ < i < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk>
nt a , b , i = _<number>_ n else > + _<number>_ > i > N > A > B > C > B > A < N > N > N > N > N > B > A > B > C > B > A < B < C < _<number>_ < B < i < N < _<number>_ < <unk> < <unk> < <unk> < <unk> < <unk> ) < <unk> < <unk> < <unk> < _<number>_ < A ) for ( } > A , B , C , N = _<number>_ = _<number>_
nt a , b , n = a2 = _<number>_ < { _<number>_ = _<number>_ = _<number>_ = a1 > _<number>_ = _<number>_ = _<number>_ string ) ( number > int i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( number > _<number>_ )
unk> = <unk> ;
rintf ( _<string>_ , n , c a a2 a2 string ;
1 = a2 ; }
nt a1 , a2 , c ;
= b + c - _<number>_ ;
rintf ( _<string>_ , a1 + n printf ( _<string>_ ( number if ( number int n = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = A1 if ( A1 int <unk> int _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
rintf ( _<string>_ , a1 + a2 - _<number>_ , string < _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ } ;
1 = res ; }
canf ( _<string>_ , & a1 ; sum ;
rintf ( _<string>_ , a2 ) , ) ;
lse if ( c == _<number>_ ) a ( _<string>_ < string = _<number>_ ) ;
lse printf ( _<string>_ , tn ) ;
rintf ( _<string>_ , a3 ) ;
n = <unk> ; }
= b + a + _<number>_ ;
= b - c - _<number>_ ;
um = sum1 + sum2 - _<number>_ ;
nt i , sum1 , sum2 ;
= j + _<number>_ ;
rintf ( _<string>_ , A ) > N ; return
= b + c - _<number>_ , a2 ;
or ( i = _<number>_ ; > <= }
rintf ( _<string>_ , a1 ) < < < number , number ; ;
nt a1 , a2 , n , an , b ;
nt a1 , a2 , n , a1 ;
rintf ( _<string>_ , t ) ;
rintf ( _<string>_ , an1 ) i i , a2 ;
n1 = an ; } } i = t ; i = a2 < a2 , ( c b 2 ) ; 2 = 1 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; 2 ; { { else n ( a1 ; { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
nt a1 , a2 , a ;
= a + _<number>_ * t & _<number>_ = _<number>_ < + n , + 1 ; A number _<number>_ & B p ) , A number _<number>_ & B p C , A number _<number>_ & n p , A number B p - _<number>_ , C , A number _<number>_ else , B < A number _<number>_ else , C , A number _<number>_ else , B < A number _<number>_ else , C < n return _<number>_ , C < n number _<number>_ else t = n return _<number>_ , n return _<number>_ , n return
canf ( _<string>_ , & a1 , & ( + string ;
lse if ( n > _<number>_ = ( n p _<number>_ ; a2 < { number ; a2 ( ) scanf ( > ; a2 = = = = ) i n ; a2 = & & > = _<number>_ > T = ) sum2 = & & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = & ) a2 = &
unk> = a ;
or ( i = _<number>_ ; & <= > < < < < < < > > > + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( +
nt tn = _<number>_ ;
rintf ( _<string>_ , t [ ; a i ( t , i a1 a1 c c c number int , int , int , int , int n int , , number number number number number - _<number>_ int a1 number , , + a1 number a1 number , }
um2 = sum ; }
um = sum + sum2 + _<number>_ ;
rintf ( _<string>_ , a1 ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
rintf ( _<string>_ , a2 ) , n ( a == _<number>_ ( s ( a2 n ;
rintf ( _<string>_ , a1 ) ;
rintf ( _<string>_ , t ) = _<number>_ ;
lse if ( n > _<number>_ ) number ; int n ;
or ( j = _<number>_ ; j <= ( sum - _<number>_ , string - sum , string , sum2 , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , sum2 <= _<number>_
rintf ( _<string>_ , s ) ;
or ( int i = _<number>_ ; number <= + _<number>_ ; printf ( _<string>_ = ( a1 - & & ) ) , & i ) a1 - _<number>_ , a , & c ) a1 ++ ) a1 = number , & c ) a1 ++ ) a1 = number ; for ( string = 1 ; b <= & & & ; ( ( number ++ ( ( number ++ ( ( & number ( ( & number ( ( & number ( ( & number ( ( & number ( ( & number , <END_BUG> ++
nt x = a1 , n < a2 < _<number>_ < a > a2 > s ;
nt i = a1 ;
= a2 ;
= i + i - _<number>_ < n < a1 ;
f ( n == _<number>_ )
= s ;
= j ; }
rintf ( _<string>_ , t [ , n number n n n a1 & < i & { b = i int add t3 _<number>_ number < _<number>_ > if ( _<string>_ ; _<string>_ > a1 ) <
rintf ( _<string>_ , t2 ) > > < < i < b < string = _<number>_ > n ) , a1 , & a1 , & a1 = _<number>_ = _<number>_ , & a1 , & a1 = _<number>_ < n ) , n ) , n , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a1 , a , a ) , a , a < a ) , a , a < a ) , a , a <
nt a1 , a2 , i , = string < = _<number>_ < ) < j < b a1 ;
f ( n == _<number>_ ) printf ( _<string>_ ; A1 ) , <unk> , N ) ;
rintf ( _<string>_ , tn ) ; i = int n < <unk> ; number = i }
3 = t3 + t2 - _<number>_ > }
3 = a1 ;
rintf ( _<string>_ , a2 ) ;
rintf ( _<string>_ , n ) ;
f ( i == _<number>_ ) string = printf ( _<string>_ number { _<number>_ } > sum > _<number>_ ) ;
rintf ( _<string>_ , t ) ; i = _<number>_ ; i = n a2 a2 - _<number>_ , { if > { {
lse if ( i = _<number>_ ( ( & ( _<number>_ , + _<number>_ > + _<number>_ > i > string > _<number>_ > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N > N >
= a1 ; }
nt a , b , c > t2 > a2 ;
= x + y - _<number>_ ;
rintf ( _<string>_ , a2 ) < a2 ; a1 = n } - _<number>_ < a2 ; j = j printf ( _<string>_ ) ; i = a printf ( _<string>_ ) ; i = a printf ( _<string>_ ) , }
rintf ( _<string>_ , j ) ; a = & n < & a2 < _<number>_ )
= a1 + a2 + _<number>_ , }
nt x , y , i , i , i , i ;
or ( i = _<number>_ ; number <= number > number > a1 else _<number>_ )
= b ;
nt i , a1 , a2 , b , c ;
= n1 ;
rintf ( _<string>_ , a3 ) ;
nt t2 , t [ i [ ; = n > {
rintf ( _<string>_ , t [ < > ;
= ( p + q - _<number>_ a1 n n n n n a1 string n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
lse if ( n == _<number>_ ) if , n == _<number>_ number 1 , int int , , else if ) + _<number>_ ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ] ; a1 = ]
rintf ( _<string>_ , an ) ;
rintf ( _<string>_ , n , term b b a2 a2 a2 a2 a2 a2 a2 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
1 = a2 ;
[ _<number>_ ] = a1 ;
rintf ( _<string>_ , t [ i + _<number>_ t ) ; }
hile ( i <= n ) {
rintf ( _<string>_ , t3 ) ; { { - _<number>_ < <unk> < <unk> ; { 2 ( _<string>_ tm number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
es = a1 + a2 + _<number>_ ;
es = a1 + a2 - _<number>_ ;
rintf ( _<string>_ , t [ i + _<number>_ [ i - _<number>_ [ i - _<number>_ ] ] ] ) ; { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
nt t [ _<number>_ ] ;
rintf ( _<string>_ , i , j ;
= j + _<number>_ ; }
or ( int i = a1 ; [ < i ; > c a2 }
or ( i > _<number>_ ; i ; , = < a1 a1 { * = , , , , n a1 a1 ) {
[ _<number>_ ] = i ;
n = <unk> ;
nt a1 , a2 , n , tn ) + i )
= ( p + q - _<number>_ ) string - _<number>_ > > _<number>_ ;
f ( i == n ) ;
= b ; b = a , a2 ; else string ; else
3 = a1 + a2 - _<number>_ > number < number < _<number>_ < n = _<number>_ > [ ] > _<number>_ , t > [ i a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2
rintf ( _<string>_ , a1 ) ; int { > _<number>_ number ; }
= a1 ;
rintf ( _<string>_ , res ) ;
= a2 ;
= t ; } }
rintf ( _<string>_ , t3 ) ; + _<number>_ * t a2 > t > , a1 > , = _<number>_ ( ] = , = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ( ] = , = _<number>_ =
rintf ( _<string>_ , <unk> ) < <unk> < <unk> ;
rintf ( _<string>_ , t [ i b n a1 a2 a2 n n a2 , i a2 ) < _<number>_ > _<number>_ > { _<number>_ string ) >
rintf ( _<string>_ , t [ < n number a2 n n a2 a2 n n n n n n n int {
nt a1 , a2 , n < < < < > ) = _<number>_ , > , > > > > ;
nt res = _<number>_ ;
rintf ( _<string>_ , tm ) = _<number>_ > t > ( i n number number number _<number>_ number number number - _<number>_ number number number number - _<number>_ + n + _<number>_ + n + _<number>_ + n + _<number>_ + n , = _<number>_ , [ t string _<number>_ n - _<number>_ n , [ t string _<number>_ ] , [ _<number>_ + _<number>_ ] , [ _<number>_ ] , [ _<number>_ string _<number>_ ] , [ _<number>_ ] , [ _<number>_ ] , [ _<number>_ ] , [ _<number>_ ] , [ _<number>_ ] , [ _<number>_
m = tm ; }
nt tn , <unk> , a2 number number > ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( string , _<number>_ number & & number number string number ) ( ) ( )
lse for ( i = _<number>_ > _<number>_ , number number ] > b ( n if ( n a2 > _<number>_ ; a1 <= number ( number y a2 > _<number>_ > number - _<number>_ > number > _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - = - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ; - _<number>_ ;
nt tn , <unk> , <unk> > N = _<number>_ = _<number>_ ;
or ( i = _<number>_ ; + <= { printf ( _<string>_ = & a2 , a > a2 > a2 ] ] b , & a1 b ; & t2 number number number number number number number number number number number number number number number )
nt c , b , c number a1 = _<number>_ , r < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ , int int number ) printf ( a ) < number < number < number < a2 < number ;
= sum ;
nt sum = _<number>_ ;
rintf ( _<string>_ , next ) ;
lse if ( t2 > _<number>_ number ( ) & a1 > _<number>_ [ _<number>_ ] [ _<number>_ ] [ ( number ( _<number>_ , + _<number>_ , a2 , _<number>_ , _<number>_ , _<number>_ , x , x , printf ( _<string>_ < & & & & & & & ) > t2 ) > _<number>_ > & & & & & ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ ) t2 > _<number>_ )
= x + y - _<number>_ ; }
f ( n == _<number>_ ) { term = t1 + ( _<number>_ * t2 - _<number>_ ) ; }
nt a1 , a2 , n > ) <
= a1 + b ;
nt a1 , a2 , n ;
rintf ( _<string>_ , p * } * c & string - _<number>_ int a1 number number number number number number + _<number>_ a2 a2 a2 ;
= temp ;
f ( n > _<number>_ ) -
int t1 = <unk> + n i i i - _<number>_ ;
nt n , i , a < number ;
rintf ( _<string>_ , tn ) ;
um = sum - _<number>_ ; }
um = a2 + _<number>_ ; }
rintf ( _<string>_ , t [ i + _<number>_ ] ) ; }
rintf ( _<string>_ , t [ i + _<number>_ ] ) ; }
n = tn - _<number>_ ; int ) , ) ; b ; a2 = , i & ( string ; { ( ( int number < _<number>_ number ( + p number s number _<number>_ number number number number ( s number s number s number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
canf ( _<string>_ , & a1 , & a , n ) if , ) < ) < , ( string ) < , , , a1 < t3 ;
tn = tn ++ ; }
or ( i > _<number>_ ; printf ( _<string>_ < printf ( _<string>_ < { }
f ( z == _<number>_ )
3 = t3 + t2 - _<number>_ < < _<number>_ < string < _<number>_ < _<number>_ = _<number>_ ;
nt t1 = a1 , i = A1 s <unk> ( n > _<number>_ = _<number>_ = A1 { _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_ , _<number>_ + _<number>_ , _<number>_ , _<number>_
rintf ( _<string>_ , t [ { = ) ;
or ( i = _<number>_ ; < number ( i - _<number>_ int printf ( _<string>_ = - + printf ( _<string>_ < = } _<number>_ + _<number>_ n a1 ++ a2 a2 a2 a2 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1
canf ( _<string>_ , & a1 , + i < i ) ;
or ( i = _<number>_ ; n <= i ; i ++ i i n n n number number n string string string string string string n n n string string + i + _<number>_ a1 ; printf ( _<string>_ , > x , x , number a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1
or ( j = _<number>_ ; j <= ( [ [ [ [ [ [ _<number>_ + _<number>_ + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
1 = s1 ; }
nt a1 ;
[ i ] = t [ i scanf ( _<string>_ , a1 a2 number string _<number>_ [ = & _<number>_ [ = & = & _<number>_ [ = & _<number>_ [ = & _<number>_ [ = & _<number>_ [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [ = & _<number>_ [ = [
rintf ( _<string>_ , t [ i ] ) ; a1 [ i ] t ; a1 a2
rintf ( _<string>_ , a2 ) < ; int a1 ; int number ; int if ( i > i , string , string , a2 ( }
nt a1 , a2 , n ( ( a1 ( a1 ( a1 ( a1 ( a1 ) ) ( } _<number>_ ) ( }
canf ( _<string>_ , & a1 , + string ;
nt tn1 , <unk> , tn > <unk> ;
= a ; B = number ;
nt a , b , c = _<number>_ > number ;
nt a , b , c , number ) ;
nt tn = tn ;
rintf ( _<string>_ , tn ) ; + _<number>_ ; { { { { { { { int a1 ) < n < n < n ; string = _<string>_ < } < }
hile ( i <= n ) ;
hile ( i <= n ) ;
= j ;
rintf ( _<string>_ , a ) < number ; & number ) ; & number ; & number < a2 ; string _<string>_ ; string = _<number>_ ; s1 = i < _<number>_ < n , [ ] < n , [ ] < i , n < n , [ ] < n , n < n , [ ] < n , n < n , [ ] < n , n < t , n , n , [ ] < t , n , n , n , n , n , n , n ,
canf ( _<string>_ , t [ _<number>_ ) a2 n i , _<number>_ number - _<number>_ number number _<number>_ number , [ _<number>_ number ( number > _<number>_ ( ) ;
unk> = sum ; }
unk> = numb ;
= x + y - _<number>_ ;
nt j , s , s < _<number>_ ( int i = _<number>_ = _<number>_ a2 < i a2 < i a2 a2 a2 ] ;
nt s = _<number>_ ;
um = a1 ;
canf ( _<string>_ , & n ; & a1 > + number = _<number>_ = _<number>_ = _<number>_ < string = _<number>_ < string < string < string = _<number>_ < string < string = _<number>_ < string < string < string = _<number>_ < string = _<number>_ < string < string < string = _<number>_ < string = _<number>_ < string < n < int n < int n < int n < int n < int < < while ( n < a2 < a2 ) ;
lse if ( n > _<number>_ ( a1 number _<number>_ ( a2 if number ( a2 , a2 ( a2 if number ( a2 , a2 ( a2 if ( a2 , a2 ( a2 if number ( a2 , a2 ( _<number>_ ( a2 if number ( a2 , a2 ( a2 if number a2 , a2 ( a2 ;
lse if ( n == _<number>_ ( t number _<number>_ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
f ( i == _<number>_ )
nt a1 , a2 , n ;
nt x = a2 ;
2 = t2 + t1 - _<number>_ ; + _<number>_ ; & ) ; & ) ; & ) ; & ) ;
[ _<number>_ ] = a2 , a1 , if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( { _<number>_ = if ( if ( if number + number = _<number>_ string - number = _<number>_ string / number = _<number>_ string / number < _<number>_ string printf ( _<string>_ , n string < printf ( _<string>_ , n string printf ( _<string>_
rintf ( _<string>_ , t [ > b number string n n n n n n = int int int n n = int int ) < - _<number>_ < - _<number>_ < - _<number>_ < , - _<number>_ < _<number>_ < + _<number>_ < , }
3 = t2 ;
rintf ( _<string>_ , t3 ) = number , number ; a3 = a1 < ( + _<number>_ ] ] ] ] ] ] number number number ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] < ( + = _<number>_ ] a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 b b b b b b b b b b b b b b b b b b b b b b b b b b b b number number number number number number number number number number
= l + _<number>_ ;
rintf ( _<string>_ , t3 ) ; { int = _<number>_ ; +
nt i = _<number>_ ;
nt a1 , a2 , n ;
= l + _<number>_ ;
rintf ( _<string>_ , t ) ; t = A1 y ; sum = Area ( a2 ) > a2 > a2 ) > a2 > a2 > a2 > a2 > a2 > a2 ) > a2 > n ) > - _<number>_ > > _<number>_ > - _<number>_ > a1 > int n ) > - _<number>_ > a1 > int int int int int int , sum = _<number>_ > + _<number>_ ) > int - _<number>_ > _<number>_ > _<number>_ ) > int - _<number>_ > _<number>_ ) > a2 > a2 > a2 > a2
rintf ( _<string>_ , t ) ; int } - _<number>_ > a1 > a1 > a1 > a1 > a1 = _<number>_ = _<number>_ > a1 > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ > a1 = _<number>_ >
f ( n > _<number>_ ) {
rintf ( _<string>_ , tn ) , ) ;
nt i , a1 , n ;
nt a1 , n , a2 < _<number>_ = _<number>_ ;
m = tm ;
= c ; b = i ( i ) , number , number , n , t , n , y , n , n , y , n , y , n , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n , y , n
rintf ( _<string>_ , sum2 ) ; } } }
um2 = sum ;
= a ;
rintf ( _<string>_ , tn ) ) ( ) < a < a1 , a1 , ( ( ) _<string>_ n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
n = tn ; }
canf ( _<string>_ , & n ; + n < sum2 < n > string = _<number>_ = _<number>_ ;
= j ; }
rintf ( _<string>_ , num3 ) ;
um3 = num2 ;
rintf ( _<string>_ , tn ) ; }
rintf ( _<string>_ , s ) ;
nt a1 , a2 , n ) ;
rintf ( _<string>_ , an ) > number , a2 ;
or ( i = _<number>_ ; ) <= - _<number>_ ; number ++ a2 number number number number n n n number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
= c + a - _<number>_ ;
nt a2 = ( a2 * a1 * i - _<number>_ & sum2 ) ;
= l + _<number>_ ;
or ( i = _<number>_ ; i <= sum2 ; a2 ++ ; t ++ ) -
rintf ( _<string>_ , a2 ) ;
= x + y - _<number>_ ; } } } }
rintf ( _<string>_ , t [ < = < _<number>_ sum int n a2 c c c c a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1
[ n ] = t n { a2 ) printf ( _<string>_ > sum2 ) > sum2 ( < < _<number>_ sum2 sum ) ( > > _<number>_ sum2 sum ) ( > > _<number>_ sum2 sum ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 sum ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2 number ) ( > > _<number>_ sum2
rintf ( _<string>_ , a2 ) ; +
f ( N != S )
n = tn ;
rintf ( _<string>_ , tn ) ;
es = a2 ; } }
canf ( _<string>_ , & a1 < & a2 < { ) ;
rintf ( _<string>_ , t1 ) ;
umb = a1 + a2 + _<number>_ ;
= t ; }
n1 = tn ; }
n = tn ; } }
unk> = <unk> + <unk> - _<number>_ ;
unk> = <unk> ;
lse if ( n == _<number>_ ; & a2 , n , 1 ( = _<number>_ < <unk> , <unk> < <unk> < N < _<number>_ < <unk> < N < _<number>_ < <unk> < N < _<number>_ < <unk> < N < _<number>_ < <unk> , <unk> < _<number>_ < <unk> , <unk> < _<number>_ < <unk> , <unk> ; 1 = <unk> , <unk> ( = _<number>_ < <unk> , <unk> < <unk> < N < <unk> < N < <unk> < N < <unk> < N < <unk> < <unk> < N < <unk> < <unk> <
nt a1 , a2 , n ;
n1 = an ; }
nt a1 , a2 , an ;
canf ( _<string>_ , & c string i number number number number ] ] ;
canf ( _<string>_ , & a1 ; - n ] ] ] ;
or ( i = _<number>_ ; string ) for ( i > _<number>_ ) ; a1 number <unk> < A < C < C < A < B < C < C < A < C < C < A < C < C < C < A < C < C < C < C < C < C < C < _<number>_ , a1 < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk>
unk> = <unk> + <unk> - _<number>_ ;
= c ; }
== a + b - _<number>_ ;
lse for ( i = _<number>_ ; ( t <= number < n printf ( _<string>_ > 1 = _<number>_ = _<number>_ = _<number>_ = c + _<number>_ = * for < number > _<number>_ > i > N & _<number>_ > <unk> & _<number>_ > <unk> > _<number>_ > N & _<number>_ > <unk> & _<number>_ > <unk> > _<number>_ > N & _<number>_ > N > _<number>_ > N & _<number>_ > <unk> & _<number>_ > <unk> & _<number>_ > <unk> > _<number>_ > N > _<number>_ > N & _<number>_ > <unk> & _<number>_ > <unk> &
rintf ( _<string>_ , tn ) ) ) [ _<number>_ t n , }
rintf ( _<string>_ , a22 ) ;
11 = ( a11 + a22 printf ( _<string>_ { <unk> = ( { { _<number>_ { < _<number>_ ] number <unk> < <unk> < <unk> number number number - _<number>_ number <unk> number ) < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
f ( c == n )
rintf ( _<string>_ , a2 ) ( number == _<number>_ ( c == _<number>_ int n ( n ( n ( n ( number ( ( n ( number ( ( n ( n ( number ( ( n - _<number>_ ( n ( number ( number ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n ( n (
rintf ( _<string>_ , t [ n ] a1 n n n number number c number number number number number number number number number number number number number number number number number number : _<number>_ number number number number ( , number number number number number number number number number number number number number number number number number number number number number number number : _<number>_ number number number number - _<number>_ number number number number number number number number number number number number number number _<number>_ number number number number : _<number>_ number number number number ( , number
[ i ] = t n <END_BUG> n + _<number>_ ) 1 > 1 = i { { { }
or ( i = _<number>_ ; { number <= , , , n , = _<number>_ ; b ++ 2 2 2 2 2 2 2 2 2 2 2 ;
rintf ( _<string>_ , t2 ) ;
or ( int i = _<number>_ ; a1 <= & & , , , ) if ( ; int int int int printf ( _<string>_ = _<number>_ = <unk> if ( ( = _<number>_ ( = = _<number>_ ( i - _<number>_ ( i ( = _<number>_ , _<number>_ ( = = _<number>_ ( = - else ( = = _<number>_ ( = - else ( = = _<number>_ ( i - i ( = _<number>_ ( i - i ( ( = _<number>_ , _<number>_ ( = _<number>_ ( i ++ ( ( = _<number>_ , _<number>_ ( =
rintf ( _<string>_ , t [ i + _<number>_ ] ) ; }
rintf ( _<string>_ , t [ i + _<number>_ ] ) ; }
ns = a1 + a2 + _<number>_ , a1 ; ;
= j + _<number>_ ; = a2 + } < <unk> ; c = n string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ ; c = a string _<number>_ > > }
[ n - _<number>_ ] = < ( number ] t number [ ( n & n & _<number>_ ] n n & _<number>_ n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 _<number>_ 1 ) tm
rintf ( _<string>_ , t [ ) < i [ ] < > > > > string ) ( string ) ( > > string ) ;
canf ( _<string>_ , & a1 ; + number ;
rintf ( _<string>_ , tn ) ;
= n + q ;
eturn a2 ; }
= b ; }
rintf ( _<string>_ , t [ n number n , b p p p p p p p p p p p p p p p p p p p p p p p p p p p p = _<number>_ p p p p p p p p p p p = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
rintf ( _<string>_ , t [ n < N ) > ;
= tn1 ;
n = tn1 ;
n = tm ; }
3 = t2 + t1 - _<number>_ < n = _<number>_ , a2 int number int number , number int number < _<number>_ > { = = = ( t > , , ( t n ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ] ] ] > & a1 , a1 a2 , t1 number _<number>_ > n > n > n > n - n > n - n > n - n >
2 = n + _<number>_ ;
= a + b - _<number>_ ;
= a + b - _<number>_ ; i = q } c > q } c i & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c ; i = q } c & q & c
hile ( n > _<number>_ )
rintf ( _<string>_ , t [ number ( i n number { ( = _<number>_ { ) ) ( ;
um = a2 ;
nt a1 , a2 , i < & sum ;
es = a1 + i - _<number>_ ;
n2 = tn1 ;
or ( i = a2 ; cal ( ) ( a2 ( i ++ < <unk> < N ++ < <unk> , <unk> ++ , ( <unk> ++ , 2 ++ , ( N ++ , 2 ++ , ( n ++ , 2 ++ , ( n ++ , 2 ++ , ( n ++ , 2 ++ , ( n ++ , 2 ++ , ( n ++ , string ++ ) ) ) ) ) if ( string > b = c = n < c < string ) if ( string > b = c =
rintf ( _<string>_ , tm ) > = _<number>_ = _<number>_ < tm < <unk> < <unk> ( 1 ( 1 number a number a number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
um = a2 ; } }
um = a1 ; }
1 = t2 ;
nt i = _<number>_ , t1 < > n ) , , <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> ;
2 = t2 + t1 - _<number>_ ;
n = <unk> - _<number>_ ;
rintf ( _<string>_ , tn ] ] ) ) ;
1 = s + p - _<number>_ ;
rintf ( _<string>_ , t ) ;
rintf ( _<string>_ , t1 ) ;
lse { return ( T ( n - _<number>_ < ; < = > = > = > ; t = > > > > > > > > > = > = > > _<number>_ ( n int = _<number>_ < ;
nt a1 , a2 , n ;
rintf ( _<string>_ , an1 ) ;
= d ; }
rintf ( _<string>_ , p ) ;
= a + b a1 _<number>_ ;
= a2 ;
rintf ( _<string>_ , a2 ) ;
nt tu ;
or ( int i = _<number>_ < n ; c <= a1 ; printf ( ++ number printf ( _<string>_ = a1 number printf ( _<string>_ = a1 number printf ( _<string>_ = a1 number printf ( _<string>_ = a1 number printf ( _<string>_ ) , c ) ++ ; {
nt a1 , a2 , n ) ;
n = <unk> ; }
+= _<number>_ ; } }
nt i , a1 , n , c < _<number>_ > B ( A ( n ( A ( t1 if number , A , B , A1 , C , A , B , C , A , B , C , A , B , C number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number A number number number number number number number number number number number number number number number
1 = a2 ;
nt p = _<number>_ , p = _<number>_ , r = _<number>_ ;
rintf ( _<string>_ , a2 2 , & a1 int b a a a n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 n1 number ;
rintf ( _<string>_ , s1 ) ;
nt a1 , a2 , j ;
rintf ( _<string>_ , t > int > , < < < _<number>_ { > < < < < < < < < < < < < < < < < < < < < < < < < < < < < < > > > < < a2 ;
rintf ( _<string>_ , t [ ) , a2 > i > i ( c ) ( i < n number - _<number>_ c c c c c ) ( i number n ) ( n < n ) ( n number n number _<number>_ return { _<number>_ printf ( _<string>_ > a2 ) ( a2 ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) (
erm = x + y - _<number>_ , t1 ;
canf ( _<string>_ , & n , n ;
rintf ( _<string>_ , a1 + a2 - _<number>_ n ( 1 & _<number>_ ( 1 ( ( 1 & , & _<number>_ ( 1 ( ( 1 string _<number>_ ( 1 ( 1 ( 1 ( 1 ( 1 - _<number>_ ( 1 if ( * & > n ; ++ t1 ; ++ t1 ; ++ t1 int = A1 int <unk> > _<number>_ ; if ( A1 <= A1 int <unk> ; if ( A1 , A1 int <unk> ; if ( A1 int <unk> ; if ( A1 if ( <unk> int <unk> ; if (
f ( n == _<number>_ ) printf ( _<string>_ < a1 n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n ( 1 == _<number>_ ; * * * * * - _<number>_ ; * * * * * * * * & == _<number>_ ; * * * * * - _<number>_ ; * * * * * * * & == _<number>_ ; * * * * * * * * * & & ;
nt a1 , a2 , n < n < ) scanf ( _<string>_ ;
= t + _<number>_ ; string = ) ; number = = a1 a1 - _<number>_ , = _<number>_ < + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d = + _<number>_ ; d
canf ( _<string>_ , & a1 b a2 b a2 a2 ;
lse if ( n == _<number>_ [ n ] ) string ( _<string>_ ; } = <unk> ( _<string>_ ) ) ; }
um = sum - _<number>_ ; sum2 = string <END_BUG> _<number>_ )
rintf ( _<string>_ , t [ number ; ] = ;
nt t [ _<number>_ ] ;
lse if ( c == _<number>_ ) printf ( _<string>_ , b ) < < < _<number>_ ) & = _<number>_ < ] < = < ] < = < ] < = < ] < = < ] < = < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] < ] <
= a + b - _<number>_ ;
1 = a2 ;
n = tn + <unk> + _<number>_ < <unk> ) ) = _<number>_ ;
2 = t2 ; }
or ( i = _<number>_ ; n <= - _<number>_ ; ) & i < sum ; r ++ ) &
or ( i = _<number>_ ; [ <= a2 > = i , number > _<number>_ , number , ] > i < N < N < A1 < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N < N
rintf ( _<string>_ , p , ) { if ( number a1 string ) = ] ; = , }
lse if ( n = _<number>_ ) { printf ( _<string>_ , a2 ) ; }
canf ( _<string>_ , & a1 , & n ) ;
nt a1 , a2 , n > a2 > b , + [ N ] ;
m = a2 ; } }
rintf ( _<string>_ , t [ n ( sum ( number number i } ( a1 = & a , int ) n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
[ i ] = t > t , sum ( number number sum2 sum }
rintf ( _<string>_ , sum ) ;
or ( int i = _<number>_ ; + = a1 a2 + _<number>_ < ) ; sum1 ++ a1 n n n number number t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t
lse { return <unk> ( n - _<number>_ , q , number < <unk> ) c ;
nt a1 , a2 , n q q q a1 a1 a2 , n b a2 a2 ;
canf ( _<string>_ , & a1 ; a2 < + + } ) ;
um2 = sum ; }
um = a2 ;
[ _<number>_ ] = a2 ;
rintf ( _<string>_ , t [ n ] ) ;
nt a1 , a2 , n , 2 < n , + + number = _<number>_ , c , & & & & & b b ;
= j + i ;
n = a2 ;
n = a1 + a2 - _<number>_ , a2 , j < _<number>_ ;
nt n1 , n2 , n ;
rintf ( _<string>_ , y ) ;
n = t1 ;
nt i , t1 , n = _<number>_ < n , number = _<number>_ ;
rintf ( _<string>_ , tm ) = number , b , a2 < j ( {
m = tn + a2 - _<number>_ ; + _<number>_ , b ; if ( a1 number b printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf ( _<string>_ ; { a = a number { printf (
rintf ( _<string>_ , tn ) = <unk> > <unk> n n n number ( n number number ( n ( n ( n ( n ( n { = c { = c { = c { = c { = c {
rintf ( _<string>_ , <unk> ) < <unk> , <unk> = _<number>_ ;
nt a , b , c ;
canf ( _<string>_ , & a1 > a2 = a2 = <unk> ;
rintf ( _<string>_ , t ) ;
rintf ( _<string>_ , <unk> ) ; } } }
rintf ( _<string>_ , a2 ) ; }
nt j , n , s < - - a2 < a ;
2 = tn ; }
printf ( _<string>_ , i i number n t1 t1 n n t ) a1 c & > a a a a a n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
hile ( a1 <= n - _<number>_ number ) ) i = _<number>_ ;
= t + i + _<number>_ = ) , ( b + b > _<number>_ ( ( a1 i - _<number>_ {
hile ( l <= n ) n2 = a1 ;
= tn ( n , < = _<number>_ < _<number>_ ) = <END_BUG> , , & if ( { { _<number>_ , _<number>_ , n , < a2 ( i < > i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i < i ( i
f ( n == _<number>_ )
f ( i == _<number>_ )
rintf ( _<string>_ , t [ > > < = ) < _<number>_ < < _<number>_ ;
rintf ( _<string>_ , t [ ) + _<number>_ int + _<number>_ number - _<number>_ , > _<number>_ = _<number>_ = _<number>_ =
rintf ( _<string>_ ) ;
= b + c + _<number>_ , a1 = ) ;
n = <unk> ; }
nt tn , <unk> , n = _<number>_ ;
nt a1 , a2 , n ;
f ( a1 = _<number>_ ) n - _<number>_ ] < _<number>_ ( a2 > _<number>_ , _<number>_ number ) < _<number>_ < _<number>_ number ) ) ) ) ) ) ) a2 = _<number>_ ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 ) a2 )
unk> = tn ;
n = <unk> ;
= a1 ;
rintf ( _<string>_ , A ) < B ;
= a2 ;
nt n , t , i > _<number>_ > , int number = _<number>_ ;
= t + _<number>_ ; int n ( a1 + _<number>_ ) ) ; a1 , number , number , number ; a1 , number , number , number ; a1 , number , number , number ; a1 , number , number , number ; a1 , number , number , number string a1 ; a1 , number , number string a1 string _<number>_ ; a1 , number string _<number>_ ; a1 , number string _<number>_ ; a1 , number string _<number>_ ; a1 , number string _<number>_ ; a1 , number string _<number>_ ; a1 , number
= l + _<number>_ ;
nt a1 , a2 , n , [ _<number>_ ] = else ;
= a ;
lse if ( n > _<number>_ ) {
nt a1 , a2 , n > a1 , number < _<number>_ > _<number>_ ) }
n = n + tn ;
lse if ( n > _<number>_ number ) printf ( _<string>_ ( a < _<number>_ number number number _<number>_ number number - _<number>_ number number number number _<number>_ number number _<number>_ number number - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
n = a1 ;
canf ( _<string>_ , & num > _<number>_ i i number a2 > _<number>_ & n & a1 < _<number>_ } > return _<number>_ } > N > N } ;
rintf ( _<string>_ , num [ i number - _<number>_ arr ( i n } , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( number <END_BUG> + _<number>_ a1 + _<number>_ a1 a1 a1 number ) number n a1 number n a1 number n a1 number n a1 number n a1 ) number n ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n a1 ) number n
= temp ; }
= x + y - _<number>_ ; } } } }
n = tn ; }
rintf ( _<string>_ , tn ) ;
2 = tn1 + tn2 - _<number>_ ;
nt i , n , a1 ;
rr [ i ] = arr [ ( ( ( ( ( ( ( n i i - _<number>_ a2 n - n i i i i i i i i i b b b b b b a2 a2 b b b b b b b a2 a2 b a2 > + _<number>_ a2 b a2 a2 b a2 b b b b b a2 b a2 a2 a2 a2 a2 > + _<number>_ a2 b a2 > + _<number>_ a2 a2 a2 a2 number a2 > + _<number>_ a2 a2 a2 number b b b a2 b a2
nt arr [ _<number>_ ] = if ( ) string ( a1 < N a2 a2 a2 a2 a2 a2 > A1 a2 a2 a2 a2 > _<number>_ a2 )
rintf ( _<string>_ , T ( , = _<number>_ = _<number>_ ;
rintf ( _<string>_ , T ( n = _<number>_ = _<number>_ = _<number>_ ;
nt a1 , a2 , n , tn , tm , tm , <unk> , <unk> , <unk> ;
or ( m = _<number>_ ; m <= n ; m ++ ) {
nt a1 , a2 , i , ;
n = a1 + a2 - _<number>_ > & number > _<number>_ > & string > _<number>_ , & 1 ) ) ) <
= a2 ;
= j + - _<number>_ , [ _<number>_ ] ;
2 = tn ; }
= s ;
f ( ( a = b = <START_BUG> , & = int < , & q < q < t > a2 > t , if ; , , , , , , , , , , , , , , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( & string , a1 , a1 , & a1 > ) > ) > ) > ) > ) > ) > ) > & 2 > ) > ) > ) > & 2 > ) >
= l + _<number>_ ; }
n1 = tn2 ;
n = tn1 ;
= a1 ; }
or ( i = _<number>_ ; i <= a1 ; < n 1 < 2 1 < n ; ) int tm , ;
[ i ] = t [ , + _<number>_ ] & t [ , + _<number>_ ] + _<number>_ < printf ( _<string>_ tm & & = = & & = = & = = & = = & = = & = = & = = & = = j i } _<number>_ i i i i } _<number>_ i i } - _<number>_ , j } }
= n - n2 ;
= term ; }
nt a1 , a2 , n , - ) * & int tm ;
or ( i ; i <= n ( = _<number>_ t ] + ] + ] + ] + ] } - , ) = _<number>_ ; n ++ if ( n <= printf ( _<string>_ a1 a1 ) ;
rintf ( _<string>_ , tn ) ;
= n - _<number>_ ;
rintf ( _<string>_ , t [ n ) ) < ;
[ i ] = t [ a2 if i - _<number>_ p - q ] num1 _<number>_ > & _<number>_ > + a2 ( ) tm tm - n tm _<number>_ tm ) tm tm - _<number>_ tm tm - & & = } _<number>_ ) ) ) ) )
or ( j = _<number>_ ; j <= i && i > _<number>_ ; j ++ ) {
or ( i = _<number>_ ; i <= ( n - _<number>_ ) && j > _<number>_ ; i ++ ) {
n = tm ; }
rintf ( _<string>_ , term ) ;
= a2 + a1 - _<number>_ , n ;
or ( n = _<number>_ ; _<number>_ <= a1 , a1 , a1 ++ n n n n n ( ) ; ) !
u = tv ; }
or ( i = _<number>_ ; i <= n - _<number>_ ; i ++ )
= y ;
f ( n == a )
nt c , b , c < number < a2 ;
canf ( _<string>_ , & a1 = number < + ) ;
nt a1 , a2 , n < + _<number>_ , } = _<number>_ , n , ;
rintf ( _<string>_ , s ) < a2 ;
= a2 ;
rintf ( _<string>_ , t ) ;
= x + x - _<number>_ > printf ( _<string>_ string else ) > printf ( _<string>_ string else ( x n n n n ( x n n ( x n n ( x n n ( x n n ( x n n n ( x n n ( x n n number _<number>_ ( printf printf printf ( _<string>_ string else ( printf printf ( _<string>_ string else ( printf printf ( _<string>_ string else ( printf printf ( _<string>_ string else ( printf ( _<string>_ string printf ( _<string>_ string else ( printf ( _<string>_
n = <unk> ;
unk> = a2 ;
= t + value - _<number>_ < value < _<number>_ , b , a2 = a1 + n & - _<number>_ > n number ) > , - _<number>_ > ) > , n - _<number>_ < ) < < < string - n - _<number>_ < ) < < string < string - n - _<number>_ < ) < < string - _<number>_ < ) < string - _<number>_ < ) < string - _<number>_ < ) < string - _<number>_ < < _<number>_ < ) < string - _<number>_ < ) < string - _<number>_ < <
or ( i = _<number>_ ; , number ) & n printf ( , > a ) ; i 1 { _<number>_ 2 = number a2 a2 + _<number>_ ; ) & {
canf ( _<string>_ , & a , _<number>_ a1 a1 , _<number>_ a1 a1 c ) {
= x + y - _<number>_ ; } }
= x + y - _<number>_ ; } }
rintf ( _<string>_ , t [ string ( int = number ) n a1 a1 } < }
= a1 + a2 + _<number>_ ;
f ( n == _<number>_ ) printf ( _<string>_ < n ) ;
nt n , i , num number number )
rintf ( _<string>_ , num [ + _<number>_ ( { ) = _<number>_ ( i sum2 1 < _<number>_ y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y , number = _<number>_ , number = _<number>_ y , number = _<number>_ , a2 = _<number>_ , number = _<number>_ , a2 = _<number>_ , a2 = _<number>_ , number = _<number>_ ,
1 = sum ; }
1 = sum ; }
nt i = i + _<number>_ ( ) ( ) ( ) ) )
lse tn = t1 ;
nt a1 , a2 , tn , { }
or ( int i = _<number>_ ; } <= sum ; int if ( - if ( n <= number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ; scanf ( _<string>_ < n = number ++ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
rintf ( _<string>_ , a2 ) < < < + _<number>_ < number ;
or ( i = _<number>_ ; , <= ( ( a1 <= n ) ; = ++ n n n n n > <unk> > <unk> > <unk> int ( x & > number > N > S > N ++ > <unk> > <unk> > N ) p p p p p < <unk> < <unk> int <unk> < <unk> < <unk> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p
= s ;
2 = a1 ;
or ( i = a2 ; & <= int int = = _<number>_ , & r number , & ( ) , cal , cal , cal , cal , cal , cal , = a2 , cal int cal n n n n n n n n n n n n n number number number number number number number number , n [ n ++ [ ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ - _<number>_ [ n ++ ] [ n ++ ] [ n ++ [ n ++ ] [ n
f ( n == _<number>_ ) } printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_ , t1 ) ; { { { printf ( _<string>_
or ( i = _<number>_ ; & , n ( n else ; & & & ; & & & ; & & & ; & & n else ; & & n else ; & & & n else ( n else ; & & & & & & & & & & & ; & & & n > _<number>_ ; & & & ; & & & ; & & n ; & & & & & & & ; & & & ; & & n else ( n else ; & & & ; &
n = tn1 + tn2 - _<number>_ int return _<number>_ int number < temp int * n > _<number>_ ( p ( ] t string , ] t _<number>_ t t t string , ] t = int string t string t string t ) ;
1 = temp ; }
nt s = ser ( x } _<number>_ < ser , ( if ( if ( if ( if ( if ( temp * temp ; string < , * , * temp ; string = r , , return r , ( temp * temp ; string = r , , temp > = = = = = = = = & , string string _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < n < _<number>_ < _<number>_ < _<number>_ < n < _<number>_ < _<number>_ < _<number>_ < n <
rintf ( _<string>_ , t [ i > i > {
[ i ] = t = n = n a1 = a1 < c < c < c < c < a1 number q number + _<number>_ ;
= term ; }
erm = y ;
canf ( _<string>_ , & a1 , & int , n ] t ( t t t t t t t t n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n ) > number ) > > > > _<number>_ , < _<number>_ , < return _<number>_ , < _<number>_ int < _<number>_ int < _<number>_ int < else scanf int < else , < < else , < < else , < return _<number>_ int < else
2 = t1 ; }
loat a2 = a1 ;
= i - _<number>_ ; scanf ( _<string>_ < ) < { n { < n { n > n { i < i a1 - _<number>_ & sum < _<number>_ > <unk> & <unk> < <unk> a1 > <unk> > <unk> int i ( , else n n n n n n n n n n n n n n ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ]
rintf ( _<string>_ , p * else & return a1 + _<number>_ string ( ] ( ] ( - _<number>_ ( _<number>_ a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 string _<number>_ a2 a2 a2 a2 a2 string <END_BUG> a2 a2 a2 a2 string <END_BUG> a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 { ;
or ( i = _<number>_ ; num <= , , number ; i ++ ) ) number ) ) number ) ) number number number number number number number number number number number number number number number number number number ( number ++ number number number number ( ( - _<number>_ ( - _<number>_ a2 - a1 a2 a2 a2 a2 ) q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q
umb = numb ;
canf ( _<string>_ , & a1 { > & & & ;
[ i ] = t ( a1 ( number = _<number>_ ) _<number>_ ) _<number>_ ) printf ( _<string>_ < _<number>_ ) & i > n ) > i > i > _<number>_ > _<number>_ > _<number>_ ) > a2 > n > _<number>_ > _<number>_ > a2 > , }
nt s = _<number>_ ;
nt s = ser ( x string _<number>_ > ) string ) number [ n string _<number>_ ] number n number number ( & & < < a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2
nt c = a2 * a2 - _<number>_ ;
nt n , a2 ;
canf ( _<string>_ , & a1 , & a2 , ) < + if sum int a1 number > if ( a1 >= n = N ) ) ;
nt i , j , n > & + _<number>_ > i ( ) = _<number>_ = _<number>_ ) ) ;
or ( i = _<number>_ ; ( a <= [ & & n if ( sum if ( sum if ( sum a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 c c c c c c a1 ++ q q q q q q q > - _<number>_ > a1 c > _<number>_ > - a1 > - _<number>_ > - a1 > - _<number>_ > - a1 > - _<number>_ > - a1 > - _<number>_ > - a1 > _<number>_ >
um = num ; }
or ( i = _<number>_ ; i <= ( n - _<number>_ ) > n + _<number>_ > [ t + _<number>_ > [ t + _<number>_ > ] > string > _<number>_ ) &
= a2 ;
nt a1 , a2 , n ;
rintf ( _<string>_ , i ) , & number , i , = _<number>_ , n a1 , i a2 < i a2 < i number < i number < i number < i number < a2 ;
rintf ( _<string>_ , tn ) , a2 , a1 < a1 < a1 < a1 < a1 ; i ++ ; i ++ ; i ++ ; i ++ ; i ++ ; i ++ > t > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ] > ]
f ( t1 == _<number>_ ) = + + _<number>_ ; }
= x ; }
or ( i = _<number>_ ; n <= a2 n n n , , number ( number ++ number number ) ) {
2 = a2 + f ; - if ( ) < ) , ( ) , + & number = number + }
2 = a2 + f ;
++ ; }
rintf ( _<string>_ , t [ t ] ) ; }
or ( i > _<number>_ ; i < ( n - _<number>_ ) + i ; i = t int _<number>_ ) +
nt <unk> = <unk> ( _<number>_ , number ) = _<number>_ = _<number>_ < a2 < a2 < i < i < _<number>_ ) <
rintf ( _<string>_ , <unk> ) ; +
lse return <unk> ( n - _<number>_ < T ; int a1 ; else return = n i & + < ; t ( ; t = _<number>_ < a1 < = & + _<number>_ < < _<number>_ > = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ ; printf ( _<string>_ number ; printf ( _<string>_ number _<number>_ ; printf ( _<string>_ number _<number>_ ; printf ( _<string>_ number _<number>_ ; printf ( _<string>_ number _<number>_ ; printf ( _<string>_ number _<number>_ ; printf ( _<string>_ number _<number>_
lse return <unk> ( n - _<number>_ ;
nt a1 , n , a2 = _<number>_ = _<number>_ < string < string < string < string ;
[ _<number>_ ] = ( a1 + n - _<number>_ ) ;
[ t + _<number>_ ] = t [ i ] + t [ i - _<number>_ ] - _<number>_ ; a2 [ t n - _<number>_ ] = i ; a2 [ t ] = i n - _<number>_ ; a2 [ t n - _<number>_ ] = i ; a2 [ t ] = i n - _<number>_ ; a2 [ t n - _<number>_ ] = i ; a2 [ t n - _<number>_ ] = i ; a2 [ t ] = i n - _<number>_ ; a2 [ t n - _<number>_ ] = i
f ( n == _<number>_ ) printf ( _<string>_ , t3 ) ;
rintf ( _<string>_ , <unk> ) ;
2 = t + n ; & a2 = t - , ; & , a2 = _<number>_ = _<number>_ = a2 = _<number>_ = _<number>_ < <unk> < <unk> ) < <unk> < <unk> < <unk> < S < N < A1 ) < <unk> < <unk> < <unk> < S < N < <unk> ;
nt a1 , a2 , n ;
erm = a2 - a1 - _<number>_ , number < _<number>_ < { ) + _<number>_ ;
nt a1 , a2 , n , }
or ( i = _<number>_ ; { { { number <= a2 , tm < , , i < n < number < number ; a2 ++ ( a2 ++ ( a2 ++ ( ( ( number ++ ) ) ) ) ) > {
n = tn ; } }
n = a2 ;
canf ( _<string>_ , & num1 term + } ) , {
or ( i ; i <= n { n <= { a2 ) - _<number>_ > a1 i {
rintf ( _<string>_ , tn ) ;
nt a , b , c , string > & c < c < j ;
nt a1 , a2 , n , number < _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( }
nt ser ( int x ) ;
es = a1 ; } }
or ( i = _<number>_ ; i <= n , ] < = _<number>_ < [ [ [ [ [ [ [ [ number ++ ] < { i ++ )
rintf ( _<string>_ , a1 + a2 - _<number>_ > n ; if ) )
1 = a2 ;
rintf ( _<string>_ , curr ) ;
rintf ( _<string>_ , next ) ;
canf ( _<string>_ , & n , + i ( & & & & int < a2 > {
= ( n - _<number>_ ) { { { else a = > = string ;
f ( n == _<number>_ ) printf ( _<string>_ ( a2 ) < ( i = _<number>_ , int int int , [ _<number>_ , int int , > _<number>_ + _<number>_ + _<number>_ j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j == _<number>_ j - i j j j j j == _<number>_ j - i j j j j == _<number>_ j j j ==
rintf ( _<string>_ , t3 ) ; else if ( }
m = tn + a2 - _<number>_ < <unk> < <unk> > <unk> > <unk> i = _<number>_ > <unk> ) a1 = string a1 + _<number>_ < ( } - _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + { <unk> ;
es = ( a1 + a2 = _<number>_ ;
nt res = _<number>_ , res ( ) ;
rintf ( _<string>_ , t ) ; a1 = number { + _<number>_ < b < int string ) a = n & b < [ ] < }
nt a2 , a2 , n , i , t > _<number>_ > & i ;
= s ; }
1 = a2 ; }
rintf ( _<string>_ , a3 ) , string , a2 , a2 , a2 > = _<number>_ ;
canf ( _<string>_ , d ) ;
hile ( a2 [ j ] == a1 [ i + _<number>_ ] ) { flag = flag + _<number>_ ; i ++ ; } } }
= ( a1 [ l + h ] == a2 [ h ] ) j j j j ; } } }
f ( a2 [ p ] == a1 [ q = a string [ for ( k + [ b + > + _<number>_ + _<number>_ + [ [ [ a1 j j j j j j j j ) * a1 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++ ; n2 ++
hile ( i < a2 ) {
f ( a [ i ] == b [ j ] ) {
or ( j = _<number>_ ; j < k ; j ++ ) {
lag = flag + _<number>_ ; } string = n = n2 ( if i - _<number>_ ) ; for ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if
or ( l = _<number>_ ; l ; }
canf ( _<string>_ , & y [ ] i i ) < < < ;
or ( j = _<number>_ ; j ; string ++ > <unk> ; m ++ > <unk> > <unk> < <unk> ; for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for _<number>_ ; for ( for ( for i ) < _<number>_ ; for ( for ( for i )
or ( j = _<number>_ ; j <= a1 i ) string = number } _<number>_ ( number < _<number>_ , number [ number a1 a1 a1 - _<number>_ [ {
f ( in1 [ i ] == len1 ] [ [ j l = _<number>_ [ i n2 , + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ [ + _<number>_ int {
or ( j = _<number>_ ; j < n2 ; j ++ )
or ( i = _<number>_ ; i < n2 ; i ++ ) {
nt a2 [ _<number>_ ] ;
f ( a2 [ _<number>_ ] == { <START_BUG> j < <unk> number [ ) ] ;
= j + _<number>_ / j ) )
f ( a2 [ k ] == b ] )
or ( n = _<number>_ ; n ; len1 = ] < ] ; = ++ number ) } {
canf ( _<string>_ , & b [ q } }
= i ; }
f ( in2 [ n + n ] == k , string , & d ( n ( a2 , { p ++ = n2 = _<number>_ = _<number>_ = _<number>_ = < if ) { string ] == n2 ] < n2 ] < string = _<number>_ < if )
or ( j = _<number>_ ; j ; string ++ )
f ( n1 [ i ] == n2 [ j ] ) {
or ( t = _<number>_ ; t < n ; t = t + _<number>_ + for ( n1 < _<number>_ ) int j > j ] ) int j > j ] ) int j > , j ) int j > , j ) int j > , j ) int j > , j < _<number>_ ) int j > , j ) int j > , j ) int j < , j < _<number>_ ) int j > , j ) int j > , j ) int j < , j < _<number>_ )
or ( a = _<number>_ ; a < i ; } ++ = _<number>_ ) &
or ( t = _<number>_ ; t < b - i ; t ++ ) {
lse if ( n2 [ j + t ] != n2 [ i + t ] )
or ( i = _<number>_ ; i < for ( number [ ( ( string - int ( ( & ( ] ) i < string ) ) ) ) ; > n1 ; > > _<number>_ ) n ++ ; n ++ ) n - {
= i ; break ; } scanf ( _<string>_ } int { j = ( d = _<number>_ ( n1 i number ) i ) * string = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ < & break < & break < < & break < < & break < int break < int break < a2 number break < & break <
nt num1 , num2 , ar1 [ _<number>_ ] , ar2 [ _<number>_ ] , h , i ;
= _<number>_ ; } } } ] = _<number>_ ; [ string = _<number>_ , & n1 } [ n2 printf ( _<number>_ printf ( _<number>_ ) printf ( _<number>_ ) printf ( _<number>_ ) printf ( _<number>_ ) printf ( _<number>_ ) < _<number>_ ) < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ <
hile ( j < n2 ) {
canf ( _<string>_ , & b [ number ] > = > int ) < ;
f ( a [ i ] == b string j ( number number ) ( in2 }
nt a [ n1 ] , b string n2 < n1 ;
canf ( _<string>_ , & n1 [ i ] ) ; }
canf ( _<string>_ , & n2 [ i ] ) ; }
f ( str2 [ j ] == ar2 j j [ } b n2 = _<number>_ = i - _<number>_ = i - _<number>_ = i < number & a ] == if ( scanf n2 scanf scanf _<string>_ + _<number>_ , }
f ( str2 [ j ] == str1 , { { { _<number>_ number > string , ] > for = for ( if = if = if ( scanf [ string ] ( string [ string ] ( string [ string ] ( string [ string ] ( string [ string ] ( string [ string ] ( string [ string ] ) ) ) ) ) ) ) number
f ( b [ j ] == b ] > b > b i < ] < for ( if ( if ( if ( if ( if i j j , n1 == n1 j > } ) = _<number>_ > A j > N > _<number>_ > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j > <unk> > <unk> > <unk> j
nt ar2 [ n2 ] ;
f ( ar1 [ i ] == num2 number ] )
canf ( _<string>_ , & arr2 [ if ( & & ] = if ( printf ( _<string>_ , b ] ( & ( & ( & ( n1 ( n1 ( & ( & ( & ( & ( string ( ( ( & ( string > string ( & ( & ( ( string > _<number>_ ( & ( & ( ( int ( n2 > string ( & ( ( string - string ( & ( & ( ( string - & > string ( & ( ( int ( n2 ( ( ( int ( n2
nt a [ _<number>_ ] , b [ _<number>_ j = for ( ( _<number>_ = _<number>_ = _<number>_ > _<number>_ > string > <unk> > <unk> > <unk> ) + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) < _<number>_ < _<number>_ < _<number>_ < scanf ( )
or ( i = _<number>_ ; i < n2 - _<number>_ ; i ++ , int for ( ( ( ( ( return a1 , return a1 , ( return <unk> n n - _<number>_ , ( return ++ , ( return <unk> , <unk> ++ , ( A1 ++ , ( A1 ++ , <unk> , <unk> ++ , ( A1 ++ , ( A1 > <unk> , ( <unk> = _<number>_ , ( <unk> n ++ , ( return a1 , ( return <unk> , <unk> ++ , ( return _<number>_ , ( ( return <unk> , <unk>
or ( i = _<number>_ ; i < _<number>_ ; i ++ ) , for ( > _<number>_ < > _<number>_ < _<number>_ < > _<number>_ < > _<number>_ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2
nt i , count = _<number>_ , posi [ _<number>_ ] ;
nt a1 [ _<number>_ ] , a2 [ _<number>_ ] ;
nt n2 ;
rintf ( _<string>_ , i , & b [ i ] ) ;
rintf ( _<string>_ , arr2 [ j , n1 ( [ j = _<number>_ = _<number>_ = _<number>_ ( a1 + j ( a1 + j ( a1 + j = _<number>_ ( n - _<number>_ ( n - _<number>_ ( n - n ( n - _<number>_ ( n - n ( n - _<number>_ ( n - n ( n - _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
rintf ( _<string>_ , arr1 [ i ] > ] ( ( ( & ( ( [ { - _<number>_ ( if ; ( if ; & [ for i = _<number>_ i i = _<number>_ = _<number>_ = - _<number>_ = flag + int int = flag number { _<number>_ a number , , , , a number a = , , j ( ( for , string ( string ( , ( for , , + _<number>_ i i i i i i i i i i i i i i i i i i i i i
nt a2 [ n2 ] ;
f ( a2 [ _<number>_ ] == a1 + ;
f ( a [ i ] != } {
canf ( _<string>_ , & b [ { i i , { _<number>_ string n2 + _<number>_ j j j + _<number>_ j + i + _<number>_ + }
reak ; }
or ( j = i ; j ; number ++ ( [ [ number string + _<number>_ string string string _<number>_ string string i + , , , [ [ number j j j j ++ = - _<number>_ j = _<number>_ = n2 i = n2 i i = _<number>_ = n2 i i i = _<number>_ = n2 i i i = _<number>_ = _<number>_ = n2 i i i = _<number>_ = _<number>_ = n2 i i i = _<number>_ = _<number>_ = n2 - _<number>_ = _<number>_ = n2 i i i = _<number>_ = _<number>_
or ( i = _<number>_ ; i < num2 < } ; ; i ++ ( ] ++ ( ( scanf j ++ ( > <unk> ( > <unk> ( i ) ) ) ) ++ ) ) [ = number _<number>_ number number - _<number>_ number < _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_ < = _<number>_
canf ( _<string>_ , & ar2 [ ( ( for i [ > , ( ( { ( ( for ( ( ( ( ( ( ( ( ; ; i ++ ) _<string>_ a1 ) ) ) ) ) ) ) ) ) ) ) ) ; string [ i ] ; string ++ ) n2 [ i ] ; string
canf ( _<string>_ , & n2 ) ;
f ( a [ i ] = for ) a ] < for ) flag = _<number>_ < i < for ( int ] number int n1 ] ( } ( } _<number>_ [ _<number>_ j ( = _<number>_ ( } ( } _<number>_ [ = - _<number>_ j ( } ( } - _<number>_ ( } number - _<number>_ ( } number - _<number>_ ( } ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ (
canf ( _<string>_ , & a1 [ } k [ { _<number>_ j n1 ] i < <unk> i i & <unk> i i i i i i , }
rintf ( _<string>_ , p ) ;
f ( a [ i + i number number count , b [ ; j j j j j = } = _<number>_ = _<number>_ = ;
nt i , j ;
f ( a [ i - p ] == b , a , r ) { if ( a , b , i ) == b , a , r ;
f ( a [ i ] == b [ _<number>_ string string string string i string i string i string i string i string i i string n2 < _<number>_ i i i i i i i i i i i i i i i i string {
f ( arr1 [ _<number>_ ] == arr1 number n2 > a > a > & a [ _<number>_ ] )
f ( arr2 [ _<number>_ ] == arr1 ] = _<number>_ = _<number>_ )
nt i , k = _<number>_ , j , & string = <unk> = _<number>_ , b number <unk> < _<number>_ < <unk> < <unk> < <unk> i i - _<number>_ i i i number int <unk> number ;
f ( k == n2 ) printf ( _<string>_ ) ;
or ( j = p ; j < n1 < } < }
rintf ( _<string>_ , b [ i ] number n1 + n1 j = _<number>_ = _<number>_ = { _<number>_ count i + if ( int { ] + if ( int { for ( number > int break ;
or ( i = _<number>_ ; i < n2 < ] < ] < ] < ] < number < a1 < <unk> ; int int int int int int int int ) get < _<number>_ < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> ; ( count ++
f ( a1 [ i ] != a2 [ target ) )
f ( a [ i ] == target ) if , p ++ > string [ )
rintf ( _<string>_ , indices [ i ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) > a > ) > p > p > ) > ) > > > > _<number>_ > ) - ) > ) - ) - ) - ) - ) - ) - ) - ) - ) - ) , ] > ] > i > flag > flag {
f ( a1 [ _<number>_ ] == a1 { , { }
f ( a [ i ] == b = number number - _<number>_ [ number [ _<number>_ [ number [ _<number>_ [ + number number number ] ] ] ] > b [ _<number>_ [ number [ number [ _<number>_ ] , a1 , a1 ] < { _<number>_ for ( n1 ] == { n1 ] == n1 ] ) }
or ( k = _<number>_ , k = , , , ; ] ; ] ++ )
f ( count == n2 ) {
= _<number>_ ; } } } }
canf ( _<string>_ , & z [ j [ _<number>_ , , , { scanf ( _<string>_ number m i = } _<number>_ number < m = _<number>_ = _<number>_ = _<number>_ = < j ) ;
f ( z [ i ] == s [ scanf ( _<string>_ = & scanf ( _<string>_ i scanf ( _<string>_ i < n = scanf > <unk> i - _<number>_ = for > <unk> i - _<number>_ = count ) + _<number>_ ( int [ number ] == return ( n = n = c ( n = c = c = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a = a [ + + +
rintf ( _<string>_ , array2 [ > for i return _<number>_ [ i [ _<number>_ { { { ) < < - _<number>_ ] ;
lse { }
or ( l = _<number>_ ; l <= > > > > ( & & ) ; ] ++ ) &
f ( b [ j ] == a ] i i [ > a1 [ > a1 [ > a1 [ > a + _<number>_ [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count [ count + n2 + _<number>_ + > + _<number>_ + > { _<number>_ + _<number>_ + > { _<number>_ + _<number>_ + > { _<number>_ + _<number>_ + > { _<number>_ + _<number>_ + ) - _<number>_ +
or ( j = _<number>_ ; j <= j m m m ++ ( a1 ++ i i i i i i ) j ++ ) j ++ ) j ++ ) j ++ ; target ++ ; {
or ( j = i ; j < a1 < j < j ; int n2 ] = j ++ = - i > n1 < - _<number>_ ) }
nt i , j , num1 , num2 = _<number>_ number <START_BUG> , a2 [ _<number>_ , a1 number B number _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
nt j = _<number>_ ;
canf ( _<string>_ , & n2 [ n [ [ n2 , , , + ( if ( ( ( ] int ( int int int int int int int int int int int , , n2 , n2 , a , a , a , a , get , a , get + _<number>_ , a , get + _<number>_ , ] ( ( n2 ( n2 ( , ( n2 ( , ( , ( , ( , number n2 ( , number number ( , ( , ( , ( { }
et ( b , n2 ) ;
[ n2 ] = get ( , < } ) ;
[ i ] ;
f ( n2 [ j ] == n2 [ i ] ) {
= r + _<number>_ ; } }
f ( q - p != n2 b b b b b number _<number>_ > n2 b b number _<number>_ i i i ) j < , for ( n2 b b number _<number>_ i i i i - & & n2 i != , for > _<number>_ i i - _<number>_ i i i - _<number>_ i i - & & & & & & & i b number & & number i != , b number _<number>_ i i < , for > n2 i i - & & & & & & & number i != ,
f ( b [ _<number>_ ] == & l [ i , & n2 ( if > if > if > if = b [ _<number>_ , }
canf ( _<string>_ , & a2 [ for _<number>_ ] ) < < < < _<number>_ < if ( scanf ( _<string>_ b n1 i = n2 ] = n2 = n2 = n2 = n2 = n2 = n2 = n2 = n2 = n2 = n2 - n2 = _<number>_ = _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( a2 [ count ] == in1 { b [ = ] ) [ number ] = _<number>_ < number < number ;
canf ( _<string>_ , & a [ > n2 n2 ) < ; }
canf ( _<string>_ , & b [ i number ) ; }
++ ; } } }
or ( j = _<number>_ , k = , = + _<number>_ ; [ < c = N , }
canf ( _<string>_ , & array1 [ { i number ) < < ; scanf ( _<string>_ + n2 = string i ( k ( c = + _<number>_ ( b > ] ( b ( b ( b ( b ( b ( b ( b ( b ( b ( b ( , = + + = ++ = _<number>_ = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
canf ( _<string>_ , & array2 [ n ] ) ;
f ( arr1 [ k ] != if > if > if < return ] > n2 > n2 > n2 > j ( j ( j ! _<number>_ ( j ( j ( j ! > ( j [ > t ( string ! , t ( string ! , [ > [ > [ > [ > [ > [ > [ > [ > t t t t t t t t t t t ( string number if = string number if = string number if = string number if = string number if = string
f ( k == ( n1 - _<number>_ i ) )
f ( j == n2 - _<number>_ ) verify ( _<string>_ = = _<number>_ ( n1 == , t t i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
lse if ( count != n2 )
lse if ( count != n2 )
ouble in1 [ _<number>_ ] , in2 string _<number>_ & a + , i i ) < _<number>_ ;
f ( k == _<number>_ ) {
nt i , j , arr [ _<number>_ n = _<number>_ ;
or ( j = _<number>_ ; j ; j ++ number > , ) t ; - q ; }
or ( i = _<number>_ ; i ; ( ) < { ) , ) i = _<number>_ < { _<number>_
or ( i = _<number>_ ; i < n1 ; i ++ )
canf ( _<string>_ , & arr [ > > > n1 ) < < < ;
f ( a [ i ] == b [ _<number>_ k )
lse printf ( _<string>_ ) ;
f ( a1 [ j ] == & { = j ) n ; break < < <unk> ; { else for = { l2 j , j ) < i < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> ( ( i & string ) == }
canf ( _<string>_ , & a2 [ + i number i i ) ;
f ( b [ i ] = a j j j j > if ( b [ i ] ) {
nt a [ n1 ] , b [ int , ;
f ( p == _<number>_ ) ? printf ( _<string>_ ( int int ( = _<number>_ = _<number>_ = _<number>_ = : i ) ) ;
lse if ( n2 [ j ] + , == printf ( _<string>_ string t ) + n2 == n2 [ ( ] = _<number>_ = <unk> [ i ] ) )
or ( int i = _<number>_ ; + < for ( n1 = _<number>_ ; = < s ; = ++ > & & & & & , , , ) n2 ++ ) b ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ ) n2 ++ )
nt n1 , n2 , i , for ( input + _<number>_ ; n2 < + [ int n2 ) ; if ( { <unk> = _<number>_ = _<number>_ = _<number>_ ;
nt n , m , i , break = _<number>_ ;
nt n1 , n2 , a1 [ _<number>_ string + if ( _<number>_ string n2 number number number _<number>_ ;
or ( j = i ; j <= } - int if ( = = _<number>_ > k > n2 > for ( { n2 = i < _<number>_ number , { n2 ++ number > < _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > i + t < n1 + t < _<number>_ > n1 < n1 + t < _<number>_ > i + t < n1 + t < _<number>_ > _<number>_ > n1 > _<number>_
or ( i ; i <= n1 - _<number>_ ; > <unk> ) ] ++ i i i i i i i i i i i i ) +
= c + _<number>_ ;
f ( count == n2 )
nt a1 [ n1 ] ;
nt m , n , a [ _<number>_ n2 number n1 int n1 number _<number>_ ] + ) i + _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ i i + _<number>_ ;
f ( k == n - _<number>_ ) {
canf ( _<string>_ , & a1 [ i int n2 [ ( ( <END_BUG> j n2 ) n2 ) n2 n2 ) < for ( = _<number>_ < i < count ) <
lse { for ( count = _<number>_ ; & int string [ f ] ) int ] ) int ] ) n2 = j ( ) ( + _<number>_ = _<number>_ ] [ i n2 = j printf ( _<string>_ } ] = ] = ] = ] = ] = ] = ] printf ( _<string>_ } ] } ; [ n2 , i ++ { ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ]
or ( i = _<number>_ ; i ; number = string = string = string = string = _<number>_ < & [ n2 ] = A1 [ , , t = n2 = b - _<number>_ [ { int ] = int ] ; ] = int ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i ( & i i (
or ( int j = _<number>_ ; j ; { ; [ [ [ ] t ++ t i i i i i i i i i = j ++ ( int n2 i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( flag == _<number>_ ) {
lag = _<number>_ ;
ount ++ ; c = i ;
f ( count2 == n1 ) {
or ( i = _<number>_ ; i <= scanf ( _<string>_ number for ( + _<number>_ number number - _<number>_ number + _<number>_ + - _<number>_ + else + _<number>_ , j , }
canf ( _<string>_ , & n2 ) ;
nt n1 , n2 , a [ & = , ) [ { flag , <START_BUG> { j number _<number>_ number ) { a2 int s = B [ int [ [ [ [ ] j j printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ = else { { { { { { { { { if ( j = a = for > _<number>_ i i i = printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ = printf ( _<string>_ =
or ( i = _<number>_ ; i ; = ++ , printf ( _<string>_ ( i { - _<number>_ ( c ++ number number number number number i i i i i i , }
[ j + t ] != _<number>_ ; } } } }
or ( i = _<number>_ ; i < b ; i ++ )
= _<number>_ ; } }
nt a2 [ n2 ] ;
or ( k = _<number>_ ; k ; string ++ i > }
rintf ( _<string>_ , c [ k ] , a ) ( n2 > { ) < }
+= _<number>_ ; }
f ( f == n1 )
f ( a [ i ] == scanf ( _<string>_ + }
ount = count + _<number>_ ; } { & int int & ] i = + _<number>_ < m1 ( - _<number>_ ( - _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ) ) ) ) ) ) ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k = string + _<number>_ ; k =
or ( int l = _<number>_ ; l ; b ++ ( b ++ ) ] ) ] ; ] ++ ) ] < n2 < n2 < n2 < n2 < n2 < n2 < n2 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 < n1 <
f ( a [ j ] == for < scanf ( A int for ( number ( [ p count count count count > _<number>_ > { > _<number>_ > _<number>_ > { _<number>_ > _<number>_ > & _<number>_ > _<number>_ > _<number>_ > _<number>_ > [ = _<number>_ > [ = int & n2 > count m > _<number>_ > [ = _<number>_ { ) - _<number>_ {
nt a , b , i , j , t , return return <END_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < <START_BUG> < for ( p }
or ( j = _<number>_ ; j ( ; , ++ ( number ++ ( ( j ++ ( > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> number > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> ( ] ( ] - <unk> ( ] ( ] ( ] - { n2 ] ( ] ( ] ( ] ( ] ( ] ( ] ( ]
or ( i = _<number>_ ; i < number ; string ++ )
f ( m1 == m1 - m2 ) {
canf ( _<string>_ , & a2 [ ( i ] ) = ; [ ( ( }
canf ( _<string>_ , & n2 ) ;
f ( count < n2 ) {
f ( a2 [ j ] != & a1 [ i + { number + } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ } [ a , , , , + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_ , + + _<number>_
canf ( _<string>_ , & a1 [ i ] ) ;
f ( b [ _<number>_ ] == a1 + ;
f ( flag == _<number>_ )
or ( int j = _<number>_ ; i < } ; { number ++ ) a [ n {
ount = count + _<number>_ ; }
f ( count == n2 ) { break ; { [ n2 } }
f ( count == n2 ) { <START_BUG> + _<number>_ ; ] = if ( if ( if ( k == ] ( string ( scanf - _<number>_ ( k ( scanf _<number>_ ( l ( for b string = _<number>_ = - _<number>_ = - ) - ) number = _<number>_ = _<number>_ = * ) number number ) number = int n2 = _<number>_ = _<number>_ = [ _<number>_ string number - _<number>_ string number - _<number>_ string string - _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
nt a [ _<number>_ ] , b = count = _<number>_ + > i + _<number>_ + _<number>_ ;
f ( p [ i ] = p int ] + ( } _<number>_ = _<number>_ <END_BUG> - ) j < ) j < ) j < ) j < ) j number
f ( p [ i ] == a2 int n1 int = _<number>_ number - = _<number>_ break i i i i i i i i i i ) i = _<number>_ ;
canf ( _<string>_ , & b [ , , k > k ) ; i ++ ) , l + _<number>_ ; i ++ ) , l + _<number>_ ; i ++ ) , l ;
f ( a2 [ j ] == m [ ( > [ < , > }
nt i , n , count ;
or ( i = _<number>_ ; ] [ l ] i = n1 [ number i i i i i i i i i i ( , ++ number number number number [ n2 ) number ] ;
or ( j = _<number>_ ; n2 < n2 ; ] ++ = <unk> ++ = <unk> ++ = <unk> ++ = <unk> ++ = <unk> ++ ( <unk> ) ;
or ( m = i ; m < j ; & ++ ( n1 ++ ( ( for for ( n1 ( a ++ ( n2 ++ = _<number>_ ( l ++ ( ( scanf - <unk> ++ ( , ) ( a1 ++ ( ( n1 = }
f ( count == m )
rintf ( _<string>_ , <unk> ( for number _<number>_ ( _<number>_ i i i i i i i i i i i i i i = _<number>_ = _<number>_ ) = _<number>_ i i i i i i i + _<number>_ + _<number>_ + _<number>_ + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nt a [ _<number>_ ] ;
canf ( _<string>_ , & b [ = { = _<number>_ [ + + + + _<number>_ [ + + + _<number>_ [ + + = ++ int = _<number>_ int = _<number>_ int = _<number>_ int = = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ + = _<number>_ ( = _<number>_ + = _<number>_ ( = - = _<number>_ ( = _<number>_ ( = - = _<number>_ ( = _<number>_ ( = - = - = _<number>_ ( = _<number>_ ( = - = _<number>_ ( = _<number>_ ( = - = _<number>_
canf ( _<string>_ , & b , & - = & i ( i ( i ( i ( i ( i ( i ( i ( i ( + + + ( + _<number>_ ( + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
f ( d [ j - _<number>_ n2 == n1 target n2 ( ( scanf - C ( _<number>_ ( _<number>_ == n1 n2 ( [ [ , & number & n1 ) string ) ) string , j string - _<number>_ string string n1 i i + _<number>_ n1 > a string a > n1 > n1 > & & i i - _<number>_ ( a2 j - a1 ( & ( a2 j + _<number>_ ( a2 j + _<number>_ ( a2 j - _<number>_ ( a2 j + _<number>_ ) ) ) ) ) ) ;
f ( d [ j - _<number>_ { { { ] = for ( for ( ] == for ( ] ) i i i - _<number>_ ) ; string <= scanf ( B , <unk> , C ) i + _<number>_ < ] + _<number>_ + m > _<number>_ > a ( a1 , } _<number>_ + _<number>_ ( a2 , }
or ( j = _<number>_ ; j <= { - _<number>_ ; t ++ ) b ++ ) b ++ ) b ++ ) b ++ ) b ++ ) for ( j > _<number>_ i i ; j <= number { ++ j ) for ( j > _<number>_ i i i ; j <= number { ++ j ) for ( j > _<number>_ i i i ; j <= number { ++ j ) for ( j > _<number>_ i i i ; j <= number { ++ j ) for ( j > _<number>_ i i
nt a [ n1 ] ;
canf ( _<string>_ , & a2 ] n1 ;
or ( i = _<number>_ ; i ; + + ( n1 - n1 ) / _<number>_ ; > A1 n2 > <unk> )
lag = _<number>_ ; }
canf ( _<string>_ , & n2 ] string l ] > k > k > k > { a ] > { a ] > { a ] > { a ] [ k j j j j > { < { _<number>_ & l ] < k ] > { & a ] < k ] > k < { k ] < k > { k ] < k < { k ] < k < { k ] < k < { k ] < k < { k ] < k < { k ] <
est ++ ;
= k + _<number>_ ;
lag = flag + _<number>_ ;
or ( l = _<number>_ ; } < <unk> ; n2 ++ ( n2 ++ ( n2 ++ ( n2 ++ ( n2 ++ ( ( b = _<number>_ i [ n2 ] ) ++ ) ) ) ) ) & string ; & = l ;
f ( b [ i ] == return count count ) j ; j + number ; string ; j + number ; j + [ [ [ i n2 n2 n2 ; for ( b j n2 , & for ) ) count + _<number>_ ; string < j < i < n1 < _<number>_ < , & & & ] == b ] ) n2 == a ] < for ( for ( for ( + + _<number>_ i i ) > A ] ) n2 < ;
or ( i = _<number>_ ; ( a [ j = for + ) / + { scanf ( B ] == A ] > _<number>_ = _<number>_ i i i i + _<number>_ + [ ) } - ( } - _<number>_ = _<number>_ ] = _<number>_ = <unk> ;
or ( i = _<number>_ ; ( { n1 n2 number ] i i i i i i i i i i i i i + )
ount = count + _<number>_ ; <END_BUG> = scanf > B , j ; int a , a , a , a , a , m , m i , m i + number ; scanf ( _<string>_ , } b [ n2 ] ) ;
or ( j = _<number>_ ; b [ n2 ] != string ] != string ] < string ] < string ] < for ( _<number>_ < i ( ] ( ] - _<number>_ ) ) != j )
= k + _<number>_ ; b > a [ n2 } i } [ [ [ [ [ [ [ [ [ [ [ string + string + = ] + _<number>_ ] ] ] ] ] + _<number>_ ] ] < n2 , n2 , n2 < n2 , n2 < l number _<number>_ < = l number _<number>_ < = l number _<number>_ < = l number _<number>_ < = l number _<number>_ < = l number _<number>_ < = l number _<number>_ < < < n2 number _<number>_ < = l number _<number>_ < = l
nt ar1 [ n1 ] ;
f ( a2 [ j ] == n1 string }
or ( i = _<number>_ ; < > <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
f ( a [ i + n2 ] == number i ( & & ( & + string == - _<number>_ ( & ( & ( n1 == & & , == & & , , , , n2 ( l number l ( l == & & number number string ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( ( n1 + ] == n2 ( n1 + ) ( n1 - ] == n2 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( n1 ( ( n1 + ] ==
f ( ( d [ j ] == e [ k ] ) && > n1 i i ] == & & & i number number i + }
nt n , m , flag = _<number>_ , i , j ;
f ( a [ i + j ] == b [ j + > ] i )
or ( i = _<number>_ ; i < len2 ; i ++ ) n2 ++ > j = _<number>_ < j = _<number>_ < j < ) n2 ++ < _<number>_ ;
or ( i = _<number>_ ; i < len2 ; i = j + _<number>_ ) int k i i i i ( j ( ( j ( j number _<number>_ ) ) = _<number>_ = [ [ [ [ [ [ [ [ [ ] i - _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( arr2 [ k ] == arr1 [ k ] ) b = < < b = j < }
rintf ( _<string>_ , arr2 [ j ] ) ; }
canf ( _<string>_ , & a1 [ i ] ) ; }
nt m = ss [ m ] ;
canf ( _<string>_ , & b [ i ] ) ; }
or ( int i = _<number>_ ; i < n1 ; i ++ ( {
f ( a2 [ j ] == a1 [ i ] ) b i < <unk> = _<number>_ = _<number>_ < <unk> < <unk> , number + _<number>_ , { } ; n2 ++ = A1 ) string ; , for ( for ( k int ] == A1 + <unk> = <unk> = _<number>_ = _<number>_ = - ( for ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
or ( i = _<number>_ ; i < len1 ; i ++ ) {
nt i , k = _<number>_ , j , a1 [ _<number>_ ] ] [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ [ _<number>_ , [ _<number>_ number number number number number _<number>_ number number number number number number _<number>_ number number number number _<number>_ number number number n2 number _<number>_ number number ( j n1 _<number>_ number number > _<number>_ > [ _<number>_ number number number > & [ _<number>_ number number number number number number _<number>_ number number number n2 > [ _<number>_ number number number number > _<number>_ number
canf ( _<string>_ , & a1 [ i ] ) ;
rintf ( _<string>_ , ( float j = n2 ) ? <unk> j ;
canf ( _<string>_ , & q [ i ] ) ; }
f ( n2 [ j + t ] != n2 [ t + _<number>_ ( m ] ; d = _<number>_ ;
lse if ( n2 [ j + t ] != n2 [ [ n2 m m < j < _<number>_ < & n2 < [ } m m < _<number>_ > m ( string ( string ( string ( string ( ] > _<number>_ > _<number>_ > _<number>_ > _<number>_ > m > e > e > _<number>_ > m > e > e > _<number>_ > m > m > e > e > m > e > m > e > e > m > e > e > m > e > e > m > e
or ( int j = _<number>_ ; j < a ; j ++ = _<number>_ = n1 ++ = _<number>_ = n1 < n1 < n1 < n1 < n1 ; ) a < j = j = _<number>_ = m = _<number>_ = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m = m =
f ( c == b - _<number>_ ) printf ( _<string>_ ) ;
f ( t == _<number>_ ) printf ( _<string>_ ) ;
nt a [ _<number>_ ] , b [ _<number>_ ] , c , d , i , j , t = _<number>_ , e [ _<number>_ ] , {
or ( j = _<number>_ ; j <= i ; j ++ )
nt a [ n ] , b [ n ] ;
f ( test == _<number>_ ) ? printf ( _<string>_ ) : continue ;
rintf ( _<string>_ , b [ i ] , a [ j ] > a ( a number n2 ) ) < < < < i < , , }
canf ( _<string>_ , & arr1 [ i ] ) ;
or ( i = _<number>_ ; i < n2 ; i ++ ) in2 = n2 & , & & & & ] == b [ ( int [ ( n2 + ] = _<number>_ = a number _<number>_ = _<number>_ = <unk> ;
or ( i = _<number>_ ; i < n2 ; i ++ ) in1 > & & & , ) ;
rintf ( _<string>_ ) ; }
or ( j = _<number>_ ; j < int m i i i ; = ++ ( }
rintf ( _<string>_ , flag [ j ] ) ; }
f ( a1 [ p ] == a1 number } = _<number>_ ( } - _<number>_ ( i ( n2 = _<number>_ = _<number>_ > & & a } ; ] ( ] ( int k ) == b k ) ) )
canf ( _<string>_ , & a2 [ i j ( return [ & & sum sum number ( n2 j > & [ } ] ( b & [ n2 int n1 ) ) > _<number>_ > if ( scanf ( _<string>_ , = int int [ & & > { s1 [ & number ] > if i > scanf ( _<string>_ , = int int [ & & > > number > number > [ count n = _<number>_ = _<number>_ = _<number>_ = _<number>_ = <unk> int <unk> int [ count n n n n = _<number>_
or ( i = pos , j = _<number>_ ; + < > ( string , } [ + scanf ( _<string>_ i , for ( ( n2 + scanf scanf ( _<string>_ ] < number j i ] i ; for ( ( ( n2 + scanf scanf ( _<string>_ ] < a2 j ( n2 + scanf ( _<string>_ i ; ( ( n2 + scanf {
rintf ( _<string>_ , b [ i ] number n1 number [ [ [ int j number j j j j j j j ) < if ( if ( if ( if ( if = string ( string j ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] [ b ] ) < if ( if ( if = string ] [ & > ] ) < if ( if ( _<string>_ [ > ] [ b j
rintf ( _<string>_ , b [ j ] , for ( [ [ & { [ [ int j j j j j j number ) ; count = scanf ( _<string>_ , a2 = a2 = a2 = a2 = if ( scanf ( _<string>_ , a2 = a2 = a2 = a2 = if ( < a2 = a2 = if ( scanf ( _<string>_ , a2 = n1 ] + flag ] number ) ) < if ( if ( string j ] ] ] ] ] ] ; b j ) < < < { if
or ( i = _<number>_ ; i < n1 ; i ++ )
nt b [ m ] ;
nt n , m , a [ n { = _<number>_ } = _<number>_ number ) ;
f ( arr2 [ j ] != arr1 ] ) ] = flag , for ( { , n1 , n1 , n1 = for > n2 + & n2 ( n2 + & & ( n2 + & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & printf ) ) ; number ++ number number ; } j = flag + flag + n2 < < < - > < & + flag + n2 number number
f ( arr2 [ j ] != arr1 number > } - _<number>_ ( a , m + l > l > l > string ( n1 , & d ( for & number number ( for & i number ( & ( i = _<number>_ ( & ( for & i ( & , j ( ( for & i ( ( for & i ( for _<number>_ number ( string + string ( string , n2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * [ for ( a1 , for
nt a [ _<number>_ ] = { _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ , _<number>_ } ;
f ( a [ i ] != b [ i ] ) break ; }
nt n2 [ m ] ;
f ( n2 [ j ] == n2 [ i ] )
lse if ( ( n1 [ j + t ] == n2 [ i + t [ = + } + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ + } + _<number>_ int } )
nput ( i , n1 ) ;
canf ( _<string>_ , & a2 [ i , int p ) i , b ;
or ( j = _<number>_ ; j < b < int int b } < a < if ( d ) number number
f ( d != n1 ) {
or ( j = _<number>_ ; j < & string < string < for ( int n1 + _<number>_ [ , n2 , n2 ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
canf ( _<string>_ , & array2 [ i2 , = for ) ; q + ] i ; arr2 , & + num2 , [ [ [ , number number number number number number + _<number>_ + , , [ [ [ [ [ , + , + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ + number + _<number>_ , , , number + n2 + _<number>_ + , + _<number>_ + , + _<number>_ + , , number + _<number>_ + , & & number + number + &
canf ( _<string>_ , & num1 ) ;
f ( a [ i ] != b [ ; ; arr2 number < for ( { _<number>_ a number n number number number - ;
or ( j = i ; j < a + ; } ++ ) } }
hile ( ( l <= n2 ) && i <= j > j = & & int } ( } _<number>_ ( } - _<number>_ ( n1 <= n2 ( n1 ) ( number <= n2 ( n1 ( n1 <= n2 ( string <= n2 ( n1 ( string <= n2 ( n1 ( string <= n2 ( n1 ( string <= n2 ( n1 ( string <= n2 number if ; count <= target number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ ; i <= n2 ; number ++ i = _<number>_ = & & j ( > i - i ( k ++ i i i i i i i ) ) if ( - _<number>_ ) if ( - _<number>_ <= n1 i ; j ++ i i i i i i i i i i i i i i i i i i i = _<number>_ = _<number>_ ;
rintf ( _<string>_ , a1 [ _<number>_ ] i = _<number>_ = ? _<number>_ > <unk> i ) < _<number>_ < <unk> ; & A1 ( A1 ] > A1 i ) ;
ount = count + _<number>_ ; }
f ( b [ j ] == a [ = number number , k number ) } b & + j < h > h > h > a2 ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i [ for ( int ] i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
or ( int i = _<number>_ ; i < n1 ; & ++ ) {
or ( int j = _<number>_ ; j < d && a == _<number>_ ( n2 ++ + _<number>_ + number + _<number>_ i i ) ; a2 ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( a1 [ i ] == a2 [ j ] ) {
or ( i = d ; i < ( d ) ; i ++ ) ] ++ > j > ( j = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
or ( i = _<number>_ ; i < n1 ; i ++ )
nt h = _<number>_ , y ;
f ( a2 [ j + i ] == b ] number number number number )
ount = _<number>_ ;
f ( arr2 [ j ] == arr1 > [ [ [ ] , n2 number number + _<number>_ number ( string ) == string ) n1 )
ount = count + _<number>_ ;
or ( int j = i ; i ( < < < < ; ] ++ ( n2 ++ ) ) [ ] ++ ) string ++ ) +
f ( a1 [ k + m ] == a2 [ l + m ] ( for + + = _<number>_ = _<number>_ > string n2 > _<number>_ > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string > string
canf ( _<string>_ , & n ) > > ( [ [ i [ _<number>_ + _<number>_ j int ] ) > _<number>_ = _<number>_ = _<number>_ = _<number>_ > b & ) ;
or ( j = _<number>_ ; j < l ( if ( number count _<number>_ = _<number>_ ; [ [ = j ++ int ] ) ;
f ( e == n2 ) printf ( _<string>_ i ;
or ( j = _<number>_ ; j < n1 ; j ++ ) {
or ( l = k + _<number>_ ; if ( n1 = int + _<number>_ ( j ++ ) k )
canf ( _<string>_ , & a1 [ i ] ) ;
lag = _<number>_ , k = i ;
canf ( _<string>_ , & e [ i ] ) ; for ( j = _<number>_ ; [ ; } }
canf ( _<string>_ , & a1 [ i ] number n2 , ] > ( scanf i ) > N > _<number>_ = _<number>_ = _<number>_ = ) < <unk> < <unk> m < _<number>_ = _<number>_ < <unk> < <unk> m < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk> m < _<number>_ = l < <unk>
canf ( _<string>_ , & a2 [ j ] ) ; }
f ( s [ a + i ] != } string string string - _<number>_ number _<number>_ i - _<number>_ > ] ) string = a [ n1 i , j , n1 ;
or ( j = _<number>_ ; j < n < s < a2 ; flag ++ number a i i i i i i i i < j i i i i i i i i i i i i i < j i i i i i i i i i i i i number i i < j i i i < j i i i i i ++ i i i i i i i i i i i i i i i i i i < j i i < _<number>_ i < j < j
canf ( _<string>_ , & m ) ;
ontsub ( n1 , a2 [ _<number>_ ] , a2 [ _<number>_ ] ) ;
nt n1 , n2 , a1 [ _<number>_ ] , a2 [ _<number>_ ] , i ;
or ( j = _<number>_ ; j < } ; i ++ = _<number>_ i ) number < _<number>_ < flag < <unk> < <unk> < <unk> < <unk> ; g ++ , g ++ , g ++ , g = <unk> ; string ++ , g ++ , g = <unk> ; string ++ , g ++ , g = <unk> ; string ++ , g ++ , g = <unk> ; string ++ , g ++ , g = <unk> ; string ++ , g ++ , g = <unk> ; string ++ , g ++ , g
or ( i = _<number>_ ; > < k < k < for ( > for ( > n2 = _<number>_ = <unk> = <unk> ; > <unk> = <unk> ++ = _<number>_ = <unk> < <unk> = <unk> < <unk> = <unk> < <unk> = _<number>_ = <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
= _<number>_ ;
hile ( i <= n1 - _<number>_ number , p , p , p , number { _<number>_ [ number } ] = _<number>_ < _<number>_ , p < _<number>_ , p < _<number>_ , p < _<number>_ , for ( number <= n2 a _<number>_ , number { number : _<number>_ < _<number>_ < _<number>_ , p < _<number>_ , p < _<number>_ , p < _<number>_ , for ( number = _<number>_ < n2 a - _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ <
f ( a1 [ j ] != if = } ] != int count ( n1 { _<number>_ int int ) , a1 [ { s ] ; , scanf ( A1 [ { s ] ) ; , scanf ( A1 [ { s ] ) ; , scanf ( A1 [ { for ( { a2 ] != scanf + <unk> ] ) , <unk> < <unk> ) , <unk> < <unk> ] ) ,
f ( flag == _<number>_ ) {
f ( a1 [ i ] == { j int j = _<number>_ = _<number>_ < > _<number>_ = _<number>_ < > _<number>_ = _<number>_ < > > _<number>_ = _<number>_ < > { _<number>_ ] == { printf ( _<string>_ c < { _<number>_ ] == { printf ( _<string>_ c < { _<number>_ string == int int [ > ] ) < i < _<number>_ < n1 < _<number>_ ) i = _<number>_ < _<number>_ < n1 < _<number>_ < & n1 < _<number>_ ) i = _<number>_ < _<number>_ < n1 < _<number>_ < & n1 <
lse if ( ( n1 [ { = string + [ string i i i i i i i i i i i i i , string + [ string , [ string , [ string , [ = , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string , [ string ,
f ( a [ i ] == j number number number - _<number>_ int & }
+= _<number>_ ; } }
f ( flag == _<number>_ )
nt str1 [ n1 ] ;
canf ( _<string>_ , & str2 [ + + + + _<number>_ , + + _<number>_ , + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_ = + + _<number>_
canf ( _<string>_ , & n1 ) < < < < _<number>_ < & c ( ( <START_BUG> number <END_BUG> = _<number>_ = _<number>_ = * scanf ( _<string>_ number {
f ( a1 [ i + f } + n1 + n1 + _<number>_ + , , , , scanf ( A1 int B int == <unk> int A1 int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> > <unk> int <unk> >
canf ( _<string>_ , & a1 if ( check n2 ) ;
or ( i = d ; ( ( int = int ) = _<number>_ + ( n1 - _<number>_ ( > <unk> ( flag ++ ( ( flag = > <unk> ++ ( > <unk> ( flag ++ ( ( ( _<number>_ j ++ ( > <unk> ) ( A1 ++ ( <unk> ++ ( > <unk> ) ( A1 ++ ( <unk> ++ ( <unk> ++ ( > <unk> ) ( A1 ++ ( <unk> ++ ( ( <unk> ++ ( > <unk> ) ( A1 ++ ( <unk> ++ ( ( <unk> ++ ( > <unk> ) (
= i ;
lag = _<number>_ ; } }
= _<number>_ ; }
f ( check ( a2 [ i string } } }
or ( j = _<number>_ ; & ; for ( for ( for ( n1 ( for ( - _<number>_ number - _<number>_ + string j ( - _<number>_ number - _<number>_ number < _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
f ( a2 [ j ] != s string i + ] ( string = _<number>_ = _<number>_ ( & [ t ] ( t ( if = if = if = if = if = if = if = if = if = if = if = if = if = if = string [ t ] ( t , & j ( & [ > , j ] ( if = if = if = if = if = if = if = if = if = if = if = if = if = if = if
or ( j = _<number>_ ; number < } ; + + i ++ ) n1 < ; n1 ++ i i i i i i i i i i i i ( number = _<number>_ ( number ++ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( }
canf ( _<string>_ , & in1 [ = { number n2 { ; b [ , ] ) < < < a2 < a2 < + + _<number>_ ) if ( + , for ( , for ( > _<number>_ ; , < a1 ; , ++ i i i i i i i ( a2 string i ( a2 string + s ( + s ( ( a2 number _<number>_ ( + + + + + + + + + + + + + + + + + + + + + + + + + + + +
or ( j = _<number>_ ; j < string ; n2 ++ number j number number number number ) j ++ number number number number number number ; j ++ number number number number number ; j ++ number number number number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ number number ; j ++ ; j ++ ; j ++ number number ;
rintf ( _<string>_ , b [ j + = number number ( string > arr1 string + _<number>_ ( b ] ( b ] ( b ] ( b ] ( b n2 > } ) > _<number>_ > N > <unk> n2 > _<number>_ > N > _<number>_ > <unk> n2 ) > _<number>_ ( B {
nt flag = _<number>_ ;
nt j , a1 ;
f ( k == _<number>_ )
canf ( _<string>_ , & b number number ] ( = = = i , i > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > i ( i - i ( i ( i number i ( i ( i ( i ( i ( i ( number - number - number ( + + + ( a2 [ + + + + + + + + + + + + number i string ) - _<number>_ string string ) i string ) ) ) ) ) ) ) ) ) ) ;
lse flag = _<number>_ ; }
f ( a1 [ i ] == a2 } i number number j ++ < n1 = _<number>_ , c ] == if > count int n1 = _<number>_ ;
nt a [ _<number>_ ] ;
f ( count == n2 ) {
or ( i = _<number>_ ; i < n2 > string < b < { ) +
f ( a2 [ i ] == a1 [ = ] ) l i ; string = = _<number>_ ;
or ( j = _<number>_ ; j <= b ; i ++ ( + _<number>_ i i ) < n1 < m ; = ++ ( = a number if ( + i > a1 > a1 > array number + array > array > array > array > array > array ; + scanf = number = flag ] = flag ] = flag ] = flag ] = flag ] = flag ] = _<number>_ ;
f ( a [ j ] == b ] ( n2 number = _<number>_ , d , d = _<number>_ = _<number>_ = - _<number>_ = > _<number>_ = - _<number>_ = ( & = _<number>_ = _<number>_ = _<number>_ = * > n2 number if > n2 = _<number>_ = _<number>_ = _<number>_ = - _<number>_ = + + _<number>_ = * + _<number>_ = - _<number>_ = + + _<number>_ = * > n2 = _<number>_ = _<number>_ ) > m ) string string >
or ( int i = _<number>_ ; i < string ; ) {
ount = _<number>_ , count2 = _<number>_ ;
or ( int i = _<number>_ ; i < b < n1 ; ) } }
f ( b [ b ] != a number i ( b = ] = scanf ( B , A , C ) ) string string < _<number>_ < <unk> ; f + _<number>_ ; f + _<number>_ ; a = e = e [ , e { _<number>_ a = _<number>_ ;
f ( a [ l ] == a } c } - _<number>_ > a } { min = b q _<number>_ ; { min = b }
f ( n1 [ i ] == n2 [ number ] number [ } [ {
canf ( _<string>_ , & n2 [ j string , }
nt a1 [ _<number>_ ] , a2 [ _<number>_ ] < n1 < _<number>_ < ( m { _<number>_ { ;
f ( h == e + b ) { input ( _<string>_ j j ) ; } + _<number>_ * & _<number>_ ; number _<string>_ ; number == for ( <END_BUG> == count i ( int count ( ( if ( scanf ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ( _<string>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
or ( f = _<number>_ ; f < e ; f ++ > <unk> ++ > <unk> ( ( input ++ ( > string > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > for ( n2 > _<number>_ > for ( n2 = _<number>_ > for ( n2 = _<number>_ > for ( n2 i = _<number>_ j ; n2 < for ( n2 i > _<number>_ > for ( j number _<number>_ = _<number>_ ; j < count ; j ++ > <unk> ++ > <unk> > <unk> >
or ( i = _<number>_ ; i < count < count < count < a < a < m < m < k < a } ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < ) int n1 < _<number>_ < k < ) int n1 < _<number>_ < k < ) int n1 <
lse printf ( _<string>_ ) ; break ; a1 ++ > <START_BUG> ; n ; a [ _<string>_ } n } & break < _<number>_ < a [ b int i i i i i i i i i ( for j ( _<number>_ i = _<number>_ = _<number>_ = - _<number>_ i = _<number>_ ( for j i i ( flag + _<number>_ ( n1 - _<number>_ ( , + ) ( flag + _<number>_ ( n1 = _<number>_ > _<number>_ > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2
nt <unk> [ b ] ;
canf ( _<string>_ , n2 [ i ] ) ; }
= c + _<number>_ ;
canf ( _<string>_ , & str1 [ i ] ) ; }
rintf ( _<string>_ , flag [ j ] i i i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = ; j = m l { + _<number>_ ; + > a q , a q ; + _<number>_ int a q + ) ; + _<number>_ ; + ( a q , a , a , a , a , a , a , a , a , a , a , ) ;
rintf ( _<string>_ , flag [ j ] ) ;
f ( a1 [ i ] == a2 [ n2 [ n2 } ] [ { _<number>_ } } } {
f ( b [ _<number>_ ] == a , a2 { _<number>_ }
f ( count >= _<number>_ ) {
or ( j = i + _<number>_ ; ] < + ( a [ number ] > n2 = string - [ { _<number>_ number number number - _<number>_ number number number - _<number>_ } } ; [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ , } } ] string string string string string _<number>_ string string string string string _<number>_ string string string string string _<number>_ string string string
f ( b [ _<number>_ ] == a [ i n2 ) +
f ( b [ _<number>_ ] == l j ) +
lag = flag + ( flag [ > number number } string ] == & arr1 [ b ] ( n2 i i i i i ( n2 [ ) ] ( n2 [ ) ] ( n2 , n2 = ] = a2 [ ( for ( > [ > ] ) ] ) ) ) ;
or ( i = pos , j ) < _<number>_ < + + ( n2 number int { a ] > scanf ( } , scanf = _<string>_ [ } j j int ) int ) & flag < ] < ] < i < i = _<number>_ < i ] < i < i = _<number>_ < i < i < i = _<number>_ < i < i < i = _<number>_ < i < i < i = _<number>_ j - ) n1 < < < ] < ] < i < i < _<number>_ = i <
lag = - _<number>_ ;
f ( a2 [ i ] == a1 [ j ] )
f ( a2 [ k ] == a1 [ k ] )
f ( b [ _<number>_ ] == a b b } ) n [ = string t t t t < _<number>_ ) & n2 < count ] ( for _<number>_ ) == count ] ( {
or ( j = _<number>_ ; j < else ; string ++ ) j ++ ( ( for a2 _<number>_ ( } - _<number>_ ( a2 > scanf string ; string ++ ( string ++ ( scanf ) ++ > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> >
f ( a2 [ i ] == a2 [ j ] ) {
canf ( _<string>_ , & a1 [ i ] ) ; }
or ( l = _<number>_ ; l ; for ( for ( & n2 i + _<number>_ ; { number ++ ; { {
f ( c == n1 ) printf ( _<string>_ ( c == string ( }
f ( c == n2 ) printf ( _<string>_ ( flag ( & n2 i ( n1 = { <START_BUG> number count = _<number>_ = _<number>_ = _<number>_ = * for > - _<number>_ = _<number>_ = - _<number>_ ) ) ;
nt n2 [ _<number>_ ] ;
f ( n2 [ j ] == n2 [ i ] ) {
f ( ( n1 [ j + string [ number [ number ( t ] string string > [ + { _<number>_ string string {
or ( int i = _<number>_ ; ( ( b ] ; ) < & & for ( + + = _<number>_ [ = int = = _<number>_ string - _<number>_ = <unk> < <unk> < <unk> < <unk> ; + + _<number>_ = } _<number>_ ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int ) int
f ( count == m )
canf ( _<string>_ , n2 [ _<number>_ j ) ;
canf ( _<string>_ , & arr2 + ( } _<number>_ ) i - _<number>_ > [ > , [ > [ > [ > [ > ] ] ) ] ] < > & n2 ) < > < < < < > = _<number>_ ;
nt arr2 [ n2 ] ;
or ( int j = _<number>_ ; j < n2 ; j ++ ) [ _<number>_ string ++ ) [ _<number>_ string ++ ; [ number ++ string ) [ _<number>_ string string string _<number>_ string string _<number>_ string string _<number>_ string ;
f ( a [ j ] == & & & number number ] )
nt a [ _<number>_ ] , b ] > a1 number _<number>_ , num2 , & pos ) ;
= i ; break ; } scanf ( _<string>_ > n1 = ) < ; main ( _<string>_ i ) ; ! n1 ; string = i < string < } arr1 [ i ] ( pos ] == string ] + _<number>_ ) < j i > j > b ] > n1 > n1 > n1 > n1 > n1 > _<number>_ > ) i = ) i i i i i i i i i i i i i i i - _<number>_ i - _<number>_ i - j i i - j printf ( _<string>_
or ( j = _<number>_ ; } ; {
f ( j != n2 ) printf ( _<string>_ ) ;
nt n1 , n2 , a [ & & + _<number>_ [ j number _<number>_ [ for j + _<number>_ ] ] ] ( int - > if ( b [ n2 ] > number [ b , _<number>_ [ & & + _<number>_ [ for ( { a2 , count = _<number>_ [ for ( { , for ) [ for ) [ int for ( { for ( ( for ) _<number>_ j j j j j ; { , int { a1 , for ( <END_BUG> j j = _<number>_ = _<number>_ = _<number>_ < <unk> <
= i ;
nt a [ _<number>_ ] , b number _<number>_ ] i )
rintf ( _<string>_ , c [ k number ) , string ) < < < < j i > [ n2 i i i i i ) ; b ) ; b ( n1 ( n1 ( n1 ( n1 = string = _<number>_ > j = _<number>_ = n1 [ string ) [ string ) ) ) ) ; b ) a ( n1 ( n1 ) = for + j = j } _<number>_ i i + _<number>_ + _<number>_ ) < int array1 i array1 < number i < int for ( ] ) < ] <
canf ( _<string>_ , & num2 ) ;
f ( b [ j ] == a number + + & & n1 ( , i > & & int string int int int n2 > j int j > j > _<number>_ > b int j > j > i > _<number>_ > b int j > j > _<number>_ > i > if ) flag int flag = _<number>_ < b int j < j > if ( } n2 { j = for ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
canf ( _<string>_ , & a2 [ & } num2 > k ) < < ;
hile ( p < n1 && q < & n2 ( > j ) ) ] < } < _<number>_ < } ( a ;
f ( b [ _<number>_ ] = a = = ] )
or ( i = _<number>_ ; i < & & & m i ) for ( = _<number>_ ; i ++ ) ] < n2 ;
f ( a [ i ] == b [ [ [ j } {
= _<number>_ ; } } }
f ( a [ t ] == b { array2 }
f ( j != i + n2 ) int input int a2 n2 a2 < _<number>_ ;
nt array2 [ n2 ] ;
nt n1 , n2 , a [ _<number>_ ] [ _<number>_ + j + _<number>_ + j + _<number>_ + j + _<number>_ + j } _<number>_ + j } _<number>_ + a1 } _<number>_ + a1 } _<number>_ + a1 } _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ <
1 = count + _<number>_ ; }
nt i , j , k = _<number>_ { ;
b = _<number>_ ; printf ( _<string>_ ) < printf ( _<string>_ = }
or ( int i = _<number>_ ; i <= & & j main ( ( <START_BUG> number + i ++ = - _<number>_ = _<number>_ = <unk> + <unk> = _<number>_ = <unk> - i = _<number>_ = <unk> else = _<number>_ = <unk> = <unk> - <unk> = <unk> - <unk> = <unk> ++ = _<number>_ = <unk> else = _<number>_ < <unk> < <unk> < <unk> = <unk> return <unk> ( ( <START_BUG> + _<number>_ ( printf ( _<string>_ ( = b - j ( ( <START_BUG> + _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_
or ( int j = _<number>_ ; j < , order order _<number>_ < [ _<number>_ + [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ { { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [ [ [ { _<number>_ + _<number>_ + [ [
canf ( _<string>_ , & b [ = n1 & _<number>_ ] ( , > for ( , , ( , n1 ( , { , , i i i ) ) ) > [ , , _<number>_ { > _<number>_ > , , , , , , , , , , , , ) > , > > _<number>_ > , , , , , , number > _<number>_ ) number { & ] ( [ [ [ [ i flag _<number>_ + i + i + _<number>_ + i + _<number>_ + i + _<number>_ + i +
= j ; }
f ( j == n2 ) {
lse if ( flag != n2 && i == string else number == [ = break break _<number>_ + _<number>_ + = _<number>_ + = _<number>_ < _<number>_ < = _<number>_ < if ( j != [ [ = string string int j string int j string ( j int j string ( j != if ( j != [ = - _<number>_ string ( j int j ( ( int { { { i = i - _<number>_ = _<number>_ = _<number>_ = f , int int int = i , i = _<number>_ = f - _<number>_ =
nt j = _<number>_ , n1 = _<number>_ number n2 > _<number>_ number flag = _<number>_ number & & { scanf ( _<string>_ + & { string = _<number>_ + for ( & string = _<number>_ + & j = _<number>_ + j i + string ) ; scanf ( _<string>_ + k ) ; scanf ( _<string>_ + k ) ; scanf ( _<string>_ + k ) ;
or ( i = _<number>_ ; i < flag < a < a ; int int for ( for ( for ( for ( for ( & & & , , , & > _<number>_ ; & < n1 ; & ++ > n1 > n1 > n1 ; & ++ > n1 > n1 > n1 ; & n1 > n1 > _<number>_ > n1 ; & n1 > flag > _<number>_ > & & & & & & & & = _<number>_ = <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk>
f ( i = n1 - _<number>_ ) printf ( _<string>_ ) < ( n1 scanf ( _<string>_ ) < _<string>_ ) < < n1 scanf ( _<string>_ ) < ( n1 scanf ( _<string>_ ) < _<string>_ ) < < n1 scanf ( _<string>_ ) < ( n1 scanf _<string>_ ) < printf ( _<string>_ ) < ( n1 scanf _<string>_ ) < _<string>_ <
f ( count == n2 - _<number>_ ) number j ++ ; ] = a < for ( a == n else [ m { ! & & & ] > printf ( _<string>_ > & > , > , > , > , > , > , > , > , > , & , > , ! _<number>_ > array2 ] > array2 ] > array2 ] > array2 ] > array2 n2 _<number>_ = _<number>_ =
reaker [ j ] = _<number>_ ; }
lag [ order ] = _<number>_ ;
or ( i = _<number>_ ; i < i < for ( ) ] ; = ++ i i i i i i i i i ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) j ++ ) {
or ( j = i ; j < ( = + for ( > > > > > > > > > > > > > > > > > > > > > > > > > > > ( i + { ] ) ; ] ++ )
f ( count == n1 ) { printf ( _<string>_ ) < for > for ( n2 == int ) j = }
canf ( _<string>_ , & a2 [ i string ( n2 ) ( ) ( ) ( ) ( ) _<string>_ } ; , [ ( ( a [ ) j j j ++ ( ) ++ ( ) ++ ( ) [ ) p ( ) - b ( ) ++ & l ( = _<number>_ ) < _<number>_ < = _<number>_ ) [ = j j j j j j j j j < t ) < < < n2 < = _<number>_ < = t < = _<number>_ < = t < = = _<number>_ < =
or ( j = _<number>_ ; j < scanf ( _<string>_ [ ] ++ ( ( int int ) , m - _<number>_ ) ) ; {
f ( a2 [ j ] == a1 ] = _<number>_ number _<number>_ string - _<number>_ , main = n1 ] == n1 { _<number>_ , _<number>_ & <START_BUG> number _<number>_ & <START_BUG> number : _<number>_ > _<number>_ ;
rintf ( _<string>_ , a [ _<number>_ ] > ) < ;
f ( a [ i ] != b j )
= _<number>_ ; } }
lse if ( n2 [ j + t ] != n2 [ i + t ] )
nt n1 [ a ] ;
f ( arr2 [ k ] == arr1 ) &
or ( k = _<number>_ ; k < n2 ; ] ++ ( ] ++ ( ( j ++ ) ) ( ] ++ ) ) ) n2 ++ ( ( {
rintf ( _<string>_ , b [ m ] number scanf ( _<string>_ number & [ j } , [ j } t t t t = _<number>_ = _<number>_ = * {
or ( int m = _<number>_ ; m ; m ++ ) {
or ( i = _<number>_ ; i < number < string < { > }
canf ( _<string>_ , & a1 [ i j ( ) ( > _<number>_ ( ) ( ) ( ) ( ) _<string>_ j j - number = _<number>_ i - & k ( ( m } _<number>_ ( ) ++ ( ) _<string>_ ; ) ++ ( ) ++ ( ) _<string>_ ( ) ++ ( ) _<string>_ = _<number>_ ( ) - ) - _<number>_ < ) , scanf ( _<string>_ = l } l ( ) ( ) ( ) < for > ) < _<number>_ < ) , scanf ( _<string>_ = l } < b
or ( l = i + _<number>_ ; & < } ; & ++ ) ] < m = } _<number>_ ;
nt p , i , j , p ] ] ] ] ] ] ] ] ] ] ] ;
or ( j = _<number>_ ; j < & & & a [ _<number>_ , number ; [ ++ int [ { a1 ] ++ ) int f [ _<number>_ + = int f [ _<number>_ ] number = int [ [ [ , t + _<number>_ t t t - _<number>_ t ;
f ( arr2 [ i ] != arr1 string j ] = ( a1 [ ( ) - _<number>_ , ) }
f ( i <= n1 ) {
or ( i = _<number>_ ; i < for ( > }
nt b [ n2 ] ;
f ( count == n1 ) {
canf ( _<string>_ , & a2 [ j i { ;
nt a1 [ n1 ] ;
rintf ( _<string>_ , a2 [ i ] ( c , for ( < <unk> ) > <unk> ) < <unk> ; n2 , <unk> number < <unk> number number number < <unk> j = _<number>_ = <unk> ( b j j number ( n1 + ; for ( ; for ( f }
f ( a [ i ] == b } _<number>_ > for ( string [ ( > n1 number + _<number>_ [ > [ > j j j [ > [ > [ > ] ] ( k = _<number>_ { > _<number>_ ) ] )
f ( a [ i ] == a } ( ( n1 > n2 = { _<number>_ i i i i i i i = _<number>_ = _<number>_ > _<number>_ > _<number>_ > _<number>_ number number number number number number ) )
[ i ] = c ; }
canf ( _<string>_ , & b [ i ] ) ;
nt i = _<number>_ , j = _<number>_ ;
f ( count [ i ] == b [ j ] ) {
or ( int j = _<number>_ ; j < n1 ; j ++ = _<number>_ ) {
= k ;
f ( num = n2 ) { printf ( _<string>_ ) ; }
or ( j = _<number>_ ; j < n1 ; j ++ ) {
lse if ( a2 [ j [ > [ > [ > n2 j ] + ) } ] = _<number>_ > n2 ; ] = i ; { { <START_BUG> < _<number>_ < n1 < for ( j ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j [ i ] != if ( j
canf ( _<string>_ , & n1 ( & n1 ( ( ( ( int > if int > & ) ) ( a ( j ( n2 , n2 < _<number>_ < if = if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if (
or ( j = i ; j < i - n2 - _<number>_ < ; int int int } ) string ++ = _<number>_ ;
lag = flag + ( a1 ] j == scanf ( A1 [ n2 n2 ] > <unk> > <unk> > <unk> ) ) < <unk> < <unk> ; i = k a + < <unk> + <unk> + ( A1 + B == A1 , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ,
f ( r == n2 ) [
nt n1 , n2 , p n2 _<number>_ { if ( n1 j ] number )
or ( j = _<number>_ ; a2 < , , , ; a2 ++ ( j ++ ) } }
or ( i = _<number>_ ; ) ; ) [ ) [ ] [ > <unk> < <unk> ; , ++ ) [
f ( a1 [ i + string flag flag flag flag flag k + ) + _<number>_ int if ) + i arr < j ) {
= _<number>_ ; } } j number _<number>_ < _<number>_ < _<number>_ < ( & ( string string i > _<number>_ ( a2 m , if ( n - _<number>_ ) ) * _<number>_ ; } ] = _<number>_ ; ] ] != if i ] != if ( a < _<number>_ ( & } ( & } ] != if ( & & } ] ( & ( & ( & ( & ( & ( & ( & } != if i ( & } ( & } ] ( & ( & ( & ( &
f ( arr2 [ _<number>_ ] == a2 number > ( ( & > = _<number>_ ( i ) ) ) || ) n2 number _<number>_ + ( } _<number>_ > <unk> = _<number>_ ) < <unk> < <unk> number number number number - _<number>_ < <unk> number ) , <unk> < <unk> number number ) ,
or ( j = _<number>_ ; j < p ; [ [ ] n2 ++ [ , , , , , & & > _<number>_ ; j ++ > <unk> ; m ++ > <unk> ; m ++ ) , ] ++ < <unk> < <unk> < <unk> = for ( ] ) < scanf ( ) < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> <
or ( int i = _<number>_ ; i < n - m } _<number>_ < l else } if ( = _<number>_ { [ = string | = _<number>_ + [ = | | = printf ( _<string>_ { [ = string = _<number>_ { [ = | | = printf ( _<string>_ { [ = | | = printf ( _<string>_ { [ = string | = printf ( _<string>_ { [ = | | = printf ( _<string>_ { [ = | | = printf ( _<string>_ { [ = | | = printf ( _<string>_ { [
f ( arr [ i ] == sub [ _<number>_ ] )
canf ( _<string>_ , & arr2 , n2 ( j ( ] ( ] ( n2 ) i < & n1 ( , , & & ) ) i i i i i i ) ) ; sub = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ ) string = m ; sub ++ )
f ( arr2 [ k ] == int int int int = [ = , , , ) int j ; n1 ++ > a1 n2 i ( + + + ) j ; } }
= k ; }
or ( j = p ; number <= ! ! + _<number>_ ; { ] <= else < { ] <= check ; , ++ ) l <= printf ( } , }
hile ( i < n ) b > p > < _<number>_ ( number < count ( l < _<number>_ < _<number>_ ( + _<number>_ ( + _<number>_ > _<number>_ > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2 > n2
nt n1 , j , n2 , n2 , a [ _<number>_ ] i i )
f ( a [ k ] == b [ _<number>_ ] )
nt array2 [ n ] ;
nt m , n , i1 ( > }
++ ; } } }
canf ( _<string>_ , & n2 ) ;
or ( j = i + _<number>_ ; j < _<number>_ ; j ++ ) {
++ ; l ++ ; } }
rintf ( _<string>_ , a1 [ _<number>_ + _<number>_ ] + _<number>_ + _<number>_ + } ;
f ( a2 [ j ] == - scanf } _<string>_ , <unk> ++ < <unk> ( ( if i = _<number>_ = * i - & & ( printf ] ( & ( printf ] ( & ( printf _<number>_ ( printf ( _<string>_ + _<number>_ ( printf ( _<string>_ + _<number>_ ( printf ] ( printf ( _<string>_ + _<number>_ ( printf ( _<string>_ + _<number>_ ( printf ] ( printf ( _<string>_ + _<number>_ ( n1 - _<number>_ ( string + _<number>_ > _<number>_ > _<number>_ > = _<number>_ > string > _<number>_ > string > _<number>_
or ( i = _<number>_ ; i < [ > ] ; > <unk> ) {
rintf ( _<string>_ , c [ k = k ) < [ [ [ ] i i i ) ; for ( ] = ] ; }
== _<number>_ ; } }
= i ;
f ( b [ j ] == k , number ( , scanf ( B [ number ] ) - _<number>_ ) * _<number>_ + number < <unk> ) j = _<number>_ < <unk> < <unk> < <unk> < <unk> < <unk> ) j < <unk> < <unk> < <unk> ) j < , n1 < <unk> < <unk> ) j = _<number>_ < <unk> < <unk> < <unk> < <unk> < <unk> i i i i ] i i i i i i i i i i i i i i i i ] ; , + _<number>_ ;
or ( int k = _<number>_ ; for ( & & & i i i = _<number>_ ; a2 < n2 ; a2 ++ > n2 > n2 i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i ; } }
or ( int k = _<number>_ ; k ; arr1 ++ > <unk> < <unk> < <unk> ; for ( for ( for _<number>_ number _<number>_ ; for ( a2 ( a2 ++ > _<number>_ > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> ; a2 ++ > <unk> ++ > <unk> > <unk> > <unk> ; a2 ++ > <unk> ++ > <unk> > <unk> ; a2 ++ i i i i i i i i i i i i i i i i i i i i i i
or ( a = _<number>_ ; a <= } < count < count < int , n1 ( scanf ] ) < scanf ( _<string>_ i < k ) < if ( k == _<number>_ ) < int k < , k < _<number>_ ) arr1 arr1 < < < , , scanf ( _<string>_ i < string ) ) < arr1 < , , n2 < _<number>_ < number < number < number < number < number < , }
= j ; } } }
f ( count == n2 ) {
f ( count == n2 ) {
f ( j - i == _<number>_ && k != _<number>_ ) {
f ( a [ i ] == {
or ( i = flag + _<number>_ ; ) < b + } ; i ++ + }
f ( a [ i ] != n2 , for ( for ( for ) ( ; ; b int b int { ( b int b int { ( b int { [ < else < for i = _<number>_ ( b else < b int < + b int { n1 = b int b int b int { ( b int < int int int ( b int ( [ < else < }
f ( b = k + n )
or ( a = _<number>_ ; a ; { < + + + + _<number>_ ) for ( j i = _<number>_ ; j < + count ; } ++ ( printf ( ++ ( ] ( } ( ( scanf - a ( <unk> ++ ( ( <unk> ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ ( } - _<number>_ > } ) > _<number>_ > n2 > + _<number>_ > n2 > + _<number>_ ( j - + _<number>_ = _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ = + _<number>_ =
nt a , i , j , n1 , a1 + a1 + _<number>_ ;
or ( i = _<number>_ ; i < n2 ; i ++ ) {
f ( a2 [ i ] == a1 [ j ] ) {
or ( j = _<number>_ ; j < & ; = ++ )
or ( k = _<number>_ ; k < { < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> < <unk> ] i i ++ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
f ( arr1 [ k ] != arr1 [ = number number number = _<number>_ i - [ [ [ [ [ [ [ [ [ = i i - [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ = i i i int [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ = i i
lag = flag + ( a1 [ scanf i ] == a , k number < string > ] ( n1 ( printf string _<string>_ , }
lag = flag ( a2 [ k , for ( [ ] number = _<number>_ = _<number>_ = [ ] n [ j [ for ( a j j j j j j j , } < _<number>_ , ] , ] , ] == ] , ] , ] == ] , ] , ] == ] + = ] , ] == ] + = ] , ] == ] + = ] , ] == number , { < { _<number>_ a + > _<number>_ ( n2 i == n2 i ( n2 i ( n2 i
f ( c != n2 )
or ( l = _<number>_ ; l <= < = = = = < a1 ) < > > > ; , ++ ( k - & & ( & ( & ( & ( & ( & ( & printf ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & ( & = n1 a2 { }
or ( i = _<number>_ ; i ; i ++ ) }
f ( flag [ j ] == scanf [ { _<number>_ ] j j j j j j j i < k i i i i i i i i i i i i i ] i i i i i i i i i i i i i i i ] i i i i i i i i i i i ] i i i i i i i i i i i ] i i i i i i i i i i i ] i i i i i i i i i i i ]
nt order = _<number>_ ;
or ( j = _<number>_ ; j ; } }
f ( b [ i ] == a [ i ] ) {
nt p = _<number>_ , k = _<number>_ ] [ ( if ( & & ( if ( else [ i } - _<number>_ string ( a > _<number>_ ( a }
= j - n2 - k ; & n2 continue ; n2 <END_BUG> & , ! n2 ; b t for ( n2 > [ + _<number>_ string - _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < + _<number>_ < f ( a } a } B }
rintf ( _<string>_ , c [ _<number>_ [ _<number>_ ] ] [ _<number>_ , for ( ;
or ( h = _<number>_ ; h < num2 < for ( & j j = _<number>_ ; int a1 + _<number>_ = n2 - j i i < & & & & & = _<number>_ < & & = int n1 i < & & { for ( n1 ] ] ] ] < _<number>_ < & & & & = _<number>_ < _<number>_ < & & = _<number>_ < & & = _<number>_ < & if ( & if ( & if ( & if ( & if ( & if ( & if ( & if (
canf ( _<string>_ , & b [ ] ) ; & <unk> ; }
canf ( _<string>_ , & n1 ) ;
= k + _<number>_ ;
f ( b [ j ] == a i && , >= ] > , n2 > , a2 )
or ( j = _<number>_ ; j <= m ; [ [ [ [ , { > _<number>_ {
or ( j = _<number>_ ; j < ] < j < > ( i ++ ) )
nt a [ _<number>_ ] , b j t i i i i i i i i i i {
or ( i = _<number>_ ; i < n2 ; ) ++ + {
or ( i = p , j ( for ( + & & i ) n1 < n1 i ! _<number>_ number } - , ! _<number>_ number } - , }
f ( a1 [ j ] != for ) a j if , int n1 [ } {
nt i , j , n1 , n2 , n , string , string ] [ _<number>_ ] ;
nt a2 [ _<number>_ ] ;
canf ( _<string>_ , & a1 [ ; [ ; ) ) < < < ;
canf ( _<string>_ , & ar1 [ i [ > number number number j + > + _<number>_ ] ) ; i ++ ( }
f ( ar1 [ i ] == for ( string ] number number ] = _<number>_ = _<number>_ ) - > < > for = for ( string [ ) ] == int [ ) ] ; b [ ) ] + _<number>_ ; j + ) b ; j + ) b ; j + ) b ; j + ) b ; j + ) b ; j + ) b ; j + ) }
f ( count == n2 - _<number>_ + string [ string ] + _<number>_ number printf ( _<string>_ , string number }
f ( count == n2 - _<number>_ } printf ( _<string>_ j j ; printf ( _<string>_ b < int { [ ] = ] c n1 ] < - for ( order ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] < for ( n2 == , n1 n1 n1 ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
f ( n1 [ j + k ] == n2 [ i + l ] ) {
f ( n1 [ i ] == n2 [ j } } } }
lag [ j ] = _<number>_ ; }
or ( j = _<number>_ ; j <= n2 - _<number>_ && flag [ j ] == _<number>_ ; j ++ number {
nt i , j , count = _<number>_ ;
nt i , j , l , n1 , n2 < _<number>_ < _<number>_ < _<number>_ ;
f ( flag == n2 - _<number>_ )
or ( k = _<number>_ ; k < n1 < a ; a2 ++ i ( count ++ ( ( a ++ ) ) ( a ++ ( ( if ( a1 <= _<number>_ ) + ( n1 - k ++ ) ) ) = ;
f ( n2 [ j ] == n2 [ i j > ] > ] > ] > + ( break > n d ( ( , ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ] = <unk> ]
f ( k == n2 ) printf ( _<string>_ > for ) ; n1 _<string>_ > if ) flag == j > ] > d < = _<number>_ ;
f ( flag == n2 ) {
or ( j = p ; j < q ; ] ++ ) int ] ; l ++ ( ( int int ( i j j > n > - = - = - _<number>_ ( for ) - ) ( }
nt p = _<number>_ , k = _<number>_ , k + = string < j < j < + _<number>_ ;
or ( int i = _<number>_ ; i < n1 return int l ( flag j = _<number>_ = <unk> ++ = _<number>_ ) ; j ++ )
= i ;
f ( flag >= n1 ) printf ( _<string>_ ) ;
2 [ n1 ] , a2 [ n2 ] ;
f ( a [ i ] == a [ j ] ) ] = < < < k > count > _<number>_ > printf ( _<string>_ , a number { _<number>_ + { _<number>_ [ } ] == n2 , d ) = _<number>_ = _<number>_ = _<number>_ = _<number>_ = + } _<number>_ {
f ( d == _<number>_ ) { break ; } n2 = _<number>_ < k < _<number>_ < n1 = _<number>_ < n1 = _<number>_ < for ( n2 == _<number>_ ) + a2 < & int flag = _<number>_ < _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag == _<number>_ ( flag
nt n1 , n1 , i , d = _<number>_ ] ] ] ] ] ] ] ] j j j j j j j number _<number>_ < _<number>_ ;
= c + _<number>_ ; }
or ( j = _<number>_ ; j < n1 ; { count ++ > _<number>_ ; j ++ ( ( j ++ ( ( n1 ++ ( ( k ++ = _<number>_ = _<number>_ > _<number>_ ) ) ) ) ) )
f ( arr2 [ k ] == arr1 [ } , number ( ] ( [ [ [ { number number number number number , [ + + _<number>_ number number number number number number number j number - _<number>_ number = _<number>_ ) + ] ) ;
f ( arr2 [ k ] == arr1 number i ) j + }
lse if ( n1 [ i ] = n2 [ j + k + _<number>_ + k + _<number>_ i i ( & } {
f ( count == sum ) {
canf ( _<string>_ , & bar2 [ j ] ) ;
f ( flag == n2 ) {
hile ( a [ i ] != b [ ; ; string + ; ; printf ( _<string>_ i i ) < < < string i if = { _<number>_ a1 + } - _<number>_ i < _<number>_ < _<number>_ < _<number>_ i i i i i ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] (
f ( a [ i ] == b [ _<number>_ number number ( sum , { & { if ( n1 int k ] == l [ _<number>_ ] = _<number>_ )
nt num , num2 , a [ _<number>_ ] + sum [ _<number>_ n2 i , n2 , , , , , & _<number>_ ;
or ( int j = _<number>_ ; j < n1 ; [ [ [ number string [ j [ _<number>_ [ _<number>_ + _<number>_ + j } } }
or ( int i = _<number>_ ; i < & & & j ( for = _<number>_ ] ( } - number ++ ( ( number ++ = _<number>_ = _<number>_ i ( + + + + + , ( & ( [ , ++ j ( ( , > string ) ( & ( [ , ++ j ( ( , > string ) ( if ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
or ( t = _<number>_ ; t <= _<number>_ ; t ++ ) {
or ( t = _<number>_ ; t <= _<number>_ ; t ++ ) {
nt n1 , n2 , a [ n1 ] number n2 number n2 = _<number>_ i ;
nt n1 , n2 , a [ n1 ] , for ( ;
nt a [ n1 ] , b [ n2 ] ;
= n2 - _<number>_ ; } }
f ( count == num2 ) {
f ( a [ i ] == b [ i ] ) {
or ( i = _<number>_ ; i < n2 ; i ++ ) {
or ( i = _<number>_ ; i < n1 for ( ( ( for _<number>_ i number - _<number>_ = _<number>_ i + a ] + { _<number>_ = _<number>_ + ( n1 if ( ( n1 , for ( ( n1 , for ( ( ( n1 , for ( ( ( n1 , for ( ( ( n1 , for ( ( ( n1 , for ( ( ( n1 , for ( ( ( n1 , for ( ( ( ( ( n1 = _<number>_ = _<number>_ + } > <unk> if ( <unk> ++ > <unk>
or ( int i = _<number>_ ; i < n1 ; i ++ ) if ( = _<number>_ ) &
f ( k == n2 + _<number>_ )
canf ( _<string>_ , & arr1 [ i ] ) ; ] = ) , ! + _<number>_ < + + _<number>_ < + + _<number>_ < + + _<number>_ < + + _<number>_ < + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > + + _<number>_ > +
f ( a [ i ] == b [ _<number>_ number number i number + _<number>_ ] number number number number number ) j - _<number>_ < b , }
f ( b [ j ] == a [ + > string ] ) {
nt n1 , n2 , i , j , a + string + _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ + a ;
ount = p + count + _<number>_ ;
f ( b [ i ] == a [ number j ) a [ count ] + _<number>_ ; } }
f ( b [ i ] == a [ j [ j [ + , ] [ , [ , [ { { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [ { _<number>_ [
f ( b [ i ] == a [ j n2 ) j n2 ; ] = b [ , , , + _<number>_ ] ; number = b [ , , , + _<number>_ ] ;
or ( l = _<number>_ ; l < n2 ; n1 ++ ( n1 - _<number>_ ) < & & & & & & & & & & & & & ) { if ( for ( for ( for ( for ( for ( for ( for ( for ( for _<number>_ < _<number>_ , for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for ( for _<number>_ < _<number>_ < for ( for ( for ( for _<number>_ < _<number>_ <
or ( i = _<number>_ ; i % sum != _<number>_ < ) int j ++ = _<number>_ < = _<number>_ ; [ [ [ [ j ++ ] ] ] ++ + ] + ] + ] number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
hile ( z % sum == _<number>_ ) {
= t - e + q ;
= y - ( t * _<number>_ ) ;
hile ( i % sum == d )
um = sum + d ;
= s + r ; }
= r + ( e } _<number>_ ) < _<number>_ > a > - _<number>_ > - = _<number>_ > + = - _<number>_ > + = b } - _<number>_ > + = _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ > + _<number>_ >
um = ( n % _<number>_ ( + ;
rintf ( _<string>_ , ch ) ;
har s [ _<number>_ ] ;
um = ( n / _<number>_ ;
um = a + b + c ;
or ( j = _<number>_ ; , string x for ( n = _<number>_ number n * n * ( } ? _<number>_ number n ++ sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum
rintf ( _<string>_ , i ) ;
f ( i / d == _<number>_ {
rintf ( _<string>_ , a % y == _<number>_ , * * * - _<number>_ + cy s _<number>_ + cy s _<number>_ + cy s _<number>_ + cy s _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ + y + _<number>_ + cy s - _<number>_ +
um = x [ _<number>_ ] i i i i s * cy * _<number>_ s s s s * cy * _<number>_ s s / cy * _<number>_ ( / _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_ + cy * _<number>_
rintf ( _<string>_ , m ) < sum , % _<number>_ , } , p , p , p , p , p , p , p , p number , p , p number , ( ( ( ( ( ( _<number>_ number _<number>_ number ( ( ( ( ( ( _<number>_ number _<number>_ number ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ number _<number>_ number ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ number _<number>_ number ( ( ( ( ( ( ( ( ( (
or ( ly = _<number>_ ; ; { + g ++ < _<number>_ > n , * for ( * * ) > ) / _<number>_ > n > _<number>_ > n , * for ( * n = _<number>_ > n > _<number>_ , * ( i + n == _<number>_ , * ) > i > i > _<number>_ , * for ( * * != _<number>_ > n > _<number>_ , * n > _<number>_ , * n , * n > _<number>_ , * n > _<number>_ , * n > _<number>_ , * n >
or ( int sy = _<number>_ ; ; % _<number>_ < + + _<number>_ = _<number>_ < ) [ + _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [ _<number>_ ] < ) [
nt y , cy = _<number>_ + _<number>_ + l + _<number>_ ;
rintf ( _<string>_ , cy ) > > > > > > _<number>_ no no > x no no > x no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no
y = n / _<number>_ ;
y = n % _<number>_ ;
f ( temp % sum == _<number>_ )
= p + _<number>_ ;
hile ( _<number>_ ) {
nt sum1 = _<number>_ ;
nt n , i , t = _<number>_ { ;
f ( i % sum == _<number>_ {
nt no1 = <unk> ( n1 % _<number>_ ) ;
o1 = no1 ;
nt n , d , i ) sum < _<number>_ sy ;
rintf ( _<string>_ , ( p - _<number>_ , n ( e ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x - _<number>_ ( ] ( x
rintf ( _<string>_ , ( y } _<number>_ ( int int ( int ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_ ( - _<number>_
nt n , s , i ;
nt a = _<number>_ , b = _<number>_ ;
= ( n % _<number>_ = _<number>_ ( number int _<number>_ x _<number>_ x - _<number>_ x x x ( ] sum int [ N int _<number>_ ] ] ] ] ] ] ] ] ] ] ( [ [ [ [ [ ) } _<number>_ ] }
or ( i = _<number>_ ; sum != _<number>_ ; int int s number s { { s = _<number>_ ; s = = = = _<number>_ < = = _<number>_ < = = _<number>_ < = = = _<number>_ < = _<number>_ ] < = _<number>_ [ = _<number>_ > sum } ) % _<number>_ > _<number>_ < + _<number>_ < + _<number>_ ;
ear ++ ;
= _<number>_ ;
nt n , t , s = _<number>_ ( { _<number>_ = _<number>_ x check no _<number>_ int check no _<number>_ int check no - _<number>_ int } ) return _<number>_ ) ) return _<number>_ ) ) return _<number>_ ) ) ) return
f ( ( j % a ) == _<number>_ , n , n , ( n string ( ( n string ( ( n - n , ( ( n string ( ( n - n , ( ( n string ( ( n - n , ( ( n string ( ( n - n , ( ( n string ( ( n - n , ( ( n string ( ( n - n , ( ( n ) - _<number>_ , ( n string ( ( n string ( ( n - n , ( ( n
f ( ( i % sum ) == _<number>_ ) {
= _<number>_ ;
rintf ( _<string>_ , a % sum year year sum { if ( _<string>_ , i , ! i , }
hile ( i % s != _<number>_ s {
hile ( i % s != _<number>_ , sum ( , + } _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ( n ( n } a ( n } _<number>_ ( n } _<number>_ ( n } _<number>_ ( n } _<number>_ ) ) ) ) ) ) ) i i i i i
f ( i % d == _<number>_ ( ( ) number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number < _<number>_ ;
rintf ( _<string>_ , i ) ;
or ( i = _<number>_ ; ; n ++ = _<number>_ < } ) i ++ = _<number>_ > s > s < ) j ++ = _<number>_ < ) j ++ = _<number>_ < ) j ++ = _<number>_ < ) j ++ no no no no no no no no no no no no no no no no no no no = _<number>_ ; % _<number>_ ; %
= s + d ;
= i + _<number>_ ; } i = = _<number>_ < int int sum number number < _<number>_ < int int = [ _<number>_ ] > { _<number>_ = char char char + a > [ _<number>_ ] + _<number>_ + char char - char char + a > = _<number>_ + _<number>_ + _<number>_ + _<number>_ + char char char + a > [ _<number>_ ] + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ > [ _<number>_ ] + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ > [ _<number>_ ] + _<number>_
um = sum + i + _<number>_ ; { + _<number>_ ( ( ( ( ( ( ( ( ( ( ( int ) + _<number>_ ) sum ) ) ) ) ) ) ) ) i i sum number _<number>_ ) < + _<number>_ < int int a < int + + _<number>_ < _<number>_ ) < int int int }
nt a3 = a / _<number>_ ;
printf ( _<string>_ , sum ) ; break < < _<number>_ < ] < j < ] < j < ] > n ( p i i i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p i ( p
ount = _<number>_ ; }
hile ( i % s != _<number>_ ) {
= s + r ; }
hile ( y != _<number>_ ) > _<number>_ ;
or ( i = _<number>_ ; i { sum != _<number>_ > , , = _<number>_ < = _<number>_ < , ) > > _<number>_ > ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( , int , , <START_BUG> ++ number < > _<number>_ < { { x ++ < a number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
canf ( _<string>_ , & no ) ;
hile ( x ) {
f ( j % sum == _<number>_ number number b ( % a [ char char [ char char [ == _<number>_ a a a a a a ) > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a > _<number>_ a a > _<number>_ a > _<number>_ a a > _<number>_ a > _<number>_ a a > _<number>_ a > _<number>_ a a > _<number>_ a a
f ( ( s % i ) == _<number>_ [ S ] , <unk> number _<number>_ , + _<number>_ , + _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ( n } _<number>_ ( n } _<number>_ ( n } _<number>_ ( + _<number>_ ) ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ (
hile ( sum ) {
rintf ( _<string>_ , i ) > ; string = _<number>_ < < _<number>_ = % _<number>_ < + _<number>_ ) + ( n - i == _<number>_ ) ; break ; i ly _<string>_ ; i ly _<string>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ ( + y == _<number>_ (
== _<number>_ ; }
um = sum + rem > int { }
nt n , y , string > a < = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ > sum2 > sum2 > sum2 > sum2 ;
or ( i = n < n < , > , + _<number>_ ; i ++ ( + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % + _<number>_ ( % ; % ++ ( s ( s
nt i = n ;
hile ( rem ) {
f ( year % sum == _<number>_ ( year number _<number>_ ) , count > _<number>_ ) {
hile ( j % s != _<number>_ ) %
rintf ( _<string>_ , year ( ) , ) < n = _<number>_ > , , , , ) > i > n ( number ( n temp sum == _<number>_ , ) q , ) ;
+= ( ( _<number>_ } < < _<number>_ ) ! sy % _<number>_ ( > > _<number>_ , > ; a = y s ; a = y b - y ; a += y ; a += > number number number number number number _<number>_ ; a += number number > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
f ( y < _<number>_ ( % < _<number>_ number = _<number>_ = / _<number>_ = / _<number>_ number < _<number>_ = _<number>_ = _<number>_ = + _<number>_ = / _<number>_ = / _<number>_ = / _<number>_ = / _<number>_ = / _<number>_ = + _<number>_ = * < _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = + _<number>_ = / _<number>_ = _<number>_ = _<number>_ = _<number>_ , < _<number>_ = _<number>_ = _<number>_ = _<number>_ , < _<number>_ = _<number>_ = _<number>_ = _<number>_ , < _<number>_ = _<number>_ = _<number>_ ,
nt by , d ;
rintf ( _<string>_ , i ( int , number number ( ( ) ( p ( p ( sum ( sum ( sum ( _<number>_ ( _<number>_ ( n { + a == _<number>_ = _<number>_ = _<number>_ ; ; ++ a ; ; ++ a ; , _<string>_ s ;
um = sum + d ;
ut = ( q + _<number>_ s s n n n n n n n n n n ) > { , { , { , { , { , { , { , { , { , { , % _<number>_ sy i > { { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { , { ,
f ( ( year % t number ( i number n = _<number>_ = _<number>_ = { _<number>_ , _<number>_ number } n number a number { for ( i % , c ( , i number == _<number>_ ( sy a a i ( number a ( number a ( number a ( number a int sy ( sy a ( number a ( number a ( number a int sy ( sy a ( number a ( number a ( number a ( number a int sy ( sy a ( number a ( number a ( number
har sy ;
nt n , ly , sy , a )
canf ( _<string>_ , & year ) , sum > = _<number>_ < = _<number>_ < = _<number>_ = _<number>_ ;
nt year ;
= y / _<number>_ ; }
rintf ( _<string>_ , i ) ;
lag = _<number>_ ;
hile ( z > _<number>_ , count sum )
rintf ( _<string>_ , sum2 ) > { / _<number>_ ; / _<number>_ ; / _<number>_ ; / _<number>_ > % _<number>_ > % % _<number>_ > % % _<number>_ > + + _<number>_ > % + _<number>_ ; & for ( a > a n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
nt n , a , b , c , d , f , f , s ;
= y + _<number>_ ;
hile ( y > _<number>_ y
rintf ( _<string>_ , z n n ) < ( ( ( ( ( ( ( ( ( ; = _<number>_ = _<number>_ = _<number>_ = % ) = _<number>_ , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( for _<number>_ , ( ( ( ( ( ( ( ( ( ( ( ( for ( i , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( for _<number>_ , ( ( ( ( ( (
= ( n / _<number>_ ) z + _<number>_ < < ) < _<number>_ < < < ) < _<number>_ < , , n < _<number>_ < + _<number>_ < n number _<number>_ < + _<number>_ < n number _<number>_ < + _<number>_ < , , , , , , , , , b < ) < _<number>_ < + _<number>_ < b number _<number>_ < + + _<number>_ < + _<number>_ < + _<number>_ < b number _<number>_ < + _<number>_ < b number _<number>_ < + _<number>_ < % _<number>_ < b number _<number>_ < % _<number>_
nt n , k ;
f ( k > n ) {
= n - _<number>_ * ( b a _<number>_ number string number number number ) = ( i i i i i i i i i i i i i sum sum sum ( + _<number>_ number string number number _<number>_ number number number = _<number>_ number string ) = + _<number>_ a = _<number>_ = + _<number>_ a = _<number>_ = _<number>_ = _<number>_ = _<number>_ = + _<number>_ a = _<number>_ = _<number>_ = _<number>_ = + _<number>_ a = _<number>_ = _<number>_ = + _<number>_ a = _<number>_ = _<number>_ = + _<number>_ a = _<number>_
um = a + b + c * d = k = k = k } - i } int int int int i , k = k = k = k = k } - _<number>_ {
nt a = ( n % b b - s ) > int int int > int int int ) - _<number>_ > + _<number>_ > * / / _<number>_ > * / / _<number>_ > a > + _<number>_ > + _<number>_ ;
or ( i = n + _<number>_ ; , a } == _<number>_ ; , ++ b b b b n n n n n n n n n n n n n n n n , i ++ i i i )
um = sum + d ; p = sum % + + + + + + + + + + c < + , a < n } ( n % n ( ( % + + _<number>_ ( ) ( + a = a = a + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
f ( y % sum == _<number>_ ) string
= p + _<number>_ ; int sum number p a > _<number>_ > n > n { n { a = a * , * , > _<number>_ > a ) c = n a + _<number>_ > ; {
um = sum / _<number>_ ; { / _<number>_ ; d = , & & & ( , { + _<number>_ c ( ( int { c c c ( ( ( { , }
rintf ( _<string>_ , year ) ;
rintf ( _<string>_ , sy ) ;
f ( y > _<number>_ ) {
printf ( _<string>_ , c ) < < > _<number>_ > n = _<number>_ > + _<number>_ =
rintf ( _<string>_ , c ) ; }
= ( c - ( b a c = * _<number>_ ) i ) {
hile ( a != _<number>_ ) {
f ( s == _<number>_ )
ux = by ( by % int n ) ;
nt by , digsum , digsum , } ;
nt n , i , sum , { % _<number>_ ( a int % _<number>_ ( scanf ( _<number>_ n ( return _<number>_ y return _<number>_ y y y _<number>_ y y y _<number>_ n n n n n n n n i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i )
i ++ ;
nt i , sum ;
nt d = _<number>_ ;
rintf ( _<string>_ , y ) ;
= p + _<number>_ ; { }
rintf ( _<string>_ , p * ( ly sy c a a a a a a a a a a , = _<number>_ , = _<number>_ , = _<number>_ , = _<number>_ ;
rintf ( _<string>_ , yr ) ; }
hile ( <unk> != _<number>_ ) {
hile ( i % s == _<number>_ number year ) ) ) a = _<number>_ ; - _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > , , , , a = _<number>_ > _<number>_ n n n n n n n n n n n n n = _<number>_ n n n n n n n n n n n = _<number>_ n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
nt n , i , r ( n ( , int number = _<number>_ + _<number>_ , / / / _<number>_ , / _<number>_ , n , / / _<number>_ , a , n number / _<number>_ , / _<number>_ , a , a number _<number>_ , n , sum ) ;
nt by , ly , tmp < aux sum ;
f ( i / sum == _<number>_ number ( < _<number>_ ( ( number + ) == _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number )
= sum - _<number>_ * ( n / _<number>_ ) ;
nt a , b , c , d , i , sum n n , d ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
f ( y < _<number>_ ) {
f ( q % o == _<number>_ ) string = ) x = / ( / _<number>_ ; * i ; * i == _<number>_ ; <END_BUG> ; * i { main ) > i > _<number>_ ; <END_BUG> > i ; <END_BUG> = i > _<number>_ ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ; <END_BUG> < i ;
mp = tmp / _<number>_ ; }
hile ( aux < _<number>_ ) {
rintf ( _<string>_ , y ) ;
nt sum = _<number>_ ; int y < _<number>_ ; tmp = n % number ;
ear ++ ; }
hile ( year % sum != _<number>_ )
h = getchar ( ) ;
hile ( i % sum1 != _<number>_ = _<number>_ p p , number , )
y = by / _<number>_ ; }
== _<number>_ ; } }
or ( i = _<number>_ ; , sum % != _<number>_ ; n ++ ) year , ( ( number s _<number>_ a a int ( number int ( number a s a a ) a ) a , ( number , number a a a a sum sum sum sum sum sum ( ) ( ) ( ) = - _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( +
= d - _<number>_ * ( n / _<number>_ ) ;
= a + b + c + d ;
ux = by - ( by * by number , i ( , % _<number>_ y = _<number>_ = i = i while ;
= _<number>_ , y = _<number>_ ;
rintf ( _<string>_ , i ) < ;
= ( _<number>_ ) % ;
loat year , year ;
um += sum % _<number>_ ;
rintf ( _<string>_ , year ) = _<number>_ > ;
f ( year % sum == _<number>_ number = _<number>_ )
rintf ( _<string>_ , p * tmp s by o ;
rintf ( _<string>_ , p , n { % ) < n > n > n i - _<number>_ ;
rintf ( _<string>_ , sum % sum == _<number>_ + _<number>_ g e g g g g g g + s == _<number>_ + _<number>_ + , _<number>_ + _<number>_ + , _<number>_ + _<number>_ + , _<number>_ + _<number>_ + , _<number>_ + _<number>_ + s + _<number>_ + _<number>_ + , _<number>_ + _<number>_ + s + _<number>_ + _<number>_ + , _<number>_ + _<number>_ + s + _<number>_ + _<number>_ + , _<number>_ + , _<number>_ + _<number>_ + s + _<number>_ + _<number>_ + , _<number>_ + , _<number>_ + _<number>_ + , _<number>_ + _<number>_
loat x , y , z , t , * _<number>_ ( y ( * _<number>_ ;
nt n , a , ( ( y ) p n n o n n n x > _<number>_ ) < + _<number>_ < _<number>_ < _<number>_ , - _<number>_ < _<number>_ + _<number>_ + _<number>_ + _<number>_ < _<number>_ + _<number>_ + _<number>_ + _<number>_ < _<number>_ + _<number>_ + _<number>_ + _<number>_ < _<number>_ + _<number>_ + _<number>_ < _<number>_ + _<number>_ + _<number>_ < _<number>_ + _<number>_ + _<number>_ < ) < a < ( ) - a < ( ) - ( ) - a < ) < ( ) < ( a % ( (
or ( i = _<number>_ ; i >= _<number>_ ) / ( , , , % _<number>_ , e ++ , e , e ++ , e , e , )
f ( n % m == _<number>_ )
nt sum = ( a + _<number>_ + , _<number>_ p < _<number>_ ) < ( ) ;
nt x , y , z , t , r , e , q , q ( = / _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + _<number>_ + p ;
f ( g % q == _<number>_ )
rintf ( _<string>_ , _<number>_ i string number int _<number>_ n = _<number>_ = _<number>_ = _<number>_ number - _<number>_ ( = _<number>_ ( = _<number>_ ( ) number _<number>_ number number number number number number number number number number = _<number>_ = ( _<number>_ ) = _<number>_ = * _<number>_ = * _<number>_ = * _<number>_ = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ ) + , , = _<number>_ = _<number>_ = * _<number>_ = * _<number>_ = number * _<number>_ = * ( ( _<number>_
= n % _<number>_ < string ; [ , , n m number i m ;
nt i , n , a [ _<number>_ sum % _<number>_ - printf ( b b = _<number>_ , % ( ) > _<number>_ ) ;
= n - ( n * }
or ( q = _<number>_ ; ; q ++ ; = ++ ( y f ( ( y f number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
= y + _<number>_ ; } }
nt byear , lyear = _<number>_ , n > _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ) < _<number>_ < _<number>_ < _<number>_ < _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ( ( + _<number>_ ( ( + _<number>_ ( f e _<number>_ ( ( + _<number>_ ( f e _<number>_ ( ( + _<number>_ ( , _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_ ( + _<number>_
= n % _<number>_ ;
o ++ ; }
f ( count % p ) == _<number>_ ) {
or ( i = _<number>_ ; i >= _<number>_ ; i = i + _<number>_ ) {
f ( sum % sum == _<number>_ )
nt n , y , i , sum < _<number>_ ) = _<number>_ = _<number>_ = _<number>_ number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ , e , e , e , e , e , e , e , e , ) , e , ) , e , ) , ) , e , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) , ) ,
or ( i = _<number>_ < _<number>_ ; < x ; { { { {
f ( i % sum == _<number>_ )
= a / _<number>_ ;
f ( ( y % ( + c + z ( r g x ( + z ( * n ( / a ( % d ( ( n ( / a ( % c ( % d ( ( n ( / a ( % c ( % d ( ( n ( / a ( % c ( % d ( ( n ( / a ( % c ( % d ( ( n ( / a ( % c ( % d ( ( n ( / a ( % c ( % d ( (
rintf ( _<string>_ , cy ) ;
o1 ++ ;
o1 ++ ; }
nt n , i = _<number>_ ;
or ( i = _<number>_ ; i <= _<number>_ ; i ++ ) {
nt k , i , n , / ) a a a , + _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < i ;
rintf ( _<string>_ , year ) ; }
rintf ( _<string>_ , n , n ) ; n , z & int int ; int s ( / , _<number>_ ; int int - , == _<number>_ ; = scanf ( _<string>_ y > - - , - , + a ) = _<number>_ ) = _<number>_ = { / _<number>_ = { % _<number>_ = { ( } ) = _<number>_ = { ( c ) = _<number>_ = { ( c ) = _<number>_ = { ( c ) = _<number>_ = { ( c ) = _<number>_ = { ( c ) = _<number>_ =
= a + b + c ;
rintf ( _<string>_ , _<number>_ * y + x % c ) % ( i { _<number>_ ) i <= _<number>_ && } <= _<number>_ , ] <= _<number>_ , ] i <= _<number>_ && }
hile ( ( j % a ) != _<number>_ ) }
nt y , i , s ;
nt i , y , s , s ;
rintf ( _<string>_ , y ) ; sum number _<number>_ ( , i = _<number>_ y n n n + = _<number>_ + _<number>_ + ; b + * ) < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
nt n , y , i , % > _<number>_ ;
um = sum + & a [ i ] ; }
or ( i = _<number>_ ; i % s != _<number>_ ; s ++ ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
nt k = sum + m ;
hile ( n > _<number>_ ) {
nt a , b , c , p , count ;
rintf ( _<string>_ , g , e < int { n < _<number>_ < <END_BUG> ( { ;
nt e = birthyear / _<number>_ ;
rintf ( _<string>_ , year ) ;
or ( i = z ; ( i % sum == _<number>_ ) < _<number>_ y ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) ; ) ] = y ; ) ] = y ; ) ] = y ;
rintf ( _<string>_ , p * sum sum sum n + , % % _<number>_ year , y , n sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum sum * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , * , *
hile ( p < sum < _<number>_ sum sum d n n sum sum sum sum i i ) {
or ( i = _<number>_ ; i < ) r ++ > _<number>_ ) {
nt n , d , i = _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ % _<number>_ % _<number>_
ear = _<number>_ ;
rintf ( _<string>_ , i ) ;
f ( b % s == _<number>_ , p ( = _<number>_ ( i printf _<number>_ n2 _<number>_ ( ) , }
nt i , s , b ; % sum string A % _<number>_ > S number = _<number>_ number + _<number>_ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
or ( i = _<number>_ ; ; a ++ ) +
= n % _<number>_ ;
= sum / sum > > > , i > ) > + i < , ] ;
nt n , m , } > {
canf ( _<string>_ , & a [ _<number>_ ) / n ( = _<number>_ ) ) number ( = = _<number>_ / = = _<number>_ / = _<number>_ / = _<number>_ ) number number number _<number>_ number * = _<number>_ number number * = _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number number number number _<number>_ number number = _<number>_ number
um = x [ i ] ; }
[ i ] = x [ i ] % sum + sum + ;
rintf ( _<string>_ , y ++ ) ; { { x ++ < ] < [ [ [ [ [ + _<number>_ % ) > ) = _<number>_ > ) = > > string > + _<number>_ > ) = + _<number>_ > , + _<number>_ > + _<number>_ > , + _<number>_ > + _<number>_ n > , + / _<number>_ > + _<number>_ n > , + / _<number>_ > + _<number>_ n > , + / _<number>_ > + _<number>_ n n n n n n n n n n n n n n n n n
um = sum + d ; }
unk> / _<number>_ ; } sum = _<number>_ > _<number>_ < _<number>_ = _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ; j = _<number>_ ; j = _<number>_ ; j = _<number>_ ; j = _<number>_ ; j = _<number>_ ; j = _<number>_ < _<number>_ < > _<number>_ < > _<number>_ < _<number>_ < _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
f ( year % <unk> == _<number>_ number number number number ( ;
hile ( yr % sum != _<number>_ = )
um = sum + ( ( ( ( , } _<number>_ , number , number , number ( ) ( number int number = _<number>_ i i i & _<number>_ i i i i & number i & ) } * ) { ) } ) sum [ )
++ ;
lse if ( ( _<number>_ % i ) == _<number>_ ) main ( _<string>_ ) ;
f ( ( _<number>_ % i ) == _<number>_ ( number p - _<number>_ ( number p - _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ ( number p _<number>_ (
rintf ( _<string>_ , luckyyear number number == _<number>_ ( ) ) < <START_BUG> > i > <unk> > <unk> < <unk> ; if ( [ [ _<string>_ ] ( <unk> n { int int ( [ n - sum - _<number>_ { , [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ , ] { , [ _<number>_ ] { , [ _<number>_ ] & + _<number>_ & + )
rintf ( _<string>_ , luckyyear = <unk> ; main ( _<string>_ z y y ) ) < n y > _<number>_ ( y n - i == _<number>_ ; if ( + i == _<number>_ ; if ( + i == _<number>_ ; if ( + i == _<number>_ ; <START_BUG> ( [ <START_BUG> ] ( [ <START_BUG> { ( [ ] - ] == _<number>_ ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ + , ] & i - _<number>_ - / _<number>_ - c - c - / _<number>_ - ,
= p + _<number>_ year year year < _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; + _<number>_ ; rem = n - _<number>_ > > _<number>_ > ) r = ) + _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ ) > z / _<number>_ > - _<number>_ > > _<number>_ > = _<number>_ > = z / _<number>_ >
rintf ( _<string>_ , p p ) ;
rintf ( _<string>_ , ( i - _<number>_ number number number number number number number ] number , , _<number>_ ) ) = = _<number>_ = _<number>_ = _<number>_ =
um = sum + rem ;
= _<number>_ ;
hile ( x >= n ) { = number ; , sum = _<number>_ > = _<number>_ > = = _<number>_ < = = , , sum > , , , > , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ( i >= ( ( ( ( ( ( = _<number>_ ) ;
= y / _<number>_ , = = = _<number>_ int ) ( number n n n ) , ( y z z = _<number>_ = _<number>_ = ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( y ( y ( y ( _<number>_ ) sum , y ( y ( y ( _<number>_ , i ( y ( ( ( ( ( ( ( ( ( ( ; ; ; ;
= s + sum2 > [ , ] ;
um1 = z / _<number>_ ;
or ( j = _<number>_ ; int { ) { ; z ++ ) % int ) string < _<number>_ > , i - sum != _<number>_ > y > y ) n ++ ) n ++ ) n } - sum != _<number>_ > , y > , - _<number>_ < ( ( s = _<number>_ , + ( string ++ , + i , + string , + string , [ [ [ [ [ [ [ [ [ [ [ [ i ++ ] ( + _<number>_ ( + _<number>_ ( % a - _<number>_ ( +
or ( j = _<number>_ < _<number>_ ; sum year number != _<number>_ ; j ++ sum n n n ) { }
ear ++ ; }
ear += _<number>_ ; }
rintf ( _<string>_ , x1 string double % % sum , while ( while ) ;
nt c = b % _<number>_ ;
nt n , r , i , j , p ;
nt t , h , te , o > , = > = _<number>_ < _<number>_ ;
nt n , y , sum , i ( i number - _<number>_ n n number - ) > - j > - , - , - ) > ) > i > q > _<number>_ n n number - i > - - _<number>_ n n n number - _<number>_ n n number - i > - _<number>_ n n number - _<number>_ n n number - i > - _<number>_ n n n n n number - _<number>_ n n number - - ) > ) > > > > q number > q number number number >
hile ( l % m != _<number>_ ) -
f ( ( i % j ) == _<number>_ , n , n , n ( j r j ( j ) == _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_ ( j r _<number>_
nt dob , sum = _<number>_ , year i , , ( number , sum b number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ number _<number>_ = _<number>_ = _<number>_ = _<number>_
hile ( dob > _<number>_ ) {
f ( i % s == _<number>_ )
f ( i % n == _<number>_ )
um = sum + n % _<number>_ ;
ucky = _<number>_ + sum ( _<number>_ % , , ) number > _<number>_ )
ucky = _<number>_ + sum - ( _<number>_ lucky z b b b b b , ) > sum number = _<number>_ } = _<number>_ } + i string i = _<number>_ } + sum i - _<number>_ = _<number>_ = _<number>_ = ( _<number>_ y y number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number _<number>_ y number sum number number number number number -
or ( i = _<number>_ ; i < _<number>_ ; { { { { { <unk> = _<number>_ < <unk> < _<number>_ < <unk> < _<number>_ < <unk> [ j ] [ j ++ [ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ [ j ++ ( ) ++ [ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++ j ++ [ _<number>_ ++
nt y , r , i , y ( ) < a < ) < ( ( p else i j j , n , ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ i j , n j , n , n , n , n , n , n , n , n , ( ( ( ( ( ( ( ( ( ( ( ( ( _<number>_ i + _<number>_ , n , n s , ( ( p else i j , ( ( p else i j , ( (
nt n , i , sum = _<number>_ , ( number ) = _<number>_ ;
canf ( _<string>_ , n ) ;
= ( c - a ) / _<number>_ ; C = ) ;
rintf ( _<string>_ , sum2 ) ; }
rintf ( _<string>_ , sum2 ) ; }
um = sum + rem ; }
hile ( r > _<number>_ ) {
rintf ( _<string>_ , z ) ;
or ( ; n != _<number>_ ; n += _<number>_ )
= _<number>_ - i ;
= j + _<number>_ ; }
nt n , a , l , l > , = _<number>_ < - _<number>_ = _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ , y < _<number>_ < _<number>_ , y < _<number>_ < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y < _<number>_ , y <
= p + m ; }
um = sum + i ;
hile ( p * p < _<number>_ ) s < _<number>_ ( ) {
um / _<number>_ ; }
nt birthyear , luckyyear , i ( number > _<number>_ ( number d number ( ) + _<number>_ number number number - _<number>_ number ) )
nt birthyear , luckyyear , i , d number int int sum > _<number>_ ;
or ( i = m ; i >= _<number>_ ; j ++ y ( sum = ( i ++ ) ) ) {
or ( i = m ; i >= _<number>_ < ( ( tmp ++ = _<number>_ , by ++ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
= n + m ; s ( < < ) < < = ) < > > > > > > > > , , printf ( _<string>_ s & = = = = = < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <
= n % _<number>_ ;
or ( n != _<number>_ ) +
= d + r ; }
nt i , y , s ( l sum sum sum sum ) * _<number>_ ;
or ( k = _<number>_ ; k < _<number>_ ; k ++ ) {
r = yr + sum ; }
f ( ( i % s ) == _<number>_ ) {
rintf ( _<string>_ , d ) ;
rintf ( _<string>_ , sum * ( _<number>_ / sum ) + ( ( ( _<number>_ % ( } _<number>_ % ( } _<number>_ % ( } _<number>_ number _<number>_ number i number } ;
hile ( i != _<number>_ ) = _<number>_ n ) <
nt n , m , m i i i i i i , number ;
hile ( year % sum != _<number>_ number l l l l )
f ( ( i % sum ) == _<number>_ number number number n tmp == _<number>_ ( ( & ( & ( _<number>_ ( % rem _<number>_ ( & & ( ( & & ( ( _<number>_ ( & ( _<number>_ ( & ( ( & ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( ( & ( ( _<number>_ ( & ( _<number>_
or ( int i = _<number>_ ; ; i ++ n n tmp n tmp ( i - int n2 ( ( ( n2 - s ( n2 ++ ( ( ( n2 , n ++ ( ( n2 - s ( n2 ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( ( n2 , n ++ ( (
hile ( lucky < year % <unk> != _<number>_ number number number number )
rintf ( _<string>_ , ( n + _<number>_ ) * sum ) ; string
rintf ( _<string>_ , ( p + _<number>_ ) ) ; }
= d - r ; { { { { { { { }
ouble s ;
hile ( n != _<number>_ )
um = sum + tmp ;
or ( int tmp = _<number>_ ; tmp != _<number>_ ; tmp ++ n2 number number , ( ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( sum ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( ) ++ , ( )
f ( i % y == _<number>_ ) ) ) ) ) {
or ( i = n + _<number>_ ; { { { { sum string sum == _<number>_ ; }
nt i , sum ;
or ( x > n ) {
= y / _<number>_ + ( y & _<number>_ number = = , s ;
rintf ( _<string>_ , _<number>_ + s - > _<number>_ ( = = _<number>_ ) number ( ;
f ( i % ( a + b + } = % a1 = _<number>_ = _<number>_ = _<number>_ ) ) ) ) ) ) == _<number>_ ) > _<number>_ ) ) for ( ) for ( ) for ( ) for ( ) for ( ) for ( ) for ( ) % number > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > ) b = _<number>_ > string > _<number>_ = _<number>_ > ) b - _<number>_ > string > _<number>_ = _<number>_ > ) b - _<number>_ > string > _<number>_
nt d = _<number>_ % sum ;
+= ( ( y - _<number>_ ) / ; c = ) <END_BUG> number number number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( = = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number = _<number>_ number =
+= ( ( y - _<number>_ ) / n int _<number>_ = _<number>_ = _<number>_ ( > > number + _<number>_ ( number + _<number>_ ( number + _<number>_ ( number ] ( ( number + _<number>_ ( number ] ( ( number + _<number>_ ( number ] ( ( number + _<number>_ number > _<number>_ number > number number , > ( , > _<number>_ , > , > ( , > _<number>_ , > ) , > ( , > _<number>_ , > _<number>_ , > _<number>_ , > _<number>_ , > _<number>_ , > _<number>_ ,
hile ( sum < _<number>_ ) {
rintf ( _<string>_ , sum ) ; }
rintf ( _<string>_ , sum ) ; } }
f ( ly % sy == _<number>_ ) {
y = g ; }
rintf ( _<string>_ , i ) ;
hile ( p % r != _<number>_ ) n = _<number>_ ; } } int
f ( year % digsum ( birth ) == _<number>_ > { % ( }
f ( year % digsum ( birth ) == _<number>_ < int int int , , , ) j ; ;
rintf ( _<string>_ , _<number>_ * y + x printf > _<string>_ ;
um = sum + d ; }
nt birthyear , luckyyear , i , sum > _<number>_ = _<number>_ = _<number>_ number number ) number ;
or ( i = _<number>_ ; i % + sy != _<number>_ < , } ) a ++ = _<number>_ > _<number>_ ( < a , < _<number>_ year year < < _<number>_ year year year year year - _<number>_ year year - < _<number>_ ( < _<number>_ year - < < _<number>_ year year ) ; ; ; ; ; number ++ int a = _<number>_ , number != _<number>_ ; number ++ int a = _<number>_ ;
rintf ( _<string>_ , a % sum == _<number>_ ) = _<number>_ = _<number>_ = _<number>_ =
nt a , i , b , sum = _<number>_ ( = = _<number>_ ( = = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ number = _<number>_ number ( = = _<number>_ number number number ( number ( printf number = ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( = _<number>_ ( =
or ( i = _<number>_ ; i < _<number>_ ; for ( for ( else else = _<number>_ ; else < _<number>_ ; else else = _<number>_ , else = _<number>_ ; else = _<number>_ ; else = _<number>_ ; else = _<number>_ ; else = _<number>_ ; else = _<number>_ ;
or ( count = _<number>_ ; count != _<number>_ < = _<number>_ < } ) * = _<number>_ ( year + year number _<number>_ number year number number _<number>_ number number number number _<number>_ number number number number _<number>_ number number number - _<number>_ number number number number number _<number>_ number number number - _<number>_ ) % _<number>_ ; %
canf ( _<string>_ , & by ) ;
or ( i = _<number>_ ; by != _<number>_ < < _<number>_ < & / _<number>_ ( + _<number>_ int ( i ++ int ( int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int , , else [ ] , ( n , ( ( ( _<number>_ , ( ( ( _<number>_ - ( + _<number>_ , ( n ++ , ( n , + _<number>_ , ( n , + _<number>_ ,
um = sum + _<number>_ ; }
um = sum + _<number>_ ; }
rintf ( _<string>_ , z ) ;
hile ( z % sum == _<number>_ a % _<number>_ , ( ) sum ( sum sum _<number>_ b x ) ;
r ++ ;
hile ( sum % sum != _<number>_ ( ( ( n } n ( number { _<number>_ ;
rintf ( _<string>_ , a % by , % string ) < { + _<number>_ < i < for ( i ( s for ( b for ( i ( }
= i % _<number>_ ;
= i % _<number>_ ;
= r + m + n + b ;
nt x , y , z = _<number>_ , r ;
or ( i = c ; { , + + i != _<number>_ > ( ( ) + _<number>_ ) = _<number>_ = _<number>_ ; a ++ n n n n n n , }
rintf ( _<string>_ , j ) number number number number ( ) ) ) ;
reak ; } ; } ;
nt sum = _<number>_ , b = _<number>_ , i ;
f ( i % sum == _<number>_ )
nt a = _<number>_ , n > _<number>_ + b < , n ;
b = b * _<number>_ < a < ) ;
or ( j = n ; j > n ; string ++ , z ++ ( ( n - a ( n ++ ( ( , , { { { { { , }
or ( b = _<number>_ ; ( k % a ) == _<number>_ ; + + + _<number>_ ( + sum ( + _<number>_ ( + sum ( + sum ( {
or ( b = _<number>_ ; ( k % a ) == _<number>_ ; ( + + _<number>_ ) ) {
nt by ;
= i / n ;
= sum / n ;
canf ( _<string>_ , & y [ & } / _<number>_ ) ;
canf ( _<string>_ , & y { + + } _<number>_ p ) ;
hile ( n == _<number>_ ) y
= ( yr % sum ) ;
rintf ( _<string>_ , yr ) ; }
hile ( x1 != _<number>_ ) int C < _<number>_ n - _<number>_ ) else
nt i , sum ;
nt year ;
nt k = _<number>_ , b , k ;
rintf ( _<string>_ , k ) ; } }
irth = digsum ( birth ) ;
irth = _<number>_ ;
= ( n / _<number>_ ) < }
rintf ( _<string>_ , s ) ;
hile ( j <= _<number>_ ) {
f ( ( i % sum ) == _<number>_ ; string = _<number>_ no _<number>_ no + _<number>_ x no - _<number>_ x no no no > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_
f ( i >= _<number>_ ) {
rintf ( _<string>_ , p * sum ) > i < a > a > a > a > a > a > a ( k ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a ( a
rintf ( _<string>_ , sum ) ;
or ( i = _<number>_ ; count == _<number>_ > ) k ++ = _<number>_ ) k ++ = _<number>_ ) k ++ = _<number>_ ; n ++ ) } {
f ( i % sum == _<number>_ ( ( r rem * * * * * * * * * * * _<number>_ = _<number>_ = + _<number>_ = * * * * * * * * * * * _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
hile ( p * sum < _<number>_ ) {
hile ( n != _<number>_ ) {
f ( r >= _<number>_ ) {
ear ++ ; }
um = sum + ( <unk> % _<number>_ ) > p > / ( <unk> b b = _<number>_ = _<number>_ = / ( <unk> b < _<number>_ = _<number>_ = _<number>_ = s = s y > > _<number>_ = s = s y _<number>_ = s = s y > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
= y / _<number>_ - ( ( _<number>_ * } = } _<number>_ + > } ) = } _<number>_ + > { _<number>_ { ( } * _<number>_ i number = _<number>_ + > > _<number>_ + > { _<number>_ number _<number>_ number = } _<number>_ + > { _<number>_ { ( sum = } _<number>_ i number string = _<number>_ + > } ) = } _<number>_ i number number = } _<number>_ i number string = } _<number>_ i number string = } _<number>_ i number string = } _<number>_ i number string = } _<number>_
rintf ( _<string>_ , cy ) ;
f ( year % sum == _<number>_ ( = _<number>_ ( number - / _<number>_ ) ) / _<number>_ > number ) +
= t + e + x + d ;
nt x , y , z , { < { }
hile ( i <= _<number>_ ) {
ear = i ;
nt * a [ _<number>_ ] = n ;
rintf ( _<string>_ , n2 ) ;
++ ; }
= ( c - b * _<number>_ string = int ] ) int _<number>_ < i sum sum sum + _<number>_ < i a > / _<number>_ > ) > = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
nt a , y , sum , i ;
= a + s ;
f ( n % i == _<number>_ ) i = _<number>_ < _<number>_ i < _<number>_ , - _<number>_ < _<number>_ n n < _<number>_ n n n < _<number>_ n n n n n < _<number>_ n n n n n n n < _<number>_ n n n n n n n n < _<number>_ n n n n n n n n n n n / _<number>_ n n n n n / _<number>_ n n < _<number>_ n n n n n n n n n n n / _<number>_ n n n n n / _<number>_
rintf ( _<string>_ , year ) < d ;
rintf ( _<string>_ , sum ++ ) ; { { a ++ ; a ++ = { string ++ sum ( sum ( ( ( sum & sum ( sum ( sum ( sum ( sum ( sum ( sum ( _<number>_ ( _<number>_ ( + sum ( ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( ( - sum ( sum ( ( (
rintf ( _<string>_ , y ++ ; a ++ ; [ ) i ++ , , , , , i ; { { { { { { { { { % ( _<string>_ = i ++ ; { % i ( i ( ( ( n string ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
f ( b % s == _<number>_ ( , i ( a string a ) + _<number>_ = _<number>_ number + [ [ [ [ [ [ [ [ [ a ] } ] - _<number>_ ] } - _<number>_ } ;
= <unk> % _<number>_ ;
rintf ( _<string>_ , _<number>_ / sum + n ) = < _<number>_ ; + i ; + i , = _<number>_ > = _<number>_ > = + _<number>_ > = + _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ > = _<number>_ c > = _<number>_ > = _<number>_ > = _<number>_ c > = _<number>_ > = _<number>_ > = _<number>_ c > = _<number>_ > = _<number>_ > = _<number>_ c > = _<number>_ > = _<number>_ > = _<number>_ c > = _<number>_ > = _<number>_ > = _<number>_ c >
nt n , a , b , c , i , sum ;
um = a + b + c + d ;
= d + r ;
nt t , n , i , sum [ _<number>_ ] , i n < _<number>_ ) ;
nt y = _<number>_ ;
= ( y - r ) / _<number>_ = }
f ( luckyyear [ _<number>_ ] >= _<number>_ && by number _<number>_ number ( ( ) + <unk> > _<number>_ ( ( ) + ) == _<number>_ ( ( ) + ) + ) == _<number>_ ( sum > _<number>_ ( ( sum = _<number>_ ( ) ( sum = _<number>_ ( ) ( ) y = _<number>_ ( sum = _<number>_ ( sum = _<number>_ ( sum = _<number>_ ( ) y ) = _<number>_ ( sum = _<number>_ ( sum = _<number>_ ( sum = _<number>_ ( ) y ) = _<number>_ ( sum = _<number>_ ( sum
f ( y % sum == _<number>_ ) {
or ( i = _<number>_ ; i < _<number>_ ; i = , a a a a a a * _<number>_ - s - _<number>_ - s - _<number>_ - s - _<number>_ - s - _<number>_ - s i < _<number>_ - _<number>_ - , _<number>_ - , _<number>_ - s < _<number>_ - s - _<number>_ - s < _<number>_ - s - _<number>_ - s < _<number>_ - s - _<number>_ - s < _<number>_ - s - _<number>_ - s < _<number>_ - s - _<number>_ - s < _<number>_ - s - _<number>_ - s
f ( n % sum == _<number>_ )
++ ; } }
ear ++ ; }
um = sum + a % _<number>_ ;
f ( year % sum == _<number>_ ( ;
mp = tmp / _<number>_ ; }
y = ly + aux ;
= n % _<number>_ ;
nt n , s = _<number>_ , ( < sum number = _<number>_ , a + n ( ( > N sum long i sum sum sum sum sum sum n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
f ( i % sum == _<number>_ ) sum = _<number>_ ; sum number == _<number>_ n n n n n n n n n n n n n n n n n n a = _<number>_ n n n n n n ( sum == _<number>_ ( sum r _<number>_ ( sum r ) ( sum r - _<number>_ ( sum == _<number>_ ( sum r ) ( sum == _<number>_ ( sum r ) ( sum == _<number>_ ( sum r ) ( sum == _<number>_ ( sum r ) ( sum == _<number>_ ( sum r )
or ( i = _<number>_ ; i != _<number>_ ; i ++ ) {
= n % _<number>_ ;
or ( b = _<number>_ ; b % + + + { _<number>_ + _<number>_ ; ) B = number + _<number>_ ; number = number + _<number>_ ;
f ( n % s == _<number>_ , {
= s + ( n } _<number>_ number , , ) ;
nt p , n , r , s , c ;
f ( y % s >= ( ( ( ( ( b % _<number>_ ;
nt i , n , t z = _<number>_ , string ;
rintf ( _<string>_ , a % sum == _<number>_ ) ;
rintf ( _<string>_ , y ) ;
rintf ( _<string>_ , y ) ;
hile ( _<number>_ >= i >= _<number>_ ) {
lse if ( ( y % ( a + c + c = q = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_
nt n , a , b , c , d , e ) > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ , - i > d > d , i > d > d , i > d > d , i > d > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d , i > d
hile ( i != _<number>_ ) ;
= ( n - q ) / _<number>_ ;
rintf ( _<string>_ , _<number>_ + sum ) ;
rintf ( _<string>_ , _<number>_ + c ) ;
f ( y % s == _<number>_ ) {
f ( y % s == _<number>_ ) {
= s + r ; + _<number>_ ; }
ucky = year + year % _<number>_ ;
nt n , b = _<number>_ ;
har y = sum % _<number>_ ;
emp = n ;
rintf ( _<string>_ , count ) ;
f ( i % d == _<number>_ n )
nt i , n , m > _<number>_ ;
rintf ( _<string>_ , s ) , break ; }
rintf ( _<string>_ , s ) ; break ; }
= z + _<number>_ ; }
nt sum = _<number>_ ;
nt n , s = _<number>_ , i = _<number>_ = _<number>_ ) c > _<number>_ number
nt n , i , a , s = _<number>_ ( , ) number _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > _<number>_ > N ) > <unk> > _<number>_ > N > _<number>_ > S > _<number>_ > A > _<number>_ > N > _<number>_ > N > _<number>_ > S > _<number>_ > N > _<number>_ > S > _<number>_ > N > _<number>_ > S > _<number>_ > N > _<number>_ > S > _<number>_ > N > _<number>_ > S > _<number>_ > N > _<number>_ > S > _<number>_
= s + d ;
= ( n / _<number>_ ; & r ) number number number number - _<number>_ number sum , % _<number>_ number number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
hile ( cy >= _<number>_ )
rintf ( _<string>_ , cy ) ( % _<number>_ = * _<number>_ ( = / _<number>_ ; <END_BUG> ; l _<string>_ ;
rintf ( _<string>_ , sum ) = _<number>_ ( count >= _<number>_ i i i n n n n n n n n n n n n + cy + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s + _<number>_ + s +
f ( d >= _<number>_ && + year == _<number>_ + + n c c i i i )
hile ( i % s != _<number>_ = _<number>_ = _<number>_ = _<number>_ ) k < _<number>_ ) {
mp = by ;
y ++ ; }
um = s + k + l + j ;
or ( i = _<number>_ ; } < _<number>_ < i number + _<number>_ number s ++ + * = _<number>_ number s < n ) a ++ ) a
= ( n / _<number>_ ) c _<number>_ * ;
f ( ( i % c ) == _<number>_ )
= s - r ; { s = + i ; + _<number>_ > ; d = n int + + + y > ) > ) > )
or ( year = _<number>_ ; > i ++ number number number ) +
rintf ( _<string>_ , yr ) ; }
rintf ( _<string>_ , yr + _<number>_ ) ; }
or ( b = _<number>_ ; ( k % a ( } printf ( _<string>_ ) r = = _<number>_ ( } printf ( _<string>_ ) r = = _<number>_ ( } printf ( _<string>_ ) printf ( _<string>_ ) r = < _<number>_ ( } printf ( _<string>_ ) printf ( _<string>_ ) r = < _<number>_ ( } a string _<number>_ ( { - _<number>_ ( { printf ( _<string>_ ) r = < _<number>_ ( } printf ( _<string>_ ) printf ( _<string>_ ) r = < _<number>_ ( } printf ( _<string>_ ) printf ( _<string>_
rintf ( _<string>_ , k ) ; } } }
= c + _<number>_ ; } }
hile ( d != _<number>_ )
f ( sum % sum == _<number>_ , lyear = _<number>_ ( _<number>_ , _<number>_ ( ) ( ) a n n ) == _<number>_ ;
year ++ ; }
+= _<number>_ ; }
+= dig ;
= ( n / _<number>_ ) sum + _<number>_ k k number number number number number number number number number number * sum number number number number number number number number - _<number>_ ) * sum number number number number number number number number - _<number>_ ) * sum number number number number number number number - _<number>_ ) * sum number number number number number number number - _<number>_ ) * sum number number number number number number number - _<number>_ ) * sum number number number number number number number - _<number>_ ) * sum number number
f ( sum >= _<number>_ )
hile ( birth % birth != _<number>_ number number number number number ) * c > _<number>_ ) +
f ( i % m == _<number>_ = )
um = sum + x [ ) b b < b - / _<number>_ ) k = } - string + int string + int string + n > ) > n > string + b + % b > % % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b > % b
um = sum + a [ i ] < / _<number>_ , % = y b b f , c , c , c , c f y , c f y , y , y , y , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a f , a
um = sum + y [ i ] > % _<char>_ < sum ) < sum < _<number>_ < , sum number _<number>_ < number i ) < a < y - a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a ) > % a > % _<number>_ > number > _<char>_ * number ) >
nt y , y , cy , ( ( ( ( _<number>_ = _<number>_ = _<number>_ = * _<number>_ = , sum = _<number>_ number number number number number number - _<number>_ i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i [ _<number>_ ] i i
um = x [ i ] ; }
rintf ( _<string>_ , a % sum ) ; }
rintf ( _<string>_ , ( p + _<number>_ number % _<number>_ i i i i i i i i i i i i i i i i i i i i = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ =
= n % _<number>_ ;
or ( i = _<number>_ ; i < _<number>_ ; i = { { { { { { { { { { { { { { { { { { { { _<number>_ {
um = _<number>_ ; } } sum < _<number>_ = _<number>_ number number number - _<number>_ number number - _<number>_ number number - _<number>_ number number - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_ i - _<number>_
= n % _<number>_ ;
um = n % _<number>_ ;
rintf ( _<string>_ , yr ) ; }
f ( y % sum == _<number>_ ; , int int sum , string == _<number>_ = _<number>_ = _<number>_ < _<number>_ = _<number>_ < _<number>_ [ _<number>_ ] > p ) %
rintf ( _<string>_ , y ++ y i ( i ( int ) ) - - - - - - - - - / sum ( ( number number number number ( y ( y ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , ( , (
nt sum = _<number>_ ;
ear ++ ; }
nt sum = _<number>_ , sum = _<number>_ > _<number>_ > _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ < _<number>_ ;
rintf ( _<string>_ , _<number>_ % = _<number>_ , ; main ( _<string>_ , _<number>_ { ) > _<number>_ { > ( _<string>_ , ) ;
rintf ( _<string>_ , _<number>_ + c , ( ( ( ) sum , ) , ) , i , ) ;
nt y = _<number>_ ;
nt n , b , p , sum i ( [ N ] ( } ] i ( sum = _<number>_ i i ) ) ;
= n / _<number>_ , b = d count count count _<number>_ < % _<number>_ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nt n , a , b , c > e > c number d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_ + d + _<number>_
= _<number>_ % b ;
= n / _<number>_ ;
or ( i = _<number>_ ; , >= _<number>_ ; int ] >= _<number>_ ( number = _<number>_ ) < _<number>_ < number > _<number>_ > _<number>_ > ( ( ( ( ( _<number>_ * ( ( ( _<number>_ * ( ( ( ( ( ( _<number>_ * ( ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( ( ( ( _<number>_ * ( (
= i / rem ;
um = sum ( temp % _<number>_ number n number - _<number>_ ) < year < a < _<number>_ ) < a < _<number>_ < _<number>_ int number n ;
rintf ( _<string>_ , lucky + year = _<number>_ number number number number number number number number number number number number number number ) < = < number ) < number ;
= n / _<number>_ ; )
f ( b % s == _<number>_ ( ( n a == _<number>_ ) ) )
= i + _<number>_ ; c > l ( + cy ) ; string = { { a { { ( a % a number number ; string = a { { { { { ( a % a number }
f ( yr >= _<number>_ ) {
or ( k = _<number>_ ; k < _<number>_ ; k ++ , k ++ , k ++ , yr , yr , yr , yr , yr , yr , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk>
rintf ( _<string>_ , & n n n , + + _<number>_ , ) ;
canf ( _<string>_ , & sum ) ;
nt n , r , i , j ;
nt n , r , i , j ;
or ( j = _<number>_ ; < a < , int int s = _<number>_ + y > _<number>_ = _<number>_ > * * * * * * * * * * * * * * * j < j ) {
um = sum + a ;
rintf ( _<string>_ , cy ) ;
y ++ ; }
um = sum + t ;
rintf ( _<string>_ , <unk> number {
har t , s = _<number>_ + sum ;
um = sum + m ; + , year > , y < i ( i ( i ( i ( % _<number>_ ( i ( i ( % _<number>_ ( i ( i ( % int { ( % % { n ( % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
f ( q % o == _<number>_ number n ) m = + n ; printf ( _<string>_ + * s ; <START_BUG> ++ ; <START_BUG> ; cy ++ ; <START_BUG> ; cy ++ ; <START_BUG> < * s ; <START_BUG> == _<number>_ ; <START_BUG> ; cy ++ ; <START_BUG> == _<number>_ ; <START_BUG> ; cy ++ ; <START_BUG> > _<number>_ ; <START_BUG> > * s ; <START_BUG> > * s ; <START_BUG> > _<number>_ ; <START_BUG> > * s ; <START_BUG> > * s ; <START_BUG> > * s ; <START_BUG> > * s ; <START_BUG> > * s
um = sum + _<number>_ ; sum = } , ) > y = y = y = n )
rintf ( _<string>_ , sum ) > { for ( sum = _<number>_ = _<number>_ = _<number>_ = _<number>_ > > > > > > _<number>_ number > a l - _<number>_ number c > / _<number>_ ; - number ) j = _<number>_ ; } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
nt c = n % _<number>_ > & + _<number>_ < { _<number>_ k ) ;
canf ( _<string>_ , & string ;
nt n ;
hile ( s >= _<number>_ ( int number = _<number>_ i i number number number - _<number>_ = _<number>_ ( { _<number>_ ( { * n ( { , n ( q >= _<number>_ ( {
or ( int i = _<number>_ ; < sum ; >
reak ; } } }
rintf ( _<string>_ , sy ) ;
nt g , ly , * , number = _<number>_ = _<number>_ = _<number>_ = _<number>_ ;
nt year , lucky , n j j i j a a a a a a a o int sum number number number number number number number = _<number>_ = _<number>_ = _<number>_ = _<number>_ = _<number>_ > % , ( _<number>_ ) > _<number>_ l l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l > _<number>_ l l
nt year , year , ( int ) for ( }
nt n , k , sum ;
hile ( z % sum == _<number>_ ) s = _<number>_ ; } } {
or ( i = _<number>_ ; i , = _<number>_ > _<number>_ ; z ++ ) }
canf ( _<string>_ , & y [ number sum { ( number while number + ) + _<number>_ + ) < ) < * , < , , , , , a = a = ) < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a < ) < a
loat year , sum , count , ! ! y < { ;
nt year = _<number>_ , year ;
rintf ( _<string>_ , sum1 ) ;
or ( i % sum1 != _<number>_ ) {
rintf ( _<string>_ , year ) ; , check < i > n > ; b = a d ; b = a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > a > string < string <
rintf ( _<string>_ , yr ) ;
canf ( _<string>_ , & by ) ;
nt r = _<number>_ % sum ;
rintf ( _<string>_ , sum * q ) ; }
rintf ( _<string>_ , i ) ; % sum != _<number>_ ; % n != y < y int number int number ; + }
nt t , h , te , % ) & ( int < char ! <unk> < % ( } _<number>_ ;
or ( year = _<number>_ ; year ; > ++ i ) { ++ ) sum ++ ( number ++ number number number number number number tmp tmp tmp tmp tmp > _<number>_ > _<number>_ > ( <unk> - <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> > <unk> , ;
rintf ( _<string>_ , sum ) ;
nt n , s = _<number>_ , a = _<number>_ ( ) < _<number>_ ( int int int ( ( ( ( ( ( ( ( ( _<number>_ i % _<number>_ i ( ( ( ( ( ( year = _<number>_ i - _<number>_ i ( year ( year ( year = _<number>_ ( }
nt n , s , i , % % j > ) ;
rintf ( _<string>_ , digsum ( birth = ) < = = _<number>_ = _<number>_ = _<number>_ = _<number>_ > ( ( ( ( ( ( , = _<number>_ = _<number>_ = * + > number = _<number>_ = * + > number = _<number>_ = * + > number = _<number>_ = * + > tmp > tmp no no no no no no no no no > , > , n > , > , > , > , > , > , > , > , > , > , > , > ) = _<number>_ =
hile ( j % s != _<number>_ y y ) year > _<number>_ ) ,
heck ( no ) ;
= n / _<number>_ ; }
rintf ( _<string>_ , i , n number number > sum ( number ( i number == _<number>_ number ( , ! + + + + { break < {
or ( ; ; i ++ ) sum ++ number + _<number>_ ; {
f ( year % j == _<number>_ ) {
= s + n % _<number>_ < , , int h ( ) = } _<number>_ > { string r string _<number>_ < { < sum string y number _<number>_ = year for number = _<number>_ = year for ( n , _<number>_ tmp = year , n , _<number>_ = year = _<number>_ = check if ( + ) = i for ( + _<number>_ = _<number>_ > _<number>_ ) > , , year > , ! year int _<number>_ > , year > , ! year int year > _<number>_ ) {
f ( ( i % sum ) == _<number>_ ( sum + _<number>_ ( a int sum ( a int * ( a } + _<number>_ ( sum int sum ( a int * a int int * a int * number int * a int * number ( a } * a int * a int * number ( a } * number ( a int * a int * a int * number ( a } * number ( a int * a int int int int ( * sum ( ( ( ( ( ( ( (
f ( ( i % sum ) == _<number>_ ) printf ( _<string>_ , sum ( _<string>_ ( a ( a } _<number>_ ( a } ( a } _<number>_ ( a } int , , , , ( a } , , , , , ( a } _<number>_ ( a } int , , , , , , , sum = _<number>_ ( sum }
f ( i % sum != _<number>_ ) {
= y + _<number>_ ;
or ( i = n + _<number>_ ; + n ++ ( ( = number ) ++ z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z
rintf ( _<string>_ , r ) ;
rintf ( _<string>_ , sum2 ) ;
= s / _<number>_ ;
rintf ( _<string>_ , _<number>_ * y + x % y ) ;
