--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
@@ -312,11 +312,11 @@ enum HtmlTreeBuilderState {
                         ArrayList<Element> stack = tb.getStack();
                         for (int i = stack.size() - 1; i > 0; i--) {
                             Element el = stack.get(i);
-                            if (el.nodeName().equals("li")) {
+                            if (el.normalName().equals("li")) {
                                 tb.processEndTag("li");
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))
                                 break;
                         }
                         if (tb.inButtonScope("p")) {
@@ -336,7 +336,7 @@ enum HtmlTreeBuilderState {
                     } else if (name.equals("body")) {
                         tb.error(this);
                         ArrayList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals("body"))) {
                             // only in fragment case
                             return false; // ignore
                         } else {
@@ -350,7 +350,7 @@ enum HtmlTreeBuilderState {
                     } else if (name.equals("frameset")) {
                         tb.error(this);
                         ArrayList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals("body"))) {
                             // only in fragment case
                             return false; // ignore
                         } else if (!tb.framesetOk()) {
@@ -369,7 +369,7 @@ enum HtmlTreeBuilderState {
                         if (tb.inButtonScope("p")) {
                             tb.processEndTag("p");
                         }
-                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {
+                        if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings)) {
                             tb.error(this);
                             tb.pop();
                         }
@@ -395,11 +395,11 @@ enum HtmlTreeBuilderState {
                         ArrayList<Element> stack = tb.getStack();
                         for (int i = stack.size() - 1; i > 0; i--) {
                             Element el = stack.get(i);
-                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {
-                                tb.processEndTag(el.nodeName());
+                            if (StringUtil.inSorted(el.normalName(), Constants.DdDt)) {
+                                tb.processEndTag(el.normalName());
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))
                                 break;
                         }
                         if (tb.inButtonScope("p")) {
@@ -528,14 +528,14 @@ enum HtmlTreeBuilderState {
                         else
                             tb.transition(InSelect);
                     } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {
-                        if (tb.currentElement().nodeName().equals("option"))
+                        if (tb.currentElement().normalName().equals("option"))
                             tb.processEndTag("option");
                         tb.reconstructFormattingElements();
                         tb.insert(startTag);
                     } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {
                         if (tb.inScope("ruby")) {
                             tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals("ruby")) {
+                            if (!tb.currentElement().normalName().equals("ruby")) {
                                 tb.error(this);
                                 tb.popStackToBefore("ruby"); // i.e. close up to but not include name
                             }
@@ -571,7 +571,7 @@ enum HtmlTreeBuilderState {
                                 tb.error(this);
                                 tb.removeFromActiveFormattingElements(formatEl);
                                 return true;
-                            } else if (!tb.inScope(formatEl.nodeName())) {
+                            } else if (!tb.inScope(formatEl.normalName())) {
                                 tb.error(this);
                                 return false;
                             } else if (tb.currentElement() != formatEl)
@@ -595,7 +595,7 @@ enum HtmlTreeBuilderState {
                                 }
                             }
                             if (furthestBlock == null) {
-                                tb.popStackToClose(formatEl.nodeName());
+                                tb.popStackToClose(formatEl.normalName());
                                 tb.removeFromActiveFormattingElements(formatEl);
                                 return true;
                             }
@@ -630,7 +630,7 @@ enum HtmlTreeBuilderState {
                                 lastNode = node;
                             }
 
-                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {
+                            if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters)) {
                                 if (lastNode.parent() != null)
                                     lastNode.remove();
                                 tb.insertInFosterParent(lastNode);
@@ -659,7 +659,7 @@ enum HtmlTreeBuilderState {
                             return false;
                         } else {
                             tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
@@ -672,7 +672,7 @@ enum HtmlTreeBuilderState {
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
@@ -696,7 +696,7 @@ enum HtmlTreeBuilderState {
                             return false;
                         } else {
                             tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             // remove currentForm from stack. will shift anything under up.
                             tb.removeFromStack(currentForm);
@@ -708,7 +708,7 @@ enum HtmlTreeBuilderState {
                             return tb.process(endTag);
                         } else {
                             tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
@@ -718,7 +718,7 @@ enum HtmlTreeBuilderState {
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
@@ -728,7 +728,7 @@ enum HtmlTreeBuilderState {
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(Constants.Headings);
                         }
@@ -742,7 +742,7 @@ enum HtmlTreeBuilderState {
                                 return false;
                             }
                             tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
+                            if (!tb.currentElement().normalName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                             tb.clearFormattingElementsToLastMarker();
@@ -765,13 +765,13 @@ enum HtmlTreeBuilderState {
         }
 
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = tb.settings.normalizeTag(t.asEndTag().name());
+            String name = t.asEndTag().normalName; // case insensitive search - goal is to preserve output case, not for the parse to be case sensitive
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() -1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
+                if (node.normalName().equals(name)) {
                     tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+                    if (!name.equals(tb.currentElement().normalName()))
                         tb.error(this);
                     tb.popStackToClose(name);
                     break;
@@ -884,7 +884,7 @@ enum HtmlTreeBuilderState {
                 }
                 return true; // todo: as above todo
             } else if (t.isEOF()) {
-                if (tb.currentElement().nodeName().equals("html"))
+                if (tb.currentElement().normalName().equals("html"))
                     tb.error(this);
                 return true; // stops parsing
             }
@@ -894,7 +894,7 @@ enum HtmlTreeBuilderState {
         boolean anythingElse(Token t, HtmlTreeBuilder tb) {
             tb.error(this);
             boolean processed;
-            if (StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
+            if (StringUtil.in(tb.currentElement().normalName(), "table", "tbody", "tfoot", "thead", "tr")) {
                 tb.setFosterInserts(true);
                 processed = tb.process(t, InBody);
                 tb.setFosterInserts(false);
@@ -923,7 +923,7 @@ enum HtmlTreeBuilderState {
                             if (!isWhitespace(character)) {
                                 // InTable anything else section:
                                 tb.error(this);
-                                if (StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
+                                if (StringUtil.in(tb.currentElement().normalName(), "table", "tbody", "tfoot", "thead", "tr")) {
                                     tb.setFosterInserts(true);
                                     tb.process(new Token.Character().data(character), InBody);
                                     tb.setFosterInserts(false);
@@ -951,7 +951,7 @@ enum HtmlTreeBuilderState {
                     return false;
                 } else {
                     tb.generateImpliedEndTags();
-                    if (!tb.currentElement().nodeName().equals("caption"))
+                    if (!tb.currentElement().normalName().equals("caption"))
                         tb.error(this);
                     tb.popStackToClose("caption");
                     tb.clearFormattingElementsToLastMarker();
@@ -1004,7 +1004,7 @@ enum HtmlTreeBuilderState {
                 case EndTag:
                     Token.EndTag endTag = t.asEndTag();
                     if (endTag.normalName.equals("colgroup")) {
-                        if (tb.currentElement().nodeName().equals("html")) {
+                        if (tb.currentElement().normalName().equals("html")) { // frag case
                             tb.error(this);
                             return false;
                         } else {
@@ -1015,7 +1015,7 @@ enum HtmlTreeBuilderState {
                         return anythingElse(t, tb);
                     break;
                 case EOF:
-                    if (tb.currentElement().nodeName().equals("html"))
+                    if (tb.currentElement().normalName().equals("html"))
                         return true; // stop parsing; frag case
                     else
                         return anythingElse(t, tb);
@@ -1086,7 +1086,7 @@ enum HtmlTreeBuilderState {
                 return false;
             }
             tb.clearStackToTableBodyContext();
-            tb.processEndTag(tb.currentElement().nodeName());
+            tb.processEndTag(tb.currentElement().normalName()); // tbody, tfoot, thead
             return tb.process(t);
         }
 
@@ -1170,7 +1170,7 @@ enum HtmlTreeBuilderState {
                         return false;
                     }
                     tb.generateImpliedEndTags();
-                    if (!tb.currentElement().nodeName().equals(name))
+                    if (!tb.currentElement().normalName().equals(name))
                         tb.error(this);
                     tb.popStackToClose(name);
                     tb.clearFormattingElementsToLastMarker();
@@ -1237,13 +1237,13 @@ enum HtmlTreeBuilderState {
                     if (name.equals("html"))
                         return tb.process(start, InBody);
                     else if (name.equals("option")) {
-                        if (tb.currentElement().nodeName().equals("option"))
+                        if (tb.currentElement().normalName().equals("option"))
                             tb.processEndTag("option");
                         tb.insert(start);
                     } else if (name.equals("optgroup")) {
-                        if (tb.currentElement().nodeName().equals("option"))
+                        if (tb.currentElement().normalName().equals("option"))
                             tb.processEndTag("option");
-                        else if (tb.currentElement().nodeName().equals("optgroup"))
+                        else if (tb.currentElement().normalName().equals("optgroup"))
                             tb.processEndTag("optgroup");
                         tb.insert(start);
                     } else if (name.equals("select")) {
@@ -1266,15 +1266,15 @@ enum HtmlTreeBuilderState {
                     name = end.normalName();
                     switch (name) {
                         case "optgroup":
-                            if (tb.currentElement().nodeName().equals("option") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals("optgroup"))
+                            if (tb.currentElement().normalName().equals("option") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals("optgroup"))
                                 tb.processEndTag("option");
-                            if (tb.currentElement().nodeName().equals("optgroup"))
+                            if (tb.currentElement().normalName().equals("optgroup"))
                                 tb.pop();
                             else
                                 tb.error(this);
                             break;
                         case "option":
-                            if (tb.currentElement().nodeName().equals("option"))
+                            if (tb.currentElement().normalName().equals("option"))
                                 tb.pop();
                             else
                                 tb.error(this);
@@ -1293,7 +1293,7 @@ enum HtmlTreeBuilderState {
                     }
                     break;
                 case EOF:
-                    if (!tb.currentElement().nodeName().equals("html"))
+                    if (!tb.currentElement().normalName().equals("html"))
                         tb.error(this);
                     break;
                 default:
@@ -1380,17 +1380,17 @@ enum HtmlTreeBuilderState {
                         return false;
                 }
             } else if (t.isEndTag() && t.asEndTag().normalName().equals("frameset")) {
-                if (tb.currentElement().nodeName().equals("html")) {
+                if (tb.currentElement().normalName().equals("html")) { // frag
                     tb.error(this);
                     return false;
                 } else {
                     tb.pop();
-                    if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals("frameset")) {
+                    if (!tb.isFragmentParsing() && !tb.currentElement().normalName().equals("frameset")) {
                         tb.transition(AfterFrameset);
                     }
                 }
             } else if (t.isEOF()) {
-                if (!tb.currentElement().nodeName().equals("html")) {
+                if (!tb.currentElement().normalName().equals("html")) {
                     tb.error(this);
                     return true;
                 }
